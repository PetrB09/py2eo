memory > xRuntimeError
memory > x_BasePurePathTest
memory > xpart
memory > xtempfile
memory > xopen
memory > xpattern_num
memory > xsupport
memory > xsorted
memory > xPermissionError
memory > xkwargs
memory > xd
memory > xcm
memory > xk
memory > xFakePath
memory > xImportError
memory > xpickle
memory > xlist
memory > x_BaseFlavourTest
memory > xValueError
memory > xerrno
memory > xstr
memory > xio
memory > xq
memory > xstat
memory > xStrSubclass
memory > xFileNotFoundError
memory > xt
memory > xsocket
memory > xPureWindowsPathTest
memory > xrange
memory > xcollections
memory > xNotImplementedError
memory > xeval
memory > xIndexError
memory > xKeyError
memory > xproto
memory > x_BasePathTest
memory > xpathlib
memory > xprint
memory > xtype
memory > xscandir
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xit
memory > xx
memory > xi
memory > xbool
memory > xPurePosixPathTest
memory > xbytes
memory > xtuple
memory > xargs
memory > xOSError
memory > xTESTFN
memory > xmock
memory > xos
memory > xUnicodeEncodeError
memory > xe
memory > xunittest
memory > xquote_from_bytes
memory > xhash
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xenv
memory > xlen
memory > xj
memory > xisinstance
memory > xFileExistsError
memory > xTypeError
memory > xpathstr
memory > x__name__
[] > test_pathlib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_is_file
        memory > xtest_truediv
        memory > xtest_mkdir
        memory > xtest_eq
        memory > xtest_suffix_common
        memory > xtest_is_fifo_true
        memory > xtest_chmod
        memory > xtest_mkdir_concurrent_parent_creation
        memory > xtest_rename
        memory > xtest_div
        memory > xtest_cwd
        memory > x_test_home
        memory > xtest_touch_common
        memory > xtest_group
        memory > xjoin
        memory > xtest_is_char_device_true
        memory > x_check_complex_symlinks
        memory > xtest_match
        memory > x__truediv__
        memory > xequivalences
        memory > xtest_unsupported_flavour
        memory > xtest_different_flavours_unequal
        memory > xtest_parents_common
        memory > xtest_mkdir_exist_ok_with_parent
        memory > x_check_parse_parts
        memory > xtest_suffixes_common
        memory > xtest_parts_common
        memory > xtest_glob_permissions
        memory > xtest_home
        memory > xtest_lstat
        memory > xtest_unlink
        memory > xtest_match_common
        memory > xtest_mkdir_with_child_file
        memory > xtest_lstat_nosymlink
        memory > xtest_eq_common
        memory > xdirlink
        memory > xpwd
        memory > xtest_glob
        memory > x_check_resolve_relative
        memory > xtest_resolve_root
        memory > x_check_resolve
        memory > xtest_resolve_common
        memory > xtest_is_block_device_false
        memory > xtest_relative_to
        memory > xtest_mkdir_with_unknown_drive
        memory > xtest_glob_empty_pattern
        memory > xBASE
        memory > xtest_unlink_missing_ok
        memory > xtest_repr_common
        memory > xtest_open_mode
        memory > xonly_posix
        memory > xtest_resolve_dot
        memory > xtest_is_reserved
        memory > xtest_touch_mode
        memory > xgrp
        memory > xtest_open_common
        memory > xtest_with_suffix_common
        memory > xtest_mkdir_exist_ok_root
        memory > xtest_owner
        memory > xtest_parent
        memory > xtest_constructor_common
        memory > xtest_as_uri_common
        memory > xtest_str_common
        memory > xtest_is_socket_true
        memory > xtest_rglob
        memory > xsetUp
        memory > xtest_rglob_symlink_loop
        memory > xtest_stem_common
        memory > xtest_iterdir_symlink
        memory > xtest_is_dir
        memory > xtest_splitroot
        memory > x_check_str_subclass
        memory > xtest_div_common
        memory > xtest_as_bytes_common
        memory > xtest_complex_symlinks_absolute
        memory > xtest_root
        memory > xassertFileNotFound
        memory > xtest_drive
        memory > xassertSame
        memory > xtest_touch_nochange
        memory > xtest_samefile
        memory > xtest_concrete_class
        memory > xtest_anchor
        memory > xtest_is_socket_false
        memory > xtest_name_common
        memory > xtest_with_suffix
        memory > xtest_stat
        memory > xtest_replace
        memory > xtest_rmdir
        memory > xtest_parse_parts
        memory > xtest_join_common
        memory > xtest_anchor_common
        memory > xtest_is_fifo_false
        memory > x__rtruediv__
        memory > xtest_pickling_common
        memory > xtest_suffix
        memory > xtest_glob_many_open_files
        memory > xtest_name
        memory > xtest_fspath_common
        memory > xtest_join
        memory > xtest_parts_interning
        memory > x_check_str
        memory > xtest_parent_common
        memory > xtest_glob_dotdot
        memory > xtest_str
        memory > xtest_stem
        memory > xtest_link_to_not_implemented
        memory > xrel_join
        memory > xtest_relative_to_common
        memory > xtest_iterdir
        memory > xtest_resolve_loop
        memory > xtest_complex_symlinks_relative
        memory > x_test_cwd
        memory > xtest_with_name
        memory > xtest_read_write_bytes
        memory > xonly_nt
        memory > xtest_mkdir_exist_ok
        memory > xcls
        memory > xtest_link_to
        memory > xtest_drive_common
        memory > xtest_is_mount
        memory > xtest_with_name_common
        memory > x_check_symlink_loop
        memory > xtest_equivalences
        memory > xtest_handling_bad_descriptor
        memory > xtest_with
        memory > xtest_parse_parts_common
        memory > xtest_as_uri_non_ascii
        memory > x__init__
        memory > xtest_read_write_text
        memory > xtest_root_common
        memory > xflavour
        memory > xtest_expanduser_common
        memory > xtest_mkdir_parents
        memory > xtest_glob_common
        memory > xtest_rglob_common
        memory > xtest_str_subclass
        memory > xtest_parts
        memory > xtest_is_char_device_false
        memory > xtest_mkdir_no_parents_file
        memory > xassertEqualNormCase
        memory > xtest_exists
        memory > xtest_empty_path
        memory > xtest_suffixes
        memory > xtest_complex_symlinks_relative_dot_dot
        memory > x_check_resolve_absolute
        memory > xtest_is_symlink
        memory > xtest_symlink_to
        memory > xtest_parents
        memory > xtest_expanduser
        memory > xtest_different_flavours_unordered
        memory > xtest_as_posix_common
        memory > xtest_as_uri
        memory > xtest_ordering_common
        memory > xtest_rtruediv
        memory > xtest_iterdir_nodir
        memory > xtest_str_subclass_common
        memory > xtest_is_absolute
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((xgrp)) ((xpwd)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xobject)))
              seq
                x_check_parse_parts.write
                  [xself xarg xexpected]
                    memory > xactual
                    memory > xsep
                    memory > xaltsep
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xself).xflavour).xparse_parts)
                        xsep.write (((xself).xflavour).xsep)
                        xaltsep.write (((xself).xflavour).xaltsep)
                        xactual.write (((xf)) ((((unsupported)) (((((xx).xreplace)) ("/") ((xsep)))) ((xx)) ((xarg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        (xaltsep).if
                          seq
                            xactual.write (((xf)) ((((unsupported)) (((((xx).xreplace)) ("/") ((xaltsep)))) ((xx)) ((xarg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_parse_parts_common.write
                  [xself]
                    memory > xsep
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).x_check_parse_parts)
                        xsep.write (((xself).xflavour).xsep)
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ((((unsupported)) ("") ("") ((((unsupported)) 0)))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a/"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a/b"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a/b/"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("b/c") ("d"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b") ("c") ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("b//c") ("d"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b") ("c") ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("b/c/") ("d"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b") ("c") ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("."))) ((((unsupported)) ("") ("") ((((unsupported)) 0)))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) (".") (".") ("b"))) ((((unsupported)) ("") ("") ((((unsupported)) ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") (".") ("b"))) ((((unsupported)) ("") ("") ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") (".") ("."))) ((((unsupported)) ("") ("") ((((unsupported)) ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("/a/b"))) ((((unsupported)) ("") ((xsep)) ((((unsupported)) ((xsep)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("/a") ("b"))) ((((unsupported)) ("") ((xsep)) ((((unsupported)) ((xsep)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("/a/") ("b"))) ((((unsupported)) ("") ((xsep)) ((((unsupported)) ((xsep)) ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("/b") ("c"))) ((((unsupported)) ("") ((xsep)) ((((unsupported)) ((xsep)) ("b") ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("/b") ("/c"))) ((((unsupported)) ("") ((xsep)) ((((unsupported)) ((xsep)) ("c"))))))
            (((unsupported)) ((x_BaseFlavourTest)) (((xunittest).xTestCase)))
              seq
                xflavour.write ((xpathlib).x_posix_flavour)
                xtest_parse_parts.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).x_check_parse_parts)
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//a") ("b"))) ((((unsupported)) ("") ("//") ((((unsupported)) ("//") ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("///a") ("b"))) ((((unsupported)) ("") ("/") ((((unsupported)) ("/") ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("////a") ("b"))) ((((unsupported)) ("") ("/") ((((unsupported)) ("/") ("a") ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("c:a"))) ((((unsupported)) ("") ("") ((((unsupported)) ("c:a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("") ((((unsupported)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("") ((((unsupported)) ((((unsupported)) 0)))))))
                xtest_splitroot.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xself).xflavour).xsplitroot)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (""))) ((((unsupported)) ("") ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("a"))) ((((unsupported)) ("") ("") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("a/b"))) ((((unsupported)) ("") ("") ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("a/b/"))) ((((unsupported)) ("") ("") ("a/b/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("/a"))) ((((unsupported)) ("") ("/") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("/a/b"))) ((((unsupported)) ("") ("/") ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("/a/b/"))) ((((unsupported)) ("") ("/") ("a/b/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("//a"))) ((((unsupported)) ("") ("//") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("///a"))) ((((unsupported)) ("") ("/") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("///a/b"))) ((((unsupported)) ("") ("/") ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("c:/a/b"))) ((((unsupported)) ("") ("") ("c:/a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("") ((((unsupported)) 0)))))
            (((unsupported)) ((x_BaseFlavourTest)) (((xunittest).xTestCase)))
              seq
                xflavour.write ((xpathlib).x_windows_flavour)
                xtest_parse_parts.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).x_check_parse_parts)
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("c:"))) ((((unsupported)) ("c:") ("") ((((unsupported)) ("c:"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("c:/"))) ((((unsupported)) ("c:") ("\\") ((((unsupported)) ("c:\\"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("/"))) ((((unsupported)) ("") ("\\") ((((unsupported)) ("\\"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("c:a"))) ((((unsupported)) ("c:") ("") ((((unsupported)) ("c:") ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("c:/a"))) ((((unsupported)) ("c:") ("\\") ((((unsupported)) ("c:\\") ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("/a"))) ((((unsupported)) ("") ("\\") ((((unsupported)) ("\\") ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//a/b"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//a/b/"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//a/b/c"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("Z:b") ("c"))) ((((unsupported)) ("Z:") ("") ((((unsupported)) ("Z:") ("b") ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("Z:/b") ("c"))) ((((unsupported)) ("Z:") ("\\") ((((unsupported)) ("Z:\\") ("b") ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("//b/c") ("d"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("Z://b//c/") ("d/"))) ((((unsupported)) ("Z:") ("\\") ((((unsupported)) ("Z:\\") ("b") ("c") ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("//b/c//") ("d"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/c:/"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/c:/a"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("a"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/c:/a") ("/b"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("b"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/UNC/b/c"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/UNC/b/c/d"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("d"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("a") ("/b") ("c"))) ((((unsupported)) ("") ("\\") ((((unsupported)) ("\\") ("b") ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("Z:/a") ("/b") ("c"))) ((((unsupported)) ("Z:") ("\\") ((((unsupported)) ("Z:\\") ("b") ("c"))))))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ("//?/Z:/a") ("/b") ("c"))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) ((((unsupported)) 0)) ("b") ("c"))))))
                xtest_splitroot.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xself).xflavour).xsplitroot)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (""))) ((((unsupported)) ("") ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("a"))) ((((unsupported)) ("") ("") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("c:") ("") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("c:") ("\\") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("c:") ("\\") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("c:") ("\\") ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) 0)) ("\\") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) 0)) ("\\") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) 0)) ("\\") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) 0)))) ((((unsupported)) ("") ("\\") ("a"))))
            (((unsupported)) ((xobject)))
              seq
                xequivalences.write (((unsupported)) ("a/b") ((((unsupported)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("a/") ("b"))) ((((unsupported)) ("a") ("b/"))) ((((unsupported)) ("a/") ("b/"))) ((((unsupported)) ("a/b/"))) ((((unsupported)) ("a//b"))) ((((unsupported)) ("a//b//"))) ((((unsupported)) ("") ("a") ("b"))) ((((unsupported)) ("a") ("") ("b"))) ((((unsupported)) ("a") ("b") (""))))) ("/b/c/d") ((((unsupported)) ((((unsupported)) ("a") ("/b/c") ("d"))) ((((unsupported)) ("a") ("///b//c") ("d/"))) ((((unsupported)) ("/a") ("/b/c") ("d"))) ((((unsupported)) ("/") ("b") ("") ("c/d"))) ((((unsupported)) ("/") ("") ("b/c/d"))) ((((unsupported)) ("") ("/b/c/d"))))))
                xsetUp.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ("a"))
                        (((unsupported)) (((xself).xflavour)) (((xp).x_flavour)))
                        (((unsupported)) (((xself).xsep)) ((((xself).xflavour).xsep)))
                        (((unsupported)) (((xself).xaltsep)) ((((xself).xflavour).xaltsep)))
                xtest_constructor_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xp)) ((xP)))
                        bogusForceDataize.write (((xP)) ("a") ("b") ("c"))
                        bogusForceDataize.write (((xP)) ("/a") ("b") ("c"))
                        bogusForceDataize.write (((xP)) ("a/b/c"))
                        bogusForceDataize.write (((xP)) ("/a/b/c"))
                        bogusForceDataize.write (((xP)) ((((xFakePath)) ("a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ((((xP)) ("a"))))) ((((xP)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ((((xP)) ("a"))) ("b"))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ((((xP)) ("a"))) ((((xP)) ("b"))))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ((((xP)) ("a"))) ((((xP)) ("b"))) ((((xP)) ("c"))))) ((((xP)) ((((xFakePath)) ("a/b/c"))))))
                x_check_str_subclass.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xstr)))
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((((unsupported)) ((((unsupported)) ((((xStrSubclass)) ((xx)))) ((xx)) ((xargs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((((xP)) ((((unsupported)) ((xargs)))))))
                        (((unsupported)) ((xpart)) (((xp).xparts)))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xpart)))) ((xstr)))
                xtest_str_subclass_common.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) (""))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("."))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("a"))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("a/b.txt"))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("/a/b.txt"))
                xtest_join_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b"))
                        xpp.write ((((xp).xjoinpath)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xpp)))) ((((xtype)) ((xp)))))
                        xpp.write ((((xp).xjoinpath)) ("c") ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c/d"))))
                        xpp.write ((((xp).xjoinpath)) ((((xP)) ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c"))))
                        xpp.write ((((xp).xjoinpath)) ("/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("/c"))))
                xtest_div_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b"))
                        xpp.write ((xp).div "c")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xpp)))) ((((xtype)) ((xp)))))
                        xpp.write ((xp).div "c/d")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c/d"))))
                        xpp.write (((xp).div "c").div "d")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c/d"))))
                        xpp.write (("c".div (xp)).div "d")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("c/a/b/d"))))
                        xpp.write ((xp).div (((xP)) ("c")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("a/b/c"))))
                        xpp.write ((xp).div "/c")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("/c"))))
                x_check_str.write
                  [xself xexpected xargs]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) (((((xexpected).xreplace)) ("/") (((xself).xsep)))))
                xtest_str_common.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xpathstr)) ((((unsupported)) ("a") ("a/b") ("a/b/c") ("/") ("/a/b") ("/a/b/c"))))
                          bogusForceDataize.write ((((xself).x_check_str)) ((xpathstr)) ((((unsupported)) ((xpathstr)))))
                        bogusForceDataize.write ((((xself).x_check_str)) (".") ((((unsupported)) (""))))
                xtest_as_posix_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) ((xpathstr)) ((((unsupported)) ("a") ("a/b") ("a/b/c") ("/") ("/a/b") ("/a/b/c"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ((xpathstr))).xas_posix)) 0)) ((xpathstr)))
                xtest_as_bytes_common.write
                  [xself]
                    memory > xsep
                    memory > xP
                    seq > @
                      seq
                        xsep.write ((((xos).xfsencode)) (((xself).xsep)))
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbytes)) ((((xP)) ("a/b"))))) ((("a".add (xsep)).add "b")))
                xtest_as_uri_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((((xP)) ("a")).xas_uri)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((((xP)) 0).xas_uri)) 0)
                xtest_repr_common.write
                  [xself]
                    memory > xclsname
                    memory > xp
                    memory > xr
                    memory > xinner
                    memory > xq
                    seq > @
                      (((unsupported)) ((xpathstr)) ((((unsupported)) ("a") ("a/b") ("a/b/c") ("/") ("/a/b") ("/a/b/c"))))
                        seq
                          xp.write ((((xself).xcls)) ((xpathstr)))
                          xclsname.write (((xp).x__class__).x__name__)
                          xr.write (((xrepr)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xstartswith)) (((xclsname).add "(")))) ((xr)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xendswith)) (")"))) ((xr)))
                          xinner.write (((unsupported)) ((xr)) ((((unsupported)) (((((xlen)) ((xclsname))).add 1)) ((1.neg)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((xinner)))) (((((xp).xas_posix)) 0)))
                          xq.write (((xeval)) ((xr)) (((xpathlib).x__dict__)))
                          bogusForceDataize.write ((((xself).xassertIs)) (((xq).x__class__)) (((xp).x__class__)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xq)))) ((xr)))
                xtest_eq_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("a/b"))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("a/b"))) ((((xP)) ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("a/b"))) ((((xP)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("a/b"))) ((((xP)) ("/a/b"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("a/b"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("/a/b"))) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) 0)) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) 0)) (""))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) 0)) ((xint)))
                xtest_match_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a")).xmatch)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a")).xmatch)) ("."))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("b.py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("a/b.py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a/b.py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a.py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b/py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a.py")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py/c")).xmatch)) ("b.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("b.py")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("a/b.py")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a/b.py")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.pyc")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b./py")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py/c")).xmatch)) ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("ab/c.py")).xmatch)) ("a*/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/d/ab/c.py")).xmatch)) ("a*/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a.py")).xmatch)) ("a*/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/dab/c.py")).xmatch)) ("a*/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("ab/c.py/d")).xmatch)) ("a*/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a/b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a/b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a/b.py")).xmatch)) ("/a/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/ab.py")).xmatch)) ("/a/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a/b/c.py")).xmatch)) ("/a/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a/b/c.py")).xmatch)) ("/**/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a/b/c.py")).xmatch)) ("/a/**/*.py"))))
                xtest_ordering_common.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xb
                    memory > xP
                    memory > xassertLess
                    memory > xa
                    seq > @
                      seq
                        xassertLess.write
                          [xa xb]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertLess)) ((xa)) ((xb)))
                                bogusForceDataize.write ((((xself).xassertGreater)) ((xb)) ((xa)))
                        xP.write ((xself).xcls)
                        xa.write (((xP)) ("a"))
                        xb.write (((xP)) ("a/b"))
                        xc.write (((xP)) ("abc"))
                        xd.write (((xP)) ("b"))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xb)))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xc)))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xd)))
                        bogusForceDataize.write (((xassertLess)) ((xb)) ((xc)))
                        bogusForceDataize.write (((xassertLess)) ((xc)) ((xd)))
                        xP.write ((xself).xcls)
                        xa.write (((xP)) ("/a"))
                        xb.write (((xP)) ("/a/b"))
                        xc.write (((xP)) ("/abc"))
                        xd.write (((xP)) ("/b"))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xb)))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xc)))
                        bogusForceDataize.write (((xassertLess)) ((xa)) ((xd)))
                        bogusForceDataize.write (((xassertLess)) ((xb)) ((xc)))
                        bogusForceDataize.write (((xassertLess)) ((xc)) ((xd)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_parts_common.write
                  [xself]
                    memory > xsep
                    memory > xparts
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xsep.write ((xself).xsep)
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b"))
                        xparts.write ((xp).xparts)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparts)) ((((unsupported)) ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xparts)) (((xp).xparts)))
                        xp.write (((xP)) ("/a/b"))
                        xparts.write ((xp).xparts)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparts)) ((((unsupported)) ((xsep)) ("a") ("b"))))
                xtest_fspath_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b"))
                        bogusForceDataize.write ((((xself).x_check_str)) (((((xp).x__fspath__)) 0)) ((((unsupported)) ("a/b"))))
                        bogusForceDataize.write ((((xself).x_check_str)) (((((xos).xfspath)) ((xp)))) ((((unsupported)) ("a/b"))))
                xtest_equivalences.write
                  [xself]
                    memory > xtuples
                    memory > xpcanon
                    memory > xposix
                    memory > xp
                    memory > xcanon
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xk)) ((xtuples)))) ((((((xself).xequivalences).xitems)) 0)))
                        seq
                          xcanon.write ((((xk).xreplace)) ("/") (((xself).xsep)))
                          xposix.write ((((xk).xreplace)) (((xself).xsep)) ("/"))
                          ((xcanon).neq (xposix)).if
                            seq
                              xtuples.write ((xtuples).add (((unsupported)) ((((xtuple)) ((((unsupported)) (((((xpart).xreplace)) ("/") (((xself).xsep)))) ((xpart)) ((xt)))))) ((xt)) ((xtuples))))
                              bogusForceDataize.write ((((xtuples).xappend)) ((((unsupported)) ((xposix)))))
                          xpcanon.write ((((xself).xcls)) ((xcanon)))
                          (((unsupported)) ((xt)) ((xtuples)))
                            seq
                              xp.write ((((xself).xcls)) ((((unsupported)) ((xt)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xpcanon)) (((("failed with args {}".xformat)) ((xt)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xp)))) ((((xhash)) ((xpcanon)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((xcanon)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xas_posix)) 0)) ((xposix)))
                xtest_parent_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xparent)) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xparent).xparent)) ((((xP)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xparent).xparent).xparent)) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xparent).xparent).xparent).xparent)) ((((xP)) 0)))
                        xp.write (((xP)) ("/a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xparent)) ((((xP)) ("/a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xparent).xparent)) ((((xP)) ("/a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xparent).xparent).xparent)) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xparent).xparent).xparent).xparent)) ((((xP)) ("/"))))
                xtest_parents_common.write
                  [xself]
                    memory > xpar
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b/c"))
                        xpar.write ((xp).xparents)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpar)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (0))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (1))) ((((xP)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (2))) ((((xP)) ("."))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xpar)))) ((((unsupported)) ((((xP)) ("a/b"))) ((((xP)) ("a"))) ((((xP)) ("."))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) (3))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) ((xpar)) (0))) ((xp)))
                        xp.write (((xP)) ("/a/b/c"))
                        xpar.write ((xp).xparents)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpar)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (0))) ((((xP)) ("/a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (1))) ((((xP)) ("/a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (2))) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xpar)))) ((((unsupported)) ((((xP)) ("/a/b"))) ((((xP)) ("/a"))) ((((xP)) ("/"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) (3))
                xtest_drive_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xdrive)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xdrive)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xdrive)) (""))
                xtest_root_common.write
                  [xself]
                    memory > xsep
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xsep.write ((xself).xsep)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xroot)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xroot)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xroot)) ((xsep)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xroot)) ((xsep)))
                xtest_anchor_common.write
                  [xself]
                    memory > xsep
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xsep.write ((xself).xsep)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xanchor)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xanchor)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xanchor)) ((xsep)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xanchor)) ((xsep)))
                xtest_name_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) (".")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xname)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xname)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b/.")).xname)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.py")).xname)) ("b.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b.py")).xname)) ("b.py"))
                xtest_suffix_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) (".")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("..")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b/.")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.py")).xsuffix)) (".py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b.py")).xsuffix)) (".py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hgrc")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/.hgrc")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hg.rc")).xsuffix)) (".rc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/.hg.rc")).xsuffix)) (".rc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.tar.gz")).xsuffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b.tar.gz")).xsuffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/Some name. Ending with a dot.")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/Some name. Ending with a dot.")).xsuffix)) (""))
                xtest_suffixes_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) (".")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b/.")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.py")).xsuffixes)) ((((unsupported)) (".py"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b.py")).xsuffixes)) ((((unsupported)) (".py"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hgrc")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/.hgrc")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hg.rc")).xsuffixes)) ((((unsupported)) (".rc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/.hg.rc")).xsuffixes)) ((((unsupported)) (".rc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.tar.gz")).xsuffixes)) ((((unsupported)) (".tar") (".gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b.tar.gz")).xsuffixes)) ((((unsupported)) (".tar") (".gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/Some name. Ending with a dot.")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/Some name. Ending with a dot.")).xsuffixes)) ((((unsupported)) 0)))
                xtest_stem_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) (".")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("..")).xstem)) (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b")).xstem)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.py")).xstem)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hgrc")).xstem)) (".hgrc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/.hg.rc")).xstem)) (".hg"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/b.tar.gz")).xstem)) ("b.tar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("a/Some name. Ending with a dot.")).xstem)) ("Some name. Ending with a dot."))
                xtest_with_name_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/b")).xwith_name)) ("d.xml"))) ((((xP)) ("a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b")).xwith_name)) ("d.xml"))) ((((xP)) ("/a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/b.py")).xwith_name)) ("d.xml"))) ((((xP)) ("a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b.py")).xwith_name)) ("d.xml"))) ((((xP)) ("/a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/Dot ending.")).xwith_name)) ("d.xml"))) ((((xP)) ("a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/Dot ending.")).xwith_name)) ("d.xml"))) ((((xP)) ("/a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) (".")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("/")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_name)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_name)) ("/c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_name)) ("c/"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_name)) ("c/d"))
                xtest_with_suffix_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/b")).xwith_suffix)) (".gz"))) ((((xP)) ("a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b")).xwith_suffix)) (".gz"))) ((((xP)) ("/a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/b.py")).xwith_suffix)) (".gz"))) ((((xP)) ("a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b.py")).xwith_suffix)) (".gz"))) ((((xP)) ("/a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("a/b.py")).xwith_suffix)) (""))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b")).xwith_suffix)) (""))) ((((xP)) ("/a/b"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) (".")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("/")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("/"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("/.gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("c/d"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) (".c/.d"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ("./.d"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) (".d/."))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("a/b")).xwith_suffix)) ((((unsupported)) ((((xself).xflavour).xsep)) ("d"))))
                xtest_relative_to_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("a/b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xp).xrelative_to)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xp).xrelative_to)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) 0)))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) (""))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("a"))))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("a"))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("a/"))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("a/b"))))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("a/b"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("a") ("b"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("a/c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/a"))))
                        xp.write (((xP)) ("/a/b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("/"))))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("/"))) ((((xP)) ("a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("/a"))))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("/a"))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("/a/"))) ((((xP)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("/a/b"))))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("/a/b"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/a/c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("a"))))
                xtest_pickling_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    memory > xdumped
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("/a/b"))
                        (((unsupported)) ((xproto)) ((((xrange)) (0) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdumped.write ((((xpickle).xdumps)) ((xp)) ((xproto)))
                            xpp.write ((((xpickle).xloads)) ((xdumped)))
                            bogusForceDataize.write ((((xself).xassertIs)) (((xpp).x__class__)) (((xp).x__class__)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xpp)))) ((((xhash)) ((xp)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xpp)))) ((((xstr)) ((xp)))))
            (((unsupported)) ((x_BasePurePathTest)) (((xunittest).xTestCase)))
              seq
                xcls.write ((xpathlib).xPurePosixPath)
                xtest_root.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("/a/b")).xroot)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("///a/b")).xroot)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b")).xroot)) ("//"))
                xtest_eq.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("a/b"))) ((((xP)) ("A/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("/a"))) ((((xP)) ("///a"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("/a"))) ((((xP)) ("//a"))))
                xtest_as_uri.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/")).xas_uri)) 0)) ("file:///"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b.c")).xas_uri)) 0)) ("file:///a/b.c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/b%#c")).xas_uri)) 0)) ("file:///a/b%25%23c"))
                xtest_as_uri_non_ascii.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        (((unsupported)) ((xUnicodeEncodeError)))
                          bogusForceDataize.write ((((xos).xfsencode)) ("xe9"))
                          bogusForceDataize.write ((((xself).xskipTest)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("/a/bxe9")).xas_uri)) 0)) (("file:///a/b".add (((xquote_from_bytes)) (((((xos).xfsencode)) ("xe9")))))))
                xtest_match.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("A.py")).xmatch)) ("a.PY"))))
                xtest_is_absolute.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) 0).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("/a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a/b")).xis_absolute)) 0)))
                xtest_is_reserved.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/foo/bar")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/dev/con/PRN/NUL")).xis_reserved)) 0)))
                xtest_join.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("//a"))
                        xpp.write ((((xp).xjoinpath)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("//a/b"))))
                        xpp.write ((((((xP)) ("/a")).xjoinpath)) ("//c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("//c"))))
                        xpp.write ((((((xP)) ("//a")).xjoinpath)) ("/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("/c"))))
                xtest_div.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("//a"))
                        xpp.write ((xp).div "b")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("//a/b"))))
                        xpp.write ((((xP)) ("/a")).div "//c")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("//c"))))
                        xpp.write ((((xP)) ("//a")).div "/c")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("/c"))))
            (((unsupported)) ((x_BasePurePathTest)) (((xunittest).xTestCase)))
              seq
                xcls.write ((xpathlib).xPureWindowsPath)
                xequivalences.write (((((x_BasePurePathTest).xequivalences).xcopy)) 0)
                bogusForceDataize.write ((((xequivalences).xupdate)) ((((unsupported)) ("c:a") ((((unsupported)) ((((unsupported)) ("c:") ("a"))) ((((unsupported)) ("c:") ("a/"))) ((((unsupported)) ("/") ("c:") ("a"))))) ("c:/a") ((((unsupported)) ((((unsupported)) ("c:/") ("a"))) ((((unsupported)) ("c:") ("/") ("a"))) ((((unsupported)) ("c:") ("/a"))) ((((unsupported)) ("/z") ("c:/") ("a"))) ((((unsupported)) ("//x/y") ("c:/") ("a"))))) ("//a/b/") ((((unsupported)) ((((unsupported)) ("//a/b"))))) ("//a/b/c") ((((unsupported)) ((((unsupported)) ("//a/b") ("c"))) ((((unsupported)) ("//a/b/") ("c"))))))))
                xtest_str.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ("a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((unsupported)) 0)))
                        xp.write ((((xself).xcls)) ("c:/a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((unsupported)) 0)))
                        xp.write ((((xself).xcls)) ("//a/b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((unsupported)) 0)))
                        xp.write ((((xself).xcls)) ("//a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((unsupported)) 0)))
                        xp.write ((((xself).xcls)) ("//a/b/c/d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((unsupported)) 0)))
                xtest_str_subclass.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("c:"))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("c:a"))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ("c:\\"))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_check_str_subclass)) ((((unsupported)) 0)))
                xtest_eq.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("c:a/b"))) ((((xP)) ("c:a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("c:a/b"))) ((((xP)) ("c:") ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("c:a/b"))) ((((xP)) ("d:a/b"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("c:a/b"))) ((((xP)) ("c:/a/b"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xP)) ("/a/b"))) ((((xP)) ("c:/a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("a/B"))) ((((xP)) ("A/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("C:a/B"))) ((((xP)) ("c:A/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xP)) ("//Some/SHARE/a/B"))) ((((xP)) ("//somE/share/A/b"))))
                xtest_as_uri.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((((xP)) ("/a/b")).xas_uri)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((((xP)) ("c:a/b")).xas_uri)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/")).xas_uri)) 0)) ("file:///c:/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/b.c")).xas_uri)) 0)) ("file:///c:/a/b.c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/b%#c")).xas_uri)) 0)) ("file:///c:/a/b%25%23c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/bxe9")).xas_uri)) 0)) ("file:///c:/a/b%C3%A9"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("//some/share/")).xas_uri)) 0)) ("file://some/share/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("//some/share/a/b.c")).xas_uri)) 0)) ("file://some/share/a/b.c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("//some/share/a/b%#cxe9")).xas_uri)) 0)) ("file://some/share/a/b%25%23c%C3%A9"))
                xtest_match_common.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/b.py")).xmatch)) ("c:*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/b.py")).xmatch)) ("c:/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("d:/b.py")).xmatch)) ("c:/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py")).xmatch)) ("c:*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("b.py")).xmatch)) ("c:/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("c:b.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("c:b.py")).xmatch)) ("c:/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/b.py")).xmatch)) ("c:*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/b.py")).xmatch)) ("c:/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//some/share/a.py")).xmatch)) ("/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//some/share/a.py")).xmatch)) ("//some/share/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("//other/share/a.py")).xmatch)) ("//some/share/*.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("//some/share/a/b.py")).xmatch)) ("//some/share/*.py"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("B.py")).xmatch)) ("b.PY"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/a/B.Py")).xmatch)) ("C:/A/*.pY"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//Some/Share/B.Py")).xmatch)) ("//somE/sharE/*.pY"))))
                xtest_ordering_common.write
                  [xself]
                    memory > xassertOrderedEqual
                    memory > xp
                    memory > xP
                    memory > xq
                    seq > @
                      seq
                        xassertOrderedEqual.write
                          [xa xb]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertLessEqual)) ((xa)) ((xb)))
                                bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xb)) ((xa)))
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("c:A/b"))
                        xq.write (((xP)) ("C:a/B"))
                        bogusForceDataize.write (((xassertOrderedEqual)) ((xp)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xp).less (xq))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xp).greater (xq))))
                        xp.write (((xP)) ("//some/Share/A/b"))
                        xq.write (((xP)) ("//Some/SHARE/a/B"))
                        bogusForceDataize.write (((xassertOrderedEqual)) ((xp)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xp).less (xq))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xp).greater (xq))))
                xtest_parts.write
                  [xself]
                    memory > xparts
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("c:a/b"))
                        xparts.write ((xp).xparts)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparts)) ((((unsupported)) ("c:") ("a") ("b"))))
                        xp.write (((xP)) ("c:/a/b"))
                        xparts.write ((xp).xparts)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparts)) ((((unsupported)) ("c:\\") ("a") ("b"))))
                        xp.write (((xP)) ("//a/b/c/d"))
                        xparts.write ((xp).xparts)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparts)) ((((unsupported)) ((((unsupported)) 0)) ("c") ("d"))))
                xtest_parent.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("z:a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xparent)) ((((xP)) ("z:a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xparent).xparent)) ((((xP)) ("z:a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xparent).xparent).xparent)) ((((xP)) ("z:"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xparent).xparent).xparent).xparent)) ((((xP)) ("z:"))))
                        xp.write (((xP)) ("z:/a/b/c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xparent)) ((((xP)) ("z:/a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xparent).xparent)) ((((xP)) ("z:/a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xparent).xparent).xparent)) ((((xP)) ("z:/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xparent).xparent).xparent).xparent)) ((((xP)) ("z:/"))))
                        xp.write (((xP)) ("//a/b/c/d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xparent)) ((((xP)) ("//a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xparent).xparent)) ((((xP)) ("//a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xparent).xparent).xparent)) ((((xP)) ("//a/b"))))
                xtest_parents.write
                  [xself]
                    memory > xpar
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("z:a/b/"))
                        xpar.write ((xp).xparents)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpar)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (0))) ((((xP)) ("z:a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (1))) ((((xP)) ("z:"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xpar)))) ((((unsupported)) ((((xP)) ("z:a"))) ((((xP)) ("z:"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) (2))
                        xp.write (((xP)) ("z:/a/b/"))
                        xpar.write ((xp).xparents)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpar)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (0))) ((((xP)) ("z:/a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (1))) ((((xP)) ("z:/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xpar)))) ((((unsupported)) ((((xP)) ("z:/a"))) ((((xP)) ("z:/"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) (2))
                        xp.write (((xP)) ("//a/b/c/d"))
                        xpar.write ((xp).xparents)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpar)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (0))) ((((xP)) ("//a/b/c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpar)) (1))) ((((xP)) ("//a/b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xpar)))) ((((unsupported)) ((((xP)) ("//a/b/c"))) ((((xP)) ("//a/b"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((xpar)) (2))
                xtest_drive.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xdrive)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xdrive)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xdrive)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b/")).xdrive)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b")).xdrive)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/")).xdrive)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/c/d")).xdrive)) ((((unsupported)) 0)))
                xtest_root.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xroot)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xroot)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xroot)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b/")).xroot)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b")).xroot)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/")).xroot)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/c/d")).xroot)) ("\\"))
                xtest_anchor.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xanchor)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xanchor)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xanchor)) ("c:\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b/")).xanchor)) ("c:\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b")).xanchor)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/")).xanchor)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//a/b/c/d")).xanchor)) ((((unsupported)) 0)))
                xtest_name.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xname)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b")).xname)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.py")).xname)) ("b.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b.py")).xname)) ("b.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php")).xname)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php/a/b")).xname)) ("b"))
                xtest_suffix.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.py")).xsuffix)) (".py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b.py")).xsuffix)) (".py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hgrc")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/.hgrc")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hg.rc")).xsuffix)) (".rc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/.hg.rc")).xsuffix)) (".rc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.tar.gz")).xsuffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b.tar.gz")).xsuffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/Some name. Ending with a dot.")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/Some name. Ending with a dot.")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php")).xsuffix)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php/a/b")).xsuffix)) (""))
                xtest_suffixes.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.py")).xsuffixes)) ((((unsupported)) (".py"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b.py")).xsuffixes)) ((((unsupported)) (".py"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hgrc")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/.hgrc")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hg.rc")).xsuffixes)) ((((unsupported)) (".rc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/.hg.rc")).xsuffixes)) ((((unsupported)) (".rc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.tar.gz")).xsuffixes)) ((((unsupported)) (".tar") (".gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/b.tar.gz")).xsuffixes)) ((((unsupported)) (".tar") (".gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("//My.py/Share.php/a/b")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/Some name. Ending with a dot.")).xsuffixes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/a/Some name. Ending with a dot.")).xsuffixes)) ((((unsupported)) 0)))
                xtest_stem.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:.")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:..")).xstem)) (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:/")).xstem)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b")).xstem)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.py")).xstem)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hgrc")).xstem)) (".hgrc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/.hg.rc")).xstem)) (".hg"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/b.tar.gz")).xstem)) ("b.tar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xP)) ("c:a/Some name. Ending with a dot.")).xstem)) ("Some name. Ending with a dot."))
                xtest_with_name.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:a/b")).xwith_name)) ("d.xml"))) ((((xP)) ("c:a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/b")).xwith_name)) ("d.xml"))) ((((xP)) ("c:/a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:a/Dot ending.")).xwith_name)) ("d.xml"))) ((((xP)) ("c:a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/Dot ending.")).xwith_name)) ("d.xml"))) ((((xP)) ("c:/a/d.xml"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:/")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("//My/Share")).xwith_name)) ("d.xml"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_name)) ("d:"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_name)) ("d:e"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_name)) ("d:/e"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_name)) ("//My/Share"))
                xtest_with_suffix.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:a/b")).xwith_suffix)) (".gz"))) ((((xP)) ("c:a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/b")).xwith_suffix)) (".gz"))) ((((xP)) ("c:/a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:a/b.py")).xwith_suffix)) (".gz"))) ((((xP)) ("c:a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xP)) ("c:/a/b.py")).xwith_suffix)) (".gz"))) ((((xP)) ("c:/a/b.gz"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) (".")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("/")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("//My/Share")).xwith_suffix)) (".gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("/"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("c:"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("/.gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("c:.gz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ("c/d"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) (".c/d"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xP)) ("c:a/b")).xwith_suffix)) ((((unsupported)) 0)))
                xtest_relative_to.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("C:Foo/Bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:"))))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:"))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:foO"))))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:foO"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:foO/"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:foO/baR"))))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:foO/baR"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("d:"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:Foo/Bar/Baz"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:Foo/Baz"))))
                        xp.write (((xP)) ("C:/Foo/Bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:"))))) ((((xP)) ("/Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:"))) ((((xP)) ("/Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xp).xrelative_to)) ((((xP)) ("c:"))))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xp).xrelative_to)) ("c:"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:/"))))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:/"))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:/foO"))))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:/foO"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:/foO/"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("c:/foO/baR"))))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("c:/foO/baR"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:/Baz"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:/Foo/Bar/Baz"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:/Foo/Baz"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("C:Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("d:"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("d:/"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("//C/Foo"))))
                        xp.write (((xP)) ("//Server/Share/Foo/Bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("//sErver/sHare"))))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("//sErver/sHare"))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("//sErver/sHare/"))) ((((xP)) ("Foo/Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("//sErver/sHare/Foo"))))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("//sErver/sHare/Foo"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("//sErver/sHare/Foo/"))) ((((xP)) ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ((((xP)) ("//sErver/sHare/Foo/Bar"))))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xrelative_to)) ("//sErver/sHare/Foo/Bar"))) ((((xP)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("/Server/Share/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("c:/Server/Share/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("//z/Share/Foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xrelative_to)) ((((xP)) ("//Server/z/Foo"))))
                xtest_is_absolute.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) 0).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("/a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("c:")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("c:a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP)) ("c:a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/a")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("c:/a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a/b")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a/b/")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a/b/c")).xis_absolute)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xP)) ("//a/b/c/d")).xis_absolute)) 0)))
                xtest_join.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xpp
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("C:/a/b"))
                        xpp.write ((((xp).xjoinpath)) ("x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("C:/a/b/x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("/x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("C:/x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("D:x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("D:x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("D:/x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("D:/x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("//host/share/x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("//host/share/x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("c:x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("C:/a/b/x/y"))))
                        xpp.write ((((xp).xjoinpath)) ("c:/x/y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpp)) ((((xP)) ("C:/x/y"))))
                xtest_div.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("C:/a/b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "x/y")) ((((xP)) ("C:/a/b/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).div "x").div "y")) ((((xP)) ("C:/a/b/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "/x/y")) ((((xP)) ("C:/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).div "/x").div "y")) ((((xP)) ("C:/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "D:x/y")) ((((xP)) ("D:x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).div "D:").div "x/y")) ((((xP)) ("D:x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "D:/x/y")) ((((xP)) ("D:/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).div "D:").div "/x/y")) ((((xP)) ("D:/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "//host/share/x/y")) ((((xP)) ("//host/share/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "c:x/y")) ((((xP)) ("C:/a/b/x/y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).div "c:/x/y")) ((((xP)) ("C:/x/y"))))
                xtest_is_reserved.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/foo/bar")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("con")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("NUL")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("NUL.txt")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("com1")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("com9.bar")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("bar.com9")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("lpt1")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xP)) ("lpt9.bar")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("bar.lpt9")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("c:/NUL/con/baz")).xis_reserved)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("//my/share/nul/con/aux")).xis_reserved)) 0)))
            (((unsupported)) ((x_BasePurePathTest)) (((xunittest).xTestCase)))
              seq
                xcls.write ((xpathlib).xPurePath)
                xtest_concrete_class.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ("a"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xp)))) (((((xos).xname).eq "nt").if ((xpathlib).xPureWindowsPath) ((xpathlib).xPurePosixPath))))
                xtest_different_flavours_unequal.write
                  [xself]
                    memory > xp
                    memory > xq
                    seq > @
                      seq
                        xp.write ((((xpathlib).xPurePosixPath)) ("a"))
                        xq.write ((((xpathlib).xPureWindowsPath)) ("a"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xp)) ((xq)))
                xtest_different_flavours_unordered.write
                  [xself]
                    memory > xp
                    memory > xq
                    seq > @
                      seq
                        xp.write ((((xpathlib).xPurePosixPath)) ("a"))
                        xq.write ((((xpathlib).xPureWindowsPath)) ("a"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
            xBASE.write (((((xos).xpath).xrealpath)) ((xTESTFN)))
            xjoin.write (((unsupported)) ((((((xos).xpath).xjoin)) ((xBASE)) ((((unsupported)) ((xx)))))))
            xrel_join.write (((unsupported)) ((((((xos).xpath).xjoin)) ((xTESTFN)) ((((unsupported)) ((xx)))))))
            xonly_nt.write ((((xunittest).xskipIf)) ((((xos).xname).neq "nt")) ("test requires a Windows-compatible system"))
            xonly_posix.write ((((xunittest).xskipIf)) ((((xos).xname).eq "nt")) ("test requires a POSIX-compatible system"))
            (((unsupported)) ((xPurePosixPathTest)) ((xonly_posix)))
              xcls.write ((xpathlib).xPosixPath)
            (((unsupported)) ((xPureWindowsPathTest)) ((xonly_nt)))
              seq
                xcls.write ((xpathlib).xWindowsPath)
                xtest_owner.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                          bogusForceDataize.write ((((((xP)) ("c:/")).xowner)) 0)
                xtest_group.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                          bogusForceDataize.write ((((((xP)) ("c:/")).xgroup)) 0)
            (((unsupported)) ((xobject)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xcleanup
                    seq > @
                      seq
                        xcleanup.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xos).xchmod)) ((((xjoin)) ("dirE"))) (511))
                                bogusForceDataize.write ((((xsupport).xrmtree)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xBASE)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((((xjoin)) ("dirA"))))
                        bogusForceDataize.write ((((xos).xmkdir)) ((((xjoin)) ("dirB"))))
                        bogusForceDataize.write ((((xos).xmkdir)) ((((xjoin)) ("dirC"))))
                        bogusForceDataize.write ((((xos).xmkdir)) ((((xjoin)) ("dirC") ("dirD"))))
                        bogusForceDataize.write ((((xos).xmkdir)) ((((xjoin)) ("dirE"))))
                        (((unsupported)) ((((xopen)) ((((xjoin)) ("fileA"))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("this is file An"))
                        (((unsupported)) ((((xopen)) ((((xjoin)) ("dirB") ("fileB"))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("this is file Bn"))
                        (((unsupported)) ((((xopen)) ((((xjoin)) ("dirC") ("fileC"))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("this is file Cn"))
                        (((unsupported)) ((((xopen)) ((((xjoin)) ("dirC") ("dirD") ("fileD"))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("this is file Dn"))
                        bogusForceDataize.write ((((xos).xchmod)) ((((xjoin)) ("dirE"))) (0))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)) ("fileA") ((((xjoin)) ("linkA"))))
                            bogusForceDataize.write ((((xos).xsymlink)) ("non-existing") ((((xjoin)) ("brokenLink"))))
                            bogusForceDataize.write ((((xself).xdirlink)) ("dirB") ((((xjoin)) ("linkB"))))
                            bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("..") ("dirB"))) ((((xjoin)) ("dirA") ("linkC"))))
                            bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("..") ("dirB"))) ((((xjoin)) ("dirB") ("linkD"))))
                            bogusForceDataize.write ((((xos).xsymlink)) ("brokenLinkLoop") ((((xjoin)) ("brokenLinkLoop"))))
                (((xos).xname).eq "nt").if
                  xdirlink.write
                    [xself xsrc xdest]
                      seq > @
                        (((unsupported)) (((xos).xsymlink)) ((xsrc)) ((xdest)) (TRUE))
                  xdirlink.write
                    [xself xsrc xdest]
                      seq > @
                        bogusForceDataize.write ((((xos).xsymlink)) ((xsrc)) ((xdest)))
                xassertSame.write
                  [xself xpath_a xpath_b]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xsamefile)) ((((xstr)) ((xpath_a)))) ((((xstr)) ((xpath_b)))))) (("%r and %r don't point to the same file".mod (((unsupported)) ((xpath_a)) ((xpath_b))))))
                xassertFileNotFound.write
                  [xself xfunc]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))) ((xcm)))
                          bogusForceDataize.write (((xfunc)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                xassertEqualNormCase.write
                  [xself xpath_a xpath_b]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xnormcase)) ((xpath_a)))) ((((((xos).xpath).xnormcase)) ((xpath_b)))))
                x_test_cwd.write
                  [xself xp]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xcls)) (((((xos).xgetcwd)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((((xstr)) ((xq)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xp)))) ((((xtype)) ((xq)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_absolute)) 0)))
                xtest_cwd.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls).xcwd)) 0)
                        bogusForceDataize.write ((((xself).x_test_cwd)) ((xp)))
                x_test_home.write
                  [xself xp]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xcls)) ((((((xos).xpath).xexpanduser)) ("~"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((((xstr)) ((xq)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xp)))) ((((xtype)) ((xq)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_absolute)) 0)))
                xtest_home.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                        seq
                          bogusForceDataize.write ((((xself).x_test_home)) ((((((xself).xcls).xhome)) 0)))
                          bogusForceDataize.write ((((xenv).xclear)) 0)
                          (((unsupported)) ((((unsupported)) ((xenv)) ("USERPROFILE"))) ((((((xos).xpath).xjoin)) ((xBASE)) ("userprofile"))))
                          bogusForceDataize.write ((((xself).x_test_home)) ((((((xself).xcls).xhome)) 0)))
                          (((unsupported)) ((((unsupported)) ((xenv)) ("HOME"))) ((((((xos).xpath).xjoin)) ((xBASE)) ("home"))))
                          bogusForceDataize.write ((((xself).x_test_home)) ((((((xself).xcls).xhome)) 0)))
                xtest_samefile.write
                  [xself]
                    memory > xq
                    memory > xnon_existent
                    memory > xp
                    memory > xr
                    memory > xpp
                    memory > xfileA_path
                    memory > xfileB_path
                    seq > @
                      seq
                        xfileA_path.write (((((xos).xpath).xjoin)) ((xBASE)) ("fileA"))
                        xfileB_path.write (((((xos).xpath).xjoin)) ((xBASE)) ("dirB") ("fileB"))
                        xp.write ((((xself).xcls)) ((xfileA_path)))
                        xpp.write ((((xself).xcls)) ((xfileA_path)))
                        xq.write ((((xself).xcls)) ((xfileB_path)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xsamefile)) ((xfileA_path)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xsamefile)) ((xpp)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xsamefile)) ((xfileB_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xsamefile)) ((xq)))))
                        xnon_existent.write (((((xos).xpath).xjoin)) ((xBASE)) ("foo"))
                        xr.write ((((xself).xcls)) ((xnon_existent)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xp).xsamefile)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xp).xsamefile)) ((xnon_existent)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xr).xsamefile)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xr).xsamefile)) ((xnon_existent)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xr).xsamefile)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xr).xsamefile)) ((xnon_existent)))
                xtest_empty_path.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xstat)) 0)) (((((xos).xstat)) ("."))))
                xtest_expanduser_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("~"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xexpanduser)) 0)) ((((xP)) ((((((xos).xpath).xexpanduser)) ("~"))))))
                        xp.write (((xP)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xexpanduser)) 0)) ((xp)))
                        xp.write (((xP)) ("/~"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xexpanduser)) 0)) ((xp)))
                        xp.write (((xP)) ("../~"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xexpanduser)) 0)) ((xp)))
                        xp.write ((((xP)) ((((((((xP)) ("")).xabsolute)) 0).xanchor))).div "~")
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xexpanduser)) 0)) ((xp)))
                xtest_exists.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) ((((((xp).div "dirA").xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (TRUE) ((((((xp).div "fileA").xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xp).div "fileA").div "bah").xexists)) 0)))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)) (TRUE) ((((((xp).div "linkA").xexists)) 0)))
                            bogusForceDataize.write ((((xself).xassertIs)) (TRUE) ((((((xp).div "linkB").xexists)) 0)))
                            bogusForceDataize.write ((((xself).xassertIs)) (TRUE) (((((((xp).div "linkB").div "fileB").xexists)) 0)))
                            bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xp).div "linkA").div "bah").xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) ((((((xp).div "foo").xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) ("/xyzzy")).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) (((xBASE).add "udfff"))).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (FALSE) (((((((xP)) (((xBASE).add "x00"))).xexists)) 0)))
                xtest_open_common.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)))
                        (((unsupported)) ((((((xp).div "fileA").xopen)) ("r"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xio).xTextIOBase)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("this is file An"))
                        (((unsupported)) ((((((xp).div "fileA").xopen)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xio).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xf).xread)) 0).xstrip)) 0)) ("this is file A"))
                        (((unsupported)) ((((unsupported)) ((((xp).div "fileA").xopen)) ("rb") (0))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xio).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xf).xread)) 0).xstrip)) 0)) ("this is file A"))
                xtest_read_write_bytes.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write (((((xp).div "fileA").xwrite_bytes)) ("abcdefg"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).div "fileA").xread_bytes)) 0)) ("abcdefg"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xp).div "fileA").xwrite_bytes)) ("somestr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).div "fileA").xread_bytes)) 0)) ("abcdefg"))
                xtest_read_write_text.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)))
                        (((unsupported)) ((((xp).div "fileA").xwrite_text)) ("äbcdefg") ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xp).div "fileA").xread_text)) ("utf-8") ("ignore"))) ("bcdefg"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xp).div "fileA").xwrite_text)) ("somebytes"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xp).div "fileA").xread_text)) ("latin-1"))) ("äbcdefg"))
                xtest_iterdir.write
                  [xself]
                    memory > xexpected
                    memory > xP
                    memory > xit
                    memory > xp
                    memory > xpaths
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        xit.write ((((xp).xiterdir)) 0)
                        xpaths.write (((xset)) ((xit)))
                        xexpected.write (((unsupported)) ("dirA") ("dirB") ("dirC") ("dirE") ("fileA"))
                        ((((xsupport).xcan_symlink)) 0).if
                          (((unsupported)) ((xexpected)) ((((unsupported)) ("linkA") ("linkB") ("brokenLink") ("brokenLinkLoop"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpaths)) ((((unsupported)) ((((xP)) ((xBASE)) ((xq)))) ((xq)) ((xexpected)))))
                xtest_iterdir_symlink.write
                  [xself]
                    memory > xpaths
                    memory > xexpected
                    memory > xp
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)) ("linkB"))
                        xpaths.write (((xset)) (((((xp).xiterdir)) 0)))
                        xexpected.write (((unsupported)) ((((xP)) ((xBASE)) ("linkB") ((xq)))) ((xq)) ((((unsupported)) ("fileB") ("linkD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpaths)) ((xexpected)))
                xtest_iterdir_nodir.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("fileA"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write (((xnext)) (((((xp).xiterdir)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xcm).xexception).xerrno)) ((((unsupported)) (((xerrno).xENOTDIR)) (((xerrno).xENOENT)) (((xerrno).xEINVAL)))))
                xtest_glob_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xit
                    memory > x_check
                    seq > @
                      seq
                        x_check.write
                          [xglob xexpected]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xglob)))) ((((unsupported)) ((((xP)) ((xBASE)) ((xq)))) ((xq)) ((xexpected)))))
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        xit.write ((((xp).xglob)) ("fileA"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) ((((xcollections).xabc).xIterator)))
                        bogusForceDataize.write (((x_check)) ((xit)) ((((unsupported)) ("fileA"))))
                        bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("fileB"))) ((((unsupported)) 0)))
                        bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("dir*/file*"))) ((((unsupported)) ("dirB/fileB") ("dirC/fileC"))))
                        (((((xsupport).xcan_symlink)) 0).not).if
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*A"))) ((((unsupported)) ("dirA") ("fileA"))))
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*A"))) ((((unsupported)) ("dirA") ("fileA") ("linkA"))))
                        (((((xsupport).xcan_symlink)) 0).not).if
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*B/*"))) ((((unsupported)) ("dirB/fileB"))))
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*B/*"))) ((((unsupported)) ("dirB/fileB") ("dirB/linkD") ("linkB/fileB") ("linkB/linkD"))))
                        (((((xsupport).xcan_symlink)) 0).not).if
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*/fileB"))) ((((unsupported)) ("dirB/fileB"))))
                          bogusForceDataize.write (((x_check)) (((((xp).xglob)) ("*/fileB"))) ((((unsupported)) ("dirB/fileB") ("linkB/fileB"))))
                xtest_rglob_common.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xit
                    memory > x_check
                    seq > @
                      seq
                        x_check.write
                          [xglob xexpected]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xglob)))) ((((unsupported)) ((((xP)) ((xBASE)) ((xq)))) ((xq)) ((xexpected)))))
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        xit.write ((((xp).xrglob)) ("fileA"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) ((((xcollections).xabc).xIterator)))
                        bogusForceDataize.write (((x_check)) ((xit)) ((((unsupported)) ("fileA"))))
                        bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("fileB"))) ((((unsupported)) ("dirB/fileB"))))
                        bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("*/fileA"))) ((((unsupported)) 0)))
                        (((((xsupport).xcan_symlink)) 0).not).if
                          bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("*/fileB"))) ((((unsupported)) ("dirB/fileB"))))
                          bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("*/fileB"))) ((((unsupported)) ("dirB/fileB") ("dirB/linkD/fileB") ("linkB/fileB") ("dirA/linkC/fileB"))))
                        bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("file*"))) ((((unsupported)) ("fileA") ("dirB/fileB") ("dirC/fileC") ("dirC/dirD/fileD"))))
                        xp.write (((xP)) ((xBASE)) ("dirC"))
                        bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("file*"))) ((((unsupported)) ("dirC/fileC") ("dirC/dirD/fileD"))))
                        bogusForceDataize.write (((x_check)) (((((xp).xrglob)) ("*/*"))) ((((unsupported)) ("dirC/dirD/fileD"))))
                xtest_rglob_symlink_loop.write
                  [xself]
                    memory > xgiven
                    memory > xexpect
                    memory > xp
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        xgiven.write (((xset)) (((((xp).xrglob)) ("*"))))
                        xexpect.write (((unsupported)) ("brokenLink") ("dirA") ("dirA/linkC") ("dirB") ("dirB/fileB") ("dirB/linkD") ("dirC") ("dirC/dirD") ("dirC/dirD/fileD") ("dirC/fileC") ("dirE") ("fileA") ("linkA") ("linkB") ("brokenLinkLoop"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgiven)) ((((unsupported)) (((xp).div (xx))) ((xx)) ((xexpect)))))
                xtest_glob_many_open_files.write
                  [xself]
                    memory > xiters
                    memory > xbase
                    memory > xP
                    memory > xp
                    memory > xpattern
                    memory > xdepth
                    seq > @
                      seq
                        xdepth.write 30
                        xP.write ((xself).xcls)
                        xbase.write ((((xP)) ((xBASE))).div "deep")
                        xp.write (((xP)) ((xbase)) ((((unsupported)) (((((unsupported)) ("d")).mul (xdepth))))))
                        (((unsupported)) (((xp).xmkdir)) (TRUE))
                        xpattern.write ((("/".xjoin)) (((((unsupported)) ("*")).mul (xdepth))))
                        xiters.write (((unsupported)) (((((xbase).xglob)) ((xpattern)))) ((xj)) ((((xrange)) (100))))
                        (((unsupported)) ((xit)) ((xiters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((xp)))
                        xiters.write (((unsupported)) (((((xbase).xrglob)) ("d"))) ((xj)) ((((xrange)) (100))))
                        xp.write (xbase)
                        (((unsupported)) ((xi)) ((((xrange)) ((xdepth)))))
                          seq
                            xp.write ((xp).div "d")
                            (((unsupported)) ((xit)) ((xiters)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((xp)))
                xtest_glob_dotdot.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) (".."))))) ((((unsupported)) ((((xP)) ((xBASE)) (".."))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) ("dirA/../file*"))))) ((((unsupported)) ((((xP)) ((xBASE)) ("dirA/../fileA"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) ("../xyzzy"))))) ((((xset)) 0)))
                xtest_glob_permissions.write
                  [xself]
                    memory > xbase
                    memory > xP
                    memory > xfile1
                    memory > xfile3
                    memory > xfile2
                    memory > xsubdir
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        xbase.write ((((xP)) ((xBASE))).div "permissions")
                        bogusForceDataize.write ((((xbase).xmkdir)) 0)
                        xfile1.write ((xbase).div "file1")
                        bogusForceDataize.write ((((xfile1).xtouch)) 0)
                        xfile2.write ((xbase).div "file2")
                        bogusForceDataize.write ((((xfile2).xtouch)) 0)
                        xsubdir.write ((xbase).div "subdir")
                        xfile3.write ((xbase).div "file3")
                        bogusForceDataize.write ((((xfile3).xsymlink_to)) (((xsubdir).div "other")))
                        (((unsupported)) (((((xmock).xpatch)) ("os.scandir"))) ((xscandir)))
                          seq
                            (((unsupported)) (((xscandir).xreturn_value)) ((((xsorted)) (((((xos).xscandir)) ((xbase)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) (((((xbase).xglob)) ("*"))))))) (3))
                        bogusForceDataize.write ((((xsubdir).xmkdir)) 0)
                        (((unsupported)) (((((xmock).xpatch)) ("os.scandir"))) ((xscandir)))
                          seq
                            (((unsupported)) (((xscandir).xreturn_value)) ((((xsorted)) (((((xos).xscandir)) ((xbase)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) (((((xbase).xglob)) ("*"))))))) (4))
                        bogusForceDataize.write ((((xsubdir).xchmod)) (0))
                        (((unsupported)) (((((xmock).xpatch)) ("os.scandir"))) ((xscandir)))
                          seq
                            (((unsupported)) (((xscandir).xreturn_value)) ((((xsorted)) (((((xos).xscandir)) ((xbase)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) (((((xbase).xglob)) ("*"))))))) (4))
                x_check_resolve.write
                  [xself xp xexpected xstrict]
                    memory > xq
                    seq > @
                      (((unsupported)) 0)
                        xq.write ((((xp).xresolve)) ((xstrict)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((xexpected)))
                (((unsupported)) ((x_check_resolve_relative)) ((x_check_resolve_absolute)) ((x_check_resolve)))
                xtest_resolve_common.write
                  [xself]
                    memory > xd
                    memory > xp
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)) ("foo"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xp).xresolve)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((((unsupported)) (((xp).xresolve)) (FALSE))))) ((((((xos).xpath).xjoin)) ((xBASE)) ("foo"))))
                        xp.write (((xP)) ((xBASE)) ("foo") ("in") ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((((unsupported)) (((xp).xresolve)) (FALSE))))) ((((((xos).xpath).xjoin)) ((xBASE)) ("foo") ("in") ("spam"))))
                        xp.write (((xP)) ((xBASE)) ("..") ("foo") ("in") ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((((unsupported)) (((xp).xresolve)) (FALSE))))) ((((((xos).xpath).xabspath)) ((((((xos).xpath).xjoin)) ("foo") ("in") ("spam"))))))
                        xp.write (((xP)) ((xBASE)) ("dirB") ("fileB"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((xp)))
                        xp.write (((xP)) ((xBASE)) ("linkA"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("fileA"))))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkC") ("fileB"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("dirB") ("fileB"))))
                        xp.write (((xP)) ((xBASE)) ("dirB") ("linkD") ("fileB"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("dirB") ("fileB"))))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkC") ("fileB") ("foo") ("in") ("spam"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("dirB") ("fileB") ("foo") ("in") ("spam"))) (FALSE))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkC") ("..") ("foo") ("in") ("spam"))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("dirA") ("foo") ("in") ("spam"))) (FALSE))
                          bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("foo") ("in") ("spam"))) (FALSE))
                        xd.write ((((xsupport).x_longpath)) ((((unsupported)) (((xtempfile).xmkdtemp)) ("-dirD") (((((xos).xgetcwd)) 0)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xd)))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((((xos).xpath).xjoin)) ((xd)))) ((((xjoin)) ("dirA") ("linkX"))))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("dirB"))) ((((((xos).xpath).xjoin)) ((xd)) ("linkY"))))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkX") ("linkY") ("fileB"))
                        bogusForceDataize.write ((((xself).x_check_resolve_absolute)) ((xp)) ((((xP)) ((xBASE)) ("dirB") ("fileB"))))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkX") ("linkY") ("foo") ("in") ("spam"))
                        bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("dirB") ("foo") ("in") ("spam"))) (FALSE))
                        xp.write (((xP)) ((xBASE)) ("dirA") ("linkX") ("linkY") ("..") ("foo") ("in") ("spam"))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xd)) ("foo") ("in") ("spam"))) (FALSE))
                          bogusForceDataize.write ((((xself).x_check_resolve_relative)) ((xp)) ((((xP)) ((xBASE)) ("foo") ("in") ("spam"))) (FALSE))
                xtest_resolve_dot.write
                  [xself]
                    memory > xr
                    memory > xp
                    memory > xq
                    seq > @
                      (((unsupported)) 0)
                        xp.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xdirlink)) (".") ((((xjoin)) ("0"))))
                        bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("0") ("0"))) ((((xjoin)) ("1"))))
                        bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("1") ("1"))) ((((xjoin)) ("2"))))
                        xq.write ((xp).div "2")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xq).xresolve)) (TRUE))) ((xp)))
                        xr.write (((xq).div "3").div "4")
                        (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xr).xresolve)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xr).xresolve)) (FALSE))) ((((xp).div "3").div "4")))
                xtest_with.write
                  [xself]
                    memory > xit2
                    memory > xp
                    memory > xit
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)))
                        xit.write ((((xp).xiterdir)) 0)
                        xit2.write ((((xp).xiterdir)) 0)
                        bogusForceDataize.write (((xnext)) ((xit2)))
                        (((unsupported)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((xit2)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xopen)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xresolve)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).xabsolute)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xp).x__enter__)))
                xtest_chmod.write
                  [xself]
                    memory > xp
                    memory > xnew_mode
                    memory > xmode
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        xmode.write (((((xp).xstat)) 0).xst_mode)
                        xnew_mode.write ((xmode).and (146.neg))
                        bogusForceDataize.write ((((xp).xchmod)) ((xnew_mode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstat)) 0).xst_mode)) ((xnew_mode)))
                        xnew_mode.write ((xmode).or 146)
                        bogusForceDataize.write ((((xp).xchmod)) ((xnew_mode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstat)) 0).xst_mode)) ((xnew_mode)))
                xtest_stat.write
                  [xself]
                    memory > xst
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        xst.write ((((xp).xstat)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xstat)) 0)) ((xst)))
                        bogusForceDataize.write ((((xp).xchmod)) ((((unsupported)) (((xst).xst_mode)) (146))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xp).xchmod)) (((xst).xst_mode)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xp).xstat)) 0)) ((xst)))
                xtest_lstat.write
                  [xself]
                    memory > xst
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((((xself).xcls)) ((xBASE))).div "linkA")
                        xst.write ((((xp).xstat)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xst)) (((((xp).xlstat)) 0)))
                xtest_lstat_nosymlink.write
                  [xself]
                    memory > xst
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        xst.write ((((xp).xstat)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xst)) (((((xp).xlstat)) 0)))
                xtest_owner.write
                  [xself]
                    memory > xname
                    memory > xp
                    memory > xuid
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        xuid.write (((((xp).xstat)) 0).xst_uid)
                        (((unsupported)) ((xKeyError)))
                          xname.write (((((xpwd).xgetpwuid)) ((xuid))).xpw_name)
                          bogusForceDataize.write ((((xself).xskipTest)) (("user %d doesn't have an entry in the system database".mod (xuid))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xname)) (((((xp).xowner)) 0)))
                xtest_group.write
                  [xself]
                    memory > xname
                    memory > xgid
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        xgid.write (((((xp).xstat)) 0).xst_gid)
                        (((unsupported)) ((xKeyError)))
                          xname.write (((((xgrp).xgetgrgid)) ((xgid))).xgr_name)
                          bogusForceDataize.write ((((xself).xskipTest)) (("group %d doesn't have an entry in the system database".mod (xgid))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xname)) (((((xp).xgroup)) 0)))
                xtest_unlink.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileA")
                        bogusForceDataize.write ((((xp).xunlink)) 0)
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xstat)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xunlink)))
                xtest_unlink_missing_ok.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "fileAAA")
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xunlink)))
                        (((unsupported)) (((xp).xunlink)) (TRUE))
                xtest_rmdir.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xcls)) ((xBASE))).div "dirA")
                        (((unsupported)) ((xq)) (((((xp).xiterdir)) 0)))
                          bogusForceDataize.write ((((xq).xunlink)) 0)
                        bogusForceDataize.write ((((xp).xrmdir)) 0)
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xstat)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xunlink)))
                xtest_link_to.write
                  [xself]
                    memory > xq
                    memory > xsize
                    memory > xP
                    memory > xp
                    memory > xr
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "fileA")
                        xsize.write (((((xp).xstat)) 0).xst_size)
                        xq.write (((xP).div "dirA").div "fileAA")
                        (((unsupported)) ((xPermissionError)))
                          bogusForceDataize.write ((((xp).xlink_to)) ((xq)))
                          bogusForceDataize.write ((((xself).xskipTest)) (("os.link(): %s".mod (xe))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xq).xstat)) 0).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xsamefile)) ((xp)) ((xq)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xp).xstat)))
                        xr.write (((xrel_join)) ("fileAAA"))
                        bogusForceDataize.write ((((xq).xlink_to)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xstat)) ((xr))).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xq).xstat)))
                xtest_link_to_not_implemented.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xq
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "fileA")
                        xq.write (((xP).div "dirA").div "fileAA")
                        (((unsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                          bogusForceDataize.write ((((xp).xlink_to)) ((xq)))
                xtest_rename.write
                  [xself]
                    memory > xq
                    memory > xrenamed_q
                    memory > xsize
                    memory > xP
                    memory > xp
                    memory > xrenamed_p
                    memory > xr
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "fileA")
                        xsize.write (((((xp).xstat)) 0).xst_size)
                        xq.write (((xP).div "dirA").div "fileAA")
                        xrenamed_p.write ((((xp).xrename)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrenamed_p)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xq).xstat)) 0).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xstat)))
                        xr.write (((xrel_join)) ("fileAAA"))
                        xrenamed_q.write ((((xq).xrename)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrenamed_q)) (((((xself).xcls)) ((xr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xstat)) ((xr))).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xq).xstat)))
                xtest_replace.write
                  [xself]
                    memory > xreplaced_q
                    memory > xq
                    memory > xreplaced_p
                    memory > xsize
                    memory > xP
                    memory > xp
                    memory > xr
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "fileA")
                        xsize.write (((((xp).xstat)) 0).xst_size)
                        xq.write (((xP).div "dirA").div "fileAA")
                        xreplaced_p.write ((((xp).xreplace)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreplaced_p)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xq).xstat)) 0).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xp).xstat)))
                        xr.write (((xrel_join)) ("dirB") ("fileB"))
                        xreplaced_q.write ((((xq).xreplace)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreplaced_q)) (((((xself).xcls)) ((xr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xstat)) ((xr))).xst_size)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)) (((xq).xstat)))
                xtest_touch_common.write
                  [xself]
                    memory > xold_mtime
                    memory > xold_mtime_ns
                    memory > xp
                    memory > xP
                    memory > xst
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "newfileA")
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xp).xtouch)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        xst.write ((((xp).xstat)) 0)
                        xold_mtime.write ((xst).xst_mtime)
                        xold_mtime_ns.write ((xst).xst_mtime_ns)
                        bogusForceDataize.write ((((xos).xutime)) ((((xstr)) ((xp)))) ((((unsupported)) (((xold_mtime).sub 10)) (((xold_mtime).sub 10)))))
                        bogusForceDataize.write ((((xp).xtouch)) 0)
                        xst.write ((((xp).xstat)) 0)
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((xst).xst_mtime_ns)) ((xold_mtime_ns)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((xst).xst_mtime)) ((xold_mtime)))
                        xp.write ((xP).div "newfileB")
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((xp).xtouch)) (448) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xp).xtouch)) (FALSE))
                xtest_touch_nochange.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "fileA")
                        bogusForceDataize.write ((((xp).xtouch)) 0)
                        (((unsupported)) (((((xp).xopen)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xf).xread)) 0).xstrip)) 0)) ("this is file A"))
                xtest_mkdir.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xp.write ((xP).div "newdirA")
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_dir)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                xtest_mkdir_parents.write
                  [xself]
                    memory > xp
                    memory > xmode
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("newdirB") ("newdirC"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_dir)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        xmode.write ((((xstat).xS_IMODE)) ((((((xp).xstat)) 0).xst_mode)))
                        xp.write ((((xself).xcls)) ((xBASE)) ("newdirD") ("newdirE"))
                        (((unsupported)) (((xp).xmkdir)) (365) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_dir)) 0)))
                        (((xos).xname).neq "nt").if
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) ((((((xp).xstat)) 0).xst_mode)))) ((3949.and (xmode))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((((((xp).xparent).xstat)) 0).xst_mode)))) ((xmode)))
                xtest_mkdir_exist_ok.write
                  [xself]
                    memory > xst_ctime_first
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("dirB"))
                        xst_ctime_first.write (((((xp).xstat)) 0).xst_ctime)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xis_dir)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstat)) 0).xst_ctime)) ((xst_ctime_first)))
                xtest_mkdir_exist_ok_with_parent.write
                  [xself]
                    memory > xst_ctime_first
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("dirC"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        xp.write ((xp).div "newdirC")
                        (((unsupported)) (((xp).xmkdir)) (TRUE))
                        xst_ctime_first.write (((((xp).xstat)) 0).xst_ctime)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        (((unsupported)) (((xp).xmkdir)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstat)) 0).xst_ctime)) ((xst_ctime_first)))
                xtest_mkdir_exist_ok_root.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((((((xself).xcls)) ("/")).xresolve)) 0).xmkdir)) (TRUE))
                        (((unsupported)) (((((((((xself).xcls)) ("/")).xresolve)) 0).xmkdir)) (TRUE) (TRUE))
                xtest_mkdir_with_unknown_drive.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xd)) ("ZYXWVUTSRQPONMLKJIHGFEDCBA"))
                          seq
                            xp.write ((((xself).xcls)) (((xd).add ":\\")))
                            (((((xp).xis_dir)) 0).not).if
                              (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("cannot find a drive that doesn't exist"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          (((unsupported)) (((((xp).div "child").div "path").xmkdir)) (TRUE))
                xtest_mkdir_with_child_file.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("dirB") ("fileB"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          (((unsupported)) (((xp).xmkdir)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                xtest_mkdir_no_parents_file.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("fileA"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xmkdir)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))) ((xcm)))
                          (((unsupported)) (((xp).xmkdir)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                xtest_mkdir_concurrent_parent_creation.write
                  [xself]
                    memory > xp12
                    memory > xp
                    memory > xpattern
                    memory > xmy_mkdir
                    memory > xconcurrently_created
                    seq > @
                      (((unsupported)) ((xpattern_num)) ((((xrange)) (32))))
                        seq
                          xp.write ((((xself).xcls)) ((xBASE)) (("dirCPC%d".mod (xpattern_num))))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xp).xexists)) 0)))
                          xmy_mkdir.write
                            [xpath xmode]
                              seq > @
                                (((unsupported)) 0)
                                  xpath.write (((xstr)) ((xpath)))
                                  ((((xpattern).xpop)) 0).if
                                    seq
                                      bogusForceDataize.write ((((xos).xmkdir)) ((xpath)) ((xmode)))
                                      bogusForceDataize.write ((((xconcurrently_created).xadd)) ((xpath)))
                                  bogusForceDataize.write ((((xos).xmkdir)) ((xpath)) ((xmode)))
                          xpattern.write (((unsupported)) ((((xbool)) (((xpattern_num).and (((unsupported)) (1) ((xn))))))) ((xn)) ((((xrange)) (5))))
                          xconcurrently_created.write (((xset)) 0)
                          xp12.write (((xp).div "dir1").div "dir2")
                          (((unsupported)) ((xFileExistsError)))
                            (((unsupported)) (((((xmock).xpatch)) ("pathlib._normal_accessor.mkdir") ((xmy_mkdir)))))
                              (((unsupported)) (((xp12).xmkdir)) (TRUE) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIn)) ((((xstr)) ((xp12)))) ((xconcurrently_created)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((((xstr)) ((xp12)))) ((xconcurrently_created)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xexists)) 0)))
                xtest_symlink_to.write
                  [xself]
                    memory > xtarget
                    memory > xP
                    memory > xlink
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xtarget.write ((xP).div "fileA")
                        xlink.write (((xP).div "dirA").div "linkAA")
                        bogusForceDataize.write ((((xlink).xsymlink_to)) ((xtarget)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlink).xstat)) 0)) (((((xtarget).xstat)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xlink).xlstat)) 0)) (((((xtarget).xstat)) 0)))
                        xlink.write (((xP).div "dirA").div "linkAAA")
                        bogusForceDataize.write ((((xlink).xsymlink_to)) ((((xstr)) ((xtarget)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlink).xstat)) 0)) (((((xtarget).xstat)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xlink).xlstat)) 0)) (((((xtarget).xstat)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlink).xis_dir)) 0)))
                        xtarget.write ((xP).div "dirB")
                        xlink.write (((xP).div "dirA").div "linkAAAA")
                        (((unsupported)) (((xlink).xsymlink_to)) ((xtarget)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlink).xstat)) 0)) (((((xtarget).xstat)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xlink).xlstat)) 0)) (((((xtarget).xstat)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xlink).xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xlist)) (((((xlink).xiterdir)) 0)))))
                xtest_is_dir.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "dirA").xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_dir)) 0)))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "linkA").xis_dir)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "linkB").xis_dir)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "brokenLink").xis_dir)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "dirAudfff").xis_dir)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "dirAx00").xis_dir)) 0)) (FALSE))
                xtest_is_file.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "fileA").xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_file)) 0)))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "linkA").xis_file)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "linkB").xis_file)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "brokenLink").xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_file)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_file)) 0)) (FALSE))
                xtest_is_mount.write
                  [xself]
                    memory > xR
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)))
                        xR.write ((((xself).xcls)) ("/"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_mount)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_mount)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_mount)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_mount)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xR).xis_mount)) 0)))
                        ((((xsupport).xcan_symlink)) 0).if
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "linkA").xis_mount)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ("/udfff")).xis_mount)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ("/x00")).xis_mount)) 0)) (FALSE))
                xtest_is_symlink.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_symlink)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_symlink)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_symlink)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_symlink)) 0)))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "linkA").xis_symlink)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "linkB").xis_symlink)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xP).div "brokenLink").xis_symlink)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_file)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_file)) 0)) (FALSE))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "linkAudfff").xis_file)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "linkAx00").xis_file)) 0)) (FALSE))
                xtest_is_fifo_false.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_fifo)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_fifo)) 0)) (FALSE))
                xtest_is_fifo_true.write
                  [xself]
                    memory > xP
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)) ("myfifo"))
                        (((unsupported)) ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xmkfifo)) ((((xstr)) ((xP)))))
                          bogusForceDataize.write ((((xself).xskipTest)) (("os.mkfifo(): %s".mod (xe))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xP).xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ((xBASE)) ("myfifoudfff")).xis_fifo)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ((xBASE)) ("myfifox00")).xis_fifo)) 0)) (FALSE))
                xtest_is_socket_false.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_socket)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_socket)) 0)) (FALSE))
                xtest_is_socket_true.write
                  [xself]
                    memory > xP
                    memory > xsock
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((((xself).xcls)) ((xBASE)) ("mysock"))
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xsock).xbind)) ((((xstr)) ((xP)))))
                          ((((xisinstance)) ((xe)) ((xPermissionError))).or (((unsupported)) ("AF_UNIX path too long") ((((xstr)) ((xe)))))).if
                            bogusForceDataize.write ((((xself).xskipTest)) (("cannot bind Unix socket: ".add (((xstr)) ((xe))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xP).xis_socket)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_fifo)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ((xBASE)) ("mysockudfff")).xis_socket)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ((xBASE)) ("mysockx00")).xis_socket)) 0)) (FALSE))
                xtest_is_block_device_false.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_block_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_block_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_block_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_block_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_block_device)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_block_device)) 0)) (FALSE))
                xtest_is_char_device_false.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "fileA").xis_char_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "dirA").xis_char_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xP).div "non-existing").xis_char_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xP).div "fileA").div "bah").xis_char_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAudfff").xis_char_device)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xP).div "fileAx00").xis_char_device)) 0)) (FALSE))
                xtest_is_char_device_true.write
                  [xself]
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ("/dev/null"))
                        (((((xP).xexists)) 0).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("/dev/null required"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xP).xis_char_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_block_device)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xP).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ("/dev/nulludfff")).xis_char_device)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((((xself).xcls)) ("/dev/nullx00")).xis_char_device)) 0)) (FALSE))
                xtest_pickling_common.write
                  [xself]
                    memory > xp
                    memory > xpp
                    memory > xdumped
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ((xBASE)) ("fileA"))
                        (((unsupported)) ((xproto)) ((((xrange)) (0) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdumped.write ((((xpickle).xdumps)) ((xp)) ((xproto)))
                            xpp.write ((((xpickle).xloads)) ((xdumped)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xpp).xstat)) 0)) (((((xp).xstat)) 0)))
                xtest_parts_interning.write
                  [xself]
                    memory > xp
                    memory > xP
                    memory > xq
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ("/usr/bin/foo"))
                        xq.write (((xP)) ("/usr/local/bin"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) (((xp).xparts)) (1))) ((((unsupported)) (((xq).xparts)) (1))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) (((xp).xparts)) (2))) ((((unsupported)) (((xq).xparts)) (3))))
                x_check_complex_symlinks.write
                  [xself xlink0_target]
                    memory > xold_path
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("link0") ("link0"))) ((((xjoin)) ("link1"))))
                        bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("link1") ("link1"))) ((((xjoin)) ("link2"))))
                        bogusForceDataize.write ((((xself).xdirlink)) ((((((xos).xpath).xjoin)) ("link2") ("link2"))) ((((xjoin)) ("link3"))))
                        bogusForceDataize.write ((((xself).xdirlink)) ((xlink0_target)) ((((xjoin)) ("link0"))))
                        xp.write (((((xP).div "link0").xresolve)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                        xp.write (((((xP).div "link1").xresolve)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                        xp.write (((((xP).div "link2").xresolve)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                        xp.write (((((xP).div "link3").xresolve)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                        xold_path.write ((((xos).xgetcwd)) 0)
                        bogusForceDataize.write ((((xos).xchdir)) ((xBASE)))
                        (((unsupported)) 0)
                          seq
                            xp.write (((((((xself).xcls)) ("link0")).xresolve)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                            bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                            xp.write (((((((xself).xcls)) ("link1")).xresolve)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                            bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                            xp.write (((((((xself).xcls)) ("link2")).xresolve)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                            bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                            xp.write (((((((xself).xcls)) ("link3")).xresolve)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((xP)))
                            bogusForceDataize.write ((((xself).xassertEqualNormCase)) ((((xstr)) ((xp)))) ((xBASE)))
                          bogusForceDataize.write ((((xos).xchdir)) ((xold_path)))
                xtest_complex_symlinks_absolute.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_check_complex_symlinks)) ((xBASE)))
                xtest_complex_symlinks_relative.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_check_complex_symlinks)) ("."))
                xtest_complex_symlinks_relative_dot_dot.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_check_complex_symlinks)) ((((((xos).xpath).xjoin)) ("dirA") (".."))))
            (((unsupported)) ((x_BasePathTest)) (((xunittest).xTestCase)))
              seq
                xcls.write ((xpathlib).xPath)
                xtest_concrete_class.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) ("a"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xp)))) (((((xos).xname).eq "nt").if ((xpathlib).xWindowsPath) ((xpathlib).xPosixPath))))
                xtest_unsupported_flavour.write
                  [xself]
                    seq > @
                      (((xos).xname).eq "nt").if
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNotImplementedError)) (((xpathlib).xPosixPath)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNotImplementedError)) (((xpathlib).xWindowsPath)))
                xtest_glob_empty_pattern.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xcls)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("Unacceptable pattern"))))
                          bogusForceDataize.write (((xlist)) (((((xp).xglob)) (""))))
            (((unsupported)) ((x_BasePathTest)) (((xunittest).xTestCase)) ((xonly_posix)))
              seq
                xcls.write ((xpathlib).xPosixPath)
                x_check_symlink_loop.write
                  [xself xstrict]
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        xpath.write ((((xself).xcls)) ((((unsupported)) ((xargs)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))))
                          bogusForceDataize.write (((xprint)) (((((xpath).xresolve)) ((xstrict)))))
                xtest_open_mode.write
                  [xself]
                    memory > xst
                    memory > xold_mask
                    memory > xp
                    seq > @
                      seq
                        xold_mask.write ((((xos).xumask)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xumask)) ((xold_mask)))
                        xp.write ((((xself).xcls)) ((xBASE)))
                        (((unsupported)) ((((((xp).div "new_file").xopen)) ("wb"))))
                        xst.write ((((xos).xstat)) ((((xjoin)) ("new_file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) (438))
                        bogusForceDataize.write ((((xos).xumask)) (18))
                        (((unsupported)) ((((((xp).div "other_new_file").xopen)) ("wb"))))
                        xst.write ((((xos).xstat)) ((((xjoin)) ("other_new_file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) (420))
                xtest_resolve_root.write
                  [xself]
                    memory > xcurrent_directory
                    memory > xp
                    seq > @
                      seq
                        xcurrent_directory.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xchdir)) ("/"))
                            xp.write ((((xself).xcls)) ("spam"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xp).xresolve)) 0)))) ("/spam"))
                          bogusForceDataize.write ((((xos).xchdir)) ((xcurrent_directory)))
                xtest_touch_mode.write
                  [xself]
                    memory > xst
                    memory > xold_mask
                    memory > xp
                    seq > @
                      seq
                        xold_mask.write ((((xos).xumask)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xumask)) ((xold_mask)))
                        xp.write ((((xself).xcls)) ((xBASE)))
                        bogusForceDataize.write (((((xp).div "new_file").xtouch)) 0)
                        xst.write ((((xos).xstat)) ((((xjoin)) ("new_file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) (438))
                        bogusForceDataize.write ((((xos).xumask)) (18))
                        bogusForceDataize.write (((((xp).div "other_new_file").xtouch)) 0)
                        xst.write ((((xos).xstat)) ((((xjoin)) ("other_new_file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) (420))
                        (((unsupported)) ((((xp).div "masked_new_file").xtouch)) (488))
                        xst.write ((((xos).xstat)) ((((xjoin)) ("masked_new_file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) (488))
                xtest_resolve_loop.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xsymlink)) ("linkX/inside") ((((xjoin)) ("linkX"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkX"))
                        bogusForceDataize.write ((((xos).xsymlink)) ("linkY") ((((xjoin)) ("linkY"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkY"))
                        bogusForceDataize.write ((((xos).xsymlink)) ("linkZ/../linkZ") ((((xjoin)) ("linkZ"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkZ"))
                        (((unsupported)) (((xself).x_check_symlink_loop)) ((xBASE)) ("linkZ") ("foo") (FALSE))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("linkU/inside"))) ((((xjoin)) ("linkU"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkU"))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("linkV"))) ((((xjoin)) ("linkV"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkV"))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("linkW/../linkW"))) ((((xjoin)) ("linkW"))))
                        bogusForceDataize.write ((((xself).x_check_symlink_loop)) ((xBASE)) ("linkW"))
                        (((unsupported)) (((xself).x_check_symlink_loop)) ((xBASE)) ("linkW") ("foo") (FALSE))
                xtest_glob.write
                  [xself]
                    memory > xgiven
                    memory > xexpect
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        xgiven.write (((xset)) (((((xp).xglob)) ("FILEa"))))
                        xexpect.write ((((((xsupport).xfs_is_case_insensitive)) ((xBASE))).not).if (((xset)) 0) (xgiven))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgiven)) ((xexpect)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) ("FILEa*"))))) ((((xset)) 0)))
                xtest_rglob.write
                  [xself]
                    memory > xgiven
                    memory > xexpect
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)) ("dirC"))
                        xgiven.write (((xset)) (((((xp).xrglob)) ("FILEd"))))
                        xexpect.write ((((((xsupport).xfs_is_case_insensitive)) ((xBASE))).not).if (((xset)) 0) (xgiven))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgiven)) ((xexpect)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xrglob)) ("FILEd*"))))) ((((xset)) 0)))
                xtest_expanduser.write
                  [xself]
                    memory > xp2
                    memory > xp7
                    memory > xothername
                    memory > xP
                    memory > xp6
                    memory > xusername
                    memory > xp4
                    memory > xp3
                    memory > xp1
                    memory > xpwdent
                    memory > xotherhome
                    memory > xp5
                    memory > xuserhome
                    seq > @
                      (((unsupported)) 0)
                        xP.write ((xself).xcls)
                        bogusForceDataize.write ((((xsupport).ximport_module)) ("pwd"))
                        (((unsupported)) 0)
                        xpwdent.write ((((xpwd).xgetpwuid)) (((((xos).xgetuid)) 0)))
                        xusername.write ((xpwdent).xpw_name)
                        xuserhome.write ((((((xpwdent).xpw_dir).xrstrip)) ("/")).or "/")
                        (((unsupported)) ((xpwdent)) (((((xpwd).xgetpwall)) 0)))
                          seq
                            xothername.write ((xpwdent).xpw_name)
                            xotherhome.write (((((xpwdent).xpw_dir).xrstrip)) ("/"))
                            (((xothername).neq (xusername)).and (xotherhome)).if
                              (((unsupported)) 0)
                          seq
                            xothername.write (xusername)
                            xotherhome.write (xuserhome)
                        xp1.write (((xP)) ("~/Documents"))
                        xp2.write (((xP)) ((("~".add (xusername)).add "/Documents")))
                        xp3.write (((xP)) ((("~".add (xothername)).add "/Documents")))
                        xp4.write (((xP)) ((("../~".add (xusername)).add "/Documents")))
                        xp5.write (((xP)) ((("/~".add (xusername)).add "/Documents")))
                        xp6.write (((xP)) (""))
                        xp7.write (((xP)) ("~fakeuser/Documents"))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                          seq
                            bogusForceDataize.write ((((xenv).xpop)) ("HOME") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp1).xexpanduser)) 0)) (((((xP)) ((xuserhome))).div "Documents")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp2).xexpanduser)) 0)) (((((xP)) ((xuserhome))).div "Documents")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp3).xexpanduser)) 0)) (((((xP)) ((xotherhome))).div "Documents")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp4).xexpanduser)) 0)) ((xp4)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp5).xexpanduser)) 0)) ((xp5)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp6).xexpanduser)) 0)) ((xp6)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xp7).xexpanduser)))
                            (((unsupported)) ((((unsupported)) ((xenv)) ("HOME"))) ("/tmp"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp1).xexpanduser)) 0)) ((((xP)) ("/tmp/Documents"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp2).xexpanduser)) 0)) (((((xP)) ((xuserhome))).div "Documents")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp3).xexpanduser)) 0)) (((((xP)) ((xotherhome))).div "Documents")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp4).xexpanduser)) 0)) ((xp4)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp5).xexpanduser)) 0)) ((xp5)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp6).xexpanduser)) 0)) ((xp6)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xp7).xexpanduser)))
                xtest_handling_bad_descriptor.write
                  [xself]
                    memory > xfile_descriptors
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          seq
                            xfile_descriptors.write (((unsupported)) ((((xlist)) ((((((((xpathlib).xPath)) ("/dev/fd")).xrglob)) ("*"))))) ((((unsupported)) (3))))
                            ((xfile_descriptors).not).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("no file descriptors - issue was not reproduced"))
                            (((unsupported)) ((xf)) ((xfile_descriptors)))
                              seq
                                bogusForceDataize.write ((((xf).xexists)) 0)
                                bogusForceDataize.write ((((xf).xis_dir)) 0)
                                bogusForceDataize.write ((((xf).xis_file)) 0)
                                bogusForceDataize.write ((((xf).xis_symlink)) 0)
                                bogusForceDataize.write ((((xf).xis_block_device)) 0)
                                bogusForceDataize.write ((((xf).xis_char_device)) 0)
                                bogusForceDataize.write ((((xf).xis_fifo)) 0)
                                bogusForceDataize.write ((((xf).xis_socket)) 0)
                          seq
                            (((xe).xerrno).eq ((xerrno).xEBADF)).if
                              bogusForceDataize.write ((((xself).xfail)) ("Bad file descriptor not handled."))
                            (((unsupported)) 0)
            (((unsupported)) ((x_BasePathTest)) (((xunittest).xTestCase)) ((xonly_nt)))
              seq
                xcls.write ((xpathlib).xWindowsPath)
                xtest_glob.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) ("FILEa"))))) ((((unsupported)) ((((xP)) ((xBASE)) ("fileA"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xglob)) ("F*a"))))) ((((unsupported)) ((((xP)) ((xBASE)) ("fileA"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xmap)) ((xstr)) (((((xp).xglob)) ("FILEa"))))))) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xmap)) ((xstr)) (((((xp).xglob)) ("F*a"))))))) ((((unsupported)) ((((unsupported)) 0)))))
                xtest_rglob.write
                  [xself]
                    memory > xp
                    memory > xP
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        xp.write (((xP)) ((xBASE)) ("dirC"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xp).xrglob)) ("FILEd"))))) ((((unsupported)) ((((xP)) ((xBASE)) ("dirC/dirD/fileD"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xmap)) ((xstr)) (((((xp).xrglob)) ("FILEd"))))))) ((((unsupported)) ((((unsupported)) 0)))))
                xtest_expanduser.write
                  [xself]
                    memory > xp2
                    memory > xcheck
                    memory > xP
                    memory > xp5
                    memory > xp6
                    memory > xp4
                    memory > xp3
                    memory > xp1
                    seq > @
                      seq
                        xP.write ((xself).xcls)
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                          seq
                            bogusForceDataize.write ((((xenv).xpop)) ("HOME") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xenv).xpop)) ("USERPROFILE") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xenv).xpop)) ("HOMEPATH") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xenv).xpop)) ("HOMEDRIVE") ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((((unsupported)) ((xenv)) ("USERNAME"))) ("alice"))
                            xp1.write (((xP)) ("~/My Documents"))
                            xp2.write (((xP)) ("~alice/My Documents"))
                            xp3.write (((xP)) ("~bob/My Documents"))
                            xp4.write (((xP)) ("/~/My Documents"))
                            xp5.write (((xP)) ("d:~/My Documents"))
                            xp6.write (((xP)) (""))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xp1).xexpanduser)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xp2).xexpanduser)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xp3).xexpanduser)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp4).xexpanduser)) 0)) ((xp4)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp5).xexpanduser)) 0)) ((xp5)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp6).xexpanduser)) 0)) ((xp6)))
                            xcheck.write
                              []
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xenv).xpop)) ("USERNAME") ("None: is there a None literal in the EO language?"))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp1).xexpanduser)) 0)) ((((xP)) ("C:/Users/alice/My Documents"))))
                                    bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xp2).xexpanduser)))
                                    (((unsupported)) ((((unsupported)) ((xenv)) ("USERNAME"))) ("alice"))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp2).xexpanduser)) 0)) ((((xP)) ("C:/Users/alice/My Documents"))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp3).xexpanduser)) 0)) ((((xP)) ("C:/Users/bob/My Documents"))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp4).xexpanduser)) 0)) ((xp4)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp5).xexpanduser)) 0)) ((xp5)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xp6).xexpanduser)) 0)) ((xp6)))
                            (((unsupported)) ((((unsupported)) ((xenv)) ("HOMEPATH"))) ((((unsupported)) 0)))
                            bogusForceDataize.write (((xcheck)) 0)
                            (((unsupported)) ((((unsupported)) ((xenv)) ("HOMEDRIVE"))) ("C:\\"))
                            (((unsupported)) ((((unsupported)) ((xenv)) ("HOMEPATH"))) ((((unsupported)) 0)))
                            bogusForceDataize.write (((xcheck)) 0)
                            bogusForceDataize.write ((((xenv).xpop)) ("HOMEDRIVE") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xenv).xpop)) ("HOMEPATH") ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((((unsupported)) ((xenv)) ("USERPROFILE"))) ((((unsupported)) 0)))
                            bogusForceDataize.write (((xcheck)) 0)
                            (((unsupported)) ((((unsupported)) ((xenv)) ("HOME"))) ((((unsupported)) 0)))
                            bogusForceDataize.write (((xcheck)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
                  seq
                    (((unsupported)) 0)
                    x__init__.write
                      [xself xstring]
                        seq > @
                          (((unsupported)) (((xself).xstring)) ((xstring)))
                    x__truediv__.write
                      [xself xother]
                        seq > @
                          (((unsupported)) ((((((xtype)) ((xself)))) ("{self.string}/{other}"))))
                    x__rtruediv__.write
                      [xself xother]
                        seq > @
                          (((unsupported)) ((((((xtype)) ((xself)))) ("{other}/{self.string}"))))
                xtest_truediv.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xpathlib).xPurePath)) ("test")).div ((((xself).xCompatPath)) ("right")))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) (((xself).xCompatPath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xstring)) ("test/right"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_rtruediv.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xCompatPath)) ("left")).div ((((xpathlib).xPurePath)) ("test")))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) (((xself).xCompatPath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xstring)) ("left/test"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)