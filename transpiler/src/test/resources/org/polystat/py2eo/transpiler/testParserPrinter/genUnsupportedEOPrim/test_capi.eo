memory > xMapping2
memory > xlocals
memory > xB
memory > xrange
memory > xMemoryError
memory > xi
memory > xtuple
memory > xe
memory > xcm
memory > xthreading
memory > xparity
memory > xassert_python_failure
memory > xImportError
memory > xAttributeError
memory > xrc
memory > xMyList
memory > xpickle
memory > xlist
memory > xassert_python_ok
memory > xValueError
memory > xPyList
memory > xZ
memory > xstr
memory > xout
memory > x__class__
memory > xOrderedDict
memory > xMapping1
memory > xbinascii
memory > xerr
memory > xrandom
memory > xopen
memory > xtextwrap
memory > xprint
memory > xHeapGcCTypeSubclass
memory > xf
memory > xw
memory > xre
memory > xr
memory > xhasattr
memory > xtime
memory > xbuiltins
memory > xsuper
memory > xsupport
memory > xsys
memory > xBadMapping
memory > xInstanceMethod
memory > xargs
memory > xsubprocess
memory > xos
memory > xdir
memory > xSystemError
memory > xgetattr
memory > xsetattr
memory > xname
memory > xunittest
memory > xobject
memory > xA
memory > xfoo
memory > xlen
memory > xdict
memory > xPyMemDebugTests
memory > xTypeError
memory > x__name__
memory > xmapping
memory > xpynumber_tobase
[] > test_capi
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_c_type_with_matrix_multiplication
        memory > x_testcapi
        memory > xtest_docstring_signature_parsing
        memory > xtest_exc_info
        memory > xpendingcalls_thread
        memory > xtest_return_result_with_error
        memory > xtest_subinterps
        memory > xtest_thread_state
        memory > xdo_test_trashcan_python_class
        memory > xid
        memory > xPTR_REGEX
        memory > xtest_c_subclass_of_heap_ctype_with_tpdealloc_decrefs_once
        memory > xtest_seq_bytes_to_charp_array
        memory > xtest_pyobject_forbidden_bytes_is_freed
        memory > xtest_pendingcalls_threaded
        memory > xtest_subclass_of_heap_gc_ctype_with_del_modifying_dunder_class_only_decrefs_once
        memory > xtest_buildvalue_N
        memory > xcheck
        memory > xPYTHONMALLOC
        memory > xtest_return_null_without_error
        memory > xtest_c_type_with_ipow
        memory > xtest_buffer_overflow
        memory > xtest_mutate_exception
        memory > xtest_pyobject_malloc_without_gil
        memory > xPy_DEBUG
        memory > xpendingcalls_wait
        memory > xtest_subprocess_fork_exec
        memory > xtest_pyobject_freed_is_freed
        memory > xtest_pendingcalls_non_threaded
        memory > xtest_mapping_keys_values_items_bad_arg
        memory > xtest_trashcan_python_class1
        memory > xtest_set_nomemory
        memory > xtest_no_FatalError_infinite_loop
        memory > xtest_negative_refcount
        memory > xtest_pyobject_uninitialized_is_freed
        memory > xtestfunction
        memory > xtest_trashcan_subclass
        memory > xtest_c_subclass_of_heap_ctype_with_del_modifying_dunder_class_only_decrefs_once
        memory > xtest_instancemethod
        memory > xtest_pynumber_tobase
        memory > xtest_pymem_malloc_without_gil
        memory > x_posixsubprocess
        memory > xcheck_pyobject_is_freed
        memory > xtest_memoryview_from_NULL_pointer
        memory > xtest_subinterps_recent_language_features
        memory > xtest_trashcan_python_class2
        memory > xtest_heaptype_with_setattro
        memory > xtest_api_misuse
        memory > xtest_subclass_of_heap_gc_ctype_with_tpdealloc_decrefs_once
        memory > xcheck_malloc_without_gil
        memory > xpendingcalls_submit
        memory > xtest_mapping_keys_values_items
        memory > xtest_pyobject_null_is_freed
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_posixsubprocess.write "None: is there a None literal in the EO language?"
            x_testcapi.write ((((xsupport).ximport_module)) ("_testcapi"))
            xPy_DEBUG.write (((xhasattr)) ((xsys)) ("gettotalrefcount"))
            xtestfunction.write
              [xself]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xself)))
            (((unsupported)) 0)
              seq
                xid.write ((((x_testcapi).xinstancemethod)) ((xid)))
                xtestfunction.write ((((x_testcapi).xinstancemethod)) ((xtestfunction)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_instancemethod.write
                  [xself]
                    memory > xinst
                    seq > @
                      seq
                        xinst.write (((xInstanceMethod)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xinst)))) (((((xinst).xid)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((((xinst).xtestfunction)) 0)) ((xinst)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xinst).xtestfunction).x__doc__)) (((xtestfunction).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xInstanceMethod).xtestfunction).x__doc__)) (((xtestfunction).x__doc__)))
                        (((unsupported)) ((((xInstanceMethod).xtestfunction).xattribute)) ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtestfunction).xattribute)) ("test"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) (((xinst).xtestfunction)) ("attribute") ("test"))
                xtest_no_FatalError_infinite_loop.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xSuppressCrashReport)) 0)))
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import _testcapi;_testcapi.crash_no_current_thread()"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xout)) ((xerr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xerr).xrstrip)) 0).xstartswith)) ("Fatal Python error: PyThreadState_Get: no current thread"))))
                xtest_memoryview_from_NULL_pointer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((x_testcapi).xmake_memoryview_from_NULL_pointer)))
                xtest_exc_info.write
                  [xself]
                    memory > xnew_exc_info
                    memory > xtb
                    memory > xorig_exc_info
                    memory > xraised_exception
                    memory > xnew_exc
                    memory > xreset_sys_exc_info
                    memory > xorig_sys_exc_info
                    memory > xnew_sys_exc_info
                    seq > @
                      seq
                        xraised_exception.write (((xValueError)) ("5"))
                        xnew_exc.write (((xTypeError)) ("TEST"))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((xraised_exception)))
                          seq
                            xtb.write ((xe).x__traceback__)
                            xorig_sys_exc_info.write ((((xsys).xexc_info)) 0)
                            xorig_exc_info.write ((((x_testcapi).xset_exc_info)) (((xnew_exc).x__class__)) ((xnew_exc)) ("None: is there a None literal in the EO language?"))
                            xnew_sys_exc_info.write ((((xsys).xexc_info)) 0)
                            xnew_exc_info.write ((((x_testcapi).xset_exc_info)) ((((unsupported)) ((xorig_exc_info)))))
                            xreset_sys_exc_info.write ((((xsys).xexc_info)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xorig_exc_info)) (1))) ((xe)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xorig_exc_info)) ((((unsupported)) (((xraised_exception).x__class__)) ((xraised_exception)) ((xtb)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xorig_sys_exc_info)) ((xorig_exc_info)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xreset_sys_exc_info)) ((xorig_exc_info)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xnew_exc_info)) ((((unsupported)) (((xnew_exc).x__class__)) ((xnew_exc)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xnew_sys_exc_info)) ((xnew_exc_info)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (FALSE))
                xtest_seq_bytes_to_charp_array.write
                  [xself]
                    memory > x__getitem__
                    memory > x__len__
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xobject)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((x_posixsubprocess).xfork_exec)) (1) ((((xZ)) 0)) (3) ((((unsupported)) (1) (2))) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17))
                        (((unsupported)) ((xobject)))
                          seq
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xsys).xmaxsize)))
                            x__getitem__.write
                              [xself xi]
                                seq > @
                                  (((unsupported)) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xMemoryError)) (((x_posixsubprocess).xfork_exec)) (1) ((((xZ)) 0)) (3) ((((unsupported)) (1) (2))) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17))
                xtest_subprocess_fork_exec.write
                  [xself]
                    memory > x__len__
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xobject)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((x_posixsubprocess).xfork_exec)) ((((xZ)) 0)) ((((unsupported)) ("1"))) (3) ((((unsupported)) (1) (2))) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17))
                xtest_docstring_signature_parsing.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xno_docstring).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xno_docstring).x__text_signature__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_empty).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_empty).x__text_signature__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_no_signature).x__doc__)) ("This docstring has no signature."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_no_signature).x__text_signature__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_invalid_signature).x__doc__)) ("docstring_with_invalid_signature($module, /, boo)nnThis docstring has an invalid signature."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_invalid_signature).x__text_signature__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_invalid_signature2).x__doc__)) ("docstring_with_invalid_signature2($module, /, boo)nn--nnThis docstring also has an invalid signature."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_invalid_signature2).x__text_signature__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature).x__doc__)) ("This docstring has a valid signature."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature).x__text_signature__)) ("($module, /, sig)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature_but_no_doc).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature_but_no_doc).x__text_signature__)) ("($module, /, sig)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature_and_extra_newlines).x__doc__)) ("nThis docstring has a valid signature and some extra newlines."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_testcapi).xdocstring_with_signature_and_extra_newlines).x__text_signature__)) ("($module, /, parameter)"))
                xtest_c_type_with_matrix_multiplication.write
                  [xself]
                    memory > xo
                    memory > xm1
                    memory > xM
                    memory > xm2
                    seq > @
                      seq
                        xM.write ((x_testcapi).xmatmulType)
                        xm1.write (((xM)) 0)
                        xm2.write (((xM)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm1)) ((xm2)))) ((((unsupported)) ("matmul") ((xm1)) ((xm2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm1)) (42))) ((((unsupported)) ("matmul") ((xm1)) (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (42) ((xm1)))) ((((unsupported)) ("matmul") (42) ((xm1)))))
                        xo.write (xm1)
                        (((unsupported)) ((xo)) ((xm2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xo)) ((((unsupported)) ("imatmul") ((xm1)) ((xm2)))))
                        xo.write (xm1)
                        (((unsupported)) ((xo)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xo)) ((((unsupported)) ("imatmul") ((xm1)) (42))))
                        xo.write 42
                        (((unsupported)) ((xo)) ((xm1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xo)) ((((unsupported)) ("matmul") (42) ((xm1)))))
                xtest_c_type_with_ipow.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        xo.write ((((x_testcapi).xipowType)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xo).x__ipow__)) (1))) ((((unsupported)) (1) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xo).x__ipow__)) (2) (2))) ((((unsupported)) (2) (2))))
                xtest_return_null_without_error.write
                  [xself]
                    memory > xcode
                    seq > @
                      (xPy_DEBUG).if
                        seq
                          xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                          (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)) ("-c") ((xcode)))))
                          bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr).xreplace)) ("r") (""))) ("Fatal Python error: a function returned NULL without setting an errornPython runtime state: initializednSystemError: <built-in function return_null_without_error> returned NULL without setting an errornnCurrent thread.*:n  File .*\", line 6 in <module>"))
                        seq
                          (((unsupported)) (((((xself).xassertRaises)) ((xSystemError)))) ((xcm)))
                            bogusForceDataize.write ((((x_testcapi).xreturn_null_without_error)) 0)
                          bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((xcm).xexception)))) ("return_null_without_error.* returned NULL without setting an error"))
                xtest_return_result_with_error.write
                  [xself]
                    memory > xcode
                    seq > @
                      (xPy_DEBUG).if
                        seq
                          xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                          (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)) ("-c") ((xcode)))))
                          bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr).xreplace)) ("r") (""))) ("Fatal Python error: a function returned a result with an error setnPython runtime state: initializednValueErrornnThe above exception was the direct cause of the following exception:nnSystemError: <built-in function return_result_with_error> returned a result with an error setnnCurrent thread.*:n  File .*, line 6 in <module>"))
                        seq
                          (((unsupported)) (((((xself).xassertRaises)) ((xSystemError)))) ((xcm)))
                            bogusForceDataize.write ((((x_testcapi).xreturn_result_with_error)) 0)
                          bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((xcm).xexception)))) ("return_result_with_error.* returned a result with an error set"))
                xtest_buildvalue_N.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((x_testcapi).xtest_buildvalue_N)) 0)
                xtest_set_nomemory.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)) ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("MemoryError 1 10") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("MemoryError 2 20") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("MemoryError 3 30") ((xout)))
                xtest_mapping_keys_values_items.write
                  [xself]
                    memory > xkeys
                    memory > xdict_obj
                    memory > xvalues
                    memory > xitems
                    seq > @
                      seq
                        (((unsupported)) ((xdict)))
                          seq
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xlist)) (((((((xsuper)) 0).xkeys)) 0)))))
                            xvalues.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xlist)) (((((((xsuper)) 0).xvalues)) 0)))))
                            xitems.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xlist)) (((((((xsuper)) 0).xitems)) 0)))))
                        (((unsupported)) ((xdict)))
                          seq
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xtuple)) (((((((xsuper)) 0).xkeys)) 0)))))
                            xvalues.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xtuple)) (((((((xsuper)) 0).xvalues)) 0)))))
                            xitems.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xtuple)) (((((((xsuper)) 0).xitems)) 0)))))
                        xdict_obj.write (((unsupported)) ("foo") (1) ("bar") (2) ("spam") (3))
                        (((unsupported)) ((xmapping)) ((((unsupported)) ((((unsupported)) 0)) ((((xOrderedDict)) 0)) ((((xMapping1)) 0)) ((((xMapping2)) 0)) ((xdict_obj)) ((((xOrderedDict)) ((xdict_obj)))) ((((xMapping1)) ((xdict_obj)))) ((((xMapping2)) ((xdict_obj)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertListEqual)) (((((x_testcapi).xget_mapping_keys)) ((xmapping)))) ((((xlist)) (((((xmapping).xkeys)) 0)))))
                            bogusForceDataize.write ((((xself).xassertListEqual)) (((((x_testcapi).xget_mapping_values)) ((xmapping)))) ((((xlist)) (((((xmapping).xvalues)) 0)))))
                            bogusForceDataize.write ((((xself).xassertListEqual)) (((((x_testcapi).xget_mapping_items)) ((xmapping)))) ((((xlist)) (((((xmapping).xitems)) 0)))))
                xtest_mapping_keys_values_items_bad_arg.write
                  [xself]
                    memory > xkeys
                    memory > xitems
                    memory > xbad_mapping
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((x_testcapi).xget_mapping_keys)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((x_testcapi).xget_mapping_values)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((x_testcapi).xget_mapping_items)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          seq
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                            xvalues.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                            xitems.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xbad_mapping.write (((xBadMapping)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((x_testcapi).xget_mapping_keys)) ((xbad_mapping)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((x_testcapi).xget_mapping_values)) ((xbad_mapping)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((x_testcapi).xget_mapping_items)) ((xbad_mapping)))
                xtest_negative_refcount.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)) ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xerr)) ("_testcapimodule.c:[0-9]+: _Py_NegativeRefcount: Assertion failed: object has negative ref count"))
                xtest_trashcan_subclass.write
                  [xself]
                    memory > xL
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xL.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xi)) ((((xrange)) (1000))))
                          xL.write (((xMyList)) ((((unsupported)) ((xL)))))
                xtest_trashcan_python_class1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xdo_test_trashcan_python_class)) ((xlist)))
                xtest_trashcan_python_class2.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xdo_test_trashcan_python_class)) ((xMyList)))
                xdo_test_trashcan_python_class.write
                  [xself xbase]
                    memory > x__del__
                    memory > xnum
                    memory > xL
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) ((xbase)))
                          seq
                            xnum.write 0
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((x__class__).xnum)) (1))
                                    bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))))
                            x__del__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((x__class__).xnum)) (1))
                        (((unsupported)) ((xparity)) ((((unsupported)) (0) (1))))
                          seq
                            xL.write "None: is there a None literal in the EO language?"
                            (((unsupported)) ((xi)) ((((xrange)) ((((unsupported)) (2) (20))))))
                              seq
                                xL.write (((xPyList)) ((((unsupported)) ((xL)))))
                                (((unsupported)) (((xL).xattr)) ((xi)))
                            (xparity).if
                              xL.write (((unsupported)) ((xL)))
                            bogusForceDataize.write ((((xself).xassertGreater)) (((xPyList).xnum)) (0))
                            (((unsupported)) ((((unsupported)) ((xL)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xPyList).xnum)) (0))
                xtest_subclass_of_heap_gc_ctype_with_tpdealloc_decrefs_once.write
                  [xself]
                    memory > xtype_refcnt
                    memory > x__init__
                    memory > xsubclass_instance
                    seq > @
                      seq
                        (((unsupported)) (((x_testcapi).xHeapGcCType)))
                          x__init__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) (((xself).xvalue2)) (20))
                                  bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                        xsubclass_instance.write (((xHeapGcCTypeSubclass)) 0)
                        xtype_refcnt.write ((((xsys).xgetrefcount)) ((xHeapGcCTypeSubclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue2)) (20))
                        (((unsupported)) ((((unsupported)) ((xsubclass_instance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) (((((xsys).xgetrefcount)) ((xHeapGcCTypeSubclass)))))
                xtest_subclass_of_heap_gc_ctype_with_del_modifying_dunder_class_only_decrefs_once.write
                  [xself]
                    memory > xsubclass_instance
                    memory > xtype_refcnt
                    memory > x__init__
                    memory > x__del__
                    memory > xnew_type_refcnt
                    seq > @
                      seq
                        (((unsupported)) (((x_testcapi).xHeapGcCType)))
                          x__init__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) (((xself).xvalue2)) (20))
                                  bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                        (((unsupported)) ((xA)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                            x__del__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).x__class__)) ((xA)))
                                    (((unsupported)) (((xA).xrefcnt_in_del)) (((((xsys).xgetrefcount)) ((xA)))))
                                    (((unsupported)) (((xB).xrefcnt_in_del)) (((((xsys).xgetrefcount)) ((xB)))))
                        xsubclass_instance.write (((xB)) 0)
                        xtype_refcnt.write ((((xsys).xgetrefcount)) ((xB)))
                        xnew_type_refcnt.write ((((xsys).xgetrefcount)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue2)) (20))
                        (((unsupported)) ((((unsupported)) ((xsubclass_instance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) (((xB).xrefcnt_in_del)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnew_type_refcnt).add 1)) (((xA).xrefcnt_in_del)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) (((((xsys).xgetrefcount)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_type_refcnt)) (((((xsys).xgetrefcount)) ((xA)))))
                xtest_c_subclass_of_heap_ctype_with_tpdealloc_decrefs_once.write
                  [xself]
                    memory > xtype_refcnt
                    memory > xsubclass_instance
                    seq > @
                      seq
                        xsubclass_instance.write ((((x_testcapi).xHeapCTypeSubclass)) 0)
                        xtype_refcnt.write ((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue2)) (20))
                        (((unsupported)) ((((unsupported)) ((xsubclass_instance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) (((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclass)))))
                xtest_c_subclass_of_heap_ctype_with_del_modifying_dunder_class_only_decrefs_once.write
                  [xself]
                    memory > xtype_refcnt
                    memory > xsubclass_instance
                    memory > xnew_type_refcnt
                    seq > @
                      seq
                        xsubclass_instance.write ((((x_testcapi).xHeapCTypeSubclassWithFinalizer)) 0)
                        xtype_refcnt.write ((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclassWithFinalizer)))
                        xnew_type_refcnt.write ((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsubclass_instance).xvalue2)) (20))
                        (((unsupported)) ((((unsupported)) ((xsubclass_instance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) ((((x_testcapi).xHeapCTypeSubclassWithFinalizer).xrefcnt_in_del)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnew_type_refcnt).add 1)) ((((x_testcapi).xHeapCTypeSubclass).xrefcnt_in_del)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtype_refcnt).sub 1)) (((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclassWithFinalizer)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_type_refcnt)) (((((xsys).xgetrefcount)) (((x_testcapi).xHeapCTypeSubclass)))))
                xtest_heaptype_with_setattro.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((((x_testcapi).xHeapCTypeSetattr)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xpvalue)) (10))
                        (((unsupported)) (((xobj).xvalue)) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xpvalue)) (12))
                        (((unsupported)) ((((unsupported)) (((xobj).xvalue)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xpvalue)) (0))
                xtest_pynumber_tobase.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) (123) (2))) ("0b1111011"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) (123) (8))) ("0o173"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) (123) (10))) ("123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) (123) (16))) ("0x7b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) ((123.neg)) (2))) ("-0b1111011"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) ((123.neg)) (8))) ("-0o173"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) ((123.neg)) (10))) ("-123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpynumber_tobase)) ((123.neg)) (16))) ("-0x7b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpynumber_tobase)) (123.0) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpynumber_tobase)) ("123") (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSystemError)) ((xpynumber_tobase)) (123) (0))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xpendingcalls_submit.write
                  [xself xl xn]
                    memory > xcallback
                    seq > @
                      seq
                        xcallback.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xl).xappend)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                          seq
                            bogusForceDataize.write ((((xtime).xsleep)) ((((((xrandom).xrandom)) 0).mul 0.02)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  ((((x_testcapi).x_pending_threadfunc)) ((xcallback))).if
                                    (((unsupported)) 0)
                xpendingcalls_wait.write
                  [xself xl xn xcontext]
                    memory > xcount
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        xcount.write 0
                        while.
                          ((((xlen)) ((xl))).neq (xn))
                          [unused]
                            seq > @
                              seq
                                (FALSE.and ((xsupport).xverbose)).if
                                  bogusForceDataize.write (((xprint)) (("(%i)".mod (((unsupported)) ((((xlen)) ((xl))))))))
                                (((unsupported)) ((xi)) ((((xrange)) (1000))))
                                  xa.write ((xi).mul (xi))
                                ((xcontext).and ((((((xcontext).xevent).xis_set)) 0).not)).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xcount)) (1))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((xcount).less 10000)) (("timeout waiting for %i callbacks, got %i".mod (((unsupported)) ((xn)) ((((xlen)) ((xl))))))))
                        (FALSE.and ((xsupport).xverbose)).if
                          bogusForceDataize.write (((xprint)) (("(%i)".mod (((unsupported)) ((((xlen)) ((xl))))))))
                xtest_pendingcalls_threaded.write
                  [xself]
                    memory > xn
                    memory > xthreads
                    memory > xcontext
                    seq > @
                      seq
                        xn.write 32
                        xthreads.write (((unsupported)) 0)
                        (((unsupported)) ((xobject)))
                        xcontext.write (((xfoo)) 0)
                        (((unsupported)) (((xcontext).xl)) ((((unsupported)) 0)))
                        (((unsupported)) (((xcontext).xn)) (2))
                        (((unsupported)) (((xcontext).xnThreads)) ((((unsupported)) ((xn)) (((xcontext).xn)))))
                        (((unsupported)) (((xcontext).xnFinished)) (0))
                        (((unsupported)) (((xcontext).xlock)) (((((xthreading).xLock)) 0)))
                        (((unsupported)) (((xcontext).xevent)) (((((xthreading).xEvent)) 0)))
                        xthreads.write (((unsupported)) ((((unsupported)) (((xthreading).xThread)) (((xself).xpendingcalls_thread)) ((((unsupported)) ((xcontext)))))) ((xi)) ((((xrange)) (((xcontext).xnThreads)))))
                        (((unsupported)) (((((xsupport).xstart_threads)) ((xthreads)))))
                          bogusForceDataize.write ((((xself).xpendingcalls_wait)) (((xcontext).xl)) ((xn)) ((xcontext)))
                xpendingcalls_thread.write
                  [xself xcontext]
                    memory > xnFinished
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xpendingcalls_submit)) (((xcontext).xl)) (((xcontext).xn)))
                        seq
                          (((unsupported)) (((xcontext).xlock)))
                            seq
                              (((unsupported)) (((xcontext).xnFinished)) (1))
                              xnFinished.write ((xcontext).xnFinished)
                              (FALSE.and ((xsupport).xverbose)).if
                                bogusForceDataize.write (((xprint)) ("finished threads: ") ((xnFinished)))
                          ((xnFinished).eq ((xcontext).xnThreads)).if
                            bogusForceDataize.write (((((xcontext).xevent).xset)) 0)
                xtest_pendingcalls_non_threaded.write
                  [xself]
                    memory > xn
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)) 0)
                        xn.write 64
                        bogusForceDataize.write ((((xself).xpendingcalls_submit)) ((xl)) ((xn)))
                        bogusForceDataize.write ((((xself).xpendingcalls_wait)) ((xl)) ((xn)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_subinterps.write
                  [xself]
                    memory > xcode
                    memory > xret
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        xcode.write ((((((unsupported)) 0).xformat)) ((xw)))
                        (((unsupported)) ((((xopen)) ((xr)) ("rb"))) ((xf)))
                          seq
                            xret.write ((((xsupport).xrun_in_subinterp)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xret)) (0))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xpickle).xload)) ((xf)))) ((((xid)) (((xsys).xmodules)))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xpickle).xload)) ((xf)))) ((((xid)) ((xbuiltins)))))
                xtest_subinterps_recent_language_features.write
                  [xself]
                    memory > xcode
                    memory > xret
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        xcode.write ((((((unsupported)) 0).xformat)) ((xw)))
                        (((unsupported)) ((((xopen)) ((xr)) ("rb"))) ((xf)))
                          seq
                            xret.write ((((xsupport).xrun_in_subinterp)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xret)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xpickle).xload)) ((xf)))) ((((unsupported)) ("a") ("123x") ("b") ("123"))))
                xtest_mutate_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xrun_in_subinterp)) ("import binascii; binascii.Error.foobar = 'foobar'"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) (((xbinascii).xError)) ("foobar"))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_thread_state.write
                [xself]
                  memory > xtarget
                  memory > xt
                  seq > @
                    (((unsupported)) 0)
                      xtarget.write
                        []
                          memory > xcallback
                          memory > xb
                          memory > xidents
                          memory > xa
                          seq > @
                            seq
                              xidents.write (((unsupported)) 0)
                              xcallback.write
                                []
                                  seq > @
                                    bogusForceDataize.write ((((xidents).xappend)) (((((xthreading).xget_ident)) 0)))
                              bogusForceDataize.write ((((x_testcapi).x_test_thread_state)) ((xcallback)))
                              (((unsupported)) ((xa)) ((xb)) ((xcallback)))
                              bogusForceDataize.write ((((xtime).xsleep)) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xidents).xcount)) (((((xthreading).xget_ident)) 0)))) (3) ("Couldn't find main thread correctly in the list"))
                      bogusForceDataize.write (((xtarget)) 0)
                      xt.write (((unsupported)) (((xthreading).xThread)) ((xtarget)))
                      bogusForceDataize.write ((((xt).xstart)) 0)
                      bogusForceDataize.write ((((xt).xjoin)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              bogusForceDataize.write ((((((xlocals)) 0).xupdate)) ((((unsupported)) ((((unsupported)) ((xname)) ((((xgetattr)) ((x_testcapi)) ((xname)))))) ((xname)) ((((xdir)) ((x_testcapi)))) ((((((xname).xstartswith)) ("test_")).and (((((xname).xendswith)) ("_code")).not))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xPYTHONMALLOC.write "debug"
                xPTR_REGEX.write "(?:0x)?[0-9a-fA-F]+"
                xcheck.write
                  [xself xcode]
                    memory > xout
                    memory > xstderr
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xSuppressCrashReport)) 0)))
                          xout.write (((unsupported)) ((xassert_python_failure)) ("-c") ((xcode)) (((xself).xPYTHONMALLOC)))
                        xstderr.write ((xout).xerr)
                        (((unsupported)) (((((xstderr).xdecode)) ("ascii") ("replace"))))
                xtest_buffer_overflow.write
                  [xself]
                    memory > xout
                    memory > xregex
                    seq > @
                      seq
                        xout.write ((((xself).xcheck)) ("import _testcapi; _testcapi.pymem_buffer_overflow()"))
                        xregex.write "Debug memory block at address p={ptr}: API 'm'n    16 bytes originally requestedn    The [0-9] pad bytes at p-[0-9] are FORBIDDENBYTE, as expected.n    The [0-9] pad bytes at tail={ptr} are not all FORBIDDENBYTE (0x[0-9a-f]{{2}}):n        at tail+0: 0x78 *** OUCHn        at tail+1: 0xfdn        at tail+2: 0xfdn        .*n(    The block was made by call #[0-9]+ to debug malloc/realloc.n)?    Data at p: cd cd cd .*nnEnable tracemalloc to get the memory block allocation tracebacknnFatal Python error: bad trailing pad byte"
                        xregex.write (((unsupported)) (((xregex).xformat)) (((xself).xPTR_REGEX)))
                        xregex.write (((unsupported)) (((xre).xcompile)) ((xregex)) (((xre).xDOTALL)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xout)) ((xregex)))
                xtest_api_misuse.write
                  [xself]
                    memory > xout
                    memory > xregex
                    seq > @
                      seq
                        xout.write ((((xself).xcheck)) ("import _testcapi; _testcapi.pymem_api_misuse()"))
                        xregex.write "Debug memory block at address p={ptr}: API 'm'n    16 bytes originally requestedn    The [0-9] pad bytes at p-[0-9] are FORBIDDENBYTE, as expected.n    The [0-9] pad bytes at tail={ptr} are FORBIDDENBYTE, as expected.n(    The block was made by call #[0-9]+ to debug malloc/realloc.n)?    Data at p: cd cd cd .*nnEnable tracemalloc to get the memory block allocation tracebacknnFatal Python error: bad ID: Allocated using API 'm', verified using API 'r'n"
                        xregex.write (((unsupported)) (((xregex).xformat)) (((xself).xPTR_REGEX)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xout)) ((xregex)))
                xcheck_malloc_without_gil.write
                  [xself xcode]
                    memory > xexpected
                    memory > xout
                    seq > @
                      seq
                        xout.write ((((xself).xcheck)) ((xcode)))
                        xexpected.write "Fatal Python error: Python memory allocator called without holding the GIL"
                        bogusForceDataize.write ((((xself).xassertIn)) ((xexpected)) ((xout)))
                xtest_pymem_malloc_without_gil.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "import _testcapi; _testcapi.pymem_malloc_without_gil()"
                        bogusForceDataize.write ((((xself).xcheck_malloc_without_gil)) ((xcode)))
                xtest_pyobject_malloc_without_gil.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "import _testcapi; _testcapi.pyobject_malloc_without_gil()"
                        bogusForceDataize.write ((((xself).xcheck_malloc_without_gil)) ((xcode)))
                xcheck_pyobject_is_freed.write
                  [xself xfunc_name]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                        (((unsupported)) ((xassert_python_ok)) ("-c") ((xcode)) (((xself).xPYTHONMALLOC)))
                xtest_pyobject_null_is_freed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pyobject_is_freed)) ("check_pyobject_null_is_freed"))
                xtest_pyobject_uninitialized_is_freed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pyobject_is_freed)) ("check_pyobject_uninitialized_is_freed"))
                xtest_pyobject_forbidden_bytes_is_freed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pyobject_is_freed)) ("check_pyobject_forbidden_bytes_is_freed"))
                xtest_pyobject_freed_is_freed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pyobject_is_freed)) ("check_pyobject_freed_is_freed"))
            (((unsupported)) ((xPyMemDebugTests)))
              xPYTHONMALLOC.write "malloc_debug"
            (((unsupported)) ((xPyMemDebugTests)) (((((xunittest).xskipUnless)) (((((xsupport).xwith_pymalloc)) 0)) ("need pymalloc"))))
              xPYTHONMALLOC.write "pymalloc_debug"
            (((unsupported)) ((xPyMemDebugTests)) (((((xunittest).xskipUnless)) ((xPy_DEBUG)) ("need Py_DEBUG"))))
              xPYTHONMALLOC.write ""
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)