memory > xlist
memory > xeval
memory > xp
memory > xf
memory > xos
memory > xunittest
memory > xsupport
memory > xsys
memory > xTypeError
memory > x__name__
[] > test_popen
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_do_test_commandline
        memory > xtest_keywords
        memory > xtest_popen
        memory > xpython
        memory > xtest_iterating
        memory > xtest_return_code
        memory > xtest_contextmanager
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            xpython.write ((xsys).xexecutable)
            (((unsupported)) (" ") ((xpython))).if
              xpython.write (("\"".add (xpython)).add "\"")
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_do_test_commandline.write
                  [xself xcmdline xexpected]
                    memory > xdata
                    memory > xgot
                    memory > xcmd
                    seq > @
                      seq
                        xcmd.write "%s -c \"import sys; print(sys.argv)\" %s"
                        xcmd.write ((xcmd).mod (((unsupported)) ((xpython)) ((xcmdline))))
                        (((unsupported)) (((((xos).xpopen)) ((xcmd)))) ((xp)))
                          xdata.write ((((xp).xread)) 0)
                        xgot.write (((unsupported)) ((((xeval)) ((xdata)))) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xexpected)))
                xtest_popen.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xpopen)))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)) ("foo bar") ((((unsupported)) ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)) ("foo \"spam and eggs\" \"silly walk\"") ((((unsupported)) ("foo") ("spam and eggs") ("silly walk"))))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)) ("foo \"a \\\"quoted\\\" arg\" bar") ((((unsupported)) ("foo") ("a \"quoted\" arg") ("bar"))))
                        bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                xtest_return_code.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xos).xpopen)) ("exit 0")).xclose)) 0)) ("None: is there a None literal in the EO language?"))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xos).xpopen)) ("exit 42")).xclose)) 0)) (42))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xos).xpopen)) ("exit 42")).xclose)) 0)) ((((unsupported)) (42) (8))))
                xtest_contextmanager.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xos).xpopen)) ("echo hello"))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("hellon"))
                xtest_iterating.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xos).xpopen)) ("echo hello"))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xf)))) ((((unsupported)) ("hellon"))))
                xtest_keywords.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xos).xpopen)) ("exit 0") ("w") ((1.neg)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)