memory > xWaveTest
memory > xbyteswap
memory > xbytes
memory > xunittest
memory > x__name__
memory > xaudiotests
memory > xio
memory > xstruct
memory > xsupport
memory > xsys
memory > xEOFError
memory > xwave
[] > test_wave
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest__all__
        memory > xtest_read_wrong_sample_width
        memory > xtest_read_not_wave
        memory > xtest_read_no_chunks
        memory > xframerate
        memory > xsndfilename
        memory > xnframes
        memory > xtest_read_wrong_number_of_channels
        memory > xtest_read_wrong_form
        memory > xmodule
        memory > xsndfilenframes
        memory > xtest_read_no_riff_chunk
        memory > xsampwidth
        memory > xtest_read_no_data_chunk
        memory > xcompname
        memory > xframes
        memory > xtest_read_no_fmt_no_data_chunk
        memory > xtest_read_no_fmt_chunk
        memory > xcomptype
        memory > xnchannels
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xaudiotests).xAudioWriteTests)) (((xaudiotests).xAudioTestsWithSourceFile)))
              xmodule.write (xwave)
            (((unsupported)) ((xWaveTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm8.wav"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 1
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
            (((unsupported)) ((xWaveTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm16.wav"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 2
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
                (((xsys).xbyteorder).neq "big").if
                  xframes.write (((xbyteswap)) ((xframes)) (2))
            (((unsupported)) ((xWaveTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm24.wav"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 3
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
                (((xsys).xbyteorder).neq "big").if
                  xframes.write (((xbyteswap)) ((xframes)) (3))
            (((unsupported)) ((xWaveTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm32.wav"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 4
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
                (((xsys).xbyteorder).neq "big").if
                  xframes.write (((xbyteswap)) ((xframes)) (4))
            (((unsupported)) (((xaudiotests).xAudioMiscTests)) (((xunittest).xTestCase)))
              seq
                xmodule.write (xwave)
                xtest__all__.write
                  [xself]
                    memory > xblacklist
                    seq > @
                      seq
                        xblacklist.write (((unsupported)) ("WAVE_FORMAT_PCM"))
                        (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xwave)) ((xblacklist)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_read_no_chunks.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write "SPAM"
                        (((unsupported)) (((((xself).xassertRaises)) ((xEOFError)))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_no_riff_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ("SPAM".add ((((xstruct).xpack)) ("<L") (0)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("file does not start with RIFF id"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_not_wave.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (4))).add "SPAM")
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("not a WAVE file"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_no_fmt_no_data_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (4))).add "WAVE")
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("fmt chunk and/or data chunk missing"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_no_data_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (28))).add "WAVE")
                        (((unsupported)) ((xb)) (("fmt ".add ((((xstruct).xpack)) ("<LHHLLHH") (16) (1) (1) (11025) (11025) (1) (8)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("fmt chunk and/or data chunk missing"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_no_fmt_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (12))).add "WAVE")
                        (((unsupported)) ((xb)) (("data".add ((((xstruct).xpack)) ("<L") (0)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("data chunk before fmt chunk"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_form.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (36))).add "WAVE")
                        (((unsupported)) ((xb)) (("fmt ".add ((((xstruct).xpack)) ("<LHHLLHH") (16) (2) (1) (11025) (11025) (1) (1)))))
                        (((unsupported)) ((xb)) (("data".add ((((xstruct).xpack)) ("<L") (0)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("unknown format: 2"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_number_of_channels.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (36))).add "WAVE")
                        (((unsupported)) ((xb)) (("fmt ".add ((((xstruct).xpack)) ("<LHHLLHH") (16) (1) (0) (11025) (11025) (1) (8)))))
                        (((unsupported)) ((xb)) (("data".add ((((xstruct).xpack)) ("<L") (0)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("bad # of channels"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_sample_width.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("RIFF".add ((((xstruct).xpack)) ("<L") (36))).add "WAVE")
                        (((unsupported)) ((xb)) (("fmt ".add ((((xstruct).xpack)) ("<LHHLLHH") (16) (1) (1) (11025) (11025) (1) (0)))))
                        (((unsupported)) ((xb)) (("data".add ((((xstruct).xpack)) ("<L") (0)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xwave).xError)) ("bad sample width"))))
                          bogusForceDataize.write ((((xwave).xopen)) (((((xio).xBytesIO)) ((xb)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)