memory > xscript_helper
memory > xrc
memory > xRuntimeError
memory > xAssertionError
memory > xerr
memory > xsys
memory > xunittest
memory > xerror_context
memory > x__name__
memory > xstr
memory > xout
memory > xmock_ire_func
memory > xhasattr
memory > xsubprocess
memory > xmock
memory > xos
[] > test_script_helper
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_assert_python_not_isolated_when_env_is_required
        memory > xtest_assert_python_ok
        memory > xtest_assert_python_failure_raises
        memory > xtest_interpreter_requires_environment_false
        memory > xsetUp
        memory > xtest_assert_python_isolated_when_env_not_required
        memory > xtearDown
        memory > xtest_interpreter_requires_environment_with_pythonhome
        memory > xtest_assert_python_failure
        memory > xtest_interpreter_requires_environment_true
        memory > xtest_interpreter_requires_environment_details
        memory > xtest_assert_python_ok_raises
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_assert_python_ok.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xscript_helper).xassert_python_ok)) ("-c") ("import sys; sys.exit(0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (0) ((((unsupported)) ((xt)) (0))) ("return code was not 0"))
                xtest_assert_python_failure.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_failure)) ("-c") ("sys.exit(0)"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (0) ((xrc)) ("return code should not be 0"))
                xtest_assert_python_ok_raises.write
                  [xself]
                    memory > xerror_msg
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xAssertionError)))) ((xerror_context)))
                          bogusForceDataize.write ((((xscript_helper).xassert_python_ok)) ("-c") ("sys.exit(0)"))
                        xerror_msg.write (((xstr)) (((xerror_context).xexception)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("command line:") ((xerror_msg)))
                        (((unsupported)) (((xself).xassertIn)) ("sys.exit(0)") ((xerror_msg)) ("unexpected command line"))
                xtest_assert_python_failure_raises.write
                  [xself]
                    memory > xerror_msg
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xAssertionError)))) ((xerror_context)))
                          bogusForceDataize.write ((((xscript_helper).xassert_python_failure)) ("-c") ("import sys; sys.exit(0)"))
                        xerror_msg.write (((xstr)) (((xerror_context).xexception)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("Process return code is 0n") ((xerror_msg)))
                        (((unsupported)) (((xself).xassertIn)) ("import sys; sys.exit(0)") ((xerror_msg)) ("unexpected command line."))
                xtest_assert_python_isolated_when_env_not_required.write
                  [xself xmock_popen]
                    memory > xpopen_command
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((((xmock).xpatch).xobject)) ((xscript_helper)) ("interpreter_requires_environment") (FALSE))) ((xmock_ire_func)))
                          seq
                            (((unsupported)) (((xmock_popen).xside_effect)) ((((xRuntimeError)) ("bail out of unittest"))))
                            (((unsupported)) ((xRuntimeError)))
                              bogusForceDataize.write ((((xscript_helper).x_assert_python)) (TRUE) ("-c") ("None"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ("bail out of unittest") ((((unsupported)) (((xerr).xargs)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xmock_popen).xcall_count)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xmock_ire_func).xcall_count)))
                            xpopen_command.write (((unsupported)) ((((unsupported)) (((xmock_popen).xcall_args)) (0))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xsys).xexecutable)) ((((unsupported)) ((xpopen_command)) (0))))
                            bogusForceDataize.write ((((xself).xassertIn)) ("None") ((xpopen_command)))
                            bogusForceDataize.write ((((xself).xassertIn)) ("-I") ((xpopen_command)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ("-E") ((xpopen_command)))
                xtest_assert_python_not_isolated_when_env_is_required.write
                  [xself xmock_popen]
                    memory > xpopen_command
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) ((((unsupported)) ((((xmock).xpatch).xobject)) ((xscript_helper)) ("interpreter_requires_environment") (TRUE))) ((xmock_ire_func)))
                          seq
                            (((unsupported)) (((xmock_popen).xside_effect)) ((((xRuntimeError)) ("bail out of unittest"))))
                            (((unsupported)) ((xRuntimeError)))
                              bogusForceDataize.write ((((xscript_helper).x_assert_python)) (TRUE) ("-c") ("None"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ("bail out of unittest") ((((unsupported)) (((xerr).xargs)) (0))))
                            xpopen_command.write (((unsupported)) ((((unsupported)) (((xmock_popen).xcall_args)) (0))) (0))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ("-I") ((xpopen_command)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ("-E") ((xpopen_command)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xscript_helper)) ("__cached_interp_requires_environment"))))
                        (((unsupported)) ((((unsupported)) (((xscript_helper).x__dict__)) ("__cached_interp_requires_environment"))) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xscript_helper).x__dict__)) ("__cached_interp_requires_environment"))) ("None: is there a None literal in the EO language?"))
                xtest_interpreter_requires_environment_true.write
                  [xself xmock_check_call]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xmock).xpatch).xdict)) (((xos).xenviron)))))
                          seq
                            bogusForceDataize.write (((((xos).xenviron).xpop)) ("PYTHONHOME") ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((xmock_check_call).xside_effect)) (((((xsubprocess).xCalledProcessError)) ("") (""))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xmock_check_call).xcall_count)))
                xtest_interpreter_requires_environment_false.write
                  [xself xmock_check_call]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xmock).xpatch).xdict)) (((xos).xenviron)))))
                          seq
                            bogusForceDataize.write (((((xos).xenviron).xpop)) ("PYTHONHOME") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xscript_helper).xinterpreter_requires_environment)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xmock_check_call).xcall_count)))
                xtest_interpreter_requires_environment_details.write
                  [xself xmock_check_call]
                    memory > xcheck_call_command
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xmock).xpatch).xdict)) (((xos).xenviron)))))
                          seq
                            bogusForceDataize.write (((((xos).xenviron).xpop)) ("PYTHONHOME") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xscript_helper).xinterpreter_requires_environment)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xmock_check_call).xcall_count)))
                            xcheck_call_command.write (((unsupported)) ((((unsupported)) (((xmock_check_call).xcall_args)) (0))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xsys).xexecutable)) ((((unsupported)) ((xcheck_call_command)) (0))))
                            bogusForceDataize.write ((((xself).xassertIn)) ("-E") ((xcheck_call_command)))
                xtest_interpreter_requires_environment_with_pythonhome.write
                  [xself xmock_check_call]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xmock).xpatch).xdict)) (((xos).xenviron)))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("PYTHONHOME"))) ("MockedHome"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xscript_helper).xinterpreter_requires_environment)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (0) (((xmock_check_call).xcall_count)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)