memory > xthreading
memory > xTestPOP3Class
memory > xSSLConnection
memory > xerr
memory > xDummyPOP3Handler
memory > xssl
memory > xhasattr
memory > xparams
memory > xgetattr
memory > xasynchat
memory > x__file__
memory > xaddr
memory > x__name__
memory > xcap
memory > xValueError
memory > xerrno
memory > xstr
memory > xconn
memory > xTestTimeouts
memory > xskipUnless
memory > xTestCase
memory > xsocket
memory > xTestPOP3_TLSClass
memory > xDummyPOP3_SSLHandler
memory > xTestPOP3_SSLClass
memory > xOSError
memory > xos
memory > xpoplib
memory > xasyncore
memory > xDummyPOP3Server
memory > xlen
memory > xdict
[] > test_poplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_exceptions
        memory > xtest_dele
        memory > xpush
        memory > xcmd_utf8
        memory > xcmd_quit
        memory > xrun
        memory > xtest_apop_REDOS
        memory > xHOST
        memory > xserver
        memory > xcmd_stls
        memory > xhandle_error
        memory > xtest_apop_normal
        memory > xtest_uidl
        memory > xcollect_incoming_data
        memory > xtest__all__
        memory > xCAFILE
        memory > xtest_pass_
        memory > xtestTimeoutValue
        memory > xcmd_user
        memory > xcmd_dele
        memory > xtest_rpop
        memory > xcmd_pass
        memory > x_do_tls_handshake
        memory > xhandler
        memory > xcmd_retr
        memory > xtest_utf8_raises_if_unsupported
        memory > xtest_too_long_lines
        memory > xtest_top
        memory > xtest_capa
        memory > xtest_stls
        memory > xcmd_stat
        memory > xtest_stls_capa
        memory > xassertOK
        memory > xcmd_rpop
        memory > xtest_main
        memory > xcmd_capa
        memory > xstop
        memory > xcmd_list
        memory > xhandle_accepted
        memory > xtestTimeoutNone
        memory > xstart
        memory > xenable_UTF8
        memory > xsetUp
        memory > xtest_retr
        memory > xcmd_echo
        memory > xwritable
        memory > xtest_utf8
        memory > xtest_stat
        memory > xtest_noop
        memory > xhandle_read
        memory > xLIST_RESP
        memory > xPORT
        memory > xtest_stls_context
        memory > xcmd_uidl
        memory > xSUPPORTS_SSL
        memory > xhandle_connect
        memory > xfound_terminator
        memory > x_get_capas
        memory > xcmd_noop
        memory > xcmd_apop
        memory > x__init__
        memory > xrequires_ssl
        memory > xCERTFILE
        memory > xtest_quit
        memory > xRETR_RESP
        memory > xtestTimeoutDefault
        memory > xtearDown
        memory > xcmd_top
        memory > xCAPAS
        memory > xtest_support
        memory > xtest_user
        memory > xtest_context
        memory > xtest_getwelcome
        memory > xtest_list
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            xHOST.write ((xtest_support).xHOST)
            xPORT.write 0
            xSUPPORTS_SSL.write FALSE
            (((xhasattr)) ((xpoplib)) ("POP3_SSL")).if
              seq
                (((unsupported)) 0)
                xSUPPORTS_SSL.write TRUE
                xCERTFILE.write (((((xos).xpath).xjoin)) (((((((xos).xpath).xdirname)) ((x__file__))).or ((xos).xcurdir))) ("keycert3.pem"))
                xCAFILE.write (((((xos).xpath).xjoin)) (((((((xos).xpath).xdirname)) ((x__file__))).or ((xos).xcurdir))) ("pycacert.pem"))
            xrequires_ssl.write (((xskipUnless)) ((xSUPPORTS_SSL)) ("SSL not supported"))
            xLIST_RESP.write "1 1rn2 2rn3 3rn4 4rn5 5rn.rn"
            xRETR_RESP.write (((unsupported)) 0)
            (((unsupported)) (((xasynchat).xasync_chat)))
              seq
                xCAPAS.write (((unsupported)) ("UIDL") ((((unsupported)) 0)) ("IMPLEMENTATION") ((((unsupported)) ("python-testlib-pop-server"))))
                xenable_UTF8.write FALSE
                x__init__.write
                  [xself xconn]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)) ((xself)) ((xconn)))
                        bogusForceDataize.write ((((xself).xset_terminator)) ("rn"))
                        (((unsupported)) (((xself).xin_buffer)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xpush)) ("+OK dummy pop3 server ready. <timestamp>"))
                        (((unsupported)) (((xself).xtls_active)) (FALSE))
                        (((unsupported)) (((xself).xtls_starting)) (FALSE))
                xcollect_incoming_data.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xin_buffer).xappend)) ((xdata)))
                xfound_terminator.write
                  [xself]
                    memory > xspace
                    memory > xcmd
                    memory > xarg
                    memory > xline
                    memory > xmethod
                    seq > @
                      seq
                        xline.write ((("".xjoin)) (((xself).xin_buffer)))
                        xline.write (((xstr)) ((xline)) ("ISO-8859-1"))
                        (((unsupported)) (((xself).xin_buffer)) ((((unsupported)) 0)))
                        xcmd.write ((((((unsupported)) (((((xline).xsplit)) (" "))) (0)).xlower)) 0)
                        xspace.write ((((xline).xfind)) (" "))
                        ((xspace).neq (1.neg)).if
                          xarg.write (((unsupported)) ((xline)) ((((unsupported)) (((xspace).add 1)))))
                          xarg.write ""
                        (((xhasattr)) ((xself)) (("cmd_".add (xcmd)))).if
                          seq
                            xmethod.write (((xgetattr)) ((xself)) (("cmd_".add (xcmd))))
                            bogusForceDataize.write (((xmethod)) ((xarg)))
                          bogusForceDataize.write ((((xself).xpush)) (("-ERR unrecognized POP3 command \"%s\".".mod (xcmd))))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                xpush.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)) ((xself)) ((((((xdata).xencode)) ("ISO-8859-1")).add "rn")))
                xcmd_echo.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ((xarg)))
                xcmd_user.write
                  [xself xarg]
                    seq > @
                      seq
                        ((xarg).neq "guido").if
                          bogusForceDataize.write ((((xself).xpush)) ("-ERR no such user"))
                        bogusForceDataize.write ((((xself).xpush)) ("+OK password required"))
                xcmd_pass.write
                  [xself xarg]
                    seq > @
                      seq
                        ((xarg).neq "python").if
                          bogusForceDataize.write ((((xself).xpush)) ("-ERR wrong password"))
                        bogusForceDataize.write ((((xself).xpush)) ("+OK 10 messages"))
                xcmd_stat.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ("+OK 10 100"))
                xcmd_list.write
                  [xself xarg]
                    seq > @
                      (xarg).if
                        bogusForceDataize.write ((((xself).xpush)) (("+OK %s %s".mod (((unsupported)) ((xarg)) ((xarg))))))
                        seq
                          bogusForceDataize.write ((((xself).xpush)) ("+OK"))
                          bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)) ((xself)) ((xLIST_RESP)))
                xcmd_uidl.write (xcmd_list)
                xcmd_retr.write
                  [xself xarg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)) (("+OK %s bytes".mod (((xlen)) ((xRETR_RESP))))))
                        bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)) ((xself)) ((xRETR_RESP)))
                xcmd_top.write (xcmd_retr)
                xcmd_dele.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ("+OK message marked for deletion."))
                xcmd_noop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ("+OK done nothing."))
                xcmd_rpop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ("+OK done nothing."))
                xcmd_apop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ("+OK done nothing."))
                xcmd_quit.write
                  [xself xarg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)) ("+OK closing."))
                        bogusForceDataize.write ((((xself).xclose_when_done)) 0)
                x_get_capas.write
                  [xself]
                    memory > x_capas
                    seq > @
                      seq
                        x_capas.write (((xdict)) (((xself).xCAPAS)))
                        ((((xself).xtls_active).not).and (xSUPPORTS_SSL)).if
                          (((unsupported)) ((((unsupported)) ((x_capas)) ("STLS"))) ((((unsupported)) 0)))
                        (((unsupported)) ((x_capas)))
                xcmd_capa.write
                  [xself xarg]
                    memory > x_ln
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)) ("+OK Capability list follows"))
                        ((((xself).x_get_capas)) 0).if
                          (((unsupported)) ((((unsupported)) ((xcap)) ((xparams)))) ((((((((xself).x_get_capas)) 0).xitems)) 0)))
                            seq
                              x_ln.write (((unsupported)) ((xcap)))
                              (xparams).if
                                bogusForceDataize.write ((((x_ln).xextend)) ((xparams)))
                              bogusForceDataize.write ((((xself).xpush)) ((((" ".xjoin)) ((x_ln)))))
                        bogusForceDataize.write ((((xself).xpush)) ("."))
                xcmd_utf8.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)) ((((xself).xenable_UTF8).if "+OK I know RFC6856" "-ERR What is UTF8?!")))
                (xSUPPORTS_SSL).if
                  seq
                    xcmd_stls.write
                      [xself xarg]
                        memory > xcontext
                        memory > xtls_sock
                        seq > @
                          (((unsupported)) (((xself).xtls_active)) (FALSE)).if
                            seq
                              bogusForceDataize.write ((((xself).xpush)) ("+OK Begin TLS negotiation"))
                              xcontext.write ((((xssl).xSSLContext)) 0)
                              bogusForceDataize.write ((((xcontext).xload_cert_chain)) ((xCERTFILE)))
                              xtls_sock.write (((unsupported)) (((xcontext).xwrap_socket)) (((xself).xsocket)) (TRUE) (FALSE) (FALSE))
                              bogusForceDataize.write ((((xself).xdel_channel)) 0)
                              bogusForceDataize.write ((((xself).xset_socket)) ((xtls_sock)))
                              (((unsupported)) (((xself).xtls_active)) (TRUE))
                              (((unsupported)) (((xself).xtls_starting)) (TRUE))
                              (((unsupported)) (((xself).xin_buffer)) ((((unsupported)) 0)))
                              bogusForceDataize.write ((((xself).x_do_tls_handshake)) 0)
                            bogusForceDataize.write ((((xself).xpush)) ("-ERR Command not permitted when TLS active"))
                    x_do_tls_handshake.write
                      [xself]
                        seq > @
                          (((unsupported)) (((xssl).xSSLError)) ((xOSError)))
                            bogusForceDataize.write (((((xself).xsocket).xdo_handshake)) 0)
                            seq
                              (((unsupported)) ((((unsupported)) (((xerr).xargs)) (0))) ((((unsupported)) (((xssl).xSSL_ERROR_WANT_READ)) (((xssl).xSSL_ERROR_WANT_WRITE))))).if
                                (((unsupported)) 0)
                                ((((unsupported)) (((xerr).xargs)) (0)).eq ((xssl).xSSL_ERROR_EOF)).if
                                  (((unsupported)) (((((xself).xhandle_close)) 0)))
                                  ((((unsupported)) ("SSLV3_ALERT_BAD_CERTIFICATE") ((((unsupported)) (((xerr).xargs)) (1)))).or (((unsupported)) ("SSLV3_ALERT_CERTIFICATE_UNKNOWN") ((((unsupported)) (((xerr).xargs)) (1))))).if
                                    (((unsupported)) (((((xself).xhandle_close)) 0)))
                              (((unsupported)) 0)
                            ((((unsupported)) (((xerr).xargs)) (0)).eq ((xerrno).xECONNABORTED)).if
                              (((unsupported)) (((((xself).xhandle_close)) 0)))
                            seq
                              (((unsupported)) (((xself).xtls_active)) (TRUE))
                              (((unsupported)) (((xself).xtls_starting)) (FALSE))
                    xhandle_read.write
                      [xself]
                        seq > @
                          ((xself).xtls_starting).if
                            bogusForceDataize.write ((((xself).x_do_tls_handshake)) 0)
                            (((unsupported)) (((xssl).xSSLEOFError)))
                              bogusForceDataize.write (((((xasynchat).xasync_chat).xhandle_read)) ((xself)))
                              bogusForceDataize.write ((((xself).xhandle_close)) 0)
            (((unsupported)) (((xasyncore).xdispatcher)) (((xthreading).xThread)))
              seq
                xhandler.write (xDummyPOP3Handler)
                x__init__.write
                  [xself xaddress xaf]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)) ((xself)))
                        bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)) ((xself)))
                        (((unsupported)) (((xself).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xself).xcreate_socket)) ((xaf)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xbind)) ((xaddress)))
                        bogusForceDataize.write ((((xself).xlisten)) (5))
                        (((unsupported)) (((xself).xactive)) (FALSE))
                        (((unsupported)) (((xself).xactive_lock)) (((((xthreading).xLock)) 0)))
                        (((unsupported)) ((((unsupported)) (((xself).xhost)) (((xself).xport)))) ((((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)) ((((unsupported)) (2))))))
                        (((unsupported)) (((xself).xhandler_instance)) ("None: is there a None literal in the EO language?"))
                xstart.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xactive).not)))
                        (((unsupported)) (((xself).x__flag)) (((((xthreading).xEvent)) 0)))
                        bogusForceDataize.write (((((xthreading).xThread).xstart)) ((xself)))
                        bogusForceDataize.write (((((xself).x__flag).xwait)) 0)
                xrun.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xactive)) (TRUE))
                        bogusForceDataize.write (((((xself).x__flag).xset)) 0)
                        (((unsupported)) 0)
                          while.
                            (((xself).xactive).and ((xasyncore).xsocket_map))
                            [unused]
                              seq > @
                                (((unsupported)) (((xself).xactive_lock)))
                                  (((unsupported)) (((xasyncore).xloop)) (0.1) (1))
                          (((unsupported)) (((xasyncore).xclose_all)) (TRUE))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xactive)))
                        (((unsupported)) (((xself).xactive)) (FALSE))
                        bogusForceDataize.write ((((xself).xjoin)) 0)
                xhandle_accepted.write
                  [xself xconn xaddr]
                    seq > @
                      (((unsupported)) (((xself).xhandler_instance)) (((((xself).xhandler)) ((xconn)))))
                xhandle_connect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xclose)) 0)
                xhandle_read.write (xhandle_connect)
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
            (((unsupported)) ((xTestCase)))
              seq
                xassertOK.write
                  [xself xresp]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("+OK"))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserver)) ((((xDummyPOP3Server)) ((((unsupported)) ((xHOST)) ((xPORT)))))))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        (((unsupported)) (((xself).xclient)) ((((unsupported)) (((xpoplib).xPOP3)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) (3))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_getwelcome.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xclient).xgetwelcome)) 0)) ("+OK dummy pop3 server ready. <timestamp>"))
                xtest_exceptions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).x_shortcmd)) ("echo -err"))
                xtest_user.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xuser)) ("guido"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xuser)) ("invalid"))
                xtest_pass_.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xpass_)) ("python"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xuser)) ("invalid"))
                xtest_stat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xclient).xstat)) 0)) ((((unsupported)) (10) (100))))
                xtest_list.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xself).xclient).xlist)) 0)) ((((unsupported)) (1))))) ((((unsupported)) ((((unsupported)) ("1 1") ("2 2") ("3 3") ("4 4") ("5 5"))) (25))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((((xself).xclient).xlist)) ("1")).xendswith)) ("OK 1 1"))))
                xtest_retr.write
                  [xself]
                    memory > xexpected
                    memory > xfoo
                    seq > @
                      seq
                        xexpected.write (((unsupported)) ("+OK 116 bytes") ((((unsupported)) ("From: postmaster@python.org") ("Content-Type: text/plain") ("MIME-Version: 1.0") ("Subject: Dummy") ("") ("line1") ("line2") ("line3"))) (113))
                        xfoo.write (((((xself).xclient).xretr)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfoo)) ((xexpected)))
                xtest_too_long_lines.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).x_shortcmd)) (("echo +%s".mod ((((xpoplib).x_MAXLINE).add 10).mul "a"))))
                xtest_dele.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xdele)) ("foo"))))
                xtest_noop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xnoop)) 0)))
                xtest_rpop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xrpop)) ("foo"))))
                xtest_apop_normal.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertOK)) ((((((xself).xclient).xapop)) ("foo") ("dummypassword"))))
                xtest_apop_REDOS.write
                  [xself]
                    memory > xevil_welcome
                    seq > @
                      (((unsupported)) 0)
                        xevil_welcome.write ("+OK".add ("<".mul 1000000))
                        (((unsupported)) (((((xtest_support).xswap_attr)) (((xself).xclient)) ("welcome") ((xevil_welcome)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xapop)) ("a") ("kb"))
                xtest_top.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)) ("+OK 116 bytes") ((((unsupported)) ("From: postmaster@python.org") ("Content-Type: text/plain") ("MIME-Version: 1.0") ("Subject: Dummy") ("") ("line1") ("line2") ("line3"))) (113))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xclient).xtop)) (1) (1))) ((xexpected)))
                xtest_uidl.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xuidl)) 0)
                        bogusForceDataize.write (((((xself).xclient).xuidl)) ("foo"))
                xtest_utf8_raises_if_unsupported.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xserver).xhandler).xenable_UTF8)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xutf8)))
                xtest_utf8.write
                  [xself]
                    memory > xexpected
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xserver).xhandler).xenable_UTF8)) (TRUE))
                        xexpected.write "+OK I know RFC6856"
                        xresult.write (((((xself).xclient).xutf8)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("IMPLEMENTATION") (((((xcapa).xkeys)) 0)))))
                xtest_quit.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        xresp.write (((((xself).xclient).xquit)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xresp)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xself).xclient).xsock)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xself).xclient).xfile)))
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      (((unsupported)) 0)
                        xcapa.write (((((xself).xclient).xcapa)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("STLS") (((((xcapa).xkeys)) 0)))))
                xtest_stls.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    seq > @
                      (((unsupported)) 0)
                        xexpected.write "+OK Begin TLS negotiation"
                        xresp.write (((((xself).xclient).xstls)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xexpected)))
                xtest_stls_context.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xctx
                    seq > @
                      (((unsupported)) 0)
                        xexpected.write "+OK Begin TLS negotiation"
                        xctx.write ((((xssl).xSSLContext)) (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)) ((xCAFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xctx).xcheck_hostname)) (TRUE))
                        (((unsupported)) (((((xself).xassertRaises)) (((xssl).xCertificateError)))))
                          xresp.write (((unsupported)) ((((xself).xclient).xstls)) ((xctx)))
                        (((unsupported)) (((xself).xclient)) ((((unsupported)) (((xpoplib).xPOP3)) ("localhost") ((((xself).xserver).xport)) (3))))
                        xresp.write (((unsupported)) ((((xself).xclient).xstls)) ((xctx)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xexpected)))
            (xSUPPORTS_SSL).if
              seq
                (((unsupported)) 0)
                (((unsupported)) ((xSSLConnection)) ((xDummyPOP3Handler)))
                  x__init__.write
                    [xself xconn]
                      seq > @
                        seq
                          bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)) ((xself)) ((xconn)))
                          bogusForceDataize.write ((((xself).xsecure_connection)) 0)
                          bogusForceDataize.write ((((xself).xset_terminator)) ("rn"))
                          (((unsupported)) (((xself).xin_buffer)) ((((unsupported)) 0)))
                          bogusForceDataize.write ((((xself).xpush)) ("+OK dummy pop3 server ready. <timestamp>"))
                          (((unsupported)) (((xself).xtls_active)) (TRUE))
                          (((unsupported)) (((xself).xtls_starting)) (FALSE))
            (((unsupported)) ((xTestPOP3Class)) ((xrequires_ssl)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserver)) ((((xDummyPOP3Server)) ((((unsupported)) ((xHOST)) ((xPORT)))))))
                        (((unsupported)) ((((xself).xserver).xhandler)) ((xDummyPOP3_SSLHandler)))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        (((unsupported)) (((xself).xclient)) (((((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)))))
                xtest__all__.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) ("POP3_SSL") (((xpoplib).x__all__)))
                xtest_context.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)) (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)) (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)) (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xctx)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xctx)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xCERTFILE)) ((xctx)))
                        bogusForceDataize.write (((((xself).xclient).xquit)) 0)
                        (((unsupported)) (((xself).xclient)) ((((unsupported)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xctx)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xself).xclient).xsock)) (((xssl).xSSLSocket)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xself).xclient).xsock).xcontext)) ((xctx)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((((xself).xclient).xnoop)) 0).xstartswith)) ("+OK"))))
                xtest_stls.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xstls)))
                xtest_stls_context.write (xtest_stls)
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("STLS") (((((xcapa).xkeys)) 0)))))
            (((unsupported)) ((xTestPOP3Class)) ((xrequires_ssl)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserver)) ((((xDummyPOP3Server)) ((((unsupported)) ((xHOST)) ((xPORT)))))))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        (((unsupported)) (((xself).xclient)) ((((unsupported)) (((xpoplib).xPOP3)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) (3))))
                        bogusForceDataize.write (((((xself).xclient).xstls)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((((unsupported)) ((((xself).xclient).xfile)) ("None: is there a None literal in the EO language?")).and (((unsupported)) ((((xself).xclient).xsock)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)) (((xpoplib).xerror_proto)))
                            bogusForceDataize.write (((((xself).xclient).xquit)) 0)
                            bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_stls.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) (((xpoplib).xerror_proto)) ((((xself).xclient).xstls)))
                xtest_stls_context.write (xtest_stls)
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("STLS") (((((xcapa).xkeys)) 0)))))
            (((unsupported)) ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xevt)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xsock)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)) (60))
                        (((unsupported)) (((xself).xport)) (((((xtest_support).xbind_port)) (((xself).xsock)))))
                        (((unsupported)) (((xself).xthread)) ((((unsupported)) (((xthreading).xThread)) (((xself).xserver)) ((((unsupported)) (((xself).xevt)) (((xself).xsock)))))))
                        (((unsupported)) ((((xself).xthread).xdaemon)) (TRUE))
                        bogusForceDataize.write (((((xself).xthread).xstart)) 0)
                        bogusForceDataize.write (((((xself).xevt).xwait)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xthread).xjoin)) 0)
                        (((unsupported)) (((xself).xthread)) ("None: is there a None literal in the EO language?"))
                xserver.write
                  [xself xevt xserv]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xserv).xlisten)) 0)
                        bogusForceDataize.write ((((xevt).xset)) 0)
                        (((unsupported)) (((xsocket).xtimeout)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserv).xaccept)) 0)))
                            bogusForceDataize.write ((((xconn).xsend)) ("+ Hola mundon"))
                            bogusForceDataize.write ((((xconn).xclose)) 0)
                          bogusForceDataize.write ((((xserv).xclose)) 0)
                xtestTimeoutDefault.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xsocket).xgetdefaulttimeout)) 0)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (30))
                        (((unsupported)) 0)
                          xpop.write ((((xpoplib).xPOP3)) ((xHOST)) (((xself).xport)))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xpop).xsock).xgettimeout)) 0)) (30))
                        bogusForceDataize.write ((((xpop).xclose)) 0)
                xtestTimeoutNone.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xsocket).xgetdefaulttimeout)) 0)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (30))
                        (((unsupported)) 0)
                          xpop.write (((unsupported)) (((xpoplib).xPOP3)) ((xHOST)) (((xself).xport)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((((xpop).xsock).xgettimeout)) 0)))
                        bogusForceDataize.write ((((xpop).xclose)) 0)
                xtestTimeoutValue.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        xpop.write (((unsupported)) (((xpoplib).xPOP3)) ((xHOST)) (((xself).xport)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xpop).xsock).xgettimeout)) 0)) (30))
                        bogusForceDataize.write ((((xpop).xclose)) 0)
            xtest_main.write
              []
                memory > xthread_info
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)) ((xTestPOP3Class)) ((xTestTimeouts)) ((xTestPOP3_SSLClass)) ((xTestPOP3_TLSClass)))
                    xthread_info.write ((((xtest_support).xthreading_setup)) 0)
                    (((unsupported)) 0)
                      bogusForceDataize.write ((((xtest_support).xrun_unittest)) ((((unsupported)) ((xtests)))))
                      bogusForceDataize.write ((((xtest_support).xthreading_cleanup)) ((((unsupported)) ((xthread_info)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)