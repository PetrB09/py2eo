memory > xQuotedEscapedExcel
memory > x_testcapi
memory > xStopIteration
memory > xtestC
memory > xfileobject
memory > xdedent
memory > xtuple
memory > xsorted
memory > xcm
memory > xarray
memory > xcopy
memory > xwriteargs
memory > xfileobj
memory > xAttributeError
memory > xheader
memory > xBadWriter
memory > xpickle
memory > xlist
memory > xdelattr
memory > xenumerate
memory > xkwwriteargs
memory > xValueError
memory > xBadItem
memory > xstr
memory > xOrderedDict
memory > xkeys
memory > xspace
memory > xpermutations
memory > xrange
memory > xtestA
memory > xproto
memory > xstring
memory > xset
memory > xcx
memory > xBadIterable
memory > xhasattr
memory > xmyexceltsv
memory > xmydialect
memory > xi
memory > xrow
memory > xsupport
memory > xsys
memory > xgc
memory > xargs
memory > xOSError
memory > xitertools
memory > xEscapedExcel
memory > xiter
memory > xtestB
memory > xBrokenFile
memory > xStringIO
memory > xsetattr
memory > xname
memory > xunittest
memory > xTemporaryFile
memory > xnext
memory > xBadList
memory > xTestCsvBase
memory > xtestUni
memory > xNUL
memory > xkwargs
memory > xfield_name
memory > xlen
memory > xdict
memory > xcsv
memory > xTypeError
memory > x__name__
[] > test_csv
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_blankline
        memory > xtest_reader_dialect_attrs
        memory > xtest_write_iterable
        memory > xtest_ordering_for_the_dict_reader_and_writer
        memory > xtest_writer_arg_valid
        memory > xtest_roundtrip_quoteed_newlines
        memory > xtest_dubious_quote
        memory > xtest_int_write
        memory > xtest_reader_arg_valid
        memory > xsample9
        memory > xtest_reader_attrs
        memory > xtest__all__
        memory > xtest_space_dialect
        memory > xtest_writerows_errors
        memory > xtest_read_long
        memory > xsample3
        memory > xtest_inline_quote
        memory > xtest_singlequoted
        memory > xtest_lineterminator
        memory > xtest_delimiters
        memory > xtest_quote_fieldsep
        memory > xsample7
        memory > xtest_pickle
        memory > x_test_kw_attrs
        memory > xtest_writer_attrs
        memory > xtest_newlines
        memory > xtest_read_with_blanks
        memory > xtest_writerows_with_none
        memory > xtest_read_dict_fieldnames_from_file
        memory > xtest_read_multi
        memory > xtest_register_kwargs
        memory > xtest_space_and_quote
        memory > xtest_quoted
        memory > xtest_create_read
        memory > xtest_delimiter
        memory > xescapechar
        memory > xtest_incomplete_dialect
        memory > xtest_read_quoting
        memory > xtest_simple
        memory > x_test_arg_valid
        memory > xheader1
        memory > xtest_write_field_not_in_field_names_ignore
        memory > x__iter__
        memory > xwritelines
        memory > x_write_test
        memory > xtest_read_semi_sep
        memory > xtest_roundtrip_escaped_unquoted_newlines
        memory > xtest_read_eof
        memory > xsample6
        memory > xcompare_dialect_123
        memory > x_test_default_attrs
        memory > xtest_sniff
        memory > xtest_write_simple_dict
        memory > x_write_error_test
        memory > xtest_ordered_dict_reader
        memory > xsample2
        memory > xtest_read_dict_fields
        memory > xtest_write_no_fields
        memory > xtest_unicode_write
        memory > xsample1
        memory > xtest_create_write
        memory > xtest_write
        memory > xtest_read_escape
        memory > xtest_write_bigfield
        memory > xtest_double_write
        memory > x_test_dialect_attrs
        memory > xtest_read_short
        memory > xtest_single
        memory > xtest_read_oddinputs
        memory > xtest_singlequoted_left_empty
        memory > xtest_null
        memory > xtest_write_multiple_dict_rows
        memory > xtest_reader_kw_attrs
        memory > xtest_writerows
        memory > xheader2
        memory > xtest_read_dict_fieldnames_chain
        memory > xreaderAssertEqual
        memory > xtest_empty_fields
        memory > xtest_writerows_legacy_strings
        memory > xtest_writeheader_return_value
        memory > xtest_read_linenum
        memory > xtest_escape_fieldsep
        memory > xtest_bad_dialect
        memory > xtest_doublequote
        memory > xdialect
        memory > xtest_read_bigfield
        memory > xquoting
        memory > xtest_writer_kw_attrs
        memory > xtest_write_escape_fieldsep
        memory > xtest_copy
        memory > xtest_read_eol
        memory > xtest_read_long_with_rest_no_fieldnames
        memory > xtest_quotes
        memory > xtest_guess_quote_and_delimiter
        memory > xtest_registry_badargs
        memory > xtest_write_field_not_in_field_names_raise
        memory > xtest_quotes_and_more
        memory > xnames
        memory > x_read_test
        memory > xtest_typo_in_extrasaction_raises_error
        memory > xtest_inline_quotes
        memory > xtest_single_writer
        memory > xtest_lone_quote
        memory > xsample5
        memory > xtest_write_quoting
        memory > xsample8
        memory > xtest_float_write
        memory > xtest_read_long_with_rest
        memory > xtest_writer_dialect_attrs
        memory > xtest_char_write
        memory > xtest_simple_reader
        memory > xtest_dialect_apply
        memory > xtest_write_fields_not_in_fieldnames
        memory > xtest_singlequoted_right_empty
        memory > xtest_read
        memory > xwrite
        memory > xtest_unicode_read
        memory > xtest_simple_writer
        memory > xtest_write_arg_valid
        memory > xtest_read_dict_no_fieldnames
        memory > xtest_registry
        memory > xtest_quoting
        memory > xtest_read_escape_fieldsep
        memory > xtest_quoted_quote
        memory > xwriterAssertEqual
        memory > xsample4
        memory > xtest_has_header
        memory > xtest_quoted_quotes
        memory > xtest_has_header_regex_special_delimiter
        memory > xtest_write_escape
        memory > xtest_single_quoted_quote
        memory > xtest_quote_and_quote
        memory > xtest_invalid_chars
        memory > xtest_quoted_nl
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
              x__iter__.write
                [xself]
                  seq > @
                    (((unsupported)) ((xOSError)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                x_test_arg_valid.write
                  [xself xctor xarg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xctor)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xctor)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) ("XX"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xctor)) ((xarg)) ("foo"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (1))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (1))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (1))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (((xcsv).xQUOTE_ALL)) (""))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xctor)) ((xarg)) (((xcsv).xQUOTE_ALL)) ("None: is there a None literal in the EO language?"))
                xtest_reader_arg_valid.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_arg_valid)) (((xcsv).xreader)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xcsv).xreader)) ((((xBadIterable)) 0)))
                xtest_writer_arg_valid.write
                  [xself]
                    memory > xwrite
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_arg_valid)) (((xcsv).xwriter)) ((((xStringIO)) 0)))
                        (((unsupported)) 0)
                          xwrite.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xcsv).xwriter)) ((((xBadWriter)) 0)))
                x_test_default_attrs.write
                  [xself xctor]
                    memory > xobj
                    seq > @
                      (((unsupported)) 0)
                        xobj.write (((xctor)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xdelimiter)) (","))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xdoublequote)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xescapechar)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xlineterminator)) ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquotechar)) ("\""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquoting)) (((xcsv).xQUOTE_MINIMAL)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xskipinitialspace)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xstrict)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xdelattr)) (((xobj).xdialect)) ("delimiter"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) (((xobj).xdialect)) ("delimiter") (":"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xdelattr)) (((xobj).xdialect)) ("quoting"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) (((xobj).xdialect)) ("quoting") ("None: is there a None literal in the EO language?"))
                xtest_reader_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_default_attrs)) (((xcsv).xreader)) ((((unsupported)) 0)))
                xtest_writer_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_default_attrs)) (((xcsv).xwriter)) ((((xStringIO)) 0)))
                x_test_kw_attrs.write
                  [xself xctor]
                    memory > xkwargs
                    memory > xobj
                    seq > @
                      (((unsupported)) 0)
                        xkwargs.write (((unsupported)) ((xdict)) (":") (FALSE) ("\\") ("r") ("*") (((xcsv).xQUOTE_NONE)) (TRUE) (TRUE))
                        xobj.write (((xctor)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xdelimiter)) (":"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xdoublequote)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xescapechar)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xlineterminator)) ("r"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquotechar)) ("*"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquoting)) (((xcsv).xQUOTE_NONE)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xskipinitialspace)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xstrict)) (TRUE))
                xtest_reader_kw_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_kw_attrs)) (((xcsv).xreader)) ((((unsupported)) 0)))
                xtest_writer_kw_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_kw_attrs)) (((xcsv).xwriter)) ((((xStringIO)) 0)))
                x_test_dialect_attrs.write
                  [xself xctor]
                    memory > xdoublequote
                    memory > xquoting
                    memory > xdelimiter
                    memory > xskipinitialspace
                    memory > xescapechar
                    memory > xstrict
                    memory > xargs
                    memory > xobj
                    memory > xquotechar
                    memory > xlineterminator
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            xdelimiter.write "-"
                            xdoublequote.write FALSE
                            xescapechar.write "^"
                            xlineterminator.write "$"
                            xquotechar.write "#"
                            xquoting.write ((xcsv).xQUOTE_ALL)
                            xskipinitialspace.write TRUE
                            xstrict.write FALSE
                        xargs.write ((xargs).add (((unsupported)) ((xdialect))))
                        xobj.write (((xctor)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xdelimiter)) ("-"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xdoublequote)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xescapechar)) ("^"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xlineterminator)) ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquotechar)) ("#"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xobj).xdialect).xquoting)) (((xcsv).xQUOTE_ALL)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xskipinitialspace)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xobj).xdialect).xstrict)) (FALSE))
                xtest_reader_dialect_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_dialect_attrs)) (((xcsv).xreader)) ((((unsupported)) 0)))
                xtest_writer_dialect_attrs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_dialect_attrs)) (((xcsv).xwriter)) ((((xStringIO)) 0)))
                x_write_test.write
                  [xself xfields xexpect]
                    memory > xwriter
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)) ((((unsupported)) ((xkwargs)))))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((xfields)))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) (((xexpect).add (((xwriter).xdialect).xlineterminator))))
                x_write_error_test.write
                  [xself xexc xfields]
                    memory > xwriter
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)) ((((unsupported)) ((xkwargs)))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xexc)))))
                              bogusForceDataize.write ((((xwriter).xwriterow)) ((xfields)))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) (""))
                xtest_write_arg_valid.write
                  [xself]
                    memory > x__len__
                    memory > x__getitem__
                    memory > x__str__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_write_error_test)) (((xcsv).xError)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((unsupported)) 0)) (""))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((unsupported)) ("None: is there a None literal in the EO language?"))) ("\"\""))
                        (((unsupported)) (((xself).x_write_error_test)) (((xcsv).xError)) ((((unsupported)) ("None: is there a None literal in the EO language?"))) (((xcsv).xQUOTE_NONE)))
                        bogusForceDataize.write ((((xself).x_write_error_test)) ((xOSError)) ((((xBadIterable)) 0)))
                        (((unsupported)) 0)
                          seq
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (10))
                            x__getitem__.write
                              [xself xi]
                                seq > @
                                  ((xi).greater 2).if
                                    (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xself).x_write_error_test)) ((xOSError)) ((((xBadList)) 0)))
                        (((unsupported)) 0)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xself).x_write_error_test)) ((xOSError)) ((((unsupported)) ((((xBadItem)) 0)))))
                xtest_write_bigfield.write
                  [xself]
                    memory > xbigstring
                    seq > @
                      seq
                        xbigstring.write ("X".mul 50000)
                        bogusForceDataize.write ((((xself).x_write_test)) ((((unsupported)) ((xbigstring)) ((xbigstring)))) (("%s,%s".mod (((unsupported)) ((xbigstring)) ((xbigstring))))))
                xtest_write_quoting.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ("a,1,\"p,q\""))
                        (((unsupported)) (((xself).x_write_error_test)) (((xcsv).xError)) ((((unsupported)) ("a") (1) ("p,q"))) (((xcsv).xQUOTE_NONE)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ("a,1,\"p,q\"") (((xcsv).xQUOTE_MINIMAL)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ("\"a\",1,\"p,q\"") (((xcsv).xQUOTE_NONNUMERIC)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ("\"a\",\"1\",\"p,q\"") (((xcsv).xQUOTE_ALL)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("anb") (1))) ("\"anb\",\"1\"") (((xcsv).xQUOTE_ALL)))
                xtest_write_escape.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ("a,1,\"p,q\"") ("\\"))
                        (((unsupported)) (((xself).x_write_error_test)) (((xcsv).xError)) ((((unsupported)) ("a") (1) ("p,\"q\""))) ("None: is there a None literal in the EO language?") (FALSE))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,\"q\""))) ("a,1,\"p,\\\"q\\\"\"") ("\\") (FALSE))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("\""))) ("\"\"\"\"") ("\\") (((xcsv).xQUOTE_MINIMAL)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("\""))) ("\\\"") ("\\") (((xcsv).xQUOTE_MINIMAL)) (FALSE))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("\""))) ("\\\"") ("\\") (((xcsv).xQUOTE_NONE)))
                        (((unsupported)) (((xself).x_write_test)) ((((unsupported)) ("a") (1) ("p,q"))) ((((unsupported)) 0)) ("\\") (((xcsv).xQUOTE_NONE)))
                xtest_write_iterable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_write_test)) ((((xiter)) ((((unsupported)) ("a") (1) ("p,q"))))) ("a,1,\"p,q\""))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((xiter)) ((((unsupported)) ("a") (1) ("None: is there a None literal in the EO language?"))))) ("a,1,"))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((xiter)) ((((unsupported)) 0)))) (""))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((xiter)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))) ("\"\""))
                        (((unsupported)) (((xself).x_write_error_test)) (((xcsv).xError)) ((((xiter)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))) (((xcsv).xQUOTE_NONE)))
                        bogusForceDataize.write ((((xself).x_write_test)) ((((xiter)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) (","))
                xtest_writerows.write
                  [xself]
                    memory > xwriter
                    memory > xwrite
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xwrite.write
                            [xself xbuf]
                              seq > @
                                (((unsupported)) ((xOSError)))
                        xwriter.write ((((xcsv).xwriter)) ((((xBrokenFile)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("a"))))))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xwriter).xwriterows)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("c") ("d"))))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("a,brnc,drn"))
                xtest_writerows_with_none.write
                  [xself]
                    memory > xwriter
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                            bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("d"))))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("a,rn,drn"))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                            bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("a"))))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("\"\"rnarn"))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                            bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("a"))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("arn\"\"rn"))
                xtest_writerows_errors.write
                  [xself]
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xwriter).xwriterows)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xwriter).xwriterows)) ((((xBadIterable)) 0)))
                xtest_writerows_legacy_strings.write
                  [xself]
                    memory > xc
                    memory > xwriter
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xc.write ((((x_testcapi).xunicode_legacy_string)) ("a"))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                            bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ((xc)))))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("arn"))
                x_read_test.write
                  [xself xinput xexpect]
                    memory > xreader
                    memory > xresult
                    seq > @
                      (((unsupported)) 0)
                        xreader.write ((((xcsv).xreader)) ((xinput)) ((((unsupported)) ((xkwargs)))))
                        xresult.write (((xlist)) ((xreader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpect)))
                xtest_read_oddinputs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) (""))) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("\"ab\"c"))) ("None: is there a None literal in the EO language?") (1))
                        (((unsupported)) (((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("ab0c"))) ("None: is there a None literal in the EO language?") (1))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("\"ab\"c"))) ((((unsupported)) ((((unsupported)) ("abc"))))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("ab0c"))) ("None: is there a None literal in the EO language?"))
                xtest_read_eol.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("a,b"))) ((((unsupported)) ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("a,bn"))) ((((unsupported)) ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("a,brn"))) ((((unsupported)) ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("a,br"))) ((((unsupported)) ((((unsupported)) ("a") ("b"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("a,brc,d"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("a,bnc,d"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("a,brnc,d"))) ((((unsupported)) 0)))
                xtest_read_eof.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("a,\""))) ((((unsupported)) ((((unsupported)) ("a") (""))))))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("\"a"))) ((((unsupported)) ((((unsupported)) ("a"))))))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("^"))) ((((unsupported)) ((((unsupported)) ("n"))))) ("^"))
                        (((unsupported)) (((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("a,\""))) ((((unsupported)) 0)) (TRUE))
                        (((unsupported)) (((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("\"a"))) ((((unsupported)) 0)) (TRUE))
                        (((unsupported)) (((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ("^"))) ((((unsupported)) 0)) ("^") (TRUE))
                xtest_read_escape.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ("a") ("b") ("c"))))) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ("a") ("b,c"))))) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ("a") ("b,c"))))) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ("a") ("b,c"))))) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("a,\"b,c\\\"\""))) ((((unsupported)) ((((unsupported)) ("a") ("b,c\""))))) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("a,\"b,c\"\\"))) ((((unsupported)) ((((unsupported)) ("a") ("b,c\\"))))) ("\\"))
                xtest_read_quoting.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("1,\",3,\",5"))) ((((unsupported)) ((((unsupported)) ("1") (",3,") ("5"))))))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("1,\",3,\",5"))) ((((unsupported)) ((((unsupported)) ("1") ("\"") ("3") ("\"") ("5"))))) ("None: is there a None literal in the EO language?") ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) ("1,\",3,\",5"))) ((((unsupported)) ((((unsupported)) ("1") ("\"") ("3") ("\"") ("5"))))) (((xcsv).xQUOTE_NONE)) ("\\"))
                        (((unsupported)) (((xself).x_read_test)) ((((unsupported)) (",3,\"5\",7.3, 9"))) ((((unsupported)) ((((unsupported)) ("") (3) ("5") (7.3) (9))))) (((xcsv).xQUOTE_NONNUMERIC)))
                        bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ("\"anb\", 7"))) ((((unsupported)) ((((unsupported)) ("anb") (" 7"))))))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xself).x_read_test)) ((((unsupported)) ("abc,3"))) ((((unsupported)) ((((unsupported)) 0)))) (((xcsv).xQUOTE_NONNUMERIC)))
                xtest_read_bigfield.write
                  [xself]
                    memory > xbigstring
                    memory > xbigline
                    memory > xlimit
                    memory > xsize
                    seq > @
                      seq
                        xlimit.write ((((xcsv).xfield_size_limit)) 0)
                        (((unsupported)) 0)
                          seq
                            xsize.write 50000
                            xbigstring.write ("X".mul (xsize))
                            xbigline.write ("%s,%s".mod (((unsupported)) ((xbigstring)) ((xbigstring))))
                            bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ((xbigline)))) ((((unsupported)) ((((unsupported)) ((xbigstring)) ((xbigstring)))))))
                            bogusForceDataize.write ((((xcsv).xfield_size_limit)) ((xsize)))
                            bogusForceDataize.write ((((xself).x_read_test)) ((((unsupported)) ((xbigline)))) ((((unsupported)) ((((unsupported)) ((xbigstring)) ((xbigstring)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xcsv).xfield_size_limit)) 0)) ((xsize)))
                            bogusForceDataize.write ((((xcsv).xfield_size_limit)) (((xsize).sub 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xself).x_read_test)) ((((unsupported)) ((xbigline)))) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xfield_size_limit)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xfield_size_limit)) (1) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xcsv).xfield_size_limit)) ((xlimit)))
                xtest_read_linenum.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xcsv).xreader)) ((((unsupported)) ("line,1") ("line,2") ("line,3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xline_num)) (0))
                        bogusForceDataize.write (((xnext)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xline_num)) (1))
                        bogusForceDataize.write (((xnext)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xline_num)) (2))
                        bogusForceDataize.write (((xnext)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xline_num)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xline_num)) (3))
                xtest_roundtrip_quoteed_newlines.write
                  [xself]
                    memory > xrows
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                          xrows.write (((unsupported)) ((((unsupported)) ("anb") ("b"))) ((((unsupported)) ("c") ("xrnd"))))
                          bogusForceDataize.write ((((xwriter).xwriterows)) ((xrows)))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          (((unsupported)) ((((unsupported)) ((xi)) ((xrow)))) ((((xenumerate)) (((((xcsv).xreader)) ((xfileobj)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xrow)) ((((unsupported)) ((xrows)) ((xi)))))
                xtest_roundtrip_escaped_unquoted_newlines.write
                  [xself]
                    memory > xrows
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) (((xcsv).xQUOTE_NONE)) ("\\"))
                          xrows.write (((unsupported)) ((((unsupported)) ("anb") ("b"))) ((((unsupported)) ("c") ("xrnd"))))
                          bogusForceDataize.write ((((xwriter).xwriterows)) ((xrows)))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          (((unsupported)) ((((unsupported)) ((xi)) ((xrow)))) ((((xenumerate)) ((((unsupported)) (((xcsv).xreader)) ((xfileobj)) (((xcsv).xQUOTE_NONE)) ("\\"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xrow)) ((((unsupported)) ((xrows)) ((xi)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_registry_badargs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xlist_dialects)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xget_dialect)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xcsv).xget_dialect)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xcsv).xget_dialect)) ("nonesuch"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xunregister_dialect)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xcsv).xunregister_dialect)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) (((xcsv).xunregister_dialect)) ("nonesuch"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ("nonesuch") (0) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ("nonesuch") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ("nonesuch") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xregister_dialect)) ((((unsupported)) 0)))
                xtest_registry.write
                  [xself]
                    memory > xname
                    memory > xexpected_dialects
                    memory > xgot_dialects
                    memory > xdelimiter
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xexcel)))
                          xdelimiter.write "t"
                        xname.write "myexceltsv"
                        xexpected_dialects.write (((((xcsv).xlist_dialects)) 0).add (((unsupported)) ((xname))))
                        bogusForceDataize.write ((((xexpected_dialects).xsort)) 0)
                        bogusForceDataize.write ((((xcsv).xregister_dialect)) ((xname)) ((xmyexceltsv)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xcsv).xunregister_dialect)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xcsv).xget_dialect)) ((xname))).xdelimiter)) ("t"))
                        xgot_dialects.write (((xsorted)) (((((xcsv).xlist_dialects)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_dialects)) ((xgot_dialects)))
                xtest_register_kwargs.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        xname.write "fedcba"
                        (((unsupported)) (((xcsv).xregister_dialect)) ((xname)) (";"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xcsv).xunregister_dialect)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xcsv).xget_dialect)) ((xname))).xdelimiter)) (";"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ("X") ("Y") ("Z"))))) ((((xlist)) (((((xcsv).xreader)) ((((unsupported)) ("X;Y;Z"))) ((xname)))))))
                xtest_incomplete_dialect.write
                  [xself]
                    memory > xdelimiter
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xDialect)))
                          xdelimiter.write "t"
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xmyexceltsv)))
                xtest_space_dialect.write
                  [xself]
                    memory > xescapechar
                    memory > xquoting
                    memory > xreader
                    memory > xdelimiter
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xexcel)))
                          seq
                            xdelimiter.write " "
                            xquoting.write ((xcsv).xQUOTE_NONE)
                            xescapechar.write "\\"
                        (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                          seq
                            bogusForceDataize.write ((((xfileobj).xwrite)) ("abc defnc1ccccc1 benzenen"))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            xreader.write (((unsupported)) (((xcsv).xreader)) ((xfileobj)) ((((xspace)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("abc") ("def"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("c1ccccc1") ("benzene"))))
                xcompare_dialect_123.write
                  [xself xexpected]
                    memory > xwriter
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") ("") ("utf-8"))) ((xfileobj)))
                          seq
                            xwriter.write ((((xcsv).xwriter)) ((xfileobj)) ((((unsupported)) ((xwriteargs)))) ((((unsupported)) ((xkwwriteargs)))))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((((unsupported)) (1) (2) (3))))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
                xtest_dialect_apply.write
                  [xself]
                    memory > xdelimiter
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xexcel)))
                          xdelimiter.write "t"
                        (((unsupported)) (((xcsv).xexcel)))
                          xdelimiter.write ":"
                        (((unsupported)) (((xcsv).xexcel)))
                          xdelimiter.write "|"
                        (((unsupported)) (((xcsv).xexcel)))
                          xdelimiter.write "u039B"
                        bogusForceDataize.write ((((xcsv).xregister_dialect)) ("testC") ((xtestC)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xcompare_dialect_123)) ("1,2,3rn"))
                            bogusForceDataize.write ((((xself).xcompare_dialect_123)) ("1t2t3rn") ((xtestA)))
                            (((unsupported)) (((xself).xcompare_dialect_123)) ("1:2:3rn") ((((xtestB)) 0)))
                            (((unsupported)) (((xself).xcompare_dialect_123)) ("1|2|3rn") ("testC"))
                            (((unsupported)) (((xself).xcompare_dialect_123)) ("1;2;3rn") ((xtestA)) (";"))
                            (((unsupported)) (((xself).xcompare_dialect_123)) ("1u039B2u039B3rn") ((xtestUni)))
                          bogusForceDataize.write ((((xcsv).xunregister_dialect)) ("testC"))
                xtest_bad_dialect.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xreader)) ((((unsupported)) 0)) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xreader)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xreader)) ((((unsupported)) 0)) ((1.neg)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcsv).xreader)) ((((unsupported)) 0)) (100))
                xtest_copy.write
                  [xself]
                    memory > xdialect
                    seq > @
                      (((unsupported)) ((xname)) (((((xcsv).xlist_dialects)) 0)))
                        seq
                          xdialect.write ((((xcsv).xget_dialect)) ((xname)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcopy).xcopy)) ((xdialect)))
                xtest_pickle.write
                  [xself]
                    memory > xdialect
                    seq > @
                      (((unsupported)) ((xname)) (((((xcsv).xlist_dialects)) 0)))
                        seq
                          xdialect.write ((((xcsv).xget_dialect)) ((xname)))
                          (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpickle).xdumps)) ((xdialect)) ((xproto)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xreaderAssertEqual.write
                  [xself xinput xexpected_result]
                    memory > xreader
                    memory > xfields
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ((xinput)))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xreader)) ((xfileobj)) (((xself).xdialect)))
                          xfields.write (((xlist)) ((xreader)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xfields)) ((xexpected_result)))
                xwriterAssertEqual.write
                  [xself xinput xexpected_result]
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) (((xself).xdialect)))
                          bogusForceDataize.write ((((xwriter).xwriterows)) ((xinput)))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected_result)))
            (((unsupported)) ((xTestCsvBase)))
              seq
                xdialect.write "excel"
                xtest_single.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("abc") ((((unsupported)) ((((unsupported)) ("abc"))))))
                xtest_simple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("1,2,3,4,5") ((((unsupported)) ((((unsupported)) ("1") ("2") ("3") ("4") ("5"))))))
                xtest_blankline.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("") ((((unsupported)) 0)))
                xtest_empty_fields.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) (",") ((((unsupported)) ((((unsupported)) ("") (""))))))
                xtest_singlequoted.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"\"") ((((unsupported)) ((((unsupported)) (""))))))
                xtest_singlequoted_left_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"\",") ((((unsupported)) ((((unsupported)) ("") (""))))))
                xtest_singlequoted_right_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) (",\"\"") ((((unsupported)) ((((unsupported)) ("") (""))))))
                xtest_single_quoted_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"\"\"\"") ((((unsupported)) ((((unsupported)) ("\""))))))
                xtest_quoted_quotes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"\"\"\"\"\"") ((((unsupported)) ((((unsupported)) ("\"\""))))))
                xtest_inline_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("a\"\"b") ((((unsupported)) ((((unsupported)) ("a\"\"b"))))))
                xtest_inline_quotes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("a\"b\"c") ((((unsupported)) ((((unsupported)) ("a\"b\"c"))))))
                xtest_quotes_and_more.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"a\"b") ((((unsupported)) ((((unsupported)) ("ab"))))))
                xtest_lone_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("a\"b") ((((unsupported)) ((((unsupported)) ("a\"b"))))))
                xtest_quote_and_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"a\" \"b\"") ((((unsupported)) ((((unsupported)) ("a \"b\""))))))
                xtest_space_and_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) (" \"a\"") ((((unsupported)) ((((unsupported)) (" \"a\""))))))
                xtest_quoted.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("1,2,3,\"I think, therefore I am\",5,6") ((((unsupported)) ((((unsupported)) ("1") ("2") ("3") ("I think, therefore I am") ("5") ("6"))))))
                xtest_quoted_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("1,2,3,\"\"\"I see,\"\" said the blind man\",\"as he picked up his hammer and saw\"") ((((unsupported)) ((((unsupported)) ("1") ("2") ("3") ("\"I see,\" said the blind man") ("as he picked up his hammer and saw"))))))
                xtest_quoted_nl.write
                  [xself]
                    memory > xinput
                    seq > @
                      seq
                        xinput.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xreaderAssertEqual)) ((xinput)) ((((unsupported)) ((((unsupported)) ("1") ("2") ("3") ("\"I see,\"nsaid the blind man") ("as he picked up hisnhammer and saw"))) ((((unsupported)) ("9") ("8") ("7") ("6"))))))
                xtest_dubious_quote.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("12,12,1\",") ((((unsupported)) ((((unsupported)) ("12") ("12") ("1\"") (""))))))
                xtest_null.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) 0)) (""))
                xtest_single_writer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) ("abc"))))) ("abcrn"))
                xtest_simple_writer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) (1) (2) ("abc") (3) (4))))) ("1,2,abc,3,4rn"))
                xtest_quotes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) (1) (2) ("a\"bc\"") (3) (4))))) ("1,2,\"a\"\"bc\"\"\",3,4rn"))
                xtest_quote_fieldsep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) ("abc,def"))))) ("\"abc,def\"rn"))
                xtest_newlines.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) (1) (2) ("anbc") (3) (4))))) ("1,2,\"anbc\",3,4rn"))
            (((unsupported)) (((xcsv).xexcel)))
              seq
                xquoting.write ((xcsv).xQUOTE_NONE)
                xescapechar.write "\\"
            (((unsupported)) ((xTestCsvBase)))
              seq
                xdialect.write (((xEscapedExcel)) 0)
                xtest_escape_fieldsep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) ("abc,def"))))) ((((unsupported)) 0)))
                xtest_read_escape_fieldsep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("abc,def"))))))
            (((unsupported)) ((xTestCsvBase)))
              seq
                xdialect.write "unix"
                xtest_simple_writer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) (1) ("abc def") ("abc"))))) ("\"1\",\"abc def\",\"abc\"n"))
                xtest_simple_reader.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ("\"1\",\"abc def\",\"abc\"n") ((((unsupported)) ((((unsupported)) ("1") ("abc def") ("abc"))))))
            (((unsupported)) (((xcsv).xexcel)))
              seq
                xquoting.write ((xcsv).xQUOTE_NONNUMERIC)
                xescapechar.write "\\"
            (((unsupported)) ((xTestCsvBase)))
              seq
                xdialect.write (((xQuotedEscapedExcel)) 0)
                xtest_write_escape_fieldsep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwriterAssertEqual)) ((((unsupported)) ((((unsupported)) ("abc,def"))))) ("\"abc,def\"rn"))
                xtest_read_escape_fieldsep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xreaderAssertEqual)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("abc,def"))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_writeheader_return_value.write
                  [xself]
                    memory > xwriteheader_return_value
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                          xwriteheader_return_value.write ((((xwriter).xwriteheader)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xwriteheader_return_value)) (10))
                xtest_write_simple_dict.write
                  [xself]
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                          bogusForceDataize.write ((((xwriter).xwriteheader)) 0)
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xreadline)) 0)) ("f1,f2,f3rn"))
                          bogusForceDataize.write ((((xwriter).xwriterow)) ((((unsupported)) ("f1") (10) ("f3") ("abc"))))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          bogusForceDataize.write ((((xfileobj).xreadline)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ("10,,abcrn"))
                xtest_write_multiple_dict_rows.write
                  [xself]
                    memory > xfileobj
                    memory > xwriter
                    seq > @
                      seq
                        xfileobj.write (((xStringIO)) 0)
                        xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                        bogusForceDataize.write ((((xwriter).xwriteheader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xgetvalue)) 0)) ("f1,f2,f3rn"))
                        bogusForceDataize.write ((((xwriter).xwriterows)) ((((unsupported)) ((((unsupported)) ("f1") (1) ("f2") ("abc") ("f3") ("f"))) ((((unsupported)) ("f1") (2) ("f2") (5) ("f3") ("xyz"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xgetvalue)) 0)) ("f1,f2,f3rn1,abc,frn2,5,xyzrn"))
                xtest_write_no_fields.write
                  [xself]
                    memory > xfileobj
                    seq > @
                      seq
                        xfileobj.write (((xStringIO)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcsv).xDictWriter)) ((xfileobj)))
                xtest_write_fields_not_in_fieldnames.write
                  [xself]
                    memory > xexception
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                        seq
                          xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                          (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcx)))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((((unsupported)) ("f4") (10) ("f2") ("spam") (1) ("abc"))))
                          xexception.write (((xstr)) (((xcx).xexception)))
                          bogusForceDataize.write ((((xself).xassertIn)) ("fieldnames") ((xexception)))
                          bogusForceDataize.write ((((xself).xassertIn)) ("'f4'") ((xexception)))
                          bogusForceDataize.write ((((xself).xassertNotIn)) ("'f2'") ((xexception)))
                          bogusForceDataize.write ((((xself).xassertIn)) ("1") ((xexception)))
                xtest_typo_in_extrasaction_raises_error.write
                  [xself]
                    memory > xfileobj
                    seq > @
                      seq
                        xfileobj.write (((xStringIO)) 0)
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2"))) ("raised"))
                xtest_write_field_not_in_field_names_raise.write
                  [xself]
                    memory > xfileobj
                    memory > xdictrow
                    memory > xwriter
                    seq > @
                      seq
                        xfileobj.write (((xStringIO)) 0)
                        xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2"))) ("raise"))
                        xdictrow.write (((unsupported)) ("f0") (0) ("f1") (1) ("f2") (2) ("f3") (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xcsv).xDictWriter).xwriterow)) ((xwriter)) ((xdictrow)))
                xtest_write_field_not_in_field_names_ignore.write
                  [xself]
                    memory > xfileobj
                    memory > xdictrow
                    memory > xwriter
                    seq > @
                      seq
                        xfileobj.write (((xStringIO)) 0)
                        xwriter.write (((unsupported)) (((xcsv).xDictWriter)) ((xfileobj)) ((((unsupported)) ("f1") ("f2"))) ("ignore"))
                        xdictrow.write (((unsupported)) ("f0") (0) ("f1") (1) ("f2") (2) ("f3") (3))
                        bogusForceDataize.write (((((xcsv).xDictWriter).xwriterow)) ((xwriter)) ((xdictrow)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xgetvalue)) 0)) ("1,2rn"))
                xtest_read_dict_fields.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("1,2,abcrn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("f3") ("abc"))))
                xtest_read_dict_no_fieldnames.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("f1,f2,f3rn1,2,abcrn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write ((((xcsv).xDictReader)) ((xfileobj)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("f3") ("abc"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xreader).xfieldnames)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                xtest_read_dict_fieldnames_from_file.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("f1,f2,f3rn1,2,abcrn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) ((((xnext)) (((((xcsv).xreader)) ((xfileobj)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xreader).xfieldnames)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("f3") ("abc"))))
                xtest_read_dict_fieldnames_chain.write
                  [xself]
                    memory > xreader
                    memory > xfirst
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                          seq
                            bogusForceDataize.write ((((xfileobj).xwrite)) ("f1,f2,f3rn1,2,abcrn"))
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            xreader.write ((((xcsv).xDictReader)) ((xfileobj)))
                            xfirst.write (((xnext)) ((xreader)))
                            (((unsupported)) ((xrow)) (((((xitertools).xchain)) ((((unsupported)) ((xfirst)))) ((xreader)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xreader).xfieldnames)) ((((unsupported)) ("f1") ("f2") ("f3"))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xrow)) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("f3") ("abc"))))
                xtest_read_long.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("1,2,abc,4,5,6rn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) ((((unsupported)) ("f1") ("f2"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("None: is there a None literal in the EO language?") ((((unsupported)) ("abc") ("4") ("5") ("6"))))))
                xtest_read_long_with_rest.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("1,2,abc,4,5,6rn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) ((((unsupported)) ("f1") ("f2"))) ("_rest"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("_rest") ((((unsupported)) ("abc") ("4") ("5") ("6"))))))
                xtest_read_long_with_rest_no_fieldnames.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("f1,f2rn1,2,abc,4,5,6rn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) ("_rest"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xreader).xfieldnames)) ((((unsupported)) ("f1") ("f2"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("f1") ("1") ("f2") ("2") ("_rest") ((((unsupported)) ("abc") ("4") ("5") ("6"))))))
                xtest_read_short.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((xTemporaryFile)) ("w+"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) ("1,2,abc,4,5,6rn1,2,abcrn"))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xfileobj)) (((("1 2 3 4 5 6".xsplit)) 0)) ("DEFAULT"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("1") ("1") ("2") ("2") ("3") ("abc") ("4") ("4") ("5") ("5") ("6") ("6"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("1") ("1") ("2") ("2") ("3") ("abc") ("4") ("DEFAULT") ("5") ("DEFAULT") ("6") ("DEFAULT"))))
                xtest_read_multi.write
                  [xself]
                    memory > xreader
                    memory > xsample
                    seq > @
                      seq
                        xsample.write (((unsupported)) ("2147483648,43.0e12,17,abc,defrn") ("147483648,43.0e2,17,abc,defrn") ("47483648,43.0,170,abc,defrn"))
                        xreader.write (((unsupported)) (((xcsv).xDictReader)) ((xsample)) (((("i1 float i2 s1 s2".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("i1") ("2147483648") ("float") ("43.0e12") ("i2") ("17") ("s1") ("abc") ("s2") ("def"))))
                xtest_read_with_blanks.write
                  [xself]
                    memory > xreader
                    seq > @
                      seq
                        xreader.write (((unsupported)) (((xcsv).xDictReader)) ((((unsupported)) ("1,2,abc,4,5,6rn") ("rn") ("1,2,abc,4,5,6rn"))) (((("1 2 3 4 5 6".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("1") ("1") ("2") ("2") ("3") ("abc") ("4") ("4") ("5") ("5") ("6") ("6"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("1") ("1") ("2") ("2") ("3") ("abc") ("4") ("4") ("5") ("5") ("6") ("6"))))
                xtest_read_semi_sep.write
                  [xself]
                    memory > xreader
                    seq > @
                      seq
                        xreader.write (((unsupported)) (((xcsv).xDictReader)) ((((unsupported)) ("1;2;abc;4;5;6rn"))) (((("1 2 3 4 5 6".xsplit)) 0)) (";"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xreader)))) ((((unsupported)) ("1") ("1") ("2") ("2") ("3") ("abc") ("4") ("4") ("5") ("5") ("6") ("6"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_int_write.write
                  [xself]
                    memory > xexpected
                    memory > xcontents
                    memory > xwriter
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcontents.write (((unsupported)) ((20.sub (xi))) ((xi)) ((((xrange)) (20))))
                        xa.write ((((xarray).xarray)) ("i") ((xcontents)))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) ("excel"))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((xa)))
                            xexpected.write ((((",".xjoin)) ((((unsupported)) ((((xstr)) ((xi)))) ((xi)) ((xa))))).add "rn")
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
                xtest_double_write.write
                  [xself]
                    memory > xexpected
                    memory > xcontents
                    memory > xwriter
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcontents.write (((unsupported)) (((20.sub (xi)).mul 0.1)) ((xi)) ((((xrange)) (20))))
                        xa.write ((((xarray).xarray)) ("d") ((xcontents)))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) ("excel"))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((xa)))
                            xexpected.write ((((",".xjoin)) ((((unsupported)) ((((xstr)) ((xi)))) ((xi)) ((xa))))).add "rn")
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
                xtest_float_write.write
                  [xself]
                    memory > xexpected
                    memory > xcontents
                    memory > xwriter
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcontents.write (((unsupported)) (((20.sub (xi)).mul 0.1)) ((xi)) ((((xrange)) (20))))
                        xa.write ((((xarray).xarray)) ("f") ((xcontents)))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) ("excel"))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((xa)))
                            xexpected.write ((((",".xjoin)) ((((unsupported)) ((((xstr)) ((xi)))) ((xi)) ((xa))))).add "rn")
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
                xtest_char_write.write
                  [xself]
                    memory > xexpected
                    memory > xwriter
                    memory > xa
                    seq > @
                      seq
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        xa.write ((((xarray).xarray)) ("u") (((xstring).xascii_letters)))
                        (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") (""))) ((xfileobj)))
                          seq
                            xwriter.write (((unsupported)) (((xcsv).xwriter)) ((xfileobj)) ("excel"))
                            bogusForceDataize.write ((((xwriter).xwriterow)) ((xa)))
                            xexpected.write ((((",".xjoin)) ((xa))).add "rn")
                            bogusForceDataize.write ((((xfileobj).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_quoting.write
                  [xself]
                    memory > xd
                    memory > xdoublequote
                    memory > xquoting
                    memory > xlineterminator
                    memory > xdelimiter
                    memory > xskipinitialspace
                    memory > xescapechar
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xDialect)))
                          seq
                            xdelimiter.write ";"
                            xescapechar.write "\\"
                            xdoublequote.write FALSE
                            xskipinitialspace.write TRUE
                            xlineterminator.write "rn"
                            xquoting.write ((xcsv).xQUOTE_NONE)
                        xd.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xquoting)) (((xcsv).xQUOTE_NONE)))
                        (((unsupported)) (((xmydialect).xquoting)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xmydialect)))
                        (((unsupported)) (((xmydialect).xdoublequote)) (TRUE))
                        (((unsupported)) (((xmydialect).xquoting)) (((xcsv).xQUOTE_ALL)))
                        (((unsupported)) (((xmydialect).xquotechar)) ("\""))
                        xd.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xquoting)) (((xcsv).xQUOTE_ALL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xquotechar)) ("\""))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xd).xdoublequote)))
                        (((unsupported)) (((xmydialect).xquotechar)) ("''"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"quotechar\" must be a 1-character string"))
                        (((unsupported)) (((xmydialect).xquotechar)) (4))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"quotechar\" must be string, not int"))
                xtest_delimiter.write
                  [xself]
                    memory > xd
                    memory > xdoublequote
                    memory > xquoting
                    memory > xlineterminator
                    memory > xdelimiter
                    memory > xskipinitialspace
                    memory > xescapechar
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xDialect)))
                          seq
                            xdelimiter.write ";"
                            xescapechar.write "\\"
                            xdoublequote.write FALSE
                            xskipinitialspace.write TRUE
                            xlineterminator.write "rn"
                            xquoting.write ((xcsv).xQUOTE_NONE)
                        xd.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xdelimiter)) (";"))
                        (((unsupported)) (((xmydialect).xdelimiter)) (":::"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"delimiter\" must be a 1-character string"))
                        (((unsupported)) (((xmydialect).xdelimiter)) (""))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"delimiter\" must be a 1-character string"))
                        (((unsupported)) (((xmydialect).xdelimiter)) (","))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"delimiter\" must be string, not bytes"))
                        (((unsupported)) (((xmydialect).xdelimiter)) (4))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"delimiter\" must be string, not int"))
                xtest_lineterminator.write
                  [xself]
                    memory > xd
                    memory > xdoublequote
                    memory > xquoting
                    memory > xlineterminator
                    memory > xdelimiter
                    memory > xskipinitialspace
                    memory > xescapechar
                    seq > @
                      seq
                        (((unsupported)) (((xcsv).xDialect)))
                          seq
                            xdelimiter.write ";"
                            xescapechar.write "\\"
                            xdoublequote.write FALSE
                            xskipinitialspace.write TRUE
                            xlineterminator.write "rn"
                            xquoting.write ((xcsv).xQUOTE_NONE)
                        xd.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xlineterminator)) ("rn"))
                        (((unsupported)) (((xmydialect).xlineterminator)) (":::"))
                        xd.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xlineterminator)) (":::"))
                        (((unsupported)) (((xmydialect).xlineterminator)) (4))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcsv).xError)))) ((xcm)))
                          bogusForceDataize.write (((xmydialect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("\"lineterminator\" must be a string"))
                xtest_invalid_chars.write
                  [xself]
                    memory > xcreate_invalid
                    seq > @
                      seq
                        xcreate_invalid.write
                          [xfield_name xvalue]
                            memory > xd
                            seq > @
                              seq
                                (((unsupported)) (((xcsv).xDialect)))
                                bogusForceDataize.write (((xsetattr)) ((xmydialect)) ((xfield_name)) ((xvalue)))
                                xd.write (((xmydialect)) 0)
                        (((unsupported)) ((xfield_name)) ((((unsupported)) ("delimiter") ("escapechar") ("quotechar"))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xfield_name)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xcreate_invalid)) ((xfield_name)) (""))
                              bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xcreate_invalid)) ((xfield_name)) ("abc"))
                              bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xcreate_invalid)) ((xfield_name)) ("x"))
                              bogusForceDataize.write ((((xself).xassertRaises)) (((xcsv).xError)) ((xcreate_invalid)) ((xfield_name)) (5))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsample1.write (((unsupported)) 0)
                xsample2.write (((unsupported)) 0)
                xheader1.write (((unsupported)) 0)
                xsample3.write (((unsupported)) 0)
                xsample4.write (((unsupported)) 0)
                xsample5.write "aaatbbbrnAAAtrnBBBtrn"
                xsample6.write "a|b|crnd|e|frn"
                xsample7.write "'a'|'b'|'c'rn'd'|e|frn"
                xheader2.write (((unsupported)) 0)
                xsample8.write (((unsupported)) 0)
                xsample9.write (((unsupported)) 0)
                xtest_has_header.write
                  [xself]
                    memory > xsniffer
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xsniffer).xhas_header)) (((xself).xsample1)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xsniffer).xhas_header)) ((((xself).xheader1).add ((xself).xsample1))))) (TRUE))
                xtest_has_header_regex_special_delimiter.write
                  [xself]
                    memory > xsniffer
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xsniffer).xhas_header)) (((xself).xsample8)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xsniffer).xhas_header)) ((((xself).xheader2).add ((xself).xsample8))))) (TRUE))
                xtest_guess_quote_and_delimiter.write
                  [xself]
                    memory > xsniffer
                    memory > xdialect
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        (((unsupported)) ((xheader)) ((((unsupported)) (";'123;4';") ("'123;4';") (";'123;4'") ("'123;4'"))))
                          (((unsupported)) (((((xself).xsubTest)) ((xheader)))))
                            seq
                              xdialect.write ((((xsniffer).xsniff)) ((xheader)) (",;"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) (";"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xquotechar)) ("'"))
                              bogusForceDataize.write ((((xself).xassertIs)) (((xdialect).xdoublequote)) (FALSE))
                              bogusForceDataize.write ((((xself).xassertIs)) (((xdialect).xskipinitialspace)) (FALSE))
                xtest_sniff.write
                  [xself]
                    memory > xsniffer
                    memory > xdialect
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) (","))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xquotechar)) ("\""))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xdialect).xskipinitialspace)) (TRUE))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) (":"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xquotechar)) ("'"))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xdialect).xskipinitialspace)) (FALSE))
                xtest_delimiters.write
                  [xself]
                    memory > xsniffer
                    memory > xdialect
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample3)))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xdialect).xdelimiter)) (((xself).xsample3)))
                        xdialect.write (((unsupported)) (((xsniffer).xsniff)) (((xself).xsample3)) ("?,"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("?"))
                        xdialect.write (((unsupported)) (((xsniffer).xsniff)) (((xself).xsample3)) ("/,"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("/"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) (";"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("t"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample6)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("|"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample7)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("|"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xquotechar)) ("'"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample8)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("+"))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample9)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xdelimiter)) ("+"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdialect).xquotechar)) ("'"))
                xtest_doublequote.write
                  [xself]
                    memory > xsniffer
                    memory > xdialect
                    seq > @
                      seq
                        xsniffer.write ((((xcsv).xSniffer)) 0)
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xheader1)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xdialect).xdoublequote)))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xheader2)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xdialect).xdoublequote)))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xdialect).xdoublequote)))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample8)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xdialect).xdoublequote)))
                        xdialect.write ((((xsniffer).xsniff)) (((xself).xsample9)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xdialect).xdoublequote)))
            (((unsupported)) 0)
              seq
                xwrite.write
                  [xs]
                    seq > @
                      (((unsupported)) 0)
                xwritelines.write (xwrite)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsys)) ("gettotalrefcount"))) ("requires sys.gettotalrefcount()"))))
              seq
                xtest_create_read.write
                  [xself]
                    memory > xdelta
                    memory > xlastrc
                    memory > xrc
                    seq > @
                      seq
                        xdelta.write 0
                        xlastrc.write ((((xsys).xgettotalrefcount)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          seq
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xgc).xgarbage)) ((((unsupported)) 0)))
                            xrc.write ((((xsys).xgettotalrefcount)) 0)
                            bogusForceDataize.write ((((xcsv).xreader)) ((((unsupported)) ("a,b,crn"))))
                            bogusForceDataize.write ((((xcsv).xreader)) ((((unsupported)) ("a,b,crn"))))
                            bogusForceDataize.write ((((xcsv).xreader)) ((((unsupported)) ("a,b,crn"))))
                            xdelta.write ((xrc).sub (xlastrc))
                            xlastrc.write (xrc)
                        bogusForceDataize.write ((((xself).xassertLess)) ((xdelta)) (3))
                xtest_create_write.write
                  [xself]
                    memory > xdelta
                    memory > xlastrc
                    memory > xs
                    memory > xrc
                    seq > @
                      seq
                        xdelta.write 0
                        xlastrc.write ((((xsys).xgettotalrefcount)) 0)
                        xs.write (((xNUL)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          seq
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xgc).xgarbage)) ((((unsupported)) 0)))
                            xrc.write ((((xsys).xgettotalrefcount)) 0)
                            bogusForceDataize.write ((((xcsv).xwriter)) ((xs)))
                            bogusForceDataize.write ((((xcsv).xwriter)) ((xs)))
                            bogusForceDataize.write ((((xcsv).xwriter)) ((xs)))
                            xdelta.write ((xrc).sub (xlastrc))
                            xlastrc.write (xrc)
                        bogusForceDataize.write ((((xself).xassertLess)) ((xdelta)) (3))
                xtest_read.write
                  [xself]
                    memory > xrc
                    memory > xrows
                    memory > xdelta
                    memory > xrdr
                    memory > xlastrc
                    seq > @
                      seq
                        xdelta.write 0
                        xrows.write ((((unsupported)) ("a,b,crn")).mul 5)
                        xlastrc.write ((((xsys).xgettotalrefcount)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          seq
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xgc).xgarbage)) ((((unsupported)) 0)))
                            xrc.write ((((xsys).xgettotalrefcount)) 0)
                            xrdr.write ((((xcsv).xreader)) ((xrows)))
                            (((unsupported)) ((xrow)) ((xrdr)))
                            xdelta.write ((xrc).sub (xlastrc))
                            xlastrc.write (xrc)
                        bogusForceDataize.write ((((xself).xassertLess)) ((xdelta)) (5))
                xtest_write.write
                  [xself]
                    memory > xrc
                    memory > xrows
                    memory > xs
                    memory > xlastrc
                    memory > xdelta
                    memory > xwriter
                    seq > @
                      seq
                        xdelta.write 0
                        xrows.write ((((unsupported)) ((((unsupported)) (1) (2) (3)))).mul 5)
                        xs.write (((xNUL)) 0)
                        xlastrc.write ((((xsys).xgettotalrefcount)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          seq
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xgc).xgarbage)) ((((unsupported)) 0)))
                            xrc.write ((((xsys).xgettotalrefcount)) 0)
                            xwriter.write ((((xcsv).xwriter)) ((xs)))
                            (((unsupported)) ((xrow)) ((xrows)))
                              bogusForceDataize.write ((((xwriter).xwriterow)) ((xrow)))
                            xdelta.write ((xrc).sub (xlastrc))
                            xlastrc.write (xrc)
                        bogusForceDataize.write ((((xself).xassertLess)) ((xdelta)) (5))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xnames.write (((unsupported)) ("Martin von Löwis") ("Marc André Lemburg") ("Guido van Rossum") ("François Pinard"))
                xtest_unicode_read.write
                  [xself]
                    memory > xreader
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") ("") ("utf-8"))) ((xfileobj)))
                        seq
                          bogusForceDataize.write ((((xfileobj).xwrite)) (((((",".xjoin)) (((xself).xnames))).add "rn")))
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          xreader.write ((((xcsv).xreader)) ((xfileobj)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xreader)))) ((((unsupported)) (((xself).xnames)))))
                xtest_unicode_write.write
                  [xself]
                    memory > xexpected
                    memory > xwriter
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") ("") ("utf-8"))) ((xfileobj)))
                        seq
                          xwriter.write ((((xcsv).xwriter)) ((xfileobj)))
                          bogusForceDataize.write ((((xwriter).xwriterow)) (((xself).xnames)))
                          xexpected.write ((((",".xjoin)) (((xself).xnames))).add "rn")
                          bogusForceDataize.write ((((xfileobj).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfileobj).xread)) 0)) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_ordering_for_the_dict_reader_and_writer.write
                  [xself]
                    memory > xdw
                    memory > xkt
                    memory > xdr
                    memory > xresultset
                    seq > @
                      seq
                        xresultset.write (((xset)) 0)
                        (((unsupported)) ((xkeys)) ((((xpermutations)) ("abcde"))))
                          (((unsupported)) ((((unsupported)) ((xTemporaryFile)) ("w+") ("") ("utf-8"))) ((xfileobject)))
                            seq
                              xdw.write ((((xcsv).xDictWriter)) ((xfileobject)) ((xkeys)))
                              bogusForceDataize.write ((((xdw).xwriteheader)) 0)
                              bogusForceDataize.write ((((xfileobject).xseek)) (0))
                              xdr.write ((((xcsv).xDictReader)) ((xfileobject)))
                              xkt.write (((xtuple)) (((xdr).xfieldnames)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xkeys)) ((xkt)))
                              bogusForceDataize.write ((((xresultset).xadd)) ((xkt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresultset)))) (120) ("Key ordering: some key permutations not collected (expected 120)"))
                xtest_ordered_dict_reader.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((((xdedent)) ((((unsupported)) 0))).xsplitlines)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcsv).xDictReader)) ((xdata)))))) ((((unsupported)) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Eric"))) ((((unsupported)) ("LastName") ("Idle"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Graham"))) ((((unsupported)) ("LastName") ("Chapman"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("Over1") ("Over2"))))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Under1"))) ((((unsupported)) ("LastName") ("None: is there a None literal in the EO language?"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("John"))) ((((unsupported)) ("LastName") ("Cleese"))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) (((xcsv).xDictReader)) ((xdata)) ("OtherInfo"))))) ((((unsupported)) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Eric"))) ((((unsupported)) ("LastName") ("Idle"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Graham"))) ((((unsupported)) ("LastName") ("Chapman"))) ((((unsupported)) ("OtherInfo") ((((unsupported)) ("Over1") ("Over2"))))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("Under1"))) ((((unsupported)) ("LastName") ("None: is there a None literal in the EO language?"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("FirstName") ("John"))) ((((unsupported)) ("LastName") ("Cleese"))))))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xdata)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) (((xcsv).xDictReader)) ((xdata)) ((((unsupported)) ("fname") ("lname"))))))) ((((unsupported)) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("fname") ("Eric"))) ((((unsupported)) ("lname") ("Idle"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("fname") ("Graham"))) ((((unsupported)) ("lname") ("Chapman"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("Over1") ("Over2"))))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("fname") ("Under1"))) ((((unsupported)) ("lname") ("None: is there a None literal in the EO language?"))))))) ((((xOrderedDict)) ((((unsupported)) ((((unsupported)) ("fname") ("John"))) ((((unsupported)) ("lname") ("Cleese"))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xextra
                  seq > @
                    seq
                      xextra.write (((unsupported)) ("__doc__") ("__version__"))
                      (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xcsv)) ((((unsupported)) ("csv") ("_csv"))) ((xextra)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)