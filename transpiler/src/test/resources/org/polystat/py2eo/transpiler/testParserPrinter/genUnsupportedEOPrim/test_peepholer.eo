memory > xd
memory > xopname
memory > xlist
memory > xValueError
memory > xt
memory > xb
memory > xdis
memory > xcmp_op
memory > xrepr
memory > xhasattr
memory > xx
memory > xcompile
memory > xtuple
memory > xe
memory > xy
memory > xinstr
memory > xmin
memory > xc
memory > xfrozenset
memory > xBytecodeTestCase
memory > xfunc
memory > xrange
memory > xmax
memory > xbaz
memory > xunittest
memory > xelem
memory > xline
memory > xfoo
memory > xlen
memory > x__name__
memory > xa
[] > test_peepholer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_folding_of_binops_on_constants
        memory > xtest_global_as_constant
        memory > xtest_pack_unpack
        memory > xtest_trailing_nops
        memory > xtest_elim_jump_to_uncond_jump
        memory > xtest_folding_of_lists_of_constants
        memory > xtest_if_with_if_expression
        memory > xcount_instr_recursively
        memory > xtest_while_one
        memory > xcheck_lnotab
        memory > xtest_iterate_literal_list
        memory > xtest_in_literal_list
        memory > xtest_constant_folding
        memory > xtest_elim_jump_to_return
        memory > xtest_folding_of_sets_of_constants
        memory > xtest_elim_extra_return
        memory > xtest_elim_inversion_of_is_or_in
        memory > xtest_binary_subscr_on_unicode
        memory > xtest_elim_jump_after_return2
        memory > xtest_bug_11510
        memory > xtest_elim_jump_to_uncond_jump3
        memory > xtest_folding_of_unaryops_on_constants
        memory > xcheck_jump_targets
        memory > xtest_make_function_doesnt_bail
        memory > xtest_elim_jump_after_return1
        memory > xtest_unot
        memory > xtest_elim_jump_to_uncond_jump2
        memory > xtest_condition_with_binop_with_bools
        memory > xtest_folding_of_tuples_of_constants
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xcount_instr_recursively.write
              [xf xopname]
                memory > xcount
                seq > @
                  seq
                    xcount.write 0
                    (((unsupported)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))))
                      (((xinstr).xopname).eq (xopname)).if
                        (((unsupported)) ((xcount)) (1))
                    (((xhasattr)) ((xf)) ("__code__")).if
                      xf.write ((xf).x__code__)
                    (((unsupported)) ((xc)) (((xf).xco_consts)))
                      (((xhasattr)) ((xc)) ("co_code")).if
                        (((unsupported)) ((xcount)) ((((xcount_instr_recursively)) ((xc)) ((xopname)))))
                    (((unsupported)) ((xcount)))
            (((unsupported)) ((xBytecodeTestCase)))
              seq
                xcheck_jump_targets.write
                  [xself xcode]
                    memory > xtgt
                    memory > xinstructions
                    memory > xtargets
                    seq > @
                      seq
                        xinstructions.write (((xlist)) (((((xdis).xget_instructions)) ((xcode)))))
                        xtargets.write (((unsupported)) (((xinstr).xoffset)) ((xinstr)) ((xinstr)) ((xinstructions)))
                        (((unsupported)) ((xinstr)) ((xinstructions)))
                          seq
                            (((unsupported)) ("JUMP_") (((xinstr).xopname))).if
                              (((unsupported)) 0)
                            xtgt.write (((unsupported)) ((xtargets)) (((xinstr).xargval)))
                            (((unsupported)) (((xtgt).xopname)) ((((unsupported)) ("JUMP_ABSOLUTE") ("JUMP_FORWARD")))).if
                              bogusForceDataize.write ((((xself).xfail)) ("{instr.opname} at {instr.offset} jumps to {tgt.opname} at {tgt.offset}"))
                            ((((unsupported)) (((xinstr).xopname)) ((((unsupported)) ("JUMP_ABSOLUTE") ("JUMP_FORWARD")))).and (((xtgt).xopname).eq "RETURN_VALUE")).if
                              bogusForceDataize.write ((((xself).xfail)) ("{instr.opname} at {instr.offset} jumps to {tgt.opname} at {tgt.offset}"))
                            ((((unsupported)) ("_OR_POP") (((xinstr).xopname))).and (((unsupported)) ("JUMP_IF_") (((xtgt).xopname)))).if
                              bogusForceDataize.write ((((xself).xfail)) ("{instr.opname} at {instr.offset} jumps to {tgt.opname} at {tgt.offset}"))
                xcheck_lnotab.write
                  [xself xcode]
                    memory > xmax_bytecode
                    memory > xlnotab
                    memory > xmin_bytecode
                    seq > @
                      seq
                        unsupported
                        xcode.write ((((xdis).x_get_code_object)) ((xcode)))
                        xlnotab.write (((xlist)) (((((xdis).xfindlinestarts)) ((xcode)))))
                        xmin_bytecode.write (((xmin)) ((((unsupported)) ((((unsupported)) ((xt)) (0))) ((xt)) ((xlnotab)))))
                        xmax_bytecode.write (((xmax)) ((((unsupported)) ((((unsupported)) ((xt)) (0))) ((xt)) ((xlnotab)))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xmin_bytecode)) (0))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xmax_bytecode)) ((((xlen)) (((xcode).xco_code)))))
                xtest_unot.write
                  [xself]
                    memory > xunot
                    seq > @
                      seq
                        xunot.write
                          [xx]
                            seq > @
                              (((xx).eq 2).not).if
                                (((unsupported)) ((((unsupported)) ((xx)))))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xunot)) ("UNARY_NOT"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xunot)) ("POP_JUMP_IF_FALSE"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xunot)) ("POP_JUMP_IF_TRUE"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xunot)))
                xtest_elim_inversion_of_is_or_in.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xline)) ((xcmp_op)))) ((((unsupported)) ((((unsupported)) ("not a is b") ("is not"))) ((((unsupported)) ("not a in b") ("not in"))) ((((unsupported)) ("not a is not b") ("is"))) ((((unsupported)) ("not a not in b") ("in"))))))
                        seq
                          xcode.write (((xcompile)) ((xline)) ("") ("single"))
                          bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("COMPARE_OP") ((xcmp_op)))
                          bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_global_as_constant.write
                  [xself]
                    memory > xh
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            memory > xx
                            seq > @
                              seq
                                xx.write "None: is there a None literal in the EO language?"
                                xx.write "None: is there a None literal in the EO language?"
                                (((unsupported)) ((xx)))
                        xg.write
                          []
                            memory > xx
                            seq > @
                              seq
                                xx.write TRUE
                                (((unsupported)) ((xx)))
                        xh.write
                          []
                            memory > xx
                            seq > @
                              seq
                                xx.write FALSE
                                (((unsupported)) ((xx)))
                        (((unsupported)) ((((unsupported)) ((xfunc)) ((xelem)))) ((((unsupported)) ((((unsupported)) ((xf)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ((xg)) (TRUE))) ((((unsupported)) ((xh)) (FALSE))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xfunc)) ("LOAD_GLOBAL"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xfunc)) ("LOAD_CONST") ((xelem)))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xfunc)))
                        xf.write
                          []
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("LOAD_GLOBAL"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ("LOAD_CONST") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_while_one.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                while.
                                  1
                                  [unused]
                                    seq > @
                                (((unsupported)) ((xlist)))
                        (((unsupported)) ((xelem)) ((((unsupported)) ("LOAD_CONST") ("POP_JUMP_IF_FALSE"))))
                          bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ((xelem)))
                        (((unsupported)) ((xelem)) ((((unsupported)) ("JUMP_ABSOLUTE"))))
                          bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ((xelem)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_pack_unpack.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("a, = a,") ("LOAD_CONST"))) ((((unsupported)) ("a, b = a, b") ("ROT_TWO"))) ((((unsupported)) ("a, b, c = a, b, c") ("ROT_THREE"))))))
                        seq
                          xcode.write (((xcompile)) ((xline)) ("") ("single"))
                          bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ((xelem)))
                          bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BUILD_TUPLE"))
                          bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("UNPACK_TUPLE"))
                          bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_folding_of_tuples_of_constants.write
                  [xself]
                    memory > xcode
                    memory > xcrater
                    memory > xload_consts
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("a = 1,2,3") ((((unsupported)) (1) (2) (3))))) ((((unsupported)) ("(\"a\",\"b\",\"c\")") ((((unsupported)) ("a") ("b") ("c"))))) ((((unsupported)) ("a,b,c = 1,2,3") ((((unsupported)) (1) (2) (3))))) ((((unsupported)) ("(None, 1, None)") ((((unsupported)) ("None: is there a None literal in the EO language?") (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("((1, 2), 3, 4)") ((((unsupported)) ((((unsupported)) (1) (2))) (3) (4))))))))
                          seq
                            xcode.write (((xcompile)) ((xline)) ("") ("single"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                            bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BUILD_TUPLE"))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ((((xrepr)) ((((xtuple)) ((((xrange)) (10000))))))) ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BUILD_TUPLE"))
                        xload_consts.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xcode)))) ((((xinstr).xopname).eq "LOAD_CONST")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xload_consts)))) (2))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcrater.write
                          []
                            seq > @
                              (((unsupported)) (((((unsupported)) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9)).neg)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcrater)))
                xtest_folding_of_lists_of_constants.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("a in [1,2,3]") ((((unsupported)) (1) (2) (3))))) ((((unsupported)) ("a not in [\"a\",\"b\",\"c\"]") ((((unsupported)) ("a") ("b") ("c"))))) ((((unsupported)) ("a in [None, 1, None]") ((((unsupported)) ("None: is there a None literal in the EO language?") (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("a not in [(1, 2), 3, 4]") ((((unsupported)) ((((unsupported)) (1) (2))) (3) (4))))))))
                        seq
                          xcode.write (((xcompile)) ((xline)) ("") ("single"))
                          bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                          bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BUILD_LIST"))
                          bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_folding_of_sets_of_constants.write
                  [xself]
                    memory > xcode
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("a in {1,2,3}") ((((xfrozenset)) ((((unsupported)) (1) (2) (3))))))) ((((unsupported)) ("a not in {\"a\",\"b\",\"c\"}") ((((xfrozenset)) ((((unsupported)) ("a") ("c") ("b"))))))) ((((unsupported)) ("a in {None, 1, None}") ((((xfrozenset)) ((((unsupported)) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)) ("a not in {(1, 2), 3, 4}") ((((xfrozenset)) ((((unsupported)) ((((unsupported)) (1) (2))) (3) (4))))))) ((((unsupported)) ("a in {1, 2, 3, 3, 2, 1}") ((((xfrozenset)) ((((unsupported)) (1) (2) (3))))))))))
                          seq
                            xcode.write (((xcompile)) ((xline)) ("") ("single"))
                            bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BUILD_SET"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xa)) ((((unsupported)) (1) (2) (3))))))
                        xg.write
                          [xa]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xa)) ((((unsupported)) (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xf)) (3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf)) (4)).not)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xg)) (3)).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xg)) (4))))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xg)))
                xtest_folding_of_binops_on_constants.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("a = 2+3+4") (9))) ((((unsupported)) ("\"@\"*4") ("@@@@"))) ((((unsupported)) ("a=\"abc\" + \"def\"") ("abcdef"))) ((((unsupported)) ("a = 3**4") (81))) ((((unsupported)) ("a = 3*4") (12))) ((((unsupported)) ("a = 13//4") (3))) ((((unsupported)) ("a = 14%4") (2))) ((((unsupported)) ("a = 2+3") (5))) ((((unsupported)) ("a = 13-4") (9))) ((((unsupported)) ("a = (12,13)[1]") (13))) ((((unsupported)) ("a = 13 << 2") (52))) ((((unsupported)) ("a = 13 >> 2") (3))) ((((unsupported)) ("a = 13 & 7") (5))) ((((unsupported)) ("a = 13 ^ 7") (10))) ((((unsupported)) ("a = 13 | 7") (15))))))
                          seq
                            xcode.write (((xcompile)) ((xline)) ("") ("single"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                            (((unsupported)) ((xinstr)) (((((xdis).xget_instructions)) ((xcode)))))
                              bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("BINARY_"))))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("a=2+\"b\"") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") (2))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ("b"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("a=\"x\"*10000") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") (10000))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (("x".mul 10000)) (((xcode).xco_consts)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("a=1<<1000") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") (1000))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) (1) (1000))) (((xcode).xco_consts)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("a=2**1000") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") (1000))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) (2) (1000))) (((xcode).xco_consts)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_binary_subscr_on_unicode.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((xcompile)) ("\"foo\"[0]") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ("f"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BINARY_SUBSCR"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("\"u0061uffff\"[1]") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ("uffff"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BINARY_SUBSCR"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("\"U00012345\"[0]") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ("U00012345"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xcode)) ("BINARY_SUBSCR"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xcode.write (((xcompile)) ("\"fuu\"[10]") ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("BINARY_SUBSCR"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_folding_of_unaryops_on_constants.write
                  [xself]
                    memory > xcode
                    memory > xnegzero
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xline)) ((xelem)))) ((((unsupported)) ((((unsupported)) ("-0.5") ((0.5.neg)))) ((((unsupported)) ("-0.0") ((0.0.neg)))) ((((unsupported)) ("-(1.0-1.0)") ((0.0.neg)))) ((((unsupported)) ("-0") (0))) ((((unsupported)) ("~-2") (1))) ((((unsupported)) ("+1") (1))))))
                          seq
                            xcode.write (((xcompile)) ((xline)) ("") ("single"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                            (((unsupported)) ((xinstr)) (((((xdis).xget_instructions)) ((xcode)))))
                              bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("UNARY_"))))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                        xnegzero.write
                          []
                            seq > @
                              (((unsupported)) (((1.0.sub 1.0).neg)))
                        (((unsupported)) ((xinstr)) (((((xdis).xget_instructions)) ((xnegzero)))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("UNARY_"))))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xnegzero)))
                        (((unsupported)) ((((unsupported)) ((xline)) ((xelem)) ((xopname)))) ((((unsupported)) ((((unsupported)) ("-\"abc\"") ("abc") ("UNARY_NEGATIVE"))) ((((unsupported)) ("~\"abc\"") ("abc") ("UNARY_INVERT"))))))
                          seq
                            xcode.write (((xcompile)) ((xline)) ("") ("single"))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ("LOAD_CONST") ((xelem)))
                            bogusForceDataize.write ((((xself).xassertInBytecode)) ((xcode)) ((xopname)))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_elim_extra_return.write
                  [xself]
                    memory > xreturns
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("LOAD_CONST") ("None: is there a None literal in the EO language?"))
                        xreturns.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))) ((((xinstr).xopname).eq "RETURN_VALUE")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xreturns)))) (1))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_elim_jump_to_return.write
                  [xself]
                    memory > xreturns
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xcond xtrue_value xfalse_value]
                            seq > @
                              (((unsupported)) (((xcond).if (xtrue_value) (xfalse_value))))
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_FORWARD"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_ABSOLUTE"))
                        xreturns.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))) ((((xinstr).xopname).eq "RETURN_VALUE")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xreturns)))) (2))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_elim_jump_to_uncond_jump.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (xa).if
                                ((xc).or (xd)).if
                                  bogusForceDataize.write (((xfoo)) 0)
                                bogusForceDataize.write (((xbaz)) 0)
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_elim_jump_to_uncond_jump2.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            memory > xa
                            seq > @
                              while.
                                (xa)
                                [unused]
                                  seq > @
                                    ((xc).or (xd)).if
                                      xa.write (((xfoo)) 0)
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_elim_jump_to_uncond_jump3.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) ((((xa).and (xb)).and (xc))))
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcount_instr_recursively)) ((xf)) ("JUMP_IF_FALSE_OR_POP"))) (2))
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) ((((xa).or (xb)).or (xc))))
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcount_instr_recursively)) ((xf)) ("JUMP_IF_TRUE_OR_POP"))) (2))
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) ((((xa).and (xb)).or (xc))))
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_IF_FALSE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ("JUMP_IF_TRUE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ("POP_JUMP_IF_FALSE"))
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) ((((xa).or (xb)).and (xc))))
                        bogusForceDataize.write ((((xself).xcheck_jump_targets)) ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_IF_TRUE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ("JUMP_IF_FALSE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertInBytecode)) ((xf)) ("POP_JUMP_IF_TRUE"))
                xtest_elim_jump_after_return1.write
                  [xself]
                    memory > xreturns
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xcond1 xcond2]
                            seq > @
                              seq
                                (xcond1).if
                                  (((unsupported)) (1))
                                (xcond2).if
                                  (((unsupported)) (2))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      (((unsupported)) (3))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (xcond1).if
                                          (((unsupported)) (4))
                                        (((unsupported)) (5))
                                (((unsupported)) (6))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_FORWARD"))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_ABSOLUTE"))
                        xreturns.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))) ((((xinstr).xopname).eq "RETURN_VALUE")))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xreturns)))) (6))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_elim_jump_after_return2.write
                  [xself]
                    memory > xreturns
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xcond1 xcond2]
                            seq > @
                              while.
                                1
                                [unused]
                                  seq > @
                                    (xcond1).if
                                      (((unsupported)) (4))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("JUMP_FORWARD"))
                        xreturns.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))) ((((xinstr).xopname).eq "JUMP_ABSOLUTE")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xreturns)))) (1))
                        xreturns.write (((unsupported)) ((xinstr)) ((xinstr)) (((((xdis).xget_instructions)) ((xf)))) ((((xinstr).xopname).eq "RETURN_VALUE")))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xreturns)))) (2))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_make_function_doesnt_bail.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  []
                                    seq > @
                                      (((unsupported)) 0)
                                (((unsupported)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertNotInBytecode)) ((xf)) ("BINARY_ADD"))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_constant_folding.write
                  [xself]
                    memory > xexprs
                    memory > xcode
                    seq > @
                      seq
                        xexprs.write (((unsupported)) ("3 * -5") ("-3 * 5") ("2 * (3 * 4)") ("(2 * 3) * 4") ("(-1, 2, 3)") ("(1, -2, 3)") ("(1, 2, -3)") ("(1, 2, -3) * 6") ("lambda x: x in {(3 * -5) + (-1 - 6), (1, -2, 3) * 2, None}"))
                        (((unsupported)) ((xe)) ((xexprs)))
                          seq
                            xcode.write (((xcompile)) ((xe)) ("") ("single"))
                            (((unsupported)) ((xinstr)) (((((xdis).xget_instructions)) ((xcode)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("UNARY_"))))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("BINARY_"))))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((((((xinstr).xopname).xstartswith)) ("BUILD_"))))
                            bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcode)))
                xtest_in_literal_list.write
                  [xself]
                    memory > xcontaintest
                    seq > @
                      seq
                        xcontaintest.write
                          []
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xx)) ((((unsupported)) ((xa)) ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcount_instr_recursively)) ((xcontaintest)) ("BUILD_LIST"))) (0))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xcontaintest)))
                xtest_iterate_literal_list.write
                  [xself]
                    memory > xforloop
                    seq > @
                      seq
                        xforloop.write
                          []
                            seq > @
                              (((unsupported)) ((xx)) ((((unsupported)) ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcount_instr_recursively)) ((xforloop)) ("BUILD_LIST"))) (0))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xforloop)))
                xtest_condition_with_binop_with_bools.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                (TRUE.or FALSE).if
                                  (((unsupported)) (1))
                                (((unsupported)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) 0)) (1))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_if_with_if_expression.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx]
                            seq > @
                              seq
                                ((xx).if TRUE FALSE).if
                                  (((unsupported)) (TRUE))
                                (((unsupported)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xf)) (TRUE))))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
                xtest_trailing_nops.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx]
                            seq > @
                              seq
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      (((unsupported)) (3))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      (((unsupported)) (5))
                                (((unsupported)) (6))
                        bogusForceDataize.write ((((xself).xcheck_lnotab)) ((xf)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_bug_11510.write
                [xself]
                  memory > xf
                  seq > @
                    seq
                      xf.write
                        []
                          seq > @
                            seq
                              (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) (1) (1))))
                              (((unsupported)) ((((unsupported)) ((xx)) ((xy)))))
                      (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                        bogusForceDataize.write (((xf)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)