memory > xLC_ALL
memory > xTHOUSEP
memory > xLC_CTYPE
memory > xValueError
memory > xLC_NUMERIC
memory > xeval
memory > xerr
memory > xint
memory > xException
memory > xunittest
memory > xuname
memory > xmin
memory > xImportError
memory > xpart
memory > xError
memory > xprint
memory > xtype
memory > xlc
memory > xloc
memory > xmaj
memory > xsys
memory > xlocale
memory > xfloat
memory > xmic
memory > xsetlocale
memory > xli
memory > xRADIXCHAR
memory > xlen
memory > x__name__
memory > xlocaleconv
[] > test__locale
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xknown_numerics
        memory > xtest_float_parsing
        memory > xtest_lc_numeric_basic
        memory > xcandidate_locales
        memory > xtest_lc_numeric_localeconv
        memory > xtest_lc_numeric_nl_langinfo
        memory > xtearDown
        memory > xsetUpModule
        memory > xnumeric_tester
        memory > xlc_numeric_err_msg
        memory > xsetUp
        memory > xnl_langinfo
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
                (((unsupported)) 0)
              xnl_langinfo.write "None: is there a None literal in the EO language?"
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((((xuname)) 0).xsystem).eq "Darwin").if
              seq
                (((unsupported)) ((((unsupported)) ((xmaj)) ((xmin)) ((xmic)))) ((((unsupported)) ((((xint)) ((xpart)))) ((xpart)) ((((((((xuname)) 0).xrelease).xsplit)) ("."))))))
                ((((unsupported)) ((xmaj)) ((xmin)) ((xmic))).less (((unsupported)) (8) (0) (0))).if
                  (((unsupported)) (((((xunittest).xSkipTest)) ("locale support broken for OS X < 10.4"))))
            xcandidate_locales.write (((unsupported)) ("es_UY") ("fr_FR") ("fi_FI") ("es_CO") ("pt_PT") ("it_IT") ("et_EE") ("es_PY") ("no_NO") ("nl_NL") ("lv_LV") ("el_GR") ("be_BY") ("fr_BE") ("ro_RO") ("ru_UA") ("ru_RU") ("es_VE") ("ca_ES") ("se_NO") ("es_EC") ("id_ID") ("ka_GE") ("es_CL") ("wa_BE") ("hu_HU") ("lt_LT") ("sl_SI") ("hr_HR") ("es_AR") ("es_ES") ("oc_FR") ("gl_ES") ("bg_BG") ("is_IS") ("mk_MK") ("de_AT") ("pt_BR") ("da_DK") ("nn_NO") ("cs_CZ") ("de_LU") ("es_BO") ("sq_AL") ("sk_SK") ("fr_CH") ("de_DE") ("sr_YU") ("br_FR") ("nl_BE") ("sv_FI") ("pl_PL") ("fr_CA") ("fo_FO") ("bs_BA") ("fr_LU") ("kl_GL") ("fa_IR") ("de_BE") ("sv_SE") ("it_CH") ("uk_UA") ("eu_ES") ("vi_VN") ("af_ZA") ("nb_NO") ("en_DK") ("tg_TJ") ("ps_AF") ("en_US") ("fr_FR.ISO8859-1") ("fr_FR.UTF-8") ("fr_FR.ISO8859-15@euro") ("ru_RU.KOI8-R") ("ko_KR.eucKR"))
            xsetUpModule.write
              []
                memory > xcandidate_locales
                memory > xaccept
                memory > xencoding
                memory > xold_locale
                memory > xlocales
                seq > @
                  seq
                    (((unsupported)) 0)
                    (((xsys).xplatform).eq "sunos5").if
                      seq
                        xold_locale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)))
                        (((unsupported)) 0)
                          seq
                            xlocales.write (((unsupported)) 0)
                            (((unsupported)) ((xloc)) ((xcandidate_locales)))
                              seq
                                (((unsupported)) ((xError)))
                                  bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)) ((xloc)))
                                  (((unsupported)) 0)
                                xencoding.write ((((xlocale).xgetpreferredencoding)) (FALSE))
                                (((unsupported)) ((xException)))
                                  bogusForceDataize.write (((xlocaleconv)) 0)
                                  bogusForceDataize.write (((xprint)) (("WARNING: Skip locale %s (encoding %s): [%s] %s".mod (((unsupported)) ((xloc)) ((xencoding)) ((((xtype)) ((xerr)))) ((xerr))))))
                                  bogusForceDataize.write ((((xlocales).xappend)) ((xloc)))
                            xcandidate_locales.write (xlocales)
                          bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)) ((xold_locale)))
                    (((unsupported)) ("MSC v.1200") (((xsys).xversion))).if
                      seq
                        xaccept.write
                          [xloc]
                            memory > xa
                            seq > @
                              seq
                                xa.write ((((xloc).xsplit)) ("."))
                                (((unsupported)) (((((((xlen)) ((xa))).eq 2).and ((((xlen)) ((((unsupported)) ((xa)) ((1.neg))))).geq 9)).not)))
                        xcandidate_locales.write (((unsupported)) ((xloc)) ((xloc)) ((xcandidate_locales)) ((((xaccept)) ((xloc)))))
            xknown_numerics.write (((unsupported)) ("en_US") ((((unsupported)) (".") (","))) ("de_DE") ((((unsupported)) (",") ("."))) ("fr_FR") ((((unsupported)) (",") (""))) ("ps_AF") ((((unsupported)) ("u066b") ("u066c"))))
            (((xsys).xplatform).eq "win32").if
              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xknown_numerics)) ("ps_AF"))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xoldlocale)) ((((xsetlocale)) ((xLC_ALL)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xsetlocale)) ((xLC_ALL)) (((xself).xoldlocale)))
                xlc_numeric_err_msg.write "%s != %s (%s for %s; set to %s, using %s)"
                xnumeric_tester.write
                  [xself xcalc_type xcalc_value xdata_type xused_locale]
                    memory > xset_locale
                    memory > xknown_value
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xError)))
                          xset_locale.write (((xsetlocale)) ((xLC_NUMERIC)))
                          xset_locale.write "<not able to determine>"
                        xknown_value.write (((unsupported)) (((((xknown_numerics).xget)) ((xused_locale)) ((((unsupported)) ("") (""))))) (((xdata_type).eq "thousands_sep")))
                        ((xknown_value).and (xcalc_value)).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcalc_value)) ((xknown_value)) ((((xself).xlc_numeric_err_msg).mod (((unsupported)) ((xcalc_value)) ((xknown_value)) ((xcalc_type)) ((xdata_type)) ((xset_locale)) ((xused_locale))))))
                            (((unsupported)) (TRUE))
                xtest_lc_numeric_nl_langinfo.write
                  [xself]
                    memory > xtested
                    seq > @
                      (((unsupported)) 0)
                        xtested.write FALSE
                        (((unsupported)) ((xloc)) ((xcandidate_locales)))
                          seq
                            (((unsupported)) ((xError)))
                              seq
                                bogusForceDataize.write (((xsetlocale)) ((xLC_NUMERIC)) ((xloc)))
                                bogusForceDataize.write (((xsetlocale)) ((xLC_CTYPE)) ((xloc)))
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xli)) ((xlc)))) ((((unsupported)) ((((unsupported)) ((xRADIXCHAR)) ("decimal_point"))) ((((unsupported)) ((xTHOUSEP)) ("thousands_sep"))))))
                              ((((xself).xnumeric_tester)) ("nl_langinfo") ((((xnl_langinfo)) ((xli)))) ((xlc)) ((xloc))).if
                                xtested.write TRUE
                        ((xtested).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("no suitable locales"))
                xtest_lc_numeric_localeconv.write
                  [xself]
                    memory > xtested
                    memory > xformatting
                    seq > @
                      seq
                        xtested.write FALSE
                        (((unsupported)) ((xloc)) ((xcandidate_locales)))
                          seq
                            (((unsupported)) ((xError)))
                              seq
                                bogusForceDataize.write (((xsetlocale)) ((xLC_NUMERIC)) ((xloc)))
                                bogusForceDataize.write (((xsetlocale)) ((xLC_CTYPE)) ((xloc)))
                              (((unsupported)) 0)
                            xformatting.write (((xlocaleconv)) 0)
                            (((unsupported)) ((xlc)) ((((unsupported)) ("decimal_point") ("thousands_sep"))))
                              ((((xself).xnumeric_tester)) ("localeconv") ((((unsupported)) ((xformatting)) ((xlc)))) ((xlc)) ((xloc))).if
                                xtested.write TRUE
                        ((xtested).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("no suitable locales"))
                xtest_lc_numeric_basic.write
                  [xself]
                    memory > xtested
                    memory > xnl_radixchar
                    memory > xli_radixchar
                    memory > xset_locale
                    seq > @
                      (((unsupported)) 0)
                        xtested.write FALSE
                        (((unsupported)) ((xloc)) ((xcandidate_locales)))
                          seq
                            (((unsupported)) ((xError)))
                              seq
                                bogusForceDataize.write (((xsetlocale)) ((xLC_NUMERIC)) ((xloc)))
                                bogusForceDataize.write (((xsetlocale)) ((xLC_CTYPE)) ((xloc)))
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xli)) ((xlc)))) ((((unsupported)) ((((unsupported)) ((xRADIXCHAR)) ("decimal_point"))) ((((unsupported)) ((xTHOUSEP)) ("thousands_sep"))))))
                              seq
                                xnl_radixchar.write (((xnl_langinfo)) ((xli)))
                                xli_radixchar.write (((unsupported)) ((((xlocaleconv)) 0)) ((xlc)))
                                (((unsupported)) ((xError)))
                                  xset_locale.write (((xsetlocale)) ((xLC_NUMERIC)))
                                  xset_locale.write "<not able to determine>"
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xnl_radixchar)) ((xli_radixchar)) (("%s (nl_langinfo) != %s (localeconv) (set to %s, using %s)".mod (((unsupported)) ((xnl_radixchar)) ((xli_radixchar)) ((xloc)) ((xset_locale))))))
                                xtested.write TRUE
                        ((xtested).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("no suitable locales"))
                xtest_float_parsing.write
                  [xself]
                    memory > xtested
                    seq > @
                      seq
                        xtested.write FALSE
                        (((unsupported)) ((xloc)) ((xcandidate_locales)))
                          seq
                            (((unsupported)) ((xError)))
                              seq
                                bogusForceDataize.write (((xsetlocale)) ((xLC_NUMERIC)) ((xloc)))
                                bogusForceDataize.write (((xsetlocale)) ((xLC_CTYPE)) ((xloc)))
                              (((unsupported)) 0)
                            (((xloc).eq "eu_ES").and ((((unsupported)) ((((xlocaleconv)) 0)) ("decimal_point")).eq "' ")).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xeval)) ("3.14")).mul 100)))) (314) (("using eval('3.14') failed for %s".mod (xloc))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xfloat)) ("3.14")).mul 100)))) (314) (("using float('3.14') failed for %s".mod (xloc))))
                            ((((unsupported)) ((((xlocaleconv)) 0)) ("decimal_point")).neq ".").if
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xfloat)) (((((((unsupported)) ((((xlocaleconv)) 0)) ("decimal_point")).xjoin)) ((((unsupported)) ("1") ("23"))))))
                            xtested.write TRUE
                        ((xtested).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("no suitable locales"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)