memory > xmode
memory > xValueError
memory > xrange
memory > xmsg
memory > xRuntimeWarning
memory > xint
memory > xhasattr
memory > xi
memory > xNonString
memory > xgetattr
memory > xunittest
memory > xReferenceError
memory > xarray
memory > xAutoFileTests
memory > xproxy
memory > xstr
memory > xio
memory > xs
memory > xsupport
memory > xsys
memory > xargs
memory > xOSError
memory > xTESTFN
memory > xos
memory > xUserList
memory > xOtherFileTests
memory > xstaticmethod
memory > xnext
memory > xmethodname
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_file
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestAttributes
        memory > xpyio
        memory > xtestTruncateOnWindows
        memory > xtestBadModeArgument
        memory > xtestWritelinesNonString
        memory > xopen
        memory > xtestReadinto
        memory > xtestModeStrings
        memory > xtestWritelinesIntegers
        memory > xtestErrors
        memory > xtearDown
        memory > xtestReadWhenWriting
        memory > x_checkBufferSize
        memory > xtestWritelinesUserList
        memory > xtestReadinto_text
        memory > xtestWritelinesIntegersUserList
        memory > xtestSetBufferSize
        memory > xsetUp
        memory > xtestWeakRefs
        memory > xtestIteration
        memory > xtestMethods
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xf)) (((((xself).xopen)) ((xTESTFN)) ("wb"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xf).if
                          bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
                xtestWeakRefs.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xproxy)) (((xself).xf)))
                        bogusForceDataize.write ((((xp).xwrite)) ("teststring"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xf).xtell)) 0)) (((((xp).xtell)) 0)))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        (((unsupported)) (((xself).xf)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xReferenceError)) ((xgetattr)) ((xp)) ("tell"))
                xtestAttributes.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((xself).xf)
                        unsupported
                        unsupported
                        unsupported
                xtestReadinto.write
                  [xself]
                    memory > xn
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)) ("12"))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        xa.write (((xarray)) ("b") (("x".mul 10)))
                        (((unsupported)) (((xself).xf)) (((((xself).xopen)) ((xTESTFN)) ("rb"))))
                        xn.write (((((xself).xf).xreadinto)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("12") ((((unsupported)) (((((xa).xtobytes)) 0)) ((((unsupported)) ((xn)))))))
                xtestReadinto_text.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((xarray)) ("b") (("x".mul 10)))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        (((unsupported)) (((xself).xf)) (((((xself).xopen)) ((xTESTFN)) ("r"))))
                        (((xhasattr)) (((xself).xf)) ("readinto")).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xf).xreadinto)) ((xa)))
                xtestWritelinesUserList.write
                  [xself]
                    memory > xbuf
                    memory > xl
                    seq > @
                      seq
                        xl.write (((xUserList)) ((((unsupported)) ("1") ("2"))))
                        bogusForceDataize.write (((((xself).xf).xwritelines)) ((xl)))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        (((unsupported)) (((xself).xf)) (((((xself).xopen)) ((xTESTFN)) ("rb"))))
                        xbuf.write (((((xself).xf).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ("12"))
                xtestWritelinesIntegers.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xf).xwritelines)) ((((unsupported)) (1) (2) (3))))
                xtestWritelinesIntegersUserList.write
                  [xself]
                    memory > xl
                    seq > @
                      seq
                        xl.write (((xUserList)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xf).xwritelines)) ((xl)))
                xtestWritelinesNonString.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xf).xwritelines)) ((((unsupported)) ((((xNonString)) 0)) ((((xNonString)) 0)))))
                xtestErrors.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((xself).xf)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xname)) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xisatty)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        (((xhasattr)) ((xf)) ("readinto")).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xOSError)) ((xTypeError)))) (((xf).xreadinto)) (""))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xf).xclosed)))
                xtestMethods.write
                  [xself]
                    memory > xmethods
                    memory > xmethod
                    seq > @
                      seq
                        xmethods.write (((unsupported)) ((((unsupported)) ("fileno") ((((unsupported)) 0)))) ((((unsupported)) ("flush") ((((unsupported)) 0)))) ((((unsupported)) ("isatty") ((((unsupported)) 0)))) ((((unsupported)) ("__next__") ((((unsupported)) 0)))) ((((unsupported)) ("read") ((((unsupported)) 0)))) ((((unsupported)) ("write") ((((unsupported)) (""))))) ((((unsupported)) ("readline") ((((unsupported)) 0)))) ((((unsupported)) ("readlines") ((((unsupported)) 0)))) ((((unsupported)) ("seek") ((((unsupported)) (0))))) ((((unsupported)) ("tell") ((((unsupported)) 0)))) ((((unsupported)) ("write") ((((unsupported)) (""))))) ((((unsupported)) ("writelines") ((((unsupported)) ((((unsupported)) 0)))))) ((((unsupported)) ("__iter__") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xmethods).xappend)) ((((unsupported)) ("truncate") ((((unsupported)) 0)))))
                        bogusForceDataize.write (((((xself).xf).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xf).xclosed)))
                        (((unsupported)) ((((unsupported)) ((xmethodname)) ((xargs)))) ((xmethods)))
                          seq
                            xmethod.write (((xgetattr)) (((xself).xf)) ((xmethodname)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmethod)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xf).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          unsupported
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xf).x__exit__)) ((((unsupported)) (((((xsys).xexc_info)) 0)))))) ("None: is there a None literal in the EO language?"))
                xtestReadWhenWriting.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xf).xread)))
            (((unsupported)) ((xAutoFileTests)) (((xunittest).xTestCase)))
              xopen.write ((xio).xopen)
            (((unsupported)) ((xAutoFileTests)) (((xunittest).xTestCase)))
              xopen.write (((xstaticmethod)) (((xpyio).xopen)))
            (((unsupported)) 0)
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
                xtestModeStrings.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write (((((((xself).xopen)) ((xTESTFN)) ("wb")).xclose)) 0)
                        (((unsupported)) ((xmode)) ((((unsupported)) ("") ("aU") ("wU+") ("U+") ("+U") ("rU+"))))
                          (((unsupported)) ((xValueError)))
                            xf.write ((((xself).xopen)) ((xTESTFN)) ((xmode)))
                            seq
                              bogusForceDataize.write ((((xf).xclose)) 0)
                              bogusForceDataize.write ((((xself).xfail)) (("%r is an invalid file mode".mod (xmode))))
                xtestBadModeArgument.write
                  [xself]
                    memory > xs
                    memory > xbad_mode
                    memory > xf
                    seq > @
                      seq
                        xbad_mode.write "qwerty"
                        (((unsupported)) ((xValueError)))
                          xf.write ((((xself).xopen)) ((xTESTFN)) ((xbad_mode)))
                          ((((unsupported)) (((xmsg).xargs)) (0)).neq 0).if
                            seq
                              xs.write (((xstr)) ((xmsg)))
                              ((((unsupported)) ((xTESTFN)) ((xs))).or (((unsupported)) ((xbad_mode)) ((xs)))).if
                                bogusForceDataize.write ((((xself).xfail)) (("bad error message for invalid mode: %s".mod (xs))))
                          seq
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            bogusForceDataize.write ((((xself).xfail)) (("no error for invalid mode: %s".mod (xbad_mode))))
                x_checkBufferSize.write
                  [xself xs]
                    memory > xd
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          seq
                            xf.write ((((xself).xopen)) ((xTESTFN)) ("wb") ((xs)))
                            bogusForceDataize.write ((((xf).xwrite)) (((((((xstr)) ((xs))).xencode)) ("ascii"))))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xf.write ((((xself).xopen)) ((xTESTFN)) ("rb") ((xs)))
                            xd.write (((xint)) ((((((((xf).xread)) 0).xdecode)) ("ascii"))))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            bogusForceDataize.write ((((xf).xclose)) 0)
                          bogusForceDataize.write ((((xself).xfail)) (("error setting buffer size %d: %s".mod (((unsupported)) ((xs)) ((((xstr)) ((xmsg))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xs)))
                xtestSetBufferSize.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xs)) ((((unsupported)) ((1.neg)) (0) (512))))
                          (((unsupported)) ((((unsupported)) (((xsupport).xcheck_no_warnings)) ((xself)) ("line buffering") ((xRuntimeWarning)))))
                            bogusForceDataize.write ((((xself).x_checkBufferSize)) ((xs)))
                        (((unsupported)) (((((xself).xassertWarnsRegex)) ((xRuntimeWarning)) ("line buffering"))))
                          bogusForceDataize.write ((((xself).x_checkBufferSize)) (1))
                xtestTruncateOnWindows.write
                  [xself]
                    memory > xsize
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xopen)) ((xTESTFN)) ("wb"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)) ("12345678901"))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xf.write ((((xself).xopen)) ((xTESTFN)) ("rb+"))
                            xdata.write ((((xf).xread)) (5))
                            ((xdata).neq "12345").if
                              bogusForceDataize.write ((((xself).xfail)) (("Read on file opened for update failed %r".mod (xdata))))
                            (((((xf).xtell)) 0).neq 5).if
                              bogusForceDataize.write ((((xself).xfail)) (("File pos after read wrong %d".mod ((((xf).xtell)) 0))))
                            bogusForceDataize.write ((((xf).xtruncate)) 0)
                            (((((xf).xtell)) 0).neq 5).if
                              bogusForceDataize.write ((((xself).xfail)) (("File pos after ftruncate wrong %d".mod ((((xf).xtell)) 0))))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xsize.write (((((xos).xpath).xgetsize)) ((xTESTFN)))
                            ((xsize).neq 5).if
                              bogusForceDataize.write ((((xself).xfail)) (("File size after ftruncate wrong %d".mod (xsize))))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                xtestIteration.write
                  [xself]
                    memory > xlines
                    memory > xmethods
                    memory > xnchunks
                    memory > xf
                    memory > xbuf
                    memory > xtestline
                    memory > xbag
                    memory > xfiller
                    memory > xmeth
                    memory > xdataoffset
                    memory > xtestlines
                    memory > xline
                    seq > @
                      seq
                        xdataoffset.write 16384
                        xfiller.write "hamn"
                        (((unsupported)) ((((xdataoffset).mod (((xlen)) ((xfiller)))).not)) ("dataoffset must be multiple of len(filler)"))
                        xnchunks.write (((unsupported)) ((xdataoffset)) ((((xlen)) ((xfiller)))))
                        xtestlines.write (((unsupported)) ("spam, spam and eggsn") ("eggs, spam, ham and spamn") ("saussages, spam, spam and eggsn") ("spam, ham, spam and eggsn") ("spam, spam, spam, spam, spam, ham, spamn") ("wonderful spaaaaaam.n"))
                        xmethods.write (((unsupported)) ((((unsupported)) ("readline") ((((unsupported)) 0)))) ((((unsupported)) ("read") ((((unsupported)) 0)))) ((((unsupported)) ("readlines") ((((unsupported)) 0)))) ((((unsupported)) ("readinto") ((((unsupported)) ((((xarray)) ("b") ((" ".mul 100)))))))))
                        xbag.write ((((xself).xopen)) ((xTESTFN)) ("wb"))
                        bogusForceDataize.write ((((xbag).xwrite)) (((xfiller).mul (xnchunks))))
                        bogusForceDataize.write ((((xbag).xwritelines)) ((xtestlines)))
                        bogusForceDataize.write ((((xbag).xclose)) 0)
                        (((unsupported)) ((((unsupported)) ((xmethodname)) ((xargs)))) ((xmethods)))
                          seq
                            xf.write ((((xself).xopen)) ((xTESTFN)) ("rb"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xf)))) ((xfiller)))
                            xmeth.write (((xgetattr)) ((xf)) ((xmethodname)))
                            bogusForceDataize.write (((xmeth)) ((((unsupported)) ((xargs)))))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write ((((xself).xopen)) ((xTESTFN)) ("rb"))
                        (((unsupported)) ((xi)) ((((xrange)) ((xnchunks)))))
                          bogusForceDataize.write (((xnext)) ((xf)))
                        xtestline.write ((((xtestlines).xpop)) (0))
                        (((unsupported)) ((xValueError)))
                          xline.write ((((xf).xreadline)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("readline() after next() with supposedly empty iteration-buffer failed anyway"))
                        ((xline).neq (xtestline)).if
                          bogusForceDataize.write ((((xself).xfail)) (("readline() after next() with empty buffer failed. Got %r, expected %r".mod (((unsupported)) ((xline)) ((xtestline))))))
                        xtestline.write ((((xtestlines).xpop)) (0))
                        xbuf.write (((xarray)) ("b") (("x00".mul (((xlen)) ((xtestline))))))
                        (((unsupported)) ((xValueError)))
                          bogusForceDataize.write ((((xf).xreadinto)) ((xbuf)))
                          bogusForceDataize.write ((((xself).xfail)) ("readinto() after next() with supposedly empty iteration-buffer failed anyway"))
                        xline.write ((((xbuf).xtobytes)) 0)
                        ((xline).neq (xtestline)).if
                          bogusForceDataize.write ((((xself).xfail)) (("readinto() after next() with empty buffer failed. Got %r, expected %r".mod (((unsupported)) ((xline)) ((xtestline))))))
                        xtestline.write ((((xtestlines).xpop)) (0))
                        (((unsupported)) ((xValueError)))
                          xline.write ((((xf).xread)) ((((xlen)) ((xtestline)))))
                          bogusForceDataize.write ((((xself).xfail)) ("read() after next() with supposedly empty iteration-buffer failed anyway"))
                        ((xline).neq (xtestline)).if
                          bogusForceDataize.write ((((xself).xfail)) (("read() after next() with empty buffer failed. Got %r, expected %r".mod (((unsupported)) ((xline)) ((xtestline))))))
                        (((unsupported)) ((xValueError)))
                          xlines.write ((((xf).xreadlines)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("readlines() after next() with supposedly empty iteration-buffer failed anyway"))
                        ((xlines).neq (xtestlines)).if
                          bogusForceDataize.write ((((xself).xfail)) (("readlines() after next() with empty buffer failed. Got %r, expected %r".mod (((unsupported)) ((xline)) ((xtestline))))))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write ((((xself).xopen)) ((xTESTFN)) ("rb"))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xline)) ((xf)))
                            (((unsupported)) ((xValueError)))
                              seq
                                bogusForceDataize.write ((((xf).xreadline)) 0)
                                bogusForceDataize.write ((((xf).xreadinto)) ((xbuf)))
                                bogusForceDataize.write ((((xf).xread)) 0)
                                bogusForceDataize.write ((((xf).xreadlines)) 0)
                              bogusForceDataize.write ((((xself).xfail)) ("read* failed after next() consumed file"))
                          bogusForceDataize.write ((((xf).xclose)) 0)
            (((unsupported)) ((xOtherFileTests)) (((xunittest).xTestCase)))
              xopen.write ((xio).xopen)
            (((unsupported)) ((xOtherFileTests)) (((xunittest).xTestCase)))
              xopen.write (((xstaticmethod)) (((xpyio).xopen)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)