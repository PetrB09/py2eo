memory > xenumerate
memory > xh
memory > xbytearray
memory > xHashable
memory > xsys
memory > xunittest
memory > xOnlyEquality
memory > xHashRandomizationTests
memory > xcomplex
memory > xc
memory > xStringlikeHashRandomizationTests
memory > xdatetime
memory > xobjlist
memory > xlist
memory > xassert_python_ok
memory > xFixedHash
memory > xstr
memory > xDefaultHash
memory > xInheritedHashWithInequality
memory > xrange
memory > xset
memory > xrepr
memory > xint
memory > xInheritedHashWithEquality
memory > xi
memory > xbytes
memory > xOnlyInequality
memory > xfloat
memory > xchr
memory > xobj
memory > xos
memory > xDefaultIterSeq
memory > xiter
memory > xmap
memory > xhash
memory > xNoHash
memory > xobject
memory > xmemoryview
memory > xj
memory > xlen
memory > xDatetimeTests
memory > xTypeError
memory > x__name__
[] > test_hash
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_not_hashable
        memory > x_FIXED_HASH_VALUE
        memory > xtest_coerced_integers
        memory > xtest_unaligned_buffers
        memory > xtest_hashes
        memory > xtest_numeric_literals
        memory > xtest_null_hash
        memory > xtest_hash_distribution
        memory > xhashes_to_check
        memory > xdefault_expected
        memory > xtest_fixed_hash
        memory > xknown_hashes
        memory > xpysiphash
        memory > xget_hash
        memory > xtest_randomized_hash
        memory > x__eq__
        memory > xget_expected_hash
        memory > xrepr_ucs2
        memory > xskip_unless_internalhash
        memory > xtest_hashable
        memory > xseq
        memory > xtest_error_hash
        memory > x__getitem__
        memory > xtest_default_hash
        memory > xtest_ucs2_string
        memory > xIS_64BIT
        memory > x__ne__
        memory > xtest_coerced_floats
        memory > xtest_empty_string
        memory > xsame_hash
        memory > xtest_long_fixed_hash
        memory > xlcg
        memory > xerror_expected
        memory > x__hash__
        memory > x__len__
        memory > x_default_hash
        memory > xfixed_expected
        memory > xget_hash_command
        memory > xrepr_
        memory > xrepr_long
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xIS_64BIT.write (((xsys).xmaxsize).greater (((unsupported)) (2) (32)))
            xlcg.write
              [xx xlength]
                memory > xout
                seq > @
                  (((unsupported)) 0)
                    unsupported
                    ((xx).eq 0).if
                      (((unsupported)) ((((xbytes)) ((xlength)))))
                    xout.write (((xbytearray)) ((xlength)))
                    (((unsupported)) ((xi)) ((((xrange)) ((xlength)))))
                      seq
                        xx.write (((214013.mul (xx)).add 2531011).and 2147483647)
                        (((unsupported)) ((((unsupported)) ((xout)) ((xi)))) (((((unsupported)) ((xx)) (16)).and 255)))
                    (((unsupported)) ((((xbytes)) ((xout)))))
            xpysiphash.write
              [xuint64]
                memory > xuint32
                memory > xint32
                memory > xint64
                seq > @
                  seq
                    (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) (0) ((xuint64)) ((((unsupported)) (1) (64))))))
                    ((xuint64).greater ((((unsupported)) (1) (63)).sub 1)).if
                      xint64.write ((xuint64).sub (((unsupported)) (1) (64)))
                      xint64.write (xuint64)
                    xuint32.write ((((unsupported)) ((xuint64)) ((((unsupported)) ((xuint64)) (32)))).and (((unsupported)) 0))
                    ((xuint32).greater ((((unsupported)) (1) (31)).sub 1)).if
                      xint32.write ((xuint32).sub (((unsupported)) (1) (32)))
                      xint32.write (xuint32)
                    (((unsupported)) ((((unsupported)) ((xint32)) ((xint64)))))
            xskip_unless_internalhash.write
              [xtest]
                memory > xmsg
                memory > xok
                seq > @
                  seq
                    unsupported
                    xok.write (((unsupported)) ((((xsys).xhash_info).xalgorithm)) ((((unsupported)) ("fnv") ("siphash24"))))
                    xmsg.write "Requires SipHash24 or FNV"
                    (((unsupported)) (((xok).if (xtest) ((((((xunittest).xskip)) ((xmsg)))) ((xtest))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsame_hash.write
                  [xself]
                    memory > xhashed
                    seq > @
                      (((unsupported)) 0)
                        xhashed.write (((xlist)) ((((xmap)) ((xhash)) ((xobjlist)))))
                        (((unsupported)) ((xh)) ((((unsupported)) ((xhashed)) ((((unsupported)) (1))))))
                          ((xh).neq (((unsupported)) ((xhashed)) (0))).if
                            bogusForceDataize.write ((((xself).xfail)) (("hashed values differ: %r".mod (((unsupported)) ((xobjlist))))))
                xtest_numeric_literals.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsame_hash)) (1) (1) (1.0) ((1.0.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xsame_hash)) (0) (0.0) ((0.0.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((1.neg)) ((1.0.neg)) (((1.0.neg).add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((2.neg)) ((2.0.neg)) (((2.0.neg).add (((unsupported)) 0))))
                xtest_coerced_integers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) (1))) ((((xint)) (1))) ((((xfloat)) (1))) ((((xcomplex)) (1))) ((((xint)) ("1"))) ((((xfloat)) ("1.0"))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) (((((unsupported)) (2) (31)).neg)))) ((((xfloat)) (((((unsupported)) (2) (31)).neg)))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) ((1.sub (((unsupported)) (2) (31)))))) ((((xfloat)) ((1.sub (((unsupported)) (2) (31)))))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) (((((unsupported)) (2) (31)).sub 1)))) ((((xfloat)) (((((unsupported)) (2) (31)).sub 1)))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) ((((unsupported)) (2) (31))))) ((((xfloat)) ((((unsupported)) (2) (31))))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) (((((unsupported)) (2) (63)).neg)))) ((((xfloat)) (((((unsupported)) (2) (63)).neg)))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) ((((unsupported)) (2) (63))))) ((((xfloat)) ((((unsupported)) (2) (63))))))
                xtest_coerced_floats.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xint)) ((((unsupported)) 0)))) ((((xfloat)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xsame_hash)) ((((xfloat)) (0.5))) ((((xcomplex)) (0.5) (0.0))))
                xtest_unaligned_buffers.write
                  [xself]
                    memory > xaligned
                    memory > xb
                    memory > xunaligned
                    seq > @
                      seq
                        xb.write ("123456789abcdefghijklmnopqrstuvwxyz".mul 128)
                        (((unsupported)) ((xi)) ((((xrange)) (16))))
                          (((unsupported)) ((xj)) ((((xrange)) (16))))
                            seq
                              xaligned.write (((unsupported)) ((xb)) ((((unsupported)) ((xi)) ((128.add (xj))))))
                              xunaligned.write (((unsupported)) ((((xmemoryview)) ((xb)))) ((((unsupported)) ((xi)) ((128.add (xj))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xaligned)))) ((((xhash)) ((xunaligned)))))
            x_default_hash.write ((xobject).x__hash__)
            (((unsupported)) ((xobject)))
            x_FIXED_HASH_VALUE.write 42
            (((unsupported)) ((xobject)))
              x__hash__.write
                [xself]
                  seq > @
                    (((unsupported)) ((x_FIXED_HASH_VALUE)))
            (((unsupported)) ((xobject)))
              x__eq__.write
                [xself xother]
                  seq > @
                    (((unsupported)) ((((unsupported)) ((xself)) ((xother)))))
            (((unsupported)) ((xobject)))
              x__ne__.write
                [xself xother]
                  seq > @
                    (((unsupported)) ((((unsupported)) ((xself)) ((xother)))))
            (((unsupported)) ((xFixedHash)) ((xOnlyEquality)))
            (((unsupported)) ((xFixedHash)) ((xOnlyInequality)))
            (((unsupported)) ((xobject)))
              x__hash__.write "None: is there a None literal in the EO language?"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdefault_expected.write (((unsupported)) ((((xobject)) 0)) ((((xDefaultHash)) 0)) ((((xOnlyInequality)) 0)))
                xfixed_expected.write (((unsupported)) ((((xFixedHash)) 0)) ((((xInheritedHashWithEquality)) 0)) ((((xInheritedHashWithInequality)) 0)))
                xerror_expected.write (((unsupported)) ((((xNoHash)) 0)) ((((xOnlyEquality)) 0)))
                xtest_default_hash.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xdefault_expected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xobj)))) ((((x_default_hash)) ((xobj)))))
                xtest_fixed_hash.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xfixed_expected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xobj)))) ((x_FIXED_HASH_VALUE)))
                xtest_error_hash.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xerror_expected)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) ((xobj)))
                xtest_hashable.write
                  [xself]
                    memory > xobjects
                    seq > @
                      seq
                        xobjects.write (((xself).xdefault_expected).add ((xself).xfixed_expected))
                        (((unsupported)) ((xobj)) ((xobjects)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xobj)) ((xHashable)))
                xtest_not_hashable.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xerror_expected)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xobj)) ((xHashable)))
            (((unsupported)) ((xobject)))
              seq
                xseq.write (((xrange)) (10))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlen)) (((xself).xseq)))))
                x__getitem__.write
                  [xself xindex]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xseq)) ((xindex)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xhashes_to_check.write (((unsupported)) ((((xenumerate)) ((((xrange)) (10))))) ((((xiter)) ((((xDefaultIterSeq)) 0)))) ((((xiter)) ((((unsupported)) (0))) (0))))
                xtest_hashes.write
                  [xself]
                    memory > x_default_hash
                    seq > @
                      seq
                        x_default_hash.write ((xobject).x__hash__)
                        (((unsupported)) ((xobj)) (((xself).xhashes_to_check)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xobj)))) ((((x_default_hash)) ((xobj)))))
            (((unsupported)) 0)
              seq
                xget_hash_command.write
                  [xself xrepr_]
                    seq > @
                      (((unsupported)) (("print(hash(eval(%a)))".mod (xrepr_))))
                xget_hash.write
                  [xself xrepr_ xseed]
                    memory > xenv
                    memory > xout
                    memory > xstdout
                    seq > @
                      (((unsupported)) 0)
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("__cleanenv"))) (TRUE))
                        (((unsupported)) ((xseed)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONHASHSEED"))) ((((xstr)) ((xseed)))))
                          bogusForceDataize.write ((((xenv).xpop)) ("PYTHONHASHSEED") ("None: is there a None literal in the EO language?"))
                        xout.write (((xassert_python_ok)) ("-c") (((((xself).xget_hash_command)) ((xrepr_)))) ((((unsupported)) ((xenv)))))
                        xstdout.write ((((((unsupported)) ((xout)) (1)).xstrip)) 0)
                        (((unsupported)) ((((xint)) ((xstdout)))))
                xtest_randomized_hash.write
                  [xself]
                    memory > xrun1
                    memory > xrun2
                    seq > @
                      seq
                        xrun1.write (((unsupported)) (((xself).xget_hash)) (((xself).xrepr_)) ("random"))
                        xrun2.write (((unsupported)) (((xself).xget_hash)) (((xself).xrepr_)) ("random"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xrun1)) ((xrun2)))
            (((unsupported)) ((xHashRandomizationTests)))
              seq
                xrepr_.write "None: is there a None literal in the EO language?"
                xrepr_long.write "None: is there a None literal in the EO language?"
                xknown_hashes.write (((unsupported)) ("djba33x") ((((unsupported)) ((((unsupported)) (193485960) (193485960) (193485960) (193485960))) ((((unsupported)) ((678966196.neg)) ((((unsupported)) 0)) ((820489388.neg)) (((((unsupported)) 0).neg)))))) ("siphash24") ((((unsupported)) ((((unsupported)) (1198583518) ((((unsupported)) 0)) (1198583518) ((((unsupported)) 0)))) ((((unsupported)) (273876886) (((((unsupported)) 0).neg)) (273876886) (((((unsupported)) 0).neg)))) ((((unsupported)) ((1745215313.neg)) ((((unsupported)) 0)) ((1745215313.neg)) ((((unsupported)) 0)))) ((((unsupported)) (493570806) ((((unsupported)) 0)) ((1006381564.neg)) (((((unsupported)) 0).neg)))) ((((unsupported)) ((1677110816.neg)) (((((unsupported)) 0).neg)) ((1860207793.neg)) (((((unsupported)) 0).neg)))))) ("fnv") ((((unsupported)) ((((unsupported)) ((1600925533.neg)) ((((unsupported)) 0)) ((1600925533.neg)) ((((unsupported)) 0)))) ((((unsupported)) ((206076799.neg)) (((((unsupported)) 0).neg)) ((1024014457.neg)) (((((unsupported)) 0).neg)))) ((((unsupported)) (811136751) (((((unsupported)) 0).neg)) ((77208053.neg)) (((((unsupported)) 0).neg)))) ((((unsupported)) (44402817) ((((unsupported)) 0)) ((1956240331.neg)) (((((unsupported)) 0).neg)))) ((((unsupported)) ((283066365.neg)) (((((unsupported)) 0).neg)) ((271871407.neg)) (((((unsupported)) 0).neg)))))))
                xget_expected_hash.write
                  [xself xposition xlength]
                    memory > xalgorithm
                    memory > xplatform
                    seq > @
                      seq
                        ((xlength).less (((xsys).xhash_info).xcutoff)).if
                          xalgorithm.write "djba33x"
                          xalgorithm.write (((xsys).xhash_info).xalgorithm)
                        (((xsys).xbyteorder).eq "little").if
                          xplatform.write ((xIS_64BIT).if 1 0)
                          seq
                            (((unsupported)) ((((xsys).xbyteorder).eq "big")))
                            xplatform.write ((xIS_64BIT).if 3 2)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xknown_hashes)) ((xalgorithm)))) ((xposition)))) ((xplatform)))))
                xtest_null_hash.write
                  [xself]
                    memory > xknown_hash_of_obj
                    seq > @
                      seq
                        xknown_hash_of_obj.write ((((xself).xget_expected_hash)) (0) (3))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xself).xget_hash)) (((xself).xrepr_)))) ((xknown_hash_of_obj)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xget_hash)) (((xself).xrepr_)) (0))) ((xknown_hash_of_obj)))
                xtest_fixed_hash.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        xh.write ((((xself).xget_expected_hash)) (1) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xget_hash)) (((xself).xrepr_)) (42))) ((xh)))
                xtest_long_fixed_hash.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xrepr_long)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) 0)
                        xh.write ((((xself).xget_expected_hash)) (2) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xget_hash)) (((xself).xrepr_long)) (42))) ((xh)))
            (((unsupported)) ((xStringlikeHashRandomizationTests)) (((xunittest).xTestCase)))
              seq
                xrepr_.write (((xrepr)) ("abc"))
                xrepr_long.write (((xrepr)) ("abcdefghijk"))
                xrepr_ucs2.write (((xrepr)) ("äú∑ℇ"))
                xtest_empty_string.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (""))) (0))
                xtest_ucs2_string.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        xh.write ((((xself).xget_expected_hash)) (3) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xget_hash)) (((xself).xrepr_ucs2)) (0))) ((xh)))
                        xh.write ((((xself).xget_expected_hash)) (4) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xget_hash)) (((xself).xrepr_ucs2)) (42))) ((xh)))
            (((unsupported)) ((xStringlikeHashRandomizationTests)) (((xunittest).xTestCase)))
              seq
                xrepr_.write (((xrepr)) ("abc"))
                xrepr_long.write (((xrepr)) ("abcdefghijk"))
                xtest_empty_string.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (""))) (0))
            (((unsupported)) ((xStringlikeHashRandomizationTests)) (((xunittest).xTestCase)))
              seq
                xrepr_.write "memoryview(b'abc')"
                xrepr_long.write "memoryview(b'abcdefghijk')"
                xtest_empty_string.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xmemoryview)) (""))))) (0))
            (((unsupported)) ((xHashRandomizationTests)))
              xget_hash_command.write
                [xself xrepr_]
                  seq > @
                    (((unsupported)) (("import datetime; print(hash(%s))".mod (xrepr_))))
            (((unsupported)) ((xDatetimeTests)) (((xunittest).xTestCase)))
              xrepr_.write (((xrepr)) (((((xdatetime).xdate)) (1066) (10) (14))))
            (((unsupported)) ((xDatetimeTests)) (((xunittest).xTestCase)))
              xrepr_.write (((xrepr)) (((((xdatetime).xdatetime)) (1) (2) (3) (4) (5) (6) (7))))
            (((unsupported)) ((xDatetimeTests)) (((xunittest).xTestCase)))
              xrepr_.write (((xrepr)) (((((xdatetime).xtime)) (0))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_hash_distribution.write
                [xself]
                  memory > xs255
                  memory > xh
                  memory > xprefix
                  memory > xbase
                  memory > xs15
                  seq > @
                    seq
                      xbase.write "abcdefghabcdefg"
                      (((unsupported)) ((xi)) ((((xrange)) (1) ((((xlen)) ((xbase)))))))
                        seq
                          xprefix.write (((unsupported)) ((xbase)) ((((unsupported)) ((xi)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xprefix)))))
                            seq
                              xs15.write (((xset)) 0)
                              xs255.write (((xset)) 0)
                              (((unsupported)) ((xc)) ((((xrange)) (256))))
                                seq
                                  xh.write (((xhash)) (((xprefix).add (((xchr)) ((xc))))))
                                  bogusForceDataize.write ((((xs15).xadd)) (((xh).and 15)))
                                  bogusForceDataize.write ((((xs255).xadd)) (((xh).and 255)))
                              bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) ((xs15)))) (8) ((xprefix)))
                              bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) ((xs255)))) (128) ((xprefix)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)