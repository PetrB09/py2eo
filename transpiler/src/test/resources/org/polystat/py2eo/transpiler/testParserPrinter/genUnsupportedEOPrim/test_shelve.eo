memory > xk
memory > xdb
memory > xlist
memory > xstr
memory > xTestCase
memory > xTestProto2FileShelve
memory > xMutableMapping
memory > xglob
memory > xkw
memory > xf
memory > xshelve
memory > xTestAsciiMemShelve
memory > xUnicodeEncodeError
memory > xmapping_tests
memory > xTestShelveBase
memory > xValueError
memory > xdbm_iterator
memory > xmodule
memory > xs
memory > xsupport
memory > xTestAsciiFileShelve
memory > xargs
memory > xTestBinaryFileShelve
memory > xbyteskeydict
memory > xunittest
memory > xlen
memory > xTestBinaryMemShelve
memory > x__name__
memory > xTestProto2MemShelve
[] > test_shelve
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_writeback_also_writes_immediately
        memory > xcounter
        memory > xtest_proto2_file_shelf
        memory > x_args
        memory > xtest_main
        memory > x__getitem__
        memory > x__delitem__
        memory > xfn
        memory > xtest_in_memory_shelf
        memory > xtest_binary_file_shelf
        memory > xtest_default_protocol
        memory > x_in_mem
        memory > x__setitem__
        memory > xtest_mutable_entry
        memory > xtest_keyencoding
        memory > xtype2test
        memory > xcopy
        memory > xL1
        memory > xiterkeys
        memory > x_reference
        memory > xtest_close
        memory > xkeys
        memory > x__iter__
        memory > x__init__
        memory > xtest_with
        memory > x__len__
        memory > xtest_ascii_file_shelf
        memory > xtearDown
        memory > x_empty_mapping
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xL1.write
              [xs]
                seq > @
                  (((unsupported)) (((((xs).xdecode)) ("latin-1"))))
            (((unsupported)) ((xMutableMapping)))
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xd)) ((((unsupported)) 0)))
                x__getitem__.write
                  [xself xkey]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xd)) ((((xL1)) ((xkey)))))))
                x__setitem__.write
                  [xself xkey xvalue]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xd)) ((((xL1)) ((xkey)))))) ((xvalue)))
                x__delitem__.write
                  [xself xkey]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xd)) ((((xL1)) ((xkey)))))))))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlen)) (((xself).xd)))))
                xiterkeys.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xk)) ((((((xself).xd).xkeys)) 0)))
                        (((unsupported)) (((((xk).xencode)) ("latin-1"))))
                x__iter__.write (xiterkeys)
                xkeys.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlist)) (((((xself).xiterkeys)) 0)))))
                xcopy.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xbyteskeydict)) (((xself).xd)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfn.write "shelftemp.db"
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xf)) (((((xglob).xglob)) ((((xself).xfn).add "*")))))
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xf)))
                xtest_close.write
                  [xself]
                    memory > xs
                    memory > xd1
                    seq > @
                      seq
                        xd1.write (((unsupported)) 0)
                        xs.write (((unsupported)) (((xshelve).xShelf)) ((xd1)) (2) (FALSE))
                        (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (1))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlen)) ((xs)))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((xs)) ("key1"))
                          bogusForceDataize.write ((((xself).xfail)) ("Closed shelf should not find a key"))
                xtest_ascii_file_shelf.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)) (((xshelve).xopen)) (((xself).xfn)) (0))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_binary_file_shelf.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)) (((xshelve).xopen)) (((xself).xfn)) (1))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_proto2_file_shelf.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)) (((xshelve).xopen)) (((xself).xfn)) (2))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_in_memory_shelf.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    seq > @
                      seq
                        xd1.write (((xbyteskeydict)) 0)
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd1)) (0))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                        xd2.write (((xbyteskeydict)) 0)
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd2)) (1))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xd1)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xd2)))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xd1).xitems)) 0)) (((((xd2).xitems)) 0)))
                xtest_mutable_entry.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    seq > @
                      seq
                        xd1.write (((xbyteskeydict)) 0)
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd1)) (2) (FALSE))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((((unsupported)) ((xs)) ("key1")).xappend)) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                        xd2.write (((xbyteskeydict)) 0)
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd2)) (2) (TRUE))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((((unsupported)) ((xs)) ("key1")).xappend)) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xd1)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xd2)))) (1))
                xtest_keyencoding.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xkey
                    seq > @
                      seq
                        xd.write (((unsupported)) 0)
                        xkey.write "PÃ¶p"
                        (((unsupported)) ((((unsupported)) (((((xshelve).xShelf)) ((xd)))) ((xkey)))) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xkey).xencode)) ("utf-8"))) ((xd)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd)) ("latin-1"))) ((xkey)))) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xkey).xencode)) ("latin-1"))) ((xd)))
                        xs.write (((unsupported)) (((xshelve).xShelf)) ((xd)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xs).x__setitem__)) ((xkey)) ((((unsupported)) (1))))
                xtest_writeback_also_writes_immediately.write
                  [xself]
                    memory > xd
                    memory > xp2
                    memory > xencodedkey
                    memory > xp1
                    memory > xkey
                    seq > @
                      seq
                        xd.write (((unsupported)) 0)
                        xkey.write "key"
                        xencodedkey.write ((((xkey).xencode)) ("utf-8"))
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd)) (TRUE))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ((xkey)))) ((((unsupported)) (1))))
                            xp1.write (((unsupported)) ((xd)) ((xencodedkey)))
                            bogusForceDataize.write ((((((unsupported)) ((xs)) ("key")).xappend)) (2))
                        xp2.write (((unsupported)) ((xd)) ((xencodedkey)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xp1)) ((xp2)))
                xtest_with.write
                  [xself]
                    memory > xd1
                    seq > @
                      seq
                        xd1.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xshelve).xShelf)) ((xd1)) (2) (FALSE))) ((xs)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ("key1"))) ((((unsupported)) (1) (2) (3) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlen)) ((xs)))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((xs)) ("key1"))
                          bogusForceDataize.write ((((xself).xfail)) ("Closed shelf should not find a key"))
                xtest_default_protocol.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xshelve).xShelf)) ((((unsupported)) 0)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xs).x_protocol)) (3))
            (((unsupported)) 0)
            (((unsupported)) (((xmapping_tests).xBasicTestMappingProtocol)))
              seq
                xfn.write "shelftemp.db"
                xcounter.write 0
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_db)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xmapping_tests).xBasicTestMappingProtocol).x__init__)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkw)))))
                xtype2test.write ((xshelve).xShelf)
                x_reference.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ("key1") ("value1") ("key2") (2) ("key3") ((((unsupported)) (1) (2) (3))))))
                x_empty_mapping.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        ((xself).x_in_mem).if
                          xx.write ((((xshelve).xShelf)) ((((xbyteskeydict)) 0)) ((((unsupported)) (((xself).x_args)))))
                          seq
                            (((unsupported)) (((xself).xcounter)) (1))
                            xx.write ((((xshelve).xopen)) ((((xself).xfn).add (((xstr)) (((xself).xcounter))))) ((((unsupported)) (((xself).x_args)))))
                        bogusForceDataize.write (((((xself).x_db).xappend)) ((xx)))
                        (((unsupported)) ((xx)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xdb)) (((xself).x_db)))
                          bogusForceDataize.write ((((xdb).xclose)) 0)
                        (((unsupported)) (((xself).x_db)) ((((unsupported)) 0)))
                        (((xself).x_in_mem).not).if
                          (((unsupported)) ((xf)) (((((xglob).xglob)) ((((xself).xfn).add "*")))))
                            bogusForceDataize.write ((((xsupport).xunlink)) ((xf)))
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (0))
                x_in_mem.write FALSE
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (1))
                x_in_mem.write FALSE
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (2))
                x_in_mem.write FALSE
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (0))
                x_in_mem.write TRUE
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (1))
                x_in_mem.write TRUE
            (((unsupported)) ((xTestShelveBase)))
              seq
                x_args.write (((unsupported)) ("protocol") (2))
                x_in_mem.write TRUE
            xtest_main.write
              []
                seq > @
                  (((unsupported)) ((xmodule)) ((((xdbm_iterator)) 0)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xTestAsciiFileShelve)) ((xTestBinaryFileShelve)) ((xTestProto2FileShelve)) ((xTestAsciiMemShelve)) ((xTestBinaryMemShelve)) ((xTestProto2MemShelve)) ((xTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)