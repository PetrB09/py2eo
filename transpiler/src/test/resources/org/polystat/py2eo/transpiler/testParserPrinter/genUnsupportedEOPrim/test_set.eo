memory > xv5
memory > xC
memory > xbe_bad
memory > xcopy
memory > xdict2
memory > xPassThru
memory > xv2
memory > xc
memory > xmethname
memory > xdata
memory > xpickle
memory > xshuffle
memory > xlist
memory > xRuntimeError
memory > xTestFrozenSet
memory > xTestSet
memory > xlocals
memory > xmeth
memory > xTestRichSetCompare
memory > xz
memory > xv1
memory > xfrozenset
memory > xstr
memory > xq
memory > xwarnings
memory > xg
memory > xTracer
memory > xBytesWarning
memory > xSetSubclassWithKeywordArgs
memory > xS
memory > xrange
memory > xH
memory > xh
memory > xb
memory > xvalue
memory > xZeroDivisionError
memory > xvertex
memory > xG
memory > xcollections
memory > xset2
memory > xeval
memory > xTestSubsets
memory > xcons
memory > xcase
memory > xStopIteration
memory > xKeyError
memory > xproto
memory > xTestOnlySetsInBinaryOps
memory > xBadCmp
memory > xHashCountingInt
memory > xnums
memory > xp
memory > xbad_dict_clear
memory > xopen
memory > xreversed
memory > xface
memory > xtype
memory > xrandrange
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xr
memory > xX
memory > xhasattr
memory > xReprWrapper
memory > xlarg
memory > xI
memory > xoperator
memory > xi
memory > xTestCopying
memory > xsum
memory > xx
memory > xrarg
memory > xchain
memory > xs
memory > xsupport
memory > xv4
memory > xbool
memory > xm
memory > xtuple
memory > xsorted
memory > xzero
memory > xIg
memory > xcubevert
memory > xgc
memory > xitertools
memory > xLookupError
memory > xweakref
memory > xgetattr
memory > xv
memory > xid
memory > xval
memory > xedges
memory > xiter
memory > xe
memory > xE
memory > xbad_eq
memory > xunittest
memory > xelem
memory > xTestBasicOps
memory > xv3
memory > xFrozenSetSubclass
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xobject
memory > xTestJointOps
memory > xedge
memory > xA
memory > xSetSubclass
memory > xReferenceError
memory > xN
memory > xisinstance
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
memory > xa
[] > test_set
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_inplace_on_self
        memory > xtest_update_operator
        memory > xtest_eq
        memory > xtest_merge_and_mutate
        memory > xtest_and
        memory > xtest_self_isdisjoint
        memory > xtest_cube
        memory > xtest_sym_difference_method_call
        memory > xtest_self_intersection
        memory > xtest_union
        memory > xreverse
        memory > xtest_union_non_overlap
        memory > xtest_print
        memory > xtest_intersection_superset
        memory > xtest_equivalent_equality
        memory > x__eq__
        memory > xtest_weakref
        memory > xtest_iteration
        memory > x__repr__
        memory > xtest_intersection_empty
        memory > xtest_constructor_identity
        memory > xtest_gc
        memory > xtest_union_superset
        memory > xtest_intersection_overlap
        memory > xtest_length
        memory > xtest_self_symmetric_difference
        memory > xtest_deep_copy
        memory > xtest_empty_difference_rev
        memory > xtest_do_not_rehash_dict_keys
        memory > xtest_eq_ne
        memory > xtest_isdisjoint
        memory > xtest_constructor
        memory > xtest_union_subset
        memory > xtest_cyclical_print
        memory > xtest_update
        memory > xfaces
        memory > xtest_update_empty_tuple
        memory > x__iter__
        memory > xtest_instancesWithoutException
        memory > xtest_self_equality
        memory > xtest_new_or_init
        memory > xtest_not_in
        memory > xtest_discard_absent
        memory > xtest_hash
        memory > xtest_ixor
        memory > xright
        memory > xtest_union_method_call
        memory > xtest_difference_method_call
        memory > xcheck_pass_thru
        memory > xtest_binopsVsSubsets
        memory > xtest_c_api
        memory > xtest_repr
        memory > xtest_add
        memory > xtest_init
        memory > xtest_summations
        memory > xtest_sym_difference_non_overlap
        memory > x__getitem__
        memory > xL
        memory > xtest_add_until_full
        memory > xtest_isdisjoint_non_overlap
        memory > xtest_pop
        memory > xtest_sym_difference_overlap
        memory > xtest_iter_and_mutate
        memory > xleft
        memory > xtest_set_literal_insertion_order
        memory > xtest_intersection_update
        memory > xtest_remove_until_empty
        memory > xtest_difference_subset
        memory > xsetUp
        memory > xtest_remove
        memory > xtest_hash_effectiveness
        memory > xtest_isdisjoint_overlap
        memory > xtest_issubset
        memory > xtest_difference_update
        memory > xtest_pickling
        memory > xtest_empty_union
        memory > xtest_deepcopy
        memory > xtest_empty_difference
        memory > xtest_in
        memory > xtest_difference
        memory > xtest_cuboctahedron
        memory > xtest_isdisjoint_subset
        memory > xtest_sym_difference_subset
        memory > xtest_commutativity
        memory > xtest_add_absent
        memory > xtest_subclass_with_custom_hash
        memory > xtest_empty_isdisjoint
        memory > xtest_intersection_update_operator
        memory > xtest_badcmp
        memory > xtest_self_difference
        memory > xtest_set_literal_evaluation_order
        memory > xtest_empty_intersection
        memory > x__next__
        memory > xtest_difference_non_overlap
        memory > xtest_discard
        memory > xtest_remove_present
        memory > xgooditer
        memory > xcase2method
        memory > xtest_or
        memory > xtest_discard_present
        memory > xtest_copy
        memory > xR
        memory > xtest_singleton_empty_frozenset
        memory > xtest_sym_difference_update_operator
        memory > xtest_empty_symmetric_difference
        memory > xtest_difference_overlap
        memory > xtest_container_iterator
        memory > xlinegraph
        memory > xthetype
        memory > xtest_contains
        memory > xtest_exclusion
        memory > xtest_isdisjoint_superset
        memory > xtest_add_present
        memory > xtest_intersection_method_call
        memory > xtest_set_literal
        memory > xbasetype
        memory > xtest_symmetric_difference_update
        memory > xtest_sub
        memory > xtest_changingSizeWhileIterating
        memory > xtest_remove_keyerror_set
        memory > xtest_sym_difference
        memory > xtest_ior
        memory > xtest_iand
        memory > xtest_xor
        memory > xtest_union_empty
        memory > xtest_symmetric_difference
        memory > xcube
        memory > xtest_intersection_subset
        memory > x__init__
        memory > xtest_difference_update_operator
        memory > xtest_keywords_in_subclass
        memory > xtest_clear
        memory > xtest_inplace_methods
        memory > xtest_isub
        memory > xtest_remove_keyerror_unpacking
        memory > xtest_sym_difference_update
        memory > xtest_intersection
        memory > xtest_difference_superset
        memory > x__hash__
        memory > xtest_update_unit_tuple_non_overlap
        memory > xname
        memory > xtest_issue_37219
        memory > xtest_free_after_iterating
        memory > xtest_ge_gt_le_lt
        memory > xtest_iterator_pickling
        memory > xtest_self_union
        memory > xtest_union_overlap
        memory > xempty_set
        memory > xtest_nested_empty_constructor
        memory > xtest_inline_methods
        memory > xtest_remove_absent
        memory > xtest_setOfFrozensets
        memory > xtest_uniquification
        memory > xtest_len
        memory > xtearDown
        memory > xtest_8420_set_merge
        memory > xtest_intersection_non_overlap
        memory > xpowerset
        memory > xtest_equality
        memory > xtest_hash_caching
        memory > xcases
        memory > xtest_isdisjoint_empty
        memory > xtest_instanceWithException
        memory > xtest_cyclical_repr
        memory > xtest_update_unit_tuple_overlap
        memory > xtest_sub_and_super
        memory > xtest_frozen_as_dictkey
        memory > xbaditer
        memory > xcheck_repr_against_values
        memory > xtest_rich_compare
        memory > xtest_sym_difference_superset
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xException)))
            xcheck_pass_thru.write
              []
                seq > @
                  seq
                    (((unsupported)) ((xPassThru)))
                    (((unsupported)) (1))
            (((unsupported)) 0)
              seq
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)) (1))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((xRuntimeError)))
            (((unsupported)) 0)
              seq
                unsupported
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xrepr)) (((xself).xvalue)))))
            (((unsupported)) ((xint)))
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhash_count)) (0))
                x__hash__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xhash_count)) (1))
                        (((unsupported)) (((((xint).x__hash__)) ((xself)))))
            (((unsupported)) 0)
              seq
                xsetUp.write
                  [xself]
                    memory > xword
                    seq > @
                      seq
                        (((unsupported)) (((xself).xword)) ((xword)) ("simsalabim"))
                        (((unsupported)) (((xself).xotherword)) ("madagascar"))
                        (((unsupported)) (((xself).xletters)) ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
                        (((unsupported)) (((xself).xs)) (((((xself).xthetype)) ((xword)))))
                        (((unsupported)) (((xself).xd)) (((((xdict).xfromkeys)) ((xword)))))
                xtest_new_or_init.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xthetype)) ((((unsupported)) 0)) (2))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xset)) 0).x__init__)) (1))
                xtest_uniquification.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        xactual.write (((xsorted)) (((xself).xs)))
                        xexpected.write (((xsorted)) (((xself).xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) (((xself).xthetype)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xthetype)) ((((unsupported)) ((((unsupported)) 0)))))
                xtest_len.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xs)))) ((((xlen)) (((xself).xd)))))
                xtest_contains.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)) ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc)) (((xself).xs)))) ((((unsupported)) ((xc)) (((xself).xd)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).x__contains__)) ((((unsupported)) ((((unsupported)) 0)))))
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((((xfrozenset)) (((xself).xletters)))))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xself).xthetype)) (((xself).xletters)))) ((xs)))
                xtest_union.write
                  [xself]
                    memory > xx
                    memory > xu
                    seq > @
                      seq
                        xu.write (((((xself).xs).xunion)) (((xself).xotherword)))
                        (((unsupported)) ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc)) ((xu)))) (((((unsupported)) ((xc)) (((xself).xd))).or (((unsupported)) ((xc)) (((xself).xotherword))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xu)))) (((xself).xbasetype)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xunion)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xunion)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xunion)) ((((xC)) ("cdc"))))) ((((xset)) ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xunion)) ((((xC)) ("efgfe"))))) ((((xset)) ("abcefg"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xunion)) ((((xC)) ("ccb"))))) ((((xset)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xunion)) ((((xC)) ("ef"))))) ((((xset)) ("abcef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xunion)) ((((xC)) ("ef"))) ((((xC)) ("fg"))))) ((((xset)) ("abcefg"))))
                        xx.write ((((xself).xthetype)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xunion)) ((((xset)) ((((unsupported)) (1))))) ((xx)) ((((xset)) ((((unsupported)) (2))))))) (((((xself).xthetype)) ((((unsupported)) (1) (2))))))
                xtest_or.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xunion)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).or (((xset)) (((xself).xotherword))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).or (((xfrozenset)) (((xself).xotherword))))) ((xi)))
                        (((unsupported)) ((xTypeError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("s|t did not screen-out general iterables"))
                xtest_intersection.write
                  [xself]
                    memory > xs
                    memory > xz
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xintersection)) (((xself).xotherword)))
                        (((unsupported)) ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc)) ((xi)))) (((((unsupported)) ((xc)) (((xself).xd))).and (((unsupported)) ((xc)) (((xself).xotherword))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xi)))) (((xself).xbasetype)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xintersection)) ((((xcheck_pass_thru)) 0)))
                        (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xintersection)) ((((xC)) ("cdc"))))) ((((xset)) ("cc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xintersection)) ((((xC)) ("efgfe"))))) ((((xset)) (""))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xintersection)) ((((xC)) ("ccb"))))) ((((xset)) ("bc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xintersection)) ((((xC)) ("ef"))))) ((((xset)) (""))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xintersection)) ((((xC)) ("cbcf"))) ((((xC)) ("bag"))))) ((((xset)) ("b"))))
                        xs.write ((((xself).xthetype)) ("abcba"))
                        xz.write ((((xs).xintersection)) 0)
                        (((xself).xthetype).eq (((xfrozenset)) 0)).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xs)))) ((((xid)) ((xz)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs)))) ((((xid)) ((xz)))))
                xtest_isdisjoint.write
                  [xself]
                    memory > xexpected
                    memory > xs1
                    memory > xf
                    memory > xactual
                    memory > xs2
                    seq > @
                      seq
                        xf.write
                          [xs1 xs2]
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ((((((((xset)) ((xs1))).xintersection)) ((xs2))).not)))
                        (((unsupported)) ((xlarg)) ((((unsupported)) ("") ("a") ("ab") ("abc") ("ababac") ("cdc") ("cc") ("efgfe") ("ccb") ("ef"))))
                          seq
                            xs1.write ((((xself).xthetype)) ((xlarg)))
                            (((unsupported)) ((xrarg)) ((((unsupported)) ("") ("a") ("ab") ("abc") ("ababac") ("cdc") ("cc") ("efgfe") ("ccb") ("ef"))))
                              (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                                seq
                                  xs2.write (((xC)) ((xrarg)))
                                  xactual.write ((((xs1).xisdisjoint)) ((xs2)))
                                  xexpected.write (((xf)) ((xs1)) ((xs2)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                                  bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) ((xactual)) (TRUE)).or (((unsupported)) ((xactual)) (FALSE)))))
                xtest_and.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xintersection)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).and (((xset)) (((xself).xotherword))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).and (((xfrozenset)) (((xself).xotherword))))) ((xi)))
                        (((unsupported)) ((xTypeError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("s&t did not screen-out general iterables"))
                xtest_difference.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xdifference)) (((xself).xotherword)))
                        (((unsupported)) ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc)) ((xi)))) (((((unsupported)) ((xc)) (((xself).xd))).and (((unsupported)) ((xc)) (((xself).xotherword))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xi)))) (((xself).xbasetype)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xdifference)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xdifference)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) ((((xC)) ("cdc"))))) ((((xset)) ("ab"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) ((((xC)) ("efgfe"))))) ((((xset)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) ((((xC)) ("ccb"))))) ((((xset)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) ((((xC)) ("ef"))))) ((((xset)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) 0)) ((((xset)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xdifference)) ((((xC)) ("a"))) ((((xC)) ("b"))))) ((((xset)) ("c"))))
                xtest_sub.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xdifference)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).sub (((xset)) (((xself).xotherword))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).sub (((xfrozenset)) (((xself).xotherword))))) ((xi)))
                        (((unsupported)) ((xTypeError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("s-t did not screen-out general iterables"))
                xtest_symmetric_difference.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xsymmetric_difference)) (((xself).xotherword)))
                        (((unsupported)) ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc)) ((xi)))) ((((unsupported)) ((((unsupported)) ((xc)) (((xself).xd)))) ((((unsupported)) ((xc)) (((xself).xotherword)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xi)))) (((xself).xbasetype)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xsymmetric_difference)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xsymmetric_difference)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xsymmetric_difference)) ((((xC)) ("cdc"))))) ((((xset)) ("abd"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xsymmetric_difference)) ((((xC)) ("efgfe"))))) ((((xset)) ("abcefg"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xsymmetric_difference)) ((((xC)) ("ccb"))))) ((((xset)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xself).xthetype)) ("abcba")).xsymmetric_difference)) ((((xC)) ("ef"))))) ((((xset)) ("abcef"))))
                xtest_xor.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xsymmetric_difference)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xs)) ((((xfrozenset)) (((xself).xotherword)))))) ((xi)))
                        (((unsupported)) ((xTypeError)))
                          (((unsupported)) (((xself).xs)) (((xself).xotherword)))
                          bogusForceDataize.write ((((xself).xfail)) ("s^t did not screen-out general iterables"))
                xtest_equality.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((((xset)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((((xfrozenset)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).eq ((xself).xword))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xself).xs)) ((((xfrozenset)) (((xself).xotherword)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).neq ((xself).xword))) (TRUE))
                xtest_setOfFrozensets.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xt.write (((xmap)) ((xfrozenset)) ((((unsupported)) ("abcdef") ("bcd") ("bdcb") ("fed") ("fedccba"))))
                        xs.write ((((xself).xthetype)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (3))
                xtest_sub_and_super.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)) ((xr)))) ((((xmap)) (((xself).xthetype)) ((((unsupported)) ("ab") ("abcde") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xp).less (xq))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xp).leq (xq))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xq).leq (xq))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xq).greater (xp))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xq).geq (xp))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xq).less (xr))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xq).leq (xr))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xq).greater (xr))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xq).geq (xr))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xset)) ("a")).xissubset)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xset)) ("abc")).xissuperset)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xset)) ("a")).xissubset)) ("cbs"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((xset)) ("cbs")).xissuperset)) ("a"))))
                xtest_pickling.write
                  [xself]
                    memory > xdup
                    memory > xp
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xp.write ((((xpickle).xdumps)) (((xself).xs)) ((xi)))
                          xdup.write ((((xpickle).xloads)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((xdup)) (("%s != %s".mod (((unsupported)) (((xself).xs)) ((xdup))))))
                          (((unsupported)) ((((xtype)) (((xself).xs)))) ((((unsupported)) ((xset)) ((xfrozenset))))).if
                            seq
                              (((unsupported)) ((((xself).xs).xx)) (10))
                              xp.write ((((xpickle).xdumps)) (((xself).xs)) ((xi)))
                              xdup.write ((((xpickle).xloads)) ((xp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xs).xx)) (((xdup).xx)))
                xtest_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xdrop
                    memory > xit
                    memory > xitorg
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xitorg.write (((xiter)) (((xself).xs)))
                          xdata.write ((((xself).xthetype)) (((xself).xs)))
                          xd.write ((((xpickle).xdumps)) ((xitorg)) ((xproto)))
                          xit.write ((((xpickle).xloads)) ((xd)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) ((((xcollections).xabc).xIterator)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xthetype)) ((xit)))) ((xdata)))
                          xit.write ((((xpickle).xloads)) ((xd)))
                          (((unsupported)) ((xStopIteration)))
                            xdrop.write (((xnext)) ((xit)))
                            (((unsupported)) 0)
                          xd.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)) ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xthetype)) ((xit)))) (((xdata).sub ((((xself).xthetype)) ((((unsupported)) ((xdrop))))))))
                xtest_deepcopy.write
                  [xself]
                    memory > x__deepcopy__
                    memory > xt
                    memory > xnewt
                    memory > xs
                    memory > xdup
                    memory > x__init__
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)) (((xself).xvalue)) ((xvalue)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xvalue)))
                            x__deepcopy__.write
                              [xself xmemo]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((xTracer)) ((((xself).xvalue).add 1)))))
                        xt.write (((xTracer)) (10))
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((xt)))))
                        xdup.write ((((xcopy).xdeepcopy)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs)))) ((((xid)) ((xdup)))))
                        (((unsupported)) ((xelem)) ((xdup)))
                          xnewt.write (xelem)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xt)))) ((((xid)) ((xnewt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xt).xvalue).add 1)) (((xnewt).xvalue)))
                xtest_gc.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xs.write (((xset)) ((((unsupported)) ((((xA)) 0)) ((xi)) ((((xrange)) (1000))))))
                        (((unsupported)) ((xelem)) ((xs)))
                          seq
                            (((unsupported)) (((xelem).xcycle)) ((xs)))
                            (((unsupported)) (((xelem).xsub)) ((xelem)))
                            (((unsupported)) (((xelem).xset)) ((((xset)) ((((unsupported)) ((xelem)))))))
                xtest_subclass_with_custom_hash.write
                  [xself]
                    memory > xs
                    memory > x__hash__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) (((xself).xthetype)))
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((xint)) (((((xid)) ((xself))).and 2147483647)))))
                        xs.write (((xH)) 0)
                        xf.write (((xset)) 0)
                        bogusForceDataize.write ((((xf).xadd)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xs)) ((xf)))
                        bogusForceDataize.write ((((xf).xremove)) ((xs)))
                        bogusForceDataize.write ((((xf).xadd)) ((xs)))
                        bogusForceDataize.write ((((xf).xdiscard)) ((xs)))
                xtest_badcmp.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((((xBadCmp)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xself).xthetype)) ((((unsupported)) ((((xBadCmp)) 0)) ((((xBadCmp)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).x__contains__)) ((((xBadCmp)) 0)))
                        (((xhasattr)) ((xs)) ("add")).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xadd)) ((((xBadCmp)) 0)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xdiscard)) ((((xBadCmp)) 0)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xremove)) ((((xBadCmp)) 0)))
                xtest_cyclical_repr.write
                  [xself]
                    memory > xname
                    memory > xs
                    memory > xw
                    seq > @
                      seq
                        xw.write (((xReprWrapper)) 0)
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((xw)))))
                        (((unsupported)) (((xw).xvalue)) ((xs)))
                        (((xself).xthetype).eq (xset)).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xs)))) ("{set(...)}"))
                          seq
                            xname.write (((unsupported)) (((((((xrepr)) ((xs))).xpartition)) ("("))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xs)))) (("%s({%s(...)})".mod (((unsupported)) ((xname)) ((xname))))))
                xtest_cyclical_print.write
                  [xself]
                    memory > xs
                    memory > xw
                    memory > xfo
                    seq > @
                      seq
                        xw.write (((xReprWrapper)) 0)
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((xw)))))
                        (((unsupported)) (((xw).xvalue)) ((xs)))
                        xfo.write (((xopen)) (((xsupport).xTESTFN)) ("w"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xfo).xwrite)) ((((xstr)) ((xs)))))
                            bogusForceDataize.write ((((xfo).xclose)) 0)
                            xfo.write (((xopen)) (((xsupport).xTESTFN)) ("r"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfo).xread)) 0)) ((((xrepr)) ((xs)))))
                          seq
                            bogusForceDataize.write ((((xfo).xclose)) 0)
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_do_not_rehash_dict_keys.write
                  [xself]
                    memory > xd
                    memory > xd2
                    memory > xd3
                    memory > xs
                    memory > xn
                    seq > @
                      seq
                        xn.write 10
                        xd.write ((((xdict).xfromkeys)) ((((xmap)) ((xHashCountingInt)) ((((xrange)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        xs.write ((((xself).xthetype)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        bogusForceDataize.write ((((xs).xdifference)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        (((xhasattr)) ((xs)) ("symmetric_difference_update")).if
                          bogusForceDataize.write ((((xs).xsymmetric_difference_update)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        xd2.write ((((xdict).xfromkeys)) ((((xset)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        xd3.write ((((xdict).xfromkeys)) ((((xfrozenset)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        xd3.write ((((xdict).xfromkeys)) ((((xfrozenset)) ((xd)))) (123))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) (((xelem).xhash_count)) ((xelem)) ((xd)))))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd3)) (((((xdict).xfromkeys)) ((xd)) (123))))
                xtest_container_iterator.write
                  [xself]
                    memory > xref
                    memory > xcontainer
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)) ((xobject)))
                        xobj.write (((xC)) 0)
                        xref.write ((((xweakref).xref)) ((xobj)))
                        xcontainer.write (((xset)) ((((unsupported)) ((xobj)) (1))))
                        (((unsupported)) (((xobj).xx)) ((((xiter)) ((xcontainer)))))
                        (((unsupported)) ((((unsupported)) ((xobj)) ((xcontainer)))))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xref)) 0)) ("None: is there a None literal in the EO language?"))) ("Cycle was not collected"))
                xtest_free_after_iterating.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)) ((xself)) ((xiter)) (((xself).xthetype)))
            (((unsupported)) ((xTestJointOps)) (((xunittest).xTestCase)))
              seq
                xthetype.write (xset)
                xbasetype.write (xset)
                xtest_init.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) 0)
                        bogusForceDataize.write ((((xs).x__init__)) (((xself).xword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) (((xself).xword)))))
                        bogusForceDataize.write ((((xs).x__init__)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) (((xself).xotherword)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xs).x__init__)) ((xs)) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xs).x__init__)) (1))
                xtest_constructor_identity.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) ((((xrange)) (3))))
                        xt.write ((((xself).xthetype)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs)))) ((((xid)) ((xt)))))
                xtest_set_literal.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xset)) ((((unsupported)) (1) (2) (3))))
                        xt.write (((unsupported)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xt)))
                xtest_set_literal_insertion_order.write
                  [xself]
                    memory > xs
                    memory > xstored_value
                    seq > @
                      seq
                        xs.write (((unsupported)) (1) (1.0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (1))
                        xstored_value.write ((((xs).xpop)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xstored_value)))) ((xint)))
                xtest_set_literal_evaluation_order.write
                  [xself]
                    memory > xevents
                    memory > xs
                    memory > xrecord
                    seq > @
                      seq
                        xevents.write (((unsupported)) 0)
                        xrecord.write
                          [xobj]
                            seq > @
                              bogusForceDataize.write ((((xevents).xappend)) ((xobj)))
                        xs.write (((unsupported)) ((((xrecord)) (1))) ((((xrecord)) (2))) ((((xrecord)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xevents)) ((((unsupported)) (1) (2) (3))))
                xtest_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) (((xself).xs)))
                xtest_clear.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((((xset)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xs)))) (0))
                xtest_copy.write
                  [xself]
                    memory > xdup
                    seq > @
                      seq
                        xdup.write (((((xself).xs).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((xdup)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) (((xself).xs)))) ((((xid)) ((xdup)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xdup)))) (((xself).xbasetype)))
                xtest_add.write
                  [xself]
                    memory > xdup
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xadd)) ("Q"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("Q") (((xself).xs)))
                        xdup.write (((((xself).xs).xcopy)) 0)
                        bogusForceDataize.write (((((xself).xs).xadd)) ("Q"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xs)) ((xdup)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xadd)) ((((unsupported)) 0)))
                xtest_remove.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xremove)) ("a"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("a") (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((((xself).xs).xremove)) ("Q"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xremove)) ((((unsupported)) 0)))
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((((xfrozenset)) (((xself).xword)))))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xself).xthetype)) (((xself).xword)))) ((xs)))
                        bogusForceDataize.write ((((xs).xremove)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((((xself).xthetype)) (((xself).xword)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((((xself).xs).xremove)) (((((xself).xthetype)) (((xself).xword)))))
                xtest_remove_keyerror_unpacking.write
                  [xself]
                    memory > xv2
                    seq > @
                      (((unsupported)) ((xv1)) ((((unsupported)) ("Q") ((((unsupported)) (1))))))
                        (((unsupported)) ((xKeyError)))
                          bogusForceDataize.write (((((xself).xs).xremove)) ((xv1)))
                          seq
                            xv2.write (((unsupported)) (((xe).xargs)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xv1)) ((xv2)))
                          bogusForceDataize.write ((((xself).xfail)) 0)
                xtest_remove_keyerror_set.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        xkey.write ((((xself).xthetype)) ((((unsupported)) (3) (4))))
                        (((unsupported)) ((xKeyError)))
                          bogusForceDataize.write (((((xself).xs).xremove)) ((xkey)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) (((xe).xargs)) (0))) ((xkey)))) (((("KeyError should be {0}, not {1}".xformat)) ((xkey)) ((((unsupported)) (((xe).xargs)) (0))))))
                          bogusForceDataize.write ((((xself).xfail)) 0)
                xtest_discard.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xdiscard)) ("a"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("a") (((xself).xs)))
                        bogusForceDataize.write (((((xself).xs).xdiscard)) ("Q"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xdiscard)) ((((unsupported)) 0)))
                        xs.write ((((xself).xthetype)) ((((unsupported)) ((((xfrozenset)) (((xself).xword)))))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xself).xthetype)) (((xself).xword)))) ((xs)))
                        bogusForceDataize.write ((((xs).xdiscard)) (((((xself).xthetype)) (((xself).xword)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((((xself).xthetype)) (((xself).xword)))) ((xs)))
                        bogusForceDataize.write ((((xs).xdiscard)) (((((xself).xthetype)) (((xself).xword)))))
                xtest_pop.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) (((xself).xs)))))))
                          seq
                            xelem.write (((((xself).xs).xpop)) 0)
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xelem)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((((xself).xs).xpop)))
                xtest_update.write
                  [xself]
                    memory > xs
                    memory > xretval
                    memory > xq
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xupdate)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xupdate)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xupdate)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((unsupported)) ((((unsupported)) ("cdc") ("abcd"))) ((((unsupported)) ("efgfe") ("abcefg"))) ((((unsupported)) ("ccb") ("abc"))) ((((unsupported)) ("ef") ("abcef"))))))
                          (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                            seq
                              xs.write ((((xself).xthetype)) ("abcba"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xupdate)) ((((xC)) ((xp)))))) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) ((xq)))))
                        (((unsupported)) ((xp)) ((((unsupported)) ("cdc") ("efgfe") ("ccb") ("ef") ("abcda"))))
                          seq
                            xq.write "ahi"
                            (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                              seq
                                xs.write ((((xself).xthetype)) ("abcba"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xupdate)) ((((xC)) ((xp)))) ((((xC)) ((xq)))))) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((((xset)) ((xs))).or (((xset)) ((xp)))).or (((xset)) ((xq))))))
                xtest_ior.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                xtest_intersection_update.write
                  [xself]
                    memory > xt
                    memory > xs
                    memory > xretval
                    memory > xss
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xintersection_update)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          ((((unsupported)) ((xc)) (((xself).xotherword))).and (((unsupported)) ((xc)) (((xself).xword)))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xintersection_update)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xintersection_update)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((unsupported)) ((((unsupported)) ("cdc") ("c"))) ((((unsupported)) ("efgfe") (""))) ((((unsupported)) ("ccb") ("bc"))) ((((unsupported)) ("ef") (""))))))
                          (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                            seq
                              xs.write ((((xself).xthetype)) ("abcba"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xintersection_update)) ((((xC)) ((xp)))))) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) ((xq)))))
                              xss.write "abcba"
                              xs.write ((((xself).xthetype)) ((xss)))
                              xt.write "cbc"
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xintersection_update)) ((((xC)) ((xp)))) ((((xC)) ((xt)))))) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((((xset)) ("abcba")).and (((xset)) ((xp)))).and (((xset)) ((xt))))))
                xtest_iand.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          ((((unsupported)) ((xc)) (((xself).xotherword))).and (((unsupported)) ((xc)) (((xself).xword)))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                xtest_difference_update.write
                  [xself]
                    memory > xs
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xdifference_update)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          ((((unsupported)) ((xc)) (((xself).xword))).and (((unsupported)) ((xc)) (((xself).xotherword)))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xdifference_update)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xdifference_update)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xsymmetric_difference_update)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((unsupported)) ((((unsupported)) ("cdc") ("ab"))) ((((unsupported)) ("efgfe") ("abc"))) ((((unsupported)) ("ccb") ("a"))) ((((unsupported)) ("ef") ("abc"))))))
                          (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                            seq
                              xs.write ((((xself).xthetype)) ("abcba"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xdifference_update)) ((((xC)) ((xp)))))) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) ((xq)))))
                              xs.write ((((xself).xthetype)) ("abcdefghih"))
                              bogusForceDataize.write ((((xs).xdifference_update)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((((xself).xthetype)) ("abcdefghih"))))
                              xs.write ((((xself).xthetype)) ("abcdefghih"))
                              bogusForceDataize.write ((((xs).xdifference_update)) ((((xC)) ("aba"))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((((xself).xthetype)) ("cdefghih"))))
                              xs.write ((((xself).xthetype)) ("abcdefghih"))
                              bogusForceDataize.write ((((xs).xdifference_update)) ((((xC)) ("cdc"))) ((((xC)) ("aba"))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((((xself).xthetype)) ("efghih"))))
                xtest_isub.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          ((((unsupported)) ((xc)) (((xself).xword))).and (((unsupported)) ((xc)) (((xself).xotherword)))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                xtest_symmetric_difference_update.write
                  [xself]
                    memory > xs
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xsymmetric_difference_update)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          (((unsupported)) ((((unsupported)) ((xc)) (((xself).xword)))) ((((unsupported)) ((xc)) (((xself).xotherword))))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xPassThru)) ((((xself).xs).xsymmetric_difference_update)) ((((xcheck_pass_thru)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xs).xsymmetric_difference_update)) ((((unsupported)) ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((unsupported)) ((((unsupported)) ("cdc") ("abd"))) ((((unsupported)) ("efgfe") ("abcefg"))) ((((unsupported)) ("ccb") ("a"))) ((((unsupported)) ("ef") ("abcef"))))))
                          (((unsupported)) ((xC)) ((((unsupported)) ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xstr)) ((xlist)) ((xtuple)))))
                            seq
                              xs.write ((((xself).xthetype)) ("abcba"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsymmetric_difference_update)) ((((xC)) ((xp)))))) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) ((xq)))))
                xtest_ixor.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xs)) ((((xset)) (((xself).xotherword)))))
                        (((unsupported)) ((xc)) ((((xself).xword).add ((xself).xotherword))))
                          (((unsupported)) ((((unsupported)) ((xc)) (((xself).xword)))) ((((unsupported)) ((xc)) (((xself).xotherword))))).if
                            bogusForceDataize.write ((((xself).xassertIn)) ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xc)) (((xself).xs)))
                xtest_inplace_on_self.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((((xself).xs).xcopy)) 0)
                        (((unsupported)) ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) (((xself).xs)))
                        (((unsupported)) ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) (((xself).xs)))
                        (((unsupported)) ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) (((((xself).xthetype)) 0)))
                        xt.write (((((xself).xs).xcopy)) 0)
                        (((unsupported)) ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) (((((xself).xthetype)) 0)))
                xtest_weakref.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) ("gallahad"))
                        xp.write ((((xweakref).xproxy)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xp)))) ((((xstr)) ((xs)))))
                        xs.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xReferenceError)) ((xstr)) ((xp)))
                xtest_rich_compare.write
                  [xself]
                    memory > xmyset
                    memory > x__gt__
                    memory > x__ge__
                    memory > x__le__
                    memory > xmyobj
                    memory > x__lt__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__gt__.write
                              [xself xsome_set]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xgt_called)) (TRUE))
                                    (((unsupported)) (FALSE))
                            x__lt__.write
                              [xself xsome_set]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xlt_called)) (TRUE))
                                    (((unsupported)) (FALSE))
                            x__ge__.write
                              [xself xsome_set]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xge_called)) (TRUE))
                                    (((unsupported)) (FALSE))
                            x__le__.write
                              [xself xsome_set]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xle_called)) (TRUE))
                                    (((unsupported)) (FALSE))
                        xmyset.write (((unsupported)) (1) (2) (3))
                        xmyobj.write (((xTestRichSetCompare)) 0)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmyobj).xgt_called)))
                        xmyobj.write (((xTestRichSetCompare)) 0)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmyobj).xlt_called)))
                        xmyobj.write (((xTestRichSetCompare)) 0)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmyobj).xge_called)))
                        xmyobj.write (((xTestRichSetCompare)) 0)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmyobj).xle_called)))
                xtest_c_api.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xset)) 0).xtest_c_api)) 0)) (TRUE))
            (((unsupported)) ((xset)))
            (((unsupported)) ((xTestSet)))
              seq
                xthetype.write (xSetSubclass)
                xbasetype.write (xset)
            (((unsupported)) ((xset)))
              x__init__.write
                [xself xiterable xnewarg]
                  seq > @
                    (((unsupported)) 0)
                      bogusForceDataize.write ((((xset).x__init__)) ((xself)) ((xiterable)))
            (((unsupported)) ((xTestSet)))
              xtest_keywords_in_subclass.write
                [xself]
                  seq > @
                    seq
                      unsupported
                      (((unsupported)) ((xSetSubclassWithKeywordArgs)) (1))
            (((unsupported)) ((xTestJointOps)) (((xunittest).xTestCase)))
              seq
                xthetype.write (xfrozenset)
                xbasetype.write (xfrozenset)
                xtest_init.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) (((xself).xword)))
                        bogusForceDataize.write ((((xs).x__init__)) (((xself).xotherword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xset)) (((xself).xword)))))
                xtest_singleton_empty_frozenset.write
                  [xself]
                    memory > xefs
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xfrozenset)) 0)
                        xefs.write (((unsupported)) ((((xfrozenset)) 0)) ((((xfrozenset)) ((((unsupported)) 0)))) ((((xfrozenset)) ((((unsupported)) 0)))) ((((xfrozenset)) (""))) ((((xfrozenset)) 0)) ((((xfrozenset)) ((((unsupported)) 0)))) ((((xfrozenset)) ((((unsupported)) 0)))) ((((xfrozenset)) (""))) ((((xfrozenset)) ((((xrange)) (0))))) ((((xfrozenset)) ((((xfrozenset)) 0)))) ((((xfrozenset)) ((xf)))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((xefs)))))))) (1))
                xtest_constructor_identity.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) ((((xrange)) (3))))
                        xt.write ((((xself).xthetype)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xs)))) ((((xid)) ((xt)))))
                xtest_hash.write
                  [xself]
                    memory > xn
                    memory > xseq
                    memory > xresults
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((((xself).xthetype)) ("abcdeb"))))) ((((xhash)) (((((xself).xthetype)) ("ebecda"))))))
                        xn.write 100
                        xseq.write (((unsupported)) ((((xrandrange)) ((xn)))) ((xi)) ((((xrange)) ((xn)))))
                        xresults.write (((xset)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (200))))
                          seq
                            bogusForceDataize.write (((xshuffle)) ((xseq)))
                            bogusForceDataize.write ((((xresults).xadd)) ((((xhash)) (((((xself).xthetype)) ((xseq)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresults)))) (1))
                xtest_copy.write
                  [xself]
                    memory > xdup
                    seq > @
                      seq
                        xdup.write (((((xself).xs).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) (((xself).xs)))) ((((xid)) ((xdup)))))
                xtest_frozen_as_dictkey.write
                  [xself]
                    memory > xd
                    memory > xkey2
                    memory > xseq
                    memory > xkey1
                    seq > @
                      seq
                        xseq.write (((((xlist)) ((((xrange)) (10)))).add (((xlist)) ("abcdefg"))).add (((unsupported)) ("apple")))
                        xkey1.write ((((xself).xthetype)) ((xseq)))
                        xkey2.write ((((xself).xthetype)) ((((xreversed)) ((xseq)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkey1)) ((xkey2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xkey1)))) ((((xid)) ((xkey2)))))
                        xd.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xd)) ((xkey1)))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd)) ((xkey2)))) (42))
                xtest_hash_caching.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xthetype)) ("abcdcda"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xf)))) ((((xhash)) ((xf)))))
                xtest_hash_effectiveness.write
                  [xself]
                    memory > xelemmasks
                    memory > xt
                    memory > xmask
                    memory > xaddhashvalue
                    memory > xzf_range
                    memory > xn
                    memory > xpowerset
                    memory > xu
                    memory > xhashvalues
                    seq > @
                      seq
                        xn.write 13
                        xhashvalues.write (((xset)) 0)
                        xaddhashvalue.write ((xhashvalues).xadd)
                        xelemmasks.write (((unsupported)) ((((unsupported)) (((xi).add 1)) ((((unsupported)) (1) ((xi)))))) ((xi)) ((((xrange)) ((xn)))))
                        (((unsupported)) ((xi)) ((((xrange)) ((((unsupported)) (2) ((xn)))))))
                          bogusForceDataize.write (((xaddhashvalue)) ((((xhash)) ((((xfrozenset)) ((((unsupported)) ((xe)) ((((unsupported)) ((xe)) ((xm)))) ((xelemmasks)) (((xm).and (xi))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xhashvalues)))) ((((unsupported)) (2) ((xn)))))
                        xzf_range.write
                          [xn]
                            memory > xnum
                            memory > xnums
                            seq > @
                              seq
                                xnums.write (((unsupported)) ((((xfrozenset)) 0)))
                                (((unsupported)) ((xi)) ((((xrange)) (((xn).sub 1)))))
                                  seq
                                    xnum.write (((xfrozenset)) ((xnums)))
                                    bogusForceDataize.write ((((xnums).xappend)) ((xnum)))
                                (((unsupported)) ((((unsupported)) ((xnums)) ((((unsupported)) ((xn)))))))
                        xpowerset.write
                          [xs]
                            seq > @
                              (((unsupported)) ((xi)) ((((xrange)) (((((xlen)) ((xs))).add 1)))))
                                (((unsupported)) ((((xmap)) ((xfrozenset)) (((((xitertools).xcombinations)) ((xs)) ((xi)))))))
                        (((unsupported)) ((xn)) ((((xrange)) (18))))
                          seq
                            xt.write (((unsupported)) (2) ((xn)))
                            xmask.write ((xt).sub 1)
                            (((unsupported)) ((xnums)) ((((unsupported)) ((xrange)) ((xzf_range)))))
                              seq
                                xu.write (((xlen)) ((((unsupported)) (((xh).and (xmask))) ((xh)) ((((xmap)) ((xhash)) ((((xpowerset)) ((((xnums)) ((xn)))))))))))
                                bogusForceDataize.write ((((xself).xassertGreater)) ((4.mul (xu))) ((xt)))
            (((unsupported)) ((xfrozenset)))
            (((unsupported)) ((xTestFrozenSet)))
              seq
                xthetype.write (xFrozenSetSubclass)
                xbasetype.write (xfrozenset)
                xtest_constructor_identity.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) ((((xrange)) (3))))
                        xt.write ((((xself).xthetype)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs)))) ((((xid)) ((xt)))))
                xtest_copy.write
                  [xself]
                    memory > xdup
                    seq > @
                      seq
                        xdup.write (((((xself).xs).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) (((xself).xs)))) ((((xid)) ((xdup)))))
                xtest_nested_empty_constructor.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xthetype)) 0)
                        xt.write ((((xself).xthetype)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xt)))
                xtest_singleton_empty_frozenset.write
                  [xself]
                    memory > xFrozenset
                    memory > xefs
                    memory > xF
                    memory > xf
                    seq > @
                      seq
                        xFrozenset.write ((xself).xthetype)
                        xf.write (((xfrozenset)) 0)
                        xF.write (((xFrozenset)) 0)
                        xefs.write (((unsupported)) ((((xFrozenset)) 0)) ((((xFrozenset)) ((((unsupported)) 0)))) ((((xFrozenset)) ((((unsupported)) 0)))) ((((xFrozenset)) (""))) ((((xFrozenset)) 0)) ((((xFrozenset)) ((((unsupported)) 0)))) ((((xFrozenset)) ((((unsupported)) 0)))) ((((xFrozenset)) (""))) ((((xFrozenset)) ((((xrange)) (0))))) ((((xFrozenset)) ((((xFrozenset)) 0)))) ((((xFrozenset)) ((((xfrozenset)) 0)))) ((xf)) ((xF)) ((((xFrozenset)) ((xf)))) ((((xFrozenset)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((xefs)))))))) ((((xlen)) ((xefs)))))
            xempty_set.write (((xset)) 0)
            (((unsupported)) 0)
              seq
                xtest_repr.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xrepr)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xself).xset)))) (((xself).xrepr)))
                xcheck_repr_against_values.write
                  [xself]
                    memory > xsorted_repr_values
                    memory > xresult
                    memory > xtext
                    seq > @
                      seq
                        xtext.write (((xrepr)) (((xself).xset)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xtext).xstartswith)) ("{"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xtext).xendswith)) ("}"))))
                        xresult.write ((((((unsupported)) ((xtext)) ((((unsupported)) (1) ((1.neg))))).xsplit)) (", "))
                        bogusForceDataize.write ((((xresult).xsort)) 0)
                        xsorted_repr_values.write (((unsupported)) ((((xrepr)) ((xvalue)))) ((xvalue)) (((xself).xvalues)))
                        bogusForceDataize.write ((((xsorted_repr_values).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xsorted_repr_values)))
                xtest_print.write
                  [xself]
                    memory > xfo
                    seq > @
                      (((unsupported)) 0)
                        seq
                          xfo.write (((xopen)) (((xsupport).xTESTFN)) ("w"))
                          bogusForceDataize.write ((((xfo).xwrite)) ((((xstr)) (((xself).xset)))))
                          bogusForceDataize.write ((((xfo).xclose)) 0)
                          xfo.write (((xopen)) (((xsupport).xTESTFN)) ("r"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfo).xread)) 0)) ((((xrepr)) (((xself).xset)))))
                        seq
                          bogusForceDataize.write ((((xfo).xclose)) 0)
                          bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_length.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xset)))) (((xself).xlength)))
                xtest_self_equality.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) (((xself).xset)))
                xtest_equivalent_equality.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) (((xself).xdup)))
                xtest_copy.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xset).xcopy)) 0)) (((xself).xdup)))
                xtest_self_union.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xdup)))
                xtest_empty_union.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or (xempty_set))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xdup)))
                xtest_union_empty.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((xempty_set).or ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xdup)))
                xtest_self_intersection.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xdup)))
                xtest_empty_intersection.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and (xempty_set))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_intersection_empty.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((xempty_set).and ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_self_isdisjoint.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) (((xself).xset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xself).xset).not)))
                xtest_empty_isdisjoint.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) ((xempty_set)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (TRUE))
                xtest_isdisjoint_empty.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xempty_set).xisdisjoint)) (((xself).xset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (TRUE))
                xtest_self_symmetric_difference.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) (((xself).xset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_empty_symmetric_difference.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) ((xempty_set)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xset)))
                xtest_self_difference.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).sub ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_empty_difference.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).sub (xempty_set))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (((xself).xdup)))
                xtest_empty_difference_rev.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((xempty_set).sub ((xself).xset))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_iteration.write
                  [xself]
                    memory > xsetiter
                    seq > @
                      seq
                        (((unsupported)) ((xv)) (((xself).xset)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xv)) (((xself).xvalues)))
                        xsetiter.write (((xiter)) (((xself).xset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsetiter).x__length_hint__)) 0)) ((((xlen)) (((xself).xset)))))
                xtest_pickling.write
                  [xself]
                    memory > xcopy
                    memory > xp
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xp.write ((((xpickle).xdumps)) (((xself).xset)) ((xproto)))
                          xcopy.write ((((xpickle).xloads)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((xcopy)) (("%s != %s".mod (((unsupported)) (((xself).xset)) ((xcopy))))))
                xtest_issue_37219.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((((xset)) 0).xdifference)) (123))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((((xset)) 0).xdifference_update)) (123))
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xcase)) ("empty set"))
                      (((unsupported)) (((xself).xvalues)) ((((unsupported)) 0)))
                      (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                      (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                      (((unsupported)) (((xself).xlength)) (0))
                      (((unsupported)) (((xself).xrepr)) ("set()"))
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcase)) ("unit set (number)"))
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) (3))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xlength)) (1))
                        (((unsupported)) (((xself).xrepr)) ("{3}"))
                xtest_in.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) (3) (((xself).xset)))
                xtest_not_in.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertNotIn)) (2) (((xself).xset)))
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcase)) ("unit set (tuple)"))
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) ((((unsupported)) (0) ("zero"))))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xlength)) (1))
                        (((unsupported)) (((xself).xrepr)) ("{(0, 'zero')}"))
                xtest_in.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) (0) ("zero"))) (((xself).xset)))
                xtest_not_in.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertNotIn)) (9) (((xself).xset)))
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xcase)) ("triple set"))
                      (((unsupported)) (((xself).xvalues)) ((((unsupported)) (0) ("zero") (((xoperator).xadd)))))
                      (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                      (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                      (((unsupported)) (((xself).xlength)) (3))
                      (((unsupported)) (((xself).xrepr)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcase)) ("string set"))
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) ("a") ("b") ("c"))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xlength)) (3))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_repr_against_values)) 0)
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcase)) ("bytes set"))
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) ("a") ("b") ("c"))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xlength)) (3))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_repr_against_values)) 0)
            (((unsupported)) ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_warning_filters)) (((((xsupport).xcheck_warnings)) 0)))
                        bogusForceDataize.write (((((xself).x_warning_filters).x__enter__)) 0)
                        bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore") ((xBytesWarning)))
                        (((unsupported)) (((xself).xcase)) ("string and bytes set"))
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) ("a") ("b") ("a") ("b"))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xdup)) ((((xset)) (((xself).xvalues)))))
                        (((unsupported)) (((xself).xlength)) (4))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_warning_filters).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_repr_against_values)) 0)
            xbaditer.write
              []
                seq > @
                  seq
                    (((unsupported)) ((xTypeError)))
                    (((unsupported)) (TRUE))
            xgooditer.write
              []
                seq > @
                  (((unsupported)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_instanceWithException.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xset)) ((((xbaditer)) 0)))
                xtest_instancesWithoutException.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xset)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write (((xset)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write (((xset)) ((((unsupported)) ("one") (1) ("two") (2) ("three") (3))))
                        bogusForceDataize.write (((xset)) ((((xrange)) (3))))
                        bogusForceDataize.write (((xset)) ("abc"))
                        bogusForceDataize.write (((xset)) ((((xgooditer)) 0)))
                xtest_changingSizeWhileIterating.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xset)) ((((unsupported)) (1) (2) (3))))
                        (((unsupported)) ((xRuntimeError)))
                          (((unsupported)) ((xi)) ((xs)))
                            bogusForceDataize.write ((((xs).xupdate)) ((((unsupported)) (4))))
                          bogusForceDataize.write ((((xself).xfail)) ("no exception when changing size during iteration"))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_constructor.write
                [xself]
                  memory > xinner
                  memory > xelement
                  memory > xouter
                  seq > @
                    seq
                      xinner.write (((xfrozenset)) ((((unsupported)) (1))))
                      xouter.write (((xset)) ((((unsupported)) ((xinner)))))
                      xelement.write ((((xouter).xpop)) 0)
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xelement)))) ((xfrozenset)))
                      bogusForceDataize.write ((((xouter).xadd)) ((xinner)))
                      bogusForceDataize.write ((((xouter).xremove)) ((xinner)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xouter)) ((((xset)) 0)))
                      bogusForceDataize.write ((((xouter).xdiscard)) ((xinner)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_eq.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (1) (4) (3) (6) (5))))))
                xtest_union_subset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or (((xset)) ((((unsupported)) (2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_union_superset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or (((xset)) ((((unsupported)) (2) (4) (6) (8)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                xtest_union_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or (((xset)) ((((unsupported)) (3) (4) (5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (3) (4) (5) (6))))))
                xtest_union_non_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).or (((xset)) ((((unsupported)) (8)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                xtest_intersection_subset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and (((xset)) ((((unsupported)) (2) (4)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4))))))
                xtest_intersection_superset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and (((xset)) ((((unsupported)) (2) (4) (6) (8)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_intersection_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and (((xset)) ((((unsupported)) (3) (4) (5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (4))))))
                xtest_intersection_non_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xself).xset).and (((xset)) ((((unsupported)) (8)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xempty_set)))
                xtest_isdisjoint_subset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) ((((xset)) ((((unsupported)) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (FALSE))
                xtest_isdisjoint_superset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (FALSE))
                xtest_isdisjoint_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (FALSE))
                xtest_isdisjoint_non_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xset).xisdisjoint)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (TRUE))
                xtest_sym_difference_subset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (6))))))
                xtest_sym_difference_superset.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (8))))))
                xtest_sym_difference_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (3) (5) (6))))))
                xtest_sym_difference_non_overlap.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_union_subset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_union_superset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                xtest_union_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (3) (4) (5) (6))))))
                xtest_union_non_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                xtest_union_method_call.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xupdate)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (3) (4) (5) (6))))))
                xtest_intersection_subset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4))))))
                xtest_intersection_superset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_intersection_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (4))))))
                xtest_intersection_non_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((xempty_set)))
                xtest_intersection_method_call.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xintersection_update)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (4))))))
                xtest_sym_difference_subset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (6))))))
                xtest_sym_difference_superset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                xtest_sym_difference_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (3) (5) (6))))))
                xtest_sym_difference_non_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                xtest_sym_difference_method_call.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xsymmetric_difference_update)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (3) (5) (6))))))
                xtest_difference_subset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (6))))))
                xtest_difference_superset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) 0)))))
                xtest_difference_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (6))))))
                xtest_difference_non_overlap.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (4) (6))))))
                xtest_difference_method_call.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xdifference_update)) ((((xset)) ((((unsupported)) (3) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((unsupported)) (2) (6))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xvalues)) ((((unsupported)) ("a") ("b") ("c"))))
                        (((unsupported)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                xtest_add_present.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xadd)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ("abc"))))
                xtest_add_absent.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xadd)) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ("abcd"))))
                xtest_add_until_full.write
                  [xself]
                    memory > xexpected_len
                    memory > xtmp
                    seq > @
                      seq
                        xtmp.write (((xset)) 0)
                        xexpected_len.write 0
                        (((unsupported)) ((xv)) (((xself).xvalues)))
                          seq
                            bogusForceDataize.write ((((xtmp).xadd)) ((xv)))
                            (((unsupported)) ((xexpected_len)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xtmp)))) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtmp)) (((xself).xset)))
                xtest_remove_present.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xremove)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ("ac"))))
                xtest_remove_absent.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xLookupError)))
                        seq
                          bogusForceDataize.write (((((xself).xset).xremove)) ("d"))
                          bogusForceDataize.write ((((xself).xfail)) ("Removing missing element should have raised LookupError"))
                xtest_remove_until_empty.write
                  [xself]
                    memory > xexpected_len
                    seq > @
                      seq
                        xexpected_len.write (((xlen)) (((xself).xset)))
                        (((unsupported)) ((xv)) (((xself).xvalues)))
                          seq
                            bogusForceDataize.write (((((xself).xset).xremove)) ((xv)))
                            (((unsupported)) ((xexpected_len)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xset)))) ((xexpected_len)))
                xtest_discard_present.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xdiscard)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ("ab"))))
                xtest_discard_absent.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xdiscard)) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ("abc"))))
                xtest_clear.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xset)))) (0))
                xtest_pop.write
                  [xself]
                    memory > xpopped
                    seq > @
                      seq
                        xpopped.write (((unsupported)) 0)
                        while.
                          ((xself).xset)
                          [unused]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xpopped)) ((((((xself).xset).xpop)) 0)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xpopped)))) ((((xlen)) (((xself).xvalues)))))
                        (((unsupported)) ((xv)) (((xself).xvalues)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xv)) ((xpopped)))
                xtest_update_empty_tuple.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xupdate)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                xtest_update_unit_tuple_overlap.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xupdate)) ((((unsupported)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) (((xself).xvalues)))))
                xtest_update_unit_tuple_non_overlap.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xset).xupdate)) ((((unsupported)) ("a") ("z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xset)) ((((xset)) ((((xself).xvalues).add (((unsupported)) ("z")))))))
            (((unsupported)) 0)
              seq
                xcase2method.write (((unsupported)) ("<=") ("issubset") (">=") ("issuperset"))
                xreverse.write (((unsupported)) ("==") ("==") ("!=") ("!=") ("<") (">") (">") ("<") ("<=") (">=") (">=") ("<="))
                xtest_issubset.write
                  [xself]
                    memory > xexpected
                    memory > xrcase
                    memory > xx
                    memory > xmethod
                    memory > xresult
                    memory > xy
                    seq > @
                      seq
                        xx.write ((xself).xleft)
                        xy.write ((xself).xright)
                        (((unsupported)) ((xcase)) ((((unsupported)) ("!=") ("==") ("<") ("<=") (">") (">="))))
                          seq
                            xexpected.write (((unsupported)) ((xcase)) (((xself).xcases)))
                            xresult.write (((xeval)) ((("x".add (xcase)).add "y")) ((((xlocals)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                            (((unsupported)) ((xcase)) (((xTestSubsets).xcase2method))).if
                              seq
                                xmethod.write (((xgetattr)) ((xx)) ((((unsupported)) (((xTestSubsets).xcase2method)) ((xcase)))))
                                xresult.write (((xmethod)) ((xy)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                            xrcase.write (((unsupported)) (((xTestSubsets).xreverse)) ((xcase)))
                            xresult.write (((xeval)) ((("y".add (xrcase)).add "x")) ((((xlocals)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                            (((unsupported)) ((xrcase)) (((xTestSubsets).xcase2method))).if
                              seq
                                xmethod.write (((xgetattr)) ((xy)) ((((unsupported)) (((xTestSubsets).xcase2method)) ((xrcase)))))
                                xresult.write (((xmethod)) ((xx)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
            (((unsupported)) ((xTestSubsets)) (((xunittest).xTestCase)))
              seq
                xleft.write (((xset)) 0)
                xright.write (((xset)) 0)
                xname.write "both empty"
                xcases.write (((unsupported)) ("==") ("<=") (">="))
            (((unsupported)) ((xTestSubsets)) (((xunittest).xTestCase)))
              seq
                xleft.write (((xset)) ((((unsupported)) (1) (2))))
                xright.write (((xset)) ((((unsupported)) (1) (2))))
                xname.write "equal pair"
                xcases.write (((unsupported)) ("==") ("<=") (">="))
            (((unsupported)) ((xTestSubsets)) (((xunittest).xTestCase)))
              seq
                xleft.write (((xset)) 0)
                xright.write (((xset)) ((((unsupported)) (1) (2))))
                xname.write "one empty, one non-empty"
                xcases.write (((unsupported)) ("!=") ("<") ("<="))
            (((unsupported)) ((xTestSubsets)) (((xunittest).xTestCase)))
              seq
                xleft.write (((xset)) ((((unsupported)) (1))))
                xright.write (((xset)) ((((unsupported)) (1) (2))))
                xname.write "one a non-empty proper subset of other"
                xcases.write (((unsupported)) ("!=") ("<") ("<="))
            (((unsupported)) ((xTestSubsets)) (((xunittest).xTestCase)))
              seq
                xleft.write (((xset)) ((((unsupported)) (1))))
                xright.write (((xset)) ((((unsupported)) (2))))
                xname.write "neither empty, neither contains"
                xcases.write "!="
            (((unsupported)) 0)
              seq
                xtest_eq_ne.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xother).eq ((xself).xset))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xset).eq ((xself).xother))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xother).neq ((xself).xset))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xset).neq ((xself).xother))) (TRUE))
                xtest_ge_gt_le_lt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).less ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).leq ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).greater ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).geq ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).less ((xself).xset))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).leq ((xself).xset))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).greater ((xself).xset))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).geq ((xself).xset))))))
                xtest_update_operator.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xTypeError)))
                        (((unsupported)) (((xself).xset)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xfail)) ("expected TypeError"))
                xtest_update.write
                  [xself]
                    seq > @
                      ((xself).xotherIsIterable).if
                        bogusForceDataize.write (((((xself).xset).xupdate)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xupdate)) (((xself).xother)))
                xtest_union.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).or ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).or ((xself).xset))))))
                        ((xself).xotherIsIterable).if
                          bogusForceDataize.write (((((xself).xset).xunion)) (((xself).xother)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xunion)) (((xself).xother)))
                xtest_intersection_update_operator.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xTypeError)))
                        (((unsupported)) (((xself).xset)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xfail)) ("expected TypeError"))
                xtest_intersection_update.write
                  [xself]
                    seq > @
                      ((xself).xotherIsIterable).if
                        bogusForceDataize.write (((((xself).xset).xintersection_update)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xintersection_update)) (((xself).xother)))
                xtest_intersection.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).and ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).and ((xself).xset))))))
                        ((xself).xotherIsIterable).if
                          bogusForceDataize.write (((((xself).xset).xintersection)) (((xself).xother)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xintersection)) (((xself).xother)))
                xtest_sym_difference_update_operator.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xTypeError)))
                        (((unsupported)) (((xself).xset)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xfail)) ("expected TypeError"))
                xtest_sym_difference_update.write
                  [xself]
                    seq > @
                      ((xself).xotherIsIterable).if
                        bogusForceDataize.write (((((xself).xset).xsymmetric_difference_update)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xsymmetric_difference_update)) (((xself).xother)))
                xtest_sym_difference.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((unsupported)) (((xself).xset)) (((xself).xother)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((unsupported)) (((xself).xother)) (((xself).xset)))))))
                        ((xself).xotherIsIterable).if
                          bogusForceDataize.write (((((xself).xset).xsymmetric_difference)) (((xself).xother)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xsymmetric_difference)) (((xself).xother)))
                xtest_difference_update_operator.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xTypeError)))
                        (((unsupported)) (((xself).xset)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xfail)) ("expected TypeError"))
                xtest_difference_update.write
                  [xself]
                    seq > @
                      ((xself).xotherIsIterable).if
                        bogusForceDataize.write (((((xself).xset).xdifference_update)) (((xself).xother)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xdifference_update)) (((xself).xother)))
                xtest_difference.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xset).sub ((xself).xother))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) ((((xself).xother).sub ((xself).xset))))))
                        ((xself).xotherIsIterable).if
                          bogusForceDataize.write (((((xself).xset).xdifference)) (((xself).xother)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xset).xdifference)) (((xself).xother)))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) (19))
                      (((unsupported)) (((xself).xotherIsIterable)) (FALSE))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) ((((unsupported)) (1) (2) (3) (4))))
                      (((unsupported)) (((xself).xotherIsIterable)) (TRUE))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) (((xoperator).xadd)))
                      (((unsupported)) (((xself).xotherIsIterable)) (FALSE))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) ((((unsupported)) (2) (4) (6))))
                      (((unsupported)) (((xself).xotherIsIterable)) (TRUE))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) ("abc"))
                      (((unsupported)) (((xself).xotherIsIterable)) (TRUE))
            (((unsupported)) ((xTestOnlySetsInBinaryOps)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  memory > xgen
                  seq > @
                    seq
                      xgen.write
                        []
                          seq > @
                            (((unsupported)) ((xi)) ((((xrange)) (0) (10) (2))))
                              (((unsupported)) ((xi)))
                      (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) (1) (2) (3))))))
                      (((unsupported)) (((xself).xother)) ((((xgen)) 0)))
                      (((unsupported)) (((xself).xotherIsIterable)) (TRUE))
            (((unsupported)) 0)
              seq
                xtest_copy.write
                  [xself]
                    memory > xdup_list
                    memory > xdup
                    memory > xset_list
                    seq > @
                      seq
                        xdup.write (((((xself).xset).xcopy)) 0)
                        xdup_list.write (((unsupported)) ((xsorted)) ((xdup)) ((xrepr)))
                        xset_list.write (((unsupported)) ((xsorted)) (((xself).xset)) ((xrepr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdup_list)))) ((((xlen)) ((xset_list)))))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdup_list)))))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xdup_list)) ((xi)))) ((((unsupported)) ((xset_list)) ((xi)))))))
                xtest_deep_copy.write
                  [xself]
                    memory > xdup_list
                    memory > xdup
                    memory > xset_list
                    seq > @
                      seq
                        xdup.write ((((xcopy).xdeepcopy)) (((xself).xset)))
                        xdup_list.write (((unsupported)) ((xsorted)) ((xdup)) ((xrepr)))
                        xset_list.write (((unsupported)) ((xsorted)) (((xself).xset)) ((xrepr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdup_list)))) ((((xlen)) ((xset_list)))))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdup_list)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdup_list)) ((xi)))) ((((unsupported)) ((xset_list)) ((xi)))))
            (((unsupported)) ((xTestCopying)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    (((unsupported)) (((xself).xset)) ((((xset)) 0)))
            (((unsupported)) ((xTestCopying)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) ("hello"))))))
            (((unsupported)) ((xTestCopying)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) ("zero") (0) ("None: is there a None literal in the EO language?"))))))
            (((unsupported)) ((xTestCopying)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) ((((unsupported)) (1) (2))))))))
            (((unsupported)) ((xTestCopying)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  seq > @
                    (((unsupported)) (((xself).xset)) ((((xset)) ((((unsupported)) ((((unsupported)) ((((unsupported)) (1) (2))) ((((unsupported)) (3) (4))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xa)) ((((xset)) ("abracadabra"))))
                        (((unsupported)) (((xself).xb)) ((((xset)) ("alacazam"))))
                xtest_binopsVsSubsets.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (((xself).xa)) (((xself).xb)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).sub (xb)).less (xa))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xb).sub (xa)).less (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).and (xb)).less (xa))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).and (xb)).less (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).or (xb)).greater (xa))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).or (xb)).greater (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) ((xa)) ((xb))).less ((xa).or (xb)))))
                xtest_commutativity.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (((xself).xa)) (((xself).xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).and (xb))) (((xb).and (xa))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).or (xb))) (((xb).or (xa))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((xb)) ((xa)))))
                        ((xa).neq (xb)).if
                          bogusForceDataize.write ((((xself).xassertNotEqual)) (((xa).sub (xb))) (((xb).sub (xa))))
                xtest_summations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (((xself).xa)) (((xself).xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xa).sub (xb)).or ((xa).and (xb))).or ((xb).sub (xa)))) (((xa).or (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).and (xb)).or (((unsupported)) ((xa)) ((xb))))) (((xa).or (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).or ((xb).sub (xa)))) (((xa).or (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).sub (xb)).or (xb))) (((xa).or (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).sub (xb)).or ((xa).and (xb)))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xb).sub (xa)).or ((xa).and (xb)))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).sub (xb)).or ((xb).sub (xa)))) ((((unsupported)) ((xa)) ((xb)))))
                xtest_exclusion.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)) ((xzero)))) ((((unsupported)) (((xself).xa)) (((xself).xb)) ((((xset)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).sub (xb)).and (xb))) ((xzero)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xb).sub (xa)).and (xa))) ((xzero)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xa).and (xb)).and (((unsupported)) ((xa)) ((xb))))) ((xzero)))
            xR.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xi)) ((xseqn)))
                      (((unsupported)) ((xi)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      (((unsupported)) (((xself).xseqn)) ((xseqn)))
                x__getitem__.write
                  [xself xi]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xseqn)) ((xi)))))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)) (((xself).xseqn)))).if
                          (((unsupported)) ((xStopIteration)))
                        xv.write (((unsupported)) (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)) (((xself).xi)) (1))
                        (((unsupported)) ((xv)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xval)) (((xself).xseqn)))
                        (((unsupported)) ((xval)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)) (((xself).xseqn)))).if
                          (((unsupported)) ((xStopIteration)))
                        xv.write (((unsupported)) (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)) (((xself).xi)) (1))
                        (((unsupported)) ((xv)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)) (3) (0))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xStopIteration)))
            (((unsupported)) 0)
            xL.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xchain)) ((((xmap)) ((((unsupported)) ((xx)))) ((((xR)) ((((xIg)) ((((xG)) ((xseqn)))))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xcons)) ((((unsupported)) ((xset)) ((xfrozenset)))))
                        (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                          seq
                            (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsorted)) ((((xcons)) ((((xg)) ((xs)))))) ((xrepr)))) ((((unsupported)) ((xsorted)) ((((xg)) ((xs)))) ((xrepr)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcons)) ((((xX)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcons)) ((((xN)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xcons)) ((((xE)) ((xs)))))
                xtest_inline_methods.write
                  [xself]
                    memory > xactual
                    memory > xs
                    memory > xexpected
                    seq > @
                      seq
                        xs.write (((xset)) ("november"))
                        (((unsupported)) ((xdata)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))) ("december"))))
                          (((unsupported)) ((xmeth)) ((((unsupported)) (((xs).xunion)) (((xs).xintersection)) (((xs).xdifference)) (((xs).xsymmetric_difference)) (((xs).xisdisjoint)))))
                            seq
                              (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xL)) ((xR)))))
                                seq
                                  xexpected.write (((xmeth)) ((xdata)))
                                  xactual.write (((xmeth)) ((((xg)) ((xdata)))))
                                  (((xisinstance)) ((xexpected)) ((xbool))).if
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsorted)) ((xactual)) ((xrepr)))) ((((unsupported)) ((xsorted)) ((xexpected)) ((xrepr)))))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmeth)) ((((xX)) ((xs)))))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmeth)) ((((xN)) ((xs)))))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xmeth)) ((((xE)) ((xs)))))
                xtest_inplace_methods.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      (((unsupported)) ((xdata)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))) ("december"))))
                        (((unsupported)) ((xmethname)) ((((unsupported)) ("update") ("intersection_update") ("difference_update") ("symmetric_difference_update"))))
                          seq
                            (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                              seq
                                xs.write (((xset)) ("january"))
                                xt.write ((((xs).xcopy)) 0)
                                bogusForceDataize.write (((((xgetattr)) ((xs)) ((xmethname)))) ((((xlist)) ((((xg)) ((xdata)))))))
                                bogusForceDataize.write (((((xgetattr)) ((xt)) ((xmethname)))) ((((xg)) ((xdata)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsorted)) ((xs)) ((xrepr)))) ((((unsupported)) ((xsorted)) ((xt)) ((xrepr)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xgetattr)) ((((xset)) ("january"))) ((xmethname)))) ((((xX)) ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xgetattr)) ((((xset)) ("january"))) ((xmethname)))) ((((xN)) ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((((xgetattr)) ((((xset)) ("january"))) ((xmethname)))) ((((xE)) ((xdata)))))
            (((unsupported)) 0)
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (xbe_bad).if
                          seq
                            bogusForceDataize.write ((((xset2).xclear)) 0)
                            (((unsupported)) ((xZeroDivisionError)))
                        (((unsupported)) ((((unsupported)) ((xself)) ((xother)))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
            (((unsupported)) 0)
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (xbe_bad).if
                          bogusForceDataize.write ((((xdict2).xclear)) 0)
                        (((unsupported)) ((((unsupported)) ((xself)) ((xother)))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_8420_set_merge.write
                  [xself]
                    memory > xbe_bad
                    memory > xdict2
                    memory > xset2
                    memory > xset1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xbe_bad.write FALSE
                        xset1.write (((unsupported)) ((((xbad_eq)) 0)))
                        xset2.write (((unsupported)) ((((xbad_eq)) 0)) ((xi)) ((((xrange)) (75))))
                        xbe_bad.write TRUE
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) (((xset1).xupdate)) ((xset2)))
                        xbe_bad.write FALSE
                        xset1.write (((unsupported)) ((((xbad_dict_clear)) 0)))
                        xdict2.write (((unsupported)) ((((xbad_dict_clear)) 0)) ("None: is there a None literal in the EO language?"))
                        xbe_bad.write TRUE
                        bogusForceDataize.write ((((xset1).xsymmetric_difference_update)) ((xdict2)))
                xtest_iter_and_mutate.write
                  [xself]
                    memory > xs
                    memory > xsi
                    memory > xa
                    seq > @
                      seq
                        xs.write (((xset)) ((((xrange)) (100))))
                        bogusForceDataize.write ((((xs).xclear)) 0)
                        bogusForceDataize.write ((((xs).xupdate)) ((((xrange)) (100))))
                        xsi.write (((xiter)) ((xs)))
                        bogusForceDataize.write ((((xs).xclear)) 0)
                        xa.write (((xlist)) ((((xrange)) (100))))
                        bogusForceDataize.write ((((xs).xupdate)) ((((xrange)) (100))))
                        bogusForceDataize.write (((xlist)) ((xsi)))
                xtest_merge_and_mutate.write
                  [xself]
                    memory > x__hash__
                    memory > xother
                    memory > xs
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xhash)) (0))))
                            x__eq__.write
                              [xself xo]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xother).xclear)) 0)
                                    (((unsupported)) (FALSE))
                        xother.write (((xset)) 0)
                        xother.write (((unsupported)) ((((xX)) 0)) ((xi)) ((((xrange)) (10))))
                        xs.write (((unsupported)) (0))
                        bogusForceDataize.write ((((xs).xupdate)) ((xother)))
            xpowerset.write
              [xU]
                memory > xx
                seq > @
                  seq
                    unsupported
                    xU.write (((xiter)) ((xU)))
                    (((unsupported)) ((xStopIteration)))
                      seq
                        xx.write (((xfrozenset)) ((((unsupported)) ((((xnext)) ((xU)))))))
                        (((unsupported)) ((xS)) ((((xpowerset)) ((xU)))))
                          seq
                            (((unsupported)) ((xS)))
                            (((unsupported)) (((xS).or (xx))))
                      (((unsupported)) ((((xfrozenset)) 0)))
            xcube.write
              [xn]
                memory > xsingletons
                seq > @
                  seq
                    unsupported
                    xsingletons.write (((unsupported)) ((((xfrozenset)) ((((unsupported)) ((xx)))))) ((xx)) ((((xrange)) ((xn)))))
                    (((unsupported)) ((((xdict)) ((((unsupported)) ((((unsupported)) ((xx)) ((((xfrozenset)) ((((unsupported)) ((((unsupported)) ((xx)) ((xs)))) ((xs)) ((xsingletons)))))))) ((xx)) ((((xpowerset)) ((((xrange)) ((xn)))))))))))
            xlinegraph.write
              [xG]
                memory > xnx
                memory > xny
                memory > xL
                seq > @
                  seq
                    (((unsupported)) 0)
                    xL.write (((unsupported)) 0)
                    (((unsupported)) ((xx)) ((xG)))
                      (((unsupported)) ((xy)) ((((unsupported)) ((xG)) ((xx)))))
                        seq
                          xnx.write (((unsupported)) ((((xfrozenset)) ((((unsupported)) ((xx)) ((xz)))))) ((xz)) ((((unsupported)) ((xG)) ((xx)))) (((xz).neq (xy))))
                          xny.write (((unsupported)) ((((xfrozenset)) ((((unsupported)) ((xy)) ((xz)))))) ((xz)) ((((unsupported)) ((xG)) ((xy)))) (((xz).neq (xx))))
                          (((unsupported)) ((((unsupported)) ((xL)) ((((xfrozenset)) ((((unsupported)) ((xx)) ((xy)))))))) ((((xfrozenset)) (((xnx).add (xny))))))
                    (((unsupported)) ((xL)))
            xfaces.write
              [xG]
                memory > xf
                seq > @
                  seq
                    unsupported
                    xf.write (((xset)) 0)
                    (((unsupported)) ((((unsupported)) ((xv1)) ((xedges)))) (((((xG).xitems)) 0)))
                      (((unsupported)) ((xv2)) ((xedges)))
                        (((unsupported)) ((xv3)) ((((unsupported)) ((xG)) ((xv2)))))
                          seq
                            ((xv1).eq (xv3)).if
                              (((unsupported)) 0)
                            (((unsupported)) ((xv1)) ((((unsupported)) ((xG)) ((xv3))))).if
                              bogusForceDataize.write ((((xf).xadd)) ((((xfrozenset)) ((((unsupported)) ((xv1)) ((xv2)) ((xv3)))))))
                              (((unsupported)) ((xv4)) ((((unsupported)) ((xG)) ((xv3)))))
                                seq
                                  ((xv4).eq (xv2)).if
                                    (((unsupported)) 0)
                                  (((unsupported)) ((xv1)) ((((unsupported)) ((xG)) ((xv4))))).if
                                    bogusForceDataize.write ((((xf).xadd)) ((((xfrozenset)) ((((unsupported)) ((xv1)) ((xv2)) ((xv3)) ((xv4)))))))
                                    (((unsupported)) ((xv5)) ((((unsupported)) ((xG)) ((xv4)))))
                                      seq
                                        (((xv5).eq (xv3)).or ((xv5).eq (xv2))).if
                                          (((unsupported)) 0)
                                        (((unsupported)) ((xv1)) ((((unsupported)) ((xG)) ((xv5))))).if
                                          bogusForceDataize.write ((((xf).xadd)) ((((xfrozenset)) ((((unsupported)) ((xv1)) ((xv2)) ((xv3)) ((xv4)) ((xv5)))))))
                    (((unsupported)) ((xf)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_cube.write
                  [xself]
                    memory > xvertices1
                    memory > xvertices2
                    memory > xg
                    memory > xcubefaces
                    seq > @
                      seq
                        xg.write (((xcube)) (3))
                        xvertices1.write (((xset)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xvertices1)))) (8))
                        (((unsupported)) ((xedge)) (((((xg).xvalues)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xedge)))) (3))
                        xvertices2.write (((xset)) ((((unsupported)) ((xv)) ((xedges)) (((((xg).xvalues)) 0)) ((xv)) ((xedges)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xvertices1)) ((xvertices2)))
                        xcubefaces.write (((xfaces)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcubefaces)))) (6))
                        (((unsupported)) ((xface)) ((xcubefaces)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xface)))) (4))
                xtest_cuboctahedron.write
                  [xself]
                    memory > xcubofaces
                    memory > xg
                    memory > xfacesizes
                    memory > xedge
                    memory > xvertices
                    memory > xothervertices
                    memory > xcuboctahedron
                    seq > @
                      seq
                        xg.write (((xcube)) (3))
                        xcuboctahedron.write (((xlinegraph)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcuboctahedron)))) (12))
                        xvertices.write (((xset)) ((xcuboctahedron)))
                        (((unsupported)) ((xedges)) (((((xcuboctahedron).xvalues)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xedges)))) (4))
                        xothervertices.write (((xset)) ((((unsupported)) ((xedge)) ((xedges)) (((((xcuboctahedron).xvalues)) 0)) ((xedge)) ((xedges)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xvertices)) ((xothervertices)))
                        xcubofaces.write (((xfaces)) ((xcuboctahedron)))
                        xfacesizes.write ((((xcollections).xdefaultdict)) ((xint)))
                        (((unsupported)) ((xface)) ((xcubofaces)))
                          (((unsupported)) ((((unsupported)) ((xfacesizes)) ((((xlen)) ((xface)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xfacesizes)) (3))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xfacesizes)) (4))) (6))
                        (((unsupported)) ((xvertex)) ((xcuboctahedron)))
                          seq
                            xedge.write (xvertex)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xedge)))) (2))
                            (((unsupported)) ((xcubevert)) ((xedge)))
                              bogusForceDataize.write ((((xself).xassertIn)) ((xcubevert)) ((xg)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)