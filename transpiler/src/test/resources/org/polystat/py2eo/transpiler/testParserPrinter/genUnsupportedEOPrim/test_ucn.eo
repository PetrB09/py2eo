memory > xImportError
memory > xHTTPException
memory > xValueError
memory > xstr
memory > xcheck_version
memory > xrange
memory > xchar
memory > xKeyError
memory > xcodepoints
memory > xunicodedata
memory > xint
memory > xcode
memory > xcodepoint
memory > xchr
memory > xSyntaxError
memory > xmap
memory > xlen
memory > xcm
memory > xUnicodeError
memory > xeval
memory > xalias
memory > xseqname
memory > xsupport
memory > xbytes
memory > xcp
memory > xargs
memory > xOSError
memory > xord
memory > xzip
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_ucn
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_issue16335
        memory > xUINT_MAX
        memory > xINT_MAX
        memory > xtest_named_sequences_names_in_pua_range
        memory > xtest_hangul_syllables
        memory > xtest_general
        memory > xtest_named_sequences_full
        memory > xPY_SSIZE_T_MAX
        memory > xtest_misc_symbols
        memory > xtest_aliases
        memory > xtest_named_sequences_sample
        memory > xtest_bmp_characters
        memory > xtest_strict_error_handling
        memory > xtest_aliases_names_in_pua_range
        memory > xtest_cjk_unified_ideographs
        memory > xtest_errors
        memory > xcheckletter
        memory > xtest_ascii_letters
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((xINT_MAX)) ((xPY_SSIZE_T_MAX)) ((xUINT_MAX)) (((((unsupported)) (2) (64)).sub 1)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheckletter.write
                  [xself xname xcode]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((xeval)) (("\"N{%s}\"".mod (xname))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres)) ((xcode)))
                        (((unsupported)) ((xres)))
                xtest_general.write
                  [xself]
                    memory > xchars
                    memory > xstring
                    seq > @
                      seq
                        xchars.write (((unsupported)) ("LATIN CAPITAL LETTER T") ("LATIN SMALL LETTER H") ("LATIN SMALL LETTER E") ("SPACE") ("LATIN SMALL LETTER R") ("LATIN CAPITAL LETTER E") ("LATIN SMALL LETTER D") ("SPACE") ("LATIN SMALL LETTER f") ("LATIN CAPITAL LeTtEr o") ("LATIN SMaLl LETTER x") ("SPACE") ("LATIN SMALL LETTER A") ("LATIN SMALL LETTER T") ("LATIN SMALL LETTER E") ("SPACE") ("LATIN SMALL LETTER T") ("LATIN SMALL LETTER H") ("LATIN SMALL LETTER E") ("SpAcE") ("LATIN SMALL LETTER S") ("LATIN SMALL LETTER H") ("LATIN small LETTER e") ("LATIN small LETTER e") ("LATIN SMALL LETTER P") ("FULL STOP"))
                        xstring.write "The rEd fOx ate the sheep."
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((unsupported)) (((((xself).xcheckletter)) ((((unsupported)) ((xargs)))))) ((xargs)) ((((xzip)) ((xchars)) ((xstring)))))))) ((xstring)))
                xtest_ascii_letters.write
                  [xself]
                    memory > xname
                    memory > xcode
                    seq > @
                      (((unsupported)) ((xchar)) (((("".xjoin)) ((((xmap)) ((xchr)) ((((xrange)) ((((xord)) ("a"))) ((((xord)) ("z"))))))))))
                        seq
                          xname.write ("LATIN SMALL LETTER %s".mod ((((xchar).xupper)) 0))
                          xcode.write ((((xunicodedata).xlookup)) ((xname)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xunicodedata).xname)) ((xcode)))) ((xname)))
                xtest_hangul_syllables.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE GA") ("uac00"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE GGWEOSS") ("uafe8"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE DOLS") ("ub3d0"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE RYAN") ("ub7b8"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE MWIK") ("ubba0"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE BBWAEM") ("ubf88"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE SSEOL") ("uc370"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE YI") ("uc758"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE JJYOSS") ("ucb40"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE KYEOLS") ("ucf28"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE PAN") ("ud310"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE HWEOK") ("ud6f8"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HANGUL SYLLABLE HIH") ("ud7a3"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xunicodedata).xname)) ("ud7a4"))
                xtest_cjk_unified_ideographs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-3400") ("u3400"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-4DB5") ("u4db5"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-4E00") ("u4e00"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-9FCB") ("u9fCB"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-20000") ("U00020000"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-2A6D6") ("U0002a6d6"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-2A700") ("U0002A700"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-2B734") ("U0002B734"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-2B740") ("U0002B740"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("CJK UNIFIED IDEOGRAPH-2B81D") ("U0002B81D"))
                xtest_bmp_characters.write
                  [xself]
                    memory > xname
                    memory > xchar
                    seq > @
                      (((unsupported)) ((xcode)) ((((xrange)) (65536))))
                        seq
                          xchar.write (((xchr)) ((xcode)))
                          xname.write ((((xunicodedata).xname)) ((xchar)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)) ((xname)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xunicodedata).xlookup)) ((xname)))) ((xchar)))
                xtest_misc_symbols.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckletter)) ("PILCROW SIGN") ("u00b6"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("REPLACEMENT CHARACTER") ("uFFFD"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK") ("uFF9F"))
                        bogusForceDataize.write ((((xself).xcheckletter)) ("FULLWIDTH LATIN SMALL LETTER A") ("uFF41"))
                xtest_aliases.write
                  [xself]
                    memory > xname
                    memory > xaliases
                    seq > @
                      seq
                        xaliases.write (((unsupported)) ((((unsupported)) ("LATIN CAPITAL LETTER GHA") (418))) ((((unsupported)) ("LATIN SMALL LETTER GHA") (419))) ((((unsupported)) ("KANNADA LETTER LLLA") (3294))) ((((unsupported)) ("LAO LETTER FO FON") (3741))) ((((unsupported)) ("LAO LETTER FO FAY") (3743))) ((((unsupported)) ("LAO LETTER RO") (3747))) ((((unsupported)) ("LAO LETTER LO") (3749))) ((((unsupported)) ("TIBETAN MARK BKA- SHOG GI MGO RGYAN") (4048))) ((((unsupported)) ("YI SYLLABLE ITERATION MARK") (40981))) ((((unsupported)) ("PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRACKET") (65048))) ((((unsupported)) ("BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA VASIS") (118981))))
                        (((unsupported)) ((((unsupported)) ((xalias)) ((xcodepoint)))) ((xaliases)))
                          seq
                            bogusForceDataize.write ((((xself).xcheckletter)) ((xalias)) ((((xchr)) ((xcodepoint)))))
                            xname.write ((((xunicodedata).xname)) ((((xchr)) ((xcodepoint)))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xname)) ((xalias)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xunicodedata).xlookup)) ((xalias)))) (((((xunicodedata).xlookup)) ((xname)))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                              bogusForceDataize.write (((((xunicodedata).xucd_3_2_0).xlookup)) ((xalias)))
                xtest_aliases_names_in_pua_range.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xcp)) ((((xrange)) (983040) (983296))))
                        seq
                          (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                            bogusForceDataize.write ((((xunicodedata).xname)) ((((xchr)) ((xcp)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("no such name"))
                xtest_named_sequences_names_in_pua_range.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xcp)) ((((xrange)) (983296) (987135))))
                        seq
                          (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                            bogusForceDataize.write ((((xunicodedata).xname)) ((((xchr)) ((xcp)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("no such name"))
                xtest_named_sequences_sample.write
                  [xself]
                    memory > xsequences
                    seq > @
                      seq
                        xsequences.write (((unsupported)) ((((unsupported)) ("LATIN SMALL LETTER R WITH TILDE") ("u0072u0303"))) ((((unsupported)) ("TAMIL SYLLABLE SAI") ("u0BB8u0BC8"))) ((((unsupported)) ("TAMIL SYLLABLE MOO") ("u0BAEu0BCB"))) ((((unsupported)) ("TAMIL SYLLABLE NNOO") ("u0BA3u0BCB"))) ((((unsupported)) ("TAMIL CONSONANT KSS") ("u0B95u0BCDu0BB7u0BCD"))))
                        (((unsupported)) ((((unsupported)) ((xseqname)) ((xcodepoints)))) ((xsequences)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xunicodedata).xlookup)) ((xseqname)))) ((xcodepoints)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                              bogusForceDataize.write ((((xself).xcheckletter)) ((xseqname)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                              bogusForceDataize.write (((((xunicodedata).xucd_3_2_0).xlookup)) ((xseqname)))
                xtest_named_sequences_full.write
                  [xself]
                    memory > xurl
                    memory > xline
                    memory > xtestdata
                    memory > xcodepoints
                    seq > @
                      seq
                        xurl.write ("http://www.pythontest.net/unicode/%s/NamedSequences.txt".mod ((xunicodedata).xunidata_version))
                        (((unsupported)) ((((unsupported)) ((xOSError)) ((xHTTPException)))))
                          xtestdata.write (((unsupported)) (((xsupport).xopen_urlresource)) ((xurl)) ("utf-8") ((xcheck_version)))
                          bogusForceDataize.write ((((xself).xskipTest)) (("Could not retrieve ".add (xurl))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtestdata).xclose)))
                        (((unsupported)) ((xline)) ((xtestdata)))
                          seq
                            xline.write ((((xline).xstrip)) 0)
                            (((xline).not).or ((((xline).xstartswith)) ("#"))).if
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xseqname)) ((xcodepoints)))) (((((xline).xsplit)) (";"))))
                            xcodepoints.write ((("".xjoin)) ((((unsupported)) ((((xchr)) ((((xint)) ((xcp)) (16))))) ((xcp)) (((((xcodepoints).xsplit)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xunicodedata).xlookup)) ((xseqname)))) ((xcodepoints)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                              bogusForceDataize.write ((((xself).xcheckletter)) ((xseqname)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                              bogusForceDataize.write (((((xunicodedata).xucd_3_2_0).xlookup)) ((xseqname)))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xunicodedata).xname)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xunicodedata).xname)) ("xx"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xunicodedata).xlookup)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xunicodedata).xlookup)) ("unknown"))
                xtest_strict_error_handling.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xstr)) ((((unsupported)) 0)) ("unicode-escape") ("strict"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xstr)) ((((xbytes)) (((((unsupported)) 0).mod ("x".mul 100000))) ("ascii"))) ("unicode-escape") ("strict"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xstr)) ((((unsupported)) 0)) ("unicode-escape") ("strict"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xstr)) ((((unsupported)) 0)) ("unicode-escape") ("strict"))
                xtest_issue16335.write
                  [xself xsize]
                    memory > xx
                    seq > @
                      (((unsupported)) 0)
                        xx.write (((((unsupported)) 0).add ("x".mul ((xUINT_MAX).add 1))).add "}")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xx)))) (((((xlen)) ((((unsupported)) 0))).add ((xUINT_MAX).add 1))))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xUnicodeError)) ("unknown Unicode character name") (((xx).xdecode)) ("unicode-escape"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)