memory > xscript_helper
memory > xstdout
memory > xrc
memory > ximportlib
memory > xPyCompileTestsBase
memory > xstat
memory > xfile
memory > xIOError
memory > xNotImplementedError
memory > xhead
memory > xtempfile
memory > xopen
memory > xtype
memory > xtail
memory > xSourceDateEpochTestMeta
memory > xstderr
memory > xgetattr
memory > xpy_compile
memory > xenv
memory > xkwargs
memory > xsuper
memory > xsupport
memory > xsys
memory > xargs
memory > xOSError
memory > xsubprocess
memory > xos
memory > xdir
memory > x__file__
memory > xsetattr
memory > xattr
memory > xshutil
memory > xunittest
memory > xfp
memory > xFileExistsError
memory > x__name__
[] > test_py_compile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_cwd
        memory > xtest_do_not_overwrite_nonregular_files
        memory > xtest_optimization_path
        memory > xtest_bad_coding
        memory > xtest_file_not_exists
        memory > xwith_source_date_epoch
        memory > xtest_do_not_overwrite_symlinks
        memory > xtest_invalidation_mode
        memory > xtest_stdin
        memory > xtearDown
        memory > xtest_exceptions_propagate
        memory > xtest_with_files
        memory > xtest_cache_path
        memory > xpycompilecmd
        memory > xtest_quiet
        memory > xtest_double_dot_no_clobber
        memory > xtest_relative_path
        memory > xtest_source_date_epoch
        memory > xpycompilecmd_failure
        memory > xtest_absolute_path
        memory > xsetUp
        memory > xwithout_source_date_epoch
        memory > x__new__
        memory > xtest_bad_syntax
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xwithout_source_date_epoch.write
              [xfxn]
                memory > xwrapper
                seq > @
                  seq
                    unsupported
                    xwrapper.write
                      []
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                              seq
                                bogusForceDataize.write ((((xenv).xunset)) ("SOURCE_DATE_EPOCH"))
                                (((unsupported)) ((((xfxn)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                    (((unsupported)) ((xwrapper)))
            xwith_source_date_epoch.write
              [xfxn]
                memory > xwrapper
                seq > @
                  seq
                    unsupported
                    xwrapper.write
                      []
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                              seq
                                (((unsupported)) ((((unsupported)) ((xenv)) ("SOURCE_DATE_EPOCH"))) ("123456789"))
                                (((unsupported)) ((((xfxn)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                    (((unsupported)) ((xwrapper)))
            (((unsupported)) ((((xtype)) (((xunittest).xTestCase)))))
              x__new__.write
                [xmcls xname xbases xdct xsource_date_epoch]
                  memory > xwrapper
                  memory > xmeth
                  memory > xcls
                  seq > @
                    (((unsupported)) 0)
                      xcls.write ((((((xsuper)) 0).x__new__)) ((xmcls)) ((xname)) ((xbases)) ((xdct)))
                      (((unsupported)) ((xattr)) ((((xdir)) ((xcls)))))
                        ((((xattr).xstartswith)) ("test_")).if
                          seq
                            xmeth.write (((xgetattr)) ((xcls)) ((xattr)))
                            (xsource_date_epoch).if
                              xwrapper.write (((xwith_source_date_epoch)) ((xmeth)))
                              xwrapper.write (((xwithout_source_date_epoch)) ((xmeth)))
                            bogusForceDataize.write (((xsetattr)) ((xcls)) ((xattr)) ((xwrapper)))
                      (((unsupported)) ((xcls)))
            (((unsupported)) 0)
              seq
                xsetUp.write
                  [xself]
                    memory > xdrive
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdirectory)) ((((unsupported)) (((xtempfile).xmkdtemp)) (((((xos).xgetcwd)) 0)))))
                        (((unsupported)) (((xself).xsource_path)) ((((((xos).xpath).xjoin)) (((xself).xdirectory)) ("_test.py"))))
                        (((unsupported)) (((xself).xpyc_path)) ((((xself).xsource_path).add "c")))
                        (((unsupported)) (((xself).xcache_path)) ((((((ximportlib).xutil).xcache_from_source)) (((xself).xsource_path)))))
                        (((unsupported)) (((xself).xcwd_drive)) ((((unsupported)) ((((((xos).xpath).xsplitdrive)) (((((xos).xgetcwd)) 0)))) (0))))
                        xdrive.write (((unsupported)) ((((((xos).xpath).xsplitdrive)) (((xself).xsource_path)))) (0))
                        (xdrive).if
                          bogusForceDataize.write ((((xos).xchdir)) ((xdrive)))
                        (((unsupported)) ((((xopen)) (((xself).xsource_path)) ("w"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) ("x = 123n"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xshutil).xrmtree)) (((xself).xdirectory)))
                        ((xself).xcwd_drive).if
                          bogusForceDataize.write ((((xos).xchdir)) (((xself).xcwd_drive)))
                xtest_absolute_path.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)) (((xself).xpyc_path)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_do_not_overwrite_symlinks.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xNotImplementedError)) ((xOSError)))))
                        bogusForceDataize.write ((((xos).xsymlink)) ((((xself).xpyc_path).add ".actual")) (((xself).xpyc_path)))
                        bogusForceDataize.write ((((xself).xskipTest)) ("need to be able to create a symlink for a file"))
                        seq
                          (((unsupported)) ((((((xos).xpath).xislink)) (((xself).xpyc_path)))))
                          (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))))
                            bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)) (((xself).xpyc_path)))
                xtest_do_not_overwrite_nonregular_files.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileExistsError)))))
                          bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)) (((xos).xdevnull)))
                xtest_cache_path.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_cwd.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xchange_cwd)) (((xself).xdirectory)))))
                          bogusForceDataize.write ((((xpy_compile).xcompile)) ((((((xos).xpath).xbasename)) (((xself).xsource_path)))) ((((((xos).xpath).xbasename)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_relative_path.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xpy_compile).xcompile)) ((((((xos).xpath).xrelpath)) (((xself).xsource_path)))) ((((((xos).xpath).xrelpath)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_exceptions_propagate.write
                  [xself]
                    memory > xmode
                    seq > @
                      (((unsupported)) 0)
                        xmode.write ((((xos).xstat)) (((xself).xdirectory)))
                        bogusForceDataize.write ((((xos).xchmod)) (((xself).xdirectory)) (((xstat).xS_IREAD)))
                        (((unsupported)) 0)
                          (((unsupported)) (((((xself).xassertRaises)) ((xIOError)))))
                            bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)) (((xself).xpyc_path)))
                          bogusForceDataize.write ((((xos).xchmod)) (((xself).xdirectory)) (((xmode).xst_mode)))
                xtest_bad_coding.write
                  [xself]
                    memory > xbad_coding
                    seq > @
                      seq
                        xbad_coding.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("bad_coding2.py"))
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)))
                          bogusForceDataize.write ((((xself).xassertIsNone)) ((((unsupported)) (((xpy_compile).xcompile)) ((xbad_coding)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((((((ximportlib).xutil).xcache_from_source)) ((xbad_coding)))))))
                xtest_source_date_epoch.write
                  [xself]
                    memory > xflags
                    memory > xexpected_flags
                    seq > @
                      seq
                        bogusForceDataize.write ((((xpy_compile).xcompile)) (((xself).xsource_path)) (((xself).xpyc_path)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xpyc_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                        (((unsupported)) ((((xopen)) (((xself).xpyc_path)) ("rb"))) ((xfp)))
                          xflags.write (((((ximportlib).x_bootstrap_external).x_classify_pyc)) (((((xfp).xread)) 0)) ("test") ((((unsupported)) 0)))
                        (((((xos).xenviron).xget)) ("SOURCE_DATE_EPOCH")).if
                          xexpected_flags.write 3
                          xexpected_flags.write 0
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xflags)) ((xexpected_flags)))
                xtest_double_dot_no_clobber.write
                  [xself]
                    memory > xweird_path
                    memory > xcache_path
                    memory > xpyc_path
                    memory > xpenultimate_tail
                    seq > @
                      (((unsupported)) 0)
                        xweird_path.write (((((xos).xpath).xjoin)) (((xself).xdirectory)) ("foo.bar.py"))
                        xcache_path.write (((((ximportlib).xutil).xcache_from_source)) ((xweird_path)))
                        xpyc_path.write ((xweird_path).add "c")
                        (((unsupported)) ((((unsupported)) ((xhead)) ((xtail)))) ((((((xos).xpath).xsplit)) ((xcache_path)))))
                        xpenultimate_tail.write (((((xos).xpath).xbasename)) ((xhead)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xjoin)) ((xpenultimate_tail)) ((xtail)))) ((((((xos).xpath).xjoin)) ("__pycache__") (((("foo.bar.{}.pyc".xformat)) ((((xsys).ximplementation).xcache_tag)))))))
                        (((unsupported)) ((((xopen)) ((xweird_path)) ("w"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) ("x = 123n"))
                        bogusForceDataize.write ((((xpy_compile).xcompile)) ((xweird_path)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xcache_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xpyc_path)))))
                xtest_optimization_path.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) ("opt-2") ((((unsupported)) (((xpy_compile).xcompile)) (((xself).xsource_path)) (2))))
                xtest_invalidation_mode.write
                  [xself]
                    memory > xflags
                    seq > @
                      seq
                        (((unsupported)) (((xpy_compile).xcompile)) (((xself).xsource_path)) ((((xpy_compile).xPycInvalidationMode).xCHECKED_HASH)))
                        (((unsupported)) ((((xopen)) (((xself).xcache_path)) ("rb"))) ((xfp)))
                          xflags.write (((((ximportlib).x_bootstrap_external).x_classify_pyc)) (((((xfp).xread)) 0)) ("test") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xflags)) (3))
                        (((unsupported)) (((xpy_compile).xcompile)) (((xself).xsource_path)) ((((xpy_compile).xPycInvalidationMode).xUNCHECKED_HASH)))
                        (((unsupported)) ((((xopen)) (((xself).xcache_path)) ("rb"))) ((xfp)))
                          xflags.write (((((ximportlib).x_bootstrap_external).x_classify_pyc)) (((((xfp).xread)) 0)) ("test") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xflags)) (1))
                xtest_quiet.write
                  [xself]
                    memory > xbad_coding
                    seq > @
                      seq
                        xbad_coding.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("bad_coding2.py"))
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((((unsupported)) (((xpy_compile).xcompile)) ((xbad_coding)) (FALSE) (2))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((((unsupported)) (((xpy_compile).xcompile)) ((xbad_coding)) (TRUE) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) (""))
                            (((unsupported)) (((((xself).xassertRaises)) (((xpy_compile).xPyCompileError)))))
                              (((unsupported)) (((xpy_compile).xcompile)) ((xbad_coding)) (TRUE) (1))
            (((unsupported)) ((xPyCompileTestsBase)) (((xunittest).xTestCase)) ((xSourceDateEpochTestMeta)) (TRUE))
            (((unsupported)) ((xPyCompileTestsBase)) (((xunittest).xTestCase)) ((xSourceDateEpochTestMeta)) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdirectory)) (((((xtempfile).xmkdtemp)) 0)))
                        (((unsupported)) (((xself).xsource_path)) ((((((xos).xpath).xjoin)) (((xself).xdirectory)) ("_test.py"))))
                        (((unsupported)) (((xself).xcache_path)) ((((((ximportlib).xutil).xcache_from_source)) (((xself).xsource_path)))))
                        (((unsupported)) ((((xopen)) (((xself).xsource_path)) ("w"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) ("x = 123n"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xrmtree)) (((xself).xdirectory)))
                xpycompilecmd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((xargs).and ((((unsupported)) ((xargs)) (0)).eq "-")).and (((unsupported)) ("input") ((xkwargs)))).if
                          (((unsupported)) ((((unsupported)) (((xsubprocess).xrun)) ((((unsupported)) (((xsys).xexecutable)) ("-m") ("py_compile") ("-"))) (((((((unsupported)) ((xkwargs)) ("input")).xencode)) 0)) (TRUE))))
                        (((unsupported)) (((((xscript_helper).xassert_python_ok)) ("-m") ("py_compile") ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                xpycompilecmd_failure.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xscript_helper).xassert_python_failure)) ("-m") ("py_compile") ((((unsupported)) ((xargs)))))))
                xtest_stdin.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((xself).xpycompilecmd)) ("-") (((xself).xsource_path)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xreturncode)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xstdout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_with_files.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xstdout)) ((xstderr)))) (((((xself).xpycompilecmd)) (((xself).xsource_path)) (((xself).xsource_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xcache_path)))))
                xtest_bad_syntax.write
                  [xself]
                    memory > xbad_syntax
                    seq > @
                      seq
                        xbad_syntax.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("badsyntax_3131.py"))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xstdout)) ((xstderr)))) (((((xself).xpycompilecmd_failure)) ((xbad_syntax)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (""))
                        bogusForceDataize.write ((((xself).xassertIn)) ("SyntaxError") ((xstderr)))
                xtest_file_not_exists.write
                  [xself]
                    memory > xshould_not_exists
                    seq > @
                      seq
                        xshould_not_exists.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("should_not_exists.py"))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xstdout)) ((xstderr)))) (((((xself).xpycompilecmd_failure)) (((xself).xsource_path)) ((xshould_not_exists)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (""))
                        bogusForceDataize.write ((((xself).xassertIn)) ("No such file or directory") ((xstderr)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)