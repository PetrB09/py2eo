memory > xerr
memory > xexp_lines
memory > xBufferedRandomTest
memory > xthreading
memory > xarray
memory > xcm
memory > xUnicodeError
memory > xC
memory > xMyBytesIO
memory > xMyTextIO
memory > xMisbehavedRawIO
memory > xPyBufferedReaderTest
memory > xmin
memory > xFakePath
memory > xAttributeError
memory > xfd
memory > xUnicodeDecodeError
memory > xrc
memory > xc
memory > xImportError
memory > xPyMiscIOTest
memory > xIncrementalNewlineDecoderTest
memory > xBadReader
memory > xCTextIOWrapperTest
memory > xchunksize
memory > xexpected
memory > xpickle
memory > xMockNonBlockWriterIO
memory > xlist
memory > xdo_reads
memory > xcount
memory > xnbytes
memory > xRuntimeError
memory > xmode
memory > xPyBufferedRandomTest
memory > xlocals
memory > xCBufferedReaderTest
memory > xfdopen_kwargs
memory > xResourceWarning
memory > xassert_python_ok
memory > xraw_read_sizes
memory > xValueError
memory > xUnseekableReader
memory > xsignal
memory > xnon_existing_close
memory > xabc
memory > xMockFileIO
memory > xrequest
memory > xo
memory > xoverwrite_size
memory > xerrno
memory > xstr
memory > xout
memory > xwarnings
memory > xflush_called
memory > xMiscIOTest
memory > xwriter_non_existing
memory > xbuffer
memory > xeof
memory > xpos
memory > xBufferedWriter
memory > xdeque
memory > xrange
memory > xsize
memory > xMockRawIOWithoutRead
memory > x_testcapi
memory > xSignalsTest
memory > xctypes
memory > xreader_non_existing
memory > xb
memory > xtest
memory > xZeroDivisionError
memory > xgot_line
memory > xtranslate
memory > xdivmod
memory > xnewline
memory > x_
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xMemoryError
memory > xraw
memory > xCommonBufferedTests
memory > xcycle
memory > xf2
memory > xIOTest
memory > xAPIMismatchTest
memory > xrandom
memory > xbufsize
memory > xMockRawIO
memory > xoutput
memory > xCBufferedWriterTest
memory > xopen
memory > xkw
memory > xBufferedRWPairTest
memory > xPyTextIOWrapperTest
memory > xf
memory > xw
memory > xbufio
memory > xrepr
memory > xint
memory > xabilities
memory > xset
memory > xPyIOTest
memory > xPyIncrementalNewlineDecoderTest
memory > xhasattr
memory > xOverflowError
memory > xException
memory > xCloseFailureIO
memory > xCBufferedRandomTest
memory > xr
memory > xtime
memory > xcodecs
memory > xsum
memory > xx
memory > xMyFileIO
memory > xi
memory > xF
memory > xCBufferedRWPairTest
memory > xMyBufferedIO
memory > xR
memory > xBufferedReaderTest
memory > xarg
memory > xSizeofTest
memory > xsuper
memory > xMyIO
memory > xsupport
memory > xsys
memory > xPySignalsTest
memory > xbuffer_size
memory > xPyBufferedRWPairTest
memory > xissubclass
memory > xglobals
memory > xrun_python_until_end
memory > xbytes
memory > xReader
memory > xBaseException
memory > xsorted
memory > xDeprecationWarning
memory > xlocale
memory > xTextIOWrapperTest
memory > xf1
memory > xbuf_read_sizes
memory > xargs
memory > xOSError
memory > xobj
memory > xLookupError
memory > xos
memory > xStream
memory > xBufferedWriterTest
memory > xres
memory > xFloatingPointError
memory > xencoding
memory > xMockIO
memory > xweakref
memory > xgetattr
memory > xprotocol
memory > xid
memory > xcharset
memory > xCSignalsTest
memory > xSlowFlushRawIO
memory > xinput
memory > xiter
memory > xUserList
memory > xe
memory > xCMiscIOTest
memory > x__file__
memory > xord
memory > xsetattr
memory > xUnReadable
memory > xname
memory > xzip
memory > xunittest
memory > xexp_line
memory > xUnseekableWriter
memory > xexc
memory > xPyBufferedWriterTest
memory > xenc
memory > xnext
memory > xSelectableIsAtty
memory > xresult
memory > xBadDecoder
memory > xn
memory > xMockUnseekableIO
memory > xStatefulIncrementalDecoderTest
memory > xmemoryview
memory > xNotReadable
memory > xobject
memory > xsysconfig
memory > xMemviewBytesIO
memory > xkwargs
memory > xN
memory > xline
memory > xStatefulIncrementalDecoder
memory > xavail
memory > xlen
memory > xdict
memory > xj
memory > xisinstance
memory > xCIOTest
memory > xNameError
memory > xCIncrementalNewlineDecoderTest
memory > xNotWriteable
memory > xfp
memory > xEmptyStruct
memory > xFileExistsError
memory > xTypeError
memory > xmethod
memory > x__name__
memory > xkey
memory > xnon_existing_flush
[] > test_io
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_close_flushes
        memory > xtest_abcs
        memory > xtest_optional_abilities
        memory > xtest_reconfigure_write
        memory > xtest_interrupted_write_text
        memory > xtest_append_mode_tell
        memory > xtest_flush_and_readinto
        memory > xtest_fileno
        memory > xtest_writes_and_readintos
        memory > xtest_max_buffer_size_removal
        memory > xtest_daemon_threads_shutdown_stdout_deadlock
        memory > x_check_base_destructor
        memory > xfileno
        memory > xtest_peek
        memory > xtest_nonnormalized_close_error_on_close
        memory > xtest_line_buffering
        memory > xtest_close_assert
        memory > xtest_reentrant_write_text
        memory > xtest_abc_inheritance
        memory > xtest_interrupted_write_unbuffered
        memory > xmulti_line_test
        memory > xtp
        memory > xtest_read_nonbytes
        memory > xreadinto
        memory > x__repr__
        memory > xtest_create_fail
        memory > xtest_writelines
        memory > xtest_bufio_write_through
        memory > xcheck_newline_decoding
        memory > xbyteslike
        memory > xtest_with_open
        memory > xtest_buffered_readinto_mixin
        memory > xtest_read_one_by_one
        memory > x_default_chunk_size
        memory > xtest_IOBase_finalize
        memory > xUnsupportedOperation
        memory > xcheck_flush_error_on_close
        memory > xtest_RawIOBase_readall
        memory > xtest_newlines
        memory > xshutdown_error
        memory > xtest_nonbuffered_textio
        memory > xtest_unreadable
        memory > xread_mode
        memory > xtest_BufferedIOBase_readinto
        memory > xtest_invalid_newline
        memory > xtest_uninitialized
        memory > xtest_open_pipe_with_append
        memory > xtest_multi_close
        memory > xreadable
        memory > x_to_memoryview
        memory > xtest_RawIOBase_pyio_in_io_match
        memory > xpyio
        memory > xcheck_flush_and_read
        memory > xtest_no_closefd_with_filename
        memory > xtest_override_destructor
        memory > xtest_reentrant_write_buffered
        memory > xtest_next_nonsizeable
        memory > xtest_constructor
        memory > xtest_issue1395_3
        memory > xtest_seek_and_tell
        memory > xtest_writes_and_read1s
        memory > xread_ops
        memory > xtest_reconfigure_line_buffering
        memory > xtruncate
        memory > xtest_interrupted_read_retry_buffered
        memory > xtest_nonblock_pipe_write_smallbuf
        memory > xcheck_writes
        memory > xtest_constructor_with_not_writeable
        memory > xtest_bad_opener_negative_1
        memory > x_check_warn_on_dealloc_fd
        memory > xtest_issue1395_4
        memory > xio
        memory > xtest_issue22849
        memory > xtest_seeking
        memory > xtest_read_all
        memory > xtest_interleaved_read_write
        memory > xtest_issue2282
        memory > xtest_rawio_write_through
        memory > xtest_writes_and_seeks
        memory > xtest_constructor_max_buffer_size_removal
        memory > xtest_abc_inheritance_official
        memory > xtest_issue1395_2
        memory > xtest_read_and_write
        memory > xtest_multibyte_seek_and_tell
        memory > xtest_io_after_close
        memory > xtest_threads
        memory > xtest_flush_and_write
        memory > xtest_fspath_support
        memory > xtest_warn_on_dealloc
        memory > xclose
        memory > x_config_args
        memory > xtest_warn_on_dealloc_fd
        memory > xtest_readline_nonsizeable
        memory > xtest_write_overflow
        memory > xtest_reader_writer_close_error_on_close
        memory > xtest_BufferedIOBase_destructor
        memory > xtest_repr
        memory > xtest_del__CHUNK_SIZE_SystemError
        memory > xtest_rwpair_cleared_before_textio
        memory > xtest_flush_and_read
        memory > xtest_create_writes
        memory > xcheck_newline_decoding_utf8
        memory > xtest_error_through_destructor
        memory > xtest_write
        memory > xtest_blockingioerror
        memory > xtest_isatty
        memory > xtest_reconfigure_encoding_read
        memory > xtest_newline_bytes
        memory > xtest_interrupted_write_retry_buffered
        memory > xtest_open_handles_NUL_chars
        memory > xtest_nonblock_pipe_write_bigbuf
        memory > xtest_read_on_closed
        memory > xcheck_interrupted_read_retry
        memory > xtest_seekable
        memory > xtest_rawio
        memory > xtest_readinto1
        memory > xtest_pickling
        memory > xtest_reconfigure_write_fromascii
        memory > xtest_opener
        memory > xtest_default_encoding
        memory > xsetUp
        memory > xtest_cases
        memory > xtest_readinto_buffer_overflow
        memory > xtest_writelines_userlist
        memory > xtest_daemon_threads_shutdown_stderr_deadlock
        memory > xtest_read_non_blocking
        memory > xtest_interrupted_write_buffered
        memory > xtest_close_and_closed
        memory > xIOBASE_EMITS_UNRAISABLE
        memory > xtest_no_extraneous_read
        memory > xtest_write_error_on_close
        memory > xtest_flush_and_peek
        memory > xtest_newlines_input
        memory > xtest_append_bom
        memory > xblock_on
        memory > xcheck_reentrant_write
        memory > xseek
        memory > xtest_writelines_error
        memory > xtest_weakref_clearing
        memory > xtest_reconfigure_write_through
        memory > xtest_invalid_operations
        memory > xtest_IOBase_destructor
        memory > xtest_reader_close_error_on_close
        memory > xMEMORY_SANITIZER
        memory > xdecode
        memory > x_cflags
        memory > xtest_raw_bytes_io
        memory > xtest_RawIOBase_io_in_pyio_match
        memory > xwritable
        memory > xtest_raw_file_io
        memory > xtest_buffered_file_io
        memory > xtest_basic_io
        memory > xtest_newlines_output
        memory > xtest_writes_and_peek
        memory > xalarm_interrupt
        memory > xtest_write_rewind_write
        memory > xwrite_ops
        memory > xtest_TextIOBase_destructor
        memory > xlookupTestDecoder
        memory > xtest_large_file_ops
        memory > xtest_writes_and_reads
        memory > xclosed
        memory > xtest_translate
        memory > xtest_array_writes
        memory > xtest_issue1395_1
        memory > xtest_write_and_rewind
        memory > xtest_initialization
        memory > xtest_read1_arbitrary
        memory > xtest_args_error
        memory > xtest_readline
        memory > xpop_written
        memory > xtest_slow_close_from_thread
        memory > xtest_destructor
        memory > xtest_recursive_repr
        memory > xload_tests
        memory > x_check_abc_inheritance
        memory > xtest_write_non_blocking
        memory > xtest_seek_with_encoder_state
        memory > xseekable
        memory > x_check_warn_on_dealloc
        memory > xflush
        memory > xtest___all__
        memory > xprocess_word
        memory > xtest_telling
        memory > xtest_unseekable
        memory > xtest_writes
        memory > xtest_read_past_eof
        memory > xtest_RawIOBase_destructor
        memory > xtest_buffer_freeing
        memory > xtest_read_closed
        memory > xtest_garbage_collection
        memory > xtest_detach_flush
        memory > xtest_misbehaved_io
        memory > xtest_newline_decoder
        memory > xtest_readinto1_array
        memory > xtest_fileio_closefd
        memory > xtest_non_text_encoding_codecs_are_rejected
        memory > xtest_types_have_dict
        memory > xtest_writes_and_truncates
        memory > xtest_encoding
        memory > xLARGE
        memory > xtest_read_byteslike
        memory > xtest_write_after_readahead
        memory > xtest_create_at_shutdown_without_encoding
        memory > xtest_interleaved_readline_write
        memory > xtest_writer_close_error_on_close
        memory > xlarge_file_ops
        memory > xtest_context_manager
        memory > xtest_readlines
        memory > xcheck_interrupted_write
        memory > xtest_read_by_chunk
        memory > xtest_truncate_after_write
        memory > xcheck_interrupted_write_retry
        memory > xreset
        memory > x__init__
        memory > xtest_readonly_attributes
        memory > xtest_buffering
        memory > xtest_sizeof
        memory > xtest_flush
        memory > xtest_detach
        memory > xgetstate
        memory > xtest_misbehaved_io_read
        memory > xtell
        memory > xtest_read1
        memory > xwrite_mode
        memory > xtest_RawIOBase_read
        memory > xtest_reconfigure_defaults
        memory > xtest_device_encoding
        memory > xtest_readinto_array
        memory > xtest_readable
        memory > xtest_open_allargs
        memory > xread
        memory > xtest_truncate_after_read_or_write
        memory > xtest_read
        memory > xtest_reconfigure_newline
        memory > xtest_seek_bom
        memory > xtest_interrupted_read_retry_text
        memory > xtest_encoding_errors_reading
        memory > xtest_flush_error_on_close
        memory > xtest_decoder
        memory > x_check_create_at_shutdown
        memory > xtest_encoding_errors_writing
        memory > xtest_closefd
        memory > xtest_bad_opener_other_negative
        memory > xwrite
        memory > xtest_create_at_shutdown_with_encoding
        memory > xtest_reconfigure_write_non_seekable
        memory > xtest_truncate
        memory > xtest_issue1395_5
        memory > xsetstate
        memory > xtest_interrupted_write_retry_text
        memory > xread1
        memory > xtest_internal_buffer_size
        memory > xtest_writes_and_flushes
        memory > xtest_writeable
        memory > xtest_encoded_writes
        memory > xtest_invalid_args
        memory > xtest_seek_append_bom
        memory > xtest_attributes
        memory > xtest_illegal_encoder
        memory > xtest_constructor_with_not_readable
        memory > xtearDown
        memory > xtest_closefd_attr
        memory > xtest_illegal_decoder
        memory > xtest_issue25862
        memory > x_test_nonblock_pipe_write
        memory > xtest_threads_write
        memory > xcheck_daemon_threads_shutdown_deadlock
        memory > xtest_errors_property
        memory > xtest_unbounded_file
        memory > xtest_seeking_too
        memory > xcodecEnabled
        memory > xtest_close_error_on_close
        memory > xBlockingIOError
        memory > xtest_readinto
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xbyteslike.write
                []
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) (((((xarray).xarray)) ("b") ((((xbytes)) ((((unsupported)) ((xpos)))) ((((unsupported)) ((xkw)))))))))
              seq
                xbyteslike.write
                  []
                    memory > xobj
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xdata.write (((xbytes)) ((((unsupported)) ((xpos)))) ((((unsupported)) ((xkw)))))
                        xobj.write (((xEmptyStruct)) 0)
                        bogusForceDataize.write ((((xctypes).xresize)) ((xobj)) ((((xlen)) ((xdata)))))
                        (((unsupported)) ((((unsupported)) (((((((xmemoryview)) ((xobj))).xcast)) ("B"))) ((((unsupported)) 0)))) ((xdata)))
                        (((unsupported)) ((xobj)))
                (((unsupported)) (((xctypes).xStructure)))
            x_cflags.write (((((xsysconfig).xget_config_var)) ("CFLAGS")).or "")
            x_config_args.write (((((xsysconfig).xget_config_var)) ("CONFIG_ARGS")).or "")
            xMEMORY_SANITIZER.write ((((unsupported)) ("-fsanitize=memory") ((x_cflags))).or (((unsupported)) ("--with-memory-sanitizer") ((x_config_args))))
            xIOBASE_EMITS_UNRAISABLE.write ((((xhasattr)) ((xsys)) ("gettotalrefcount")).or (((xsys).xflags).xdev_mode))
            x_default_chunk_size.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xopen)) ((x__file__)) ("r") ("latin-1"))) ((xf)))
                      (((unsupported)) (((xf).x_CHUNK_SIZE)))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xread_stack]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_read_stack)) ((((xlist)) ((xread_stack)))))
                        (((unsupported)) (((xself).x_write_stack)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).x_reads)) (0))
                        (((unsupported)) (((xself).x_extraneous_reads)) (0))
                xwrite.write
                  [xself xb]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_write_stack).xappend)) ((((xbytes)) ((xb)))))
                        (((unsupported)) ((((xlen)) ((xb)))))
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xfileno.write
                  [xself]
                    seq > @
                      (((unsupported)) (42))
                xreadable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xseekable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xseek.write
                  [xself xpos xwhence]
                    seq > @
                      (((unsupported)) (0))
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
                xreadinto.write
                  [xself xbuf]
                    memory > xn
                    memory > xdata
                    memory > xmax_len
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_reads)) (1))
                        xmax_len.write (((xlen)) ((xbuf)))
                        (((unsupported)) ((xIndexError)))
                          xdata.write (((unsupported)) (((xself).x_read_stack)) (0))
                          seq
                            (((unsupported)) (((xself).x_extraneous_reads)) (1))
                            (((unsupported)) (0))
                        (((unsupported)) ((xdata)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).x_read_stack)) (0))))))
                            (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xn.write (((xlen)) ((xdata)))
                        ((((xlen)) ((xdata))).leq (xmax_len)).if
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).x_read_stack)) (0))))))
                            (((unsupported)) ((((unsupported)) ((xbuf)) ((((unsupported)) ((xn)))))) ((xdata)))
                            (((unsupported)) ((xn)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xbuf)) ((((unsupported)) 0)))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xmax_len)))))))
                            (((unsupported)) ((((unsupported)) (((xself).x_read_stack)) (0))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xmax_len)))))))
                            (((unsupported)) ((xmax_len)))
                xtruncate.write
                  [xself xpos]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xpos)))
            (((unsupported)) ((xMockRawIOWithoutRead)) (((xio).xRawIOBase)))
            (((unsupported)) ((xMockRawIOWithoutRead)) (((xpyio).xRawIOBase)))
            (((unsupported)) ((xMockRawIOWithoutRead)))
              xread.write
                [xself xn]
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) (((xself).x_reads)) (1))
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xself).x_read_stack).xpop)) (0))))
                        seq
                          (((unsupported)) (((xself).x_extraneous_reads)) (1))
                          (((unsupported)) (""))
            (((unsupported)) ((xMockRawIO)) (((xio).xRawIOBase)))
            (((unsupported)) ((xMockRawIO)) (((xpyio).xRawIOBase)))
            (((unsupported)) ((xMockRawIO)))
              seq
                xwrite.write
                  [xself xb]
                    seq > @
                      (((unsupported)) ((((((((xsuper)) 0).xwrite)) ((xb))).mul 2)))
                xread.write
                  [xself xn]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((((xsuper)) 0).xread)) ((xn))).mul 2)))
                xseek.write
                  [xself xpos xwhence]
                    seq > @
                      (((unsupported)) ((123.neg)))
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)) ((456.neg)))
                xreadinto.write
                  [xself xbuf]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xreadinto)) ((xbuf)))
                        (((unsupported)) (((((xlen)) ((xbuf))).mul 5)))
            (((unsupported)) ((xMisbehavedRawIO)) (((xio).xRawIOBase)))
            (((unsupported)) ((xMisbehavedRawIO)) (((xpyio).xRawIOBase)))
            (((unsupported)) ((xMockRawIO)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                        (((unsupported)) (((xself).xin_flush)) (((((xthreading).xEvent)) 0)))
                xflush.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xin_flush).xset)) 0)
                        bogusForceDataize.write ((((xtime).xsleep)) (0.25))
            (((unsupported)) ((xSlowFlushRawIO)) (((xio).xRawIOBase)))
            (((unsupported)) ((xSlowFlushRawIO)) (((xpyio).xRawIOBase)))
            (((unsupported)) ((xMockRawIO)))
              seq
                xclosed.write 0
                xclose.write
                  [xself]
                    seq > @
                      (((xself).xclosed).not).if
                        seq
                          (((unsupported)) (((xself).xclosed)) (1))
                          (((unsupported)) ((xOSError)))
            (((unsupported)) ((xCloseFailureIO)) (((xio).xRawIOBase)))
            (((unsupported)) ((xCloseFailureIO)) (((xpyio).xRawIOBase)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xdata]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xread_history)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((xdata)))
                xread.write
                  [xself xn]
                    memory > xres
                    seq > @
                      (((unsupported)) 0)
                        xres.write ((((((xsuper)) 0).xread)) ((xn)))
                        bogusForceDataize.write (((((xself).xread_history).xappend)) (((((unsupported)) ((xres)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xlen)) ((xres))))))
                        (((unsupported)) ((xres)))
                xreadinto.write
                  [xself xb]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((((xsuper)) 0).xreadinto)) ((xb)))
                        bogusForceDataize.write (((((xself).xread_history).xappend)) ((xres)))
                        (((unsupported)) ((xres)))
            (((unsupported)) ((xMockFileIO)) (((xio).xBytesIO)))
            (((unsupported)) ((xMockFileIO)) (((xpyio).xBytesIO)))
            (((unsupported)) 0)
              seq
                xseekable.write
                  [xself]
                    seq > @
                      (((unsupported)) (FALSE))
                xseek.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xUnsupportedOperation)) ("not seekable"))))
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xUnsupportedOperation)) ("not seekable"))))
                xtruncate.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xUnsupportedOperation)) ("not seekable"))))
            (((unsupported)) ((xMockUnseekableIO)) (((xio).xBytesIO)))
              xUnsupportedOperation.write ((xio).xUnsupportedOperation)
            (((unsupported)) ((xMockUnseekableIO)) (((xpyio).xBytesIO)))
              xUnsupportedOperation.write ((xpyio).xUnsupportedOperation)
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_write_stack)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).x_blocker_char)) ("None: is there a None literal in the EO language?"))
                xpop_written.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((("".xjoin)) (((xself).x_write_stack)))
                        (((unsupported)) ((((unsupported)) (((xself).x_write_stack)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        (((unsupported)) ((xs)))
                xblock_on.write
                  [xself xchar]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).x_blocker_char)) ((xchar)))
                xreadable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xseekable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xseek.write
                  [xself xpos xwhence]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (0))
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xwrite.write
                  [xself xb]
                    memory > xn
                    seq > @
                      seq
                        xb.write (((xbytes)) ((xb)))
                        xn.write (1.neg)
                        ((xself).x_blocker_char).if
                          (((unsupported)) ((xValueError)))
                            xn.write ((((xb).xindex)) (((xself).x_blocker_char)))
                            ((xn).greater 0).if
                              seq
                                bogusForceDataize.write (((((xself).x_write_stack).xappend)) ((((unsupported)) ((xb)) ((((unsupported)) ((xn)))))))
                                (((unsupported)) ((xn)))
                              seq
                                (((unsupported)) (((xself).x_blocker_char)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).x_write_stack).xappend)) ((xb)))
                        (((unsupported)) ((((xlen)) ((xb)))))
            (((unsupported)) ((xMockNonBlockWriterIO)) (((xio).xRawIOBase)))
              xBlockingIOError.write ((xio).xBlockingIOError)
            (((unsupported)) ((xMockNonBlockWriterIO)) (((xpyio).xRawIOBase)))
              xBlockingIOError.write ((xpyio).xBlockingIOError)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xwrite_ops.write
                  [xself xf]
                    memory > xbuffer
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("blah."))) (5))
                        bogusForceDataize.write ((((xf).xtruncate)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (5))
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("blah."))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("Hello."))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((1.neg)) (1))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (5))
                        xbuffer.write (((xbytearray)) (" worldnnn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ((xbuffer)))) (9))
                        (((unsupported)) ((((unsupported)) ((xbuffer)) ((((unsupported)) 0)))) (("*".mul 9)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("h"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((1.neg)) (2))) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtruncate)) (12))) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (13))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xf).xseek)) (0.0))
                xread_ops.write
                  [xself xf xbuffered]
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xdata.write ((((xf).xread)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("hello"))
                        xdata.write (((xbyteslike)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadinto)) ((xdata)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbytes)) ((xdata)))) (" worl"))
                        xdata.write (((xbytearray)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadinto)) ((xdata)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdata)) ((((unsupported)) (2))))) ("dn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (20))) ("hello worldn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadinto)) ((((xbyteslike)) ("x"))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((6.neg)) (2))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (5))) ("world"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadinto)) ((((xbyteslike)) 0)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((6.neg)) (1))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (5))) (" worl"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xf).xseek)) (0.0))
                        (xbuffered).if
                          seq
                            bogusForceDataize.write ((((xf).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("hello worldn"))
                            bogusForceDataize.write ((((xf).xseek)) (6))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("worldn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                            bogusForceDataize.write ((((xf).xseek)) (0))
                            xdata.write (((xbyteslike)) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadinto1)) ((xdata)))) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xbytes)) ((xdata)))) ("hello"))
                xLARGE.write (((unsupported)) (2) (31))
                xlarge_file_ops.write
                  [xself xf]
                    seq > @
                      seq
                        (((unsupported)) (((((xf).xreadable)) 0)))
                        (((unsupported)) (((((xf).xwritable)) 0)))
                        (((unsupported)) ((((unsupported)) ((xOverflowError)) ((xValueError)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (((xself).xLARGE)))) (((xself).xLARGE)))
                          bogusForceDataize.write ((((xself).xskipTest)) ("no largefile support"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (((xself).xLARGE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("xxx"))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((((xself).xLARGE).add 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((1.neg)) (1))) ((((xself).xLARGE).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtruncate)) 0)) ((((xself).xLARGE).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((((xself).xLARGE).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0) (2))) ((((xself).xLARGE).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtruncate)) ((((xself).xLARGE).add 1)))) ((((xself).xLARGE).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((((xself).xLARGE).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0) (2))) ((((xself).xLARGE).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((1.neg)) (2))) (((xself).xLARGE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (2))) ("x"))
                xtest_invalid_operations.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        xexc.write ((xself).xUnsupportedOperation)
                        (((unsupported)) ((xmode)) ((((unsupported)) ("w") ("wb"))))
                          (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ((xmode)))) ((xfp)))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xread)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xreadline)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("wb") (0))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xread)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xreadline)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("rb") (0))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwrite)) ("blah"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwritelines)) ((((unsupported)) ("blahn"))))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwrite)) ("blah"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwritelines)) ((((unsupported)) ("blahn"))))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("r"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwrite)) ("blah"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xwritelines)) ((((unsupported)) ("blahn"))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xseek)) (1) (((xself).xSEEK_CUR)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xfp).xseek)) ((1.neg)) (((xself).xSEEK_END)))
                xtest_optional_abilities.write
                  [xself]
                    memory > xdata
                    memory > xreadable
                    memory > xtext_reader
                    memory > xtext_writer
                    memory > xpipe_writer
                    memory > xwritable
                    memory > xseekable
                    memory > xbuffered_reader
                    memory > xbuffered_writer
                    memory > xbuffered_random
                    memory > xtests
                    memory > xpipe_reader
                    memory > xbuffered_rw_pair
                    seq > @
                      seq
                        xpipe_reader.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                                bogusForceDataize.write ((((xos).xclose)) ((xw)))
                                (((unsupported)) (((((xself).xFileIO)) ((xr)) ("r"))))
                        xpipe_writer.write
                          []
                            memory > xthread
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                                bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr)))
                                xthread.write (((unsupported)) (((xthreading).xThread)) (((xos).xread)) ((((unsupported)) ((xr)) (100))))
                                bogusForceDataize.write ((((xthread).xstart)) 0)
                                bogusForceDataize.write ((((xself).xaddCleanup)) (((xthread).xjoin)))
                                (((unsupported)) (((((xself).xFileIO)) ((xw)) ("w"))))
                        xbuffered_reader.write
                          []
                            seq > @
                              (((unsupported)) (((((xself).xBufferedReader)) (((((xself).xMockUnseekableIO)) 0)))))
                        xbuffered_writer.write
                          []
                            seq > @
                              (((unsupported)) (((((xself).xBufferedWriter)) (((((xself).xMockUnseekableIO)) 0)))))
                        xbuffered_random.write
                          []
                            seq > @
                              (((unsupported)) (((((xself).xBufferedRandom)) (((((xself).xBytesIO)) 0)))))
                        xbuffered_rw_pair.write
                          []
                            seq > @
                              (((unsupported)) (((((xself).xBufferedRWPair)) (((((xself).xMockUnseekableIO)) 0)) (((((xself).xMockUnseekableIO)) 0)))))
                        xtext_reader.write
                          []
                            memory > xwritable
                            memory > xwrite
                            seq > @
                              seq
                                (((unsupported)) (((xself).xMockUnseekableIO)))
                                  seq
                                    xwritable.write (((xself).xBufferedIOBase).xwritable)
                                    xwrite.write (((xself).xBufferedIOBase).xwrite)
                                (((unsupported)) (((((xself).xTextIOWrapper)) ((((xUnseekableReader)) 0)) ("ascii"))))
                        xtext_writer.write
                          []
                            memory > xreadable
                            memory > xread
                            seq > @
                              seq
                                (((unsupported)) (((xself).xMockUnseekableIO)))
                                  seq
                                    xreadable.write (((xself).xBufferedIOBase).xreadable)
                                    xread.write (((xself).xBufferedIOBase).xread)
                                (((unsupported)) (((((xself).xTextIOWrapper)) ((((xUnseekableWriter)) 0)) ("ascii"))))
                        xtests.write (((unsupported)) ((((unsupported)) ((xpipe_reader)) ("fr"))) ((((unsupported)) ((xpipe_writer)) ("fw"))) ((((unsupported)) ((xbuffered_reader)) ("r"))) ((((unsupported)) ((xbuffered_writer)) ("w"))) ((((unsupported)) ((xbuffered_random)) ("rws"))) ((((unsupported)) ((xbuffered_rw_pair)) ("rw"))) ((((unsupported)) ((xtext_reader)) ("r"))) ((((unsupported)) ((xtext_writer)) ("w"))) ((((unsupported)) (((xself).xBytesIO)) ("rws"))) ((((unsupported)) (((xself).xStringIO)) ("rws"))))
                        (((unsupported)) ((((unsupported)) ((xtest)) ((xabilities)))) ((xtests)))
                          (((unsupported)) (((((xself).xsubTest)) ((xtest)))) ((((xtest)) 0)) ((xobj)))
                            seq
                              xreadable.write (((unsupported)) ("r") ((xabilities)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xobj).xreadable)) 0)) ((xreadable)))
                              xwritable.write (((unsupported)) ("w") ((xabilities)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xobj).xwritable)) 0)) ((xwritable)))
                              (((xisinstance)) ((xobj)) (((xself).xTextIOBase))).if
                                xdata.write "3"
                                (((xisinstance)) ((xobj)) ((((unsupported)) (((xself).xBufferedIOBase)) (((xself).xRawIOBase))))).if
                                  xdata.write "3"
                                  bogusForceDataize.write ((((xself).xfail)) ("Unknown base class"))
                              (((unsupported)) ("f") ((xabilities))).if
                                bogusForceDataize.write ((((xobj).xfileno)) 0)
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xfileno)))
                              (xreadable).if
                                seq
                                  bogusForceDataize.write ((((xobj).xread)) (1))
                                  bogusForceDataize.write ((((xobj).xread)) 0)
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xread)) (1))
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xread)))
                              (xwritable).if
                                bogusForceDataize.write ((((xobj).xwrite)) ((xdata)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xwrite)) ((xdata)))
                              ((((((xsys).xplatform).xstartswith)) ("win")).and (((unsupported)) ((xtest)) ((((unsupported)) ((xpipe_reader)) ((xpipe_writer)))))).if
                                (((unsupported)) 0)
                              xseekable.write (((unsupported)) ("s") ((xabilities)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xobj).xseekable)) 0)) ((xseekable)))
                              (xseekable).if
                                seq
                                  bogusForceDataize.write ((((xobj).xtell)) 0)
                                  bogusForceDataize.write ((((xobj).xseek)) (0))
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xtell)))
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xseek)) (0))
                              ((xwritable).and (xseekable)).if
                                seq
                                  bogusForceDataize.write ((((xobj).xtruncate)) 0)
                                  bogusForceDataize.write ((((xobj).xtruncate)) (0))
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xtruncate)))
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xobj).xtruncate)) (0))
                xtest_open_handles_NUL_chars.write
                  [xself]
                    memory > xbytes_fn
                    memory > xfn_with_NUL
                    seq > @
                      seq
                        xfn_with_NUL.write "foo0bar"
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xopen)) ((xfn_with_NUL)) ("w"))
                        xbytes_fn.write (((xbytes)) ((xfn_with_NUL)) ("ascii"))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xopen)) ((xbytes_fn)) ("w"))
                xtest_raw_file_io.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("wb") (0))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadable)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwritable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseekable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xwrite_ops)) ((xf)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("rb") (0))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwritable)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseekable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xread_ops)) ((xf)))
                xtest_buffered_file_io.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadable)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwritable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseekable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xwrite_ops)) ((xf)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwritable)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseekable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xread_ops)) ((xf)) (TRUE))
                xtest_readline.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("abcndefnxyzzynfoox00barnanother line"))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("abcn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) (10))) ("defn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) (2))) ("xy"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) (4))) ("zzyn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("foox00barn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) ("None: is there a None literal in the EO language?"))) ("another line"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xf).xreadline)) (5.3))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("r"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xf).xreadline)) (5.3))
                xtest_readline_nonsizeable.write
                  [xself]
                    memory > xreadline
                    seq > @
                      seq
                        (((unsupported)) (((xself).xIOBase)))
                          xreadline.write
                            [xself]
                              seq > @
                                (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xTypeError)) ((xStopIteration)))) ((xnext)) ((((xR)) 0)))
                xtest_next_nonsizeable.write
                  [xself]
                    memory > x__next__
                    seq > @
                      seq
                        (((unsupported)) (((xself).xIOBase)))
                          x__next__.write
                            [xself]
                              seq > @
                                (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xR)) 0).xreadlines)) (1))
                xtest_raw_bytes_io.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xBytesIO)) 0)
                        bogusForceDataize.write ((((xself).xwrite_ops)) ((xf)))
                        xdata.write ((((xf).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("hello worldn"))
                        xf.write ((((xself).xBytesIO)) ((xdata)))
                        bogusForceDataize.write ((((xself).xread_ops)) ((xf)) (TRUE))
                xtest_large_file_ops.write
                  [xself]
                    seq > @
                      seq
                        (((((unsupported)) (((xsys).xplatform)) ((((unsupported)) (3)))).eq "win").or (((xsys).xplatform).eq "darwin")).if
                          bogusForceDataize.write ((((xsupport).xrequires)) ("largefile") (("test requires %s bytes and a long time to run".mod ((xself).xLARGE))))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w+b") (0))) ((xf)))
                          bogusForceDataize.write ((((xself).xlarge_file_ops)) ((xf)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w+b"))) ((xf)))
                          bogusForceDataize.write ((((xself).xlarge_file_ops)) ((xf)))
                xtest_with_open.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)) ((xbufsize)) ((((unsupported)) (0) (100))))
                        seq
                          xf.write "None: is there a None literal in the EO language?"
                          (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb") ((xbufsize)))) ((xf)))
                            bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xclosed)) (TRUE))
                          xf.write "None: is there a None literal in the EO language?"
                          (((unsupported)) ((xZeroDivisionError)))
                            (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb") ((xbufsize)))) ((xf)))
                              unsupported
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xclosed)) (TRUE))
                            bogusForceDataize.write ((((xself).xfail)) ("1/0 didn't raise an exception"))
                xtest_append_mode_tell.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("ab") (0))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (3))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("ab"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (3))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("a"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertGreater)) (((((xf).xtell)) 0)) (0))
                xtest_destructor.write
                  [xself]
                    memory > xrecord
                    memory > xclose
                    memory > xf
                    memory > xflush
                    memory > x__del__
                    seq > @
                      seq
                        xrecord.write (((unsupported)) 0)
                        (((unsupported)) (((xself).xFileIO)))
                          seq
                            x__del__.write
                              [xself]
                                memory > xf
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (1))
                                    (((unsupported)) ((xAttributeError)))
                                      xf.write ((((xsuper)) 0).x__del__)
                                      bogusForceDataize.write (((xf)) 0)
                            xclose.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (2))
                                    bogusForceDataize.write ((((((xsuper)) 0).xclose)) 0)
                            xflush.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (3))
                                    bogusForceDataize.write ((((((xsuper)) 0).xflush)) 0)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xf.write (((xMyFileIO)) (((xsupport).xTESTFN)) ("wb"))
                            bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xrecord)) ((((unsupported)) (1) (2) (3))))
                            (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("xxx"))
                x_check_base_destructor.write
                  [xself xbase]
                    memory > xrecord
                    memory > xclose
                    memory > xf
                    memory > xflush
                    memory > x__init__
                    memory > x__del__
                    seq > @
                      seq
                        xrecord.write (((unsupported)) 0)
                        (((unsupported)) ((xbase)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xon_del)) (1))
                                    (((unsupported)) (((xself).xon_close)) (2))
                                    (((unsupported)) (((xself).xon_flush)) (3))
                            x__del__.write
                              [xself]
                                memory > xf
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (((xself).xon_del)))
                                    (((unsupported)) ((xAttributeError)))
                                      xf.write ((((xsuper)) 0).x__del__)
                                      bogusForceDataize.write (((xf)) 0)
                            xclose.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (((xself).xon_close)))
                                    bogusForceDataize.write ((((((xsuper)) 0).xclose)) 0)
                            xflush.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (((xself).xon_flush)))
                                    bogusForceDataize.write ((((((xsuper)) 0).xflush)) 0)
                        xf.write (((xMyIO)) 0)
                        (((unsupported)) ((((unsupported)) ((xf)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrecord)) ((((unsupported)) (1) (2) (3))))
                xtest_IOBase_destructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_base_destructor)) (((xself).xIOBase)))
                xtest_RawIOBase_destructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_base_destructor)) (((xself).xRawIOBase)))
                xtest_BufferedIOBase_destructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_base_destructor)) (((xself).xBufferedIOBase)))
                xtest_TextIOBase_destructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_base_destructor)) (((xself).xTextIOBase)))
                xtest_close_flushes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("xxx"))
                xtest_array_writes.write
                  [xself]
                    memory > xn
                    memory > xcheck
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)) ("i") ((((xrange)) (10))))
                        xn.write (((xlen)) (((((xa).xtobytes)) 0)))
                        xcheck.write
                          [xf]
                            seq > @
                              (((unsupported)) ((xf)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ((xa)))) ((xn)))
                                  bogusForceDataize.write ((((xf).xwritelines)) ((((unsupported)) ((xa)))))
                        bogusForceDataize.write (((xcheck)) (((((xself).xBytesIO)) 0)))
                        bogusForceDataize.write (((xcheck)) (((((xself).xFileIO)) (((xsupport).xTESTFN)) ("w"))))
                        bogusForceDataize.write (((xcheck)) (((((xself).xBufferedWriter)) (((((xself).xMockRawIO)) 0)))))
                        bogusForceDataize.write (((xcheck)) (((((xself).xBufferedRandom)) (((((xself).xMockRawIO)) 0)))))
                        bogusForceDataize.write (((xcheck)) (((((xself).xBufferedRWPair)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))))
                xtest_closefd.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") (FALSE))
                xtest_read_closed.write
                  [xself]
                    memory > xfile
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("eggn"))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("r"))) ((xf)))
                          seq
                            xfile.write (((unsupported)) (((xself).xopen)) (((((xf).xfileno)) 0)) ("r") (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xread)) 0)) ("eggn"))
                            bogusForceDataize.write ((((xfile).xseek)) (0))
                            bogusForceDataize.write ((((xfile).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfile).xread)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          seq
                            xfile.write (((unsupported)) (((xself).xopen)) (((((xf).xfileno)) 0)) ("rb") (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xfile).xread)) 0)) ((((unsupported)) (3))))) ("egg"))
                            bogusForceDataize.write ((((xfile).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfile).xreadinto)) ((((xbytearray)) (1))))
                xtest_no_closefd_with_filename.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r") (FALSE))
                xtest_closefd_attr.write
                  [xself]
                    memory > xfile
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("eggn"))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("r"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xbuffer).xraw).xclosefd)) (TRUE))
                            xfile.write (((unsupported)) (((xself).xopen)) (((((xf).xfileno)) 0)) ("r") (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xbuffer).xraw).xclosefd)) (FALSE))
                xtest_garbage_collection.write
                  [xself]
                    memory > xwr
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xf.write ((((xself).xFileIO)) (((xsupport).xTESTFN)) ("wb"))
                            bogusForceDataize.write ((((xf).xwrite)) ("abcxxx"))
                            (((unsupported)) (((xf).xf)) ((xf)))
                            xwr.write ((((xweakref).xref)) ((xf)))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("abcxxx"))
                xtest_unbounded_file.write
                  [xself]
                    memory > xzero
                    seq > @
                      seq
                        xzero.write "/dev/zero"
                        ((((((xos).xpath).xexists)) ((xzero))).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((("{0} does not exist".xformat)) ((xzero)))))
                        (((xsys).xmaxsize).greater 2147483647).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test can only run in a 32-bit address space"))
                        (((xsupport).xreal_max_memuse).less ((xsupport).x_2G)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test requires at least 2 GiB of memory"))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xzero)) ("rb") (0))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xf).xread)))
                        (((unsupported)) (((((xself).xopen)) ((xzero)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xf).xread)))
                        (((unsupported)) (((((xself).xopen)) ((xzero)) ("r"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xf).xread)))
                xcheck_flush_error_on_close.write
                  [xself]
                    memory > xclosed
                    memory > xbad_flush
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write ((((xself).xopen)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        xclosed.write (((unsupported)) 0)
                        xbad_flush.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xclosed)) ((((unsupported)) 0)))) ((((unsupported)) (((xf).xclosed)))))
                                (((unsupported)) ((((xOSError)) 0)))
                        (((unsupported)) (((xf).xflush)) ((xbad_flush)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xf).xclose)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xclosed)) (0))))
                        (((unsupported)) (((xf).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_flush_error_on_close.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcheck_flush_error_on_close)) (((xsupport).xTESTFN)) ("wb") (0))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)) (((xself).xcheck_flush_error_on_close)) ((xfd)) ("wb") (0))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)) (((xself).xcheck_flush_error_on_close)) ((xfd)) ("wb") (0) (FALSE))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xcheck_flush_error_on_close)) (((xsupport).xTESTFN)) ("wb"))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        bogusForceDataize.write ((((xself).xcheck_flush_error_on_close)) ((xfd)) ("wb"))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)) (((xself).xcheck_flush_error_on_close)) ((xfd)) ("wb") (FALSE))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xcheck_flush_error_on_close)) (((xsupport).xTESTFN)) ("w"))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        bogusForceDataize.write ((((xself).xcheck_flush_error_on_close)) ((xfd)) ("w"))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)) (((xself).xcheck_flush_error_on_close)) ((xfd)) ("w") (FALSE))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_multi_close.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("wb") (0))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xflush)))
                xtest_RawIOBase_read.write
                  [xself]
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIOWithoutRead)) ((((unsupported)) ("abc") ("d") ("None: is there a None literal in the EO language?") ("efg") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("g"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) (2))) (""))
                xtest_types_have_dict.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        xtest.write (((unsupported)) (((((xself).xIOBase)) 0)) (((((xself).xRawIOBase)) 0)) (((((xself).xTextIOBase)) 0)) (((((xself).xStringIO)) 0)) (((((xself).xBytesIO)) 0)))
                        (((unsupported)) ((xobj)) ((xtest)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xobj)) ("__dict__"))))
                xtest_opener.write
                  [xself]
                    memory > xopener
                    memory > xfd
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("eggn"))
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xopener.write
                          [xpath xflags]
                            seq > @
                              (((unsupported)) ((xfd)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) ("non-existent") ("r") ((xopener)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("eggn"))
                xtest_bad_opener_negative_1.write
                  [xself]
                    memory > xbadopener
                    seq > @
                      seq
                        xbadopener.write
                          [xfname xflags]
                            seq > @
                              (((unsupported)) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) ((xopen)) ("non-existent") ("r") ((xbadopener)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("opener returned -1"))
                xtest_bad_opener_other_negative.write
                  [xself]
                    memory > xbadopener
                    seq > @
                      seq
                        xbadopener.write
                          [xfname xflags]
                            seq > @
                              (((unsupported)) ((2.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) ((xopen)) ("non-existent") ("r") ((xbadopener)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("opener returned -2"))
                xtest_fileio_closefd.write
                  [xself]
                    memory > xfileio
                    seq > @
                      (((unsupported)) (((((xself).xopen)) ((x__file__)) ("rb"))) ((xf1)) (((((xself).xopen)) ((x__file__)) ("rb"))) ((xf2)))
                        seq
                          xfileio.write (((unsupported)) (((xself).xFileIO)) (((((xf1).xfileno)) 0)) (FALSE))
                          (((unsupported)) (((xfileio).x__init__)) (((((xf2).xfileno)) 0)) (FALSE))
                          bogusForceDataize.write ((((xf1).xreadline)) 0)
                          bogusForceDataize.write ((((xfileio).xclose)) 0)
                          bogusForceDataize.write ((((xf2).xreadline)) 0)
                xtest_nonbuffered_textio.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcheck_no_resource_warning)) ((xself)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") (0))
                xtest_invalid_newline.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcheck_no_resource_warning)) ((xself)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") ("invalid"))
                xtest_buffered_readinto_mixin.write
                  [xself]
                    memory > xread1
                    memory > xstream
                    memory > xread
                    memory > xbuffer
                    seq > @
                      seq
                        (((unsupported)) (((xself).xBufferedIOBase)))
                          seq
                            xread.write
                              [xself xsize]
                                seq > @
                                  (((unsupported)) ("12345"))
                            xread1.write (xread)
                        xstream.write (((xStream)) 0)
                        (((unsupported)) ((xmethod)) ((((unsupported)) ("readinto") ("readinto1"))))
                          (((unsupported)) (((((xself).xsubTest)) ((xmethod)))))
                            seq
                              xbuffer.write (((xbyteslike)) (5))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((((xgetattr)) ((xstream)) ((xmethod)))) ((xbuffer)))) (5))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xbytes)) ((xbuffer)))) ("12345"))
                xtest_fspath_support.write
                  [xself]
                    memory > xcheck_path_succeeds
                    memory > xbad_path
                    seq > @
                      seq
                        xcheck_path_succeeds.write
                          [xpath]
                            seq > @
                              seq
                                (((unsupported)) (((((xself).xopen)) ((xpath)) ("w"))) ((xf)))
                                  bogusForceDataize.write ((((xf).xwrite)) ("eggn"))
                                (((unsupported)) (((((xself).xopen)) ((xpath)) ("r"))) ((xf)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("eggn"))
                        bogusForceDataize.write (((xcheck_path_succeeds)) ((((xFakePath)) (((xsupport).xTESTFN)))))
                        bogusForceDataize.write (((xcheck_path_succeeds)) ((((xFakePath)) (((((xos).xfsencode)) (((xsupport).xTESTFN)))))))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          seq
                            xbad_path.write (((xFakePath)) (((((xf).xfileno)) 0)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              bogusForceDataize.write ((((xself).xopen)) ((xbad_path)) ("w"))
                        xbad_path.write (((xFakePath)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xopen)) ((xbad_path)) ("w"))
                        xbad_path.write (((xFakePath)) ((xFloatingPointError)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFloatingPointError)))))
                          bogusForceDataize.write ((((xself).xopen)) ((xbad_path)) ("w"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("read/write/append mode"))))
                          bogusForceDataize.write ((((xself).xopen)) ((((xFakePath)) (((xsupport).xTESTFN)))) ("rwxa"))
                xtest_RawIOBase_readall.write
                  [xself]
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIOWithoutRead)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xread)) 0)) ("abcdefg"))
                        xrawio.write ((((xself).xMockRawIOWithoutRead)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xreadall)) 0)) ("abcdefg"))
                xtest_BufferedIOBase_readinto.write
                  [xself]
                    memory > xunused
                    memory > xbuffer
                    memory > xreader
                    memory > x__init__
                    memory > xread
                    memory > xUNUSED_BYTE
                    memory > xread1
                    memory > xtests
                    memory > xmethod
                    seq > @
                      seq
                        (((unsupported)) (((xself).xBufferedIOBase)))
                          seq
                            x__init__.write
                              [xself xavail]
                                seq > @
                                  (((unsupported)) (((xself).xavail)) ((xavail)))
                            xread.write
                              [xself xsize]
                                memory > xresult
                                seq > @
                                  seq
                                    xresult.write (((unsupported)) (((xself).xavail)) ((((unsupported)) ((xsize)))))
                                    (((unsupported)) (((xself).xavail)) ((((unsupported)) (((xself).xavail)) ((((unsupported)) ((xsize)))))))
                                    (((unsupported)) ((xresult)))
                            xread1.write
                              [xself xsize]
                                seq > @
                                  seq
                                    unsupported
                                    (((unsupported)) (((((xself).xread)) ((((xmin)) ((xsize)) (5))))))
                        xtests.write (((unsupported)) ((((unsupported)) ("readinto") (10) (5) (5))) ((((unsupported)) ("readinto") (10) (6) (6))) ((((unsupported)) ("readinto") (5) (6) (5))) ((((unsupported)) ("readinto") (6) (7) (6))) ((((unsupported)) ("readinto") (10) (0) (0))) ((((unsupported)) ("readinto1") (10) (5) (5))) ((((unsupported)) ("readinto1") (10) (6) (5))) ((((unsupported)) ("readinto1") (5) (6) (5))) ((((unsupported)) ("readinto1") (6) (7) (5))) ((((unsupported)) ("readinto1") (10) (0) (0))))
                        xUNUSED_BYTE.write 129
                        (((unsupported)) ((xtest)) ((xtests)))
                          (((unsupported)) (((((xself).xsubTest)) ((xtest)))))
                            seq
                              (((unsupported)) ((((unsupported)) ((xmethod)) ((xavail)) ((xrequest)) ((xresult)))) ((xtest)))
                              xreader.write (((xReader)) ((((xbytes)) ((((xrange)) ((xavail)))))))
                              xbuffer.write (((xbytearray)) (((((unsupported)) ((xUNUSED_BYTE))).mul (xrequest))))
                              xmethod.write (((xgetattr)) ((xreader)) ((xmethod)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xmethod)) ((xbuffer)))) ((xresult)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xbuffer)))) ((xrequest)))
                              bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ((xbuffer)) ((((unsupported)) ((xresult)))))) ((((xrange)) ((xresult)))))
                              xunused.write ((((unsupported)) ((xUNUSED_BYTE))).mul ((xrequest).sub (xresult)))
                              bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ((xbuffer)) ((((unsupported)) ((xresult)))))) ((xunused)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xreader).xavail)))) (((xavail).sub (xresult))))
                xtest_close_assert.write
                  [xself]
                    memory > xflush
                    memory > x__setattr__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) (((xself).xIOBase)))
                          seq
                            x__setattr__.write
                              [xself xname xvalue]
                                seq > @
                            xflush.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xOSError)) 0)))
                        xf.write (((xR)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xf).xclose)))
                        (((unsupported)) (((xR).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
            (((unsupported)) ((xIOTest)))
              xtest_IOBase_finalize.write
                [xself]
                  memory > xclose
                  memory > xwr
                  memory > xobj
                  seq > @
                    seq
                      (((unsupported)) (((xself).xIOBase)))
                        xclose.write
                          [xself]
                            seq > @
                      bogusForceDataize.write (((xMyIO)) 0)
                      xobj.write (((xMyIO)) 0)
                      (((unsupported)) (((xobj).xobj)) ((xobj)))
                      xwr.write ((((xweakref).xref)) ((xobj)))
                      (((unsupported)) ((((unsupported)) ((xMyIO)))))
                      (((unsupported)) ((((unsupported)) ((xobj)))))
                      bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                      bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
            (((unsupported)) ((xIOTest)))
            (((unsupported)) (((xunittest).xTestCase)) (((xsupport).xcpython_only)))
              seq
                xtest_RawIOBase_io_in_pyio_match.write
                  [xself]
                    memory > xmismatch
                    seq > @
                      seq
                        unsupported
                        xmismatch.write (((unsupported)) (((xsupport).xdetect_api_mismatch)) (((xpyio).xRawIOBase)) (((xio).xRawIOBase)) ((((unsupported)) ("__weakref__"))))
                        (((unsupported)) (((xself).xassertEqual)) ((xmismatch)) ((((xset)) 0)) ("Python RawIOBase does not have all C RawIOBase methods"))
                xtest_RawIOBase_pyio_in_io_match.write
                  [xself]
                    memory > xmismatch
                    seq > @
                      seq
                        unsupported
                        xmismatch.write ((((xsupport).xdetect_api_mismatch)) (((xio).xRawIOBase)) (((xpyio).xRawIOBase)))
                        (((unsupported)) (((xself).xassertEqual)) ((xmismatch)) ((((xset)) 0)) ("C RawIOBase does not have all Python RawIOBase methods"))
            (((unsupported)) 0)
              seq
                xtest_detach.write
                  [xself]
                    memory > xraw
                    memory > xbuf
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbuf.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xbuf).xdetach)) 0)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbuf).xdetach)))
                        bogusForceDataize.write (((xrepr)) ((xbuf)))
                xtest_fileno.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (42) (((((xbufio).xfileno)) 0)))
                xtest_invalid_args.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xseek)) (0) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xseek)) (0) (9))
                xtest_override_destructor.write
                  [xself]
                    memory > xtp
                    memory > xrecord
                    memory > xclose
                    memory > xbufio
                    memory > xflush
                    memory > x__del__
                    memory > xrawio
                    seq > @
                      seq
                        xtp.write ((xself).xtp)
                        xrecord.write (((unsupported)) 0)
                        (((unsupported)) ((xtp)))
                          seq
                            x__del__.write
                              [xself]
                                memory > xf
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (1))
                                    (((unsupported)) ((xAttributeError)))
                                      xf.write ((((xsuper)) 0).x__del__)
                                      bogusForceDataize.write (((xf)) 0)
                            xclose.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (2))
                                    bogusForceDataize.write ((((((xsuper)) 0).xclose)) 0)
                            xflush.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (3))
                                    bogusForceDataize.write ((((((xsuper)) 0).xflush)) 0)
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write (((xMyBufferedIO)) ((xrawio)))
                        (((unsupported)) ((((unsupported)) ((xbufio)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrecord)) ((((unsupported)) (1) (2) (3))))
                xtest_context_manager.write
                  [xself]
                    memory > x_with
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        x_with.write
                          []
                            seq > @
                              (((unsupported)) ((xbufio)))
                        bogusForceDataize.write (((x_with)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((x_with)))
                xtest_error_through_destructor.write
                  [xself]
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xCloseFailureIO)) 0)
                        (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)) ((xcm)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              unsupported
                            ((xIOBASE_EMITS_UNRAISABLE).not).if
                              bogusForceDataize.write ((((xself).xassertIsNone)) (((xcm).xunraisable)))
                              (((unsupported)) (((xcm).xunraisable)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xunraisable).xexc_type)) ((xOSError)))
                xtest_repr.write
                  [xself]
                    memory > xraw
                    memory > xclsname
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xb.write ((((xself).xtp)) ((xraw)))
                        xclsname.write ("(%s.)?%s".mod (((unsupported)) ((((xself).xtp).x__module__)) ((((xself).xtp).x__qualname__))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xb)))) (("<%s>".mod (xclsname))))
                        (((unsupported)) (((xraw).xname)) ("dummy"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xb)))) (("<%s name='dummy'>".mod (xclsname))))
                        (((unsupported)) (((xraw).xname)) ("dummy"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xb)))) (("<%s name=b'dummy'>".mod (xclsname))))
                xtest_recursive_repr.write
                  [xself]
                    memory > xraw
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xb.write ((((xself).xtp)) ((xraw)))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xraw)) ("name") ((xb)))))
                          (((unsupported)) ((xRuntimeError)))
                            bogusForceDataize.write (((xrepr)) ((xb)))
                xtest_flush_error_on_close.write
                  [xself]
                    memory > xclosed
                    memory > xraw
                    memory > xbad_flush
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xclosed.write (((unsupported)) 0)
                        xbad_flush.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xclosed)) ((((unsupported)) 0)))) ((((unsupported)) (((xb).xclosed)) (((xraw).xclosed)))))
                                (((unsupported)) ((((xOSError)) 0)))
                        (((unsupported)) (((xraw).xflush)) ((xbad_flush)))
                        xb.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xb).xclose)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xb).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xraw).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xclosed)) (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xclosed)) (1))))
                        (((unsupported)) (((xraw).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_close_error_on_close.write
                  [xself]
                    memory > xbad_close
                    memory > xraw
                    memory > xbad_flush
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbad_flush.write
                          []
                            seq > @
                              (((unsupported)) ((((xOSError)) ("flush"))))
                        xbad_close.write
                          []
                            seq > @
                              (((unsupported)) ((((xOSError)) ("close"))))
                        (((unsupported)) (((xraw).xclose)) ((xbad_close)))
                        xb.write ((((xself).xtp)) ((xraw)))
                        (((unsupported)) (((xb).xflush)) ((xbad_flush)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xerr)))
                          bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xerr).xexception).xargs)) ((((unsupported)) ("close"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xerr).xexception).x__context__)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xerr).xexception).x__context__).xargs)) ((((unsupported)) ("flush"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xb).xclosed)))
                        (((unsupported)) (((xraw).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xb).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_nonnormalized_close_error_on_close.write
                  [xself]
                    memory > xbad_close
                    memory > xraw
                    memory > xbad_flush
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbad_flush.write
                          []
                            seq > @
                              (((unsupported)) ((xnon_existing_flush)))
                        xbad_close.write
                          []
                            seq > @
                              (((unsupported)) ((xnon_existing_close)))
                        (((unsupported)) (((xraw).xclose)) ((xbad_close)))
                        xb.write ((((xself).xtp)) ((xraw)))
                        (((unsupported)) (((xb).xflush)) ((xbad_flush)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("non_existing_close") ((((xstr)) (((xerr).xexception)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xerr).xexception).x__context__)) ((xNameError)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("non_existing_flush") ((((xstr)) ((((xerr).xexception).x__context__)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xb).xclosed)))
                        (((unsupported)) (((xb).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xraw).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_multi_close.write
                  [xself]
                    memory > xraw
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xb.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xb).xflush)))
                xtest_unseekable.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        xbufio.write ((((xself).xtp)) (((((xself).xMockUnseekableIO)) (("A".mul 10)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xtell)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xseek)) (0))
                xtest_readonly_attributes.write
                  [xself]
                    memory > xx
                    memory > xraw
                    memory > xbuf
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbuf.write ((((xself).xtp)) ((xraw)))
                        xx.write ((((xself).xMockRawIO)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xbuf).xraw)) ((xx)))
            (((unsupported)) 0)
              seq
                xtest_sizeof.write
                  [xself]
                    memory > xbufsize1
                    memory > xsize
                    memory > xbufio
                    memory > xbufsize2
                    memory > xrawio
                    seq > @
                      (((unsupported)) 0)
                        xbufsize1.write 4096
                        xbufsize2.write 8192
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbufsize1)))
                        xsize.write (((((xsys).xgetsizeof)) ((xbufio))).sub (xbufsize1))
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbufsize2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsys).xgetsizeof)) ((xbufio)))) (((xsize).add (xbufsize2))))
                xtest_buffer_freeing.write
                  [xself]
                    memory > xsize
                    memory > xbufio
                    memory > xbufsize
                    memory > xrawio
                    seq > @
                      (((unsupported)) 0)
                        xbufsize.write 4096
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbufsize)))
                        xsize.write (((((xsys).xgetsizeof)) ((xbufio))).sub (xbufsize))
                        bogusForceDataize.write ((((xbufio).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsys).xgetsizeof)) ((xbufio)))) ((xsize)))
            (((unsupported)) (((xunittest).xTestCase)) ((xCommonBufferedTests)))
              seq
                xread_mode.write "rb"
                xtest_constructor.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xbufio).x__init__)) ((xrawio)))
                        (((unsupported)) (((xbufio).x__init__)) ((xrawio)) (1024))
                        (((unsupported)) (((xbufio).x__init__)) ((xrawio)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abc") (((((xbufio).xread)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((16.neg)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((1.neg)))
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc"))))
                        bogusForceDataize.write ((((xbufio).x__init__)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abc") (((((xbufio).xread)) 0)))
                xtest_uninitialized.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        xbufio.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        (((unsupported)) ((((unsupported)) ((xbufio)))))
                        xbufio.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((((unsupported)) ((xValueError)) ((xAttributeError)))) ("uninitialized|has no attribute") (((xbufio).xread)) (0))
                        bogusForceDataize.write ((((xbufio).x__init__)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) (0))) (""))
                xtest_read.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        (((unsupported)) ((xarg)) ((((unsupported)) ("None: is there a None literal in the EO language?") (7))))
                          seq
                            xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                            xbufio.write ((((xself).xtp)) ((xrawio)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("abcdefg") (((((xbufio).xread)) ((xarg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xread)) ((2.neg)))
                xtest_read1.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("a") (((((xbufio).xread)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("b") (((((xbufio).xread1)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xbufio).xread1)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("c") (((((xbufio).xread1)) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("d") (((((xbufio).xread1)) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("efg") (((((xbufio).xread1)) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xbufio).xread1)) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (4))
                xtest_read1_arbitrary.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("a") (((((xbufio).xread)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("bc") (((((xbufio).xread1)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("d") (((((xbufio).xread1)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("efg") (((((xbufio).xread1)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xbufio).xread1)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (4))
                xtest_readinto.write
                  [xself]
                    memory > xbufio
                    memory > xb
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        xb.write (((xbytearray)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("cd"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("gf"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("gf"))
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("None: is there a None literal in the EO language?"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto)) ((xb)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("cb"))
                xtest_readinto1.write
                  [xself]
                    memory > xbufio
                    memory > xb
                    memory > xbuffer_size
                    memory > xrawio
                    seq > @
                      seq
                        xbuffer_size.write 10
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("de") ("fgh") ("jkl"))))
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbuffer_size)))
                        xb.write (((xbytearray)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xpeek)) (3))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto1)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto1)) ((xb)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xb)) ((((unsupported)) (1))))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto1)) ((xb)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (2))
                        xb.write (((xbytearray)) ((2.mul (xbuffer_size))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xpeek)) (3))) ("fgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xreadinto1)) ((xb)))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xb)) ((((unsupported)) (6))))) ("fghjkl"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_reads)) (4))
                xtest_readinto_array.write
                  [xself]
                    memory > xdata
                    memory > xbm
                    memory > xb
                    memory > xbufio
                    memory > xbuffer_size
                    memory > xn
                    memory > xrawio
                    seq > @
                      seq
                        xbuffer_size.write 60
                        xdata.write ("a".mul 26)
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ((xdata)))))
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbuffer_size)))
                        xb.write ((((xarray).xarray)) ("i") (("x".mul 32)))
                        (((unsupported)) (((((xlen)) ((xb))).neq 16)))
                        xn.write ((((xbufio).xreadinto)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xn)) ((((xlen)) ((xb)))))
                        xbm.write ((((((xmemoryview)) ((xb))).xcast)) ("B"))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xn)) ((((xlen)) ((xbm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn)))))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn)))))) (("x".mul (((xlen)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn))))))))))
                xtest_readinto1_array.write
                  [xself]
                    memory > xdata
                    memory > xbm
                    memory > xb
                    memory > xbufio
                    memory > xbuffer_size
                    memory > xn
                    memory > xrawio
                    seq > @
                      seq
                        xbuffer_size.write 60
                        xdata.write ("a".mul 26)
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ((xdata)))))
                        xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbuffer_size)))
                        xb.write ((((xarray).xarray)) ("i") (("x".mul 32)))
                        (((unsupported)) (((((xlen)) ((xb))).neq 16)))
                        xn.write ((((xbufio).xreadinto1)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xn)) ((((xlen)) ((xb)))))
                        xbm.write ((((((xmemoryview)) ((xb))).xcast)) ("B"))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xn)) ((((xlen)) ((xbm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn)))))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn)))))) (("x".mul (((xlen)) ((((unsupported)) ((xbm)) ((((unsupported)) ((xn))))))))))
                xtest_readlines.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        xbufio.write
                          []
                            memory > xrawio
                            seq > @
                              seq
                                xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abcn") ("dn") ("ef"))))
                                (((unsupported)) (((((xself).xtp)) ((xrawio)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xbufio)) 0).xreadlines)) 0)) ((((unsupported)) ("abcn") ("dn") ("ef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xbufio)) 0).xreadlines)) (5))) ((((unsupported)) ("abcn") ("dn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xbufio)) 0).xreadlines)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcn") ("dn") ("ef"))))
                xtest_buffering.write
                  [xself]
                    memory > xdlen
                    memory > xdata
                    memory > xpos
                    memory > xbufio
                    memory > xrawio
                    memory > xtests
                    seq > @
                      seq
                        xdata.write "abcdefghi"
                        xdlen.write (((xlen)) ((xdata)))
                        xtests.write (((unsupported)) ((((unsupported)) (100) ((((unsupported)) (3) (1) (4) (8))) ((((unsupported)) ((xdlen)) (0))))) ((((unsupported)) (100) ((((unsupported)) (3) (3) (3))) ((((unsupported)) ((xdlen)))))) ((((unsupported)) (4) ((((unsupported)) (1) (2) (4) (2))) ((((unsupported)) (4) (4) (1))))))
                        (((unsupported)) ((((unsupported)) ((xbufsize)) ((xbuf_read_sizes)) ((xraw_read_sizes)))) ((xtests)))
                          seq
                            xrawio.write ((((xself).xMockFileIO)) ((xdata)))
                            xbufio.write (((unsupported)) (((xself).xtp)) ((xrawio)) ((xbufsize)))
                            xpos.write 0
                            (((unsupported)) ((xnbytes)) ((xbuf_read_sizes)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) ((xnbytes)))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xpos)) (((xpos).add (xnbytes))))))))
                                (((unsupported)) ((xpos)) ((xnbytes)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).xread_history)) ((xraw_read_sizes)))
                xtest_read_non_blocking.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("None: is there a None literal in the EO language?") ("efg") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abcd") (((((xbufio).xread)) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("e") (((((xbufio).xread)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("fg") (((((xbufio).xread)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xbufio).xpeek)) (1))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xbufio).xread)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xbufio).xread)) 0)))
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("a") (((((xrawio).xreadall)) 0)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xrawio).xreadall)) 0)))
                xtest_read_past_eof.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abcdefg") (((((xbufio).xread)) (9000))))
                xtest_read_all.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abcdefg") (((((xbufio).xread)) 0)))
                xtest_threads.write
                  [xself]
                    memory > xc
                    memory > xl
                    memory > xs
                    memory > xresults
                    memory > xN
                    memory > xthreads
                    memory > xerrors
                    memory > xf
                    memory > xbufio
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            xN.write 1000
                            xl.write ((((xlist)) ((((xrange)) (256)))).mul (xN))
                            bogusForceDataize.write ((((xrandom).xshuffle)) ((xl)))
                            xs.write (((xbytes)) ((((xbytearray)) ((xl)))))
                            (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ((xs)))
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) (((xself).xread_mode)) (0))) ((xraw)))
                              seq
                                xbufio.write ((((xself).xtp)) ((xraw)) (8))
                                xerrors.write (((unsupported)) 0)
                                xresults.write (((unsupported)) 0)
                                xf.write
                                  []
                                    memory > xs
                                    seq > @
                                      (((unsupported)) ((xException)))
                                        (((unsupported)) ((xn)) ((((xcycle)) ((((unsupported)) (1) (19))))))
                                          seq
                                            xs.write ((((xbufio).xread)) ((xn)))
                                            ((xs).not).if
                                              (((unsupported)) 0)
                                            bogusForceDataize.write ((((xresults).xappend)) ((xs)))
                                        seq
                                          bogusForceDataize.write ((((xerrors).xappend)) ((xe)))
                                          (((unsupported)) 0)
                                xthreads.write (((unsupported)) ((((unsupported)) (((xthreading).xThread)) ((xf)))) ((xx)) ((((xrange)) (20))))
                                (((unsupported)) (((((xsupport).xstart_threads)) ((xthreads)))))
                                  bogusForceDataize.write ((((xtime).xsleep)) (0.02))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((xerrors)) (("the following exceptions were caught: %r".mod (xerrors))))
                                xs.write ((("".xjoin)) ((xresults)))
                                (((unsupported)) ((xi)) ((((xrange)) (256))))
                                  seq
                                    xc.write (((xbytes)) ((((xbytearray)) ((((unsupported)) ((xi)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((xc)))) ((xN)))
                          bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_unseekable.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        xbufio.write ((((xself).xtp)) (((((xself).xMockUnseekableIO)) (("A".mul 10)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xtell)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xseek)) (0))
                        bogusForceDataize.write ((((xbufio).xread)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xbufio).xtell)))
                xtest_misbehaved_io.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMisbehavedRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xtell)))
                        (((unsupported)) (((xbufio).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_no_extraneous_read.write
                  [xself]
                    memory > xbufio
                    memory > xbufsize
                    memory > xrawio
                    seq > @
                      seq
                        xbufsize.write 16
                        (((unsupported)) ((xn)) ((((unsupported)) (2) (((xbufsize).sub 1)) ((xbufsize)) (((xbufsize).add 1)) (((xbufsize).mul 2)))))
                          seq
                            xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) (("x".mul (xn))))))
                            xbufio.write ((((xself).xtp)) ((xrawio)) ((xbufsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) ((xn)))) (("x".mul (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_extraneous_reads)) (0) (((("failed for {}: {} != 0".xformat)) ((xn)) (((xrawio).x_extraneous_reads)))))
                            xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) (("x".mul ((xn).sub 1))) ("x"))))
                            xbufio.write ((((xself).xtp)) ((xrawio)) ((xbufsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) ((xn)))) (("x".mul (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xrawio).x_extraneous_reads)) (0) (((("failed for {}: {} != 0".xformat)) ((xn)) (((xrawio).x_extraneous_reads)))))
                xtest_read_on_closed.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xio).xBufferedReader)) (((((xio).xBytesIO)) ("12"))))
                        bogusForceDataize.write ((((xb).xread)) (1))
                        bogusForceDataize.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xb).xpeek)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xb).xread1)) (1))
            (((unsupported)) ((xBufferedReaderTest)) ((xSizeofTest)))
              seq
                xtp.write ((xio).xBufferedReader)
                xtest_constructor.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xBufferedReaderTest).xtest_constructor)) ((xself)))
                        (((xsys).xmaxsize).greater 2147483647).if
                          seq
                            xrawio.write ((((xself).xMockRawIO)) 0)
                            xbufio.write ((((xself).xtp)) ((xrawio)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)) ((xValueError)))) (((xbufio).x__init__)) ((xrawio)) (((xsys).xmaxsize)))
                xtest_initialization.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xread)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((16.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xread)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xread)))
                xtest_misbehaved_io_read.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMisbehavedRawIO)) ((((unsupported)) ("abc") ("d") ("efg"))))
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xread)) (10))
                xtest_garbage_collection.write
                  [xself]
                    memory > xwr
                    memory > xf
                    memory > xrawio
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xrawio.write ((((xself).xFileIO)) (((xsupport).xTESTFN)) ("w+b"))
                            xf.write ((((xself).xtp)) ((xrawio)))
                            (((unsupported)) (((xf).xf)) ((xf)))
                            xwr.write ((((xweakref).xref)) ((xf)))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
                xtest_args_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("BufferedReader"))))
                        bogusForceDataize.write ((((xself).xtp)) (((((xio).xBytesIO)) 0)) (1024) (1024) (1024))
            (((unsupported)) ((xBufferedReaderTest)))
              xtp.write ((xpyio).xBufferedReader)
            (((unsupported)) (((xunittest).xTestCase)) ((xCommonBufferedTests)))
              seq
                xwrite_mode.write "wb"
                xtest_constructor.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        bogusForceDataize.write ((((xbufio).x__init__)) ((xrawio)))
                        (((unsupported)) (((xbufio).x__init__)) ((xrawio)) (1024))
                        (((unsupported)) (((xbufio).x__init__)) ((xrawio)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) (((((xbufio).xwrite)) ("abc"))))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) (0))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((16.neg)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((1.neg)))
                        bogusForceDataize.write ((((xbufio).x__init__)) ((xrawio)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) (((((xbufio).xwrite)) ("ghi"))))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xrawio).x_write_stack)))) ("abcghi"))
                xtest_uninitialized.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        xbufio.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        (((unsupported)) ((((unsupported)) ((xbufio)))))
                        xbufio.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((((unsupported)) ((xValueError)) ((xAttributeError)))) ("uninitialized|has no attribute") (((xbufio).xwrite)) (""))
                        bogusForceDataize.write ((((xbufio).x__init__)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) (""))) (0))
                xtest_detach_flush.write
                  [xself]
                    memory > xraw
                    memory > xbuf
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbuf.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xbuf).xwrite)) ("howdy!"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xraw).x_write_stack)))
                        bogusForceDataize.write ((((xbuf).xdetach)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xraw).x_write_stack)) ((((unsupported)) ("howdy!"))))
                xtest_write.write
                  [xself]
                    memory > xbufio
                    memory > xwriter
                    memory > xbuffer
                    seq > @
                      seq
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xbufio).xwrite)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xwriter).x_write_stack)))
                        xbuffer.write (((xbytearray)) ("def"))
                        bogusForceDataize.write ((((xbufio).xwrite)) ((xbuffer)))
                        (((unsupported)) ((((unsupported)) ((xbuffer)) ((((unsupported)) 0)))) ("***"))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xwriter).x_write_stack)))) ("abcdef"))
                xtest_write_overflow.write
                  [xself]
                    memory > xflushed
                    memory > xbufio
                    memory > xcontents
                    memory > xwriter
                    seq > @
                      seq
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        xcontents.write "abcdefghijklmnop"
                        (((unsupported)) ((xn)) ((((xrange)) (0) ((((xlen)) ((xcontents)))) (3))))
                          bogusForceDataize.write ((((xbufio).xwrite)) ((((unsupported)) ((xcontents)) ((((unsupported)) ((xn)) (((xn).add 3)))))))
                        xflushed.write ((("".xjoin)) (((xwriter).x_write_stack)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xflushed).xstartswith)) ((((unsupported)) ((xcontents)) ((((unsupported)) ((8.neg)))))))) ((xflushed)))
                xcheck_writes.write
                  [xself xintermediate_func]
                    memory > xsizes
                    memory > xsize
                    memory > xn
                    memory > xgen_sizes
                    memory > xwriter
                    memory > xcontents
                    memory > xbufio
                    seq > @
                      seq
                        xcontents.write ((((xbytes)) ((((xrange)) (256)))).mul 1000)
                        xn.write 0
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (13))
                        xgen_sizes.write
                          []
                            seq > @
                              (((unsupported)) ((xsize)) ((((xcount)) (1))))
                                (((unsupported)) ((xi)) ((((xrange)) (15))))
                                  (((unsupported)) ((xsize)))
                        xsizes.write (((xgen_sizes)) 0)
                        while.
                          ((xn).less (((xlen)) ((xcontents))))
                          [unused]
                            seq > @
                              seq
                                xsize.write (((xmin)) ((((xnext)) ((xsizes)))) (((((xlen)) ((xcontents))).sub (xn))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ((((unsupported)) ((xcontents)) ((((unsupported)) ((xn)) (((xn).add (xsize))))))))) ((xsize)))
                                bogusForceDataize.write (((xintermediate_func)) ((xbufio)))
                                (((unsupported)) ((xn)) ((xsize)))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcontents)) (((("".xjoin)) (((xwriter).x_write_stack)))))
                xtest_writes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_writes)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_writes_and_flushes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_writes)) ((((unsupported)) (((((xbufio).xflush)) 0)))))
                xtest_writes_and_seeks.write
                  [xself]
                    memory > x_seekabs
                    memory > x_seekrel
                    seq > @
                      seq
                        x_seekabs.write
                          [xbufio]
                            memory > xpos
                            seq > @
                              seq
                                xpos.write ((((xbufio).xtell)) 0)
                                bogusForceDataize.write ((((xbufio).xseek)) (((xpos).add 1)) (0))
                                bogusForceDataize.write ((((xbufio).xseek)) (((xpos).sub 1)) (0))
                                bogusForceDataize.write ((((xbufio).xseek)) ((xpos)) (0))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_seekabs)))
                        x_seekrel.write
                          [xbufio]
                            memory > xpos
                            seq > @
                              seq
                                xpos.write ((((xbufio).xseek)) (0) (1))
                                bogusForceDataize.write ((((xbufio).xseek)) ((1)) (1))
                                bogusForceDataize.write ((((xbufio).xseek)) ((1.neg)) (1))
                                bogusForceDataize.write ((((xbufio).xseek)) ((xpos)) (0))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_seekrel)))
                xtest_writes_and_truncates.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_writes)) ((((unsupported)) (((((xbufio).xtruncate)) (((((xbufio).xtell)) 0)))))))
                xtest_write_non_blocking.write
                  [xself]
                    memory > xraw
                    memory > xwritten
                    memory > xs
                    memory > xbufio
                    seq > @
                      seq
                        xraw.write ((((xself).xMockNonBlockWriterIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xraw)) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("abcd"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("efghi"))) (5))
                        bogusForceDataize.write ((((xraw).xblock_on)) ("k"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("jklmn"))) (5))
                        bogusForceDataize.write ((((xraw).xblock_on)) ("0"))
                        (((unsupported)) (((xself).xBlockingIOError)))
                          bogusForceDataize.write ((((xbufio).xwrite)) ("opqrwxyz0123456789"))
                          xwritten.write ((xe).xcharacters_written)
                          bogusForceDataize.write ((((xself).xfail)) ("BlockingIOError should have been raised"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xwritten)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xpop_written)) 0)) ("abcdefghijklmnopqrwxyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("ABCDEFGHI"))) (9))
                        xs.write ((((xraw).xpop_written)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) ("01234567A"))) ((xs)))
                xtest_write_and_rewind.write
                  [xself]
                    memory > xbufio
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xio).xBytesIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xraw)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("abcdef"))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtell)) 0)) (6))
                        bogusForceDataize.write ((((xbufio).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("XY"))) (2))
                        bogusForceDataize.write ((((xbufio).xseek)) (6) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("XYcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("123456"))) (6))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("XYcdef123456"))
                xtest_flush.write
                  [xself]
                    memory > xbufio
                    memory > xwriter
                    seq > @
                      seq
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xbufio).xwrite)) ("abc"))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abc") ((((unsupported)) (((xwriter).x_write_stack)) (0))))
                xtest_writelines.write
                  [xself]
                    memory > xbufio
                    memory > xl
                    memory > xwriter
                    seq > @
                      seq
                        xl.write (((unsupported)) ("ab") ("cd") ("ef"))
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xbufio).xwritelines)) ((xl)))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xwriter).x_write_stack)))) ("abcdef"))
                xtest_writelines_userlist.write
                  [xself]
                    memory > xbufio
                    memory > xl
                    memory > xwriter
                    seq > @
                      seq
                        xl.write (((xUserList)) ((((unsupported)) ("ab") ("cd") ("ef"))))
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xbufio).xwritelines)) ((xl)))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xwriter).x_write_stack)))) ("abcdef"))
                xtest_writelines_error.write
                  [xself]
                    memory > xbufio
                    memory > xwriter
                    seq > @
                      seq
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbufio).xwritelines)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbufio).xwritelines)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbufio).xwritelines)) ("abc"))
                xtest_destructor.write
                  [xself]
                    memory > xbufio
                    memory > xwriter
                    seq > @
                      seq
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xwriter)) (8))
                        bogusForceDataize.write ((((xbufio).xwrite)) ("abc"))
                        (((unsupported)) ((((unsupported)) ((xbufio)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("abc") ((((unsupported)) (((xwriter).x_write_stack)) (0))))
                xtest_truncate.write
                  [xself]
                    memory > xbufio
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) (((xself).xwrite_mode)) (0))) ((xraw)))
                          seq
                            xbufio.write ((((xself).xtp)) ((xraw)) (8))
                            bogusForceDataize.write ((((xbufio).xwrite)) ("abcdef"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtruncate)) (3))) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtell)) 0)) (6))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("rb") (0))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("abc"))
                xtest_truncate_after_write.write
                  [xself]
                    memory > xbuffer_sizes
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (("x00".mul 10000)))
                        xbuffer_sizes.write (((unsupported)) (8192) (4096) (200))
                        (((unsupported)) ((xbuffer_size)) ((xbuffer_sizes)))
                          (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r+b") ((xbuffer_size)))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)) (("x00".mul ((xbuffer_size).add 1))))
                              bogusForceDataize.write ((((xf).xread)) (1))
                              bogusForceDataize.write ((((xf).xtruncate)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (((xbuffer_size).add 2)))
                xtest_threads.write
                  [xself]
                    memory > xsizes
                    memory > xsize
                    memory > xqueue
                    memory > xs
                    memory > xn
                    memory > xN
                    memory > xthreads
                    memory > xerrors
                    memory > xbufio
                    memory > xcontents
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            xN.write 1000
                            xcontents.write ((((xbytes)) ((((xrange)) (256)))).mul (xN))
                            xsizes.write (((xcycle)) ((((unsupported)) (1) (19))))
                            xn.write 0
                            xqueue.write (((xdeque)) 0)
                            while.
                              ((xn).less (((xlen)) ((xcontents))))
                              [unused]
                                seq > @
                                  seq
                                    xsize.write (((xnext)) ((xsizes)))
                                    bogusForceDataize.write ((((xqueue).xappend)) ((((unsupported)) ((xcontents)) ((((unsupported)) ((xn)) (((xn).add (xsize))))))))
                                    (((unsupported)) ((xn)) ((xsize)))
                            (((unsupported)) ((((unsupported)) ((xcontents)))))
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) (((xself).xwrite_mode)) (0))) ((xraw)))
                              seq
                                xbufio.write ((((xself).xtp)) ((xraw)) (8))
                                xerrors.write (((unsupported)) 0)
                                xf.write
                                  []
                                    memory > xs
                                    seq > @
                                      (((unsupported)) ((xException)))
                                        while.
                                          TRUE
                                          [unused]
                                            seq > @
                                              seq
                                                (((unsupported)) ((xIndexError)))
                                                  xs.write ((((xqueue).xpopleft)) 0)
                                                  (((unsupported)) 0)
                                                bogusForceDataize.write ((((xbufio).xwrite)) ((xs)))
                                        seq
                                          bogusForceDataize.write ((((xerrors).xappend)) ((xe)))
                                          (((unsupported)) 0)
                                xthreads.write (((unsupported)) ((((unsupported)) (((xthreading).xThread)) ((xf)))) ((xx)) ((((xrange)) (20))))
                                (((unsupported)) (((((xsupport).xstart_threads)) ((xthreads)))))
                                  bogusForceDataize.write ((((xtime).xsleep)) (0.02))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((xerrors)) (("the following exceptions were caught: %r".mod (xerrors))))
                                bogusForceDataize.write ((((xbufio).xclose)) 0)
                            (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                              xs.write ((((xf).xread)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (256))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((xbytes)) ((((unsupported)) ((xi)))))))) ((xN)))
                          bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_misbehaved_io.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMisbehavedRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)) (5))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xtell)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xbufio).xwrite)) ("abcdef"))
                        (((unsupported)) (((xbufio).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_max_buffer_size_removal.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                        bogusForceDataize.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (8) (12))
                xtest_write_error_on_close.write
                  [xself]
                    memory > xbad_write
                    memory > xraw
                    memory > xb
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) 0)
                        xbad_write.write
                          [xb]
                            seq > @
                              (((unsupported)) ((((xOSError)) 0)))
                        (((unsupported)) (((xraw).xwrite)) ((xbad_write)))
                        xb.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xb).xwrite)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xb).xclose)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xb).xclosed)))
                xtest_slow_close_from_thread.write
                  [xself]
                    memory > xt
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xSlowFlushRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)) (8))
                        xt.write (((unsupported)) (((xthreading).xThread)) (((xbufio).xclose)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        bogusForceDataize.write (((((xrawio).xin_flush).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xwrite)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbufio).xclosed)))
                        bogusForceDataize.write ((((xt).xjoin)) 0)
            (((unsupported)) ((xBufferedWriterTest)) ((xSizeofTest)))
              seq
                xtp.write ((xio).xBufferedWriter)
                xtest_constructor.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xBufferedWriterTest).xtest_constructor)) ((xself)))
                        (((xsys).xmaxsize).greater 2147483647).if
                          seq
                            xrawio.write ((((xself).xMockRawIO)) 0)
                            xbufio.write ((((xself).xtp)) ((xrawio)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)) ((xValueError)))) (((xbufio).x__init__)) ((xrawio)) (((xsys).xmaxsize)))
                xtest_initialization.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xMockRawIO)) 0)
                        xbufio.write ((((xself).xtp)) ((xrawio)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xwrite)) ("def"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((16.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xwrite)) ("def"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xbufio).x__init__)) ((xrawio)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xwrite)) ("def"))
                xtest_garbage_collection.write
                  [xself]
                    memory > xwr
                    memory > xf
                    memory > xrawio
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xrawio.write ((((xself).xFileIO)) (((xsupport).xTESTFN)) ("w+b"))
                            xf.write ((((xself).xtp)) ((xrawio)))
                            bogusForceDataize.write ((((xf).xwrite)) ("123xxx"))
                            (((unsupported)) (((xf).xx)) ((xf)))
                            xwr.write ((((xweakref).xref)) ((xf)))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("123xxx"))
                xtest_args_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("BufferedWriter"))))
                        bogusForceDataize.write ((((xself).xtp)) (((((xio).xBytesIO)) 0)) (1024) (1024) (1024))
            (((unsupported)) ((xBufferedWriterTest)))
              xtp.write ((xpyio).xBufferedWriter)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xpair).xclosed)))
                xtest_uninitialized.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        (((unsupported)) ((((unsupported)) ((xpair)))))
                        xpair.write (((((xself).xtp).x__new__)) (((xself).xtp)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((((unsupported)) ((xValueError)) ((xAttributeError)))) ("uninitialized|has no attribute") (((xpair).xread)) (0))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((((unsupported)) ((xValueError)) ((xAttributeError)))) ("uninitialized|has no attribute") (((xpair).xwrite)) (""))
                        bogusForceDataize.write ((((xpair).x__init__)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xwrite)) (""))) (0))
                xtest_detach.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xpair).xdetach)))
                xtest_constructor_max_buffer_size_removal.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                        bogusForceDataize.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)) (8) (12))
                xtest_constructor_with_not_readable.write
                  [xself]
                    memory > xreadable
                    seq > @
                      seq
                        (((unsupported)) ((xMockRawIO)))
                          xreadable.write
                            [xself]
                              seq > @
                                (((unsupported)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xself).xtp)) ((((xNotReadable)) 0)) (((((xself).xMockRawIO)) 0)))
                xtest_constructor_with_not_writeable.write
                  [xself]
                    memory > xwritable
                    seq > @
                      seq
                        (((unsupported)) ((xMockRawIO)))
                          xwritable.write
                            [xself]
                              seq > @
                                (((unsupported)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xself).xtp)) (((((xself).xMockRawIO)) 0)) ((((xNotWriteable)) 0)))
                xtest_read.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xBytesIO)) ("abcdef"))) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) (3))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) (1))) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) 0)) ("ef"))
                        xpair.write ((((xself).xtp)) (((((xself).xBytesIO)) ("abc"))) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) ("None: is there a None literal in the EO language?"))) ("abc"))
                xtest_readlines.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write (((unsupported)) (((((xself).xtp)) (((((xself).xBytesIO)) ("abcndefnh"))) (((((xself).xMockRawIO)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xpair)) 0).xreadlines)) 0)) ((((unsupported)) ("abcn") ("defn") ("h"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xpair)) 0).xreadlines)) 0)) ((((unsupported)) ("abcn") ("defn") ("h"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xpair)) 0).xreadlines)) (5))) ((((unsupported)) ("abcn") ("defn"))))
                xtest_read1.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xBytesIO)) ("abcdef"))) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread1)) (3))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread1)) 0)) ("def"))
                xtest_readinto.write
                  [xself]
                    memory > xpair
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xmethod)) ((((unsupported)) ("readinto") ("readinto1"))))
                        (((unsupported)) (((((xself).xsubTest)) ((xmethod)))))
                          seq
                            xpair.write ((((xself).xtp)) (((((xself).xBytesIO)) ("abcdef"))) (((((xself).xMockRawIO)) 0)))
                            xdata.write (((xbyteslike)) (("0".mul 5)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xgetattr)) ((xpair)) ((xmethod)))) ((xdata)))) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xbytes)) ((xdata)))) ("abcde"))
                xtest_write.write
                  [xself]
                    memory > xw
                    memory > xpair
                    memory > xbuffer
                    seq > @
                      seq
                        xw.write ((((xself).xMockRawIO)) 0)
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) ((xw)))
                        bogusForceDataize.write ((((xpair).xwrite)) ("abc"))
                        bogusForceDataize.write ((((xpair).xflush)) 0)
                        xbuffer.write (((xbytearray)) ("def"))
                        bogusForceDataize.write ((((xpair).xwrite)) ((xbuffer)))
                        (((unsupported)) ((((unsupported)) ((xbuffer)) ((((unsupported)) 0)))) ("***"))
                        bogusForceDataize.write ((((xpair).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xw).x_write_stack)) ((((unsupported)) ("abc") ("def"))))
                xtest_peek.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xBytesIO)) ("abcdef"))) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xpair).xpeek)) (3)).xstartswith)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpair).xread)) (3))) ("abc"))
                xtest_readable.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xpair).xreadable)) 0)))
                xtest_writeable.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xpair).xwritable)) 0)))
                xtest_seekable.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xpair).xseekable)) 0)))
                xtest_close_and_closed.write
                  [xself]
                    memory > xpair
                    seq > @
                      seq
                        xpair.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xpair).xclosed)))
                        bogusForceDataize.write ((((xpair).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xpair).xclosed)))
                xtest_reader_close_error_on_close.write
                  [xself]
                    memory > xreader
                    memory > xpair
                    memory > xreader_close
                    memory > xwriter
                    seq > @
                      seq
                        xreader_close.write
                          []
                            seq > @
                              unsupported
                        xreader.write ((((xself).xMockRawIO)) 0)
                        (((unsupported)) (((xreader).xclose)) ((xreader_close)))
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        xpair.write ((((xself).xtp)) ((xreader)) ((xwriter)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          bogusForceDataize.write ((((xpair).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("reader_non_existing") ((((xstr)) (((xerr).xexception)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xpair).xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xreader).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xwriter).xclosed)))
                        (((unsupported)) (((xreader).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_writer_close_error_on_close.write
                  [xself]
                    memory > xreader
                    memory > xpair
                    memory > xwriter_close
                    memory > xwriter
                    seq > @
                      seq
                        xwriter_close.write
                          []
                            seq > @
                              unsupported
                        xreader.write ((((xself).xMockRawIO)) 0)
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        (((unsupported)) (((xwriter).xclose)) ((xwriter_close)))
                        xpair.write ((((xself).xtp)) ((xreader)) ((xwriter)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          bogusForceDataize.write ((((xpair).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("writer_non_existing") ((((xstr)) (((xerr).xexception)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xpair).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xreader).xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xwriter).xclosed)))
                        (((unsupported)) (((xwriter).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        xwriter.write "None: is there a None literal in the EO language?"
                        (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)))
                          seq
                            (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)))
                              seq
                                xpair.write "None: is there a None literal in the EO language?"
                                bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_reader_writer_close_error_on_close.write
                  [xself]
                    memory > xwriter_close
                    memory > xreader_close
                    memory > xwriter
                    memory > xreader
                    memory > xpair
                    seq > @
                      seq
                        xreader_close.write
                          []
                            seq > @
                              unsupported
                        xwriter_close.write
                          []
                            seq > @
                              unsupported
                        xreader.write ((((xself).xMockRawIO)) 0)
                        (((unsupported)) (((xreader).xclose)) ((xreader_close)))
                        xwriter.write ((((xself).xMockRawIO)) 0)
                        (((unsupported)) (((xwriter).xclose)) ((xwriter_close)))
                        xpair.write ((((xself).xtp)) ((xreader)) ((xwriter)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          bogusForceDataize.write ((((xpair).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("reader_non_existing") ((((xstr)) (((xerr).xexception)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xerr).xexception).x__context__)) ((xNameError)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("writer_non_existing") ((((xstr)) ((((xerr).xexception).x__context__)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xpair).xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xreader).xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xwriter).xclosed)))
                        (((unsupported)) (((xreader).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xwriter).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_isatty.write
                  [xself]
                    memory > xpair
                    memory > x__init__
                    memory > xisatty
                    seq > @
                      seq
                        (((unsupported)) ((xMockRawIO)))
                          seq
                            x__init__.write
                              [xself xisatty]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xMockRawIO).x__init__)) ((xself)))
                                    (((unsupported)) (((xself).x_isatty)) ((xisatty)))
                            xisatty.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).x_isatty)))
                        xpair.write ((((xself).xtp)) ((((xSelectableIsAtty)) (FALSE))) ((((xSelectableIsAtty)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xpair).xisatty)) 0)))
                        xpair.write ((((xself).xtp)) ((((xSelectableIsAtty)) (TRUE))) ((((xSelectableIsAtty)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xpair).xisatty)) 0)))
                        xpair.write ((((xself).xtp)) ((((xSelectableIsAtty)) (FALSE))) ((((xSelectableIsAtty)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xpair).xisatty)) 0)))
                        xpair.write ((((xself).xtp)) ((((xSelectableIsAtty)) (TRUE))) ((((xSelectableIsAtty)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xpair).xisatty)) 0)))
                xtest_weakref_clearing.write
                  [xself]
                    memory > xbrw
                    memory > xref
                    seq > @
                      seq
                        xbrw.write ((((xself).xtp)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                        xref.write ((((xweakref).xref)) ((xbrw)))
                        xbrw.write "None: is there a None literal in the EO language?"
                        xref.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xBufferedRWPairTest)))
              xtp.write ((xio).xBufferedRWPair)
            (((unsupported)) ((xBufferedRWPairTest)))
              xtp.write ((xpyio).xBufferedRWPair)
            (((unsupported)) ((xBufferedReaderTest)) ((xBufferedWriterTest)))
              seq
                xread_mode.write "rb+"
                xwrite_mode.write "wb+"
                xtest_constructor.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBufferedReaderTest).xtest_constructor)) ((xself)))
                        bogusForceDataize.write ((((xBufferedWriterTest).xtest_constructor)) ((xself)))
                xtest_uninitialized.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBufferedReaderTest).xtest_uninitialized)) ((xself)))
                        bogusForceDataize.write ((((xBufferedWriterTest).xtest_uninitialized)) ((xself)))
                xtest_read_and_write.write
                  [xself]
                    memory > xraw
                    memory > xrw
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) ((((unsupported)) ("asdf") ("ghjk"))))
                        xrw.write ((((xself).xtp)) ((xraw)) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("as") (((((xrw).xread)) (2))))
                        bogusForceDataize.write ((((xrw).xwrite)) ("ddd"))
                        bogusForceDataize.write ((((xrw).xwrite)) ("eee"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xraw).x_write_stack)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("ghjk") (((((xrw).xread)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("dddeee") ((((unsupported)) (((xraw).x_write_stack)) (0))))
                xtest_seek_and_tell.write
                  [xself]
                    memory > xraw
                    memory > xrw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) ("asdfghjkl"))
                        xrw.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("as") (((((xrw).xread)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) (((((xrw).xtell)) 0)))
                        bogusForceDataize.write ((((xrw).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("asdf") (((((xrw).xread)) (4))))
                        bogusForceDataize.write ((((xrw).xwrite)) ("123f"))
                        bogusForceDataize.write ((((xrw).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("asdf123fl") (((((xrw).xread)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (9) (((((xrw).xtell)) 0)))
                        bogusForceDataize.write ((((xrw).xseek)) ((4.neg)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (5) (((((xrw).xtell)) 0)))
                        bogusForceDataize.write ((((xrw).xseek)) (2) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (7) (((((xrw).xtell)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("fl") (((((xrw).xread)) (11))))
                        bogusForceDataize.write ((((xrw).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("asdf123fl") (((((xraw).xgetvalue)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xrw).xseek)) (0.0))
                xcheck_flush_and_read.write
                  [xself xread_func]
                    memory > xbufio
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) ("abcdefghi"))
                        xbufio.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("ab") ((((xread_func)) ((xbufio)) (2))))
                        bogusForceDataize.write ((((xbufio).xwrite)) ("12"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("ef") ((((xread_func)) ((xbufio)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (6) (((((xbufio).xtell)) 0)))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (6) (((((xbufio).xtell)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("ghi") ((((xread_func)) ((xbufio)))))
                        bogusForceDataize.write ((((xraw).xseek)) (0) (0))
                        bogusForceDataize.write ((((xraw).xwrite)) ("XYZ"))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xbufio).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("XYZ") ((((xread_func)) ((xbufio)) (3))))
                xtest_flush_and_read.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flush_and_read)) ((((unsupported)) (((((xbufio).xread)) ((((unsupported)) ((xargs)))))))))
                xtest_flush_and_readinto.write
                  [xself]
                    memory > x_readinto
                    seq > @
                      seq
                        x_readinto.write
                          [xbufio xn]
                            memory > xb
                            seq > @
                              (((unsupported)) 0)
                                xb.write (((xbytearray)) ((((xn).geq 0).if (xn) 9999)))
                                xn.write ((((xbufio).xreadinto)) ((xb)))
                                (((unsupported)) ((((xbytes)) ((((unsupported)) ((xb)) ((((unsupported)) ((xn)))))))))
                        bogusForceDataize.write ((((xself).xcheck_flush_and_read)) ((x_readinto)))
                xtest_flush_and_peek.write
                  [xself]
                    memory > x_peek
                    seq > @
                      seq
                        x_peek.write
                          [xbufio xn]
                            memory > xb
                            seq > @
                              (((unsupported)) 0)
                                xb.write ((((xbufio).xpeek)) ((xn)))
                                ((xn).neq (1.neg)).if
                                  xb.write (((unsupported)) ((xb)) ((((unsupported)) ((xn)))))
                                bogusForceDataize.write ((((xbufio).xseek)) ((((xlen)) ((xb)))) (1))
                                (((unsupported)) ((xb)))
                        bogusForceDataize.write ((((xself).xcheck_flush_and_read)) ((x_peek)))
                xtest_flush_and_write.write
                  [xself]
                    memory > xbufio
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) ("abcdefghi"))
                        xbufio.write ((((xself).xtp)) ((xraw)))
                        bogusForceDataize.write ((((xbufio).xwrite)) ("123"))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xbufio).xwrite)) ("45"))
                        bogusForceDataize.write ((((xbufio).xflush)) 0)
                        bogusForceDataize.write ((((xbufio).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("12345fghi") (((((xraw).xgetvalue)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("12345fghi") (((((xbufio).xread)) 0)))
                xtest_threads.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBufferedReaderTest).xtest_threads)) ((xself)))
                        bogusForceDataize.write ((((xBufferedWriterTest).xtest_threads)) ((xself)))
                xtest_writes_and_peek.write
                  [xself]
                    memory > x_peek
                    seq > @
                      seq
                        x_peek.write
                          [xbufio]
                            seq > @
                              bogusForceDataize.write ((((xbufio).xpeek)) (1))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_peek)))
                        x_peek.write
                          [xbufio]
                            memory > xpos
                            seq > @
                              seq
                                xpos.write ((((xbufio).xtell)) 0)
                                bogusForceDataize.write ((((xbufio).xseek)) ((1.neg)) (1))
                                bogusForceDataize.write ((((xbufio).xpeek)) (1))
                                bogusForceDataize.write ((((xbufio).xseek)) ((xpos)) (0))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_peek)))
                xtest_writes_and_reads.write
                  [xself]
                    memory > x_read
                    seq > @
                      seq
                        x_read.write
                          [xbufio]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xbufio).xseek)) ((1.neg)) (1))
                                bogusForceDataize.write ((((xbufio).xread)) (1))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_read)))
                xtest_writes_and_read1s.write
                  [xself]
                    memory > x_read1
                    seq > @
                      seq
                        x_read1.write
                          [xbufio]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xbufio).xseek)) ((1.neg)) (1))
                                bogusForceDataize.write ((((xbufio).xread1)) (1))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_read1)))
                xtest_writes_and_readintos.write
                  [xself]
                    memory > x_read
                    seq > @
                      seq
                        x_read.write
                          [xbufio]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xbufio).xseek)) ((1.neg)) (1))
                                bogusForceDataize.write ((((xbufio).xreadinto)) ((((xbytearray)) (1))))
                        bogusForceDataize.write ((((xself).xcheck_writes)) ((x_read)))
                xtest_write_after_readahead.write
                  [xself]
                    memory > xraw
                    memory > xs
                    memory > xbufio
                    seq > @
                      (((unsupported)) ((xoverwrite_size)) ((((unsupported)) (1) (5))))
                        seq
                          xraw.write ((((xself).xBytesIO)) (("A".mul 10)))
                          xbufio.write ((((xself).xtp)) ((xraw)) (4))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) (1))) ("A"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtell)) 0)) (1))
                          bogusForceDataize.write ((((xbufio).xwrite)) (("B".mul (xoverwrite_size))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtell)) 0)) (((xoverwrite_size).add 1)))
                          bogusForceDataize.write ((((xbufio).xflush)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtell)) 0)) (((xoverwrite_size).add 1)))
                          xs.write ((((xraw).xgetvalue)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((("A".add ("B".mul (xoverwrite_size))).add ("A".mul (9.sub (xoverwrite_size))))))
                xtest_write_rewind_write.write
                  [xself]
                    memory > xexpected
                    memory > xb
                    memory > xraw
                    memory > xbufio
                    memory > xmutate
                    seq > @
                      seq
                        xmutate.write
                          [xbufio xpos1 xpos2]
                            seq > @
                              seq
                                (((unsupported)) (((xpos2).geq (xpos1))))
                                bogusForceDataize.write ((((xbufio).xseek)) ((xpos1)))
                                bogusForceDataize.write ((((xbufio).xread)) (((xpos2).sub (xpos1))))
                                bogusForceDataize.write ((((xbufio).xwrite)) ("x02"))
                                bogusForceDataize.write ((((xbufio).xseek)) ((xpos1)))
                                bogusForceDataize.write ((((xbufio).xwrite)) ("x01"))
                        xb.write "x80x81x82x83x84"
                        (((unsupported)) ((xi)) ((((xrange)) (0) ((((xlen)) ((xb)))))))
                          (((unsupported)) ((xj)) ((((xrange)) ((xi)) ((((xlen)) ((xb)))))))
                            seq
                              xraw.write ((((xself).xBytesIO)) ((xb)))
                              xbufio.write ((((xself).xtp)) ((xraw)) (100))
                              bogusForceDataize.write (((xmutate)) ((xbufio)) ((xi)) ((xj)))
                              bogusForceDataize.write ((((xbufio).xflush)) 0)
                              xexpected.write (((xbytearray)) ((xb)))
                              (((unsupported)) ((((unsupported)) ((xexpected)) ((xj)))) (2))
                              (((unsupported)) ((((unsupported)) ((xexpected)) ((xi)))) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ((xexpected)) (("failed result for i=%d, j=%d".mod (((unsupported)) ((xi)) ((xj))))))
                xtest_truncate_after_read_or_write.write
                  [xself]
                    memory > xbufio
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) (("A".mul 10)))
                        xbufio.write ((((xself).xtp)) ((xraw)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xread)) (2))) ("AA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtruncate)) 0)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xwrite)) ("BB"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbufio).xtruncate)) 0)) (4))
                xtest_misbehaved_io.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBufferedReaderTest).xtest_misbehaved_io)) ((xself)))
                        bogusForceDataize.write ((((xBufferedWriterTest).xtest_misbehaved_io)) ((xself)))
                xtest_interleaved_read_write.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xBytesIO)) ("abcdefgh"))) ((xraw)))
                          (((unsupported)) (((((xself).xtp)) ((xraw)) (100))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)) ("1"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ("b"))
                              bogusForceDataize.write ((((xf).xwrite)) ("2"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread1)) (1))) ("d"))
                              bogusForceDataize.write ((((xf).xwrite)) ("3"))
                              xbuf.write (((xbytearray)) (1))
                              bogusForceDataize.write ((((xf).xreadinto)) ((xbuf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ("f"))
                              bogusForceDataize.write ((((xf).xwrite)) ("4"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xpeek)) (1))) ("h"))
                              bogusForceDataize.write ((((xf).xflush)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("1b2d3f4h"))
                        (((unsupported)) (((((xself).xBytesIO)) ("abc"))) ((xraw)))
                          (((unsupported)) (((((xself).xtp)) ((xraw)) (100))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ("a"))
                              bogusForceDataize.write ((((xf).xwrite)) ("2"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ("c"))
                              bogusForceDataize.write ((((xf).xflush)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("a2c"))
                xtest_interleaved_readline_write.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xBytesIO)) ("abncdefngn"))) ((xraw)))
                        (((unsupported)) (((((xself).xtp)) ((xraw)))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)) ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("bn"))
                            bogusForceDataize.write ((((xf).xwrite)) ("2"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("defn"))
                            bogusForceDataize.write ((((xf).xwrite)) ("3"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("n"))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("1bn2defn3n"))
                xtest_unseekable.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xBufferedRandomTest)) ((xSizeofTest)))
              seq
                xtp.write ((xio).xBufferedRandom)
                xtest_constructor.write
                  [xself]
                    memory > xbufio
                    memory > xrawio
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xBufferedRandomTest).xtest_constructor)) ((xself)))
                        (((xsys).xmaxsize).greater 2147483647).if
                          seq
                            xrawio.write ((((xself).xMockRawIO)) 0)
                            xbufio.write ((((xself).xtp)) ((xrawio)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)) ((xValueError)))) (((xbufio).x__init__)) ((xrawio)) (((xsys).xmaxsize)))
                xtest_garbage_collection.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xCBufferedReaderTest).xtest_garbage_collection)) ((xself)))
                        bogusForceDataize.write ((((xCBufferedWriterTest).xtest_garbage_collection)) ((xself)))
                xtest_args_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("BufferedRandom"))))
                        bogusForceDataize.write ((((xself).xtp)) (((((xio).xBytesIO)) 0)) (1024) (1024) (1024))
            (((unsupported)) ((xBufferedRandomTest)))
              xtp.write ((xpyio).xBufferedRandom)
            (((unsupported)) (((xcodecs).xIncrementalDecoder)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xerrors]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xcodecs).xIncrementalDecoder).x__init__)) ((xself)) ((xerrors)))
                        bogusForceDataize.write ((((xself).xreset)) 0)
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)) (("<SID %x>".mod (((xid)) ((xself))))))
                xreset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xi)) (1))
                        (((unsupported)) (((xself).xo)) (1))
                        (((unsupported)) (((xself).xbuffer)) ((((xbytearray)) 0)))
                xgetstate.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xi)) ((xo)))) ((((unsupported)) ((((unsupported)) (((xself).xi)) (1))) ((((unsupported)) (((xself).xo)) (1))))))
                        (((unsupported)) ((((unsupported)) ((((xbytes)) (((xself).xbuffer)))) ((((xi).mul 100).add (xo))))))
                xsetstate.write
                  [xself xstate]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xbuffer)) ((xio)))) ((xstate)))
                        (((unsupported)) (((xself).xbuffer)) ((((xbytearray)) ((xbuffer)))))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xo)))) ((((xdivmod)) ((xio)) (100))))
                        (((unsupported)) ((((unsupported)) (((xself).xi)) (((xself).xo)))) ((((unsupported)) ((((unsupported)) ((xi)) (1))) ((((unsupported)) ((xo)) (1))))))
                xdecode.write
                  [xself xinput xfinal]
                    memory > xoutput
                    seq > @
                      (((unsupported)) 0)
                        xoutput.write ""
                        (((unsupported)) ((xb)) ((xinput)))
                          (((xself).xi).eq 0).if
                            ((xb).eq (((xord)) ("."))).if
                              ((xself).xbuffer).if
                                (((unsupported)) ((xoutput)) (((((xself).xprocess_word)) 0)))
                              bogusForceDataize.write (((((xself).xbuffer).xappend)) ((xb)))
                            seq
                              bogusForceDataize.write (((((xself).xbuffer).xappend)) ((xb)))
                              ((((xlen)) (((xself).xbuffer))).eq ((xself).xi)).if
                                (((unsupported)) ((xoutput)) (((((xself).xprocess_word)) 0)))
                        ((xfinal).and ((xself).xbuffer)).if
                          (((unsupported)) ((xoutput)) (((((xself).xprocess_word)) 0)))
                        (((unsupported)) ((xoutput)))
                xprocess_word.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write ""
                        ((((unsupported)) (((xself).xbuffer)) (0)).eq (((xord)) ("i"))).if
                          (((unsupported)) (((xself).xi)) ((((xmin)) (99) ((((xint)) (((((unsupported)) (((xself).xbuffer)) ((((unsupported)) (1)))).or 0)))))))
                          ((((unsupported)) (((xself).xbuffer)) (0)).eq (((xord)) ("o"))).if
                            (((unsupported)) (((xself).xo)) ((((xmin)) (99) ((((xint)) (((((unsupported)) (((xself).xbuffer)) ((((unsupported)) (1)))).or 0)))))))
                            seq
                              xoutput.write (((((xself).xbuffer).xdecode)) ("ascii"))
                              ((((xlen)) ((xoutput))).less ((xself).xo)).if
                                (((unsupported)) ((xoutput)) (("-".mul ((xself).xo))))
                              ((xself).xo).if
                                xoutput.write (((unsupported)) ((xoutput)) ((((unsupported)) (((xself).xo)))))
                              (((unsupported)) ((xoutput)) ("."))
                        (((unsupported)) (((xself).xbuffer)) ((((xbytearray)) 0)))
                        (((unsupported)) ((xoutput)))
                xcodecEnabled.write FALSE
                xlookupTestDecoder.write
                  [xcls xname]
                    memory > xlatin1
                    seq > @
                      (((unsupported)) 0)
                        (((xcls).xcodecEnabled).and ((xname).eq "test_decoder")).if
                          seq
                            xlatin1.write ((((xcodecs).xlookup)) ("latin-1"))
                            (((unsupported)) ((((unsupported)) (((xcodecs).xCodecInfo)) ("test_decoder") (((xlatin1).xencode)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xcls)))))
            bogusForceDataize.write ((((xcodecs).xregister)) (((xStatefulIncrementalDecoder).xlookupTestDecoder)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_cases.write (((unsupported)) ((((unsupported)) ("abcd") (FALSE) ("a.b.c.d."))) ((((unsupported)) ("oiabcd") (TRUE) ("abcd."))) ((((unsupported)) ("oi...abcd...") (TRUE) ("abcd."))) ((((unsupported)) ("i.o6.x.xyz.toolongtofit.") (FALSE) ("x-----.xyz---.toolon."))) ((((unsupported)) ("i.i2.o6xyz") (TRUE) ("xy----.z-----."))) ((((unsupported)) ("i.o3.i6.abcdefghijklmnop") (TRUE) ("abc.ghi.mno."))) ((((unsupported)) ("i.o29.a.b.cde.o15.abcdefghijabcdefghij.i3.a.b.c.d.ei00k.l.m") (TRUE) (((((((((("a----------------------------.".add "b----------------------------.").add "cde--------------------------.").add "abcdefghijabcde.").add "a.b------------.").add ".c.------------.").add "d.e------------.").add "k--------------.").add "l--------------.").add "m--------------.")))))
                xtest_decoder.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xinput)) ((xeof)) ((xoutput)))) (((xself).xtest_cases)))
                          seq
                            xd.write (((xStatefulIncrementalDecoder)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) ((xinput)) ((xeof)))) ((xoutput)))
                        xd.write (((xStatefulIncrementalDecoder)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) ("oiabcd"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) ("") (1))) ("abcd."))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xtestdata)) ("AAArnBBBrCCCrnDDDnEEErn"))
                        (((unsupported)) (((xself).xnormalized)) (((("AAAnBBBnCCCnDDDnEEEn".xdecode)) ("ascii"))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_constructor.write
                  [xself]
                    memory > xt
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) ("xc3xa9nn"))
                        xb.write ((((xself).xBufferedReader)) ((xr)) (1000))
                        xt.write ((((xself).xTextIOWrapper)) ((xb)))
                        (((unsupported)) (((xt).x__init__)) ((xb)) ("latin-1") ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xencoding)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xline_buffering)) (FALSE))
                        (((unsupported)) (((xt).x__init__)) ((xb)) ("utf-8") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xline_buffering)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xe9n") (((((xt).xreadline)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xt).x__init__)) ((xb)) (42))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xt).x__init__)) ((xb)) ("xyzzy"))
                xtest_uninitialized.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((((xself).xTextIOWrapper).x__new__)) (((xself).xTextIOWrapper)))
                        (((unsupported)) ((((unsupported)) ((xt)))))
                        xt.write (((((xself).xTextIOWrapper).x__new__)) (((xself).xTextIOWrapper)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) ((xrepr)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((((unsupported)) ((xValueError)) ((xAttributeError)))) ("uninitialized|has no attribute") (((xt).xread)) (0))
                        bogusForceDataize.write ((((xt).x__init__)) (((((xself).xMockRawIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xt).xread)) (0))) (""))
                xtest_non_text_encoding_codecs_are_rejected.write
                  [xself]
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) 0)
                        xb.write ((((xself).xBufferedWriter)) ((xr)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ("is not a text encoding"))))
                          (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("hex"))
                xtest_detach.write
                  [xself]
                    memory > xt
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) 0)
                        xb.write ((((xself).xBufferedWriter)) ((xr)))
                        xt.write ((((xself).xTextIOWrapper)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xt).xdetach)) 0)) ((xb)))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii"))
                        bogusForceDataize.write ((((xt).xwrite)) ("howdy"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xr).xgetvalue)) 0)))
                        bogusForceDataize.write ((((xt).xdetach)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("howdy"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xt).xdetach)))
                        bogusForceDataize.write (((xrepr)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xencoding)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xerrors)) ("strict"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xt).xline_buffering)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xt).xwrite_through)))
                xtest_repr.write
                  [xself]
                    memory > xt
                    memory > xraw
                    memory > xb
                    memory > xmodname
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) (((("hello".xencode)) ("utf-8"))))
                        xb.write ((((xself).xBufferedReader)) ((xraw)))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("utf-8"))
                        xmodname.write (((xself).xTextIOWrapper).x__module__)
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xt)))) (("<(%s.)?TextIOWrapper encoding='utf-8'>".mod (xmodname))))
                        (((unsupported)) (((xraw).xname)) ("dummy"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xt)))) (("<(%s.)?TextIOWrapper name='dummy' encoding='utf-8'>".mod (xmodname))))
                        (((unsupported)) (((xt).xmode)) ("r"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xt)))) (("<(%s.)?TextIOWrapper name='dummy' mode='r' encoding='utf-8'>".mod (xmodname))))
                        (((unsupported)) (((xraw).xname)) ("dummy"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xt)))) (("<(%s.)?TextIOWrapper name=b'dummy' mode='r' encoding='utf-8'>".mod (xmodname))))
                        bogusForceDataize.write (((((xt).xbuffer).xdetach)) 0)
                        bogusForceDataize.write (((xrepr)) ((xt)))
                xtest_recursive_repr.write
                  [xself]
                    memory > xt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) 0)
                        xt.write ((((xself).xTextIOWrapper)) ((xraw)))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xraw)) ("name") ((xt)))))
                          (((unsupported)) ((xRuntimeError)))
                            bogusForceDataize.write (((xrepr)) ((xt)))
                xtest_line_buffering.write
                  [xself]
                    memory > xt
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) 0)
                        xb.write ((((xself).xBufferedWriter)) ((xr)) (1000))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("n") (TRUE))
                        bogusForceDataize.write ((((xt).xwrite)) ("X"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) (""))
                        bogusForceDataize.write ((((xt).xwrite)) ("YnZ"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("XYnZ"))
                        bogusForceDataize.write ((((xt).xwrite)) ("ArB"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("XYnZArB"))
                xtest_reconfigure_line_buffering.write
                  [xself]
                    memory > xt
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) 0)
                        xb.write ((((xself).xBufferedWriter)) ((xr)) (1000))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("n") (FALSE))
                        bogusForceDataize.write ((((xt).xwrite)) ("ABnC"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) (""))
                        (((unsupported)) (((xt).xreconfigure)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("ABnC"))
                        bogusForceDataize.write ((((xt).xwrite)) ("DEFnG"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("ABnCDEFnG"))
                        bogusForceDataize.write ((((xt).xwrite)) ("H"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("ABnCDEFnG"))
                        (((unsupported)) (((xt).xreconfigure)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("ABnCDEFnGH"))
                        bogusForceDataize.write ((((xt).xwrite)) ("IJ"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgetvalue)) 0)) ("ABnCDEFnGH"))
                        bogusForceDataize.write ((((xt).xreconfigure)) 0)
                        (((unsupported)) (((xt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xline_buffering)) (FALSE))
                        (((unsupported)) (((xt).xreconfigure)) (TRUE))
                        bogusForceDataize.write ((((xt).xreconfigure)) 0)
                        (((unsupported)) (((xt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xline_buffering)) (TRUE))
                xtest_default_encoding.write
                  [xself]
                    memory > xb
                    memory > xold_environ
                    memory > xt
                    memory > xcurrent_locale_encoding
                    seq > @
                      (((unsupported)) 0)
                        xold_environ.write (((xdict)) (((xos).xenviron)))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xkey)) ((((unsupported)) ("LC_ALL") ("LANG") ("LC_CTYPE"))))
                              (((unsupported)) ((xkey)) (((xos).xenviron))).if
                                (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xkey)))))))
                            xcurrent_locale_encoding.write ((((xlocale).xgetpreferredencoding)) (FALSE))
                            xb.write ((((xself).xBytesIO)) 0)
                            xt.write ((((xself).xTextIOWrapper)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xencoding)) ((xcurrent_locale_encoding)))
                          seq
                            bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                            bogusForceDataize.write (((((xos).xenviron).xupdate)) ((xold_environ)))
                xtest_device_encoding.write
                  [xself]
                    memory > xb
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xb.write ((((xself).xBytesIO)) 0)
                        (((unsupported)) (((xb).xfileno)) ((((unsupported)) ((((x_testcapi).xINT_MAX).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xself).xTextIOWrapper)) ((xb)))
                        (((unsupported)) (((xb).xfileno)) ((((unsupported)) ((((x_testcapi).xUINT_MAX).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xself).xTextIOWrapper)) ((xb)))
                xtest_encoding.write
                  [xself]
                    memory > xt
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xencoding)) ("utf-8"))
                        xt.write ((((xself).xTextIOWrapper)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((xt).xencoding)))
                        bogusForceDataize.write ((((xcodecs).xlookup)) (((xt).xencoding)))
                xtest_encoding_errors_reading.write
                  [xself]
                    memory > xt
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xBytesIO)) ("abcnxffn"))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xt).xread)))
                        xb.write ((((xself).xBytesIO)) ("abcnxffn"))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("strict"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xt).xread)))
                        xb.write ((((xself).xBytesIO)) ("abcnxffn"))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xt).xread)) 0)) ("abcnn"))
                        xb.write ((((xself).xBytesIO)) ("abcnxffn"))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("replace"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xt).xread)) 0)) ("abcnufffdn"))
                xtest_encoding_errors_writing.write
                  [xself]
                    memory > xt
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xt).xwrite)) ("xff"))
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("strict"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xt).xwrite)) ("xff"))
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("ignore") ("n"))
                        bogusForceDataize.write ((((xt).xwrite)) ("abcxffdefn"))
                        bogusForceDataize.write ((((xt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xb).xgetvalue)) 0)) ("abcdefn"))
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii") ("replace") ("n"))
                        bogusForceDataize.write ((((xt).xwrite)) ("abcxffdefn"))
                        bogusForceDataize.write ((((xt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xb).xgetvalue)) 0)) ("abc?defn"))
                xtest_newlines.write
                  [xself]
                    memory > xdata
                    memory > xbufio
                    memory > xinput_lines
                    memory > xgot_lines
                    memory > xtests
                    memory > xencodings
                    memory > xtextio
                    memory > xc2
                    seq > @
                      seq
                        xinput_lines.write (((unsupported)) ("unixn") ("windowsrn") ("os9r") ("lastn") ("nonl"))
                        xtests.write (((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("unixn") ("windowsn") ("os9n") ("lastn") ("nonl"))))) ((((unsupported)) ("") ((xinput_lines)))) ((((unsupported)) ("n") ((((unsupported)) ("unixn") ("windowsrn") ("os9rlastn") ("nonl"))))) ((((unsupported)) ("rn") ((((unsupported)) ("unixnwindowsrn") ("os9rlastnnonl"))))) ((((unsupported)) ("r") ((((unsupported)) ("unixnwindowsr") ("nos9r") ("lastnnonl"))))))
                        xencodings.write (((unsupported)) ("utf-8") ("latin-1") ("utf-16") ("utf-16-le") ("utf-16-be") ("utf-32") ("utf-32-le") ("utf-32-be"))
                        (((unsupported)) ((xencoding)) ((xencodings)))
                          seq
                            xdata.write (((xbytes)) ((((((("".xjoin)) ((xinput_lines))).xencode)) ((xencoding)))))
                            (((unsupported)) ((xdo_reads)) ((((unsupported)) (FALSE) (TRUE))))
                              (((unsupported)) ((xbufsize)) ((((xrange)) (1) (10))))
                                (((unsupported)) ((((unsupported)) ((xnewline)) ((xexp_lines)))) ((xtests)))
                                  seq
                                    xbufio.write ((((xself).xBufferedReader)) (((((xself).xBytesIO)) ((xdata)))) ((xbufsize)))
                                    xtextio.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbufio)) ((xnewline)) ((xencoding)))
                                    (xdo_reads).if
                                      seq
                                        xgot_lines.write (((unsupported)) 0)
                                        while.
                                          TRUE
                                          [unused]
                                            seq > @
                                              seq
                                                xc2.write ((((xtextio).xread)) (2))
                                                ((xc2).eq "").if
                                                  (((unsupported)) 0)
                                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xc2)))) (2))
                                                bogusForceDataize.write ((((xgot_lines).xappend)) (((xc2).add ((((xtextio).xreadline)) 0))))
                                      xgot_lines.write (((xlist)) ((xtextio)))
                                    (((unsupported)) ((((unsupported)) ((xgot_line)) ((xexp_line)))) ((((xzip)) ((xgot_lines)) ((xexp_lines)))))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((xgot_line)) ((xexp_line)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xgot_lines)))) ((((xlen)) ((xexp_lines)))))
                xtest_newlines_input.write
                  [xself]
                    memory > xtxt
                    memory > xbuf
                    memory > xnormalized
                    memory > xtestdata
                    seq > @
                      seq
                        xtestdata.write "AAAnBBx00BnCCCrDDDrEEErnFFFrnGGG"
                        xnormalized.write (((((((xtestdata).xreplace)) ("rn") ("n")).xreplace)) ("r") ("n"))
                        (((unsupported)) ((((unsupported)) ((xnewline)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) ((((((xnormalized).xdecode)) ("ascii")).xsplitlines)) (TRUE))))) ((((unsupported)) ("") ((((unsupported)) ((((((xtestdata).xdecode)) ("ascii")).xsplitlines)) (TRUE))))) ((((unsupported)) ("n") ((((unsupported)) ("AAAn") ("BBx00Bn") ("CCCrDDDrEEErn") ("FFFrn") ("GGG"))))) ((((unsupported)) ("rn") ((((unsupported)) ("AAAnBBx00BnCCCrDDDrEEErn") ("FFFrn") ("GGG"))))) ((((unsupported)) ("r") ((((unsupported)) ("AAAnBBx00BnCCCr") ("DDDr") ("EEEr") ("nFFFr") ("nGGG"))))))))
                          seq
                            xbuf.write ((((xself).xBytesIO)) ((xtestdata)))
                            xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuf)) ("ascii") ((xnewline)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadlines)) 0)) ((xexpected)))
                            bogusForceDataize.write ((((xtxt).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xread)) 0)) (((("".xjoin)) ((xexpected)))))
                xtest_newlines_output.write
                  [xself]
                    memory > xtxt
                    memory > xtests
                    memory > xbuf
                    memory > xtestdict
                    seq > @
                      seq
                        xtestdict.write (((unsupported)) ("") ("AAAnBBBnCCCnXrYrnZ") ("n") ("AAAnBBBnCCCnXrYrnZ") ("r") ("AAArBBBrCCCrXrYrrZ") ("rn") ("AAArnBBBrnCCCrnXrYrrnZ"))
                        xtests.write ((((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) ((xtestdict)) (((xos).xlinesep))))))).add (((xsorted)) (((((xtestdict).xitems)) 0))))
                        (((unsupported)) ((((unsupported)) ((xnewline)) ((xexpected)))) ((xtests)))
                          seq
                            xbuf.write ((((xself).xBytesIO)) 0)
                            xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuf)) ("ascii") ((xnewline)))
                            bogusForceDataize.write ((((xtxt).xwrite)) ("AAAnB"))
                            bogusForceDataize.write ((((xtxt).xwrite)) ("BBnCCCn"))
                            bogusForceDataize.write ((((xtxt).xwrite)) ("XrYrnZ"))
                            bogusForceDataize.write ((((xtxt).xflush)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xbuf).xclosed)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuf).xgetvalue)) 0)) ((xexpected)))
                xtest_destructor.write
                  [xself]
                    memory > xb
                    memory > xt
                    memory > xclose
                    memory > xl
                    memory > xbase
                    seq > @
                      seq
                        xl.write (((unsupported)) 0)
                        xbase.write ((xself).xBytesIO)
                        (((unsupported)) ((xbase)))
                          xclose.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xl).xappend)) (((((xself).xgetvalue)) 0)))
                                  bogusForceDataize.write ((((xbase).xclose)) ((xself)))
                        xb.write (((xMyBytesIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii"))
                        bogusForceDataize.write ((((xt).xwrite)) ("abc"))
                        (((unsupported)) ((((unsupported)) ((xt)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("abc"))) ((xl)))
                xtest_override_destructor.write
                  [xself]
                    memory > xrecord
                    memory > xb
                    memory > xflush
                    memory > x__del__
                    memory > xt
                    memory > xclose
                    seq > @
                      seq
                        xrecord.write (((unsupported)) 0)
                        (((unsupported)) (((xself).xTextIOWrapper)))
                          seq
                            x__del__.write
                              [xself]
                                memory > xf
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (1))
                                    (((unsupported)) ((xAttributeError)))
                                      xf.write ((((xsuper)) 0).x__del__)
                                      bogusForceDataize.write (((xf)) 0)
                            xclose.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (2))
                                    bogusForceDataize.write ((((((xsuper)) 0).xclose)) 0)
                            xflush.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xrecord).xappend)) (3))
                                    bogusForceDataize.write ((((((xsuper)) 0).xflush)) 0)
                        xb.write ((((xself).xBytesIO)) 0)
                        xt.write (((unsupported)) ((xMyTextIO)) ((xb)) ("ascii"))
                        (((unsupported)) ((((unsupported)) ((xt)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrecord)) ((((unsupported)) (1) (2) (3))))
                xtest_error_through_destructor.write
                  [xself]
                    memory > xrawio
                    seq > @
                      seq
                        xrawio.write ((((xself).xCloseFailureIO)) 0)
                        (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)) ((xcm)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              unsupported
                            ((xIOBASE_EMITS_UNRAISABLE).not).if
                              bogusForceDataize.write ((((xself).xassertIsNone)) (((xcm).xunraisable)))
                              (((unsupported)) (((xcm).xunraisable)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xunraisable).xexc_type)) ((xOSError)))
                xtest_basic_io.write
                  [xself]
                    memory > xcookie
                    memory > xf
                    seq > @
                      (((unsupported)) ((xchunksize)) ((((unsupported)) (1) (2) (3) (4) (5) (15) (16) (17) (31) (32) (33) (63) (64) (65))))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("ascii") ("latin-1") ("utf-8"))))
                          seq
                            xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w+") ((xenc)))
                            (((unsupported)) (((xf).x_CHUNK_SIZE)) ((xchunksize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("abc"))) (3))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r+") ((xenc)))
                            (((unsupported)) (((xf).x_CHUNK_SIZE)) ((xchunksize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("abc"))
                            xcookie.write ((((xf).xtell)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) ("None: is there a None literal in the EO language?"))) ("abc"))
                            bogusForceDataize.write ((((xf).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (2))) ("ab"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ("c"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xcookie)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) (0) (2))) ((xcookie)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xwrite)) ("def"))) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xseek)) ((xcookie)))) ((xcookie)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("def"))
                            ((((xenc).xstartswith)) ("utf")).if
                              bogusForceDataize.write ((((xself).xmulti_line_test)) ((xf)) ((xenc)))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                xmulti_line_test.write
                  [xself xf xenc]
                    memory > xrlines
                    memory > xsample
                    memory > xchars
                    memory > xline
                    memory > xwlines
                    memory > xpos
                    seq > @
                      seq
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        bogusForceDataize.write ((((xf).xtruncate)) 0)
                        xsample.write "sxffu0fffuffff"
                        xwlines.write (((unsupported)) 0)
                        (((unsupported)) ((xsize)) ((((unsupported)) (0) (1) (2) (3) (4) (5) (30) (31) (32) (33) (62) (63) (64) (65) (1000))))
                          seq
                            xchars.write (((unsupported)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) ((xsize)))))
                              bogusForceDataize.write ((((xchars).xappend)) ((((unsupported)) ((xsample)) (((xi).mod (((xlen)) ((xsample))))))))
                            xline.write (((("".xjoin)) ((xchars))).add "n")
                            bogusForceDataize.write ((((xwlines).xappend)) ((((unsupported)) (((((xf).xtell)) 0)) ((xline)))))
                            bogusForceDataize.write ((((xf).xwrite)) ((xline)))
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        xrlines.write (((unsupported)) 0)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xpos.write ((((xf).xtell)) 0)
                                xline.write ((((xf).xreadline)) 0)
                                ((xline).not).if
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xrlines).xappend)) ((((unsupported)) ((xpos)) ((xline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrlines)) ((xwlines)))
                xtest_telling.write
                  [xself]
                    memory > xp1
                    memory > xp0
                    memory > xf
                    memory > xp2
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w+") ("utf-8"))
                        xp0.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xf).xwrite)) ("xffn"))
                        xp1.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xf).xwrite)) ("xffn"))
                        xp2.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xp0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("xffn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xp1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("xffn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xp2)))
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        (((unsupported)) ((xline)) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) ("xffn"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xf).xtell)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xp2)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_seeking.write
                  [xself]
                    memory > xprefix_size
                    memory > xu_prefix
                    memory > xprefix
                    memory > xs
                    memory > xchunk_size
                    memory > xu_suffix
                    memory > xsuffix
                    memory > xline
                    seq > @
                      seq
                        xchunk_size.write (((x_default_chunk_size)) 0)
                        xprefix_size.write ((xchunk_size).sub 2)
                        xu_prefix.write ("a".mul (xprefix_size))
                        xprefix.write (((xbytes)) (((((xu_prefix).xencode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xu_prefix)))) ((((xlen)) ((xprefix)))))
                        xu_suffix.write "u8888n"
                        xsuffix.write (((xbytes)) (((((xu_suffix).xencode)) ("utf-8"))))
                        xline.write ((xprefix).add (xsuffix))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (((xline).mul 2)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r") ("utf-8"))) ((xf)))
                          seq
                            xs.write ((((xf).xread)) ((xprefix_size)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((xstr)) ((xprefix)) ("ascii"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xprefix_size)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ((xu_suffix)))
                xtest_seeking_too.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "xe0xbfxbfn"
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r") ("utf-8"))) ((xf)))
                          seq
                            unsupported
                            (((unsupported)) (((xf).x_CHUNK_SIZE)) (2))
                            bogusForceDataize.write ((((xf).xreadline)) 0)
                            bogusForceDataize.write ((((xf).xtell)) 0)
                xtest_seek_and_tell.write
                  [xself]
                    memory > xmin_pos
                    memory > xCHUNK_SIZE
                    memory > xoffset
                    memory > xtest_seek_and_tell_with_data
                    memory > xprefix
                    seq > @
                      seq
                        xCHUNK_SIZE.write 128
                        xtest_seek_and_tell_with_data.write
                          [xdata xmin_pos]
                            memory > xcookie
                            memory > xf
                            memory > xdecoded
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) 0)
                                xf.write ((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))
                                bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                                bogusForceDataize.write ((((xf).xclose)) 0)
                                xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("test_decoder"))
                                (((unsupported)) (((xf).x_CHUNK_SIZE)) ((xCHUNK_SIZE)))
                                xdecoded.write ((((xf).xread)) 0)
                                bogusForceDataize.write ((((xf).xclose)) 0)
                                (((unsupported)) ((xi)) ((((xrange)) ((xmin_pos)) (((((xlen)) ((xdecoded))).add 1)))))
                                  (((unsupported)) ((xj)) ((((unsupported)) (1) (5) (((((xlen)) ((xdecoded))).sub (xi))))))
                                    seq
                                      xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("test_decoder"))
                                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) ((xi)))) ((((unsupported)) ((xdecoded)) ((((unsupported)) ((xi)))))))
                                      xcookie.write ((((xf).xtell)) 0)
                                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) ((xj)))) ((((unsupported)) ((xdecoded)) ((((unsupported)) ((xi)) (((xi).add (xj))))))))
                                      bogusForceDataize.write ((((xf).xseek)) ((xcookie)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ((((unsupported)) ((xdecoded)) ((((unsupported)) ((xi)))))))
                                      bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) (((xStatefulIncrementalDecoder).xcodecEnabled)) (1))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xinput)) ((x_)) ((x_)))) (((xStatefulIncrementalDecoderTest).xtest_cases)))
                              bogusForceDataize.write (((xtest_seek_and_tell_with_data)) ((xinput)))
                            (((unsupported)) ((((unsupported)) ((xinput)) ((x_)) ((x_)))) (((xStatefulIncrementalDecoderTest).xtest_cases)))
                              seq
                                xoffset.write ((xCHUNK_SIZE).sub (((unsupported)) ((((xlen)) ((xinput)))) (2)))
                                xprefix.write (".".mul (xoffset))
                                xmin_pos.write ((xoffset).mul 2)
                                bogusForceDataize.write (((xtest_seek_and_tell_with_data)) (((xprefix).add (xinput))) ((xmin_pos)))
                          (((unsupported)) (((xStatefulIncrementalDecoder).xcodecEnabled)) (0))
                xtest_multibyte_seek_and_tell.write
                  [xself]
                    memory > xp1
                    memory > xp0
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") ("euc_jp"))
                        bogusForceDataize.write ((((xf).xwrite)) ("ABnu3046u3048n"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r") ("euc_jp"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("ABn"))
                        xp0.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("u3046u3048n"))
                        xp1.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xf).xseek)) ((xp0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("u3046u3048n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) ((xp1)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_seek_with_encoder_state.write
                  [xself]
                    memory > xp0
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") ("euc_jis_2004"))
                        bogusForceDataize.write ((((xf).xwrite)) ("u00e6u0300"))
                        xp0.write ((((xf).xtell)) 0)
                        bogusForceDataize.write ((((xf).xwrite)) ("u00e6"))
                        bogusForceDataize.write ((((xf).xseek)) ((xp0)))
                        bogusForceDataize.write ((((xf).xwrite)) ("u0300"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("r") ("euc_jis_2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ("u00e6u0300u0300"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_encoded_writes.write
                  [xself]
                    memory > xtests
                    memory > xbuf
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xdata.write "1234567890"
                        xtests.write (((unsupported)) ("utf-16") ("utf-16-le") ("utf-16-be") ("utf-32") ("utf-32-le") ("utf-32-be"))
                        (((unsupported)) ((xencoding)) ((xtests)))
                          seq
                            xbuf.write ((((xself).xBytesIO)) 0)
                            xf.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuf)) ((xencoding)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                            bogusForceDataize.write ((((xf).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
                            bogusForceDataize.write ((((xf).xseek)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuf).xgetvalue)) 0)) ((((((xdata).mul 2).xencode)) ((xencoding)))))
                xtest_unreadable.write
                  [xself]
                    memory > xreadable
                    memory > xtxt
                    seq > @
                      seq
                        (((unsupported)) (((xself).xBytesIO)))
                          xreadable.write
                            [xself]
                              seq > @
                                (((unsupported)) (FALSE))
                        xtxt.write ((((xself).xTextIOWrapper)) ((((xUnReadable)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xtxt).xread)))
                xtest_read_one_by_one.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    memory > xc
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ("AArnBB"))))
                        xreads.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xc.write ((((xtxt).xread)) (1))
                                ((xc).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xreads)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) ("AAnBB"))
                xtest_readlines.write
                  [xself]
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ("AAnBBnCC"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadlines)) 0)) ((((unsupported)) ("AAn") ("BBn") ("CC"))))
                        bogusForceDataize.write ((((xtxt).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadlines)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("AAn") ("BBn") ("CC"))))
                        bogusForceDataize.write ((((xtxt).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadlines)) (5))) ((((unsupported)) ("AAn") ("BBn"))))
                xtest_read_by_chunk.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    memory > xc
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ((("A".mul 127).add "rnB")))))
                        xreads.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xc.write ((((xtxt).xread)) (128))
                                ((xc).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xreads)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) ((("A".mul 127).add "nB")))
                xtest_writelines.write
                  [xself]
                    memory > xtxt
                    memory > xbuf
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)) ("ab") ("cd") ("ef"))
                        xbuf.write ((((xself).xBytesIO)) 0)
                        xtxt.write ((((xself).xTextIOWrapper)) ((xbuf)))
                        bogusForceDataize.write ((((xtxt).xwritelines)) ((xl)))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuf).xgetvalue)) 0)) ("abcdef"))
                xtest_writelines_userlist.write
                  [xself]
                    memory > xtxt
                    memory > xbuf
                    memory > xl
                    seq > @
                      seq
                        xl.write (((xUserList)) ((((unsupported)) ("ab") ("cd") ("ef"))))
                        xbuf.write ((((xself).xBytesIO)) 0)
                        xtxt.write ((((xself).xTextIOWrapper)) ((xbuf)))
                        bogusForceDataize.write ((((xtxt).xwritelines)) ((xl)))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuf).xgetvalue)) 0)) ("abcdef"))
                xtest_writelines_error.write
                  [xself]
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xBytesIO)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xtxt).xwritelines)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xtxt).xwritelines)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xtxt).xwritelines)) ("abc"))
                xtest_issue1395_1.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    memory > xc
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        xreads.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xc.write ((((xtxt).xread)) (1))
                                ((xc).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xreads)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) (((xself).xnormalized)))
                xtest_issue1395_2.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    memory > xc
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        (((unsupported)) (((xtxt).x_CHUNK_SIZE)) (4))
                        xreads.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xc.write ((((xtxt).xread)) (4))
                                ((xc).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xreads)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) (((xself).xnormalized)))
                xtest_issue1395_3.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        (((unsupported)) (((xtxt).x_CHUNK_SIZE)) (4))
                        xreads.write ((((xtxt).xread)) (4))
                        (((unsupported)) ((xreads)) (((((xtxt).xread)) (4))))
                        (((unsupported)) ((xreads)) (((((xtxt).xreadline)) 0)))
                        (((unsupported)) ((xreads)) (((((xtxt).xreadline)) 0)))
                        (((unsupported)) ((xreads)) (((((xtxt).xreadline)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) (((xself).xnormalized)))
                xtest_issue1395_4.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        (((unsupported)) (((xtxt).x_CHUNK_SIZE)) (4))
                        xreads.write ((((xtxt).xread)) (4))
                        (((unsupported)) ((xreads)) (((((xtxt).xread)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreads)) (((xself).xnormalized)))
                xtest_issue1395_5.write
                  [xself]
                    memory > xreads
                    memory > xtxt
                    memory > xpos
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        (((unsupported)) (((xtxt).x_CHUNK_SIZE)) (4))
                        xreads.write ((((xtxt).xread)) (4))
                        xpos.write ((((xtxt).xtell)) 0)
                        bogusForceDataize.write ((((xtxt).xseek)) (0))
                        bogusForceDataize.write ((((xtxt).xseek)) ((xpos)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xread)) (4))) ("BBBn"))
                xtest_issue2282.write
                  [xself]
                    memory > xtxt
                    memory > xbuffer
                    seq > @
                      seq
                        xbuffer.write ((((xself).xBytesIO)) (((xself).xtestdata)))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuffer)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuffer).xseekable)) 0)) (((((xtxt).xseekable)) 0)))
                xtest_append_bom.write
                  [xself]
                    memory > xpos
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        (((unsupported)) ((xcharset)) ((((unsupported)) ("utf-8-sig") ("utf-16") ("utf-32"))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("w") ((xcharset)))) ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xwrite)) ("aaa"))
                                xpos.write ((((xf).xtell)) 0)
                            (((unsupported)) (((((xself).xopen)) ((xfilename)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("aaa".xencode)) ((xcharset)))))
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("a") ((xcharset)))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                            (((unsupported)) (((((xself).xopen)) ((xfilename)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("aaaxxx".xencode)) ((xcharset)))))
                xtest_seek_bom.write
                  [xself]
                    memory > xpos
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        (((unsupported)) ((xcharset)) ((((unsupported)) ("utf-8-sig") ("utf-16") ("utf-32"))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("w") ((xcharset)))) ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xwrite)) ("aaa"))
                                xpos.write ((((xf).xtell)) 0)
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("r+") ((xcharset)))) ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xseek)) ((xpos)))
                                bogusForceDataize.write ((((xf).xwrite)) ("zzz"))
                                bogusForceDataize.write ((((xf).xseek)) (0))
                                bogusForceDataize.write ((((xf).xwrite)) ("bbb"))
                            (((unsupported)) (((((xself).xopen)) ((xfilename)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("bbbzzz".xencode)) ((xcharset)))))
                xtest_seek_append_bom.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        (((unsupported)) ((xcharset)) ((((unsupported)) ("utf-8-sig") ("utf-16") ("utf-32"))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("w") ((xcharset)))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ("aaa"))
                            (((unsupported)) ((((unsupported)) (((xself).xopen)) ((xfilename)) ("a") ((xcharset)))) ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xseek)) (0))
                                bogusForceDataize.write ((((xf).xseek)) (0) (((xself).xSEEK_END)))
                                bogusForceDataize.write ((((xf).xwrite)) ("xxx"))
                            (((unsupported)) (((((xself).xopen)) ((xfilename)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("aaaxxx".xencode)) ((xcharset)))))
                xtest_errors_property.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xerrors)) ("strict"))
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") ("replace"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xerrors)) ("replace"))
                xtest_threads_write.write
                  [xself]
                    memory > xthreads
                    memory > xevent
                    memory > xcontent
                    memory > xrun
                    seq > @
                      (((unsupported)) 0)
                        xevent.write ((((xthreading).xEvent)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("w") (1))) ((xf)))
                          seq
                            xrun.write
                              [xn]
                                memory > xtext
                                seq > @
                                  seq
                                    xtext.write ("Thread%03dn".mod (xn))
                                    bogusForceDataize.write ((((xevent).xwait)) 0)
                                    bogusForceDataize.write ((((xf).xwrite)) ((xtext)))
                            xthreads.write (((unsupported)) ((((unsupported)) (((xthreading).xThread)) ((xrun)) ((((unsupported)) ((xx)))))) ((xx)) ((((xrange)) (20))))
                            (((unsupported)) (((((xsupport).xstart_threads)) ((xthreads)) (((xevent).xset)))))
                              bogusForceDataize.write ((((xtime).xsleep)) (0.02))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)))) ((xf)))
                          seq
                            xcontent.write ((((xf).xread)) 0)
                            (((unsupported)) ((xn)) ((((xrange)) (20))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xcontent).xcount)) (("Thread%03dn".mod (xn))))) (1))
                xtest_flush_error_on_close.write
                  [xself]
                    memory > xclosed
                    memory > xtxt
                    memory > xbad_flush
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        xclosed.write (((unsupported)) 0)
                        xbad_flush.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xclosed)) ((((unsupported)) 0)))) ((((unsupported)) (((xtxt).xclosed)) ((((xtxt).xbuffer).xclosed)))))
                                (((unsupported)) ((((xOSError)) 0)))
                        (((unsupported)) (((xtxt).xflush)) ((xbad_flush)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xtxt).xclose)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xtxt).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xtxt).xbuffer).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xclosed)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xclosed)) (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xclosed)) (1))))
                        (((unsupported)) (((xtxt).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_close_error_on_close.write
                  [xself]
                    memory > xtxt
                    memory > xbad_close
                    memory > xbad_flush
                    memory > xbuffer
                    seq > @
                      seq
                        xbuffer.write ((((xself).xBytesIO)) (((xself).xtestdata)))
                        xbad_flush.write
                          []
                            seq > @
                              (((unsupported)) ((((xOSError)) ("flush"))))
                        xbad_close.write
                          []
                            seq > @
                              (((unsupported)) ((((xOSError)) ("close"))))
                        (((unsupported)) (((xbuffer).xclose)) ((xbad_close)))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuffer)) ("ascii"))
                        (((unsupported)) (((xtxt).xflush)) ((xbad_flush)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xerr)))
                          bogusForceDataize.write ((((xtxt).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xerr).xexception).xargs)) ((((unsupported)) ("close"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xerr).xexception).x__context__)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xerr).xexception).x__context__).xargs)) ((((unsupported)) ("flush"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xtxt).xclosed)))
                        (((unsupported)) (((xbuffer).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xtxt).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_nonnormalized_close_error_on_close.write
                  [xself]
                    memory > xtxt
                    memory > xbad_close
                    memory > xbad_flush
                    memory > xbuffer
                    seq > @
                      seq
                        xbuffer.write ((((xself).xBytesIO)) (((xself).xtestdata)))
                        xbad_flush.write
                          []
                            seq > @
                              (((unsupported)) ((xnon_existing_flush)))
                        xbad_close.write
                          []
                            seq > @
                              (((unsupported)) ((xnon_existing_close)))
                        (((unsupported)) (((xbuffer).xclose)) ((xbad_close)))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuffer)) ("ascii"))
                        (((unsupported)) (((xtxt).xflush)) ((xbad_flush)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          bogusForceDataize.write ((((xtxt).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("non_existing_close") ((((xstr)) (((xerr).xexception)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xerr).xexception).x__context__)) ((xNameError)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("non_existing_flush") ((((xstr)) ((((xerr).xexception).x__context__)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xtxt).xclosed)))
                        (((unsupported)) (((xbuffer).xclose)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xtxt).xflush)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                xtest_multi_close.write
                  [xself]
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        bogusForceDataize.write ((((xtxt).xclose)) 0)
                        bogusForceDataize.write ((((xtxt).xclose)) 0)
                        bogusForceDataize.write ((((xtxt).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xtxt).xflush)))
                xtest_unseekable.write
                  [xself]
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xMockUnseekableIO)) (((xself).xtestdata)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xtxt).xtell)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xself).xUnsupportedOperation)) (((xtxt).xseek)) (0))
                xtest_readonly_attributes.write
                  [xself]
                    memory > xtxt
                    memory > xbuf
                    seq > @
                      seq
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) (((xself).xtestdata)))) ("ascii"))
                        xbuf.write ((((xself).xBytesIO)) (((xself).xtestdata)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xtxt).xbuffer)) ((xbuf)))
                xtest_rawio.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("def") ("ghinjklnopqn"))))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xread)) (4))) ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("efghin"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xtxt)))) ((((unsupported)) ("jkln") ("opqn"))))
                xtest_rawio_write_through.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) ((((unsupported)) ("abc") ("def") ("ghinjklnopqn"))))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n") (TRUE))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("1"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("23n4"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("5"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xraw).x_write_stack)))) ("123n45"))
                xtest_bufio_write_through.write
                  [xself]
                    memory > xdata
                    memory > xtextio
                    memory > xtext
                    memory > xflush
                    memory > xwrite
                    memory > xrawio
                    memory > xwrite_called
                    memory > xbufio
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xflush_called)) ((xwrite_called)))) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xBufferedWriter)))
                          seq
                            xflush.write
                              [xself]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xflush_called).xappend)) (TRUE))
                                    (((unsupported)) (((((((xsuper)) 0).xflush)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                            xwrite.write
                              [xself]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xwrite_called).xappend)) (TRUE))
                                    (((unsupported)) (((((((xsuper)) 0).xwrite)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                        xrawio.write ((((xself).xBytesIO)) 0)
                        xdata.write "a"
                        xbufio.write (((xBufferedWriter)) ((xrawio)) (((((xlen)) ((xdata))).mul 2)))
                        xtextio.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbufio)) ("ascii") (TRUE))
                        xtext.write ((((xdata).xdecode)) ("ascii"))
                        bogusForceDataize.write ((((xtextio).xwrite)) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xflush_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xwrite_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xgetvalue)) 0)) (""))
                        xwrite_called.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xtextio).xwrite)) (((xtext).mul 10)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xwrite_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrawio).xgetvalue)) 0)) (((xdata).mul 11)))
                xtest_reconfigure_write_through.write
                  [xself]
                    memory > xt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xMockRawIO)) ((((unsupported)) 0)))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        bogusForceDataize.write ((((xt).xwrite)) ("1"))
                        (((unsupported)) (((xt).xreconfigure)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xwrite_through)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xraw).x_write_stack)))) ("1"))
                        bogusForceDataize.write ((((xt).xwrite)) ("23"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xraw).x_write_stack)))) ("123"))
                        (((unsupported)) (((xt).xreconfigure)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xwrite_through)) (FALSE))
                        bogusForceDataize.write ((((xt).xwrite)) ("45"))
                        bogusForceDataize.write ((((xt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((xraw).x_write_stack)))) ("12345"))
                        bogusForceDataize.write ((((xt).xreconfigure)) 0)
                        (((unsupported)) (((xt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xwrite_through)) (FALSE))
                        (((unsupported)) (((xt).xreconfigure)) (TRUE))
                        bogusForceDataize.write ((((xt).xreconfigure)) 0)
                        (((unsupported)) (((xt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).xwrite_through)) (TRUE))
                xtest_read_nonbytes.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xself).xTextIOWrapper)) (((((xself).xStringIO)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)) (1))
                        xt.write ((((xself).xTextIOWrapper)) (((((xself).xStringIO)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xreadline)))
                        xt.write ((((xself).xTextIOWrapper)) (((((xself).xStringIO)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)))
                xtest_illegal_encoder.write
                  [xself]
                    memory > xt
                    memory > xrot13
                    seq > @
                      seq
                        xrot13.write ((((xcodecs).xlookup)) ("rot13"))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xrot13)) ("_is_text_encoding") (TRUE))))
                          xt.write (((unsupported)) (((xio).xTextIOWrapper)) (((((xio).xBytesIO)) ("foo"))) ("rot13"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xwrite)) ("bar"))
                xtest_illegal_decoder.write
                  [xself]
                    memory > xt
                    memory > x_make_illegal_wrapper
                    memory > x_make_very_illegal_wrapper
                    seq > @
                      seq
                        x_make_illegal_wrapper.write
                          []
                            memory > xt
                            memory > xquopri
                            seq > @
                              seq
                                xquopri.write ((((xcodecs).xlookup)) ("quopri"))
                                (((unsupported)) (((xquopri).x_is_text_encoding)) (TRUE))
                                (((unsupported)) 0)
                                  xt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ("aaaaaa"))) ("n") ("quopri"))
                                  (((unsupported)) (((xquopri).x_is_text_encoding)) (FALSE))
                                (((unsupported)) ((xt)))
                        xt.write (((x_make_illegal_wrapper)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)) (1))
                        xt.write (((x_make_illegal_wrapper)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xreadline)))
                        xt.write (((x_make_illegal_wrapper)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)))
                        x_make_very_illegal_wrapper.write
                          [xgetstate_ret_val]
                            memory > xquopri
                            memory > xgetstate
                            memory > x_get_bad_decoder
                            seq > @
                              seq
                                (((unsupported)) 0)
                                  xgetstate.write
                                    [xself]
                                      seq > @
                                        (((unsupported)) ((xgetstate_ret_val)))
                                x_get_bad_decoder.write
                                  [xdummy]
                                    seq > @
                                      (((unsupported)) ((((xBadDecoder)) 0)))
                                xquopri.write ((((xcodecs).xlookup)) ("quopri"))
                                (((unsupported)) (((((xsupport).xswap_attr)) ((xquopri)) ("incrementaldecoder") ((x_get_bad_decoder)))))
                                  (((unsupported)) ((((x_make_illegal_wrapper)) 0)))
                        xt.write (((x_make_very_illegal_wrapper)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)) (42))
                        xt.write (((x_make_very_illegal_wrapper)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)) (42))
                        xt.write (((x_make_very_illegal_wrapper)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xt).xread)) (42))
                x_check_create_at_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xiomod
                    seq > @
                      (((unsupported)) 0)
                        xiomod.write (((xself).xio).x__name__)
                        xcode.write (((unsupported)) (((((unsupported)) 0).xformat)) ((xiomod)) ((xkwargs)))
                        (((unsupported)) ((((xassert_python_ok)) ("-c") ((xcode)))))
                xtest_create_at_shutdown_without_encoding.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) (((((xself).x_check_create_at_shutdown)) 0)))
                        (xerr).if
                          bogusForceDataize.write ((((xself).xassertIn)) (((xself).xshutdown_error)) (((((xerr).xdecode)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ("ok") ((((((((xout).xdecode)) 0).xstrip)) 0)))
                xtest_create_at_shutdown_with_encoding.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((unsupported)) (((xself).x_check_create_at_shutdown)) ("utf-8") ("strict"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("ok") ((((((((xout).xdecode)) 0).xstrip)) 0)))
                xtest_read_byteslike.write
                  [xself]
                    memory > xt
                    memory > xbytes_val
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xMemviewBytesIO)) ("Just some random stringn"))
                        xt.write ((((xself).xTextIOWrapper)) ((xr)) ("utf-8"))
                        xbytes_val.write ((((((x_to_memoryview)) (((((xr).xgetvalue)) 0))).xtobytes)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xt).xread)) (200))) (((((xbytes_val).xdecode)) ("utf-8"))))
                xtest_issue22849.write
                  [xself]
                    memory > xreadable
                    memory > xt
                    memory > xseekable
                    memory > xwritable
                    seq > @
                      seq
                        (((unsupported)) ((xobject)))
                          seq
                            xreadable.write
                              [xself]
                                seq > @
                                  (((unsupported)) (TRUE))
                            xwritable.write
                              [xself]
                                seq > @
                                  (((unsupported)) (TRUE))
                            xseekable.write
                              [xself]
                                seq > @
                                  (((unsupported)) (TRUE))
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          (((unsupported)) ((xException)))
                            (((unsupported)) (((xself).xTextIOWrapper)) ((((xF)) 0)) ("utf-8"))
                        (((unsupported)) (((xF).xtell)) ((((unsupported)) (0))))
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((((xF)) 0)) ("utf-8"))
                xtest_reconfigure_encoding_read.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((("abcxe9n".xencode)) ("latin1")).add ((("dxe9fn".xencode)) ("utf8")))
                        xraw.write ((((xself).xBytesIO)) ((xdata)))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("latin1") ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("abcxe9n"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xself).xUnsupportedOperation)))))
                          (((unsupported)) (((xtxt).xreconfigure)) ("utf-8"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xself).xUnsupportedOperation)))))
                          (((unsupported)) (((xtxt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                xtest_reconfigure_write_fromascii.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) 0)
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("foon"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("xe9n"))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("foonxc3xa9n"))
                xtest_reconfigure_write.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) 0)
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("latin1") ("n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("abcxe9n"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("abcxe9n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("dxe9fn"))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("abcxe9ndxc3xa9fn"))
                        xraw.write ((((xself).xBytesIO)) 0)
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("abcn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("dxe9fn"))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("abcndxc3xa9fn"))
                xtest_reconfigure_write_non_seekable.write
                  [xself]
                    memory > xtxt
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) 0)
                        (((unsupported)) (((xraw).xseekable)) ((((unsupported)) (FALSE))))
                        (((unsupported)) (((xraw).xseek)) ("None: is there a None literal in the EO language?"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("abcn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("dxe9fn"))
                        bogusForceDataize.write ((((xtxt).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("abcnxefxbbxbfdxc3xa9fn"))
                xtest_reconfigure_defaults.write
                  [xself]
                    memory > xtxt
                    seq > @
                      seq
                        xtxt.write ((((xself).xTextIOWrapper)) (((((xself).xBytesIO)) 0)) ("ascii") ("replace") ("n"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xencoding)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xerrors)) ("replace"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("LFn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xencoding)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xerrors)) ("replace"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("ignore"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xencoding)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xerrors)) ("ignore"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("CRLFn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("utf-8") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtxt).xerrors)) ("strict"))
                        bogusForceDataize.write ((((xtxt).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xread)) 0)) ("LFnCRLFn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xtxt).xdetach)) 0).xgetvalue)) 0)) ("LFnCRLFrn"))
                xtest_reconfigure_newline.write
                  [xself]
                    memory > xtxt
                    memory > xexpected
                    memory > xraw
                    seq > @
                      seq
                        xraw.write ((((xself).xBytesIO)) ("CRrEOF"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("CRn"))
                        xraw.write ((((xself).xBytesIO)) ("CRrEOF"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        (((unsupported)) (((xtxt).xreconfigure)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("CRr"))
                        xraw.write ((((xself).xBytesIO)) ("CRrLFnEOF"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("r"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("CRrLFn"))
                        xraw.write ((((xself).xBytesIO)) ("LFnCRrEOF"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("n"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("r"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("LFnCRr"))
                        xraw.write ((((xself).xBytesIO)) ("CRrCRLFrnEOF"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xraw)) ("ascii") ("r"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtxt).xreadline)) 0)) ("CRrCRLFrn"))
                        xtxt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) 0)) ("ascii") ("r"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("linesepn"))
                        (((unsupported)) (((xtxt).xreconfigure)) (""))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("LFn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("n"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("LFn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("r"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("CRn"))
                        (((unsupported)) (((xtxt).xreconfigure)) ("rn"))
                        bogusForceDataize.write ((((xtxt).xwrite)) ("CRLFn"))
                        xexpected.write (("linesep".add ((xos).xlinesep)).add "LFnLFnCRrCRLFrn")
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((((((xtxt).xdetach)) 0).xgetvalue)) 0).xdecode)) ("ascii"))) ((xexpected)))
                xtest_issue25862.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ("test"))) ("ascii"))
                        bogusForceDataize.write ((((xt).xread)) (1))
                        bogusForceDataize.write ((((xt).xread)) 0)
                        bogusForceDataize.write ((((xt).xtell)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) ("test"))) ("ascii"))
                        bogusForceDataize.write ((((xt).xread)) (1))
                        bogusForceDataize.write ((((xt).xwrite)) ("x"))
                        bogusForceDataize.write ((((xt).xtell)) 0)
            (((unsupported)) (((xio).xBytesIO)))
              seq
                (((unsupported)) 0)
                xread1.write
                  [xself xlen_]
                    seq > @
                      (((unsupported)) ((((x_to_memoryview)) (((((((xsuper)) 0).xread1)) ((xlen_)))))))
                xread.write
                  [xself xlen_]
                    seq > @
                      (((unsupported)) ((((x_to_memoryview)) (((((((xsuper)) 0).xread)) ((xlen_)))))))
            x_to_memoryview.write
              [xbuf]
                memory > xidx
                memory > xarr
                seq > @
                  seq
                    unsupported
                    xarr.write ((((xarray).xarray)) ("i"))
                    xidx.write ((((xlen)) ((xbuf))).sub ((((xlen)) ((xbuf))).mod ((xarr).xitemsize)))
                    bogusForceDataize.write ((((xarr).xfrombytes)) ((((unsupported)) ((xbuf)) ((((unsupported)) ((xidx)))))))
                    (((unsupported)) ((((xmemoryview)) ((xarr)))))
            (((unsupported)) ((xTextIOWrapperTest)))
              seq
                xio.write (xio)
                xshutdown_error.write "RuntimeError: could not find io module state"
                xtest_initialization.write
                  [xself]
                    memory > xt
                    memory > xr
                    memory > xb
                    seq > @
                      seq
                        xr.write ((((xself).xBytesIO)) ("xc3xa9nn"))
                        xb.write ((((xself).xBufferedReader)) ((xr)) (1000))
                        xt.write ((((xself).xTextIOWrapper)) ((xb)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xt).x__init__)) ((xb)) ("xyzzy"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xt).xread)))
                        xt.write (((((xself).xTextIOWrapper).x__new__)) (((xself).xTextIOWrapper)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) ((xrepr)) ((xt)))
                xtest_garbage_collection.write
                  [xself]
                    memory > xt
                    memory > xwr
                    memory > xb
                    memory > xrawio
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xrawio.write ((((xio).xFileIO)) (((xsupport).xTESTFN)) ("wb"))
                            xb.write ((((xself).xBufferedWriter)) ((xrawio)))
                            xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb)) ("ascii"))
                            bogusForceDataize.write ((((xt).xwrite)) ("456def"))
                            (((unsupported)) (((xt).xx)) ((xt)))
                            xwr.write ((((xweakref).xref)) ((xt)))
                            (((unsupported)) ((((unsupported)) ((xt)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("456def"))
                xtest_rwpair_cleared_before_textio.write
                  [xself]
                    memory > xt1
                    memory > xt2
                    memory > xb1
                    memory > xb2
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((xrange)) (1000))))
                          seq
                            xb1.write ((((xself).xBufferedRWPair)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                            xt1.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb1)) ("ascii"))
                            xb2.write ((((xself).xBufferedRWPair)) (((((xself).xMockRawIO)) 0)) (((((xself).xMockRawIO)) 0)))
                            xt2.write (((unsupported)) (((xself).xTextIOWrapper)) ((xb2)) ("ascii"))
                            (((unsupported)) (((xt1).xbuddy)) ((xt2)))
                            (((unsupported)) (((xt2).xbuddy)) ((xt1)))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_del__CHUNK_SIZE_SystemError.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) (((((xself).xBytesIO)) 0)) ("ascii"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xt).x_CHUNK_SIZE)))))
                xtest_internal_buffer_size.write
                  [xself]
                    memory > xt
                    memory > xbuf
                    memory > xchunk_size
                    memory > xwrite
                    seq > @
                      seq
                        xchunk_size.write 8192
                        (((unsupported)) (((xself).xMockRawIO)))
                          xwrite.write
                            [xself xdata]
                              seq > @
                                seq
                                  ((((xlen)) ((xdata))).greater (xchunk_size)).if
                                    (((unsupported)) ((xRuntimeError)))
                                  (((unsupported)) (((((((xsuper)) 0).xwrite)) ((xdata)))))
                        xbuf.write (((xMockIO)) 0)
                        xt.write (((unsupported)) (((xself).xTextIOWrapper)) ((xbuf)) ("ascii"))
                        xchunk_size.write ((xt).x_CHUNK_SIZE)
                        bogusForceDataize.write ((((xt).xwrite)) ("abc"))
                        bogusForceDataize.write ((((xt).xwrite)) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) (((xbuf).x_write_stack)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))))
                          bogusForceDataize.write ((((xt).xwrite)) (("x".mul ((xchunk_size).add 1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("abcdef"))) (((xbuf).x_write_stack)))
                        bogusForceDataize.write ((((xt).xwrite)) ("ghi"))
                        bogusForceDataize.write ((((xt).xwrite)) (("x".mul (xchunk_size))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("abcdef") ("ghi") (("x".mul (xchunk_size))))) (((xbuf).x_write_stack)))
            (((unsupported)) ((xTextIOWrapperTest)))
              seq
                xio.write (xpyio)
                xshutdown_error.write "LookupError: unknown encoding: ascii"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_newline_decoding_utf8.write
                  [xself xdecoder]
                    memory > x_check_decode
                    seq > @
                      seq
                        x_check_decode.write
                          [xb xs]
                            memory > xstate
                            seq > @
                              (((unsupported)) 0)
                                xstate.write ((((xdecoder).xgetstate)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ((xb)) ((((unsupported)) ((xkwargs)))))) ((xs)))
                                bogusForceDataize.write ((((xdecoder).xsetstate)) ((xstate)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ((xb)) ((((unsupported)) ((xkwargs)))))) ((xs)))
                        bogusForceDataize.write (((x_check_decode)) ("xe8xa2x88") ("u8888"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8") (""))
                        bogusForceDataize.write (((x_check_decode)) ("xa2") (""))
                        bogusForceDataize.write (((x_check_decode)) ("x88") ("u8888"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8") (""))
                        bogusForceDataize.write (((x_check_decode)) ("xa2") (""))
                        bogusForceDataize.write (((x_check_decode)) ("x88") ("u8888"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8") (""))
                        (((unsupported)) (((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xdecoder).xdecode)) ("") (TRUE))
                        bogusForceDataize.write ((((xdecoder).xreset)) 0)
                        bogusForceDataize.write (((x_check_decode)) ("n") ("n"))
                        bogusForceDataize.write (((x_check_decode)) ("r") (""))
                        (((unsupported)) ((x_check_decode)) ("") ("n") (TRUE))
                        (((unsupported)) ((x_check_decode)) ("r") ("n") (TRUE))
                        bogusForceDataize.write (((x_check_decode)) ("r") (""))
                        bogusForceDataize.write (((x_check_decode)) ("a") ("na"))
                        bogusForceDataize.write (((x_check_decode)) ("rrn") ("nn"))
                        bogusForceDataize.write (((x_check_decode)) ("r") (""))
                        bogusForceDataize.write (((x_check_decode)) ("r") ("n"))
                        bogusForceDataize.write (((x_check_decode)) ("na") ("na"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8xa2x88rn") ("u8888n"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8xa2x88") ("u8888"))
                        bogusForceDataize.write (((x_check_decode)) ("n") ("n"))
                        bogusForceDataize.write (((x_check_decode)) ("xe8xa2x88r") ("u8888"))
                        bogusForceDataize.write (((x_check_decode)) ("n") ("n"))
                xcheck_newline_decoding.write
                  [xself xdecoder xencoding]
                    memory > xinput
                    memory > x_decode_bytewise
                    memory > xencoder
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) 0)
                        (((unsupported)) ((xencoding)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xencoder.write ((((((xcodecs).xgetincrementalencoder)) ((xencoding)))) 0)
                            x_decode_bytewise.write
                              [xs]
                                seq > @
                                  (((unsupported)) ((xb)) (((((xencoder).xencode)) ((xs)))))
                                    bogusForceDataize.write ((((xresult).xappend)) (((((xdecoder).xdecode)) ((((xbytes)) ((((unsupported)) ((xb)))))))))
                          seq
                            xencoder.write "None: is there a None literal in the EO language?"
                            x_decode_bytewise.write
                              [xs]
                                seq > @
                                  (((unsupported)) ((xc)) ((xs)))
                                    bogusForceDataize.write ((((xresult).xappend)) (((((xdecoder).xdecode)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((x_decode_bytewise)) ("abcnr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ("n"))
                        bogusForceDataize.write (((x_decode_bytewise)) ("nabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ((((unsupported)) ("n") ("rn"))))
                        bogusForceDataize.write (((x_decode_bytewise)) ("abcr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ((((unsupported)) ("n") ("rn"))))
                        bogusForceDataize.write (((x_decode_bytewise)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ((((unsupported)) ("r") ("n") ("rn"))))
                        bogusForceDataize.write (((x_decode_bytewise)) ("abcr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((xresult)))) ("abcnnabcabcnabcabc"))
                        bogusForceDataize.write ((((xdecoder).xreset)) 0)
                        xinput.write "abc"
                        (((unsupported)) ((xencoder)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xencoder).xreset)) 0)
                            xinput.write ((((xencoder).xencode)) ((xinput)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ((xinput)))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdecoder).xnewlines)) ("None: is there a None literal in the EO language?"))
                xtest_newline_decoder.write
                  [xself]
                    memory > xencodings
                    memory > xdecoder
                    seq > @
                      seq
                        xencodings.write (((unsupported)) ("None: is there a None literal in the EO language?") ("utf-8") ("latin-1") ("utf-16") ("utf-16-le") ("utf-16-be") ("utf-32") ("utf-32-le") ("utf-32-be"))
                        (((unsupported)) ((xenc)) ((xencodings)))
                          seq
                            xdecoder.write ((xenc).and ((((((xcodecs).xgetincrementaldecoder)) ((xenc)))) 0))
                            xdecoder.write (((unsupported)) (((xself).xIncrementalNewlineDecoder)) ((xdecoder)) (TRUE))
                            bogusForceDataize.write ((((xself).xcheck_newline_decoding)) ((xdecoder)) ((xenc)))
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("utf-8"))) 0)
                        xdecoder.write (((unsupported)) (((xself).xIncrementalNewlineDecoder)) ((xdecoder)) (TRUE))
                        bogusForceDataize.write ((((xself).xcheck_newline_decoding_utf8)) ((xdecoder)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xdecoder).xsetstate)) (42))
                xtest_newline_bytes.write
                  [xself]
                    memory > xdec
                    memory > x_check
                    seq > @
                      seq
                        x_check.write
                          [xdec]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xdec).xnewlines)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ("u0D00"))) ("u0D00"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xdec).xnewlines)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ("u0A00"))) ("u0A00"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xdec).xnewlines)) ("None: is there a None literal in the EO language?"))
                        xdec.write (((unsupported)) (((xself).xIncrementalNewlineDecoder)) ("None: is there a None literal in the EO language?") (FALSE))
                        bogusForceDataize.write (((x_check)) ((xdec)))
                        xdec.write (((unsupported)) (((xself).xIncrementalNewlineDecoder)) ("None: is there a None literal in the EO language?") (TRUE))
                        bogusForceDataize.write (((x_check)) ((xdec)))
                xtest_translate.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        (((unsupported)) ((xtranslate)) ((((unsupported)) ((2.neg)) ((1.neg)) (1) (2))))
                          seq
                            xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("utf-8"))) 0)
                            xdecoder.write ((((xself).xIncrementalNewlineDecoder)) ((xdecoder)) ((xtranslate)))
                            bogusForceDataize.write ((((xself).xcheck_newline_decoding_utf8)) ((xdecoder)))
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("utf-8"))) 0)
                        xdecoder.write (((unsupported)) (((xself).xIncrementalNewlineDecoder)) ((xdecoder)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("rrn"))) ("rrn"))
            (((unsupported)) ((xIncrementalNewlineDecoderTest)))
            (((unsupported)) ((xIncrementalNewlineDecoderTest)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest___all__.write
                  [xself]
                    memory > xobj
                    seq > @
                      (((unsupported)) ((xname)) ((((xself).xio).x__all__)))
                        seq
                          xobj.write (((xgetattr)) (((xself).xio)) ((xname)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xobj)) ((xname)))
                          (((unsupported)) ((xname)) ((((unsupported)) ("open") ("open_code")))).if
                            (((unsupported)) 0)
                            ((((unsupported)) ("error") (((((xname).xlower)) 0))).or ((xname).eq "UnsupportedOperation")).if
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xobj)) ((xException)))) ((xname)))
                              (((((xname).xstartswith)) ("SEEK_")).not).if
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xobj)) (((xself).xIOBase)))))
                xtest_attributes.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("wb") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xmode)) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xf.write ((((xself).xopen)) (((xsupport).xTESTFN)) ("U"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xname)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf).xbuffer).xname)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xbuffer).xraw).xname)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xmode)) ("U"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf).xbuffer).xmode)) ("rb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xbuffer).xraw).xmode)) ("rb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write ((((xself).xopen)) (((xsupport).xTESTFN)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xmode)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf).xbuffer).xmode)) ("rb+"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xbuffer).xraw).xmode)) ("rb+"))
                        xg.write (((unsupported)) (((xself).xopen)) (((((xf).xfileno)) 0)) ("wb") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xg).xmode)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xg).xraw).xmode)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xg).xname)) (((((xf).xfileno)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xg).xraw).xname)) (((((xf).xfileno)) 0)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xg).xclose)) 0)
                xtest_open_pipe_with_append.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr)))
                        xf.write ((((xself).xopen)) ((xw)) ("a"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xf).xclose)))
                        (((xsys).xplatform).neq "win32").if
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xseekable)) 0)))
                xtest_io_after_close.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)) ((xkwargs)) ((((unsupported)) ((((unsupported)) ("mode") ("w"))) ((((unsupported)) ("mode") ("wb"))) ((((unsupported)) ("mode") ("w") ("buffering") (1))) ((((unsupported)) ("mode") ("w") ("buffering") (2))) ((((unsupported)) ("mode") ("wb") ("buffering") (0))) ((((unsupported)) ("mode") ("r"))) ((((unsupported)) ("mode") ("rb"))) ((((unsupported)) ("mode") ("r") ("buffering") (1))) ((((unsupported)) ("mode") ("r") ("buffering") (2))) ((((unsupported)) ("mode") ("rb") ("buffering") (0))) ((((unsupported)) ("mode") ("w+"))) ((((unsupported)) ("mode") ("w+b"))) ((((unsupported)) ("mode") ("w+") ("buffering") (1))) ((((unsupported)) ("mode") ("w+") ("buffering") (2))) ((((unsupported)) ("mode") ("w+b") ("buffering") (0))))))
                        seq
                          xf.write ((((xself).xopen)) (((xsupport).xTESTFN)) ((((unsupported)) ((xkwargs)))))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xflush)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xfileno)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xisatty)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).x__iter__)))
                          (((xhasattr)) ((xf)) ("peek")).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xpeek)) (1))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xread)))
                          (((xhasattr)) ((xf)) ("read1")).if
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xread1)) (1024))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xread1)))
                          (((xhasattr)) ((xf)) ("readall")).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadall)))
                          (((xhasattr)) ((xf)) ("readinto")).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadinto)) ((((xbytearray)) (1024))))
                          (((xhasattr)) ((xf)) ("readinto1")).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadinto1)) ((((xbytearray)) (1024))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadline)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadlines)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xreadlines)) (1))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xtell)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xtruncate)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xwrite)) (((((unsupported)) ("b") ((((unsupported)) ((xkwargs)) ("mode")))).if "" "")))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xwritelines)) ((((unsupported)) 0)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((xf)))
                xtest_blockingioerror.write
                  [xself]
                    memory > xc
                    memory > xwr
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                        xc.write (((xC)) (""))
                        xb.write ((((xself).xBlockingIOError)) (1) ((xc)))
                        (((unsupported)) (((xc).xb)) ((xb)))
                        (((unsupported)) (((xb).xc)) ((xc)))
                        xwr.write ((((xweakref).xref)) ((xc)))
                        (((unsupported)) ((((unsupported)) ((xc)) ((xb)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)) ((xwr)))
                xtest_abcs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xself).xIOBase)) (((xabc).xABCMeta)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xself).xRawIOBase)) (((xabc).xABCMeta)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xself).xBufferedIOBase)) (((xabc).xABCMeta)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xself).xTextIOBase)) (((xabc).xABCMeta)))
                x_check_abc_inheritance.write
                  [xself xabcmodule]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xself).xopen)) (((xsupport).xTESTFN)) ("wb") (0))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xTextIOBase)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xTextIOBase)))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) (((xabcmodule).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) (((xabcmodule).xTextIOBase)))
                xtest_abc_inheritance.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_abc_inheritance)) ((xself)))
                xtest_abc_inheritance_official.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_abc_inheritance)) ((xio)))
                x_check_warn_on_dealloc.write
                  [xself]
                    memory > xr
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write (((xopen)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        xr.write (((xrepr)) ((xf)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xResourceWarning)))) ((xcm)))
                          seq
                            xf.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ((xr)) ((((xstr)) ((((unsupported)) ((((xcm).xwarning).xargs)) (0))))))
                xtest_warn_on_dealloc.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_check_warn_on_dealloc)) (((xsupport).xTESTFN)) ("wb") (0))
                        bogusForceDataize.write ((((xself).x_check_warn_on_dealloc)) (((xsupport).xTESTFN)) ("wb"))
                        bogusForceDataize.write ((((xself).x_check_warn_on_dealloc)) (((xsupport).xTESTFN)) ("w"))
                x_check_warn_on_dealloc_fd.write
                  [xself]
                    memory > xcleanup_fds
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        xfds.write (((unsupported)) 0)
                        xcleanup_fds.write
                          []
                            seq > @
                              (((unsupported)) ((xfd)) ((xfds)))
                                (((unsupported)) ((xOSError)))
                                  bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                                  (((xe).xerrno).neq ((xerrno).xEBADF)).if
                                    (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup_fds)))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((xfds)) ((((unsupported)) ((xr)) ((xw)))))
                        bogusForceDataize.write ((((xself).x_check_warn_on_dealloc)) ((xr)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((xfds)) ((((unsupported)) ((xr)) ((xw)))))
                        (((unsupported)) (((((xsupport).xcheck_no_resource_warning)) ((xself)))))
                          (((unsupported)) ((xopen)) ((xr)) ((((unsupported)) ((xargs)))) (FALSE) ((((unsupported)) ((xkwargs)))))
                xtest_warn_on_dealloc_fd.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_check_warn_on_dealloc_fd)) ("rb") (0))
                        bogusForceDataize.write ((((xself).x_check_warn_on_dealloc_fd)) ("rb"))
                        bogusForceDataize.write ((((xself).x_check_warn_on_dealloc_fd)) ("r"))
                xtest_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xkwargs)) ((((unsupported)) ((((unsupported)) ("mode") ("w"))) ((((unsupported)) ("mode") ("wb"))) ((((unsupported)) ("mode") ("wb") ("buffering") (0))) ((((unsupported)) ("mode") ("r"))) ((((unsupported)) ("mode") ("rb"))) ((((unsupported)) ("mode") ("rb") ("buffering") (0))) ((((unsupported)) ("mode") ("w+"))) ((((unsupported)) ("mode") ("w+b"))) ((((unsupported)) ("mode") ("w+b") ("buffering") (0))))))
                        (((unsupported)) ((xprotocol)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ((((unsupported)) ((xkwargs)))))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpickle).xdumps)) ((xf)) ((xprotocol)))
                xtest_nonblock_pipe_write_bigbuf.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_nonblock_pipe_write)) ((16.mul 1024)))
                xtest_nonblock_pipe_write_smallbuf.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_nonblock_pipe_write)) (1024))
                x_test_nonblock_pipe_write.write
                  [xself xbufsize]
                    memory > xreceived
                    memory > xsent
                    memory > xrf
                    memory > xmsg
                    memory > xi
                    memory > xwf
                    seq > @
                      (((unsupported)) 0)
                        xsent.write (((unsupported)) 0)
                        xreceived.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xos).xset_blocking)) ((xr)) (FALSE))
                        bogusForceDataize.write ((((xos).xset_blocking)) ((xw)) (FALSE))
                        xrf.write (((unsupported)) (((xself).xopen)) ((xr)) ("rb") (TRUE) ((xbufsize)))
                        xwf.write (((unsupported)) (((xself).xopen)) ((xw)) ("wb") (TRUE) ((xbufsize)))
                        (((unsupported)) ((xrf)) ((xwf)))
                          seq
                            (((unsupported)) ((xN)) ((((unsupported)) (9999) (73) (7574))))
                              (((unsupported)) (((xself).xBlockingIOError)))
                                seq
                                  xi.write 0
                                  while.
                                    TRUE
                                    [unused]
                                      seq > @
                                        seq
                                          xmsg.write ((((xbytes)) ((((unsupported)) ((((xi).mod 26).add 97))))).mul (xN))
                                          bogusForceDataize.write ((((xsent).xappend)) ((xmsg)))
                                          bogusForceDataize.write ((((xwf).xwrite)) ((xmsg)))
                                          (((unsupported)) ((xi)) (1))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) (((xerrno).xEAGAIN)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (2))) (((xe).xcharacters_written)))
                                  (((unsupported)) ((((unsupported)) ((xsent)) ((1.neg)))) ((((unsupported)) ((((unsupported)) ((xsent)) ((1.neg)))) ((((unsupported)) (((xe).xcharacters_written)))))))
                                  bogusForceDataize.write ((((xreceived).xappend)) (((((xrf).xread)) 0)))
                                  xmsg.write "BLOCKED"
                                  bogusForceDataize.write ((((xwf).xwrite)) ((xmsg)))
                                  bogusForceDataize.write ((((xsent).xappend)) ((xmsg)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  (((unsupported)) (((xself).xBlockingIOError)))
                                    seq
                                      bogusForceDataize.write ((((xwf).xflush)) 0)
                                      (((unsupported)) 0)
                                    seq
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) (((xerrno).xEAGAIN)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (2))) (((xe).xcharacters_written)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xcharacters_written)) (0))
                                      bogusForceDataize.write ((((xreceived).xappend)) (((((xrf).xread)) 0)))
                            (((unsupported)) ((xreceived)) ((((xiter)) (((xrf).xread)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) ((((unsupported)) ((xsent)) ((xreceived)))) ((((unsupported)) (((("".xjoin)) ((xsent)))) (((("".xjoin)) ((xreceived)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) ((xreceived)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xwf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xrf).xclosed)))
                xtest_create_fail.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("w"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileExistsError)) (((xself).xopen)) (((xsupport).xTESTFN)) ("x"))
                xtest_create_writes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("xb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("spam"))
                        (((unsupported)) (((((xself).xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ("spam") (((((xf).xread)) 0)))
                xtest_open_allargs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xopen)) (((xsupport).xTESTFN)) ("rwax+"))
            (((unsupported)) ((xMiscIOTest)))
              seq
                xio.write (xio)
                xtest_readinto_buffer_overflow.write
                  [xself]
                    memory > xbufio
                    memory > xb
                    memory > xread
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xio).xBufferedIOBase)))
                          xread.write
                            [xself xn]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) (("x".mul (((unsupported)) (10) (6)))))
                        xbufio.write (((xBadReader)) 0)
                        xb.write (((xbytearray)) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbufio).xreadinto)) ((xb)))
                xcheck_daemon_threads_shutdown_deadlock.write
                  [xself xstream_name]
                    memory > xcode
                    memory > xerr
                    memory > xpattern
                    seq > @
                      seq
                        xcode.write ((((((unsupported)) 0).xformat_map)) ((((xlocals)) 0)))
                        (((unsupported)) ((((unsupported)) ((xres)) ((x_)))) ((((xrun_python_until_end)) ("-c") ((xcode)))))
                        xerr.write (((((xres).xerr).xdecode)) 0)
                        (((xres).xrc).neq 0).if
                          seq
                            xpattern.write ((("Fatal Python error: could not acquire lock for <(_io.)?BufferedWriter name='<{stream_name}>'> at interpreter shutdown, possibly due to daemon threads".xformat_map)) ((((xlocals)) 0)))
                            bogusForceDataize.write ((((xself).xassertRegex)) ((xerr)) ((xpattern)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xerr).xstrip)) (".!"))))
                xtest_daemon_threads_shutdown_stdout_deadlock.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_daemon_threads_shutdown_deadlock)) ("stdout"))
                xtest_daemon_threads_shutdown_stderr_deadlock.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_daemon_threads_shutdown_deadlock)) ("stderr"))
            (((unsupported)) ((xMiscIOTest)))
              xio.write (xpyio)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xos).xname).eq "nt")) ("POSIX signals required for this test."))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xoldalrm)) (((((xsignal).xsignal)) (((xsignal).xSIGALRM)) (((xself).xalarm_interrupt)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) (((xself).xoldalrm)))
                xalarm_interrupt.write
                  [xself xsig xframe]
                    seq > @
                      unsupported
                xcheck_interrupted_write.write
                  [xself xitem xbytes]
                    memory > x_read
                    memory > xwio
                    memory > xt
                    memory > xread_results
                    memory > xlarge_data
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xread_results.write (((unsupported)) 0)
                        x_read.write
                          []
                            memory > xs
                            seq > @
                              seq
                                xs.write ((((xos).xread)) ((xr)) (1))
                                bogusForceDataize.write ((((xread_results).xappend)) ((xs)))
                        xt.write (((unsupported)) (((xthreading).xThread)) ((x_read)))
                        (((unsupported)) (((xt).xdaemon)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((((unsupported)) ((xfdopen_kwargs)) ("closefd"))) (FALSE))
                        xlarge_data.write ((xitem).mul ((((unsupported)) (((xsupport).xPIPE_MAX_SIZE)) ((((xlen)) ((xitem))))).add 1))
                        (((unsupported)) 0)
                          seq
                            xwio.write (((((xself).xio).xopen)) ((xw)) ((((unsupported)) ((xfdopen_kwargs)))))
                            (((xhasattr)) ((xsignal)) ("pthread_sigmask")).if
                              seq
                                bogusForceDataize.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_BLOCK)) ((((unsupported)) (((xsignal).xSIGALRM)))))
                                bogusForceDataize.write ((((xt).xstart)) 0)
                                bogusForceDataize.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_UNBLOCK)) ((((unsupported)) (((xsignal).xSIGALRM)))))
                              bogusForceDataize.write ((((xt).xstart)) 0)
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            (((unsupported)) 0)
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) (((xwio).xwrite)) ((xlarge_data)))
                              seq
                                bogusForceDataize.write ((((xsignal).xalarm)) (0))
                                bogusForceDataize.write ((((xt).xjoin)) 0)
                            bogusForceDataize.write ((((xread_results).xappend)) (((((xos).xread)) ((xr)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xread_results)) ((((unsupported)) ((((unsupported)) ((xbytes)) ((((unsupported)) (0) (1))))) ((((unsupported)) ((xbytes)) ((((unsupported)) (1) (2))))))))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            (((unsupported)) ((xOSError)))
                              bogusForceDataize.write ((((xwio).xclose)) 0)
                              (((xe).xerrno).neq ((xerrno).xEBADF)).if
                                (((unsupported)) 0)
                xtest_interrupted_write_unbuffered.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_write)) ("xy") ("xy") ("wb") (0))
                xtest_interrupted_write_buffered.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_write)) ("xy") ("xy") ("wb"))
                xtest_interrupted_write_text.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_write)) ("xy") ("xy") ("w") ("ascii"))
                xcheck_reentrant_write.write
                  [xself xdata]
                    memory > xon_alarm
                    memory > xwio
                    memory > xexc
                    seq > @
                      (((unsupported)) 0)
                        xon_alarm.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xwio).xwrite)) ((xdata)))
                                unsupported
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xon_alarm)))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        xwio.write (((((xself).xio).xopen)) ((xw)) ((((unsupported)) ((xfdopen_kwargs)))))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xZeroDivisionError)) ((xRuntimeError)))))) ((xcm)))
                              while.
                                1
                                [unused]
                                  seq > @
                                    seq
                                      (((unsupported)) ((xi)) ((((xrange)) (100))))
                                        seq
                                          bogusForceDataize.write ((((xwio).xwrite)) ((xdata)))
                                          bogusForceDataize.write ((((xwio).xflush)) 0)
                                      bogusForceDataize.write ((((xos).xread)) ((xr)) (((((xlen)) ((xdata))).mul 100)))
                            xexc.write ((xcm).xexception)
                            (((xisinstance)) ((xexc)) ((xRuntimeError))).if
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((((xstr)) ((xexc))).xstartswith)) ("reentrant call"))) ((((xstr)) ((xexc)))))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (0))
                            bogusForceDataize.write ((((xwio).xclose)) 0)
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                xtest_reentrant_write_buffered.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_reentrant_write)) ("xy") ("wb"))
                xtest_reentrant_write_text.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_reentrant_write)) ("xy") ("w") ("ascii"))
                xcheck_interrupted_read_retry.write
                  [xself xdecode]
                    memory > xrio
                    memory > xalarm_handler
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((((unsupported)) ((xfdopen_kwargs)) ("closefd"))) (FALSE))
                        xalarm_handler.write
                          [xsig xframe]
                            seq > @
                              bogusForceDataize.write ((((xos).xwrite)) ((xw)) ("bar"))
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xalarm_handler)))
                        (((unsupported)) 0)
                          seq
                            xrio.write (((((xself).xio).xopen)) ((xr)) ((((unsupported)) ((xfdopen_kwargs)))))
                            bogusForceDataize.write ((((xos).xwrite)) ((xw)) ("foo"))
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) (((((xrio).xread)) (6))))) ("foobar"))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (0))
                            bogusForceDataize.write ((((xrio).xclose)) 0)
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                xtest_interrupted_read_retry_buffered.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_read_retry)) ((((unsupported)) (((((xx).xdecode)) ("latin1"))))) ("rb"))
                xtest_interrupted_read_retry_text.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_read_retry)) ((((unsupported)) ((xx)))) ("r"))
                xcheck_interrupted_write_retry.write
                  [xself xitem]
                    memory > x_read
                    memory > xerror
                    memory > xwio
                    memory > xt
                    memory > xselect
                    memory > xwritten
                    memory > xlarge_data
                    memory > xalarm1
                    memory > xN
                    memory > xalarm2
                    memory > xread_results
                    memory > xwrite_finished
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xselect.write ((((xsupport).ximport_module)) ("select"))
                        xN.write ((xsupport).xPIPE_MAX_SIZE)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((((unsupported)) ((xfdopen_kwargs)) ("closefd"))) (FALSE))
                        xread_results.write (((unsupported)) 0)
                        xwrite_finished.write FALSE
                        xerror.write "None: is there a None literal in the EO language?"
                        x_read.write
                          []
                            memory > xs
                            memory > xerror
                            seq > @
                              (((unsupported)) ((xBaseException)))
                                while.
                                  ((xwrite_finished).not)
                                  [unused]
                                    seq > @
                                      while.
                                        (((unsupported)) ((xr)) ((((unsupported)) (((((xselect).xselect)) ((((unsupported)) ((xr)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (1.0))) (0))))
                                        [unused]
                                          seq > @
                                            seq
                                              xs.write ((((xos).xread)) ((xr)) (1024))
                                              bogusForceDataize.write ((((xread_results).xappend)) ((xs)))
                                seq
                                  (((unsupported)) 0)
                                  xerror.write (xexc)
                        xt.write (((unsupported)) (((xthreading).xThread)) ((x_read)))
                        (((unsupported)) (((xt).xdaemon)) (TRUE))
                        xalarm1.write
                          [xsig xframe]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xalarm2)))
                                bogusForceDataize.write ((((xsignal).xalarm)) (1))
                        xalarm2.write
                          [xsig xframe]
                            seq > @
                              bogusForceDataize.write ((((xt).xstart)) 0)
                        xlarge_data.write ((xitem).mul (xN))
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xalarm1)))
                        (((unsupported)) 0)
                          seq
                            xwio.write (((((xself).xio).xopen)) ((xw)) ((((unsupported)) ((xfdopen_kwargs)))))
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            xwritten.write ((((xwio).xwrite)) ((xlarge_data)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xN)) ((xwritten)))
                            bogusForceDataize.write ((((xwio).xflush)) 0)
                            xwrite_finished.write TRUE
                            bogusForceDataize.write ((((xt).xjoin)) 0)
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((xerror)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xN)) ((((xsum)) ((((unsupported)) ((((xlen)) ((xx)))) ((xx)) ((xread_results)))))))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (0))
                            xwrite_finished.write TRUE
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            (((unsupported)) ((xOSError)))
                              bogusForceDataize.write ((((xwio).xclose)) 0)
                              (((xe).xerrno).neq ((xerrno).xEBADF)).if
                                (((unsupported)) 0)
                xtest_interrupted_write_retry_buffered.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_write_retry)) ("x") ("wb"))
                xtest_interrupted_write_retry_text.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_interrupted_write_retry)) ("x") ("w") ("latin1"))
            (((unsupported)) ((xSignalsTest)))
              xio.write (xio)
            (((unsupported)) ((xSignalsTest)))
              seq
                xio.write (xpyio)
                xtest_reentrant_write_buffered.write "None: is there a None literal in the EO language?"
                xtest_reentrant_write_text.write "None: is there a None literal in the EO language?"
            xload_tests.write
              []
                memory > xmocks
                memory > xpy_io_ns
                memory > xc_io_ns
                memory > xsuite
                memory > xall_members
                memory > xglobs
                memory > xtests
                seq > @
                  (((unsupported)) 0)
                    xtests.write (((unsupported)) ((xCIOTest)) ((xPyIOTest)) ((xAPIMismatchTest)) ((xCBufferedReaderTest)) ((xPyBufferedReaderTest)) ((xCBufferedWriterTest)) ((xPyBufferedWriterTest)) ((xCBufferedRWPairTest)) ((xPyBufferedRWPairTest)) ((xCBufferedRandomTest)) ((xPyBufferedRandomTest)) ((xStatefulIncrementalDecoderTest)) ((xCIncrementalNewlineDecoderTest)) ((xPyIncrementalNewlineDecoderTest)) ((xCTextIOWrapperTest)) ((xPyTextIOWrapperTest)) ((xCMiscIOTest)) ((xPyMiscIOTest)) ((xCSignalsTest)) ((xPySignalsTest)))
                    xmocks.write (((unsupported)) ((xMockRawIO)) ((xMisbehavedRawIO)) ((xMockFileIO)) ((xCloseFailureIO)) ((xMockNonBlockWriterIO)) ((xMockUnseekableIO)) ((xMockRawIOWithoutRead)) ((xSlowFlushRawIO)))
                    xall_members.write (((xio).x__all__).add (((unsupported)) ("IncrementalNewlineDecoder")))
                    xc_io_ns.write (((unsupported)) ((xname)) ((((xgetattr)) ((xio)) ((xname)))) ((xname)) ((xall_members)))
                    xpy_io_ns.write (((unsupported)) ((xname)) ((((xgetattr)) ((xpyio)) ((xname)))) ((xname)) ((xall_members)))
                    xglobs.write (((xglobals)) 0)
                    bogusForceDataize.write ((((xc_io_ns).xupdate)) ((((unsupported)) ((((unsupported)) (((xx).x__name__)) ((((unsupported)) ((xglobs)) (("C".add ((xx).x__name__))))))) ((xx)) ((xmocks)))))
                    bogusForceDataize.write ((((xpy_io_ns).xupdate)) ((((unsupported)) ((((unsupported)) (((xx).x__name__)) ((((unsupported)) ((xglobs)) (("Py".add ((xx).x__name__))))))) ((xx)) ((xmocks)))))
                    (((unsupported)) ((((unsupported)) ((xpy_io_ns)) ("open"))) (((xpyio).xOpenWrapper)))
                    (((unsupported)) ((xtest)) ((xtests)))
                      (((((xtest).x__name__).xstartswith)) ("C")).if
                        (((unsupported)) ((((unsupported)) ((xname)) ((xobj)))) (((((xc_io_ns).xitems)) 0)))
                          bogusForceDataize.write (((xsetattr)) ((xtest)) ((xname)) ((xobj)))
                        (((((xtest).x__name__).xstartswith)) ("Py")).if
                          (((unsupported)) ((((unsupported)) ((xname)) ((xobj)))) (((((xpy_io_ns).xitems)) 0)))
                            bogusForceDataize.write (((xsetattr)) ((xtest)) ((xname)) ((xobj)))
                    xsuite.write ((((xunittest).xTestSuite)) ((((unsupported)) (((((xunittest).xmakeSuite)) ((xtest)))) ((xtest)) ((xtests)))))
                    (((unsupported)) ((xsuite)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)