memory > xrun_unittest
memory > xAttributeError
memory > xINT_MAX
memory > xBadFile
memory > xINT_MIN
memory > xopen
memory > xprint
memory > xrepr
memory > xunittest
memory > xValueError
memory > ximport_module
memory > x_testcapi
memory > xverbose
memory > xProcess
memory > xOverflowError
memory > xstruct
memory > xsys
memory > xTestFcntl
memory > xunlink
memory > xTESTFN
memory > xos
memory > xBlockingIOError
memory > xTypeError
memory > x__name__
[] > test_fcntl
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xfileno
        memory > xtest_fcntl_64_bit
        memory > xtest_fcntl_bad_file_overflow
        memory > xtry_lockf_on_other_process_fail
        memory > xtest_main
        memory > xtest_flock
        memory > xtest_fcntl_file_descriptor
        memory > xfcntl
        memory > xtest_lockf_share
        memory > xlockdata
        memory > xtest_lockf_exclusive
        memory > xtearDown
        memory > xsetUp
        memory > xget_lockdata
        memory > xtry_lockf_on_other_process
        memory > xtest_flock_overflow
        memory > xtest_fcntl_bad_file
        memory > xtest_fcntl_fileno
        memory > x__init__
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            xfcntl.write (((ximport_module)) ("fcntl"))
            xget_lockdata.write
              []
                memory > xlockdata
                memory > xoff_t
                memory > xpid_t
                memory > xstart_len
                seq > @
                  seq
                    (((unsupported)) ((xAttributeError)))
                      unsupported
                      xstart_len.write "ll"
                      xstart_len.write "qq"
                    ((((((xsys).xplatform).xstartswith)) ((((unsupported)) ("netbsd") ("freebsd") ("openbsd")))).or (((xsys).xplatform).eq "darwin")).if
                      seq
                        (((((xstruct).xcalcsize)) ("l")).eq 8).if
                          seq
                            xoff_t.write "l"
                            xpid_t.write "i"
                          seq
                            xoff_t.write "lxxxx"
                            xpid_t.write "l"
                        xlockdata.write ((((xstruct).xpack)) (((((xoff_t).add (xoff_t)).add (xpid_t)).add "hh")) (0) (0) (0) (((xfcntl).xF_WRLCK)) (0))
                      (((((xsys).xplatform).xstartswith)) ("gnukfreebsd")).if
                        xlockdata.write ((((xstruct).xpack)) ("qqihhi") (0) (0) (0) (((xfcntl).xF_WRLCK)) (0) (0))
                        (((unsupported)) (((xsys).xplatform)) ((((unsupported)) ("hp-uxB") ("unixware7")))).if
                          xlockdata.write ((((xstruct).xpack)) ("hhlllii") (((xfcntl).xF_WRLCK)) (0) (0) (0) (0) (0) (0))
                          xlockdata.write ((((xstruct).xpack)) ((("hh".add (xstart_len)).add "hh")) (((xfcntl).xF_WRLCK)) (0) (0) (0) (0) (0))
                    (xlockdata).if
                      (xverbose).if
                        bogusForceDataize.write (((xprint)) ("struct.pack: ") ((((xrepr)) ((xlockdata)))))
                    (((unsupported)) ((xlockdata)))
            xlockdata.write (((xget_lockdata)) 0)
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xfn]
                    seq > @
                      (((unsupported)) (((xself).xfn)) ((xfn)))
                xfileno.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfn)))
            xtry_lockf_on_other_process_fail.write
              [xfname xcmd]
                memory > xf
                seq > @
                  seq
                    xf.write (((xopen)) ((xfname)) ("wb+"))
                    (((unsupported)) ((xBlockingIOError)))
                      bogusForceDataize.write ((((xfcntl).xlockf)) ((xf)) ((xcmd)))
                      bogusForceDataize.write ((((xf).xclose)) 0)
            xtry_lockf_on_other_process.write
              [xfname xcmd]
                memory > xf
                seq > @
                  seq
                    xf.write (((xopen)) ((xfname)) ("wb+"))
                    bogusForceDataize.write ((((xfcntl).xlockf)) ((xf)) ((xcmd)))
                    bogusForceDataize.write ((((xfcntl).xlockf)) ((xf)) (((xfcntl).xLOCK_UN)))
                    bogusForceDataize.write ((((xf).xclose)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xf)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((xself).xf).and ((((xself).xf).xclosed).not)).if
                          bogusForceDataize.write (((((xself).xf).xclose)) 0)
                        bogusForceDataize.write (((xunlink)) ((xTESTFN)))
                xtest_fcntl_fileno.write
                  [xself]
                    memory > xrv
                    seq > @
                      seq
                        (((unsupported)) (((xself).xf)) ((((xopen)) ((xTESTFN)) ("wb"))))
                        xrv.write ((((xfcntl).xfcntl)) ((((((xself).xf).xfileno)) 0)) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("Status from fcntl with O_NONBLOCK: ") ((xrv)))
                        xrv.write ((((xfcntl).xfcntl)) ((((((xself).xf).xfileno)) 0)) (((xfcntl).xF_SETLKW)) ((xlockdata)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("String from fcntl with F_SETLKW: ") ((((xrepr)) ((xrv)))))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                xtest_fcntl_file_descriptor.write
                  [xself]
                    memory > xrv
                    seq > @
                      seq
                        (((unsupported)) (((xself).xf)) ((((xopen)) ((xTESTFN)) ("wb"))))
                        xrv.write ((((xfcntl).xfcntl)) (((xself).xf)) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("Status from fcntl with O_NONBLOCK: ") ((xrv)))
                        xrv.write ((((xfcntl).xfcntl)) (((xself).xf)) (((xfcntl).xF_SETLKW)) ((xlockdata)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("String from fcntl with F_SETLKW: ") ((((xrepr)) ((xrv)))))
                        bogusForceDataize.write (((((xself).xf).xclose)) 0)
                xtest_fcntl_bad_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((1.neg)) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((((xBadFile)) ((1.neg)))) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ("spam") (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((((xBadFile)) ("spam"))) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                xtest_fcntl_bad_file_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) (((xINT_MAX).add 1)) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((((xBadFile)) (((xINT_MAX).add 1)))) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) (((xINT_MIN).sub 1)) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((((xBadFile)) (((xINT_MIN).sub 1)))) (((xfcntl).xF_SETFL)) (((xos).xO_NONBLOCK)))
                xtest_fcntl_64_bit.write
                  [xself]
                    memory > xflags
                    memory > xfd
                    memory > xcmd
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xAttributeError)))
                          seq
                            xcmd.write ((xfcntl).xF_NOTIFY)
                            xflags.write ((xfcntl).xDN_MULTISHOT)
                          bogusForceDataize.write ((((xself).xskipTest)) ("F_NOTIFY or DN_MULTISHOT unavailable"))
                        xfd.write ((((xos).xopen)) ((((((xos).xpath).xdirname)) ((((((xos).xpath).xabspath)) ((xTESTFN)))))) (((xos).xO_RDONLY)))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xfcntl).xfcntl)) ((xfd)) ((xcmd)) ((xflags)))
                          bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_flock.write
                  [xself]
                    memory > xfileno
                    seq > @
                      seq
                        (((unsupported)) (((xself).xf)) ((((xopen)) ((xTESTFN)) ("wb+"))))
                        xfileno.write (((((xself).xf).xfileno)) 0)
                        bogusForceDataize.write ((((xfcntl).xflock)) ((xfileno)) (((xfcntl).xLOCK_SH)))
                        bogusForceDataize.write ((((xfcntl).xflock)) ((xfileno)) (((xfcntl).xLOCK_UN)))
                        bogusForceDataize.write ((((xfcntl).xflock)) (((xself).xf)) ((((xfcntl).xLOCK_SH).or ((xfcntl).xLOCK_NB))))
                        bogusForceDataize.write ((((xfcntl).xflock)) (((xself).xf)) (((xfcntl).xLOCK_UN)))
                        bogusForceDataize.write ((((xfcntl).xflock)) ((xfileno)) (((xfcntl).xLOCK_EX)))
                        bogusForceDataize.write ((((xfcntl).xflock)) ((xfileno)) (((xfcntl).xLOCK_UN)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfcntl).xflock)) ((1.neg)) (((xfcntl).xLOCK_SH)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xfcntl).xflock)) ("spam") (((xfcntl).xLOCK_SH)))
                xtest_lockf_exclusive.write
                  [xself]
                    memory > xp
                    memory > xcmd
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xf)) ((((xopen)) ((xTESTFN)) ("wb+"))))
                        xcmd.write (((xfcntl).xLOCK_EX).or ((xfcntl).xLOCK_NB))
                        bogusForceDataize.write ((((xfcntl).xlockf)) (((xself).xf)) ((xcmd)))
                        xp.write (((unsupported)) ((xProcess)) ((xtry_lockf_on_other_process_fail)) ((((unsupported)) ((xTESTFN)) ((xcmd)))))
                        bogusForceDataize.write ((((xp).xstart)) 0)
                        bogusForceDataize.write ((((xp).xjoin)) 0)
                        bogusForceDataize.write ((((xfcntl).xlockf)) (((xself).xf)) (((xfcntl).xLOCK_UN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xexitcode)) (0))
                xtest_lockf_share.write
                  [xself]
                    memory > xp
                    memory > xcmd
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xf)) ((((xopen)) ((xTESTFN)) ("wb+"))))
                        xcmd.write (((xfcntl).xLOCK_SH).or ((xfcntl).xLOCK_NB))
                        bogusForceDataize.write ((((xfcntl).xlockf)) (((xself).xf)) ((xcmd)))
                        xp.write (((unsupported)) ((xProcess)) ((xtry_lockf_on_other_process)) ((((unsupported)) ((xTESTFN)) ((xcmd)))))
                        bogusForceDataize.write ((((xp).xstart)) 0)
                        bogusForceDataize.write ((((xp).xjoin)) 0)
                        bogusForceDataize.write ((((xfcntl).xlockf)) (((xself).xf)) (((xfcntl).xLOCK_UN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xexitcode)) (0))
                xtest_flock_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xfcntl).xflock)) ((((x_testcapi).xINT_MAX).add 1)) (((xfcntl).xLOCK_SH)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write (((xrun_unittest)) ((xTestFcntl)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)