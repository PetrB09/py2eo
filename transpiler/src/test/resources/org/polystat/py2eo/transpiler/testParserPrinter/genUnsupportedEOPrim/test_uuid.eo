memory > xinteger
memory > xpickle
memory > xbble
memory > xurn
memory > xrange
memory > xproto
memory > xversion
memory > xtime
memory > xbytes
memory > xclock_seq
memory > xobject
memory > xcopy
memory > xu
memory > xBaseTestUUID
memory > xValueError
memory > xstr
memory > xio
memory > xis_safe
memory > xfields
memory > xh
memory > xvariant
memory > xb
memory > xii
memory > xprint
memory > xtype
memory > xf
memory > xstring
memory > xint
memory > xff
memory > xx
memory > xpickled
memory > xi
memory > xbuiltins
memory > xsupport
memory > xsys
memory > xhh
memory > xcurly
memory > xsubprocess
memory > xmock
memory > xos
memory > xbb
memory > xweakref
memory > xv
memory > xbytes_le
memory > xBaseTestInternals
memory > xsetattr
memory > xshutil
memory > xunittest
memory > x__import__
memory > xhex
memory > xj
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
[] > test_uuid
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_uuid3
        memory > xtest_find_mac
        memory > xtest_exceptions
        memory > xtest_uuid1_unknown
        memory > xtest_UUID
        memory > xtest_uuid_weakref
        memory > xtest_uuid1
        memory > xtest_uuid1_safe
        memory > xtest_pickle_roundtrip
        memory > xtest_random_getnode
        memory > ximportable
        memory > xtest_uuid1_is_unsafe
        memory > xtest_uuid4
        memory > xtest_netbios_getnode
        memory > xtest_ipconfig_getnode
        memory > xtest_uuid1_eui64
        memory > xtest_getnode
        memory > xuuid
        memory > xtest_windll_getnode
        memory > xtest_netstat_getnode
        memory > xtest_unix_getnode
        memory > xtest_unpickle_previous_python_versions
        memory > xmock_generate_time_safe
        memory > xc_uuid
        memory > xtest_uuid1_is_safe
        memory > xtest_uuid1_time
        memory > xtestIssue8621
        memory > xtest_uuid1_bogus_return_value
        memory > xtest_uuid5
        memory > xpy_uuid
        memory > xtest_ip_getnode
        memory > x_uuid
        memory > xcheck_node
        memory > xtest_ifconfig_getnode
        memory > xtest_arp_getnode
        memory > xtest_lanscan_getnode
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xpy_uuid.write (((unsupported)) (((xsupport).ximport_fresh_module)) ("uuid") ((((unsupported)) ("_uuid"))))
            xc_uuid.write (((unsupported)) (((xsupport).ximport_fresh_module)) ("uuid") ((((unsupported)) ("_uuid"))))
            ximportable.write
              [xname]
                seq > @
                  (((unsupported)) 0)
                    seq
                      bogusForceDataize.write (((x__import__)) ((xname)))
                      (((unsupported)) (TRUE))
                    (((unsupported)) (FALSE))
            (((unsupported)) 0)
              seq
                xuuid.write "None: is there a None literal in the EO language?"
                xtest_UUID.write
                  [xself]
                    memory > xequivalents
                    memory > xascending
                    memory > xresorted
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        xascending.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xstring)) ((xcurly)) ((xhex)) ((xbytes)) ((xbytes_le)) ((xfields)) ((xinteger)) ((xurn)) ((xtime)) ((xclock_seq)) ((xvariant)) ((xversion)))) ((((unsupported)) ((((unsupported)) ("00000000-0000-0000-0000-000000000000") ("{00000000-0000-0000-0000-000000000000}") ("00000000000000000000000000000000") ("0000000000000000") ("0000000000000000") ((((unsupported)) (0) (0) (0) (0) (0) (0))) (0) ("urn:uuid:00000000-0000-0000-0000-000000000000") (0) (0) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("00010203-0405-0607-0809-0a0b0c0d0e0f") ("{00010203-0405-0607-0809-0a0b0c0d0e0f}") ("000102030405060708090a0b0c0d0e0f") ("0x01x02x03x04x05x06x07x08tnx0bx0cx0dx0ex0f") ("x03x02x010x05x04x07x06x08tnx0bx0cx0dx0ex0f") ((((unsupported)) (66051) (1029) (1543) (8) (9) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:00010203-0405-0607-0809-0a0b0c0d0e0f") ((((unsupported)) 0)) (2057) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("02d9e6d5-9467-382e-8f9b-9300a64ac3cd") ("{02d9e6d5-9467-382e-8f9b-9300a64ac3cd}") ("02d9e6d59467382e8f9b9300a64ac3cd") ("x02xd9xe6xd5x94x67x38x2ex8fx9bx93x00xa6x4axc3xcd") ("xd5xe6xd9x02x67x94x2ex38x8fx9bx93x00xa6x4axc3xcd") ((((unsupported)) (47834837) (37991) (14382) (143) (155) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:02d9e6d5-9467-382e-8f9b-9300a64ac3cd") ((((unsupported)) 0)) (3995) ((((xself).xuuid).xRFC_4122)) (3))) ((((unsupported)) ("12345678-1234-5678-1234-567812345678") ("{12345678-1234-5678-1234-567812345678}") ("12345678123456781234567812345678") (("x12x34x56x78".mul 4)) ("x78x56x34x12x34x12x78x56x12x34x56x78x12x34x56x78") ((((unsupported)) (305419896) (4660) (22136) (18) (52) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:12345678-1234-5678-1234-567812345678") ((((unsupported)) 0)) (4660) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("6ba7b810-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b810-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8109dad11d180b400c04fd430c8") ("x6bxa7xb8x10x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x10xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)) (1806153744) (40365) (4561) (128) (180) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)) 0)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("6ba7b811-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b811-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8119dad11d180b400c04fd430c8") ("x6bxa7xb8x11x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x11xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)) (1806153745) (40365) (4561) (128) (180) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:6ba7b811-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)) 0)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("6ba7b812-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b812-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8129dad11d180b400c04fd430c8") ("x6bxa7xb8x12x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x12xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)) (1806153746) (40365) (4561) (128) (180) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:6ba7b812-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)) 0)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("6ba7b814-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b814-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8149dad11d180b400c04fd430c8") ("x6bxa7xb8x14x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x14xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)) (1806153748) (40365) (4561) (128) (180) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:6ba7b814-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)) 0)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("7d444840-9dc0-11d1-b245-5ffdce74fad2") ("{7d444840-9dc0-11d1-b245-5ffdce74fad2}") ("7d4448409dc011d1b2455ffdce74fad2") ("x7dx44x48x40x9dxc0x11xd1xb2x45x5fxfdxcex74xfaxd2") ("x40x48x44x7dxc0x9dxd1x11xb2x45x5fxfdxcex74xfaxd2") ((((unsupported)) (2101626944) (40384) (4561) (178) (69) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:7d444840-9dc0-11d1-b245-5ffdce74fad2") ((((unsupported)) 0)) (12869) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("e902893a-9d22-3c7e-a7b8-d6e313b71d9f") ("{e902893a-9d22-3c7e-a7b8-d6e313b71d9f}") ("e902893a9d223c7ea7b8d6e313b71d9f") ("xe9x02x89x3ax9dx22x3cx7exa7xb8xd6xe3x13xb7x1dx9f") ("x3ax89x02xe9x22x9dx7ex3cxa7xb8xd6xe3x13xb7x1dx9f") ((((unsupported)) ((((unsupported)) 0)) (40226) (15486) (167) (184) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:e902893a-9d22-3c7e-a7b8-d6e313b71d9f") ((((unsupported)) 0)) (10168) ((((xself).xuuid).xRFC_4122)) (3))) ((((unsupported)) ("eb424026-6f54-4ef8-a4d0-bb658a1fc6cf") ("{eb424026-6f54-4ef8-a4d0-bb658a1fc6cf}") ("eb4240266f544ef8a4d0bb658a1fc6cf") ("xebx42x40x26x6fx54x4exf8xa4xd0xbbx65x8ax1fxc6xcf") ("x26x40x42xebx54x6fxf8x4exa4xd0xbbx65x8ax1fxc6xcf") ((((unsupported)) ((((unsupported)) 0)) (28500) (20216) (164) (208) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:eb424026-6f54-4ef8-a4d0-bb658a1fc6cf") ((((unsupported)) 0)) (9424) ((((xself).xuuid).xRFC_4122)) (4))) ((((unsupported)) ("f81d4fae-7dec-11d0-a765-00a0c91e6bf6") ("{f81d4fae-7dec-11d0-a765-00a0c91e6bf6}") ("f81d4fae7dec11d0a76500a0c91e6bf6") ("xf8x1dx4fxaex7dxecx11xd0xa7x65x00xa0xc9x1ex6bxf6") ("xaex4fx1dxf8xecx7dxd0x11xa7x65x00xa0xc9x1ex6bxf6") ((((unsupported)) ((((unsupported)) 0)) (32236) (4560) (167) (101) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6") ((((unsupported)) 0)) (10085) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)) ("fffefdfc-fffe-fffe-fffe-fffefdfcfbfa") ("{fffefdfc-fffe-fffe-fffe-fffefdfcfbfa}") ("fffefdfcfffefffefffefffefdfcfbfa") ("xffxfexfdxfcxffxfexffxfexffxfexffxfexfdxfcxfbxfa") ("xfcxfdxfexffxfexffxfexffxffxfexffxfexfdxfcxfbxfa") ((((unsupported)) ((((unsupported)) 0)) (65534) (65534) (255) (254) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:fffefdfc-fffe-fffe-fffe-fffefdfcfbfa") ((((unsupported)) 0)) (16382) ((((xself).xuuid).xRESERVED_FUTURE)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("ffffffff-ffff-ffff-ffff-ffffffffffff") ("{ffffffff-ffff-ffff-ffff-ffffffffffff}") ("ffffffffffffffffffffffffffffffff") (("xff".mul 16)) (("xff".mul 16)) ((((unsupported)) ((((unsupported)) 0)) (65535) (65535) (255) (255) ((((unsupported)) 0)))) ((((unsupported)) 0)) ("urn:uuid:ffffffff-ffff-ffff-ffff-ffffffffffff") ((((unsupported)) 0)) (16383) ((((xself).xuuid).xRESERVED_FUTURE)) ("None: is there a None literal in the EO language?"))))))
                          seq
                            xequivalents.write (((unsupported)) 0)
                            (((unsupported)) ((xu)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xstring)))) ((((((xself).xuuid).xUUID)) ((xcurly)))) ((((((xself).xuuid).xUUID)) ((xhex)))) ((((unsupported)) ((((xself).xuuid).xUUID)) ((xbytes)))) ((((unsupported)) ((((xself).xuuid).xUUID)) ((xbytes_le)))) ((((unsupported)) ((((xself).xuuid).xUUID)) ((xfields)))) ((((unsupported)) ((((xself).xuuid).xUUID)) ((xinteger)))) ((((((xself).xuuid).xUUID)) ((xurn)))))))
                              seq
                                bogusForceDataize.write (((xequal)) ((((xstr)) ((xu)))) ((xstring)))
                                bogusForceDataize.write (((xequal)) ((((xint)) ((xu)))) ((xinteger)))
                                bogusForceDataize.write (((xequal)) (((xu).xbytes)) ((xbytes)))
                                bogusForceDataize.write (((xequal)) (((xu).xbytes_le)) ((xbytes_le)))
                                bogusForceDataize.write (((xequal)) (((xu).xfields)) ((xfields)))
                                bogusForceDataize.write (((xequal)) (((xu).xtime_low)) ((((unsupported)) ((xfields)) (0))))
                                bogusForceDataize.write (((xequal)) (((xu).xtime_mid)) ((((unsupported)) ((xfields)) (1))))
                                bogusForceDataize.write (((xequal)) (((xu).xtime_hi_version)) ((((unsupported)) ((xfields)) (2))))
                                bogusForceDataize.write (((xequal)) (((xu).xclock_seq_hi_variant)) ((((unsupported)) ((xfields)) (3))))
                                bogusForceDataize.write (((xequal)) (((xu).xclock_seq_low)) ((((unsupported)) ((xfields)) (4))))
                                bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) ((xfields)) (5))))
                                bogusForceDataize.write (((xequal)) (((xu).xhex)) ((xhex)))
                                bogusForceDataize.write (((xequal)) (((xu).xint)) ((xinteger)))
                                bogusForceDataize.write (((xequal)) (((xu).xurn)) ((xurn)))
                                bogusForceDataize.write (((xequal)) (((xu).xtime)) ((xtime)))
                                bogusForceDataize.write (((xequal)) (((xu).xclock_seq)) ((xclock_seq)))
                                bogusForceDataize.write (((xequal)) (((xu).xvariant)) ((xvariant)))
                                bogusForceDataize.write (((xequal)) (((xu).xversion)) ((xversion)))
                                bogusForceDataize.write ((((xequivalents).xappend)) ((xu)))
                            (((unsupported)) ((xu)) ((xequivalents)))
                              (((unsupported)) ((xv)) ((xequivalents)))
                                bogusForceDataize.write (((xequal)) ((xu)) ((xv)))
                            bogusForceDataize.write (((xequal)) ((((xtype)) (((xu).xbytes)))) (((xbuiltins).xbytes)))
                            bogusForceDataize.write (((xequal)) ((((xtype)) (((xu).xbytes_le)))) (((xbuiltins).xbytes)))
                            bogusForceDataize.write ((((xascending).xappend)) ((xu)))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xascending)))))))
                          (((unsupported)) ((xj)) ((((xrange)) ((((xlen)) ((xascending)))))))
                            seq
                              bogusForceDataize.write (((xequal)) (((xi).less (xj))) (((((unsupported)) ((xascending)) ((xi))).less (((unsupported)) ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)) (((xi).leq (xj))) (((((unsupported)) ((xascending)) ((xi))).leq (((unsupported)) ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)) (((xi).eq (xj))) (((((unsupported)) ((xascending)) ((xi))).eq (((unsupported)) ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)) (((xi).greater (xj))) (((((unsupported)) ((xascending)) ((xi))).greater (((unsupported)) ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)) (((xi).geq (xj))) (((((unsupported)) ((xascending)) ((xi))).geq (((unsupported)) ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)) (((xi).neq (xj))) (((((unsupported)) ((xascending)) ((xi))).neq (((unsupported)) ((xascending)) ((xj))))))
                        xresorted.write (((unsupported)) ((xascending)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xresorted).xreverse)) 0)
                        bogusForceDataize.write ((((xresorted).xsort)) 0)
                        bogusForceDataize.write (((xequal)) ((xascending)) ((xresorted)))
                xtest_exceptions.write
                  [xself]
                    memory > xargs
                    memory > xbadvalue
                    memory > xbadtype
                    memory > xu
                    seq > @
                      seq
                        xbadvalue.write (((unsupported)) (((((xself).xassertRaises)) ((xValueError)) ((xf)))))
                        xbadtype.write (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)) ((xf)))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((((xself).xuuid).xUUID)) (""))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ("1234567812345678123456781234567"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ("123456781234567812345678123456789"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ("123456781234567812345678z2345678"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("0".mul 15)))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("0".mul 17)))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("0".mul 15)))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("0".mul 17)))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (1))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (1) (2) (3) (4) (5))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (1) (2) (3) (4) (5) (6) (7))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) ((1.neg)) (0) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) ((((unsupported)) 0)) (0) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) ((1.neg)) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (65536) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) ((1.neg)) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (65536) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) ((1.neg)) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) (256) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) (0) ((1.neg)) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) (0) (256) (0))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) (0) (0) ((1.neg)))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (0) (0) (0) (0) (0) ((((unsupported)) 0)))))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("00".mul 16)) (0))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) (("00".mul 16)) (6))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((1.neg)))))))
                        bogusForceDataize.write (((xbadvalue)) ((((unsupported)) ((((unsupported)) ((((xself).xuuid).xUUID)) ((((unsupported)) (1) (128))))))))
                        (((unsupported)) ((((unsupported)) ((xh)) ((xb)) ((xf)) ((xi)))) ((((unsupported)) (("00".mul 16)) (("0".mul 16)) ((((unsupported)) (0) (0) (0) (0) (0) (0))) (0))))
                        bogusForceDataize.write (((((xself).xuuid).xUUID)) ((xh)))
                        (((unsupported)) ((((xself).xuuid).xUUID)) ((xh)))
                        (((unsupported)) ((((xself).xuuid).xUUID)) ((xb)))
                        (((unsupported)) ((((xself).xuuid).xUUID)) ((xb)))
                        (((unsupported)) ((((xself).xuuid).xUUID)) ((xf)))
                        (((unsupported)) ((((xself).xuuid).xUUID)) ((xi)))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) 0)))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xh)) ((xb)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xh)) ((xb)) ((xb)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xh)) ((xb)) ((xb)) ((xf)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xh)) ((xb)) ((xb)) ((xf)) ((xi)))))))
                        (((unsupported)) ((xhh)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("hex") ((xh)))))))))
                          (((unsupported)) ((xbb)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("bytes") ((xb)))))))))
                            (((unsupported)) ((xbble)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("bytes_le") ((xb)))))))))
                              (((unsupported)) ((xii)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("int") ((xi)))))))))
                                (((unsupported)) ((xff)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("fields") ((xf)))))))))
                                  seq
                                    xargs.write (((xdict)) ((((((xhh).add (xbb)).add (xbble)).add (xii)).add (xff))))
                                    ((((xlen)) ((xargs))).neq 0).if
                                      bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((xh)) ((((unsupported)) ((xargs)))))))))
                                    ((((xlen)) ((xargs))).neq 1).if
                                      bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((((xself).xuuid).xUUID)) ((((unsupported)) ((xargs)))))))))
                        xu.write (((((xself).xuuid).xUUID)) ((xh)))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("hex") ((xh)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("bytes") ((xb)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("bytes_le") ((xb)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("fields") ((xf)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("int") ((xi)))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("time_low") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("time_mid") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("time_hi_version") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("time_hi_version") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("clock_seq_hi_variant") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("clock_seq_low") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) ((((xsetattr)) ((xu)) ("node") (0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) (((xu).less (((xobject)) 0))))))
                        bogusForceDataize.write (((xbadtype)) ((((unsupported)) (((xu).greater (((xobject)) 0))))))
                xtest_getnode.write
                  [xself]
                    memory > xnode2
                    memory > xnode1
                    seq > @
                      seq
                        xnode1.write (((((xself).xuuid).xgetnode)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (0) ((xnode1)) ((((unsupported)) (1) (48))))) (("%012x".mod (xnode1))))
                        xnode2.write (((((xself).xuuid).xgetnode)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnode1)) ((xnode2)) (("%012x != %012x".mod (((unsupported)) ((xnode1)) ((xnode2))))))
                xtest_pickle_roundtrip.write
                  [xself]
                    memory > xcheck
                    memory > xu
                    seq > @
                      seq
                        xcheck.write
                          [xactual xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xactual).xis_safe)) (((xexpected).xis_safe)))
                        (((unsupported)) (((((xsupport).xswap_item)) (((xsys).xmodules)) ("uuid") (((xself).xuuid)))))
                          (((unsupported)) ((xis_safe)) ((((xself).xuuid).xSafeUUID)))
                            seq
                              xu.write (((unsupported)) ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") ((xis_safe)))
                              bogusForceDataize.write (((xcheck)) (((((xcopy).xcopy)) ((xu)))) ((xu)))
                              bogusForceDataize.write (((xcheck)) (((((xcopy).xdeepcopy)) ((xu)))) ((xu)))
                              (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xproto)))))
                                  bogusForceDataize.write (((xcheck)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xu)) ((xproto)))))) ((xu)))
                xtest_unpickle_previous_python_versions.write
                  [xself]
                    memory > xu
                    memory > xpickled_uuids_safe
                    memory > xcheck
                    memory > xu_unsafe
                    memory > xpickled_uuids
                    memory > xpickled_uuids_unsafe
                    memory > xu_safe
                    seq > @
                      seq
                        xcheck.write
                          [xactual xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xactual).xis_safe)) (((xexpected).xis_safe)))
                        xpickled_uuids.write (((unsupported)) ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dS'int'nL287307832597519156748809049798316161701Lnsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}Ux03intL287307832597519156748809049798316161701Lnsb.") ("x80x02cuuidnUUIDn)x81}Ux03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701Lnsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}Xx03x00x00x00intL287307832597519156748809049798316161701Lnsb.") ("x80x02cuuidnUUIDn)x81}Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("x80x03cuuidnUUIDn)x81}Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("x80x04x95+x00x00x00x00x00x00x00x8cx04uuidx8cx04UUIDx93)x81}x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(NtRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(NtRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnNx85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnNx85Rub.") ("x80x04x95Fx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Nx85Rub."))
                        xpickled_uuids_safe.write (((unsupported)) ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(I0ntRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(Kx00tRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnKx00x85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnKx00x85Rub.") ("x80x04x95Gx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Kx00x85Rub."))
                        xpickled_uuids_unsafe.write (((unsupported)) ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(I-1ntRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(JxffxffxffxfftRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnJxffxffxffxffx85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnJxffxffxffxffx85Rub.") ("x80x04x95Jx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Jxffxffxffxffx85Rub."))
                        xu.write (((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5"))
                        xu_safe.write (((unsupported)) ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") (((((xself).xuuid).xSafeUUID).xsafe)))
                        xu_unsafe.write (((unsupported)) ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") (((((xself).xuuid).xSafeUUID).xunsafe)))
                        (((unsupported)) (((((xsupport).xswap_item)) (((xsys).xmodules)) ("uuid") (((xself).xuuid)))))
                          seq
                            (((unsupported)) ((xpickled)) ((xpickled_uuids)))
                              bogusForceDataize.write (((xcheck)) (((((xpickle).xloads)) ((xpickled)))) ((xu)))
                            (((unsupported)) ((xpickled)) ((xpickled_uuids_safe)))
                              bogusForceDataize.write (((xcheck)) (((((xpickle).xloads)) ((xpickled)))) ((xu_safe)))
                            (((unsupported)) ((xpickled)) ((xpickled_uuids_unsafe)))
                              bogusForceDataize.write (((xcheck)) (((((xpickle).xloads)) ((xpickled)))) ((xu_unsafe)))
                xtest_uuid1_eui64.write
                  [xself]
                    memory > xnode
                    memory > xtoo_large_getter
                    seq > @
                      seq
                        xtoo_large_getter.write (((unsupported)) ((((unsupported)) (1) (48))))
                        (((unsupported)) ((((unsupported)) (((((xunittest).xmock).xpatch).xmultiple)) (((xself).xuuid)) ("None: is there a None literal in the EO language?") ((((unsupported)) ((xtoo_large_getter)))))))
                          xnode.write (((((xself).xuuid).xgetnode)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (0) ((xnode)) ((((unsupported)) (1) (48))))) (("%012x".mod (xnode))))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((((xself).xuuid).xuuid1)) ((xnode)))
                          bogusForceDataize.write ((((xself).xfail)) ("uuid1 was given an invalid node ID"))
                xtest_uuid1.write
                  [xself]
                    memory > xequal
                    memory > xuuids
                    memory > xu
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)) ((xu)) ((((unsupported)) ((((((xself).xuuid).xuuid1)) 0)) ((xi)) ((((xrange)) (10))))))
                          seq
                            bogusForceDataize.write (((xequal)) (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)) (((xu).xversion)) (1))
                            bogusForceDataize.write ((((xself).xassertIn)) (((xu).xis_safe)) ((((unsupported)) (((((xself).xuuid).xSafeUUID).xsafe)) (((((xself).xuuid).xSafeUUID).xunsafe)) (((((xself).xuuid).xSafeUUID).xunknown)))))
                        xuuids.write (((unsupported)) 0)
                        (((unsupported)) ((xu)) ((((unsupported)) ((((((xself).xuuid).xuuid1)) 0)) ((xi)) ((((xrange)) (1000))))))
                          (((unsupported)) ((((unsupported)) ((xuuids)) ((xu)))) (1))
                        bogusForceDataize.write (((xequal)) ((((xlen)) (((((xuuids).xkeys)) 0)))) (1000))
                        xu.write (((((xself).xuuid).xuuid1)) (0))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) (0))
                        xu.write (((((xself).xuuid).xuuid1)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) 0)))
                        xu.write (((((xself).xuuid).xuuid1)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) 0)))
                        xu.write (((((xself).xuuid).xuuid1)) ((((unsupported)) 0)) (0))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xequal)) (((((unsupported)) ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (0))
                        xu.write (((((xself).xuuid).xuuid1)) ((((unsupported)) 0)) (4660))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xequal)) (((((unsupported)) ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (4660))
                        xu.write (((((xself).xuuid).xuuid1)) ((((unsupported)) 0)) (16383))
                        bogusForceDataize.write (((xequal)) (((xu).xnode)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xequal)) (((((unsupported)) ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (16383))
                xtest_uuid1_safe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)) 0)
                        ((((xself).xuuid).x_has_uuid_generate_time_safe).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("requires uuid_generate_time_safe(3)"))
                        xu.write (((((xself).xuuid).xuuid1)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xmock_generate_time_safe.write
                  [xself xsafe_value]
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((xos).xname).neq "posix").if
                          bogusForceDataize.write ((((xself).xskipTest)) ("POSIX-only test"))
                        bogusForceDataize.write (((((xself).xuuid).x_load_system_functions)) 0)
                        xf.write (((xself).xuuid).x_generate_time_safe)
                        (((unsupported)) ((xf)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("need uuid._generate_time_safe"))
                        (((unsupported)) (((((((xunittest).xmock).xpatch).xobject)) (((xself).xuuid)) ("_generate_time_safe") ((((unsupported)) ((((unsupported)) ((((unsupported)) ((((xf)) 0)) (0))) ((xsafe_value)))))))))
                          (((unsupported)) 0)
                xtest_uuid1_unknown.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xmock_generate_time_safe)) ("None: is there a None literal in the EO language?"))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xtest_uuid1_is_safe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xmock_generate_time_safe)) (0))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xsafe)))
                xtest_uuid1_is_unsafe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xmock_generate_time_safe)) ((1.neg)))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunsafe)))
                xtest_uuid1_bogus_return_value.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xmock_generate_time_safe)) (3))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xtest_uuid1_time.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_has_uuid_generate_time_safe") (FALSE))) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_generate_time_safe") ("None: is there a None literal in the EO language?"))) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_last_timestamp") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ((((xmock).xpatch).xobject)) (((xself).xuuid)) ("getnode") ((((unsupported)) 0)))) ((((unsupported)) (((xmock).xpatch)) ("time.time_ns") ((((unsupported)) 0)))) ((((unsupported)) (((xmock).xpatch)) ("random.getrandbits") (5317))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((((((xself).xuuid).xUUID)) ("a7a55b92-01fc-11e9-94c5-54e1acf6da7f"))))
                        (((unsupported)) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_has_uuid_generate_time_safe") (FALSE))) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_generate_time_safe") ("None: is there a None literal in the EO language?"))) ((((((xmock).xpatch).xobject)) (((xself).xuuid)) ("_last_timestamp") ("None: is there a None literal in the EO language?"))) ((((unsupported)) (((xmock).xpatch)) ("time.time_ns") ((((unsupported)) 0)))))
                          seq
                            xu.write (((unsupported)) ((((xself).xuuid).xuuid1)) ((((unsupported)) 0)) (5317))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((((((xself).xuuid).xUUID)) ("a7a55b92-01fc-11e9-94c5-54e1acf6da7f"))))
                xtest_uuid3.write
                  [xself]
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)) ((((unsupported)) ((xu)) ((xv)))) ((((unsupported)) ((((unsupported)) ((((((xself).xuuid).xuuid3)) ((((xself).xuuid).xNAMESPACE_DNS)) ("python.org"))) ("6fa459ea-ee8a-3ca4-894e-db77e160355e"))) ((((unsupported)) ((((((xself).xuuid).xuuid3)) ((((xself).xuuid).xNAMESPACE_URL)) ("http://python.org/"))) ("9fe8e8c4-aaa8-32a9-a55c-4535a88b748d"))) ((((unsupported)) ((((((xself).xuuid).xuuid3)) ((((xself).xuuid).xNAMESPACE_OID)) ("1.3.6.1"))) ("dd1a1cef-13d5-368a-ad82-eca71acd4cd1"))) ((((unsupported)) ((((((xself).xuuid).xuuid3)) ((((xself).xuuid).xNAMESPACE_X500)) ("c=ca"))) ("658d3002-db6b-3040-a1d1-8ddd7d189a4d"))))))
                          seq
                            bogusForceDataize.write (((xequal)) (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)) (((xu).xversion)) (3))
                            bogusForceDataize.write (((xequal)) ((xu)) ((((((xself).xuuid).xUUID)) ((xv)))))
                            bogusForceDataize.write (((xequal)) ((((xstr)) ((xu)))) ((xv)))
                xtest_uuid4.write
                  [xself]
                    memory > xequal
                    memory > xuuids
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)) ((xu)) ((((unsupported)) ((((((xself).xuuid).xuuid4)) 0)) ((xi)) ((((xrange)) (10))))))
                          seq
                            bogusForceDataize.write (((xequal)) (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)) (((xu).xversion)) (4))
                        xuuids.write (((unsupported)) 0)
                        (((unsupported)) ((xu)) ((((unsupported)) ((((((xself).xuuid).xuuid4)) 0)) ((xi)) ((((xrange)) (1000))))))
                          (((unsupported)) ((((unsupported)) ((xuuids)) ((xu)))) (1))
                        bogusForceDataize.write (((xequal)) ((((xlen)) (((((xuuids).xkeys)) 0)))) (1000))
                xtest_uuid5.write
                  [xself]
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)) ((((unsupported)) ((xu)) ((xv)))) ((((unsupported)) ((((unsupported)) ((((((xself).xuuid).xuuid5)) ((((xself).xuuid).xNAMESPACE_DNS)) ("python.org"))) ("886313e1-3b8a-5372-9b90-0c9aee199e5d"))) ((((unsupported)) ((((((xself).xuuid).xuuid5)) ((((xself).xuuid).xNAMESPACE_URL)) ("http://python.org/"))) ("4c565f0d-3f5a-5890-b41b-20cf47701c5e"))) ((((unsupported)) ((((((xself).xuuid).xuuid5)) ((((xself).xuuid).xNAMESPACE_OID)) ("1.3.6.1"))) ("1447fa61-5277-5fef-a9b3-fbc6e44f4af3"))) ((((unsupported)) ((((((xself).xuuid).xuuid5)) ((((xself).xuuid).xNAMESPACE_X500)) ("c=ca"))) ("cc957dd1-a972-5349-98cd-874190002798"))))))
                          seq
                            bogusForceDataize.write (((xequal)) (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)) (((xu).xversion)) (5))
                            bogusForceDataize.write (((xequal)) ((xu)) ((((((xself).xuuid).xUUID)) ((xv)))))
                            bogusForceDataize.write (((xequal)) ((((xstr)) ((xu)))) ((xv)))
                xtestIssue8621.write
                  [xself]
                    memory > xpid
                    memory > xvalue
                    memory > xparent_value
                    memory > xchild_value
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        xfds.write ((((xos).xpipe)) 0)
                        xpid.write ((((xos).xfork)) 0)
                        ((xpid).eq 0).if
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((((unsupported)) ((xfds)) (0))))
                            xvalue.write (((((xself).xuuid).xuuid4)) 0)
                            bogusForceDataize.write ((((xos).xwrite)) ((((unsupported)) ((xfds)) (1))) ((((((xvalue).xhex).xencode)) ("latin-1"))))
                            bogusForceDataize.write ((((xos).x_exit)) (0))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((((unsupported)) ((xfds)) (1))))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (0))))
                            xparent_value.write ((((((xself).xuuid).xuuid4)) 0).xhex)
                            bogusForceDataize.write ((((xos).xwaitpid)) ((xpid)) (0))
                            xchild_value.write (((((((xos).xread)) ((((unsupported)) ((xfds)) (0))) (100)).xdecode)) ("latin-1"))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xparent_value)) ((xchild_value)))
                xtest_uuid_weakref.write
                  [xself]
                    memory > xweak
                    memory > xstrong
                    seq > @
                      seq
                        xstrong.write (((((xself).xuuid).xuuid4)) 0)
                        xweak.write ((((xweakref).xref)) ((xstrong)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xstrong)) ((((xweak)) 0)))
            (((unsupported)) ((xBaseTestUUID)) (((xunittest).xTestCase)))
              xuuid.write (xpy_uuid)
            (((unsupported)) ((xBaseTestUUID)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xc_uuid)) ("requires the C _uuid module"))))
              xuuid.write (xc_uuid)
            (((unsupported)) 0)
              seq
                x_uuid.write (xpy_uuid)
                xtest_find_mac.write
                  [xself]
                    memory > xmac
                    memory > xpopen
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xdata.write (((unsupported)) 0)
                        xpopen.write (((((xunittest).xmock).xMagicMock)) 0)
                        (((unsupported)) (((xpopen).xstdout)) (((((xio).xBytesIO)) (((((xdata).xencode)) 0)))))
                        (((unsupported)) ((((unsupported)) (((((xunittest).xmock).xpatch).xobject)) ((xshutil)) ("which") ("/sbin/ifconfig"))))
                          (((unsupported)) ((((unsupported)) (((((xunittest).xmock).xpatch).xobject)) ((xsubprocess)) ("Popen") ((xpopen)))))
                            xmac.write (((unsupported)) ((((xself).xuuid).x_find_mac)) ("ifconfig") ("") ((((unsupported)) ("hwaddr"))) ((((unsupported)) (((xx).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmac)) ((((unsupported)) 0)))
                xcheck_node.write
                  [xself xnode xrequires]
                    memory > xhex
                    seq > @
                      (((unsupported)) 0)
                        ((xrequires).and (((unsupported)) ((xnode)) ("None: is there a None literal in the EO language?"))).if
                          bogusForceDataize.write ((((xself).xskipTest)) (("requires ".add (xrequires))))
                        xhex.write ("%012x".mod (xnode))
                        (((xsupport).xverbose).geq 2).if
                          (((unsupported)) ((xprint)) ((xhex)) (" "))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (0) ((xnode)) ((((unsupported)) (1) (48))))) (("%s is not an RFC 4122 node ID".mod (xhex))))
                xtest_ifconfig_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_ifconfig_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("ifconfig"))
                xtest_ip_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_ip_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("ip"))
                xtest_arp_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_arp_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("arp"))
                xtest_lanscan_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_lanscan_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("lanscan"))
                xtest_netstat_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_netstat_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("netstat"))
                xtest_ipconfig_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_ipconfig_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("ipconfig"))
                xtest_netbios_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_netbios_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)))
                xtest_random_getnode.write
                  [xself]
                    memory > xnode2
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((((xself).xuuid).x_random_getnode)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xnode).and (((unsupported)) (1) (40)))) (("%012x".mod (xnode))))
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)))
                        xnode2.write (((((xself).xuuid).x_random_getnode)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnode2)) ((xnode)) (("%012x".mod (xnode))))
                xtest_unix_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        (((((ximportable)) ("_uuid")).not).and ((((ximportable)) ("ctypes")).not)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("neither _uuid extension nor ctypes available"))
                        (((unsupported)) ((xTypeError)))
                          xnode.write (((((xself).xuuid).x_unix_getnode)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("requires uuid_generate_time"))
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)) ("unix"))
                xtest_windll_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)) 0)
                        xnode.write (((((xself).xuuid).x_windll_getnode)) 0)
                        bogusForceDataize.write ((((xself).xcheck_node)) ((xnode)))
            (((unsupported)) ((xBaseTestInternals)) (((xunittest).xTestCase)))
              xuuid.write (xpy_uuid)
            (((unsupported)) ((xBaseTestInternals)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xc_uuid)) ("requires the C _uuid module"))))
              xuuid.write (xc_uuid)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)