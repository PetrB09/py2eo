memory > xlist
memory > xAssertionError
memory > xcall
memory > xdedent
memory > xmock
memory > xExitStack
memory > xunittest
memory > xEOFError
memory > xlen
memory > x__name__
memory > xsupport
memory > xsys
[] > test_code_module
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_banner
        memory > xsetUp
        memory > xtest_syntax_error
        memory > xcode
        memory > xtest_ps2
        memory > xtest_cause_tb
        memory > xtest_context_tb
        memory > xtest_exit_msg
        memory > xtest_ps1
        memory > xmock_sys
        memory > xtest_console_stderr
        memory > xtest_sysexcepthook
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xcode.write ((((xsupport).ximport_module)) ("code"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xconsole)) (((((xcode).xInteractiveConsole)) 0)))
                        bogusForceDataize.write ((((xself).xmock_sys)) 0)
                xmock_sys.write
                  [xself]
                    memory > xprepatch
                    memory > xstack
                    seq > @
                      seq
                        unsupported
                        xstack.write (((xExitStack)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xstack).xclose)))
                        (((unsupported)) (((xself).xinfunc)) (((((xstack).xenter_context)) ((((unsupported)) (((xmock).xpatch)) ("code.input") (TRUE))))))
                        (((unsupported)) (((xself).xstdout)) (((((xstack).xenter_context)) (((((xmock).xpatch)) ("code.sys.stdout"))))))
                        (((unsupported)) (((xself).xstderr)) (((((xstack).xenter_context)) (((((xmock).xpatch)) ("code.sys.stderr"))))))
                        xprepatch.write (((unsupported)) (((xmock).xpatch)) ("code.sys") (((xcode).xsys)) (((xcode).xsys)))
                        (((unsupported)) (((xself).xsysmod)) (((((xstack).xenter_context)) ((xprepatch)))))
                        (((unsupported)) (((xsys).xexcepthook)) (((xsys).x__excepthook__))).if
                          (((unsupported)) ((((xself).xsysmod).xexcepthook)) ((((xself).xsysmod).x__excepthook__)))
                        (((unsupported)) ((((unsupported)) ((((xself).xsysmod).xps1)))))
                        (((unsupported)) ((((unsupported)) ((((xself).xsysmod).xps2)))))
                xtest_ps1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xsysmod).xps1)) (">>> "))
                        (((unsupported)) ((((xself).xsysmod).xps1)) ("custom1> "))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xsysmod).xps1)) ("custom1> "))
                xtest_ps2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xsysmod).xps2)) ("... "))
                        (((unsupported)) ((((xself).xsysmod).xps1)) ("custom2> "))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xsysmod).xps1)) ("custom2> "))
                xtest_console_stderr.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((unsupported)) ("'antioch'") ("") ((((xEOFError)) ("Finished"))))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        (((unsupported)) ((xcall)) ((((xlist)) ((((xself).xstdout).xmethod_calls)))))
                          (((unsupported)) ("antioch") (((("".xjoin)) ((((unsupported)) ((xcall)) (1)))))).if
                            (((unsupported)) 0)
                          (((unsupported)) ((((xAssertionError)) ("no console stdout"))))
                xtest_syntax_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((unsupported)) ("undefined") ((((xEOFError)) ("Finished"))))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        (((unsupported)) ((xcall)) ((((xself).xstderr).xmethod_calls)))
                          (((unsupported)) ("NameError") (((("".xjoin)) ((((unsupported)) ((xcall)) (1)))))).if
                            (((unsupported)) 0)
                          (((unsupported)) ((((xAssertionError)) ("No syntax error from console"))))
                xtest_sysexcepthook.write
                  [xself]
                    memory > xhook
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((unsupported)) ("raise ValueError('')") ((((xEOFError)) ("Finished"))))))
                        xhook.write ((((xmock).xMock)) 0)
                        (((unsupported)) ((((xself).xsysmod).xexcepthook)) ((xhook)))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xhook).xcalled)))
                xtest_banner.write
                  [xself]
                    memory > xbanner_call
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        (((unsupported)) ((((xself).xconsole).xinteract)) ("Foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xstderr).xmethod_calls)))) (3))
                        xbanner_call.write (((unsupported)) ((((xself).xstderr).xmethod_calls)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbanner_call)) ((((unsupported)) ("write") ((((unsupported)) ("Foon"))) ((((unsupported)) 0)))))
                        bogusForceDataize.write (((((xself).xstderr).xreset_mock)) 0)
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        (((unsupported)) ((((xself).xconsole).xinteract)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xstderr).xmethod_calls)))) (2))
                xtest_exit_msg.write
                  [xself]
                    memory > xerr_msg
                    memory > xexpected
                    memory > xmessage
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        (((unsupported)) ((((xself).xconsole).xinteract)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xstderr).xmethod_calls)))) (2))
                        xerr_msg.write (((unsupported)) ((((xself).xstderr).xmethod_calls)) (1))
                        xexpected.write "now exiting InteractiveConsole...n"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xerr_msg)) ((((unsupported)) ("write") ((((unsupported)) ((xexpected)))) ((((unsupported)) 0)))))
                        bogusForceDataize.write (((((xself).xstderr).xreset_mock)) 0)
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        (((unsupported)) ((((xself).xconsole).xinteract)) ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xstderr).xmethod_calls)))) (1))
                        bogusForceDataize.write (((((xself).xstderr).xreset_mock)) 0)
                        xmessage.write "bye! N{GREEK SMALL LETTER ZETA}N{CYRILLIC SMALL LETTER ZHE}"
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((xEOFError)) ("Finished"))))
                        (((unsupported)) ((((xself).xconsole).xinteract)) ("") ((xmessage)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xstderr).xmethod_calls)))) (2))
                        xerr_msg.write (((unsupported)) ((((xself).xstderr).xmethod_calls)) (1))
                        xexpected.write ((xmessage).add "n")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xerr_msg)) ((((unsupported)) ("write") ((((unsupported)) ((xexpected)))) ((((unsupported)) 0)))))
                xtest_cause_tb.write
                  [xself]
                    memory > xexpected
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((unsupported)) ("raise ValueError('') from AttributeError") ((((xEOFError)) ("Finished"))))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        xoutput.write ((("".xjoin)) ((((unsupported)) (((("".xjoin)) ((((unsupported)) ((xcall)) (1))))) ((xcall)) ((((xself).xstderr).xmethod_calls)))))
                        xexpected.write (((xdedent)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xexpected)) ((xoutput)))
                xtest_context_tb.write
                  [xself]
                    memory > xexpected
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xinfunc).xside_effect)) ((((unsupported)) ("try: hamnexcept: eggsn") ((((xEOFError)) ("Finished"))))))
                        bogusForceDataize.write (((((xself).xconsole).xinteract)) 0)
                        xoutput.write ((("".xjoin)) ((((unsupported)) (((("".xjoin)) ((((unsupported)) ((xcall)) (1))))) ((xcall)) ((((xself).xstderr).xmethod_calls)))))
                        xexpected.write (((xdedent)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xexpected)) ((xoutput)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)