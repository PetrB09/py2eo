memory > xexpected
memory > xRuntimeError
memory > xValueError
memory > xfile
memory > xrange
memory > x_
memory > xKeyError
memory > x_imp
memory > xi
memory > xDeprecationWarning
memory > xos
memory > xpy_compile
memory > xext
memory > xmodname
memory > x_frozen_importlib_external
memory > xBadSpec
memory > xscript_helper
memory > xfileobj
memory > xfilename
memory > xImportError
memory > xAttributeError
memory > xfd
memory > xteststr
memory > ximportlib
memory > xwarnings
memory > xinfo
memory > x_frozen_importlib
memory > xdescription
memory > xpathname
memory > xerr
memory > xparser
memory > xopen
memory > xpath
memory > xtype
memory > xhasattr
memory > xtime
memory > xsupport
memory > xsys
memory > xencoding
memory > xgetattr
memory > xmod
memory > xSyntaxError
memory > x__file__
memory > xunittest
memory > xinterp_args
memory > xmarshal
memory > xfp
memory > ximp
memory > xTypeError
memory > x__name__
[] > test_imp
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_load_module_extension_file_is_None
        memory > xtest_unencodeable
        memory > xtest_load_from_source
        memory > xverify_lock_state
        memory > xrequires_load_dynamic
        memory > xtest_load_dynamic_ImportError_path
        memory > xsetUp
        memory > xtest_find_and_load_checked_pyc
        memory > xtest_multiple_calls_to_get_data
        memory > xtest_issue_35321
        memory > xtest_cache_from_source
        memory > xtest_source_from_cache
        memory > xtest_issue5604
        memory > xtest_builtin
        memory > xtest_find_module_encoding
        memory > xtest_issue9319
        memory > xtest_pyc_invalidation_mode_from_cmdline
        memory > xtest_issue16421_multiple_modules_in_one_dll
        memory > xtest_source_hash
        memory > xtest_issue24748_load_module_skips_sys_modules_check
        memory > xtestLock
        memory > xtag
        memory > xtest_source
        memory > xtest_with_deleted_parent
        memory > xtest_issue1267
        memory > xtest_import_encoded_module
        memory > xtest_issue3594
        memory > xtest_issue31315
        memory > xtest_load_source
        memory > xtest_issue15828_load_extensions
        memory > xtest_extension
        memory > xtest_bug7732
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
              seq
                bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore") ((xDeprecationWarning)))
                (((unsupported)) 0)
            (((unsupported)) 0)
            xrequires_load_dynamic.write
              [xmeth]
                seq > @
                  seq
                    (((unsupported)) 0)
                    xmeth.write ((((xsupport).xcpython_only)) ((xmeth)))
                    (((unsupported)) (((((((xunittest).xskipIf)) (((((xhasattr)) ((ximp)) ("load_dynamic")).not)) ("imp.load_dynamic() required"))) ((xmeth)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xverify_lock_state.write
                  [xself xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((ximp).xlock_held)) 0)) ((xexpected)) (("expected imp.lock_held() to be %r".mod (xexpected))))
                xtestLock.write
                  [xself]
                    memory > xLOOPS
                    memory > xlock_held_at_start
                    seq > @
                      seq
                        xLOOPS.write 50
                        xlock_held_at_start.write ((((ximp).xlock_held)) 0)
                        bogusForceDataize.write ((((xself).xverify_lock_state)) ((xlock_held_at_start)))
                        (((unsupported)) ((xi)) ((((xrange)) ((xLOOPS)))))
                          seq
                            bogusForceDataize.write ((((ximp).xacquire_lock)) 0)
                            bogusForceDataize.write ((((xself).xverify_lock_state)) (TRUE))
                        (((unsupported)) ((xi)) ((((xrange)) ((xLOOPS)))))
                          bogusForceDataize.write ((((ximp).xrelease_lock)) 0)
                        bogusForceDataize.write ((((xself).xverify_lock_state)) ((xlock_held_at_start)))
                        ((xlock_held_at_start).not).if
                          (((unsupported)) ((xRuntimeError)))
                            bogusForceDataize.write ((((ximp).xrelease_lock)) 0)
                            bogusForceDataize.write ((((xself).xfail)) ("release_lock() without lock should raise RuntimeError"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xmod
                    seq > @
                      seq
                        xmod.write ((((ximportlib).ximport_module)) ("test.encoded_modules"))
                        (((unsupported)) (((xself).xtest_strings)) (((xmod).xtest_strings)))
                        (((unsupported)) (((xself).xtest_path)) (((xmod).x__path__)))
                xtest_import_encoded_module.write
                  [xself]
                    memory > xmod
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xmodname)) ((xencoding)) ((xteststr)))) (((xself).xtest_strings)))
                        seq
                          xmod.write ((((ximportlib).ximport_module)) (("test.encoded_modules.module_".add (xmodname))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xteststr)) (((xmod).xtest)))
                xtest_find_module_encoding.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmod)) ((xencoding)) ((x_)))) (((xself).xtest_strings)))
                          (((unsupported)) ((((unsupported)) (((((ximp).xfind_module)) (("module_".add (xmod))) (((xself).xtest_path)))) (0))) ((xfd)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xfd).xencoding)) ((xencoding)))
                        xpath.write (((unsupported)) ((((((xos).xpath).xdirname)) ((x__file__)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write ((((ximp).xfind_module)) ("badsyntax_pep3120") ((xpath)))
                xtest_issue1267.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmod)) ((xencoding)) ((x_)))) (((xself).xtest_strings)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xfp)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)) (("module_".add (xmod))) (((xself).xtest_path)))))
                            (((unsupported)) ((xfp)))
                              seq
                                bogusForceDataize.write ((((xself).xassertNotEqual)) ((xfp)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xfp).xencoding)) ((xencoding)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xtell)) 0)) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) 0)) (("# test %s encodingn".mod (xencoding))))
                        (((unsupported)) ((((unsupported)) ((xfp)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)) ("tokenize"))))
                        (((unsupported)) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xfp)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xfp).xencoding)) ("utf-8"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xtell)) 0)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) 0)) ("\"\"\"Tokenization help for Python programs.n"))
                xtest_issue3594.write
                  [xself]
                    memory > xtemp_mod_name
                    seq > @
                      seq
                        xtemp_mod_name.write "test_imp_helper"
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ("."))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((xopen)) (((xtemp_mod_name).add ".py")) ("w"))) ((xfile)))
                              bogusForceDataize.write ((((xfile).xwrite)) ("# coding: cp1252nu = 'test.test_imp'n"))
                            (((unsupported)) ((((unsupported)) ((xfile)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)) ((xtemp_mod_name)))))
                            bogusForceDataize.write ((((xfile).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xfile).xencoding)) ("cp1252"))
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xtemp_mod_name).add ".py")))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xtemp_mod_name).add ".pyc")))
                xtest_issue5604.write
                  [xself]
                    memory > xdecoded_char
                    memory > xfs_encoding
                    memory > xtest_package_name
                    memory > xmod
                    memory > xspecial_char
                    memory > xpackage
                    memory > xinit_file_name
                    memory > xtemp_mod_name
                    memory > xknown_locales
                    seq > @
                      seq
                        xfs_encoding.write ((((xsys).xgetfilesystemencoding)) 0)
                        xknown_locales.write (((unsupported)) ("utf-8") ("xc3xa4") ("cp1250") ("x8C") ("cp1251") ("xc0") ("cp1252") ("xc0") ("cp1253") ("xc1") ("cp1254") ("xc0") ("cp1255") ("xe0") ("cp1256") ("xe0") ("cp1257") ("xc0") ("cp1258") ("xc0"))
                        (((xsys).xplatform).eq "darwin").if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xfs_encoding)) ("utf-8"))
                            xspecial_char.write "axccx88"
                          xspecial_char.write ((((xknown_locales).xget)) ((xfs_encoding)))
                        ((xspecial_char).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) (("can't run this test with %s as filesystem encoding".mod (xfs_encoding))))
                        xdecoded_char.write ((((xspecial_char).xdecode)) ((xfs_encoding)))
                        xtemp_mod_name.write ("test_imp_helper_".add (xdecoded_char))
                        xtest_package_name.write ("test_imp_helper_package_".add (xdecoded_char))
                        xinit_file_name.write (((((xos).xpath).xjoin)) ((xtest_package_name)) ("__init__.py"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) (((xos).xcurdir)))
                            (((unsupported)) ((((xopen)) (((xtemp_mod_name).add ".py")) ("w"))) ((xfile)))
                              bogusForceDataize.write ((((xfile).xwrite)) ("a = 1n"))
                            (((unsupported)) ((((unsupported)) ((xfile)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)) ((xtemp_mod_name)))))
                            (((unsupported)) ((xfile)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xfile)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((((unsupported)) ((xfilename)) ((((unsupported)) ((3.neg))))).xendswith)) ((xtemp_mod_name)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xinfo)) (0))) (".py"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xinfo)) (1))) ("r"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xinfo)) (2))) (((ximp).xPY_SOURCE)))
                                xmod.write ((((ximp).xload_module)) ((xtemp_mod_name)) ((xfile)) ((xfilename)) ((xinfo)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xa)) (1))
                            (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                              seq
                                bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore"))
                                xmod.write ((((ximp).xload_source)) ((xtemp_mod_name)) (((xtemp_mod_name).add ".py")))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xa)) (1))
                            (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                              seq
                                bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore"))
                                (((xsys).xdont_write_bytecode).not).if
                                  xmod.write ((((ximp).xload_compiled)) ((xtemp_mod_name)) (((((ximp).xcache_from_source)) (((xtemp_mod_name).add ".py")))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xa)) (1))
                            ((((((xos).xpath).xexists)) ((xtest_package_name))).not).if
                              bogusForceDataize.write ((((xos).xmkdir)) ((xtest_package_name)))
                            (((unsupported)) ((((xopen)) ((xinit_file_name)) ("w"))) ((xfile)))
                              bogusForceDataize.write ((((xfile).xwrite)) ("b = 2n"))
                            (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                              seq
                                bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("ignore"))
                                xpackage.write ((((ximp).xload_package)) ((xtest_package_name)) ((xtest_package_name)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xpackage).xb)) (2))
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                            (((unsupported)) ((xext)) ((((unsupported)) (".py") (".pyc"))))
                              seq
                                bogusForceDataize.write ((((xsupport).xunlink)) (((xtemp_mod_name).add (xext))))
                                bogusForceDataize.write ((((xsupport).xunlink)) (((xinit_file_name).add (xext))))
                            bogusForceDataize.write ((((xsupport).xrmtree)) ((xtest_package_name)))
                            bogusForceDataize.write ((((xsupport).xrmtree)) ("__pycache__"))
                xtest_issue9319.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xdirname)) ((x__file__)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) (((ximp).xfind_module)) ("badsyntax_pep3120") ((((unsupported)) ((xpath)))))
                xtest_load_from_source.write
                  [xself]
                    memory > xorig_path
                    memory > xx
                    memory > xorig_getenv
                    memory > xnew_os
                    seq > @
                      seq
                        xorig_path.write ((xos).xpath)
                        xorig_getenv.write ((xos).xgetenv)
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)))
                          seq
                            xx.write ((((ximp).xfind_module)) ("os"))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((((unsupported)) ((xx)) (0)).xclose)))
                            xnew_os.write ((((ximp).xload_module)) ("os") ((((unsupported)) ((xx)))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((xos)) ((xnew_os)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((xorig_path)) (((xnew_os).xpath)))
                            bogusForceDataize.write ((((xself).xassertIsNot)) ((xorig_getenv)) (((xnew_os).xgetenv)))
                xtest_issue15828_load_extensions.write
                  [xself]
                    memory > xx
                    memory > xmod
                    memory > xexample
                    memory > xfile_
                    seq > @
                      (((unsupported)) 0)
                        xexample.write "_heapq"
                        xx.write ((((ximp).xfind_module)) ((xexample)))
                        xfile_.write (((unsupported)) ((xx)) (0))
                        (((unsupported)) ((xfile_)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xfile_).xclose)))
                        xmod.write ((((ximp).xload_module)) ((xexample)) ((((unsupported)) ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).x__name__)) ((xexample)))
                xtest_issue16421_multiple_modules_in_one_dll.write
                  [xself]
                    memory > xmod2
                    memory > xmod1
                    memory > xmod0
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        xm.write "_testimportmultiple"
                        (((unsupported)) ((((unsupported)) ((xfileobj)) ((xpathname)) ((xdescription)))) (((((ximp).xfind_module)) ((xm)))))
                        bogusForceDataize.write ((((xfileobj).xclose)) 0)
                        xmod0.write ((((ximp).xload_dynamic)) ((xm)) ((xpathname)))
                        xmod1.write ((((ximp).xload_dynamic)) ("_testimportmultiple_foo") ((xpathname)))
                        xmod2.write ((((ximp).xload_dynamic)) ("_testimportmultiple_bar") ((xpathname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmod0).x__name__)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmod1).x__name__)) ("_testimportmultiple_foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmod2).x__name__)) ("_testimportmultiple_bar"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xImportError)))))
                          bogusForceDataize.write ((((ximp).xload_dynamic)) ("nonexistent") ((xpathname)))
                xtest_load_dynamic_ImportError_path.write
                  [xself]
                    memory > xname
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        xpath.write "bogus file path"
                        xname.write "extension"
                        (((unsupported)) (((((xself).xassertRaises)) ((xImportError)))) ((xerr)))
                          bogusForceDataize.write ((((ximp).xload_dynamic)) ((xname)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xpath)) ((((xerr).xexception).xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xname)) ((((xerr).xexception).xname)))
                xtest_load_module_extension_file_is_None.write
                  [xself]
                    memory > xname
                    memory > xfound
                    seq > @
                      (((unsupported)) 0)
                        xname.write "_testimportmultiple"
                        xfound.write ((((ximp).xfind_module)) ((xname)))
                        (((unsupported)) ((((unsupported)) ((xfound)) (0))) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((((unsupported)) ((xfound)) (0)).xclose)) 0)
                        ((((unsupported)) ((((unsupported)) ((xfound)) (2))) (2)).neq ((ximp).xC_EXTENSION)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("found module doesn't appear to be a C extension"))
                        bogusForceDataize.write ((((ximp).xload_module)) ((xname)) ("None: is there a None literal in the EO language?") ((((unsupported)) ((((unsupported)) ((xfound)) ((((unsupported)) (1))))))))
                xtest_issue24748_load_module_skips_sys_modules_check.write
                  [xself]
                    memory > xname
                    memory > xspec
                    memory > xmodule
                    seq > @
                      (((unsupported)) 0)
                        xname.write "test.imp_dummy"
                        (((unsupported)) ((xKeyError)))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))))))
                        (((unsupported)) 0)
                          seq
                            xmodule.write ((((ximportlib).ximport_module)) ((xname)))
                            xspec.write (((((ximportlib).xutil).xfind_spec)) ("_testmultiphase"))
                            xmodule.write ((((ximp).xload_dynamic)) ((xname)) (((xspec).xorigin)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmodule).x__name__)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xmodule).x__spec__).xname)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xmodule).x__spec__).xorigin)) (((xspec).xorigin)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xmodule)) ("dummy_name"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmodule).xint_const)) (1969))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xmodule)))
                          (((unsupported)) ((xKeyError)))
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))))))
                xtest_bug7732.write
                  [xself]
                    memory > xsource
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xtemp_cwd)) 0)))
                          seq
                            xsource.write (((xsupport).xTESTFN).add ".py")
                            bogusForceDataize.write ((((xos).xmkdir)) ((xsource)))
                            bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xImportError)) ("^No module") (((ximp).xfind_module)) (((xsupport).xTESTFN)) ((((unsupported)) ("."))))
                xtest_multiple_calls_to_get_data.write
                  [xself]
                    memory > xloader
                    seq > @
                      seq
                        xloader.write ((((ximp).x_LoadSourceCompatibility)) ("imp") (((ximp).x__file__)) ((((xopen)) (((ximp).x__file__)))))
                        bogusForceDataize.write ((((xloader).xget_data)) (((ximp).x__file__)))
                        bogusForceDataize.write ((((xloader).xget_data)) (((ximp).x__file__)))
                xtest_load_source.write
                  [xself]
                    memory > xmod
                    memory > xmodname
                    seq > @
                      seq
                        xmodname.write "tmp{__name__}"
                        xmod.write (((((xtype)) ((((unsupported)) (((xsys).xmodules)) ((x__name__)))))) ((xmodname)))
                        (((unsupported)) (((((xsupport).xswap_item)) (((xsys).xmodules)) ((xmodname)) ((xmod)))))
                          (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("embedded null"))))
                            bogusForceDataize.write ((((ximp).xload_source)) ((xmodname)) (((x__file__).add "0")))
                xtest_issue31315.write
                  [xself]
                    memory > xname
                    memory > xorigin
                    memory > xcreate_dynamic
                    seq > @
                      (((unsupported)) 0)
                        xcreate_dynamic.write ((((xsupport).xget_attribute)) ((ximp)) ("create_dynamic"))
                        (((unsupported)) 0)
                          seq
                            xname.write "None: is there a None literal in the EO language?"
                            xorigin.write "foo"
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xcreate_dynamic)) ((((xBadSpec)) 0)))
                xtest_issue_35321.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_frozen_importlib_external).x__spec__).xorigin)) ("frozen"))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_frozen_importlib).x__spec__).xorigin)) ("frozen"))
                xtest_source_hash.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((x_imp).xsource_hash)) (42) ("hi"))) ("xc6xe7Zrx03:}xab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((x_imp).xsource_hash)) (43) ("hi"))) ("x85x9765xf8x9ax8b9"))
                xtest_pyc_invalidation_mode_from_cmdline.write
                  [xself]
                    memory > xcases
                    memory > xargs
                    memory > xres
                    seq > @
                      seq
                        xcases.write (((unsupported)) ((((unsupported)) ((((unsupported)) 0)) ("default"))) ((((unsupported)) ((((unsupported)) ("--check-hash-based-pycs") ("default"))) ("default"))) ((((unsupported)) ((((unsupported)) ("--check-hash-based-pycs") ("always"))) ("always"))) ((((unsupported)) ((((unsupported)) ("--check-hash-based-pycs") ("never"))) ("never"))))
                        (((unsupported)) ((((unsupported)) ((xinterp_args)) ((xexpected)))) ((xcases)))
                          seq
                            xargs.write ((xinterp_args).add (((unsupported)) ("-c") ("import _imp; print(_imp.check_hash_based_pycs)")))
                            xres.write ((((xscript_helper).xassert_python_ok)) ((((unsupported)) ((xargs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xres).xout).xstrip)) 0).xdecode)) ("utf-8"))) ((xexpected)))
                xtest_find_and_load_checked_pyc.write
                  [xself]
                    memory > xmod
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xtemp_cwd)) 0)))
                          seq
                            (((unsupported)) ((((xopen)) ("mymod.py") ("wb"))) ((xfp)))
                              bogusForceDataize.write ((((xfp).xwrite)) ("x = 42n"))
                            (((unsupported)) (((xpy_compile).xcompile)) ("mymod.py") (TRUE) ((((xpy_compile).xPycInvalidationMode).xCHECKED_HASH)))
                            (((unsupported)) ((((unsupported)) ((xfile)) ((xpath)) ((xdescription)))) ((((unsupported)) (((ximp).xfind_module)) ("mymod") ((((unsupported)) ("."))))))
                            xmod.write ((((ximp).xload_module)) ("mymod") ((xfile)) ((xpath)) ((xdescription)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xx)) (42))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_source.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((ximp).xreload)) ((xos)))
                xtest_extension.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("time"))))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((ximp).xreload)) ((xtime)))
                xtest_builtin.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("marshal"))))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((ximp).xreload)) ((xmarshal)))
                xtest_with_deleted_parent.write
                  [xself]
                    memory > xhtml
                    memory > xcleanup
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xhtml.write (((((xsys).xmodules).xpop)) ("html"))
                        xcleanup.write
                          []
                            seq > @
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("html"))) ((xhtml)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xImportError)) ("html"))))
                          bogusForceDataize.write ((((ximp).xreload)) ((xparser)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtag.write ((((ximp).xget_tag)) 0)
                xtest_cache_from_source.write
                  [xself]
                    memory > xexpect
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        xpath.write (((((xos).xpath).xjoin)) ("foo") ("bar") ("baz") ("qux.py"))
                        xexpect.write (((((xos).xpath).xjoin)) ("foo") ("bar") ("baz") ("__pycache__") (((("qux.{}.pyc".xformat)) (((xself).xtag)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((ximp).xcache_from_source)) ((xpath)) (TRUE))) ((xexpect)))
                xtest_source_from_cache.write
                  [xself]
                    memory > xexpect
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        xpath.write (((((xos).xpath).xjoin)) ("foo") ("bar") ("baz") ("__pycache__") (((("qux.{}.pyc".xformat)) (((xself).xtag)))))
                        xexpect.write (((((xos).xpath).xjoin)) ("foo") ("bar") ("baz") ("qux.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((ximp).xsource_from_cache)) ((xpath)))) ((xexpect)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_unencodeable.write
                [xself]
                  memory > xname
                  seq > @
                    (((unsupported)) 0)
                      xname.write ((xsupport).xTESTFN_UNENCODABLE)
                      bogusForceDataize.write ((((xos).xmkdir)) ((xname)))
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xImportError)) (((ximp).xNullImporter)) ((xname)))
                        bogusForceDataize.write ((((xos).xrmdir)) ((xname)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)