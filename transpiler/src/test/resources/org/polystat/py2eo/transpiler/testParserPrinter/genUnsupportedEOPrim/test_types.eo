memory > xValueError
memory > xBMeta
memory > xrange
memory > xBNotMeta
memory > xcm
memory > xinspect
memory > xtypes
memory > xC
memory > xzsize
memory > xmeta
memory > xmin
memory > xuserdict
memory > xAttributeError
memory > xpickle
memory > xlist
memory > xGeneratorExit
memory > xA3
memory > xexpected
memory > xA2
memory > xdivisor
memory > xdictmissing
memory > xstr
memory > xBadMeta
memory > xfmt
memory > xB
memory > xvalue
memory > xZeroDivisionError
memory > xformat_spec
memory > xcollections
memory > x_
memory > xStopIteration
memory > xKeyError
memory > xANotMeta
memory > xAMeta
memory > xmax
memory > xSpam
memory > xkw
memory > xtype
memory > xGenerator
memory > xns
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xGenLike
memory > xcustomdict
memory > xcode
memory > xsample
memory > xbases
memory > xx
memory > xi
memory > xsuper
memory > xsys
memory > xkwds
memory > xissubclass
memory > xM
memory > xtuple
memory > xB1
memory > xsorted
memory > xCoroLike
memory > xlocale
memory > xfloat
memory > xchr
memory > xFakeSimpleNamespace
memory > xargs
memory > xdir
memory > xgetattr
memory > xprotocol
memory > xxsize
memory > xweakref
memory > xvars
memory > xiter
memory > xe
memory > xAwaitable
memory > xformat
memory > xord
memory > xCoroGenLike
memory > xname
memory > xzip
memory > xunittest
memory > xex
memory > xysize
memory > xnext
memory > xobject
memory > xA
memory > xA1
memory > xB2
memory > xkwargs
memory > xN
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
[] > test_types
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_pickle
        memory > xtest_duck_gen
        memory > xtest_unbound
        memory > xtest_comparisons
        memory > xtest_metaclass_derivation
        memory > xtest_recursive
        memory > xtest_float__format__
        memory > xtest_fake_namespace_compare
        memory > xtest_attrget
        memory > xtest_new_class_subclass
        memory > xtest_new_class_meta
        memory > xtest_wrapper_object
        memory > xtest_chainmap
        memory > xtest_customdict
        memory > xtest_new_class_defaults
        memory > xtest_method_descriptor_types
        memory > xtest_bad___prepare__
        memory > xtest_duck_functional_gen
        memory > xtest_new_class_with_mro_entry_multiple
        memory > xtest_prepare_class
        memory > xtest_constructor
        memory > xtest_equal
        memory > xtest_metaclass_override_callable
        memory > xtest_missing
        memory > xtest_metaclass_override_function
        memory > xtest_method_wrapper_types
        memory > xtest_one_argument_type
        memory > xtest_new_class_metaclass_keywords
        memory > xtest_subclass
        memory > xtest_new_class_with_mro_entry_none
        memory > xtest_repr
        memory > xtest_underlying_dict
        memory > xtest_slot_wrapper_types
        memory > xtest_get
        memory > xtest_numeric_types
        memory > xtest_new_class_meta_with_base
        memory > xmappingproxy
        memory > xtest_type_function
        memory > xtest_async_def
        memory > x__prepare__
        memory > xtest_attrset
        memory > xtest_new_class_basics
        memory > xtest_truth_values
        memory > xtest_boolean_ops
        memory > xtest_attrdel
        memory > xtest_non_gen_values
        memory > xtest_resolve_bases
        memory > xtest_copy
        memory > xtest_recursive_repr
        memory > xtest_as_dict
        memory > xtest_contains
        memory > xtest_nested
        memory > xtest_wrong_args
        memory > xtest_returning_itercoro
        memory > xtest_int__format__
        memory > xtest_iterators
        memory > xtest_strings
        memory > xtest_int__format__locale
        memory > xtest_internal_sizes
        memory > x__init__
        memory > xtest_float_to_string
        memory > xtest_duck_corogen
        memory > xtest_new_class_exec_body
        memory > xtest_zero_division
        memory > xtest_views
        memory > xtest_float_constructor
        memory > xtest_duck_coro
        memory > xtest_floats
        memory > xtest_new_class_with_mro_entry_multiple_2
        memory > xtest_float__format__locale
        memory > xtest_format_spec_errors
        memory > xtest_len
        memory > xtest_methods
        memory > xtest_gen
        memory > xtest_new_class_with_mro_entry_error
        memory > x__new__
        memory > xtest_normal_integers
        memory > xtest_new_class_with_mro_entry
        memory > xtest_genfunc
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_truth_values.write
                  [xself]
                    memory > xx
                    memory > xf
                    seq > @
                      seq
                        "None: is there a None literal in the EO language?".if
                          bogusForceDataize.write ((((xself).xfail)) ("None is true instead of false"))
                        0.if
                          bogusForceDataize.write ((((xself).xfail)) ("0 is true instead of false"))
                        0.0.if
                          bogusForceDataize.write ((((xself).xfail)) ("0.0 is true instead of false"))
                        "".if
                          bogusForceDataize.write ((((xself).xfail)) ("'' is true instead of false"))
                        (1.not).if
                          bogusForceDataize.write ((((xself).xfail)) ("1 is false instead of true"))
                        (1.0.not).if
                          bogusForceDataize.write ((((xself).xfail)) ("1.0 is false instead of true"))
                        ("x".not).if
                          bogusForceDataize.write ((((xself).xfail)) ("'x' is false instead of true"))
                        ((((unsupported)) ("x") (1)).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("{'x': 1} is false instead of true"))
                        xf.write
                          []
                            seq > @
                        (((unsupported)) 0)
                        xx.write (((xC)) 0)
                        ((xf).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("f is false instead of true"))
                        ((xC).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("C is false instead of true"))
                        ((xsys).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("sys is false instead of true"))
                        ((xx).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("x is false instead of true"))
                xtest_boolean_ops.write
                  [xself]
                    seq > @
                      seq
                        (0.or 0).if
                          bogusForceDataize.write ((((xself).xfail)) ("0 or 0 is true instead of false"))
                        (1.and 1).if
                          bogusForceDataize.write ((((xself).xfail)) ("1 and 1 is false instead of true"))
                        (1.not).if
                          bogusForceDataize.write ((((xself).xfail)) ("not 1 is true instead of false"))
                xtest_comparisons.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (0) (1) (1) (1) (1) (0) (1)).if
                          bogusForceDataize.write ((((xself).xfail)) ("int comparisons failed"))
                        (((unsupported)) (0.0) (1.0) (1.0) (1.0) (1.0) (0.0) (1.0)).if
                          bogusForceDataize.write ((((xself).xfail)) ("float comparisons failed"))
                        (((unsupported)) ("") ("a") ("a") ("a") ("abc") ("abd") ("b")).if
                          bogusForceDataize.write ((((xself).xfail)) ("string comparisons failed"))
                        (((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xfail)) ("identity test failed"))
                xtest_float_constructor.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xfloat)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xfloat)) ("50"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xfloat)) ("5_50"))
                xtest_zero_division.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("5.0 / 0.0 didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xZeroDivisionError)))
                          (((unsupported)) (5.0) (0.0))
                          bogusForceDataize.write ((((xself).xfail)) ("5.0 // 0.0 didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("5.0 % 0.0 didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("5 / 0 didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xZeroDivisionError)))
                          (((unsupported)) (5) (0))
                          bogusForceDataize.write ((((xself).xfail)) ("5 // 0 didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)) ("5 % 0 didn't raise ZeroDivisionError"))
                xtest_numeric_types.write
                  [xself]
                    seq > @
                      seq
                        (((0.neq 0.0).or (1.neq 1.0)).or ((1.neg).neq (1.0.neg))).if
                          bogusForceDataize.write ((((xself).xfail)) ("int/float value not equal"))
                        ((((xint)) 0).neq 0).if
                          bogusForceDataize.write ((((xself).xfail)) ("int() does not return 0"))
                        ((((xfloat)) 0).neq 0.0).if
                          bogusForceDataize.write ((((xself).xfail)) ("float() does not return 0.0"))
                        ((((unsupported)) ((((xint)) (1.9))) (1) ((((xint)) (1.1)))).and (((unsupported)) ((((xint)) ((1.1.neg)))) ((1.neg)) ((((xint)) ((1.9.neg)))))).if
                          bogusForceDataize.write ((((xself).xfail)) ("int() does not round properly"))
                        ((((((xfloat)) (1)).eq 1.0).and ((((xfloat)) ((1.neg))).eq (1.0.neg))).and ((((xfloat)) (0)).eq 0.0)).if
                          bogusForceDataize.write ((((xself).xfail)) ("float() does not work properly"))
                xtest_float_to_string.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        xtest.write
                          [xf xresult]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).x__format__)) ("e"))) ((xresult)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (("%e".mod (xf))) ((xresult)))
                        (((unsupported)) ((xi)) ((((xrange)) ((99.neg)) (100))))
                          bogusForceDataize.write (((xtest)) ((((xfloat)) (("1.5e".add (((xstr)) ((xi))))))) (((("1.500000e{0:+03d}".xformat)) ((xi)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).x__format__)) ("e"))) ("1.500000e+100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%e".mod (((unsupported)) 0))) ("1.500000e+100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).x__format__)) ("e"))) ("1.500000e+101"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%e".mod (((unsupported)) 0))) ("1.500000e+101"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).x__format__)) ("e"))) ("1.500000e-100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%e".mod (((unsupported)) 0))) ("1.500000e-100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).x__format__)) ("e"))) ("1.500000e-101"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%e".mod (((unsupported)) 0))) ("1.500000e-101"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%g".mod 1.0)) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%#g".mod 1.0)) ("1.00000"))
                xtest_normal_integers.write
                  [xself]
                    memory > xb
                    memory > xx
                    memory > xm
                    memory > xprod
                    memory > xj
                    memory > xa
                    seq > @
                      seq
                        xa.write 256
                        xb.write (128.mul 2)
                        (((unsupported)) ((xa)) ((xb))).if
                          bogusForceDataize.write ((((xself).xfail)) ("256 is not shared"))
                        ((12.add 24).neq 36).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        ((12.add (24.neg)).neq (12.neg)).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        (((12.neg).add 24).neq 12).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        (((12.neg).add (24.neg)).neq (36.neg)).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        ((12.less 24).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        (((24.neg).less (12.neg)).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("int op"))
                        (((unsupported)) ((((unsupported)) ((xxsize)) ((xysize)) ((xzsize)))) ((((unsupported)) (238) (356) (4))))
                        ((((unsupported)) ((((xxsize).mul (xysize)).mul (xzsize))) ((((xzsize).mul (xxsize)).mul (xysize))) (338912)).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("int mul commutativity"))
                        xm.write ((((xsys).xmaxsize).neg).sub 1)
                        (((unsupported)) ((xdivisor)) ((((unsupported)) (1) (2) (4) (8) (16) (32))))
                          seq
                            xj.write (((unsupported)) ((xm)) ((xdivisor)))
                            xprod.write ((xdivisor).mul (xj))
                            ((xprod).neq (xm)).if
                              bogusForceDataize.write ((((xself).xfail)) (("%r * %r == %r != %r".mod (((unsupported)) ((xdivisor)) ((xj)) ((xprod)) ((xm))))))
                            (((unsupported)) ((((xtype)) ((xprod)))) ((xint))).if
                              bogusForceDataize.write ((((xself).xfail)) (("expected type(prod) to be int, not %r".mod (((xtype)) ((xprod))))))
                        (((unsupported)) ((xdivisor)) ((((unsupported)) (1) (2) (4) (8) (16) (32))))
                          seq
                            xj.write ((((unsupported)) ((xm)) ((xdivisor))).sub 1)
                            xprod.write ((xdivisor).mul (xj))
                            (((unsupported)) ((((xtype)) ((xprod)))) ((xint))).if
                              bogusForceDataize.write ((((xself).xfail)) (("expected type(%r) to be int, not %r".mod (((unsupported)) ((xprod)) ((((xtype)) ((xprod))))))))
                        xm.write ((xsys).xmaxsize)
                        (((unsupported)) ((xdivisor)) ((((unsupported)) (1) (2) (4) (8) (16) (32))))
                          seq
                            xj.write ((((unsupported)) ((xm)) ((xdivisor))).add 1)
                            xprod.write ((xdivisor).mul (xj))
                            (((unsupported)) ((((xtype)) ((xprod)))) ((xint))).if
                              bogusForceDataize.write ((((xself).xfail)) (("expected type(%r) to be int, not %r".mod (((unsupported)) ((xprod)) ((((xtype)) ((xprod))))))))
                        xx.write ((xsys).xmaxsize)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xx).add 1)) ((xint)) ("(sys.maxsize + 1) should have returned int"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xx).neg).sub 1)) ((xint)) ("(-sys.maxsize - 1) should have returned int"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xx).neg).sub 2)) ((xint)) ("(-sys.maxsize - 2) should have returned int"))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) (5) ((5.neg)))
                          bogusForceDataize.write ((((xself).xfail)) ("int negative shift <<"))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) (5) ((5.neg)))
                          bogusForceDataize.write ((((xself).xfail)) ("int negative shift >>"))
                xtest_floats.write
                  [xself]
                    seq > @
                      seq
                        ((12.0.add 24.0).neq 36.0).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                        ((12.0.add (24.0.neg)).neq (12.0.neg)).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                        (((12.0.neg).add 24.0).neq 12.0).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                        (((12.0.neg).add (24.0.neg)).neq (36.0.neg)).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                        ((12.0.less 24.0).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                        (((24.0.neg).less (12.0.neg)).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("float op"))
                xtest_strings.write
                  [xself]
                    memory > xx
                    memory > xa
                    seq > @
                      seq
                        ((((xlen)) ("")).neq 0).if
                          bogusForceDataize.write ((((xself).xfail)) ("len('')"))
                        ((((xlen)) ("a")).neq 1).if
                          bogusForceDataize.write ((((xself).xfail)) ("len('a')"))
                        ((((xlen)) ("abcdef")).neq 6).if
                          bogusForceDataize.write ((((xself).xfail)) ("len('abcdef')"))
                        (("xyz".add "abcde").neq "xyzabcde").if
                          bogusForceDataize.write ((((xself).xfail)) ("string concatenation"))
                        (("xyz".mul 3).neq "xyzxyzxyz").if
                          bogusForceDataize.write ((((xself).xfail)) ("string repetition *3"))
                        ((0.mul "abcde").neq "").if
                          bogusForceDataize.write ((((xself).xfail)) ("string repetition 0*"))
                        (((((xmin)) ("abc")).neq "a").or ((((xmax)) ("abc")).neq "c")).if
                          bogusForceDataize.write ((((xself).xfail)) ("min/max string"))
                        ((((((unsupported)) ("a") ("abc")).and (((unsupported)) ("b") ("abc"))).and (((unsupported)) ("c") ("abc"))).and (((unsupported)) ("d") ("abc"))).if
                          bogusForceDataize.write ((((xself).xfail)) ("in/not in string"))
                        xx.write ("x".mul 103)
                        (("%s!".mod (xx)).neq ((xx).add "!")).if
                          bogusForceDataize.write ((((xself).xfail)) ("nasty string formatting bug"))
                        xa.write "0123456789"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) 0)))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) (2))))) ("02468"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) (1) (2))))) ("13579"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) ((1.neg)))))) ("9876543210"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) ((2.neg)))))) ("97531"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) (3) ((2.neg)))))) ("31"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) ((100.neg)) (100))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) (100) ((100.neg)) ((1.neg)))))) ((((unsupported)) ((xa)) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xa)) ((((unsupported)) ((100.neg)) (100) (2))))) ("02468"))
                xtest_type_function.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtype)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtype)) (1) (2) (3) (4))
                xtest_int__format__.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        xtest.write
                          [xi xformat_spec xresult]
                            seq > @
                              seq
                                (((unsupported)) (((((xtype)) ((xi))).eq (xint))))
                                (((unsupported)) (((((xtype)) ((xformat_spec))).eq (xstr))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xi).x__format__)) ((xformat_spec)))) ((xresult)))
                        bogusForceDataize.write (((xtest)) (123456789) ("d") ("123456789"))
                        bogusForceDataize.write (((xtest)) (123456789) ("d") ("123456789"))
                        bogusForceDataize.write (((xtest)) (1) ("c") ("01"))
                        bogusForceDataize.write (((xtest)) (1) ("-") ("1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-") ("-1"))
                        bogusForceDataize.write (((xtest)) (1) ("-3") ("  1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-3") (" -1"))
                        bogusForceDataize.write (((xtest)) (1) ("+3") (" +1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("+3") (" -1"))
                        bogusForceDataize.write (((xtest)) (1) (" 3") ("  1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) (" 3") (" -1"))
                        bogusForceDataize.write (((xtest)) (1) (" ") (" 1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) (" ") ("-1"))
                        bogusForceDataize.write (((xtest)) (3) ("x") ("3"))
                        bogusForceDataize.write (((xtest)) (3) ("X") ("3"))
                        bogusForceDataize.write (((xtest)) (1234) ("x") ("4d2"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("x") ("-4d2"))
                        bogusForceDataize.write (((xtest)) (1234) ("8x") ("     4d2"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("8x") ("    -4d2"))
                        bogusForceDataize.write (((xtest)) (1234) ("x") ("4d2"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("x") ("-4d2"))
                        bogusForceDataize.write (((xtest)) ((3.neg)) ("x") ("-3"))
                        bogusForceDataize.write (((xtest)) ((3.neg)) ("X") ("-3"))
                        bogusForceDataize.write (((xtest)) ((((xint)) ("be") (16))) ("x") ("be"))
                        bogusForceDataize.write (((xtest)) ((((xint)) ("be") (16))) ("X") ("BE"))
                        bogusForceDataize.write (((xtest)) (((((xint)) ("be") (16)).neg)) ("x") ("-be"))
                        bogusForceDataize.write (((xtest)) (((((xint)) ("be") (16)).neg)) ("X") ("-BE"))
                        bogusForceDataize.write (((xtest)) (3) ("o") ("3"))
                        bogusForceDataize.write (((xtest)) ((3.neg)) ("o") ("-3"))
                        bogusForceDataize.write (((xtest)) (65) ("o") ("101"))
                        bogusForceDataize.write (((xtest)) ((65.neg)) ("o") ("-101"))
                        bogusForceDataize.write (((xtest)) (1234) ("o") ("2322"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("o") ("-2322"))
                        bogusForceDataize.write (((xtest)) (1234) ("-o") ("2322"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("-o") ("-2322"))
                        bogusForceDataize.write (((xtest)) (1234) (" o") (" 2322"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) (" o") ("-2322"))
                        bogusForceDataize.write (((xtest)) (1234) ("+o") ("+2322"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("+o") ("-2322"))
                        bogusForceDataize.write (((xtest)) (3) ("b") ("11"))
                        bogusForceDataize.write (((xtest)) ((3.neg)) ("b") ("-11"))
                        bogusForceDataize.write (((xtest)) (1234) ("b") ("10011010010"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("b") ("-10011010010"))
                        bogusForceDataize.write (((xtest)) (1234) ("-b") ("10011010010"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("-b") ("-10011010010"))
                        bogusForceDataize.write (((xtest)) (1234) (" b") (" 10011010010"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) (" b") ("-10011010010"))
                        bogusForceDataize.write (((xtest)) (1234) ("+b") ("+10011010010"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) ("+b") ("-10011010010"))
                        bogusForceDataize.write (((xtest)) (0) ("#b") ("0b0"))
                        bogusForceDataize.write (((xtest)) (0) ("-#b") ("0b0"))
                        bogusForceDataize.write (((xtest)) (1) ("-#b") ("0b1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#b") ("-0b1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#5b") (" -0b1"))
                        bogusForceDataize.write (((xtest)) (1) ("+#5b") (" +0b1"))
                        bogusForceDataize.write (((xtest)) (100) ("+#b") ("+0b1100100"))
                        bogusForceDataize.write (((xtest)) (100) ("#012b") ("0b0001100100"))
                        bogusForceDataize.write (((xtest)) ((100.neg)) ("#012b") ("-0b001100100"))
                        bogusForceDataize.write (((xtest)) (0) ("#o") ("0o0"))
                        bogusForceDataize.write (((xtest)) (0) ("-#o") ("0o0"))
                        bogusForceDataize.write (((xtest)) (1) ("-#o") ("0o1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#o") ("-0o1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#5o") (" -0o1"))
                        bogusForceDataize.write (((xtest)) (1) ("+#5o") (" +0o1"))
                        bogusForceDataize.write (((xtest)) (100) ("+#o") ("+0o144"))
                        bogusForceDataize.write (((xtest)) (100) ("#012o") ("0o0000000144"))
                        bogusForceDataize.write (((xtest)) ((100.neg)) ("#012o") ("-0o000000144"))
                        bogusForceDataize.write (((xtest)) (0) ("#x") ("0x0"))
                        bogusForceDataize.write (((xtest)) (0) ("-#x") ("0x0"))
                        bogusForceDataize.write (((xtest)) (1) ("-#x") ("0x1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#x") ("-0x1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#5x") (" -0x1"))
                        bogusForceDataize.write (((xtest)) (1) ("+#5x") (" +0x1"))
                        bogusForceDataize.write (((xtest)) (100) ("+#x") ("+0x64"))
                        bogusForceDataize.write (((xtest)) (100) ("#012x") ("0x0000000064"))
                        bogusForceDataize.write (((xtest)) ((100.neg)) ("#012x") ("-0x000000064"))
                        bogusForceDataize.write (((xtest)) (123456) ("#012x") ("0x000001e240"))
                        bogusForceDataize.write (((xtest)) ((123456.neg)) ("#012x") ("-0x00001e240"))
                        bogusForceDataize.write (((xtest)) (0) ("#X") ("0X0"))
                        bogusForceDataize.write (((xtest)) (0) ("-#X") ("0X0"))
                        bogusForceDataize.write (((xtest)) (1) ("-#X") ("0X1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#X") ("-0X1"))
                        bogusForceDataize.write (((xtest)) ((1.neg)) ("-#5X") (" -0X1"))
                        bogusForceDataize.write (((xtest)) (1) ("+#5X") (" +0X1"))
                        bogusForceDataize.write (((xtest)) (100) ("+#X") ("+0X64"))
                        bogusForceDataize.write (((xtest)) (100) ("#012X") ("0X0000000064"))
                        bogusForceDataize.write (((xtest)) ((100.neg)) ("#012X") ("-0X000000064"))
                        bogusForceDataize.write (((xtest)) (123456) ("#012X") ("0X000001E240"))
                        bogusForceDataize.write (((xtest)) ((123456.neg)) ("#012X") ("-0X00001E240"))
                        bogusForceDataize.write (((xtest)) (123) (",") ("123"))
                        bogusForceDataize.write (((xtest)) ((123.neg)) (",") ("-123"))
                        bogusForceDataize.write (((xtest)) (1234) (",") ("1,234"))
                        bogusForceDataize.write (((xtest)) ((1234.neg)) (",") ("-1,234"))
                        bogusForceDataize.write (((xtest)) (123456) (",") ("123,456"))
                        bogusForceDataize.write (((xtest)) ((123456.neg)) (",") ("-123,456"))
                        bogusForceDataize.write (((xtest)) (1234567) (",") ("1,234,567"))
                        bogusForceDataize.write (((xtest)) ((1234567.neg)) (",") ("-1,234,567"))
                        bogusForceDataize.write (((xtest)) (1234) ("010,") ("00,001,234"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) (10) (100))) ("d") (("1".add ("0".mul 100))))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) (10) (100)).add 100)) ("d") ((("1".add ("0".mul 97)).add "100")))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((3.x__format__)) ("1.3"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((3.x__format__)) ("+c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((3.x__format__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((3.x__format__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((3.x__format__)) (",n"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((3.x__format__)) (",c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((3.x__format__)) ("#c"))
                        (((unsupported)) ((xformat_spec)) (((((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((((xrange)) ((((xord)) ("a"))) (((((xord)) ("z")).add 1))))).add (((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((((xrange)) ((((xord)) ("A"))) (((((xord)) ("Z")).add 1))))))))
                          ((((unsupported)) ((xformat_spec)) ("bcdoxXeEfFgGn%")).not).if
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((0.x__format__)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((1.x__format__)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((1.neg).x__format__)) ((xformat_spec)))
                        (((unsupported)) ((xformat_spec)) ("eEfFgG%"))
                          (((unsupported)) ((xvalue)) ((((unsupported)) (0) (1) ((1.neg)) (100) ((100.neg)) (1234567890) ((1234567890.neg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xvalue).x__format__)) ((xformat_spec)))) (((((((xfloat)) ((xvalue))).x__format__)) ((xformat_spec)))))
                        bogusForceDataize.write (((xtest)) (123456) ("0<20") ("12345600000000000000"))
                        bogusForceDataize.write (((xtest)) (123456) ("1<20") ("12345611111111111111"))
                        bogusForceDataize.write (((xtest)) (123456) ("*<20") ("123456**************"))
                        bogusForceDataize.write (((xtest)) (123456) ("0>20") ("00000000000000123456"))
                        bogusForceDataize.write (((xtest)) (123456) ("1>20") ("11111111111111123456"))
                        bogusForceDataize.write (((xtest)) (123456) ("*>20") ("**************123456"))
                        bogusForceDataize.write (((xtest)) (123456) ("0=20") ("00000000000000123456"))
                        bogusForceDataize.write (((xtest)) (123456) ("1=20") ("11111111111111123456"))
                        bogusForceDataize.write (((xtest)) (123456) ("*=20") ("**************123456"))
                xtest_float__format__locale.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) ((10.neg)) (10))))
                          seq
                            xx.write (1234567890.0.mul (((unsupported)) (10.0) ((xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xlocale).xformat_string)) ("%g") ((xx)) (TRUE))) ((((xformat)) ((xx)) ("n"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xlocale).xformat_string)) ("%.10g") ((xx)) (TRUE))) ((((xformat)) ((xx)) (".10n"))))
                xtest_int__format__locale.write
                  [xself]
                    memory > xx
                    memory > xlfmt
                    memory > xrfmt
                    memory > xcfmt
                    seq > @
                      (((unsupported)) 0)
                        xx.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (0) (30))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xlocale).xformat_string)) ("%d") ((xx)) (TRUE))) ((((xformat)) ((xx)) ("n"))))
                            xx.write (((unsupported)) ((xx)) (10))
                        xrfmt.write ">20n"
                        xlfmt.write "<20n"
                        xcfmt.write "^20n"
                        (((unsupported)) ((xx)) ((((unsupported)) (1234) (12345) (123456) (1234567) (12345678) (123456789) (1234567890) ((((unsupported)) 0)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xformat)) (0) ((xrfmt)))))) ((((xlen)) ((((xformat)) ((xx)) ((xrfmt)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xformat)) (0) ((xlfmt)))))) ((((xlen)) ((((xformat)) ((xx)) ((xlfmt)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xformat)) (0) ((xcfmt)))))) ((((xlen)) ((((xformat)) ((xx)) ((xcfmt)))))))
                xtest_float__format__.write
                  [xself]
                    memory > xtest
                    memory > xresult
                    memory > xf
                    seq > @
                      seq
                        xtest.write
                          [xf xformat_spec xresult]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).x__format__)) ((xformat_spec)))) ((xresult)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((xf)) ((xformat_spec)))) ((xresult)))
                        bogusForceDataize.write (((xtest)) (0.0) ("f") ("0.000000"))
                        bogusForceDataize.write (((xtest)) (0.0) ("") ("0.0"))
                        bogusForceDataize.write (((xtest)) (0.01) ("") ("0.01"))
                        bogusForceDataize.write (((xtest)) (0.01) ("g") ("0.01"))
                        bogusForceDataize.write (((xtest)) (1.23) ("1") ("1.23"))
                        bogusForceDataize.write (((xtest)) ((1.23.neg)) ("1") ("-1.23"))
                        bogusForceDataize.write (((xtest)) (1.23) ("1g") ("1.23"))
                        bogusForceDataize.write (((xtest)) ((1.23.neg)) ("1g") ("-1.23"))
                        bogusForceDataize.write (((xtest)) (1.0) (" g") (" 1"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) (" g") ("-1"))
                        bogusForceDataize.write (((xtest)) (1.0) ("+g") ("+1"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("+g") ("-1"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("g") ("1.1234e+200"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("G") ("1.1234E+200"))
                        bogusForceDataize.write (((xtest)) (1.0) ("f") ("1.000000"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("f") ("-1.000000"))
                        bogusForceDataize.write (((xtest)) (1.0) (" f") (" 1.000000"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) (" f") ("-1.000000"))
                        bogusForceDataize.write (((xtest)) (1.0) ("+f") ("+1.000000"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("+f") ("-1.000000"))
                        xf.write (((unsupported)) 0)
                        (((unsupported)) ((xfmt)) ((((unsupported)) ("f") ("F"))))
                          seq
                            xresult.write ((((xf).x__format__)) ((xfmt)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) (98))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xresult)) ((7.neg)))) ("."))
                            bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ((xresult)) ((((unsupported)) (12))))) ((((unsupported)) ("112340000000") ("112339999999"))))
                        xf.write (((unsupported)) 0)
                        (((unsupported)) ((xfmt)) ((((unsupported)) ("f") ("F"))))
                          seq
                            xresult.write ((((xf).x__format__)) ((xfmt)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) (208))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xresult)) ((7.neg)))) ("."))
                            bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ((xresult)) ((((unsupported)) (12))))) ((((unsupported)) ("112340000000") ("112339999999"))))
                        bogusForceDataize.write (((xtest)) (1.0) ("e") ("1.000000e+00"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("e") ("-1.000000e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) ("E") ("1.000000E+00"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("E") ("-1.000000E+00"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("e") ("1.123400e+20"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("E") ("1.123400E+20"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("+g") ("+1e+200"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("+") ("+1e+200"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("+g") ("+1.1e+200"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("+") ("+1.1e+200"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("010f") ("1234.000000"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("011f") ("1234.000000"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("012f") ("01234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("011f") ("-1234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("012f") ("-1234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("013f") ("-01234.000000"))
                        bogusForceDataize.write (((xtest)) ((1234.12341234.neg)) ("013f") ("-01234.123412"))
                        bogusForceDataize.write (((xtest)) ((123456.12341234.neg)) ("011.2f") ("-0123456.12"))
                        bogusForceDataize.write (((xtest)) (1.2) ("010,.2") ("0,000,001.2"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("011,f") ("1,234.000000"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("012,f") ("1,234.000000"))
                        bogusForceDataize.write (((xtest)) ((((unsupported)) 0)) ("013,f") ("01,234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("012,f") ("-1,234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("013,f") ("-1,234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("014,f") ("-01,234.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("015,f") ("-012,345.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("016,f") ("-0,123,456.000000"))
                        bogusForceDataize.write (((xtest)) (((((unsupported)) 0).neg)) ("017,f") ("-0,123,456.000000"))
                        bogusForceDataize.write (((xtest)) ((123456.12341234.neg)) ("017,f") ("-0,123,456.123412"))
                        bogusForceDataize.write (((xtest)) ((123456.12341234.neg)) ("013,.2f") ("-0,123,456.12"))
                        bogusForceDataize.write (((xtest)) ((1.0.neg)) ("%") ("-100.000000%"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((3.0.x__format__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((3.0.x__format__)) (0))
                        (((unsupported)) ((xformat_spec)) (((((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((((xrange)) ((((xord)) ("a"))) (((((xord)) ("z")).add 1))))).add (((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((((xrange)) ((((xord)) ("A"))) (((((xord)) ("Z")).add 1))))))))
                          ((((unsupported)) ((xformat_spec)) ("eEfFgGn%")).not).if
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (0.0) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (1.0) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) ((1.0.neg)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) ((((unsupported)) 0)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (((((unsupported)) 0).neg)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) ((((unsupported)) 0)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (((((unsupported)) 0).neg)) ((xformat_spec)))
                        bogusForceDataize.write (((xtest)) (1.0) (".0e") ("1e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.0e") ("1.e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) (".0f") ("1"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.0f") ("1."))
                        bogusForceDataize.write (((xtest)) (1.1) ("g") ("1.1"))
                        bogusForceDataize.write (((xtest)) (1.1) ("#g") ("1.10000"))
                        bogusForceDataize.write (((xtest)) (1.0) (".0%") ("100%"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.0%") ("100.%"))
                        bogusForceDataize.write (((xtest)) (1.0) ("0e") ("1.000000e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#0e") ("1.000000e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) ("0f") ("1.000000"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#0f") ("1.000000"))
                        bogusForceDataize.write (((xtest)) (1.0) (".1e") ("1.0e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.1e") ("1.0e+00"))
                        bogusForceDataize.write (((xtest)) (1.0) (".1f") ("1.0"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.1f") ("1.0"))
                        bogusForceDataize.write (((xtest)) (1.0) (".1%") ("100.0%"))
                        bogusForceDataize.write (((xtest)) (1.0) ("#.1%") ("100.0%"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("0<20") ("12345.60000000000000"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("1<20") ("12345.61111111111111"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("*<20") ("12345.6*************"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("0>20") ("000000000000012345.6"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("1>20") ("111111111111112345.6"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("*>20") ("*************12345.6"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("0=20") ("000000000000012345.6"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("1=20") ("111111111111112345.6"))
                        bogusForceDataize.write (((xtest)) (12345.6) ("*=20") ("*************12345.6"))
                xtest_format_spec_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (0) ((("1".mul 10000).add "d")))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (0) (((".".add ("1".mul 10000)).add "d")))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (0) ((((("1".mul 1000).add ".").add ("1".mul 10000)).add "d")))
                        (((unsupported)) ((xcode)) ("xXobns"))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xformat)) (0) ((",".add (xcode))))
                xtest_internal_sizes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertGreater)) (((xobject).x__basicsize__)) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((xtuple).x__itemsize__)) (0))
                xtest_slot_wrapper_types.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xobject).x__init__)) (((xtypes).xWrapperDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xobject).x__str__)) (((xtypes).xWrapperDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xobject).x__lt__)) (((xtypes).xWrapperDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xint).x__lt__)) (((xtypes).xWrapperDescriptorType)))
                xtest_method_wrapper_types.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((xobject)) 0).x__init__)) (((xtypes).xMethodWrapperType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((xobject)) 0).x__str__)) (((xtypes).xMethodWrapperType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((xobject)) 0).x__lt__)) (((xtypes).xMethodWrapperType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((42.x__lt__)) (((xtypes).xMethodWrapperType)))
                xtest_method_descriptor_types.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xstr).xjoin)) (((xtypes).xMethodDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xlist).xappend)) (((xtypes).xMethodDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (("".xjoin)) (((xtypes).xBuiltinMethodType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) 0).xappend)) (((xtypes).xBuiltinMethodType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) (((xint).x__dict__)) ("from_bytes"))) (((xtypes).xClassMethodDescriptorType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xint).xfrom_bytes)) (((xtypes).xBuiltinMethodType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xint).x__new__)) (((xtypes).xBuiltinMethodType)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmappingproxy.write ((xtypes).xMappingProxyType)
                xtest_constructor.write
                  [xself]
                    memory > xmapping
                    seq > @
                      seq
                        (((unsupported)) ((xdict)))
                        xmapping.write (((unsupported)) ("x") (1) ("y") (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xmappingproxy)) ((xmapping)))) ((xmapping)))
                        xmapping.write (((unsupported)) ((xuserdict)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xmappingproxy)) ((xmapping)))) ((xmapping)))
                        xmapping.write ((((xcollections).xChainMap)) ((((unsupported)) ("x") (1))) ((((unsupported)) ("y") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xmappingproxy)) ((xmapping)))) ((xmapping)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xmappingproxy)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xmappingproxy)) ((((unsupported)) ("a") ("tuple"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xmappingproxy)) ((((unsupported)) ("a") ("list"))))
                xtest_methods.write
                  [xself]
                    memory > xattrs
                    seq > @
                      seq
                        xattrs.write ((((xset)) ((((xdir)) (((((xself).xmappingproxy)) ((((unsupported)) 0))))))).sub (((xset)) ((((xdir)) ((((xobject)) 0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xattrs)) ((((unsupported)) ("__contains__") ("__getitem__") ("__iter__") ("__len__") ("copy") ("get") ("items") ("keys") ("values"))))
                xtest_get.write
                  [xself]
                    memory > xview
                    seq > @
                      seq
                        xview.write ((((xself).xmappingproxy)) ((((unsupported)) ("a") ("A") ("b") ("B"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("a"))) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("b"))) ("B"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xview).x__getitem__)) ("xxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("a"))) ("A"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xview).xget)) ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("xxx") (42))) (42))
                xtest_missing.write
                  [xself]
                    memory > x__missing__
                    memory > xview
                    seq > @
                      seq
                        (((unsupported)) ((xdict)))
                          x__missing__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)) (("missing=%s".mod (xkey))))
                        xview.write ((((xself).xmappingproxy)) ((((unsupported)) ((xdictmissing)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("x"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("y"))) ("missing=y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("x"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("y"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("y") (42))) (42))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("x") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("y") ((xview)))))
                xtest_customdict.write
                  [xself]
                    memory > xcopy
                    memory > xvalues
                    memory > xget
                    memory > x__contains__
                    memory > x__getitem__
                    memory > xcustom
                    memory > x__len__
                    memory > xkeys
                    memory > x__iter__
                    memory > xview
                    memory > xitems
                    seq > @
                      seq
                        (((unsupported)) ((xdict)))
                          seq
                            x__contains__.write
                              [xself xkey]
                                seq > @
                                  ((xkey).eq "magic").if
                                    (((unsupported)) (TRUE))
                                    (((unsupported)) (((((xdict).x__contains__)) ((xself)) ((xkey)))))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xiter)) ((((unsupported)) ("iter"))))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (500))
                            xcopy.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("copy"))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("keys"))
                            xitems.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("items"))
                            xvalues.write
                              [xself]
                                seq > @
                                  (((unsupported)) ("values"))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)) (("getitem=%s".mod ((((xdict).x__getitem__)) ((xself)) ((xkey))))))
                            xget.write
                              [xself xkey xdefault]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (("get=%s".mod ((((xdict).xget)) ((xself)) ((xkey)) (("default=%r".mod (xdefault)))))))
                        xcustom.write (((xcustomdict)) ((((unsupported)) ("key") ("value"))))
                        xview.write ((((xself).xmappingproxy)) ((xcustom)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("key") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("magic") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("xxx") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("key"))) ("getitem=value"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xview).x__getitem__)) ("xxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((xview)))) ((((unsupported)) ("iter"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xview)))) (500))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xcopy)) 0)) ("copy"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("key"))) ("get=value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("xxx"))) ("get=default=None"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xitems)) 0)) ("items"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xkeys)) 0)) ("keys"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xvalues)) 0)) ("values"))
                xtest_chainmap.write
                  [xself]
                    memory > xcopy
                    memory > xd2
                    memory > xview
                    memory > xd1
                    memory > xmapping
                    seq > @
                      seq
                        xd1.write (((unsupported)) ("x") (1))
                        xd2.write (((unsupported)) ("y") (2))
                        xmapping.write ((((xcollections).xChainMap)) ((xd1)) ((xd2)))
                        xview.write ((((xself).xmappingproxy)) ((xmapping)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("x") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("y") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("z") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("x"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("y"))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xview).x__getitem__)) ("z"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((xsorted)) ((xview)))))) ((((unsupported)) ("x") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xview)))) (2))
                        xcopy.write ((((xview).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xcopy)) ((xmapping)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcopy)) (((xcollections).xChainMap)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcopy)) ((xmapping)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("x"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xview).xget)) ("y"))) (2))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xview).xget)) ("z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((xsorted)) (((((xview).xitems)) 0)))))) ((((unsupported)) ((((unsupported)) ("x") (1))) ((((unsupported)) ("y") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((xsorted)) (((((xview).xkeys)) 0)))))) ((((unsupported)) ("x") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((xsorted)) (((((xview).xvalues)) 0)))))) ((((unsupported)) (1) (2))))
                xtest_contains.write
                  [xself]
                    memory > xview
                    seq > @
                      seq
                        xview.write ((((xself).xmappingproxy)) (((((xdict).xfromkeys)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("a") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("b") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("c") ((xview)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ("xxx") ((xview)))))
                xtest_views.write
                  [xself]
                    memory > xvalues
                    memory > xkeys
                    memory > xmapping
                    memory > xview
                    memory > xitems
                    seq > @
                      seq
                        xmapping.write (((unsupported)) 0)
                        xview.write ((((xself).xmappingproxy)) ((xmapping)))
                        xkeys.write ((((xview).xkeys)) 0)
                        xvalues.write ((((xview).xvalues)) 0)
                        xitems.write ((((xview).xitems)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xkeys)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xvalues)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xitems)))) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xmapping)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xkeys)))) ((((unsupported)) ("key"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xvalues)))) ((((unsupported)) ("value"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xitems)))) ((((unsupported)) ((((unsupported)) ("key") ("value"))))))
                xtest_len.write
                  [xself]
                    memory > xview
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xexpected)) ((((xrange)) (6))))
                        seq
                          xdata.write ((((xdict).xfromkeys)) ((((unsupported)) ("abcde") ((((unsupported)) ((xexpected)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((xexpected)))
                          xview.write ((((xself).xmappingproxy)) ((xdata)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xview)))) ((xexpected)))
                xtest_iterators.write
                  [xself]
                    memory > xkeys
                    memory > xvalues
                    memory > xitems
                    memory > xview
                    seq > @
                      seq
                        xkeys.write (((unsupported)) ("x") ("y"))
                        xvalues.write (((unsupported)) (1) (2))
                        xitems.write (((xtuple)) ((((xzip)) ((xkeys)) ((xvalues)))))
                        xview.write ((((xself).xmappingproxy)) ((((xdict)) ((xitems)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xview)))) ((((xset)) ((xkeys)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xview).xkeys)) 0)))) ((((xset)) ((xkeys)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xview).xvalues)) 0)))) ((((xset)) ((xvalues)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xview).xitems)) 0)))) ((((xset)) ((xitems)))))
                xtest_copy.write
                  [xself]
                    memory > xcopy
                    memory > xoriginal
                    memory > xview
                    seq > @
                      seq
                        xoriginal.write (((unsupported)) ("key1") (27) ("key2") (51) ("key3") (93))
                        xview.write ((((xself).xmappingproxy)) ((xoriginal)))
                        xcopy.write ((((xview).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xcopy)))) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcopy)) ((xoriginal)))
                        (((unsupported)) ((((unsupported)) ((xoriginal)) ("key1"))) (70))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xview)) ("key1"))) (70))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xcopy)) ("key1"))) (27))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) ((xtype)))
                  seq
                    x__init__.write
                      [xcls xname xbases xns]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((xname)) ((xbases)) ((xns)))
                    x__new__.write
                      [xmcls xname xbases xns]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xmcls)) ((xname)) ((xbases)) ((xns)))))
                    x__prepare__.write
                      [xmcls xname xbases]
                        memory > xns
                        seq > @
                          (((unsupported)) 0)
                            xns.write ((((((xsuper)) 0).x__prepare__)) ((xname)) ((xbases)))
                            (((unsupported)) ((((unsupported)) ((xns)) ("y"))) (1))
                            bogusForceDataize.write ((((xns).xupdate)) ((xkw)))
                            (((unsupported)) ((xns)))
                xtest_new_class_basics.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xtypes).xnew_class)) ("C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__name__)) ("C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__bases__)) ((((unsupported)) ((xobject)))))
                xtest_new_class_subclass.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xC)) ((xint)))))
                xtest_new_class_meta.write
                  [xself]
                    memory > xsettings
                    memory > xC
                    memory > xMeta
                    seq > @
                      seq
                        xMeta.write ((xself).xMeta)
                        xsettings.write (((unsupported)) ("metaclass") ((xMeta)) ("z") (2))
                        (((unsupported)) ((xi)) ((((xrange)) (2))))
                          seq
                            xC.write ((((xtypes).xnew_class)) (("C".add (((xstr)) ((xi))))) ((((unsupported)) 0)) ((xsettings)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xC)) ((xMeta)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xy)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xz)) (2))
                xtest_new_class_exec_body.write
                  [xself]
                    memory > xC
                    memory > xfunc
                    memory > xMeta
                    seq > @
                      seq
                        xMeta.write ((xself).xMeta)
                        xfunc.write
                          [xns]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xns)) ("x"))) (0))
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xMeta)) ("z") (2))) ((xfunc)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xC)) ((xMeta)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xy)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xz)) (2))
                xtest_new_class_metaclass_keywords.write
                  [xself]
                    memory > xmeta_func
                    memory > xres
                    seq > @
                      seq
                        xmeta_func.write
                          [xname xbases xns]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xname)) ((xbases)) ((xns)) ((xkw)))))
                        xres.write ((((xtypes).xnew_class)) ("X") ((((unsupported)) ((xint)) ((xobject)))) ((((unsupported)) ((xdict)) ((xmeta_func)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres)) ((((unsupported)) ("X") ((((unsupported)) ((xint)) ((xobject)))) ((((unsupported)) 0)) ((((unsupported)) ("x") (0))))))
                xtest_new_class_defaults.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) 0)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__name__)) ("C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__bases__)) ((((unsupported)) ((xobject)))))
                xtest_new_class_meta_with_base.write
                  [xself]
                    memory > xC
                    memory > xfunc
                    memory > xMeta
                    seq > @
                      seq
                        xMeta.write ((xself).xMeta)
                        xfunc.write
                          [xns]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xns)) ("x"))) (0))
                        xC.write (((unsupported)) (((xtypes).xnew_class)) ("C") ((((unsupported)) ((xint)))) ((((unsupported)) ((xdict)) ((xMeta)) (2))) ((xfunc)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xC)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xC)) ((xMeta)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xy)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xz)) (2))
                xtest_new_class_with_mro_entry.write
                  [xself]
                    memory > xD
                    memory > xc
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xA)))))
                        xc.write (((xC)) 0)
                        xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((xc)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__bases__)) ((((unsupported)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__orig_bases__)) ((((unsupported)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__mro__)) ((((unsupported)) ((xD)) ((xA)) ((xobject)))))
                xtest_new_class_with_mro_entry_none.write
                  [xself]
                    memory > xD
                    memory > xc
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) 0)))
                        xc.write (((xC)) 0)
                        xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((xA)) ((xc)) ((xB)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__bases__)) ((((unsupported)) ((xA)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__orig_bases__)) ((((unsupported)) ((xA)) ((xc)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__mro__)) ((((unsupported)) ((xD)) ((xA)) ((xB)) ((xobject)))))
                xtest_new_class_with_mro_entry_error.write
                  [xself]
                    memory > xc
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((xA)))
                        xc.write (((xC)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((xc)))) ((((unsupported)) 0)))
                xtest_new_class_with_mro_entry_multiple.write
                  [xself]
                    memory > xD
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xA1)) ((xA2)))))
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xB1)) ((xB2)))))
                        xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((((xA)) 0)) ((((xB)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__bases__)) ((((unsupported)) ((xA1)) ((xA2)) ((xB1)) ((xB2)))))
                xtest_new_class_with_mro_entry_multiple_2.write
                  [xself]
                    memory > xD
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xA1)) ((xA2)) ((xA3)))))
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xB1)) ((xB2)))))
                        (((unsupported)) 0)
                        xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((((xA)) 0)) ((xC)) ((((xB)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__bases__)) ((((unsupported)) ((xA1)) ((xA2)) ((xA3)) ((xC)) ((xB1)) ((xB2)))))
                xtest_prepare_class.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xexpected_ns
                    memory > x__prepare__
                    memory > x__new__
                    seq > @
                      seq
                        xexpected_ns.write (((unsupported)) 0)
                        (((unsupported)) ((xtype)))
                          seq
                            x__new__.write
                              []
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((((xtype).x__new__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                            x__prepare__.write
                              []
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((xexpected_ns)))
                        xB.write ((((xtypes).xnew_class)) ("B") ((((unsupported)) ((xobject)))))
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) ((xobject)))) ((((unsupported)) ("metaclass") ((xA)))))
                        (((unsupported)) ((((unsupported)) ((xmeta)) ((xns)) ((xkwds)))) (((((xtypes).xprepare_class)) ("D") ((((unsupported)) ((xB)) ((xC)))) ((((unsupported)) ("metaclass") ((xtype)))))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xmeta)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xns)) ((xexpected_ns)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xkwds)))) (0))
                xtest_bad___prepare__.write
                  [xself]
                    memory > x__prepare__
                    seq > @
                      seq
                        (((unsupported)) ((xtype)))
                          x__prepare__.write
                            []
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("^BadMeta.__prepare__() must return a mapping, not NoneType$"))))
                          (((unsupported)) ((xBadMeta)))
                        (((unsupported)) 0)
                          x__prepare__.write
                            []
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("^<metaclass>.__prepare__() must return a mapping, not NoneType$"))))
                          (((unsupported)) ((((xBadMeta)) 0)))
                xtest_resolve_bases.write
                  [xself]
                    memory > xc
                    memory > xt
                    memory > xx
                    memory > xy
                    memory > xz
                    memory > x__mro_entries__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          x__mro_entries__.write
                            [xself xbases]
                              seq > @
                                seq
                                  (((unsupported)) ((xA)) ((xbases))).if
                                    (((unsupported)) ((((unsupported)) 0)))
                                  (((unsupported)) ((((unsupported)) ((xA)))))
                        xc.write (((xC)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) ((xc)))))) ((((unsupported)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) ((xC)))))) ((((unsupported)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) ((xA)) ((xC)))))) ((((unsupported)) ((xA)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) ((xc)) ((xA)))))) ((((unsupported)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xresolve_bases)) ((((unsupported)) ((xA)) ((xc)))))) ((((unsupported)) ((xA)))))
                        xx.write (((unsupported)) ((xA)))
                        xy.write (((unsupported)) ((xC)))
                        xz.write (((unsupported)) ((xA)) ((xC)))
                        xt.write (((unsupported)) ((xA)) ((xC)) ((xB)))
                        (((unsupported)) ((xbases)) ((((unsupported)) ((xx)) ((xy)) ((xz)) ((xt)))))
                          bogusForceDataize.write ((((xself).xassertIs)) (((((xtypes).xresolve_bases)) ((xbases)))) ((xbases)))
                xtest_metaclass_derivation.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > x__prepare__
                    memory > xA
                    memory > xC2
                    memory > x__new__
                    memory > xnew_calls
                    memory > xE
                    seq > @
                      seq
                        xnew_calls.write (((unsupported)) 0)
                        (((unsupported)) ((xtype)))
                          seq
                            x__new__.write
                              [xmcls xname xbases xns]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xnew_calls).xappend)) ("AMeta"))
                                    (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xmcls)) ((xname)) ((xbases)) ((xns)))))
                            x__prepare__.write
                              [xmcls xname xbases]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) 0)))
                        (((unsupported)) ((xAMeta)))
                          seq
                            x__new__.write
                              [xmcls xname xbases xns]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xnew_calls).xappend)) ("BMeta"))
                                    (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xmcls)) ((xname)) ((xbases)) ((xns)))))
                            x__prepare__.write
                              [xmcls xname xbases]
                                memory > xns
                                seq > @
                                  (((unsupported)) 0)
                                    xns.write ((((((xsuper)) 0).x__prepare__)) ((xname)) ((xbases)))
                                    (((unsupported)) ((((unsupported)) ((xns)) ("BMeta_was_here"))) (TRUE))
                                    (((unsupported)) ((xns)))
                        xA.write ((((xtypes).xnew_class)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xAMeta)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xB.write ((((xtypes).xnew_class)) ("B") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xBMeta)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BMeta") ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) ((xA)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BMeta") ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("BMeta_was_here") (((xC).x__dict__)))
                        xC2.write ((((xtypes).xnew_class)) ("C2") ((((unsupported)) ((xB)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BMeta") ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("BMeta_was_here") (((xC2).x__dict__)))
                        xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((xC)))) ((((unsupported)) ("metaclass") ((xtype)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BMeta") ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("BMeta_was_here") (((xD).x__dict__)))
                        xE.write ((((xtypes).xnew_class)) ("E") ((((unsupported)) ((xC)))) ((((unsupported)) ("metaclass") ((xAMeta)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BMeta") ("AMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("BMeta_was_here") (((xE).x__dict__)))
                xtest_metaclass_override_function.write
                  [xself]
                    memory > xZ
                    memory > xfunc
                    memory > xX
                    memory > xY
                    memory > xmarker
                    seq > @
                      seq
                        (((unsupported)) (((xself).xMeta)))
                        xmarker.write (((xobject)) 0)
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xmarker)))
                        xX.write ((((xtypes).xnew_class)) ("X") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xfunc)))))
                        xY.write ((((xtypes).xnew_class)) ("Y") ((((unsupported)) ((xobject)))) ((((unsupported)) ("metaclass") ((xfunc)))))
                        xZ.write ((((xtypes).xnew_class)) ("Z") ((((unsupported)) ((xA)))) ((((unsupported)) ("metaclass") ((xfunc)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xmarker)) ((xX)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xmarker)) ((xY)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xmarker)) ((xZ)))
                xtest_metaclass_override_callable.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > x__prepare__
                    memory > xX
                    memory > xF
                    memory > xprepare_calls
                    memory > xA
                    memory > xC2
                    memory > xnew_calls
                    memory > xE
                    memory > x__new__
                    memory > xF2
                    seq > @
                      seq
                        xnew_calls.write (((unsupported)) 0)
                        xprepare_calls.write (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            x__new__.write
                              [xmcls]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xnew_calls).xappend)) ("ANotMeta"))
                                    (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xmcls)))))
                            x__prepare__.write
                              [xmcls xname xbases]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xprepare_calls).xappend)) ("ANotMeta"))
                                    (((unsupported)) ((((unsupported)) 0)))
                        (((unsupported)) ((xANotMeta)))
                          seq
                            x__new__.write
                              [xmcls]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xnew_calls).xappend)) ("BNotMeta"))
                                    (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xmcls)))))
                            x__prepare__.write
                              [xmcls xname xbases]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xprepare_calls).xappend)) ("BNotMeta"))
                                    (((unsupported)) (((((((xsuper)) 0).x__prepare__)) ((xname)) ((xbases)))))
                        xA.write ((((xtypes).xnew_class)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xANotMeta)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xANotMeta)) ((((xtype)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xB.write ((((xtypes).xnew_class)) ("B") ((((unsupported)) 0)) ((((unsupported)) ("metaclass") ((xBNotMeta)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xC.write ((((xtypes).xnew_class)) ("C") ((((unsupported)) ((xA)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xC2.write ((((xtypes).xnew_class)) ("C2") ((((unsupported)) ((xB)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xC2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          xD.write ((((xtypes).xnew_class)) ("D") ((((unsupported)) ((xC)))) ((((unsupported)) ("metaclass") ((xtype)))))
                        xE.write ((((xtypes).xnew_class)) ("E") ((((unsupported)) ((xC)))) ((((unsupported)) ("metaclass") ((xANotMeta)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xE)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xF.write ((((xtypes).xnew_class)) ("F") ((((unsupported)) ((((xobject)) 0)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        xF2.write ((((xtypes).xnew_class)) ("F2") ((((unsupported)) ((xC)) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xBNotMeta)) ((((xtype)) ((xF2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xprepare_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xprepare_calls).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_calls)) ((((unsupported)) ("BNotMeta") ("ANotMeta"))))
                        bogusForceDataize.write ((((xnew_calls).xclear)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          xX.write ((((xtypes).xnew_class)) ("X") ((((unsupported)) ((xC)) ((((xint)) 0)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          xX.write ((((xtypes).xnew_class)) ("X") ((((unsupported)) ((((xint)) 0)) ((xC)))))
                xtest_one_argument_type.write
                  [xself]
                    memory > xexpected_message
                    seq > @
                      seq
                        xexpected_message.write "type.__new__() takes exactly 3 arguments (1 given)"
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (5))) ((xint)))
                        (((unsupported)) ((xtype)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xM)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ((xexpected_message)))
                        (((unsupported)) ((xtype)) ((xM)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xN)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ((xexpected_message)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    memory > xns3
                    seq > @
                      seq
                        xns1.write ((((xtypes).xSimpleNamespace)) 0)
                        xns2.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2))
                        xns3.write ((((xtypes).xSimpleNamespace)) ((((unsupported)) ((((unsupported)) ((xdict)) (1) (2))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xtypes).xSimpleNamespace)) (1) (2) (3))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xtypes).xSimpleNamespace)) ((((unsupported)) ((((unsupported)) (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xns1).x__dict__)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns1)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xns2).x__dict__)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns2)))) ((((unsupported)) ("y") (2) ("x") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xns3).x__dict__)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns3)))) ((((unsupported)) ("y") (2) ("x") (1))))
                xtest_unbound.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        xns1.write (((xvars)) (((((xtypes).xSimpleNamespace)) 0)))
                        xns2.write (((xvars)) ((((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xns1)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xns2)) ((((unsupported)) ("y") (2) ("x") (1))))
                xtest_underlying_dict.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    memory > xns3
                    memory > xmapping
                    seq > @
                      seq
                        xns1.write ((((xtypes).xSimpleNamespace)) 0)
                        xns2.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2))
                        xns3.write (((unsupported)) (((xtypes).xSimpleNamespace)) (TRUE) (FALSE))
                        xmapping.write ((xns3).x__dict__)
                        (((unsupported)) ((((unsupported)) ((xns3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns1).x__dict__)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns2).x__dict__)) ((((unsupported)) ("y") (2) ("x") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmapping)) ((((unsupported)) ((xdict)) (TRUE) (FALSE))))
                xtest_attrget.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns).xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns).xy)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns).xw)) (3))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          unsupported
                xtest_attrset.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        xns1.write ((((xtypes).xSimpleNamespace)) 0)
                        xns2.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2) (3))
                        (((unsupported)) (((xns1).xa)) ("spam"))
                        (((unsupported)) (((xns1).xb)) ("ham"))
                        (((unsupported)) (((xns2).xz)) (4))
                        (((unsupported)) (((xns2).xtheta)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns1).x__dict__)) ((((unsupported)) ((xdict)) ("spam") ("ham"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns2).x__dict__)) ((((unsupported)) ((xdict)) (1) (2) (3) (4) ("None: is there a None literal in the EO language?"))))
                xtest_attrdel.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        xns1.write ((((xtypes).xSimpleNamespace)) 0)
                        xns2.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2) (3))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xns1).xspam)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xns2).xspam)))))
                        (((unsupported)) ((((unsupported)) (((xns2).xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns2)))) ((((unsupported)) ((xdict)) (3) (1))))
                        (((unsupported)) (((xns2).xy)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns2)))) ((((unsupported)) ((xdict)) (3) (1) ("spam"))))
                        (((unsupported)) ((((unsupported)) (((xns2).xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns2)))) ((((unsupported)) ((xdict)) (3) (1))))
                        (((unsupported)) (((xns1).xspam)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns1)))) ((((unsupported)) ((xdict)) (5))))
                        (((unsupported)) ((((unsupported)) (((xns1).xspam)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns1)))) ((((unsupported)) 0)))
                xtest_repr.write
                  [xself]
                    memory > xname
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2) (3))
                        xns2.write ((((xtypes).xSimpleNamespace)) 0)
                        (((unsupported)) (((xns2).xx)) ("spam"))
                        (((unsupported)) (((xns2).x_y)) (5))
                        xname.write "namespace"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xns1)))) ((((unsupported)) (("{name}(w=3, x=1, y=2)".xformat)) ((xname)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xns2)))) ((((unsupported)) (("{name}(_y=5, x='spam')".xformat)) ((xname)))))
                xtest_equal.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1))
                        xns2.write ((((xtypes).xSimpleNamespace)) 0)
                        (((unsupported)) (((xns2).xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtypes).xSimpleNamespace)) 0)) (((((xtypes).xSimpleNamespace)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xns1)) ((xns2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xns2)) (((((xtypes).xSimpleNamespace)) 0)))
                xtest_nested.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    memory > xns3
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1) (2))
                        xns2.write ((((xtypes).xSimpleNamespace)) 0)
                        xns3.write (((unsupported)) (((xtypes).xSimpleNamespace)) ((xns1)))
                        (((unsupported)) (((xns2).xspam)) ((xns1)))
                        (((unsupported)) (((xns2).xham)) ("?"))
                        (((unsupported)) (((xns2).xspam)) ((xns3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns1)))) ((((unsupported)) ((xdict)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns2)))) ((((unsupported)) ((xdict)) ((xns3)) ("?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns2).xspam)) ((xns3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xns3)))) ((((unsupported)) ((xdict)) ((xns1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xns3).xx).xa)) (1))
                xtest_recursive.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    memory > xns3
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xtypes).xSimpleNamespace)) ("cookie"))
                        xns2.write ((((xtypes).xSimpleNamespace)) 0)
                        xns3.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1))
                        (((unsupported)) (((xns1).xspam)) ((xns1)))
                        (((unsupported)) (((xns2).xspam)) ((xns3)))
                        (((unsupported)) (((xns3).xspam)) ((xns2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns1).xspam)) ((xns1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xns1).xspam).xspam)) ((xns1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xns1).xspam).xspam)) (((xns1).xspam)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns2).xspam)) ((xns3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns3).xspam)) ((xns2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xns2).xspam).xspam)) ((xns2)))
                xtest_recursive_repr.write
                  [xself]
                    memory > xrepr1
                    memory > xns1
                    memory > xrepr2
                    memory > xns2
                    memory > xns3
                    memory > xname
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xtypes).xSimpleNamespace)) ("cookie"))
                        xns2.write ((((xtypes).xSimpleNamespace)) 0)
                        xns3.write (((unsupported)) (((xtypes).xSimpleNamespace)) (1))
                        (((unsupported)) (((xns1).xspam)) ((xns1)))
                        (((unsupported)) (((xns2).xspam)) ((xns3)))
                        (((unsupported)) (((xns3).xspam)) ((xns2)))
                        xname.write "namespace"
                        xrepr1.write (((unsupported)) (("{name}(c='cookie', spam={name}(...))".xformat)) ((xname)))
                        xrepr2.write (((unsupported)) (("{name}(spam={name}(spam={name}(...), x=1))".xformat)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xns1)))) ((xrepr1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xns2)))) ((xrepr2)))
                xtest_as_dict.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xtypes).xSimpleNamespace)) ("spamspamspam"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xlen)) ((xns)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xiter)) ((xns)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ("spam") ((xns)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xns)) ("spam"))
                xtest_subclass.write
                  [xself]
                    memory > xspam
                    seq > @
                      seq
                        (((unsupported)) (((xtypes).xSimpleNamespace)))
                        xspam.write (((unsupported)) ((xSpam)) (8) (9))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xspam)))) ((xSpam)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) ((xspam)))) ((((unsupported)) ("ham") (8) ("eggs") (9))))
                xtest_pickle.write
                  [xself]
                    memory > xpname
                    memory > xns
                    memory > xns_pickled
                    memory > xns_roundtrip
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xtypes).xSimpleNamespace)) ("spam") ("spam"))
                        (((unsupported)) ((xprotocol)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpname.write ((("protocol {}".xformat)) ((xprotocol)))
                            (((unsupported)) ((xTypeError)))
                              xns_pickled.write ((((xpickle).xdumps)) ((xns)) ((xprotocol)))
                              (((unsupported)) ((((xTypeError)) ((xpname)))) ((xe)))
                            xns_roundtrip.write ((((xpickle).xloads)) ((xns_pickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xns)) ((xns_roundtrip)) ((xpname)))
                xtest_fake_namespace_compare.write
                  [xself]
                    memory > x__class__
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                          x__class__.write ((xtypes).xSimpleNamespace)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xtypes).xSimpleNamespace)) 0).eq (((xFakeSimpleNamespace)) 0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xtypes).xSimpleNamespace)) 0).neq (((xFakeSimpleNamespace)) 0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_wrong_args.write
                  [xself]
                    memory > xsamples
                    seq > @
                      seq
                        xsamples.write (((unsupported)) ("None: is there a None literal in the EO language?") (1) ((((xobject)) 0)))
                        (((unsupported)) ((xsample)) ((xsamples)))
                          (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("types.coroutine.*expects a callable"))))
                            bogusForceDataize.write ((((xtypes).xcoroutine)) ((xsample)))
                xtest_non_gen_values.write
                  [xself]
                    memory > x__await__
                    memory > xaw
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo)) 0)) ("spam"))
                        (((unsupported)) 0)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((unsupported)) 0)))
                        xaw.write (((xAwaitable)) 0)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xaw)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xaw)) ((((xfoo)) 0)))
                        xfoo.write ((((xtypes).xcoroutine)) ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xaw)) ((((xfoo)) 0)))
                xtest_async_def.write
                  [xself]
                    memory > xfoo_code
                    memory > xcoro
                    memory > xdecorated_foo
                    memory > xfoo_coro
                    memory > xfoo
                    memory > xbar
                    memory > xfoo_flags
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                        xfoo_code.write ((xfoo).x__code__)
                        xfoo_flags.write (((xfoo).x__code__).xco_flags)
                        xdecorated_foo.write ((((xtypes).xcoroutine)) ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xfoo)) ((xdecorated_foo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo).x__code__).xco_flags)) ((xfoo_flags)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xdecorated_foo).x__code__)) ((xfoo_code)))
                        xfoo_coro.write (((xfoo)) 0)
                        xbar.write
                          []
                            seq > @
                              (((unsupported)) ((xfoo_coro)))
                        (((unsupported)) ((x_)) ((((xrange)) (2))))
                          seq
                            xbar.write ((((xtypes).xcoroutine)) ((xbar)))
                            xcoro.write (((xbar)) 0)
                            bogusForceDataize.write ((((xself).xassertIs)) ((xfoo_coro)) ((xcoro)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xcoro).xcr_code).xco_flags)) ((xfoo_flags)))
                            bogusForceDataize.write ((((xcoro).xclose)) 0)
                xtest_duck_coro.write
                  [xself]
                    memory > xthrow
                    memory > xclose
                    memory > xcoro
                    memory > xsend
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            xsend.write
                              [xself]
                                seq > @
                            xthrow.write
                              [xself]
                                seq > @
                            xclose.write
                              [xself]
                                seq > @
                            x__await__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                        xcoro.write (((xCoroLike)) 0)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xcoro)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xfoo)) 0)) ((xcoro)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((((xfoo)) 0).x__await__)) 0)) ((xcoro)))
                xtest_duck_corogen.write
                  [xself]
                    memory > xthrow
                    memory > x__iter__
                    memory > xclose
                    memory > xcoro
                    memory > x__next__
                    memory > xsend
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            xsend.write
                              [xself]
                                seq > @
                            xthrow.write
                              [xself]
                                seq > @
                            xclose.write
                              [xself]
                                seq > @
                            x__await__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                        xcoro.write (((xCoroGenLike)) 0)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xcoro)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xfoo)) 0)) ((xcoro)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((((xfoo)) 0).x__await__)) 0)) ((xcoro)))
                xtest_duck_gen.write
                  [xself]
                    memory > x__iter__
                    memory > xclose
                    memory > xbar
                    memory > xref
                    memory > x__next__
                    memory > xsend
                    memory > xwrapper
                    memory > xerror
                    memory > xthrow
                    memory > xgen
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            xsend.write
                              [xself]
                                seq > @
                            xthrow.write
                              [xself]
                                seq > @
                            xclose.write
                              [xself]
                                seq > @
                            x__iter__.write
                              [xself]
                                seq > @
                            x__next__.write
                              [xself]
                                seq > @
                        xgen.write (((((xunittest).xmock).xMagicMock)) ((xGenLike)))
                        (((unsupported)) (((xgen).x__iter__)) ((((unsupported)) ((xgen)))))
                        (((unsupported)) (((xgen).x__name__)) ("gen"))
                        (((unsupported)) (((xgen).x__qualname__)) ("test.gen"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xgen)) ((((xcollections).xabc).xGenerator)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xgen)) ((((xiter)) ((xgen)))))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xgen)))
                        xwrapper.write (((xfoo)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xwrapper)) (((xtypes).x_GeneratorWrapper)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xwrapper).x__await__)) 0)) ((xwrapper)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xiter)) ((xwrapper)))) ((xwrapper)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xwrapper)) ((((xcollections).xabc).xCoroutine)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xwrapper)) ((((xcollections).xabc).xAwaitable)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).x__qualname__)) (((xgen).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).x__name__)) (((xgen).x__name__)))
                        (((unsupported)) ((xname)) ((((unsupported)) ("gi_running") ("gi_frame") ("gi_code") ("gi_yieldfrom") ("cr_running") ("cr_frame") ("cr_code") ("cr_await"))))
                          (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                            bogusForceDataize.write (((xgetattr)) ((xwrapper)) ((xname)))
                        (((unsupported)) (((xgen).xgi_running)) ((((xobject)) 0)))
                        (((unsupported)) (((xgen).xgi_frame)) ((((xobject)) 0)))
                        (((unsupported)) (((xgen).xgi_code)) ((((xobject)) 0)))
                        (((unsupported)) (((xgen).xgi_yieldfrom)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xgi_running)) (((xgen).xgi_running)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xgi_frame)) (((xgen).xgi_frame)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xgi_code)) (((xgen).xgi_code)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xgi_yieldfrom)) (((xgen).xgi_yieldfrom)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xcr_running)) (((xgen).xgi_running)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xcr_frame)) (((xgen).xgi_frame)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xcr_code)) (((xgen).xgi_code)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xwrapper).xcr_await)) (((xgen).xgi_yieldfrom)))
                        bogusForceDataize.write ((((xwrapper).xclose)) 0)
                        bogusForceDataize.write (((((xgen).xclose).xassert_called_once_with)) 0)
                        bogusForceDataize.write ((((xwrapper).xsend)) (1))
                        bogusForceDataize.write (((((xgen).xsend).xassert_called_once_with)) (1))
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        bogusForceDataize.write (((xnext)) ((xwrapper)))
                        bogusForceDataize.write (((((xgen).x__next__).xassert_called_once_with)) 0)
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        bogusForceDataize.write ((((xwrapper).xthrow)) (1) (2) (3))
                        bogusForceDataize.write (((((xgen).xthrow).xassert_called_once_with)) (1) (2) (3))
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        bogusForceDataize.write ((((xwrapper).xthrow)) (1) (2))
                        bogusForceDataize.write (((((xgen).xthrow).xassert_called_once_with)) (1) (2))
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        bogusForceDataize.write ((((xwrapper).xthrow)) (1))
                        bogusForceDataize.write (((((xgen).xthrow).xassert_called_once_with)) (1))
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        xerror.write (((xException)) 0)
                        (((unsupported)) ((((xgen).xthrow).xside_effect)) ((xerror)))
                        (((unsupported)) ((xException)))
                          bogusForceDataize.write ((((xwrapper).xthrow)) (1))
                          bogusForceDataize.write ((((xself).xassertIs)) ((xex)) ((xerror)))
                          bogusForceDataize.write ((((xself).xfail)) ("wrapper did not propagate an exception"))
                        bogusForceDataize.write ((((xgen).xreset_mock)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xwrapper).xthrow)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xgen).xthrow).xcalled)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xwrapper).xclose)) (1))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xgen).xclose).xcalled)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xwrapper).xsend)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xgen).xsend).xcalled)))
                        xbar.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xwrapper)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xwrapper)) ((((xbar)) 0)))
                        xref.write ((((xweakref).xref)) ((xwrapper)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xref)) 0)) ((xwrapper)))
                xtest_duck_functional_gen.write
                  [xself]
                    memory > xthrow
                    memory > x__iter__
                    memory > xclose
                    memory > xcoro
                    memory > x__next__
                    memory > xsend
                    memory > xcorofunc
                    memory > x__init__
                    memory > xwrapper
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) 0)
                            x__init__.write
                              [xself xfut]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).x_i)) (0))
                                    (((unsupported)) (((xself).x_fut)) ((xfut)))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((((xself).xsend)) ("None: is there a None literal in the EO language?"))))
                            xsend.write
                              [xself xv]
                                seq > @
                                  (((unsupported)) 0)
                                    seq
                                      (((xself).x_i).eq 0).if
                                        seq
                                          (((unsupported)) ((((unsupported)) ((xv)) ("None: is there a None literal in the EO language?"))))
                                          (((unsupported)) (((xself).x_fut)))
                                      (((xself).x_i).eq 1).if
                                        (((unsupported)) ((((xStopIteration)) (((xv).mul 2)))))
                                      (((xself).x_i).greater 1).if
                                        (((unsupported)) ((xStopIteration)))
                                    (((unsupported)) (((xself).x_i)) (1))
                            xthrow.write
                              [xself xtp]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((xself).x_i)) (100))
                                    (((unsupported)) ((xtp)) ((xGeneratorExit))).if
                                      (((unsupported)) ((xtp)))
                            xclose.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xself).xthrow)) ((xGeneratorExit)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xGenerator)) ("spam"))))
                        xwrapper.write (((xfoo)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xwrapper)) (((xtypes).x_GeneratorWrapper)))
                        xcorofunc.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) (((((unsupported)) ((((xfoo)) 0))).add 100)))
                        xcoro.write (((xcorofunc)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcoro).xsend)) ("None: is there a None literal in the EO language?"))) ("spam"))
                        (((unsupported)) ((xStopIteration)))
                          bogusForceDataize.write ((((xcoro).xsend)) (20))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xex).xargs)) (0))) (140))
                          bogusForceDataize.write ((((xself).xfail)) ("StopIteration was expected"))
                xtest_gen.write
                  [xself]
                    memory > xwrapper
                    memory > xgen_func
                    memory > xgen
                    memory > xfoo
                    seq > @
                      seq
                        xgen_func.write
                          []
                            seq > @
                              seq
                                (((unsupported)) (1))
                                (((unsupported)) ((((unsupported)) (2))))
                        xgen.write (((xgen_func)) 0)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xgen)))
                        xwrapper.write (((xfoo)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xwrapper)) (((xtypes).x_GeneratorWrapper)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xwrapper).x__await__)) 0)) ((xgen)))
                        (((unsupported)) ((xname)) ((((unsupported)) ("__name__") ("__qualname__") ("gi_code") ("gi_running") ("gi_frame"))))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((xgetattr)) ((((xfoo)) 0)) ((xname)))) ((((xgetattr)) ((xgen)) ((xname)))))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xfoo)) 0).xcr_code)) (((xgen).xgi_code)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xwrapper)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xwrapper).xsend)) ("None: is there a None literal in the EO language?"))) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xStopIteration)) ("spam"))))
                          bogusForceDataize.write ((((xwrapper).xsend)) ("spam"))
                        xgen.write (((xgen_func)) 0)
                        xwrapper.write (((xfoo)) 0)
                        bogusForceDataize.write ((((xwrapper).xsend)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xException)) ("ham"))))
                          bogusForceDataize.write ((((xwrapper).xthrow)) ((xException)) ((((xException)) ("ham"))))
                        xfoo.write ((((xtypes).xcoroutine)) ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((((xfoo)) 0).x__await__)) 0)) ((xgen)))
                xtest_returning_itercoro.write
                  [xself]
                    memory > xgen
                    memory > xfoo
                    memory > xgencoro
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) 0)
                        xgencoro.write (((xgen)) 0)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xgencoro)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xfoo)) 0)) ((xgencoro)))
                        xfoo.write ((((xtypes).xcoroutine)) ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xfoo)) 0)) ((xgencoro)))
                xtest_genfunc.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xtypes).xcoroutine)) ((xgen)))) ((xgen)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xtypes).xcoroutine)) (((((xtypes).xcoroutine)) ((xgen)))))) ((xgen)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgen).x__code__).xco_flags).and ((xinspect).xCO_ITERABLE_COROUTINE))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xgen).x__code__).xco_flags).and ((xinspect).xCO_COROUTINE))))
                        xg.write (((xgen)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xg).xgi_code).xco_flags).and ((xinspect).xCO_ITERABLE_COROUTINE))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xg).xgi_code).xco_flags).and ((xinspect).xCO_COROUTINE))))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xtypes).xcoroutine)) ((xgen)))) ((xgen)))
                xtest_wrapper_object.write
                  [xself]
                    memory > xwrapper
                    memory > xgen
                    memory > xcoro
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)) 0)
                        xcoro.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xgen)) 0)))
                        xwrapper.write (((xcoro)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("GeneratorWrapper") ((((xrepr)) ((xwrapper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xwrapper)))) ((((xstr)) ((xwrapper)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xset)) ((((xdir)) ((xwrapper))))).xissuperset)) ((((unsupported)) ("__await__") ("__iter__") ("__next__") ("cr_code") ("cr_running") ("cr_frame") ("gi_code") ("gi_frame") ("gi_running") ("send") ("close") ("throw"))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)