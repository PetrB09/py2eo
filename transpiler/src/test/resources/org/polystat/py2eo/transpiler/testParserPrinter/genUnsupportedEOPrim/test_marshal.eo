memory > xValueError
memory > xinterleaved
memory > xrange
memory > xtype
memory > xi
memory > xfloat
memory > xEOFError
memory > xk
memory > xtypes
memory > xarray
memory > xImportError
memory > xcomplex
memory > xBadReader
memory > xexpected
memory > xlist
memory > xconstructor
memory > xenumerate
memory > xfrozenset
memory > xio
memory > xb
memory > xvalue
memory > xextra
memory > xbytearray
memory > xStopIteration
memory > xp
memory > xopen
memory > xf
memory > xset
memory > xint
memory > xException
memory > xr
memory > xcompile
memory > xsuper
memory > xs
memory > xsupport
memory > xsys
memory > xbytes
memory > xtuple
memory > xobj
memory > xNullWriter
memory > xos
memory > xv
memory > xid
memory > xExceptionTestCase
memory > xHelperMixin
memory > xe
memory > x__file__
memory > xunittest
memory > xtyp
memory > xmemoryview
memory > xisinstance
memory > xdict
memory > xmarshal
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_marshal
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xd
        memory > xkeys
        memory > xtest_loads_reject_unicode_strings
        memory > xtest_write_long_to_file
        memory > xtest0To3
        memory > xtestTuple
        memory > xtest_write_object_to_file
        memory > xtest_bytes
        memory > xtest_frozenset
        memory > xtest_version_argument
        memory > xtest_invalid_longs
        memory > xtest_empty_frozenset_singleton
        memory > xtestIntern
        memory > xtestList
        memory > xtest_exceptions
        memory > xtest_ints
        memory > xtest_tuple
        memory > xtestNoIntern
        memory > xtest1To3
        memory > xcheck_unmarshallable
        memory > xtest_bool
        memory > xtest2To3
        memory > xtest_large_marshal
        memory > xtest_eof
        memory > xstrobj
        memory > xtest_fuzz
        memory > xtest_read_last_object_from_file
        memory > xtest_read_object_from_file
        memory > xtest_array
        memory > x_testcapi
        memory > xhelper3
        memory > xhelper
        memory > xCollectObjectIDs
        memory > xtestRecursion
        memory > xtest_sets
        memory > xtest_unicode
        memory > xtest3To3
        memory > xtest_bad_reader
        memory > xtestFrozenSet
        memory > xpointer_size
        memory > xtest_exact_type_match
        memory > xtest_multiple_dumps_and_loads
        memory > xtestFloat
        memory > xtest_str
        memory > xtestDict
        memory > xtestInt
        memory > x_test
        memory > xtest_loads_recursion
        memory > xtest_read_short_from_file
        memory > xtest_patch_873224
        memory > xtestStr
        memory > xtest_bytearray
        memory > xtest_dict
        memory > xtest_int64
        memory > xtest_code
        memory > xtest_many_codeobjects
        memory > xwrite
        memory > xtestSet
        memory > xtest_floats
        memory > xtest_different_filenames
        memory > xtest_read_long_from_file
        memory > xtest_string
        memory > xtest_memoryview
        memory > xtestModule
        memory > xtest_bug_5888452
        memory > xLARGE_SIZE
        memory > xtest_set
        memory > xtest_recursion_limit
        memory > xtest_list
        memory > xtestBytes
        memory > xtest_same_filename_used
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_testcapi.write "None: is there a None literal in the EO language?"
            (((unsupported)) 0)
              xhelper.write
                [xself xsample]
                  memory > xnew
                  seq > @
                    (((unsupported)) 0)
                      xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xsample)) ((((unsupported)) ((xextra)))))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xsample)) ((xnew)))
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                            bogusForceDataize.write ((((xmarshal).xdump)) ((xsample)) ((xf)) ((((unsupported)) ((xextra)))))
                          (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                            xnew.write ((((xmarshal).xload)) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xsample)) ((xnew)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xtest_ints.write
                  [xself]
                    memory > xn
                    seq > @
                      seq
                        xn.write (((unsupported)) (((xsys).xmaxsize)) (2))
                        while.
                          (xn)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)) ((xexpected)) ((((unsupported)) (((xn).neg)) ((xn)))))
                                  bogusForceDataize.write ((((xself).xhelper)) ((xexpected)))
                                xn.write (((unsupported)) ((xn)) (1))
                xtest_int64.write
                  [xself]
                    memory > xminint64
                    memory > xgot
                    memory > xmaxint64
                    memory > xbase
                    memory > xs
                    seq > @
                      seq
                        xmaxint64.write ((((unsupported)) (1) (63)).sub 1)
                        xminint64.write (((xmaxint64).neg).sub 1)
                        (((unsupported)) ((xbase)) ((((unsupported)) ((xmaxint64)) ((xminint64)) (((xmaxint64).neg)) (((((unsupported)) ((xminint64)) (1)).neg)))))
                          while.
                            (xbase)
                            [unused]
                              seq > @
                                seq
                                  xs.write ("I".add (((unsupported)) (((xint).xto_bytes)) ((xbase)) (8) ("little") (TRUE)))
                                  xgot.write ((((xmarshal).xloads)) ((xs)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xbase)) ((xgot)))
                                  ((xbase).eq (1.neg)).if
                                    xbase.write 0
                                    (((unsupported)) ((xbase)) (1))
                        xgot.write ((((xmarshal).xloads)) ("Ixfexdcxbax98x76x54x32x10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((((unsupported)) 0)))
                        xgot.write ((((xmarshal).xloads)) ("Ix01x23x45x67x89xabxcdxef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) (((((unsupported)) 0).neg)))
                        xgot.write ((((xmarshal).xloads)) ("Ix08x19x2ax3bx4cx5dx6ex7f"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((((unsupported)) 0)))
                        xgot.write ((((xmarshal).xloads)) ("Ixf7xe6xd5xc4xb3xa2x91x80"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) (((((unsupported)) 0).neg)))
                xtest_bool.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xb)) ((((unsupported)) (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xhelper)) ((xb)))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              xtest_floats.write
                [xself]
                  memory > xgot
                  memory > xf
                  memory > xs
                  memory > xn
                  memory > xsmall
                  seq > @
                    seq
                      xsmall.write (((unsupported)) 0)
                      xn.write (((xsys).xmaxsize).mul (((unsupported)) 0))
                      while.
                        ((xn).greater (xsmall))
                        [unused]
                          seq > @
                            seq
                              (((unsupported)) ((xexpected)) ((((unsupported)) (((xn).neg)) ((xn)))))
                                bogusForceDataize.write ((((xself).xhelper)) ((((xfloat)) ((xexpected)))))
                              (((unsupported)) ((xn)) (123.4567))
                      xf.write 0.0
                      xs.write ((((xmarshal).xdumps)) ((xf)) (2))
                      xgot.write ((((xmarshal).xloads)) ((xs)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xf)) ((xgot)))
                      xs.write ((((xmarshal).xdumps)) ((xf)) (1))
                      xgot.write ((((xmarshal).xloads)) ((xs)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xf)) ((xgot)))
                      xn.write (((xsys).xmaxsize).mul (((unsupported)) 0))
                      while.
                        ((xn).less (xsmall))
                        [unused]
                          seq > @
                            seq
                              (((unsupported)) ((xexpected)) ((((unsupported)) (((xn).neg)) ((xn)))))
                                seq
                                  xf.write (((xfloat)) ((xexpected)))
                                  bogusForceDataize.write ((((xself).xhelper)) ((xf)))
                                  bogusForceDataize.write ((((xself).xhelper)) ((xf)) (1))
                              (((unsupported)) ((xn)) (123.4567))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xtest_unicode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("") ("Andrxe8 Previn") ("abc") ((" ".mul 10000)))))
                        bogusForceDataize.write ((((xself).xhelper)) (((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xs)))))))
                xtest_string.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("") ("Andrxe8 Previn") ("abc") ((" ".mul 10000)))))
                        bogusForceDataize.write ((((xself).xhelper)) ((xs)))
                xtest_bytes.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("") ("Andrxe8 Previn") ("abc") ((" ".mul 10000)))))
                        bogusForceDataize.write ((((xself).xhelper)) ((xs)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_exceptions.write
                [xself]
                  memory > xnew
                  seq > @
                    seq
                      xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xStopIteration)))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xStopIteration)) ((xnew)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_code.write
                  [xself]
                    memory > xnew
                    memory > xco
                    seq > @
                      seq
                        xco.write (((xExceptionTestCase).xtest_exceptions).x__code__)
                        xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xco)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xco)) ((xnew)))
                xtest_many_codeobjects.write
                  [xself]
                    memory > xcodes
                    memory > xcount
                    seq > @
                      seq
                        xcount.write 5000
                        xcodes.write ((((unsupported)) ((((xExceptionTestCase).xtest_exceptions).x__code__))).mul (xcount))
                        bogusForceDataize.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xcodes)))))
                xtest_different_filenames.write
                  [xself]
                    memory > xco2
                    memory > xco1
                    seq > @
                      seq
                        xco1.write (((xcompile)) ("x") ("f1") ("exec"))
                        xco2.write (((xcompile)) ("y") ("f2") ("exec"))
                        (((unsupported)) ((((unsupported)) ((xco1)) ((xco2)))) (((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((((unsupported)) ((xco1)) ((xco2)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xco1).xco_filename)) ("f1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xco2).xco_filename)) ("f2"))
                xtest_same_filename_used.write
                  [xself]
                    memory > xs
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        xs.write "def f(): passndef g(): pass"
                        xco.write (((xcompile)) ((xs)) ("myfile") ("exec"))
                        xco.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xco)))))
                        (((unsupported)) ((xobj)) (((xco).xco_consts)))
                          (((xisinstance)) ((xobj)) (((xtypes).xCodeType))).if
                            bogusForceDataize.write ((((xself).xassertIs)) (((xco).xco_filename)) (((xobj).xco_filename)))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xd.write (((unsupported)) ("astring") ("foo@bar.baz.spam") ("afloat") (7283.43) ("anint") ((((unsupported)) (2) (20))) ("ashortlong") (2) ("alist") ((((unsupported)) (".zyx.41"))) ("atuple") (((((unsupported)) (".zyx.41")).mul 10)) ("aboolean") (FALSE) ("aunicode") ("Andrxe8 Previn"))
                xtest_dict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)) (((xself).xd)))
                xtest_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)) ((((xlist)) ((((((xself).xd).xitems)) 0)))))
                xtest_tuple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)) ((((xtuple)) ((((((xself).xd).xkeys)) 0)))))
                xtest_sets.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xconstructor)) ((((unsupported)) ((xset)) ((xfrozenset)))))
                        bogusForceDataize.write ((((xself).xhelper)) ((((xconstructor)) ((((((xself).xd).xkeys)) 0)))))
                xtest_empty_frozenset_singleton.write
                  [xself]
                    memory > xobj2
                    memory > xobj
                    seq > @
                      (((unsupported)) 0)
                        xobj.write (((xfrozenset)) 0)
                        xobj2.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xobj)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xobj2)) ((xobj)))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xtest_bytearray.write
                  [xself]
                    memory > xnew
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)) ("abc"))
                        bogusForceDataize.write ((((xself).xhelper)) ((xb)))
                        xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xnew)))) ((xbytes)))
                xtest_memoryview.write
                  [xself]
                    memory > xnew
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xmemoryview)) ("abc"))
                        bogusForceDataize.write ((((xself).xhelper)) ((xb)))
                        xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xnew)))) ((xbytes)))
                xtest_array.write
                  [xself]
                    memory > xnew
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)) ("B") ("abc"))
                        xnew.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew)) ("abc"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_bug_5888452.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xmarshal).xdumps)) (((((unsupported)) (128)).mul 1000)))
                xtest_patch_873224.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xmarshal).xloads)) ("0"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xmarshal).xloads)) ("f"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xmarshal).xloads)) ((((unsupported)) (((((xmarshal).xdumps)) ((((unsupported)) (2) (65))))) ((((unsupported)) ((1.neg)))))))
                xtest_version_argument.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmarshal).xloads)) (((((xmarshal).xdumps)) (5) (0))))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmarshal).xloads)) (((((xmarshal).xdumps)) (5) (1))))) (5))
                xtest_fuzz.write
                  [xself]
                    memory > xc
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) (256))))
                        seq
                          xc.write (((xbytes)) ((((unsupported)) ((xi)))))
                          (((unsupported)) ((xException)))
                            bogusForceDataize.write ((((xmarshal).xloads)) ((xc)))
                xtest_loads_recursion.write
                  [xself]
                    memory > xcheck
                    memory > xrun_tests
                    seq > @
                      seq
                        xrun_tests.write
                          [xN xcheck]
                            seq > @
                              seq
                                bogusForceDataize.write (((xcheck)) (((")x01".mul (xN)).add "N")))
                                bogusForceDataize.write (((xcheck)) ((("(x01x00x00x00".mul (xN)).add "N")))
                                bogusForceDataize.write (((xcheck)) ((("[x01x00x00x00".mul (xN)).add "N")))
                                bogusForceDataize.write (((xcheck)) (((("{N".mul (xN)).add "N").add ("0".mul (xN)))))
                                bogusForceDataize.write (((xcheck)) (((">x01x00x00x00".mul (xN)).add "N")))
                        bogusForceDataize.write (((xrun_tests)) (100) (((xmarshal).xloads)))
                        xcheck.write
                          [xs]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xloads)) ((xs)))
                        bogusForceDataize.write (((xrun_tests)) ((((unsupported)) (2) (20))) ((xcheck)))
                xtest_recursion_limit.write
                  [xself]
                    memory > xdata
                    memory > xhead
                    memory > xlast
                    memory > xnew_head
                    memory > xMAX_MARSHAL_STACK_DEPTH
                    seq > @
                      seq
                        (((unsupported)) ((xhead)) ((xlast)) ((((unsupported)) 0)))
                        (((xos).xname).eq "nt").if
                          xMAX_MARSHAL_STACK_DEPTH.write 1000
                          xMAX_MARSHAL_STACK_DEPTH.write 2000
                        (((unsupported)) ((xi)) ((((xrange)) (((xMAX_MARSHAL_STACK_DEPTH).sub 2)))))
                          seq
                            bogusForceDataize.write ((((xlast).xappend)) ((((unsupported)) (0))))
                            xlast.write (((unsupported)) ((xlast)) ((1.neg)))
                        xdata.write ((((xmarshal).xdumps)) ((xhead)))
                        xnew_head.write ((((xmarshal).xloads)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xnew_head)))) ((((xlen)) ((xhead)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xnew_head)) (0))))) ((((xlen)) ((((unsupported)) ((xhead)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xnew_head)) ((1.neg)))))) ((((xlen)) ((((unsupported)) ((xhead)) ((1.neg)))))))
                        bogusForceDataize.write ((((xlast).xappend)) ((((unsupported)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xdumps)) ((xhead)))
                xtest_exact_type_match.write
                  [xself]
                    memory > xsubtyp
                    seq > @
                      (((unsupported)) ((xtyp)) ((((unsupported)) ((xint)) ((xfloat)) ((xcomplex)) ((xtuple)) ((xlist)) ((xdict)) ((xset)) ((xfrozenset)))))
                        seq
                          xsubtyp.write (((xtype)) ("subtyp") ((((unsupported)) ((xtyp)))) ((((unsupported)) 0)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xdumps)) ((((xsubtyp)) 0)))
                xtest_large_marshal.write
                  [xself]
                    memory > xsize
                    memory > xtestString
                    seq > @
                      seq
                        xsize.write (((xint)) ((((unsupported)) 0)))
                        xtestString.write ("abc".mul (xsize))
                        bogusForceDataize.write ((((xmarshal).xdumps)) ((xtestString)))
                xtest_invalid_longs.write
                  [xself]
                    memory > xinvalid_string
                    seq > @
                      seq
                        xinvalid_string.write "lx02x00x00x00x00x00x00x00"
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xloads)) ((xinvalid_string)))
                xtest_multiple_dumps_and_loads.write
                  [xself]
                    memory > xpositions
                    memory > xilen
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) ("abc") ("def") (1.0) ((((unsupported)) (2) ("a") ((((unsupported)) ("b") ("c"))))))
                        (((unsupported)) ((xinterleaved)) ((((unsupported)) ("") ("0123"))))
                          seq
                            xilen.write (((xlen)) ((xinterleaved)))
                            xpositions.write (((unsupported)) 0)
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                                  (((unsupported)) ((xd)) ((xdata)))
                                    seq
                                      bogusForceDataize.write ((((xmarshal).xdump)) ((xd)) ((xf)))
                                      (xilen).if
                                        bogusForceDataize.write ((((xf).xwrite)) ((xinterleaved)))
                                      bogusForceDataize.write ((((xpositions).xappend)) (((((xf).xtell)) 0)))
                                (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                                  (((unsupported)) ((((unsupported)) ((xi)) ((xd)))) ((((xenumerate)) ((xdata)))))
                                    seq
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) (((((xmarshal).xload)) ((xf)))))
                                      (xilen).if
                                        bogusForceDataize.write ((((xf).xread)) ((xilen)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpositions)) ((xi)))) (((((xf).xtell)) 0)))
                              bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_loads_reject_unicode_strings.write
                  [xself]
                    memory > xunicode_string
                    seq > @
                      seq
                        xunicode_string.write "T"
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xmarshal).xloads)) ((xunicode_string)))
                xtest_bad_reader.write
                  [xself]
                    memory > xreadinto
                    seq > @
                      seq
                        (((unsupported)) (((xio).xBytesIO)))
                          xreadinto.write
                            [xself xbuf]
                              memory > xn
                              seq > @
                                seq
                                  xn.write ((((((xsuper)) 0).xreadinto)) ((xbuf)))
                                  ((((unsupported)) ((xn)) ("None: is there a None literal in the EO language?")).and ((xn).greater 4)).if
                                    (((unsupported)) ((xn)) ((((unsupported)) (10) (6))))
                                  (((unsupported)) ((xn)))
                        (((unsupported)) ((xvalue)) ((((unsupported)) (1.0) ((((unsupported)) 0)) ("0123456789") ("0123456789"))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xload)) ((((xBadReader)) (((((xmarshal).xdumps)) ((xvalue)))))))
                xtest_eof.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xmarshal).xdumps)) ((((unsupported)) ("hello") ("dolly") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdata)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) (((xmarshal).xloads)) ((((unsupported)) ((xdata)) ((((unsupported)) (0) ((xi)))))))
            xLARGE_SIZE.write (((unsupported)) (2) (31))
            xpointer_size.write ((((xsys).xmaxsize).greater (((unsupported)) 0)).if 8 4)
            (((unsupported)) 0)
              xwrite.write
                [xself xs]
                  seq > @
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) (((xLARGE_SIZE).greater ((xsys).xmaxsize))) ("test cannot run on 32-bit systems"))))
              seq
                xcheck_unmarshallable.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmarshal).xdump)) ((xdata)) ((((xNullWriter)) 0)))
                xtest_bytes.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) (("x".mul (xsize))))
                xtest_str.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) (("x".mul (xsize))))
                xtest_tuple.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul (xsize))))
                xtest_list.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul (xsize))))
                xtest_set.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) ((((xset)) ((((xrange)) ((xsize)))))))
                xtest_frozenset.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) ((((xfrozenset)) ((((xrange)) ((xsize)))))))
                xtest_bytearray.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_unmarshallable)) ((((xbytearray)) ((xsize)))))
            xCollectObjectIDs.write
              [xids xobj]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xid)) ((xobj)))) ((xids))).if
                      (((unsupported)) 0)
                    bogusForceDataize.write ((((xids).xadd)) ((((xid)) ((xobj)))))
                    (((xisinstance)) ((xobj)) ((((unsupported)) ((xlist)) ((xtuple)) ((xset)) ((xfrozenset))))).if
                      (((unsupported)) ((xe)) ((xobj)))
                        bogusForceDataize.write (((xCollectObjectIDs)) ((xids)) ((xe)))
                      (((xisinstance)) ((xobj)) ((xdict))).if
                        (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) (((((xobj).xitems)) 0)))
                          seq
                            bogusForceDataize.write (((xCollectObjectIDs)) ((xids)) ((xk)))
                            bogusForceDataize.write (((xCollectObjectIDs)) ((xids)) ((xv)))
                    (((unsupported)) ((((xlen)) ((xids)))))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xkeys.write (((unsupported)) (123) (1.2345) ("abc") ((((unsupported)) (123) ("abc"))) ((((xfrozenset)) ((((unsupported)) (123) ("abc"))))))
                xhelper3.write
                  [xself xrsample xrecursive xsimple]
                    memory > xn0
                    memory > xs2
                    memory > xn2
                    memory > xs3
                    memory > xn3
                    memory > xsample
                    seq > @
                      (((unsupported)) 0)
                        xsample.write (((unsupported)) ((xrsample)) ((xrsample)))
                        xn0.write (((xCollectObjectIDs)) ((((xset)) 0)) ((xsample)))
                        (((unsupported)) ((xv)) ((((xrange)) (3) ((((xmarshal).xversion).add 1)))))
                          seq
                            xs3.write ((((xmarshal).xdumps)) ((xsample)) ((xv)))
                            xn3.write (((xCollectObjectIDs)) ((((xset)) 0)) (((((xmarshal).xloads)) ((xs3)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xn3)) ((xn0)))
                        ((xrecursive).not).if
                          seq
                            xs2.write ((((xmarshal).xdumps)) ((xsample)) (2))
                            xn2.write (((xCollectObjectIDs)) ((((xset)) 0)) (((((xmarshal).xloads)) ((xs2)))))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((xn2)) ((xn0)))
                            ((xsimple).not).if
                              bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) ((xs2)))) ((((xlen)) ((xs3)))))
                              bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((xlen)) ((xs2)))) ((((xlen)) ((xs3)))))
                xtestInt.write
                  [xself]
                    memory > xintobj
                    seq > @
                      seq
                        xintobj.write 123321
                        bogusForceDataize.write ((((xself).xhelper)) ((xintobj)))
                        (((unsupported)) (((xself).xhelper3)) ((xintobj)) (TRUE))
                xtestFloat.write
                  [xself]
                    memory > xfloatobj
                    seq > @
                      seq
                        xfloatobj.write 1.2345
                        bogusForceDataize.write ((((xself).xhelper)) ((xfloatobj)))
                        bogusForceDataize.write ((((xself).xhelper3)) ((xfloatobj)))
                xtestStr.write
                  [xself]
                    memory > xstrobj
                    seq > @
                      seq
                        xstrobj.write ("abcde".mul 3)
                        bogusForceDataize.write ((((xself).xhelper)) ((xstrobj)))
                        bogusForceDataize.write ((((xself).xhelper3)) ((xstrobj)))
                xtestBytes.write
                  [xself]
                    memory > xbytesobj
                    seq > @
                      seq
                        xbytesobj.write ("abcde".mul 3)
                        bogusForceDataize.write ((((xself).xhelper)) ((xbytesobj)))
                        bogusForceDataize.write ((((xself).xhelper3)) ((xbytesobj)))
                xtestList.write
                  [xself]
                    memory > xlistobj
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xkeys)))
                        seq
                          xlistobj.write (((unsupported)) ((xobj)) ((xobj)))
                          bogusForceDataize.write ((((xself).xhelper)) ((xlistobj)))
                          bogusForceDataize.write ((((xself).xhelper3)) ((xlistobj)))
                xtestTuple.write
                  [xself]
                    memory > xtupleobj
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xkeys)))
                        seq
                          xtupleobj.write (((unsupported)) ((xobj)) ((xobj)))
                          bogusForceDataize.write ((((xself).xhelper)) ((xtupleobj)))
                          bogusForceDataize.write ((((xself).xhelper3)) ((xtupleobj)))
                xtestSet.write
                  [xself]
                    memory > xsetobj
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xkeys)))
                        seq
                          xsetobj.write (((unsupported)) ((((unsupported)) ((xobj)) (1))) ((((unsupported)) ((xobj)) (2))))
                          bogusForceDataize.write ((((xself).xhelper)) ((xsetobj)))
                          bogusForceDataize.write ((((xself).xhelper3)) ((xsetobj)))
                xtestFrozenSet.write
                  [xself]
                    memory > xfrozensetobj
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xkeys)))
                        seq
                          xfrozensetobj.write (((xfrozenset)) ((((unsupported)) ((((unsupported)) ((xobj)) (1))) ((((unsupported)) ((xobj)) (2))))))
                          bogusForceDataize.write ((((xself).xhelper)) ((xfrozensetobj)))
                          bogusForceDataize.write ((((xself).xhelper3)) ((xfrozensetobj)))
                xtestDict.write
                  [xself]
                    memory > xdictobj
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xkeys)))
                        seq
                          xdictobj.write (((unsupported)) ("hello") ((xobj)) ("goodbye") ((xobj)) ((xobj)) ("hello"))
                          bogusForceDataize.write ((((xself).xhelper)) ((xdictobj)))
                          bogusForceDataize.write ((((xself).xhelper3)) ((xdictobj)))
                xtestModule.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((x__file__)) ("rb"))) ((xf)))
                          xcode.write ((((xf).xread)) 0)
                        ((((x__file__).xendswith)) (".py")).if
                          xcode.write (((xcompile)) ((xcode)) ((x__file__)) ("exec"))
                        bogusForceDataize.write ((((xself).xhelper)) ((xcode)))
                        bogusForceDataize.write ((((xself).xhelper3)) ((xcode)))
                xtestRecursion.write
                  [xself]
                    memory > xd
                    memory > xl
                    memory > xobj
                    seq > @
                      seq
                        xobj.write 1.2345
                        xd.write (((unsupported)) ("hello") ((xobj)) ("goodbye") ((xobj)) ((xobj)) ("hello"))
                        (((unsupported)) ((((unsupported)) ((xd)) ("self"))) ((xd)))
                        (((unsupported)) (((xself).xhelper3)) ((xd)) (TRUE))
                        xl.write (((unsupported)) ((xobj)) ((xobj)))
                        bogusForceDataize.write ((((xl).xappend)) ((xl)))
                        (((unsupported)) (((xself).xhelper3)) ((xl)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_test.write
                  [xself xversion]
                    memory > xcode
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((x__file__)) ("rb"))) ((xf)))
                          xcode.write ((((xf).xread)) 0)
                        ((((x__file__).xendswith)) (".py")).if
                          xcode.write (((xcompile)) ((xcode)) ((x__file__)) ("exec"))
                        xdata.write ((((xmarshal).xdumps)) ((xcode)) ((xversion)))
                        bogusForceDataize.write ((((xmarshal).xloads)) ((xdata)))
                xtest0To3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) (0))
                xtest1To3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) (1))
                xtest2To3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) (2))
                xtest3To3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) (3))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)))
              seq
                xstrobj.write "this is an interned string"
                xstrobj.write ((((xsys).xintern)) ((xstrobj)))
                xtestIntern.write
                  [xself]
                    memory > xs
                    memory > xs2
                    seq > @
                      seq
                        xs.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) (((xself).xstrobj)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((xself).xstrobj)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xs)))) ((((xid)) (((xself).xstrobj)))))
                        xs2.write ((((xsys).xintern)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xs2)))) ((((xid)) ((xs)))))
                xtestNoIntern.write
                  [xself]
                    memory > xs
                    memory > xs2
                    seq > @
                      seq
                        xs.write ((((xmarshal).xloads)) (((((xmarshal).xdumps)) (((xself).xstrobj)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((xself).xstrobj)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs)))) ((((xid)) (((xself).xstrobj)))))
                        xs2.write ((((xsys).xintern)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xs2)))) ((((xid)) ((xs)))))
            (((unsupported)) (((xunittest).xTestCase)) ((xHelperMixin)) (((xsupport).xcpython_only)) (((((xunittest).xskipUnless)) ((x_testcapi)) ("requires _testcapi"))))
              seq
                xtest_write_long_to_file.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xv)) ((((xrange)) ((((xmarshal).xversion).add 1)))))
                        seq
                          bogusForceDataize.write ((((x_testcapi).xpymarshal_write_long_to_file)) (305419896) (((xsupport).xTESTFN)) ((xv)))
                          (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                            xdata.write ((((xf).xread)) 0)
                          bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("x78x56x34x12"))
                xtest_write_object_to_file.write
                  [xself]
                    memory > xobj
                    memory > xdata
                    seq > @
                      seq
                        xobj.write (((unsupported)) ("u20ac") ("abc") (123) (45.6) ((7.add (((unsupported)) 0))) (("long line ".mul 1000)))
                        (((unsupported)) ((xv)) ((((xrange)) ((((xmarshal).xversion).add 1)))))
                          seq
                            bogusForceDataize.write ((((x_testcapi).xpymarshal_write_object_to_file)) ((xobj)) (((xsupport).xTESTFN)) ((xv)))
                            (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                              xdata.write ((((xf).xread)) 0)
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xmarshal).xloads)) ((xdata)))) ((xobj)))
                xtest_read_short_from_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("x34x12xxxx"))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xp)))) (((((x_testcapi).xpymarshal_read_short_from_file)) (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) (4660))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) (2))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("x12"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xEOFError)))))
                          bogusForceDataize.write ((((x_testcapi).xpymarshal_read_short_from_file)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_read_long_from_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("x78x56x34x12xxxx"))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xp)))) (((((x_testcapi).xpymarshal_read_long_from_file)) (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) (305419896))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) (4))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("x56x34x12"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xEOFError)))))
                          bogusForceDataize.write ((((x_testcapi).xpymarshal_read_long_from_file)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_read_last_object_from_file.write
                  [xself]
                    memory > xobj
                    memory > xdata
                    seq > @
                      seq
                        xobj.write (((unsupported)) ("u20ac") ("abc") (123) (45.6) ((7.add (((unsupported)) 0))))
                        (((unsupported)) ((xv)) ((((xrange)) ((((xmarshal).xversion).add 1)))))
                          seq
                            xdata.write ((((xmarshal).xdumps)) ((xobj)) ((xv)))
                            (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) (((xdata).add "xxxx")))
                            (((unsupported)) ((((unsupported)) ((xr)) ((xp)))) (((((x_testcapi).xpymarshal_read_last_object_from_file)) (((xsupport).xTESTFN)))))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xobj)))
                            (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ((((unsupported)) ((xdata)) ((((unsupported)) (1))))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xEOFError)))))
                              bogusForceDataize.write ((((x_testcapi).xpymarshal_read_last_object_from_file)) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_read_object_from_file.write
                  [xself]
                    memory > xobj
                    memory > xdata
                    seq > @
                      seq
                        xobj.write (((unsupported)) ("u20ac") ("abc") (123) (45.6) ((7.add (((unsupported)) 0))))
                        (((unsupported)) ((xv)) ((((xrange)) ((((xmarshal).xversion).add 1)))))
                          seq
                            xdata.write ((((xmarshal).xdumps)) ((xobj)) ((xv)))
                            (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) (((xdata).add "xxxx")))
                            (((unsupported)) ((((unsupported)) ((xr)) ((xp)))) (((((x_testcapi).xpymarshal_read_object_from_file)) (((xsupport).xTESTFN)))))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xobj)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((((xlen)) ((xdata)))))
                            (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ((((unsupported)) ((xdata)) ((((unsupported)) (1))))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xEOFError)))))
                              bogusForceDataize.write ((((x_testcapi).xpymarshal_read_object_from_file)) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)