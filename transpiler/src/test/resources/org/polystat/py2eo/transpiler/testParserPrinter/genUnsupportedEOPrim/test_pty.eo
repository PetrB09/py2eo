memory > xslave_name
memory > xmock_stdout_fd
memory > xwrite_to_stdin_fd
memory > xverbose
memory > xprint
memory > xpty
memory > xunittest
memory > xstatus
memory > xlen
memory > x__name__
memory > xmaster_fd
memory > xAttributeError
memory > xfd
memory > ximport_module
memory > xsignal
memory > xerrno
memory > xstr
memory > xio
memory > xfile
memory > xsocket
memory > xpid
memory > xselect
memory > xIndexError
memory > xreap_children
memory > xread_from_stdout_fd
memory > xs
memory > xsys
memory > xOSError
memory > xos
memory > xmock_stdin_fd
memory > xe
[] > test_pty
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xhandle_sighup
        memory > xdebug
        memory > xhandle_sig
        memory > xTEST_STRING_2
        memory > xtearDownModule
        memory > xtest_fork
        memory > xTEST_STRING_1
        memory > xnormalize_output
        memory > xtest_basic
        memory > x_pipe
        memory > xtearDown
        memory > xsetUp
        memory > x_mock_select
        memory > x_readline
        memory > xtest__copy_to_each
        memory > xtest__copy_eof_on_all
        memory > x_socketpair
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            bogusForceDataize.write (((ximport_module)) ("termios"))
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xTEST_STRING_1.write "I wish to buy a fish license.n"
            xTEST_STRING_2.write "For my pet fish, Eric.n"
            (xverbose).if
              xdebug.write
                [xmsg]
                  seq > @
                    bogusForceDataize.write (((xprint)) ((xmsg)))
              xdebug.write
                [xmsg]
                  seq > @
            xnormalize_output.write
              [xdata]
                seq > @
                  seq
                    ((((xdata).xendswith)) ("rrn")).if
                      (((unsupported)) (((((xdata).xreplace)) ("rrn") ("n"))))
                    ((((xdata).xendswith)) ("rn")).if
                      (((unsupported)) (((((xdata).xreplace)) ("rn") ("n"))))
                    (((unsupported)) ((xdata)))
            x_readline.write
              [xfd]
                memory > xreader
                seq > @
                  seq
                    unsupported
                    xreader.write (((unsupported)) (((xio).xFileIO)) ((xfd)) ("rb") (FALSE))
                    (((unsupported)) (((((xreader).xreadline)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xold_sighup
                    memory > xold_alarm
                    seq > @
                      seq
                        xold_alarm.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) (((xself).xhandle_sig)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xold_alarm)))
                        xold_sighup.write ((((xsignal).xsignal)) (((xsignal).xSIGHUP)) (((xself).xhandle_sighup)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGHUP)) ((xold_sighup)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xalarm)) (0))
                        bogusForceDataize.write ((((xsignal).xalarm)) (10))
                xhandle_sig.write
                  [xself xsig xframe]
                    seq > @
                      bogusForceDataize.write ((((xself).xfail)) ("isatty hung"))
                xhandle_sighup.write
                  [xsignum xframe]
                    seq > @
                      (((unsupported)) 0)
                xtest_basic.write
                  [xself]
                    memory > xslave_fd
                    memory > xs1
                    memory > xs2
                    memory > xblocking
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          seq
                            bogusForceDataize.write (((xdebug)) ("Calling master_open()"))
                            (((unsupported)) ((((unsupported)) ((xmaster_fd)) ((xslave_name)))) (((((xpty).xmaster_open)) 0)))
                            bogusForceDataize.write (((xdebug)) (("Got master_fd '%d', slave_name '%s'".mod (((unsupported)) ((xmaster_fd)) ((xslave_name))))))
                            bogusForceDataize.write (((xdebug)) (("Calling slave_open(%r)".mod (((unsupported)) ((xslave_name))))))
                            xslave_fd.write ((((xpty).xslave_open)) ((xslave_name)))
                            bogusForceDataize.write (((xdebug)) (("Got slave_fd '%d'".mod (xslave_fd))))
                          (((unsupported)) (((((xunittest).xSkipTest)) ("Pseudo-terminals (seemingly) not functional."))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xos).xisatty)) ((xslave_fd)))) ("slave_fd is not a tty"))
                        xblocking.write ((((xos).xget_blocking)) ((xmaster_fd)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xset_blocking)) ((xmaster_fd)) (FALSE))
                            (((unsupported)) ((xOSError)))
                              seq
                                xs1.write ((((xos).xread)) ((xmaster_fd)) (1024))
                                bogusForceDataize.write ((((xself).xassertEqual)) ("") ((xs1)))
                              (((xe).xerrno).neq ((xerrno).xEAGAIN)).if
                                (((unsupported)) 0)
                          bogusForceDataize.write ((((xos).xset_blocking)) ((xmaster_fd)) ((xblocking)))
                        bogusForceDataize.write (((xdebug)) ("Writing to slave_fd"))
                        bogusForceDataize.write ((((xos).xwrite)) ((xslave_fd)) ((xTEST_STRING_1)))
                        xs1.write (((x_readline)) ((xmaster_fd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("I wish to buy a fish license.n") ((((xnormalize_output)) ((xs1)))))
                        bogusForceDataize.write (((xdebug)) ("Writing chunked output"))
                        bogusForceDataize.write ((((xos).xwrite)) ((xslave_fd)) ((((unsupported)) ((xTEST_STRING_2)) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xos).xwrite)) ((xslave_fd)) ((((unsupported)) ((xTEST_STRING_2)) ((((unsupported)) (5))))))
                        xs2.write (((x_readline)) ((xmaster_fd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("For my pet fish, Eric.n") ((((xnormalize_output)) ((xs2)))))
                        bogusForceDataize.write ((((xos).xclose)) ((xslave_fd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xmaster_fd)))
                xtest_fork.write
                  [xself]
                    memory > xres
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((xdebug)) ("calling pty.fork()"))
                        (((unsupported)) ((((unsupported)) ((xpid)) ((xmaster_fd)))) (((((xpty).xfork)) 0)))
                        ((xpid).eq ((xpty).xCHILD)).if
                          seq
                            (((((xos).xisatty)) (1)).not).if
                              seq
                                bogusForceDataize.write (((xdebug)) ("Child's fd 1 is not a tty?!"))
                                bogusForceDataize.write ((((xos).x_exit)) (3))
                            bogusForceDataize.write (((xdebug)) ("In child, calling os.setsid()"))
                            (((unsupported)) ((xOSError)) ((xAttributeError)))
                              bogusForceDataize.write ((((xos).xsetsid)) 0)
                              seq
                                bogusForceDataize.write (((xdebug)) ("Good: OSError was raised."))
                              seq
                                bogusForceDataize.write (((xdebug)) ("No setsid() available?"))
                              seq
                                bogusForceDataize.write (((xdebug)) ("An unexpected error was raised."))
                                bogusForceDataize.write ((((xos).x_exit)) (1))
                              seq
                                bogusForceDataize.write (((xdebug)) ("os.setsid() succeeded! (bad!)"))
                                bogusForceDataize.write ((((xos).x_exit)) (2))
                            bogusForceDataize.write ((((xos).x_exit)) (4))
                          seq
                            bogusForceDataize.write (((xdebug)) (("Waiting for child (%d) to finish.".mod (xpid))))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)) ((xOSError)))
                                      xdata.write ((((xos).xread)) ((xmaster_fd)) (80))
                                      (((unsupported)) 0)
                                    ((xdata).not).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)) ((((unsupported)) ((xstr)) (((((xdata).xreplace)) ("rn") ("n"))) ("ascii"))))
                            (((unsupported)) ((((unsupported)) ((xpid)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                            xres.write (((unsupported)) ((xstatus)) (8))
                            bogusForceDataize.write (((xdebug)) (("Child (%d) exited with status %d (%d).".mod (((unsupported)) ((xpid)) ((xres)) ((xstatus))))))
                            ((xres).eq 1).if
                              bogusForceDataize.write ((((xself).xfail)) ("Child raised an unexpected exception in os.setsid()"))
                              ((xres).eq 2).if
                                bogusForceDataize.write ((((xself).xfail)) ("pty.fork() failed to make child a session leader."))
                                ((xres).eq 3).if
                                  bogusForceDataize.write ((((xself).xfail)) ("Child spawned by pty.fork() did not have a tty as stdout"))
                                  ((xres).neq 4).if
                                    bogusForceDataize.write ((((xself).xfail)) ("pty.fork() failed for unknown reasons."))
                        bogusForceDataize.write ((((xos).xclose)) ((xmaster_fd)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xorig_stdin_fileno)) (((xpty).xSTDIN_FILENO)))
                        (((unsupported)) (((xself).xorig_stdout_fileno)) (((xpty).xSTDOUT_FILENO)))
                        (((unsupported)) (((xself).xorig_pty_select)) (((xpty).xselect)))
                        (((unsupported)) (((xself).xfds)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xfiles)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xselect_rfds_lengths)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xselect_rfds_results)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xpty).xSTDIN_FILENO)) (((xself).xorig_stdin_fileno)))
                        (((unsupported)) (((xpty).xSTDOUT_FILENO)) (((xself).xorig_stdout_fileno)))
                        (((unsupported)) (((xpty).xselect)) (((xself).xorig_pty_select)))
                        (((unsupported)) ((xfile)) (((xself).xfiles)))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xfile).xclose)) 0)
                        (((unsupported)) ((xfd)) (((xself).xfds)))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                x_pipe.write
                  [xself]
                    memory > xpipe_fds
                    seq > @
                      seq
                        xpipe_fds.write ((((xos).xpipe)) 0)
                        bogusForceDataize.write (((((xself).xfds).xextend)) ((xpipe_fds)))
                        (((unsupported)) ((xpipe_fds)))
                x_socketpair.write
                  [xself]
                    memory > xsocketpair
                    seq > @
                      seq
                        xsocketpair.write ((((xsocket).xsocketpair)) 0)
                        bogusForceDataize.write (((((xself).xfiles).xextend)) ((xsocketpair)))
                        (((unsupported)) ((xsocketpair)))
                x_mock_select.write
                  [xself xrfds xwfds xxfds]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xselect_rfds_lengths).xpop)) (0))) ((((xlen)) ((xrfds)))))
                        (((unsupported)) ((((unsupported)) ((((((xself).xselect_rfds_results).xpop)) (0))) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                xtest__copy_to_each.write
                  [xself]
                    memory > xsocketpair
                    memory > xrfds
                    memory > xmasters
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xread_from_stdout_fd)) ((xmock_stdout_fd)))) (((((xself).x_pipe)) 0)))
                        (((unsupported)) (((xpty).xSTDOUT_FILENO)) ((xmock_stdout_fd)))
                        (((unsupported)) ((((unsupported)) ((xmock_stdin_fd)) ((xwrite_to_stdin_fd)))) (((((xself).x_pipe)) 0)))
                        (((unsupported)) (((xpty).xSTDIN_FILENO)) ((xmock_stdin_fd)))
                        xsocketpair.write ((((xself).x_socketpair)) 0)
                        xmasters.write (((unsupported)) (((((xs).xfileno)) 0)) ((xs)) ((xsocketpair)))
                        bogusForceDataize.write ((((xos).xwrite)) ((((unsupported)) ((xmasters)) (1))) ("from master"))
                        bogusForceDataize.write ((((xos).xwrite)) ((xwrite_to_stdin_fd)) ("from stdin"))
                        (((unsupported)) (((xpty).xselect)) (((xself).x_mock_select)))
                        bogusForceDataize.write (((((xself).xselect_rfds_lengths).xappend)) (2))
                        bogusForceDataize.write (((((xself).xselect_rfds_results).xappend)) ((((unsupported)) ((xmock_stdin_fd)) ((((unsupported)) ((xmasters)) (0))))))
                        bogusForceDataize.write (((((xself).xselect_rfds_lengths).xappend)) (2))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          bogusForceDataize.write ((((xpty).x_copy)) ((((unsupported)) ((xmasters)) (0))))
                        xrfds.write (((unsupported)) (((((xselect).xselect)) ((((unsupported)) ((xread_from_stdout_fd)) ((((unsupported)) ((xmasters)) (1))))) ((((unsupported)) 0)) ((((unsupported)) 0)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xread_from_stdout_fd)) ((((unsupported)) ((xmasters)) (1))))) ((xrfds)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xread)) ((xread_from_stdout_fd)) (20))) ("from master"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xread)) ((((unsupported)) ((xmasters)) (1))) (20))) ("from stdin"))
                xtest__copy_eof_on_all.write
                  [xself]
                    memory > xsocketpair
                    memory > xmasters
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xread_from_stdout_fd)) ((xmock_stdout_fd)))) (((((xself).x_pipe)) 0)))
                        (((unsupported)) (((xpty).xSTDOUT_FILENO)) ((xmock_stdout_fd)))
                        (((unsupported)) ((((unsupported)) ((xmock_stdin_fd)) ((xwrite_to_stdin_fd)))) (((((xself).x_pipe)) 0)))
                        (((unsupported)) (((xpty).xSTDIN_FILENO)) ((xmock_stdin_fd)))
                        xsocketpair.write ((((xself).x_socketpair)) 0)
                        xmasters.write (((unsupported)) (((((xs).xfileno)) 0)) ((xs)) ((xsocketpair)))
                        bogusForceDataize.write ((((((unsupported)) ((xsocketpair)) (1)).xclose)) 0)
                        bogusForceDataize.write ((((xos).xclose)) ((xwrite_to_stdin_fd)))
                        (((unsupported)) (((xpty).xselect)) (((xself).x_mock_select)))
                        bogusForceDataize.write (((((xself).xselect_rfds_lengths).xappend)) (2))
                        bogusForceDataize.write (((((xself).xselect_rfds_results).xappend)) ((((unsupported)) ((xmock_stdin_fd)) ((((unsupported)) ((xmasters)) (0))))))
                        bogusForceDataize.write (((((xself).xselect_rfds_lengths).xappend)) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          bogusForceDataize.write ((((xpty).x_copy)) ((((unsupported)) ((xmasters)) (0))))
            xtearDownModule.write
              []
                seq > @
                  bogusForceDataize.write (((xreap_children)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)