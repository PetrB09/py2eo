memory > xrun_unittest
memory > xImportError
memory > xlist
memory > xfrozenset
memory > xCodeConstsTest
memory > xexec
memory > xrun_doctest
memory > xhex
memory > x__name__
memory > xinspect
memory > xthreading
memory > xFunctionType
memory > xelt
memory > x_testcapi
memory > xvalue
memory > xeval
memory > xCodeWeakRefTest
memory > xThreadTest
memory > xprint
memory > xtype
memory > xcheck_impl_detail
memory > xVar
memory > xrepr
memory > xsuper
memory > xsys
memory > xcompile
memory > xCoExtra
memory > xbool
memory > xList
memory > xglobals
memory > xbytes
memory > xtuple
memory > xSystemError
memory > xweakref
memory > xgetattr
memory > xv
memory > xCodeTest
memory > xtest_code
memory > xopcode
memory > xsetattr
memory > xunittest
memory > xattr
[] > test_code
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_func
        memory > xisinterned
        memory > xtest_main
        memory > xctypes
        memory > xtest_free_different_thread
        memory > xtest_replace
        memory > xSetExtra
        memory > xtest_newempty
        memory > xGetExtra
        memory > xmyfree
        memory > xtest_interned_string_with_null
        memory > xLAST_FREED
        memory > xtest_closure_injection
        memory > xtest_constructor
        memory > xfind_const
        memory > xFREE_INDEX
        memory > xfreefunc
        memory > xtest_get_set
        memory > xtest_interned_string_default
        memory > xconsts
        memory > xassertIsNotInterned
        memory > xtest_interned_string_in_tuple
        memory > xdump
        memory > xtest_basic
        memory > xFREE_FUNC
        memory > xexternal_getitem
        memory > xtest_interned_string_in_frozenset
        memory > xtest_bad_index
        memory > xtest_clean_stack_on_return
        memory > xtest_get_non_code
        memory > xRequestCodeExtraIndex
        memory > xtest_free_called
        memory > xassertIsInterned
        memory > xpy
        memory > xtest_interned_string
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xctypes.write "None: is there a None literal in the EO language?"
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            xconsts.write
              [xt]
                memory > xr
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xelt)) ((xt)))
                      seq
                        xr.write (((xrepr)) ((xelt)))
                        ((((xr).xstartswith)) ("<code object")).if
                          (((unsupported)) (("<code object %s>".mod ((xelt).xco_name))))
                          (((unsupported)) ((xr)))
            xdump.write
              [xco]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xattr)) ((((unsupported)) ("name") ("argcount") ("posonlyargcount") ("kwonlyargcount") ("names") ("varnames") ("cellvars") ("freevars") ("nlocals") ("flags"))))
                      bogusForceDataize.write (((xprint)) (("%s: %s".mod (((unsupported)) ((xattr)) ((((xgetattr)) ((xco)) (("co_".add (xattr)))))))))
                    bogusForceDataize.write (((xprint)) ("consts:") ((((xtuple)) ((((xconsts)) (((xco).xco_consts)))))))
            xexternal_getitem.write
              [xself xi]
                seq > @
                  (((unsupported)) ("Foreign getitem: {super().__getitem__(i)}"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_newempty.write
                  [xself]
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xco.write ((((x_testcapi).xcode_newempty)) ("filename") ("funcname") (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xco).xco_filename)) ("filename"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xco).xco_name)) ("funcname"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xco).xco_firstlineno)) (15))
                xtest_closure_injection.write
                  [xself]
                    memory > xadd_foreign_method
                    memory > xnew_code
                    memory > xclass_ref
                    memory > xobj
                    memory > xfunction
                    memory > xcreate_closure
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xcreate_closure.write
                          [x__class__]
                            seq > @
                              (((unsupported)) (((((unsupported)) ((x__class__))).x__closure__)))
                        xnew_code.write
                          [xc]
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ((((unsupported)) (((xc).xreplace)) ((((xc).xco_freevars).add (((unsupported)) ("__class__")))))))
                        xadd_foreign_method.write
                          [xcls xname xf]
                            memory > xdefaults
                            memory > xcode
                            memory > xclosure
                            seq > @
                              seq
                                xcode.write (((xnew_code)) (((xf).x__code__)))
                                (((unsupported)) ((((xf).x__closure__).not)))
                                xclosure.write (((xcreate_closure)) ((xcls)))
                                xdefaults.write ((xf).x__defaults__)
                                bogusForceDataize.write (((xsetattr)) ((xcls)) ((xname)) ((((xFunctionType)) ((xcode)) ((((xglobals)) 0)) ((xname)) ((xdefaults)) ((xclosure)))))
                        (((unsupported)) ((xlist)))
                        bogusForceDataize.write (((xadd_foreign_method)) ((xList)) ("__getitem__") ((xexternal_getitem)))
                        xfunction.write ((xList).x__getitem__)
                        xclass_ref.write ((((unsupported)) (((xfunction).x__closure__)) (0)).xcell_contents)
                        bogusForceDataize.write ((((xself).xassertIs)) ((xclass_ref)) ((xList)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xfunction).x__code__).xco_flags).and ((xinspect).xCO_NOFREE))) ((((xhex)) ((((xfunction).x__code__).xco_flags)))))
                        xobj.write (((xList)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xobj)) (0))) ("Foreign getitem: 1"))
                xtest_constructor.write
                  [xself]
                    memory > xCodeType
                    memory > xfunc
                    memory > xco
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                        xco.write ((xfunc).x__code__)
                        xCodeType.write (((xtype)) ((xco)))
                        (((unsupported)) ((((xCodeType)) (((xco).xco_argcount)) (((xco).xco_posonlyargcount)) (((xco).xco_kwonlyargcount)) (((xco).xco_nlocals)) (((xco).xco_stacksize)) (((xco).xco_flags)) (((xco).xco_code)) (((xco).xco_consts)) (((xco).xco_names)) (((xco).xco_varnames)) (((xco).xco_filename)) (((xco).xco_name)) (((xco).xco_firstlineno)) (((xco).xco_lnotab)) (((xco).xco_freevars)) (((xco).xco_cellvars)))))
                xtest_replace.write
                  [xself]
                    memory > xfunc2
                    memory > xfunc
                    memory > xcode
                    memory > xcode2
                    memory > xnew_code
                    seq > @
                      seq
                        xfunc.write
                          []
                            memory > xx
                            seq > @
                              seq
                                xx.write 1
                                (((unsupported)) ((xx)))
                        xcode.write ((xfunc).x__code__)
                        xfunc2.write
                          []
                            memory > xy
                            seq > @
                              seq
                                xy.write 2
                                (((unsupported)) ((xy)))
                        xcode2.write ((xfunc).x__code__)
                        (((unsupported)) ((((unsupported)) ((xattr)) ((xvalue)))) ((((unsupported)) ((((unsupported)) ("co_argcount") (0))) ((((unsupported)) ("co_posonlyargcount") (0))) ((((unsupported)) ("co_kwonlyargcount") (0))) ((((unsupported)) ("co_nlocals") (0))) ((((unsupported)) ("co_stacksize") (0))) ((((unsupported)) ("co_flags") ((((xcode).xco_flags).or ((xinspect).xCO_COROUTINE))))) ((((unsupported)) ("co_firstlineno") (100))) ((((unsupported)) ("co_code") (((xcode2).xco_code)))) ((((unsupported)) ("co_consts") (((xcode2).xco_consts)))) ((((unsupported)) ("co_names") ((((unsupported)) ("myname"))))) ((((unsupported)) ("co_varnames") (((xcode2).xco_varnames)))) ((((unsupported)) ("co_freevars") ((((unsupported)) ("freevar"))))) ((((unsupported)) ("co_cellvars") ((((unsupported)) ("cellvar"))))) ((((unsupported)) ("co_filename") ("newfilename"))) ((((unsupported)) ("co_name") ("newname"))) ((((unsupported)) ("co_lnotab") (((xcode2).xco_lnotab)))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xattr)) ((xvalue)))))
                            seq
                              xnew_code.write ((((xcode).xreplace)) ((((unsupported)) ((((unsupported)) ((xattr)) ((xvalue)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xnew_code)) ((xattr)))) ((xvalue)))
            xisinterned.write
              [xs]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xs)) (((((xsys).xintern)) ((((unsupported)) ((("_".add (xs)).add "_")) ((((unsupported)) (1) ((1.neg)))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfind_const.write
                  [xself xconsts xvalue]
                    seq > @
                      seq
                        (((unsupported)) ((xv)) ((xconsts)))
                          ((xv).eq (xvalue)).if
                            (((unsupported)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xvalue)) ((xconsts)))
                        bogusForceDataize.write ((((xself).xfail)) ("Should never be reached"))
                xassertIsInterned.write
                  [xself xs]
                    seq > @
                      ((((xisinterned)) ((xs))).not).if
                        bogusForceDataize.write ((((xself).xfail)) (("String %r is not interned".mod (((unsupported)) ((xs))))))
                xassertIsNotInterned.write
                  [xself xs]
                    seq > @
                      (((xisinterned)) ((xs))).if
                        bogusForceDataize.write ((((xself).xfail)) (("String %r is interned".mod (((unsupported)) ((xs))))))
                xtest_interned_string.write
                  [xself]
                    memory > xv
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        xco.write (((xcompile)) ("res = \"str_value\"") ("?") ("exec"))
                        xv.write ((((xself).xfind_const)) (((xco).xco_consts)) ("str_value"))
                        bogusForceDataize.write ((((xself).xassertIsInterned)) ((xv)))
                xtest_interned_string_in_tuple.write
                  [xself]
                    memory > xv
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        xco.write (((xcompile)) ("res = (\"str_value\",)") ("?") ("exec"))
                        xv.write ((((xself).xfind_const)) (((xco).xco_consts)) ((((unsupported)) ("str_value"))))
                        bogusForceDataize.write ((((xself).xassertIsInterned)) ((((unsupported)) ((xv)) (0))))
                xtest_interned_string_in_frozenset.write
                  [xself]
                    memory > xv
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        xco.write (((xcompile)) ("res = a in {\"str_value\"}") ("?") ("exec"))
                        xv.write ((((xself).xfind_const)) (((xco).xco_consts)) ((((xfrozenset)) ((((unsupported)) ("str_value"))))))
                        bogusForceDataize.write ((((xself).xassertIsInterned)) ((((unsupported)) ((((xtuple)) ((xv)))) (0))))
                xtest_interned_string_default.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertIsInterned)) ((((xf)) 0)))
                xtest_interned_string_with_null.write
                  [xself]
                    memory > xv
                    memory > xco
                    seq > @
                      (((unsupported)) 0)
                        xco.write (((xcompile)) ("res = \"str0value!\"") ("?") ("exec"))
                        xv.write ((((xself).xfind_const)) (((xco).xco_consts)) ("str0value!"))
                        bogusForceDataize.write ((((xself).xassertIsNotInterned)) ((xv)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_basic.write
                [xself]
                  memory > xcallback
                  memory > xnamespace
                  memory > xf
                  memory > xcoderef
                  seq > @
                    seq
                      xnamespace.write (((unsupported)) 0)
                      bogusForceDataize.write (((xexec)) ("def f(): pass") ((((xglobals)) 0)) ((xnamespace)))
                      xf.write (((unsupported)) ((xnamespace)) ("f"))
                      (((unsupported)) ((((unsupported)) ((xnamespace)))))
                      (((unsupported)) (((xself).xcalled)) (FALSE))
                      xcallback.write
                        [xcode]
                          seq > @
                            (((unsupported)) (((xself).xcalled)) (TRUE))
                      xcoderef.write ((((xweakref).xref)) (((xf).x__code__)) ((xcallback)))
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xbool)) ((((xcoderef)) 0)))))
                      (((unsupported)) ((((unsupported)) ((xf)))))
                      bogusForceDataize.write ((((xself).xassertFalse)) ((((xbool)) ((((xcoderef)) 0)))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((xself).xcalled)))
            ((((unsupported)) ((xcheck_impl_detail)) (TRUE)).and (((unsupported)) ((xctypes)) ("None: is there a None literal in the EO language?"))).if
              seq
                xpy.write ((xctypes).xpythonapi)
                xfreefunc.write ((((xctypes).xCFUNCTYPE)) ("None: is there a None literal in the EO language?") (((xctypes).xc_voidp)))
                xRequestCodeExtraIndex.write ((xpy).x_PyEval_RequestCodeExtraIndex)
                (((unsupported)) (((xRequestCodeExtraIndex).xargtypes)) ((((unsupported)) ((xfreefunc)))))
                (((unsupported)) (((xRequestCodeExtraIndex).xrestype)) (((xctypes).xc_ssize_t)))
                xSetExtra.write ((xpy).x_PyCode_SetExtra)
                (((unsupported)) (((xSetExtra).xargtypes)) ((((unsupported)) (((xctypes).xpy_object)) (((xctypes).xc_ssize_t)) (((xctypes).xc_voidp)))))
                (((unsupported)) (((xSetExtra).xrestype)) (((xctypes).xc_int)))
                xGetExtra.write ((xpy).x_PyCode_GetExtra)
                (((unsupported)) (((xGetExtra).xargtypes)) ((((unsupported)) (((xctypes).xpy_object)) (((xctypes).xc_ssize_t)) (((((xctypes).xPOINTER)) (((xctypes).xc_voidp)))))))
                (((unsupported)) (((xGetExtra).xrestype)) (((xctypes).xc_int)))
                xLAST_FREED.write "None: is there a None literal in the EO language?"
                xmyfree.write
                  [xptr]
                    memory > xLAST_FREED
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xLAST_FREED.write (xptr)
                xFREE_FUNC.write (((xfreefunc)) ((xmyfree)))
                xFREE_INDEX.write (((xRequestCodeExtraIndex)) ((xFREE_FUNC)))
                (((unsupported)) (((xunittest).xTestCase)))
                  seq
                    xget_func.write
                      [xself]
                        seq > @
                          (((unsupported)) ((((xeval)) ("lambda:42"))))
                    xtest_get_non_code.write
                      [xself]
                        memory > xf
                        seq > @
                          seq
                            xf.write ((((xself).xget_func)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xSystemError)) ((xSetExtra)) (42) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (100))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xSystemError)) ((xGetExtra)) (42) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (100))))
                    xtest_bad_index.write
                      [xself]
                        memory > xf
                        seq > @
                          seq
                            xf.write ((((xself).xget_func)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xSystemError)) ((xSetExtra)) (((xf).x__code__)) (((xFREE_INDEX).add 100)) (((((xctypes).xc_voidp)) (100))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xGetExtra)) (((xf).x__code__)) (((xFREE_INDEX).add 100)) (((((xctypes).xc_voidp)) (100))))) (0))
                    xtest_free_called.write
                      [xself]
                        memory > xf
                        seq > @
                          seq
                            xf.write ((((xself).xget_func)) 0)
                            bogusForceDataize.write (((xSetExtra)) (((xf).x__code__)) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (100))))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xLAST_FREED)) (100))
                    xtest_get_set.write
                      [xself]
                        memory > xextra
                        memory > xf
                        seq > @
                          seq
                            xf.write ((((xself).xget_func)) 0)
                            xextra.write ((((xctypes).xc_voidp)) 0)
                            bogusForceDataize.write (((xSetExtra)) (((xf).x__code__)) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (200))))
                            bogusForceDataize.write (((xSetExtra)) (((xf).x__code__)) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (300))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xLAST_FREED)) (200))
                            xextra.write ((((xctypes).xc_voidp)) 0)
                            bogusForceDataize.write (((xGetExtra)) (((xf).x__code__)) ((xFREE_INDEX)) ((xextra)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xextra).xvalue)) (300))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                    xtest_free_different_thread.write
                      [xself]
                        memory > xtt
                        memory > x__init__
                        memory > xrun
                        memory > xf
                        seq > @
                          seq
                            xf.write ((((xself).xget_func)) 0)
                            (((unsupported)) (((xthreading).xThread)))
                              seq
                                x__init__.write
                                  [xself xf xtest]
                                    seq > @
                                      seq
                                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                                        (((unsupported)) (((xself).xf)) ((xf)))
                                        (((unsupported)) (((xself).xtest)) ((xtest)))
                                xrun.write
                                  [xself]
                                    seq > @
                                      seq
                                        (((unsupported)) ((((unsupported)) (((xself).xf)))))
                                        bogusForceDataize.write (((((xself).xtest).xassertEqual)) ((xLAST_FREED)) (500))
                            bogusForceDataize.write (((xSetExtra)) (((xf).x__code__)) ((xFREE_INDEX)) (((((xctypes).xc_voidp)) (500))))
                            xtt.write (((xThreadTest)) ((xf)) ((xself)))
                            (((unsupported)) ((((unsupported)) ((xf)))))
                            bogusForceDataize.write ((((xtt).xstart)) 0)
                            bogusForceDataize.write ((((xtt).xjoin)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xLAST_FREED)) (500))
                    xtest_clean_stack_on_return.write
                      [xself]
                        memory > xthe_object
                        memory > xc
                        memory > xbytecode
                        memory > xvar
                        memory > xf
                        memory > xcode
                        memory > xnew_function
                        memory > xct
                        seq > @
                          (((unsupported)) 0)
                            xf.write
                              [xx]
                                seq > @
                                  (((unsupported)) ((xx)))
                            xcode.write ((xf).x__code__)
                            xct.write (((xtype)) (((xf).x__code__)))
                            xbytecode.write (((xlist)) (((xcode).xco_code)))
                            bogusForceDataize.write ((((xbytecode).xinsert)) ((2.neg)) ((((unsupported)) (((xopcode).xopmap)) ("LOAD_FAST"))))
                            bogusForceDataize.write ((((xbytecode).xinsert)) ((2.neg)) (0))
                            xc.write (((xct)) (((xcode).xco_argcount)) (((xcode).xco_posonlyargcount)) (((xcode).xco_kwonlyargcount)) (((xcode).xco_nlocals)) ((((xcode).xco_stacksize).add 1)) (((xcode).xco_flags)) ((((xbytes)) ((xbytecode)))) (((xcode).xco_consts)) (((xcode).xco_names)) (((xcode).xco_varnames)) (((xcode).xco_filename)) (((xcode).xco_name)) (((xcode).xco_firstlineno)) (((xcode).xco_lnotab)) (((xcode).xco_freevars)) (((xcode).xco_cellvars)))
                            xnew_function.write (((((xtype)) ((xf)))) ((xc)) (((xf).x__globals__)) ("nf") (((xf).x__defaults__)) (((xf).x__closure__)))
                            (((unsupported)) 0)
                            xthe_object.write (((xVar)) 0)
                            xvar.write ((((xweakref).xref)) ((xthe_object)))
                            bogusForceDataize.write (((xnew_function)) ((xthe_object)))
                            (((unsupported)) ((((unsupported)) ((xthe_object)))))
                            (((unsupported)) ((((unsupported)) ((((xvar)) 0)) ("None: is there a None literal in the EO language?"))))
            xtest_main.write
              [xverbose]
                memory > xtests
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    bogusForceDataize.write (((xrun_doctest)) ((xtest_code)) ((xverbose)))
                    xtests.write (((unsupported)) ((xCodeTest)) ((xCodeConstsTest)) ((xCodeWeakRefTest)))
                    ((((unsupported)) ((xcheck_impl_detail)) (TRUE)).and (((unsupported)) ((xctypes)) ("None: is there a None literal in the EO language?"))).if
                      bogusForceDataize.write ((((xtests).xappend)) ((xCoExtra)))
                    bogusForceDataize.write (((xrun_unittest)) ((((unsupported)) ((xtests)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)