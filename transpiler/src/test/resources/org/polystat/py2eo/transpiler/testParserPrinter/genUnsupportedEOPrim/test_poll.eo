memory > xthreading
memory > xrun_unittest
memory > xUINT_MAX
memory > xValueError
memory > xNope
memory > xrange
memory > xselect
memory > xKeyError
memory > xFD
memory > xunittest
memory > xAlmost
memory > xlen
memory > xflags
memory > xAttributeError
memory > xfd
memory > xRuntimeError
memory > xmode
memory > xPollTests
memory > xINT_MAX
memory > xtout
memory > xrandom
memory > xopen
memory > xf
memory > xw
memory > xtime
memory > xOverflowError
memory > xr
memory > xUSHRT_MAX
memory > xtimeout_ms
memory > xi
memory > xsubprocess
memory > xTESTFN
memory > xos
memory > xTypeError
memory > x__name__
[] > test_poll
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_poll_blocks_with_negative_ms
        memory > xtest_poll1
        memory > xtest_poll_unit_tests
        memory > xtest_main
        memory > xfind_ready_matching
        memory > xtest_poll_c_limits
        memory > xtest_poll3
        memory > xtest_threaded_poll
        memory > xtest_poll2
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xAttributeError)))
              unsupported
              (((unsupported)) (((((xunittest).xSkipTest)) ("select.poll not defined"))))
            xfind_ready_matching.write
              [xready xflag]
                memory > xmatch
                seq > @
                  seq
                    xmatch.write (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xfd)) ((xmode)))) ((xready)))
                      ((xmode).and (xflag)).if
                        bogusForceDataize.write ((((xmatch).xappend)) ((xfd)))
                    (((unsupported)) ((xmatch)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_poll1.write
                  [xself]
                    memory > xready_writers
                    memory > xwr
                    memory > xready_readers
                    memory > xready
                    memory > xbuf
                    memory > xbufs
                    memory > xrd
                    memory > xMSG
                    memory > xw2r
                    memory > xMSG_LEN
                    memory > xp
                    memory > xNUM_PIPES
                    memory > xreaders
                    memory > xr2w
                    memory > xwriters
                    seq > @
                      seq
                        xp.write ((((xselect).xpoll)) 0)
                        xNUM_PIPES.write 12
                        xMSG.write " This is a test."
                        xMSG_LEN.write (((xlen)) ((xMSG)))
                        xreaders.write (((unsupported)) 0)
                        xwriters.write (((unsupported)) 0)
                        xr2w.write (((unsupported)) 0)
                        xw2r.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) ((xNUM_PIPES)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xos).xpipe)) 0)))
                            bogusForceDataize.write ((((xp).xregister)) ((xrd)))
                            bogusForceDataize.write ((((xp).xmodify)) ((xrd)) (((xselect).xPOLLIN)))
                            bogusForceDataize.write ((((xp).xregister)) ((xwr)) (((xselect).xPOLLOUT)))
                            bogusForceDataize.write ((((xreaders).xappend)) ((xrd)))
                            bogusForceDataize.write ((((xwriters).xappend)) ((xwr)))
                            (((unsupported)) ((((unsupported)) ((xr2w)) ((xrd)))) ((xwr)))
                            (((unsupported)) ((((unsupported)) ((xw2r)) ((xwr)))) ((xrd)))
                        xbufs.write (((unsupported)) 0)
                        while.
                          (xwriters)
                          [unused]
                            seq > @
                              seq
                                xready.write ((((xp).xpoll)) 0)
                                xready_writers.write (((xfind_ready_matching)) ((xready)) (((xselect).xPOLLOUT)))
                                ((xready_writers).not).if
                                  (((unsupported)) ((((xRuntimeError)) ("no pipes ready for writing"))))
                                xwr.write ((((xrandom).xchoice)) ((xready_writers)))
                                bogusForceDataize.write ((((xos).xwrite)) ((xwr)) ((xMSG)))
                                xready.write ((((xp).xpoll)) 0)
                                xready_readers.write (((xfind_ready_matching)) ((xready)) (((xselect).xPOLLIN)))
                                ((xready_readers).not).if
                                  (((unsupported)) ((((xRuntimeError)) ("no pipes ready for reading"))))
                                xrd.write ((((xrandom).xchoice)) ((xready_readers)))
                                xbuf.write ((((xos).xread)) ((xrd)) ((xMSG_LEN)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xbuf)))) ((xMSG_LEN)))
                                bogusForceDataize.write ((((xbufs).xappend)) ((xbuf)))
                                seq
                                  bogusForceDataize.write ((((xos).xclose)) ((((unsupported)) ((xr2w)) ((xrd)))))
                                  bogusForceDataize.write ((((xos).xclose)) ((xrd)))
                                bogusForceDataize.write ((((xp).xunregister)) ((((unsupported)) ((xr2w)) ((xrd)))))
                                bogusForceDataize.write ((((xp).xunregister)) ((xrd)))
                                bogusForceDataize.write ((((xwriters).xremove)) ((((unsupported)) ((xr2w)) ((xrd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbufs)) (((((unsupported)) ((xMSG))).mul (xNUM_PIPES))))
                xtest_poll_unit_tests.write
                  [xself]
                    memory > xfileno
                    memory > xfd
                    memory > xp
                    memory > xr
                    memory > xpollster
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xFD)) ((xw)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xos).xclose)) ((xFD)))
                        bogusForceDataize.write ((((xos).xclose)) ((xw)))
                        xp.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xp).xregister)) ((xFD)))
                        xr.write ((((xp).xpoll)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xr)) (0))) ((((unsupported)) ((xFD)) (((xselect).xPOLLNVAL)))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("w"))) ((xf)))
                          seq
                            xfd.write ((((xf).xfileno)) 0)
                            xp.write ((((xselect).xpoll)) 0)
                            bogusForceDataize.write ((((xp).xregister)) ((xf)))
                            xr.write ((((xp).xpoll)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xr)) (0))) (0))) ((xfd)))
                        xr.write ((((xp).xpoll)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xr)) (0))) ((((unsupported)) ((xfd)) (((xselect).xPOLLNVAL)))))
                        bogusForceDataize.write ((((xos).xunlink)) ((xTESTFN)))
                        xp.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xp).xregister)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xp).xunregister)) ((xp)))
                        xp.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xp).xunregister)) (3))
                        xpollster.write ((((xselect).xpoll)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          xfileno.write
                            [xself]
                              seq > @
                                (((unsupported)) ("fileno"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpollster).xregister)) ((((xNope)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpollster).xregister)) ((((xAlmost)) 0)) (0))
                xtest_poll2.write
                  [xself]
                    memory > xfdlist
                    memory > xp
                    memory > xcmd
                    memory > xpollster
                    memory > xproc
                    memory > xline
                    seq > @
                      seq
                        xcmd.write "for i in 0 1 2 3 4 5 6 7 8 9; do echo testing...; sleep 1; done"
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((xcmd)) (TRUE) (((xsubprocess).xPIPE)) (0))
                        bogusForceDataize.write ((((xproc).x__enter__)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xproc).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xp.write ((xproc).xstdout)
                        xpollster.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xpollster).xregister)) ((xp)) (((xselect).xPOLLIN)))
                        (((unsupported)) ((xtout)) (((((unsupported)) (0) (1000) (2000) (4000) (8000) (16000)).add ((((unsupported)) ((1.neg))).mul 10))))
                          seq
                            xfdlist.write ((((xpollster).xpoll)) ((xtout)))
                            ((xfdlist).eq (((unsupported)) 0)).if
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xflags)))) ((((unsupported)) ((xfdlist)) (0))))
                            ((xflags).and ((xselect).xPOLLHUP)).if
                              seq
                                xline.write ((((xp).xreadline)) 0)
                                ((xline).neq "").if
                                  bogusForceDataize.write ((((xself).xfail)) ("error: pipe seems to be closed, but still returns data"))
                                (((unsupported)) 0)
                              ((xflags).and ((xselect).xPOLLIN)).if
                                seq
                                  xline.write ((((xp).xreadline)) 0)
                                  ((xline).not).if
                                    (((unsupported)) 0)
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) ("testing...n"))
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xfail)) (("Unexpected return value from select.poll: %s".mod (xfdlist))))
                xtest_poll3.write
                  [xself]
                    memory > xx
                    memory > xpollster
                    seq > @
                      seq
                        xpollster.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xpollster).xregister)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xpoll)) ((((unsupported)) (1) (64))))
                        xx.write (2.add 3)
                        ((xx).neq 5).if
                          bogusForceDataize.write ((((xself).xfail)) ("Overflow must have occurred"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xpollster).xregister)) (0) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xregister)) (0) ((((unsupported)) (1) (64))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xpollster).xmodify)) (1) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xmodify)) (1) ((((unsupported)) (1) (64))))
                xtest_poll_c_limits.write
                  [xself]
                    memory > xpollster
                    seq > @
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        xpollster.write ((((xselect).xpoll)) 0)
                        bogusForceDataize.write ((((xpollster).xregister)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xregister)) (0) (((xUSHRT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xmodify)) (1) (((xUSHRT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xpoll)) (((xINT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xpollster).xpoll)) (((xUINT_MAX).add 1)))
                xtest_threaded_poll.write
                  [xself]
                    memory > xt
                    memory > xrfds
                    memory > xpollster
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xw)))
                        xrfds.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          seq
                            xfd.write ((((xos).xdup)) ((xr)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                            bogusForceDataize.write ((((xrfds).xappend)) ((xfd)))
                        xpollster.write ((((xselect).xpoll)) 0)
                        (((unsupported)) ((xfd)) ((xrfds)))
                          bogusForceDataize.write ((((xpollster).xregister)) ((xfd)) (((xselect).xPOLLIN)))
                        xt.write (((unsupported)) (((xthreading).xThread)) (((xpollster).xpoll)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xtime).xsleep)) (0.5))
                            (((unsupported)) ((xfd)) ((xrfds)))
                              bogusForceDataize.write ((((xpollster).xunregister)) ((xfd)))
                            bogusForceDataize.write ((((xpollster).xregister)) ((xw)) (((xselect).xPOLLOUT)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xpollster).xpoll)))
                          seq
                            bogusForceDataize.write ((((xos).xwrite)) ((xw)) ("spam"))
                            bogusForceDataize.write ((((xt).xjoin)) 0)
                xtest_poll_blocks_with_negative_ms.write
                  [xself]
                    memory > xpoll_thread
                    memory > xpollster
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xtimeout_ms)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((1000.neg)) ((1.neg)) ((1.0.neg)) ((0.1.neg)) (((((unsupported)) 0).neg)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                            xpollster.write ((((xselect).xpoll)) 0)
                            bogusForceDataize.write ((((xpollster).xregister)) ((xr)) (((xselect).xPOLLIN)))
                            xpoll_thread.write (((unsupported)) (((xthreading).xThread)) (((xpollster).xpoll)) ((((unsupported)) ((xtimeout_ms)))))
                            bogusForceDataize.write ((((xpoll_thread).xstart)) 0)
                            (((unsupported)) (((xpoll_thread).xjoin)) (0.1))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xpoll_thread).xis_alive)) 0)))
                            bogusForceDataize.write ((((xos).xwrite)) ((xw)) ("spam"))
                            bogusForceDataize.write ((((xpoll_thread).xjoin)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xpoll_thread).xis_alive)) 0)))
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write (((xrun_unittest)) ((xPollTests)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)