memory > xmf
memory > xstep
memory > xsocket
memory > xstart
memory > xmax
memory > xsys
memory > xexc
memory > xoffset
memory > xkwargs
memory > xlen
memory > xcount
memory > xlist
memory > xValueError
memory > ximport_module
memory > xstr
memory > xrequires
memory > xdest
memory > xrange
memory > xsize
memory > xfinish
memory > xb
memory > xstop
memory > xIndexError
memory > xbytearray
memory > x_2G
memory > x_4G
memory > xopen
memory > xreversed
memory > xtype
memory > xf
memory > xre
memory > xException
memory > xOverflowError
memory > xx
memory > xend
memory > xi
memory > xbytes
memory > xm
memory > xgc_collect
memory > xsrc
memory > xunlink
memory > xargs
memory > xOSError
memory > xitertools
memory > xTESTFN
memory > xos
memory > xSystemError
memory > xweakref
memory > xgetattr
memory > xanon_mmap
memory > xunittest
memory > xsource
memory > xfp
memory > xTypeError
memory > x__name__
[] > test_mmap
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_large_offset
        memory > xtest_weakref
        memory > xtest_read_invalid_arg
        memory > xtest_access_parameter
        memory > xtest_move
        memory > x_test_around_boundary
        memory > xtest_invalid_descriptor
        memory > xtest_tagname
        memory > xtest_non_ascii_byte
        memory > xtest_basic
        memory > xtest_extended_getslice
        memory > xtest_offset
        memory > xtest_anonymous
        memory > xtest_context_manager_exception
        memory > xtearDown
        memory > xtest_empty_file
        memory > xtest_large_filesize
        memory > xtest_write_returning_the_number_of_bytes_written
        memory > xtest_around_2GB
        memory > xtest_io_methods
        memory > x_make_test_file
        memory > xtest_read_all
        memory > xtest_length_0_offset
        memory > xtest_crasher_on_windows
        memory > xtest_subclass
        memory > xtest_double_close
        memory > xtest_prot_readonly
        memory > xtest_rfind
        memory > xtest_find_end
        memory > xtest_tougher_find
        memory > xtest_error
        memory > xsetUp
        memory > xtest_length_0_large_offset
        memory > xtest_bad_file_desc
        memory > xtest_around_4GB
        memory > xtest_extended_set_del_slice
        memory > xtest_madvise
        memory > xtest_context_manager
        memory > xtest_entire_file
        memory > xPAGESIZE
        memory > xtest_sizeof
        memory > xmake_mmap_file
        memory > xtest_concat_repeat_exception
        memory > xtest_flush_return_value
        memory > xmmap
        memory > xtest_resize_past_pos
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xmmap.write (((ximport_module)) ("mmap"))
            xPAGESIZE.write ((xmmap).xPAGESIZE)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((((xos).xpath).xexists)) ((xTESTFN))).if
                        bogusForceDataize.write ((((xos).xunlink)) ((xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xos).xunlink)) ((xTESTFN)))
                xtest_basic.write
                  [xself]
                    memory > xtp
                    memory > xlength
                    memory > xf
                    memory > xm
                    memory > xmatch
                    seq > @
                      seq
                        xf.write (((xopen)) ((xTESTFN)) ("bw+"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)) (("0".mul (xPAGESIZE))))
                            bogusForceDataize.write ((((xf).xwrite)) ("foo"))
                            bogusForceDataize.write ((((xf).xwrite)) (("0".mul ((xPAGESIZE).sub 3))))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((2.mul (xPAGESIZE))))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                        xtp.write (((xstr)) ((((xtype)) ((xm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("foo"))) ((xPAGESIZE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xm)))) ((2.mul (xPAGESIZE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) (0) (3))))) ("000"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).x__getitem__)) ((((xlen)) ((xm)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).x__setitem__)) ((((xlen)) ((xm)))) ("0"))
                        (((unsupported)) ((((unsupported)) ((xm)) (0))) ((((unsupported)) ("3") (0))))
                        (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) (((xPAGESIZE).add 3)) ((((xPAGESIZE).add 3).add 3)))))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (0))) ((((unsupported)) ("3") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) (0) (3))))) ("300"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) (((xPAGESIZE).sub 1)) (((xPAGESIZE).add 7)))))) ("0foobar0"))
                        bogusForceDataize.write ((((xm).xflush)) 0)
                        xmatch.write ((((xre).xsearch)) ("[A-Za-z]+") ((xm)))
                        (((unsupported)) ((xmatch)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xfail)) ("regex match on mmap failed!"))
                          seq
                            (((unsupported)) ((((unsupported)) ((xstart)) ((xend)))) (((((xmatch).xspan)) (0))))
                            xlength.write ((xend).sub (xstart))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xstart)) ((xPAGESIZE)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xend)) (((xPAGESIZE).add 6)))
                        bogusForceDataize.write ((((xm).xseek)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (0))
                        bogusForceDataize.write ((((xm).xseek)) (42) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (42))
                        bogusForceDataize.write ((((xm).xseek)) (0) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) ((((xlen)) ((xm)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xseek)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xseek)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xseek)) ((((((xlen)) ((xm))).neg).sub 1)) (2))
                        (((unsupported)) ((xSystemError)))
                          bogusForceDataize.write ((((xm).xresize)) (512))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xm)))) (512))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xseek)) (513) (0))
                            xf.write (((xopen)) ((xTESTFN)) ("rb"))
                            (((unsupported)) 0)
                              seq
                                bogusForceDataize.write ((((xf).xseek)) (0) (2))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (512))
                              bogusForceDataize.write ((((xf).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xsize)) 0)) (512))
                        bogusForceDataize.write ((((xm).xclose)) 0)
                xtest_access_parameter.write
                  [xself]
                    memory > xstuff
                    memory > xm
                    memory > xprot
                    memory > xmapsize
                    seq > @
                      seq
                        xmapsize.write 10
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) (("a".mul (xmapsize))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (((xmmap).xACCESS_READ)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("a".mul (xmapsize))) ("Readonly memory map data incorrect."))
                            (((unsupported)) ((xTypeError)))
                              (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("b".mul (xmapsize))))
                              bogusForceDataize.write ((((xself).xfail)) ("Able to write to readonly memory map"))
                            (((unsupported)) ((xTypeError)))
                              (((unsupported)) ((((unsupported)) ((xm)) (0))) ("b"))
                              bogusForceDataize.write ((((xself).xfail)) ("Able to write to readonly memory map"))
                            (((unsupported)) ((xTypeError)))
                              seq
                                bogusForceDataize.write ((((xm).xseek)) (0) (0))
                                bogusForceDataize.write ((((xm).xwrite)) ("abc"))
                              bogusForceDataize.write ((((xself).xfail)) ("Able to write to readonly memory map"))
                            (((unsupported)) ((xTypeError)))
                              seq
                                bogusForceDataize.write ((((xm).xseek)) (0) (0))
                                bogusForceDataize.write ((((xm).xwrite_byte)) ("d"))
                              bogusForceDataize.write ((((xself).xfail)) ("Able to write to readonly memory map"))
                            (((unsupported)) ((xSystemError)) ((xTypeError)))
                              bogusForceDataize.write ((((xm).xresize)) ((2.mul (xmapsize))))
                              bogusForceDataize.write ((((xself).xfail)) ("Able to resize readonly memory map"))
                            (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xfp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xread)) 0)) (("a".mul (xmapsize))) ("Readonly memory map data file was modified"))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                          seq
                            (((unsupported)) ((xValueError)))
                              xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) (((xmapsize).add 1)))
                              (((((xsys).xplatform).xstartswith)) ("win")).if
                                bogusForceDataize.write ((((xself).xfail)) ("Opening mmap with size+1 should work on Windows."))
                              seq
                                ((((((xsys).xplatform).xstartswith)) ("win")).not).if
                                  bogusForceDataize.write ((((xself).xfail)) ("Opening mmap with size+1 should raise ValueError."))
                                bogusForceDataize.write ((((xm).xclose)) 0)
                            (((((xsys).xplatform).xstartswith)) ("win")).if
                              (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                                bogusForceDataize.write ((((xf).xtruncate)) ((xmapsize)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                          seq
                            xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (((xmmap).xACCESS_WRITE)))
                            (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("c".mul (xmapsize))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("c".mul (xmapsize))) ("Write-through memory map memory not updated properly."))
                            bogusForceDataize.write ((((xm).xflush)) 0)
                            bogusForceDataize.write ((((xm).xclose)) 0)
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          xstuff.write ((((xf).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstuff)) (("c".mul (xmapsize))) ("Write-through memory map data file not updated properly."))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                          seq
                            xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (((xmmap).xACCESS_COPY)))
                            (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("d".mul (xmapsize))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) (("d".mul (xmapsize))) ("Copy-on-write memory map data not written correctly."))
                            bogusForceDataize.write ((((xm).xflush)) 0)
                            (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xfp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xread)) 0)) (("c".mul (xmapsize))) ("Copy-on-write test data file should not be modified."))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xresize)) ((2.mul (xmapsize))))
                            bogusForceDataize.write ((((xm).xclose)) 0)
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                          (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (4))
                        (((xos).xname).eq "posix").if
                          seq
                            (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                              (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (((xmmap).xMAP_PRIVATE)) (((xmmap).xPROT_READ)) (((xmmap).xACCESS_WRITE)))
                            xprot.write (((xmmap).xPROT_READ).or (((xgetattr)) ((xmmap)) ("PROT_EXEC") (0)))
                            (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                              seq
                                xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) ((xprot)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xwrite)) ("abcdef"))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xwrite_byte)) (0))
                                bogusForceDataize.write ((((xm).xclose)) 0)
                xtest_bad_file_desc.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xmmap).xmmap)) ((2.neg)) (4096))
                xtest_tougher_find.write
                  [xself]
                    memory > xn
                    memory > xslice
                    memory > xm
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          seq
                            xdata.write "aabaacx00deefx00x00aax00"
                            xn.write (((xlen)) ((xdata)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xn)))
                        (((unsupported)) ((xstart)) ((((xrange)) (((xn).add 1)))))
                          (((unsupported)) ((xfinish)) ((((xrange)) ((xstart)) (((xn).add 1)))))
                            seq
                              xslice.write (((unsupported)) ((xdata)) ((((unsupported)) ((xstart)) ((xfinish)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ((xslice)))) (((((xdata).xfind)) ((xslice)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) (((xslice).add "x")))) ((1.neg)))
                        bogusForceDataize.write ((((xm).xclose)) 0)
                xtest_find_end.write
                  [xself]
                    memory > xn
                    memory > xm
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          seq
                            xdata.write "one two ones"
                            xn.write (((xlen)) ((xdata)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("one"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("ones"))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("one") (0) ((1.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("one") (1))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("one") (1) ((1.neg)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ("one") (1) ((2.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xfind)) ((((xbytearray)) ("one"))))) (0))
                xtest_rfind.write
                  [xself]
                    memory > xn
                    memory > xm
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          seq
                            xdata.write "one two ones"
                            xn.write (((xlen)) ((xdata)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one"))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one "))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one") (0) ((1.neg)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one") (0) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one") (1) ((1.neg)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ("one") (1) ((2.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xrfind)) ((((xbytearray)) ("one"))))) (8))
                xtest_double_close.write
                  [xself]
                    memory > xmf
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (((((unsupported)) (2) (16)).mul "a")))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            xmf.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((((unsupported)) (2) (16))) (((xmmap).xACCESS_READ)))
                            bogusForceDataize.write ((((xmf).xclose)) 0)
                            bogusForceDataize.write ((((xmf).xclose)) 0)
                xtest_entire_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (((((unsupported)) (2) (16)).mul "m")))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb+"))) ((xf)) (((((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0))) ((xmf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xmf)))) ((((unsupported)) (2) (16))) ("Map size should equal file size."))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xmf).xread)) ((((unsupported)) (2) (16))))) (((((unsupported)) (2) (16)).mul "m")))
                xtest_length_0_offset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (((65536.mul 2).mul "m")))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          (((unsupported)) ((((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) (65536) (((xmmap).xACCESS_READ)))) ((xmf)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xmf).x__getitem__)) (80000))
                xtest_length_0_large_offset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ((115699.mul "m")))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("w+b"))) ((xf)))
                          (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) (2147418112))
                xtest_move.write
                  [xself]
                    memory > xmf
                    memory > xoffsets
                    memory > xm
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb+"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)) ("ABCDEabcde"))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                            xmf.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) (10))
                            bogusForceDataize.write ((((xmf).xmove)) (5) (0) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmf)) ((((unsupported)) 0)))) ("ABCDEABCDE") ("Map move should have duplicated front 5"))
                            bogusForceDataize.write ((((xmf).xclose)) 0)
                        xdata.write "0123456789"
                        (((unsupported)) ((xdest)) ((((xrange)) ((((xlen)) ((xdata)))))))
                          (((unsupported)) ((xsrc)) ((((xrange)) ((((xlen)) ((xdata)))))))
                            (((unsupported)) ((xcount)) ((((xrange)) (((((xlen)) ((xdata))).sub (((xmax)) ((xdest)) ((xsrc))))))))
                              seq
                                xexpected.write (((((unsupported)) ((xdata)) ((((unsupported)) ((xdest))))).add (((unsupported)) ((xdata)) ((((unsupported)) ((xsrc)) (((xsrc).add (xcount))))))).add (((unsupported)) ((xdata)) ((((unsupported)) (((xdest).add (xcount)))))))
                                xm.write ((((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xdata)))))
                                (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xdata)))
                                bogusForceDataize.write ((((xm).xmove)) ((xdest)) ((xsrc)) ((xcount)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xexpected)))
                                bogusForceDataize.write ((((xm).xclose)) 0)
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (100))
                        xoffsets.write (((unsupported)) ((100.neg)) ((1.neg)) (0) (1) (100))
                        (((unsupported)) ((((unsupported)) ((xsource)) ((xdest)) ((xsize)))) (((((xitertools).xproduct)) ((xoffsets)) ((xoffsets)) ((xoffsets)))))
                          (((unsupported)) ((xValueError)))
                            bogusForceDataize.write ((((xm).xmove)) ((xsource)) ((xdest)) ((xsize)))
                        xoffsets.write (((unsupported)) ((((unsupported)) ((1.neg)) ((1.neg)) ((1.neg)))) ((((unsupported)) ((1.neg)) ((1.neg)) (0))) ((((unsupported)) ((1.neg)) (0) ((1.neg)))) ((((unsupported)) (0) ((1.neg)) ((1.neg)))) ((((unsupported)) ((1.neg)) (0) (0))) ((((unsupported)) (0) ((1.neg)) (0))) ((((unsupported)) (0) (0) ((1.neg)))))
                        (((unsupported)) ((((unsupported)) ((xsource)) ((xdest)) ((xsize)))) ((xoffsets)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xmove)) ((xsource)) ((xdest)) ((xsize)))
                        bogusForceDataize.write ((((xm).xclose)) 0)
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xmove)) (0) (0) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xmove)) (1) (0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xmove)) (0) (1) (1))
                        bogusForceDataize.write ((((xm).xmove)) (0) (0) (1))
                        bogusForceDataize.write ((((xm).xmove)) (0) (0) (0))
                xtest_anonymous.write
                  [xself]
                    memory > xb
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xmmap).xmmap)) ((1.neg)) ((xPAGESIZE)))
                        (((unsupported)) ((xx)) ((((xrange)) ((xPAGESIZE)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((xx)))) (0) ("anonymously mmap'ed contents should be zero"))
                        (((unsupported)) ((xx)) ((((xrange)) ((xPAGESIZE)))))
                          seq
                            xb.write ((xx).and 255)
                            (((unsupported)) ((((unsupported)) ((xm)) ((xx)))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((xx)))) ((xb)))
                xtest_read_all.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xm).xclose)))
                        bogusForceDataize.write ((((xm).xwrite)) ((((xbytes)) ((((xrange)) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) 0)) ((((xbytes)) ((((xrange)) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) 0)) ((((xbytes)) ((((xrange)) (8) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) 0)) (""))
                        bogusForceDataize.write ((((xm).xseek)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) ("None: is there a None literal in the EO language?"))) ((((xbytes)) ((((xrange)) (3) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) ((1.neg)))) ((((xbytes)) ((((xrange)) (4) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) ((2.neg)))) ((((xbytes)) ((((xrange)) (5) (16))))))
                        bogusForceDataize.write ((((xm).xseek)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) ((42.neg)))) ((((xbytes)) ((((xrange)) (9) (16))))))
                xtest_read_invalid_arg.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xm).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xread)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xread)) (5.5))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xread)) ((((unsupported)) (1) (2) (3))))
                xtest_extended_getslice.write
                  [xself]
                    memory > xs
                    memory > xindices
                    memory > xm
                    seq > @
                      seq
                        xs.write (((xbytes)) ((((xreversed)) ((((xrange)) (256))))))
                        xm.write ((((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xs)))))
                        (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xs)))
                        xindices.write (((unsupported)) (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (300) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((300.neg)))
                        (((unsupported)) ((xstart)) ((xindices)))
                          (((unsupported)) ((xstop)) ((xindices)))
                            (((unsupported)) ((xstep)) ((((unsupported)) ((xindices)) ((((unsupported)) (1))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))))) ((((unsupported)) ((xs)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))))))
                xtest_extended_set_del_slice.write
                  [xself]
                    memory > xindices
                    memory > xdata
                    memory > xL
                    memory > xs
                    memory > xm
                    seq > @
                      seq
                        xs.write (((xbytes)) ((((xreversed)) ((((xrange)) (256))))))
                        xm.write ((((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xs)))))
                        xindices.write (((unsupported)) (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (300) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((300.neg)))
                        (((unsupported)) ((xstart)) ((xindices)))
                          (((unsupported)) ((xstop)) ((xindices)))
                            (((unsupported)) ((xstep)) ((((unsupported)) ((xindices)) ((((unsupported)) (1))))))
                              seq
                                (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xs)))
                                xL.write (((xlist)) ((xs)))
                                xdata.write (((unsupported)) ((xL)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))))
                                xdata.write (((xbytes)) ((((xreversed)) ((xdata)))))
                                (((unsupported)) ((((unsupported)) ((xL)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))))) ((xdata)))
                                (((unsupported)) ((((unsupported)) ((xm)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))))) ((xdata)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((((xbytes)) ((xL)))))
                xmake_mmap_file.write
                  [xself xf xhalfsize]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xf).xwrite)) (("0".mul (xhalfsize))))
                        bogusForceDataize.write ((((xf).xwrite)) ("foo"))
                        bogusForceDataize.write ((((xf).xwrite)) (("0".mul ((xhalfsize).sub 3))))
                        bogusForceDataize.write ((((xf).xflush)) 0)
                        (((unsupported)) (((((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0))))
                xtest_empty_file.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xopen)) ((xTESTFN)) ("w+b"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          (((unsupported)) (((xself).xassertRaisesRegex)) ((xValueError)) ("cannot mmap an empty file") (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) (((xmmap).xACCESS_READ)))
                xtest_offset.write
                  [xself]
                    memory > xhalfsize
                    memory > xm
                    memory > xf
                    memory > xmapsize
                    seq > @
                      seq
                        xf.write (((xopen)) ((xTESTFN)) ("w+b"))
                        (((unsupported)) 0)
                          seq
                            xhalfsize.write ((xmmap).xALLOCATIONGRANULARITY)
                            xm.write ((((xself).xmake_mmap_file)) ((xf)) ((xhalfsize)))
                            bogusForceDataize.write ((((xm).xclose)) 0)
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xmapsize.write ((xhalfsize).mul 2)
                            xf.write (((xopen)) ((xTESTFN)) ("r+b"))
                            (((unsupported)) ((xoffset)) ((((unsupported)) ((2.neg)) ((1.neg)) ("None: is there a None literal in the EO language?"))))
                              (((unsupported)) ((((unsupported)) ((xValueError)) ((xTypeError)) ((xOverflowError)))))
                                seq
                                  xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) ((xoffset)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (0) (1))
                                bogusForceDataize.write ((((xself).xassertEqual)) (0) (0))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            xf.write (((xopen)) ((xTESTFN)) ("r+b"))
                            xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (((xmapsize).sub (xhalfsize))) ((xhalfsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) (0) (3))))) ("foo"))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            (((unsupported)) ((xSystemError)))
                              bogusForceDataize.write ((((xm).xresize)) (512))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xm)))) (512))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xseek)) (513) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) (0) (3))))) ("foo"))
                                xf.write (((xopen)) ((xTESTFN)) ("rb"))
                                bogusForceDataize.write ((((xf).xseek)) (0) (2))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (((xhalfsize).add 512)))
                                bogusForceDataize.write ((((xf).xclose)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xsize)) 0)) (((xhalfsize).add 512)))
                            bogusForceDataize.write ((((xm).xclose)) 0)
                          seq
                            bogusForceDataize.write ((((xf).xclose)) 0)
                            (((unsupported)) ((xOSError)))
                              bogusForceDataize.write ((((xos).xunlink)) ((xTESTFN)))
                xtest_subclass.write
                  [xself]
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)) (((xmmap).xmmap)))
                          x__new__.write
                            [xklass]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((((((xmmap).xmmap).x__new__)) ((xklass)) ((1.neg)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                        bogusForceDataize.write (((xanon_mmap)) ((xPAGESIZE)))
                xtest_prot_readonly.write
                  [xself]
                    memory > xm
                    memory > xmapsize
                    seq > @
                      (((unsupported)) 0)
                        xmapsize.write 10
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) (("a".mul (xmapsize))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            xm.write (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((xmapsize)) (((xmmap).xPROT_READ)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xm).xwrite)) ("foo"))
                xtest_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)) (((xmmap).xerror)) ((xOSError)))
                xtest_io_methods.write
                  [xself]
                    memory > xm
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "0123456789"
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) (("x".mul (((xlen)) ((xdata))))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("r+b"))) ((xf)))
                          xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((((xlen)) ((xdata)))))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdata)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) ((xi)))
                            bogusForceDataize.write ((((xm).xwrite_byte)) ((((unsupported)) ((xdata)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (((xi).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xwrite_byte)) ((((unsupported)) ("x") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ((xdata)))
                        bogusForceDataize.write ((((xm).xseek)) (0))
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdata)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread_byte)) 0)) ((((unsupported)) ((xdata)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (((xi).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xread_byte)))
                        bogusForceDataize.write ((((xm).xseek)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) (3))) ("345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (6))
                        bogusForceDataize.write ((((xm).xseek)) (3))
                        bogusForceDataize.write ((((xm).xwrite)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ("012bar6789"))
                        bogusForceDataize.write ((((xm).xwrite)) ((((xbytearray)) ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xtell)) 0)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) 0)))) ("012barbaz9"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xwrite)) ("ba"))
                xtest_non_ascii_byte.write
                  [xself]
                    memory > xm
                    seq > @
                      (((unsupported)) ((xb)) ((((unsupported)) (129) (200) (255))))
                        seq
                          xm.write ((((xmmap).xmmap)) ((1.neg)) (1))
                          bogusForceDataize.write ((((xm).xwrite_byte)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (0))) ((xb)))
                          bogusForceDataize.write ((((xm).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread_byte)) 0)) ((xb)))
                          bogusForceDataize.write ((((xm).xclose)) 0)
                xtest_tagname.write
                  [xself]
                    memory > xdata1
                    memory > xdata2
                    memory > xm1
                    memory > xm2
                    seq > @
                      (((unsupported)) 0)
                        xdata1.write "0123456789"
                        xdata2.write "abcdefghij"
                        (((unsupported)) (((((xlen)) ((xdata1))).eq (((xlen)) ((xdata2))))))
                        xm1.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xdata1)))) ("foo"))
                        (((unsupported)) ((((unsupported)) ((xm1)) ((((unsupported)) 0)))) ((xdata1)))
                        xm2.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xdata2)))) ("foo"))
                        (((unsupported)) ((((unsupported)) ((xm2)) ((((unsupported)) 0)))) ((xdata2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm1)) ((((unsupported)) 0)))) ((xdata2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm2)) ((((unsupported)) 0)))) ((xdata2)))
                        bogusForceDataize.write ((((xm2).xclose)) 0)
                        bogusForceDataize.write ((((xm1).xclose)) 0)
                        xm1.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xdata1)))) ("foo"))
                        (((unsupported)) ((((unsupported)) ((xm1)) ((((unsupported)) 0)))) ((xdata1)))
                        xm2.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) ((((xlen)) ((xdata2)))) ("boo"))
                        (((unsupported)) ((((unsupported)) ((xm2)) ((((unsupported)) 0)))) ((xdata2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm1)) ((((unsupported)) 0)))) ((xdata1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm2)) ((((unsupported)) 0)))) ((xdata2)))
                        bogusForceDataize.write ((((xm2).xclose)) 0)
                        bogusForceDataize.write ((((xm1).xclose)) 0)
                xtest_sizeof.write
                  [xself]
                    memory > xtagname
                    memory > xm1
                    memory > xm2
                    seq > @
                      (((unsupported)) 0)
                        xm1.write ((((xmmap).xmmap)) ((1.neg)) (100))
                        xtagname.write "foo"
                        xm2.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) (100) ((xtagname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsys).xgetsizeof)) ((xm2)))) (((((((xsys).xgetsizeof)) ((xm1))).add (((xlen)) ((xtagname)))).add 1)))
                xtest_crasher_on_windows.write
                  [xself]
                    memory > xm
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xm.write (((unsupported)) (((xmmap).xmmap)) ((1.neg)) (1000) ("foo"))
                        (((unsupported)) 0)
                          (((unsupported)) ((((unsupported)) (((xmmap).xmmap)) ((1.neg)) (5000) ("foo"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xm).xclose)) 0)
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) (("x".mul 10)))
                        xf.write (((xopen)) ((xTESTFN)) ("r+b"))
                        xm.write ((((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xm).xresize)) (0))
                        (((unsupported)) 0)
                          (((unsupported)) ((xm)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xm).xclose)) 0)
                xtest_invalid_descriptor.write
                  [xself]
                    memory > xs
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                            xm.write ((((xmmap).xmmap)) (((((xs).xfileno)) 0)) (10))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_context_manager.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xmmap).xmmap)) ((1.neg)) (10))) ((xm)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xm).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xm).xclosed)))
                xtest_context_manager_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xException)))) ((xexc)))
                          (((unsupported)) (((((xmmap).xmmap)) ((1.neg)) (10))) ((xm)))
                            (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xexc).xexception)) ((xOSError)) ("wrong exception raised in context manager"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xm).xclosed)) ("context manager failed"))
                xtest_weakref.write
                  [xself]
                    memory > xwr
                    memory > xmm
                    seq > @
                      seq
                        xmm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        xwr.write ((((xweakref).xref)) ((xmm)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xwr)) 0)) ((xmm)))
                        (((unsupported)) ((((unsupported)) ((xmm)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xwr)) 0)) ("None: is there a None literal in the EO language?"))
                xtest_write_returning_the_number_of_bytes_written.write
                  [xself]
                    memory > xmm
                    seq > @
                      seq
                        xmm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmm).xwrite)) (""))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmm).xwrite)) ("x"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmm).xwrite)) ("yz"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmm).xwrite)) ("python"))) (6))
                xtest_resize_past_pos.write
                  [xself]
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (8192))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xm).xclose)))
                        bogusForceDataize.write ((((xm).xread)) (5000))
                        (((unsupported)) ((xSystemError)))
                          bogusForceDataize.write ((((xm).xresize)) (4096))
                          bogusForceDataize.write ((((xself).xskipTest)) ("resizing not supported"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xread)) (14))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xread_byte)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xwrite_byte)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xm).xwrite)) ("abc"))
                xtest_concat_repeat_exception.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_flush_return_value.write
                  [xself]
                    memory > xresult
                    memory > xmm
                    seq > @
                      seq
                        xmm.write ((((xmmap).xmmap)) ((1.neg)) (16))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xmm).xclose)))
                        bogusForceDataize.write ((((xmm).xwrite)) ("python"))
                        xresult.write ((((xmm).xflush)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xresult)))
                        (((((xsys).xplatform).xstartswith)) ("linux")).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xmm).xflush)) (1) ((((xlen)) ("python"))))
                xtest_madvise.write
                  [xself]
                    memory > xsize
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        xsize.write (2.mul (xPAGESIZE))
                        xm.write ((((xmmap).xmmap)) ((1.neg)) ((xsize)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("madvise start out of bounds"))))
                          bogusForceDataize.write ((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) ((xsize)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("madvise start out of bounds"))))
                          bogusForceDataize.write ((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("madvise length invalid"))))
                          bogusForceDataize.write ((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) (0) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xOverflowError)) ("madvise length too large"))))
                          bogusForceDataize.write ((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) ((xPAGESIZE)) (((xsys).xmaxsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) ((xPAGESIZE)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) ((xPAGESIZE)) ((xsize)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) (0) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xmadvise)) (((xmmap).xMADV_NORMAL)) (0) ((xsize)))) ("None: is there a None literal in the EO language?"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xunlink)) ((xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xunlink)) ((xTESTFN)))
                x_make_test_file.write
                  [xself xnum_zeroes xtail]
                    memory > xf
                    seq > @
                      seq
                        (((((unsupported)) (((xsys).xplatform)) ((((unsupported)) (3)))).eq "win").or (((xsys).xplatform).eq "darwin")).if
                          bogusForceDataize.write (((xrequires)) ("largefile") (("test requires %s bytes and a long time to run".mod (((xstr)) ((((unsupported)) 0))))))
                        xf.write (((xopen)) ((xTESTFN)) ("w+b"))
                        (((unsupported)) ((((unsupported)) ((xOSError)) ((xOverflowError)) ((xValueError)))))
                          seq
                            bogusForceDataize.write ((((xf).xseek)) ((xnum_zeroes)))
                            bogusForceDataize.write ((((xf).xwrite)) ((xtail)))
                            bogusForceDataize.write ((((xf).xflush)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xOSError)) ((xOverflowError)))))
                              bogusForceDataize.write ((((xf).xclose)) 0)
                            (((unsupported)) (((((xunittest).xSkipTest)) ("filesystem does not have largefile support"))))
                        (((unsupported)) ((xf)))
                xtest_large_offset.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).x_make_test_file)) ((((unsupported)) 0)) (" "))) ((xf)))
                        (((unsupported)) ((((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) ((((unsupported)) 0)) (((xmmap).xACCESS_READ)))) ((xm)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (268435455))) (32))
                xtest_large_filesize.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).x_make_test_file)) ((((unsupported)) 0)) (" "))) ((xf)))
                        seq
                          (((xsys).xmaxsize).less (((unsupported)) 0)).if
                            seq
                              (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                                (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) ((((unsupported)) 0)) (((xmmap).xACCESS_READ)))
                              (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                                (((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) (((xmmap).xACCESS_READ)))
                          (((unsupported)) ((((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (65536) (((xmmap).xACCESS_READ)))) ((xm)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xsize)) 0)) ((((unsupported)) 0)))
                x_test_around_boundary.write
                  [xself xboundary]
                    memory > xend
                    memory > xstart
                    memory > xtail
                    seq > @
                      seq
                        xtail.write "  DEARdear  "
                        xstart.write ((xboundary).sub (((unsupported)) ((((xlen)) ((xtail)))) (2)))
                        xend.write ((xstart).add (((xlen)) ((xtail))))
                        (((unsupported)) (((((xself).x_make_test_file)) ((xstart)) ((xtail)))) ((xf)))
                          (((unsupported)) ((((unsupported)) (((xmmap).xmmap)) (((((xf).xfileno)) 0)) (0) (((xmmap).xACCESS_READ)))) ((xm)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ((((unsupported)) ((xstart)) ((xend)))))) ((xtail)))
                xtest_around_2GB.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_around_boundary)) ((x_2G)))
                xtest_around_4GB.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_around_boundary)) ((x_4G)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)