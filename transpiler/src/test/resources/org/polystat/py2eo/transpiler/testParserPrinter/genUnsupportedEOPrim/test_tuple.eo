memory > xz
memory > xstr
memory > xproto
memory > xmax
memory > xCounter
memory > xtuple
memory > xiter
memory > xobject
memory > xpickle
memory > xlist
memory > xMyTuple
memory > xproduct
memory > xrange
memory > xsdev
memory > xh
memory > xT
memory > xreversed
memory > xprint
memory > xtype
memory > xset
memory > xrepr
memory > xint
memory > xx
memory > xi
memory > xsuper
memory > xsupport
memory > xsys
memory > xgc
memory > xobj
memory > xzip
memory > xunittest
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xseq_tests
memory > xlen
memory > xTypeError
memory > xa
memory > xmean
memory > x__name__
[] > test_tuple
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_tracked
        memory > xtest_imul
        memory > xtest_keyword_args
        memory > x_not_tracked
        memory > xRUN_ALL_HASH_TESTS
        memory > xtest_repr
        memory > xJUST_SHOW_HASH_RESULTS
        memory > xtest_iterator_pickle
        memory > xtest_track_subtypes
        memory > xtest_bug7466
        memory > xtest_hash_exact
        memory > xtest_lexicographic_ordering
        memory > xtest_hash_optional
        memory > xtest_track_dynamic
        memory > xtest_reversed_pickle
        memory > xtest_track_literals
        memory > xcheck_track_dynamic
        memory > xtest_truth
        memory > xtest_tupleresizebug
        memory > xtest_constructors
        memory > xtest_getitem_error
        memory > xtest_iadd
        memory > xtest_no_comdat_folding
        memory > xtest_repr_large
        memory > xtype2test
        memory > xtest_len
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xRUN_ALL_HASH_TESTS.write FALSE
            xJUST_SHOW_HASH_RESULTS.write FALSE
            (((unsupported)) (((xseq_tests).xCommonTest)))
              seq
                xtype2test.write (xtuple)
                xtest_getitem_error.write
                  [xself]
                    memory > xt
                    memory > xmsg
                    seq > @
                      seq
                        xt.write (((unsupported)) 0)
                        xmsg.write "tuple indices must be integers or slices"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)))))
                          (((unsupported)) ((xt)) ("a"))
                xtest_constructors.write
                  [xself]
                    memory > xt0_3_bis
                    memory > xt0_3
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_constructors)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) 0)) ((((unsupported)) 0)))
                        xt0_3.write (((unsupported)) (0) (1) (2) (3))
                        xt0_3_bis.write (((xtuple)) ((xt0_3)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xt0_3)) ((xt0_3_bis)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((unsupported)) (0) (1) (2) (3))))) ((((unsupported)) (0) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) (""))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ("spam"))) ((((unsupported)) ("s") ("p") ("a") ("m"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) ((((unsupported)) ((xx)) ((xx)) ((((xrange)) (10))) (((xx).mod 2)))))) ((((unsupported)) (1) (3) (5) (7) (9))))
                xtest_keyword_args.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("keyword argument"))))
                        (((unsupported)) ((xtuple)) ((((unsupported)) 0)))
                xtest_truth.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_truth)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) 0).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (42))))
                xtest_len.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_len)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) 0)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (0))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (0) (1) (2))))) (3))
                xtest_iadd.write
                  [xself]
                    memory > xu2
                    memory > xu
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_iadd)) 0)
                        xu.write (((unsupported)) (0) (1))
                        xu2.write (xu)
                        (((unsupported)) ((xu)) ((((unsupported)) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xu)) ((xu2)))))
                xtest_imul.write
                  [xself]
                    memory > xu2
                    memory > xu
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_imul)) 0)
                        xu.write (((unsupported)) (0) (1))
                        xu2.write (xu)
                        (((unsupported)) ((xu)) (3))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xu)) ((xu2)))))
                xtest_tupleresizebug.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)) ((xi)) ((((xrange)) (1000))))
                                (((unsupported)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xtuple)) ((((xf)) 0)))))) ((((xlist)) ((((xrange)) (1000))))))
                xtest_hash_exact.write
                  [xself]
                    memory > xcheck_one_exact
                    seq > @
                      seq
                        xcheck_one_exact.write
                          [xt xe32 xe64]
                            memory > xexpected
                            memory > xmsg
                            memory > xgot
                            seq > @
                              seq
                                xgot.write (((xhash)) ((xt)))
                                xexpected.write ((((xsupport).xNHASHBITS).eq 32).if (xe32) (xe64))
                                ((xgot).neq (xexpected)).if
                                  seq
                                    xmsg.write "FAIL hash({t!r}) == {got} != {expected}"
                                    bogusForceDataize.write ((((xself).xfail)) ((xmsg)))
                        bogusForceDataize.write (((xcheck_one_exact)) ((((unsupported)) 0)) (750394483) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xcheck_one_exact)) ((((unsupported)) (0))) (1214856301) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write (((xcheck_one_exact)) ((((unsupported)) (0) (0))) ((168982784.neg)) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write (((xcheck_one_exact)) ((((unsupported)) (0.5))) (2077348973) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write (((xcheck_one_exact)) ((((unsupported)) (0.5) ((((unsupported)) 0)) ((((unsupported)) ((2.neg)) (3) ((((unsupported)) (4) (6))))))) (714642271) (((((unsupported)) 0).neg)))
                xtest_hash_optional.write
                  [xself]
                    memory > xxp
                    memory > xB
                    memory > xT
                    memory > xL
                    memory > xcands
                    memory > xL3
                    memory > xinps
                    memory > xL4
                    memory > xN
                    memory > xtryone
                    memory > xL2
                    memory > xbase
                    memory > xtryone_inner
                    memory > xn
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)) 0)
                        ((xRUN_ALL_HASH_TESTS).not).if
                          (((unsupported)) 0)
                        xtryone_inner.write
                          [xtag xnbins xhashes xexpected xzlimit]
                            memory > xnballs
                            memory > xprefix
                            memory > xmsg
                            memory > xpileup
                            memory > xc
                            memory > xz
                            memory > xgot
                            memory > xcollisions
                            memory > xfailed
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) 0)
                                xnballs.write (((xlen)) ((xhashes)))
                                (((unsupported)) ((((unsupported)) ((xmean)) ((xsdev)))) (((((xsupport).xcollision_stats)) ((xnbins)) ((xnballs)))))
                                xc.write (((xCounter)) ((xhashes)))
                                xcollisions.write ((xnballs).sub (((xlen)) ((xc))))
                                xz.write (((xcollisions).sub (xmean)).div (xsdev))
                                xpileup.write ((((xmax)) (((((xc).xvalues)) 0))).sub 1)
                                (((unsupported)) ((((unsupported)) ((xc)))))
                                xgot.write (((unsupported)) ((xcollisions)) ((xpileup)))
                                xfailed.write FALSE
                                xprefix.write ""
                                ((((unsupported)) ((xzlimit)) ("None: is there a None literal in the EO language?")).and ((xz).greater (xzlimit))).if
                                  seq
                                    xfailed.write TRUE
                                    xprefix.write "FAIL z > {zlimit}; "
                                ((((unsupported)) ((xexpected)) ("None: is there a None literal in the EO language?")).and ((xgot).neq (xexpected))).if
                                  seq
                                    xfailed.write TRUE
                                    (((unsupported)) ((xprefix)) ("FAIL {got} != {expected}; "))
                                ((xfailed).or (xJUST_SHOW_HASH_RESULTS)).if
                                  seq
                                    xmsg.write "{prefix}{tag}; pileup {pileup:,} mean {mean:.1f} "
                                    (((unsupported)) ((xmsg)) ("coll {collisions:,} z {z:+.1f}"))
                                    (xJUST_SHOW_HASH_RESULTS).if
                                      seq
                                        (((unsupported)) 0)
                                        (((unsupported)) ((xprint)) ((xmsg)) (((xsys).x__stdout__)))
                                      bogusForceDataize.write ((((xself).xfail)) ((xmsg)))
                        xtryone.write
                          [xtag xxs xnative32 xnative64 xhi32 xlo32 xzlimit]
                            memory > xshift
                            memory > xNHASHBITS
                            memory > xhashes
                            memory > xmask
                            seq > @
                              (((unsupported)) 0)
                                xNHASHBITS.write ((xsupport).xNHASHBITS)
                                xhashes.write (((xlist)) ((((xmap)) ((xhash)) ((xxs)))))
                                bogusForceDataize.write (((xtryone_inner)) (((xtag).add "; {NHASHBITS}-bit hash codes")) ((((unsupported)) (1) ((xNHASHBITS)))) ((xhashes)) ((((xNHASHBITS).eq 32).if (xnative32) (xnative64))) ((xzlimit)))
                                ((xNHASHBITS).greater 32).if
                                  seq
                                    xshift.write ((xNHASHBITS).sub 32)
                                    bogusForceDataize.write (((xtryone_inner)) (((xtag).add "; 32-bit upper hash codes")) ((((unsupported)) (1) (32))) ((((unsupported)) ((((unsupported)) ((xh)) ((xshift)))) ((xh)) ((xhashes)))) ((xhi32)) ((xzlimit)))
                                    xmask.write ((((unsupported)) (1) (32)).sub 1)
                                    bogusForceDataize.write (((xtryone_inner)) (((xtag).add "; 32-bit lower hash codes")) ((((unsupported)) (1) (32))) ((((unsupported)) (((xh).and (xmask))) ((xh)) ((xhashes)))) ((xlo32)) ((xzlimit)))
                        bogusForceDataize.write (((xtryone)) ("range(100) by 3") ((((xlist)) ((((unsupported)) ((xproduct)) ((((xrange)) (100))) (3))))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))) ((((unsupported)) (4) (1))) ((((unsupported)) (0) (0))))
                        xcands.write ((((xlist)) ((((xrange)) ((10.neg)) ((1.neg))))).add (((xlist)) ((((xrange)) (9)))))
                        bogusForceDataize.write (((xtryone)) ("-10 .. 8 by 4") ((((xlist)) ((((unsupported)) ((xproduct)) ((xcands)) (4))))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))))
                        (((unsupported)) ((((unsupported)) ((xcands)))))
                        xL.write (((unsupported)) ((((unsupported)) ((xn)) (60))) ((xn)) ((((xrange)) (100))))
                        bogusForceDataize.write (((xtryone)) ("0..99 << 60 by 3") ((((xlist)) ((((unsupported)) ((xproduct)) ((xL)) (3))))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (0))) ((((unsupported)) (324) (1))))
                        (((unsupported)) ((((unsupported)) ((xL)))))
                        bogusForceDataize.write (((xtryone)) ("[-3, 3] by 18") ((((xlist)) ((((unsupported)) ((xproduct)) ((((unsupported)) ((3.neg)) (3))) (18))))) ((((unsupported)) (7) (1))) ((((unsupported)) (0) (0))) ((((unsupported)) (7) (1))) ((((unsupported)) (6) (1))))
                        bogusForceDataize.write (((xtryone)) ("[0, 0.5] by 18") ((((xlist)) ((((unsupported)) ((xproduct)) ((((unsupported)) (0) (0.5))) (18))))) ((((unsupported)) (5) (1))) ((((unsupported)) (0) (0))) ((((unsupported)) (9) (1))) ((((unsupported)) (12) (1))))
                        (((unsupported)) ((xtryone)) ("4-char tuples") ((((xlist)) ((((unsupported)) ((xproduct)) ("abcdefghijklmnopqrstuvwxyz") (4))))) (4.0))
                        xN.write 50
                        xbase.write (((xlist)) ((((xrange)) ((xN)))))
                        xxp.write (((xlist)) ((((unsupported)) ((xproduct)) ((xbase)) (2))))
                        xinps.write (((((xbase).add (((xlist)) ((((xproduct)) ((xbase)) ((xxp)))))).add (((xlist)) ((((xproduct)) ((xxp)) ((xbase)))))).add (xxp)).add (((xlist)) ((((xzip)) ((xbase))))))
                        bogusForceDataize.write (((xtryone)) ("old tuple test") ((xinps)) ((((unsupported)) (2) (1))) ((((unsupported)) (0) (0))) ((((unsupported)) (52) (49))) ((((unsupported)) (7) (1))))
                        (((unsupported)) ((((unsupported)) ((xbase)) ((xxp)) ((xinps)))))
                        xn.write 5
                        xA.write (((unsupported)) ((xx)) ((xx)) ((((xrange)) (((xn).neg)) (((xn).add 1)))) (((xx).neq (1.neg))))
                        xB.write ((xA).add (((unsupported)) ((((unsupported)) ((xa)))) ((xa)) ((xA))))
                        xL2.write (((xlist)) ((((unsupported)) ((xproduct)) ((xA)) (2))))
                        xL3.write ((xL2).add (((xlist)) ((((unsupported)) ((xproduct)) ((xA)) (3)))))
                        xL4.write ((xL3).add (((xlist)) ((((unsupported)) ((xproduct)) ((xA)) (4)))))
                        xT.write (xA)
                        (((unsupported)) ((xT)) ((((unsupported)) ((((unsupported)) ((xa)))) ((xa)) (((xB).add (xL4))))))
                        (((unsupported)) ((xT)) ((((xproduct)) ((xL3)) ((xB)))))
                        (((unsupported)) ((xT)) ((((unsupported)) ((xproduct)) ((xL2)) (2))))
                        (((unsupported)) ((xT)) ((((xproduct)) ((xB)) ((xL3)))))
                        (((unsupported)) ((xT)) ((((xproduct)) ((xB)) ((xB)) ((xL2)))))
                        (((unsupported)) ((xT)) ((((xproduct)) ((xB)) ((xL2)) ((xB)))))
                        (((unsupported)) ((xT)) ((((xproduct)) ((xL2)) ((xB)) ((xB)))))
                        (((unsupported)) ((xT)) ((((unsupported)) ((xproduct)) ((xB)) (4))))
                        (((unsupported)) (((((xlen)) ((xT))).eq 345130)))
                        bogusForceDataize.write (((xtryone)) ("new tuple test") ((xT)) ((((unsupported)) (9) (1))) ((((unsupported)) (0) (0))) ((((unsupported)) (21) (5))) ((((unsupported)) (6) (1))))
                xtest_repr.write
                  [xself]
                    memory > xl2
                    memory > xa0
                    memory > xa2
                    memory > xl0
                    seq > @
                      seq
                        xl0.write (((xtuple)) 0)
                        xl2.write (((unsupported)) (0) (1) (2))
                        xa0.write ((((xself).xtype2test)) ((xl0)))
                        xa2.write ((((xself).xtype2test)) ((xl2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xa0)))) ((((xrepr)) ((xl0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xa2)))) ((((xrepr)) ((xl2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xa0)))) ("()"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xa2)))) ("(0, 1, 2)"))
                x_not_tracked.write
                  [xself xt]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xgc).xis_tracked)) ((xt)))) ((xt)))
                x_tracked.write
                  [xself xt]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((xt)))) ((xt)))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((xt)))) ((xt)))
                xtest_track_literals.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xx)) ((xy)) ((xz)))) ((((unsupported)) (1.5) ("a") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) (1) (2) ("a"))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) (1) (2) ((((unsupported)) ("None: is there a None literal in the EO language?") (TRUE) (FALSE) ((((unsupported)) 0)))) ((xint)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((unsupported)) ((((unsupported)) (1) ((xx)))) ((xy)) ((((unsupported)) (2) (3))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((unsupported)) ((((unsupported)) (1))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((unsupported)) ((((xset)) 0)))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((unsupported)) ((xx)) ((xy)) ((xz)))))
                xcheck_track_dynamic.write
                  [xself xtp xalways_track]
                    memory > xcheck
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xx)) ((xy)) ((xz)))) ((((unsupported)) (1.5) ("a") ((((unsupported)) 0)))))
                        xcheck.write ((xalways_track).if ((xself).x_tracked) ((xself).x_not_tracked))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) 0)))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((unsupported)) 0)))))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((xset)) 0)))))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((unsupported)) (1) ((xx)) ((xy)))))))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((unsupported)) ((xobj)) ((xobj)) ((((unsupported)) (1) ((xx)) ((xy)))))))))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((xset)) ((((unsupported)) (1) ((xx)) ((xy)))))))))
                        bogusForceDataize.write (((xcheck)) ((((xtp)) ((((unsupported)) ((((xtuple)) ((((unsupported)) ((xobj)))))) ((xobj)) ((((unsupported)) (1) ((xx)) ((xy)))))))))
                        bogusForceDataize.write (((xcheck)) ((((xtuple)) ((((unsupported)) ((((xtp)) ((((unsupported)) ((xobj)))))) ((xobj)) ((((unsupported)) (1) ((xx)) ((xy)))))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtp)) ((((unsupported)) ((xz)))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtp)) ((((unsupported)) ((((unsupported)) ((xx)) ((xy)))))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtp)) ((((unsupported)) ((((unsupported)) ((xx)) ((xy)))))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtp)) ((((unsupported)) ((xobj)) ((xobj)) ((((unsupported)) ((xx)) ((xy)) ((xz)))))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtp)) ((((unsupported)) ((((xtuple)) ((((unsupported)) ((xobj)))))) ((xobj)) ((((unsupported)) ((xx)) ((xy)) ((xz)))))))))
                        bogusForceDataize.write ((((xself).x_tracked)) ((((xtuple)) ((((unsupported)) ((((xtp)) ((((unsupported)) ((xobj)))))) ((xobj)) ((((unsupported)) ((xx)) ((xy)) ((xz)))))))))
                xtest_track_dynamic.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_track_dynamic)) ((xtuple)) (FALSE))
                xtest_track_subtypes.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xcheck_track_dynamic)) ((xMyTuple)) (TRUE))
                xtest_bug7466.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_not_tracked)) ((((xtuple)) ((((unsupported)) (((((xgc).xcollect)) 0)) ((xi)) ((((xrange)) (101))))))))
                xtest_repr_large.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xn]
                            memory > xs
                            memory > xl
                            seq > @
                              seq
                                xl.write ((((unsupported)) (0)).mul (xn))
                                xs.write (((xrepr)) ((xl)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((("(".add (((", ".xjoin)) (((((unsupported)) ("0")).mul (xn))))).add ")")))
                        bogusForceDataize.write (((xcheck)) (10))
                        bogusForceDataize.write (((xcheck)) (1000000))
                xtest_iterator_pickle.write
                  [xself]
                    memory > xd
                    memory > xitorg
                    memory > xit
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xself).xtype2test)) ((((unsupported)) (4) (5) (6) (7))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xitorg.write (((xiter)) ((xdata)))
                            xd.write ((((xpickle).xdumps)) ((xitorg)) ((xproto)))
                            xit.write ((((xpickle).xloads)) ((xd)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xitorg)))) ((((xtype)) ((xit)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xtype2test)) ((xit)))) (((((xself).xtype2test)) ((xdata)))))
                            xit.write ((((xpickle).xloads)) ((xd)))
                            bogusForceDataize.write (((xnext)) ((xit)))
                            xd.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xtype2test)) ((xit)))) ((((unsupported)) (((((xself).xtype2test)) ((xdata)))) ((((unsupported)) (1))))))
                xtest_reversed_pickle.write
                  [xself]
                    memory > xd
                    memory > xitorg
                    memory > xit
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xself).xtype2test)) ((((unsupported)) (4) (5) (6) (7))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xitorg.write (((xreversed)) ((xdata)))
                            xd.write ((((xpickle).xdumps)) ((xitorg)) ((xproto)))
                            xit.write ((((xpickle).xloads)) ((xd)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xitorg)))) ((((xtype)) ((xit)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xtype2test)) ((xit)))) (((((xself).xtype2test)) ((((xreversed)) ((xdata)))))))
                            xit.write ((((xpickle).xloads)) ((xd)))
                            bogusForceDataize.write (((xnext)) ((xit)))
                            xd.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xtype2test)) ((xit)))) ((((unsupported)) (((((xself).xtype2test)) ((((xreversed)) ((xdata)))))) ((((unsupported)) (1))))))
                xtest_no_comdat_folding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xtuple)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_lexicographic_ordering.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xself).xtype2test)) ((((unsupported)) (1) (2))))
                        xb.write ((((xself).xtype2test)) ((((unsupported)) (1) (2) (0))))
                        xc.write ((((xself).xtype2test)) ((((unsupported)) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xb)) ((xc)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)