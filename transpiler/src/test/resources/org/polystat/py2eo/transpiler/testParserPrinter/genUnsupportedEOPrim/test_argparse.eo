memory > xenumerate
memory > xstr
memory > xgetattr
memory > xobject
memory > xkwargs
memory > xcm
memory > xattrs
memory > xinspect
memory > xC
memory > xargument_sigs
memory > xTestMutuallyExclusiveOptionalAndPositional
memory > xSig
memory > xTestMutuallyExclusiveManySuppressed
memory > xAttributeError
memory > xMEPBase
memory > xcomplex
memory > xRFile
memory > xTestMutuallyExclusiveOptionalsMixed
memory > xlist
memory > xMEMixin
memory > xstd_name
memory > xValueError
memory > xTestArgumentsFromFile
memory > xParserTesterMetaclass
memory > xsubparser_sig
memory > xstat
memory > xAssertionError
memory > xPositionalAction
memory > xfile
memory > xTestCase
memory > xtest_func
memory > xTestHelpBiggerOptionals
memory > xWFile
memory > xTestMutuallyExclusiveGroupErrors
memory > xextras
memory > xfunc
memory > xrange
memory > xMyType
memory > xvalue
memory > xtup
memory > xNS
memory > xFromFileConverterArgumentParser
memory > xErrorRaisingArgumentParser
memory > xStdStreamComparer
memory > xprefix
memory > x_
memory > xargs_string
memory > xdirs
memory > xTempDirMixin
memory > xtempfile
memory > xTestFileTypeR
memory > xargs_str
memory > xSuccess
memory > xTestMutuallyExclusiveOptionalsAndPositionalsMixed
memory > xexpected_ns
memory > xopen
memory > xtextwrap
memory > xpath
memory > xTestFileTypeW
memory > xsig
memory > xargument_sig
memory > xtype
memory > xtext
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xfunc_suffix
memory > xhasattr
memory > xfile_name
memory > xi
memory > xTestArgumentsFromFileConverter
memory > xarg
memory > xsuper
memory > xsupport
memory > xsys
memory > xgroup_sig
memory > xAddTests
memory > xbool
memory > xm
memory > xtuple
memory > xNotImplemented
memory > xTestMutuallyExclusiveSimple
memory > xsorted
memory > xaction
memory > xargparse
memory > xfloat
memory > xfiles
memory > xTestMutuallyExclusiveFirstSuppressed
memory > xargs
memory > xmock
memory > xos
memory > xStdIOBuffer
memory > xAction
memory > xvars
memory > xArgumentParserError
memory > xOptionalAction
memory > xnargs
memory > x__file__
memory > xStringIO
memory > xsetattr
memory > xTestFileTypeDefaults
memory > xSystemExit
memory > xname
memory > xshutil
memory > xunittest
memory > xTestMutuallyExclusiveLong
memory > xsuffix
memory > xTestHelpFormattingMetaclass
memory > xadd_arguments
memory > xisinstance
memory > xTestFileTypeRB
memory > xdict
memory > xroot
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_argparse
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_optional_subparsers
        memory > xtest_parser_command_help
        memory > xtest_failures_when_not_required
        memory > xparser_class
        memory > x_test_required_subparsers
        memory > xtest_exclusive_incompatible
        memory > xtest_nargs_parser_metavar_length0
        memory > xtest_set_defaults_no_args
        memory > xtest_arguments_tuple_positional
        memory > xtest_nargs_3_metavar_string
        memory > xtest_alternate_help_version
        memory > xtest_more_than_one_argument_actions
        memory > xtest_nargs_alphabetic
        memory > xusage
        memory > xtest_nargs_zeroormore_metavar_length3
        memory > xtest_help_when_not_required
        memory > xtest_help_with_metavar
        memory > xtest_nargs_None_metavar_length2
        memory > xtest_nargs_oneormore_metavar_length3
        memory > x__eq__
        memory > xtest_user_defined_action
        memory > x__repr__
        memory > x__call__
        memory > xtest_parse_args
        memory > xtest_exclusive
        memory > xtest_group_first
        memory > xtest_arguments_list_positional
        memory > xtest_nargs_3_metavar_length0
        memory > xtest_conflicting_parents
        memory > xassertValueError
        memory > xtest_test_argparse_module_encoding
        memory > xtest_nargs_zeroormore_metavar_length0
        memory > xtest_invalid_add_argument
        memory > xtest_successes_when_not_required
        memory > xassertPrintHelpExit
        memory > xtest_nargs_optional_metavar_length0
        memory > xtest_nargs_1_metavar_length0
        memory > xconvert_arg_line_to_args
        memory > xtest_failures_when_required
        memory > xassertTypeError
        memory > xtest_groups_parents
        memory > xtest_parser
        memory > xtest_nargs_2_metavar_string
        memory > xtest_set_defaults_with_args
        memory > xtest_invalid_option_strings
        memory > xcreate_readonly_file
        memory > xtest_help
        memory > xtest_missing_argument_name_in_message
        memory > x_test_subparser_help
        memory > xtest_nargs_optional_metavar_length2
        memory > xtest_constructor
        memory > xtest_nargs_parser_metavar_length1
        memory > xtest_invalid_add_argument_group
        memory > xtest_version_format
        memory > xtest_no_help
        memory > xparse_args
        memory > xtest_nargs_remainder_metavar_length1
        memory > xcustom_type
        memory > xdo_test_no_exception
        memory > xerror
        memory > xtest_remainder
        memory > xassertStringEqual
        memory > xtest_help_when_required
        memory > xtest_w_big5_ignore
        memory > xtest_nargs_remainder_metavar_string
        memory > xtest_nongroup_first
        memory > xtest_nargs_remainder_metavar_length2
        memory > xtest_optional
        memory > xtest_no_double_type_conversion_of_default
        memory > x_test_module_encoding
        memory > xtest_same_argument_name_parents
        memory > xtest_nargs_zero
        memory > xtest_namespace_kwargs_and_starkwargs_notidentifier
        memory > xParserTestCase
        memory > xtest_optional_optional_not_in_message
        memory > xtest_version_action
        memory > xtest_nargs_2_metavar_length1
        memory > xtest_namespace
        memory > xtest_nargs_None_metavar_length1
        memory > xtest_main
        memory > xtest_nargs_1_metavar_string
        memory > xtest_required_subparsers_via_attribute
        memory > xtest_invalid_keyword_arguments
        memory > xtest_parsers_action_missing_params
        memory > xtest_nargs_3_metavar_length1
        memory > xtest_nargs_None_metavar_string
        memory > xtest
        memory > xtest_required_positional
        memory > xtest_nargs_oneormore_metavar_string
        memory > xtest_argument
        memory > xtest_version
        memory > xdo_test_exception
        memory > xtest_single_parent
        memory > xtest_subparser_parents
        memory > xtest_help_non_breaking_spaces
        memory > xtest_invalid_action
        memory > xtest_nargs_None_metavar_length0
        memory > xtest_multiple_parents
        memory > xtest_r_1_replace
        memory > xtest_r_latin
        memory > xtest_missing_destination
        memory > xtest_parse_args_failures
        memory > xversion
        memory > xtest_nargs_optional_metavar_length3
        memory > xsetUp
        memory > xtest_nargs_optional_metavar_string
        memory > xtest_namespace_starkwargs_identifier
        memory > xget_parser
        memory > xtest_help_alternate_prefix_chars
        memory > xtest_nargs_1_metavar_length3
        memory > xtest_issue_15906
        memory > xtest_nargs_oneormore_metavar_length0
        memory > xtest_non_empty
        memory > xtest_type_function_call_with_non_string_default
        memory > xtest_get_default
        memory > xtest_type_function_call_only_once
        memory > xtest_set_defaults_parents
        memory > xtest_bad_type
        memory > xargument_group_signatures
        memory > xtest_nargs_remainder_metavar_length3
        memory > xtest_optionals
        memory > xsuccesses_when_not_required
        memory > xtest_help_extra_prefix_chars
        memory > xtest_alias_invocation
        memory > xtest_all_exports_everything_but_modules
        memory > xeq_stdin
        memory > xtest_nargs_2_metavar_length0
        memory > xusage_when_required
        memory > xtest_arguments_list
        memory > xHelpTestCase
        memory > xeq_stdout
        memory > xtest_nargs_zeroormore_metavar_length1
        memory > x_get_parser
        memory > xassertArgumentParserError
        memory > xtest_nargs_parser_metavar_length2
        memory > xbases
        memory > xtest_optional_positional_not_in_message
        memory > xtest_nargs_optional_metavar_length1
        memory > xtest_alias_help
        memory > xtest_r
        memory > xtest_basic
        memory > xtest_subparser_parents_mutex
        memory > xtest_nargs_zeroormore_metavar_string
        memory > xtest_wb_1
        memory > xtest_set_defaults_same_as_add_argument
        memory > xtest_nargs_1_metavar_length2
        memory > xEXPECTED_RANGE_MESSAGE
        memory > xtest_help_version_extra_arguments
        memory > xtest_arguments_tuple
        memory > xtest_subparser_title_help
        memory > xtest_no_argument_no_const_actions
        memory > xtest_interleaved_groups
        memory > xtest_nargs_3_metavar_length3
        memory > xtest_equality_returns_notimplemented
        memory > xtest_conflict_error
        memory > xtest_error_alias_invocation
        memory > xtest_nargs_oneormore_metavar_length1
        memory > xtest_subparser1_help
        memory > xdo_test_range_exception
        memory > xtest_required_subparsers_via_kwarg
        memory > xtest_parse_known_args
        memory > xtest_no_argument_actions
        memory > xexit
        memory > xtest_parent_help
        memory > xsubcommand_data
        memory > xtest_successes_when_required
        memory > xtest_subparser2_help
        memory > xtest_type_function_call_with_string_default
        memory > xtest_set_defaults_on_parent_and_subparser
        memory > xtest_version_no_help
        memory > xtest_required_const_actions
        memory > xtest_dest
        memory > x__init__
        memory > xtest_usage_when_required
        memory > xtest_required_subparsers_default
        memory > xsubparsers_signatures
        memory > xtest_misc
        memory > xtest_invalid_type
        memory > xstderr_to_parser_error
        memory > xtest_nargs_None_metavar_length3
        memory > xtest_single_granparent_mutex
        memory > xdo_test_invalid_exception
        memory > xtest_nargs_2_metavar_length3
        memory > xtest_mixed
        memory > xEXPECTED_MESSAGE
        memory > xtest_multiple_parents_mutex
        memory > xtest_single_parent_mutex
        memory > xtest_nargs_zeroormore_metavar_length2
        memory > xtest_argument_error
        memory > xtest_nargs_oneormore_metavar_length2
        memory > xtest_multiple_dest
        memory > xseen
        memory > xtest_nargs_parser_metavar_length3
        memory > xtest_usage_when_not_required
        memory > xusage_when_not_required
        memory > xtest_conflicting_parents_mutex
        memory > xtest_empty
        memory > xhelp
        memory > xargument_signatures
        memory > xtest_argparse_module_encoding
        memory > xtest_set_defaults_same_as_add_argument_group
        memory > xtest_open_args
        memory > xtest_namespace_starkwargs_notidentifier
        memory > xtearDown
        memory > xtest_resolve_error
        memory > xtest_argument_type_error
        memory > xtest_nargs_1_metavar_length1
        memory > xtest_set_defaults_subparsers
        memory > xparser_signature
        memory > xtest_nargs_parser_metavar_string
        memory > xsuccesses
        memory > xtest_equality
        memory > xtest_nargs_remainder_metavar_length0
        memory > xtest_nargs_2_metavar_length2
        memory > xtest_nargs_3_metavar_length2
        memory > xfailures
        memory > xeq_stderr
        memory > x_test_mutex_ab
        memory > xEXPECTED_INVALID_MESSAGE
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xStringIO)))
            (((unsupported)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  memory > xenv
                  seq > @
                    seq
                      xenv.write ((((xsupport).xEnvironmentVarGuard)) 0)
                      (((unsupported)) ((((unsupported)) ((xenv)) ("COLUMNS"))) ("80"))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xenv).x__exit__)))
            (((unsupported)) ((xobject)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xtemp_dir)) (((((xtempfile).xmkdtemp)) 0)))
                        (((unsupported)) (((xself).xold_dir)) (((((xos).xgetcwd)) 0)))
                        bogusForceDataize.write ((((xos).xchdir)) (((xself).xtemp_dir)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xchdir)) (((xself).xold_dir)))
                        (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))) ((((unsupported)) (((xos).xwalk)) (((xself).xtemp_dir)) (FALSE))))
                          (((unsupported)) ((xname)) ((xfiles)))
                            bogusForceDataize.write ((((xos).xchmod)) ((((((xos).xpath).xjoin)) (((xself).xtemp_dir)) ((xname)))) (((xstat).xS_IWRITE)))
                        bogusForceDataize.write ((((xshutil).xrmtree)) (((xself).xtemp_dir)) (TRUE))
                xcreate_readonly_file.write
                  [xself xfilename]
                    memory > xfile_path
                    seq > @
                      seq
                        xfile_path.write (((((xos).xpath).xjoin)) (((xself).xtemp_dir)) ((xfilename)))
                        (((unsupported)) ((((xopen)) ((xfile_path)) ("w"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) ((xfilename)))
                        bogusForceDataize.write ((((xos).xchmod)) ((xfile_path)) (((xstat).xS_IREAD)))
            (((unsupported)) ((xobject)))
              x__init__.write
                [xself]
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) (((xself).xargs)) ((xargs)))
                      (((unsupported)) (((xself).xkwargs)) ((xkwargs)))
            (((unsupported)) ((xobject)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).x__dict__).xupdate)) ((xkwargs)))
                x__repr__.write
                  [xself]
                    memory > xsorted_items
                    memory > xkwarg_str
                    seq > @
                      seq
                        xsorted_items.write (((xsorted)) ((((((xself).x__dict__).xitems)) 0)))
                        xkwarg_str.write (((", ".xjoin)) ((((unsupported)) (("%s=%r".mod (xtup))) ((xtup)) ((xsorted_items)))))
                        (((unsupported)) (("%s(%s)".mod (((unsupported)) (((((xtype)) ((xself))).x__name__)) ((xkwarg_str))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (((((xvars)) ((xself))).eq (((xvars)) ((xother))))))
            (((unsupported)) ((xException)))
              x__init__.write
                [xself xmessage xstdout xstderr xerror_code]
                  seq > @
                    (((unsupported)) 0)
                      bogusForceDataize.write ((((xException).x__init__)) ((xself)) ((xmessage)) ((xstdout)) ((xstderr)))
                      (((unsupported)) (((xself).xmessage)) ((xmessage)))
                      (((unsupported)) (((xself).xstdout)) ((xstdout)))
                      (((unsupported)) (((xself).xstderr)) ((xstderr)))
                      (((unsupported)) (((xself).xerror_code)) ((xerror_code)))
            xstderr_to_parser_error.write
              [xparse_args]
                memory > xstdout
                memory > xold_stdout
                memory > xcode
                memory > xstderr
                memory > xold_stderr
                memory > xresult
                seq > @
                  (((unsupported)) 0)
                    ((((xisinstance)) (((xsys).xstderr)) ((xStdIOBuffer))).or (((xisinstance)) (((xsys).xstdout)) ((xStdIOBuffer)))).if
                      (((unsupported)) ((((xparse_args)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                    xold_stdout.write ((xsys).xstdout)
                    xold_stderr.write ((xsys).xstderr)
                    (((unsupported)) (((xsys).xstdout)) ((((xStdIOBuffer)) 0)))
                    (((unsupported)) (((xsys).xstderr)) ((((xStdIOBuffer)) 0)))
                    (((unsupported)) 0)
                      (((unsupported)) ((xSystemExit)))
                        seq
                          xresult.write (((xparse_args)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                          (((unsupported)) ((xkey)) ((((xlist)) ((((xvars)) ((xresult)))))))
                            seq
                              (((unsupported)) ((((xgetattr)) ((xresult)) ((xkey)))) (((xsys).xstdout))).if
                                bogusForceDataize.write (((xsetattr)) ((xresult)) ((xkey)) ((xold_stdout)))
                              (((unsupported)) ((((xgetattr)) ((xresult)) ((xkey)))) (((xsys).xstderr))).if
                                bogusForceDataize.write (((xsetattr)) ((xresult)) ((xkey)) ((xold_stderr)))
                          (((unsupported)) ((xresult)))
                        seq
                          xcode.write ((((unsupported)) (((((xsys).xexc_info)) 0)) (1)).xcode)
                          xstdout.write (((((xsys).xstdout).xgetvalue)) 0)
                          xstderr.write (((((xsys).xstderr).xgetvalue)) 0)
                          (((unsupported)) ((((xArgumentParserError)) ("SystemExit") ((xstdout)) ((xstderr)) ((xcode)))))
                      seq
                        (((unsupported)) (((xsys).xstdout)) ((xold_stdout)))
                        (((unsupported)) (((xsys).xstderr)) ((xold_stderr)))
            (((unsupported)) (((xargparse).xArgumentParser)))
              seq
                xparse_args.write
                  [xself]
                    memory > xparse_args
                    seq > @
                      (((unsupported)) 0)
                        xparse_args.write ((((xsuper)) ((xErrorRaisingArgumentParser)) ((xself))).xparse_args)
                        (((unsupported)) ((((xstderr_to_parser_error)) ((xparse_args)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                xexit.write
                  [xself]
                    memory > xexit
                    seq > @
                      (((unsupported)) 0)
                        xexit.write ((((xsuper)) ((xErrorRaisingArgumentParser)) ((xself))).xexit)
                        (((unsupported)) ((((xstderr_to_parser_error)) ((xexit)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                xerror.write
                  [xself]
                    memory > xerror
                    seq > @
                      (((unsupported)) 0)
                        xerror.write ((((xsuper)) ((xErrorRaisingArgumentParser)) ((xself))).xerror)
                        (((unsupported)) ((((xstderr_to_parser_error)) ((xerror)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
            (((unsupported)) ((xtype)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xcls xname xbases xbodydict]
                    memory > xone_group
                    memory > xtest_successes
                    memory > xtest_failures
                    memory > xno_groups
                    memory > x_get_parser
                    memory > x__init__
                    memory > xsysargs
                    memory > xlistargs
                    memory > xmany_groups
                    seq > @
                      seq
                        ((xname).eq "ParserTestCase").if
                          (((unsupported)) 0)
                        ((((xhasattr)) ((xcls)) ("parser_signature")).not).if
                          (((unsupported)) (((xcls).xparser_signature)) ((((xSig)) 0)))
                        ((((xhasattr)) ((xcls)) ("parser_class")).not).if
                          (((unsupported)) (((xcls).xparser_class)) ((xErrorRaisingArgumentParser)))
                        xno_groups.write
                          [xparser xargument_signatures]
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ((xsig)) ((xargument_signatures)))
                                  bogusForceDataize.write ((((xparser).xadd_argument)) ((((unsupported)) (((xsig).xargs)))) ((((unsupported)) (((xsig).xkwargs)))))
                        xone_group.write
                          [xparser xargument_signatures]
                            memory > xgroup
                            seq > @
                              seq
                                unsupported
                                xgroup.write ((((xparser).xadd_argument_group)) ("foo"))
                                (((unsupported)) ((xsig)) ((xargument_signatures)))
                                  bogusForceDataize.write ((((xgroup).xadd_argument)) ((((unsupported)) (((xsig).xargs)))) ((((unsupported)) (((xsig).xkwargs)))))
                        xmany_groups.write
                          [xparser xargument_signatures]
                            memory > xgroup
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ((((unsupported)) ((xi)) ((xsig)))) ((((xenumerate)) ((xargument_signatures)))))
                                  seq
                                    xgroup.write ((((xparser).xadd_argument_group)) (("foo:%i".mod (xi))))
                                    bogusForceDataize.write ((((xgroup).xadd_argument)) ((((unsupported)) (((xsig).xargs)))) ((((unsupported)) (((xsig).xkwargs)))))
                        xlistargs.write
                          [xparser xargs]
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) (((((xparser).xparse_args)) ((xargs)))))
                        xsysargs.write
                          [xparser xargs]
                            memory > xold_sys_argv
                            seq > @
                              seq
                                unsupported
                                xold_sys_argv.write ((xsys).xargv)
                                (((unsupported)) (((xsys).xargv)) (((((unsupported)) ((((unsupported)) ((xold_sys_argv)) (0)))).add (xargs))))
                                (((unsupported)) 0)
                                  (((unsupported)) (((((xparser).xparse_args)) 0)))
                                  (((unsupported)) (((xsys).xargv)) ((xold_sys_argv)))
                        (((unsupported)) ((xobject)))
                          seq
                            x__init__.write
                              [xself xtester_cls xadd_arguments xparse_args]
                                memory > xparse_args_name
                                memory > xtest_name
                                memory > xnames
                                memory > xwrapper
                                memory > xfunc_name
                                memory > xadd_arguments_name
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).x_add_arguments)) ((xadd_arguments)))
                                    (((unsupported)) (((xself).x_parse_args)) ((xparse_args)))
                                    xadd_arguments_name.write (((xself).x_add_arguments).x__name__)
                                    xparse_args_name.write (((xself).x_parse_args).x__name__)
                                    (((unsupported)) ((xtest_func)) ((((unsupported)) (((xself).xtest_failures)) (((xself).xtest_successes)))))
                                      seq
                                        xfunc_name.write ((xtest_func).x__name__)
                                        xnames.write (((unsupported)) ((xfunc_name)) ((xadd_arguments_name)) ((xparse_args_name)))
                                        xtest_name.write ((("_".xjoin)) ((xnames)))
                                        xwrapper.write
                                          [xself xtest_func]
                                            seq > @
                                              (((unsupported)) 0)
                                                bogusForceDataize.write (((xtest_func)) ((xself)))
                                        (((unsupported)) ((xTypeError)))
                                          (((unsupported)) (((xwrapper).x__name__)) ((xtest_name)))
                                        bogusForceDataize.write (((xsetattr)) ((xtester_cls)) ((xtest_name)) ((xwrapper)))
                            x_get_parser.write
                              [xself xtester]
                                memory > xargs
                                memory > xkwargs
                                memory > xparser
                                seq > @
                                  seq
                                    xargs.write (((xtester).xparser_signature).xargs)
                                    xkwargs.write (((xtester).xparser_signature).xkwargs)
                                    xparser.write ((((xtester).xparser_class)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                                    bogusForceDataize.write ((((xself).x_add_arguments)) ((xparser)) (((xtester).xargument_signatures)))
                                    (((unsupported)) ((xparser)))
                            xtest_failures.write
                              [xself xtester]
                                memory > xargs
                                memory > xparser
                                seq > @
                                  seq
                                    xparser.write ((((xself).x_get_parser)) ((xtester)))
                                    (((unsupported)) ((xargs_str)) (((xtester).xfailures)))
                                      seq
                                        xargs.write ((((xargs_str).xsplit)) 0)
                                        (((unsupported)) ((((unsupported)) (((xtester).xassertRaises)) ((xArgumentParserError)) ((xargs)))))
                                          bogusForceDataize.write ((((xparser).xparse_args)) ((xargs)))
                            xtest_successes.write
                              [xself xtester]
                                memory > xresult_ns
                                memory > xargs
                                memory > xparser
                                seq > @
                                  seq
                                    xparser.write ((((xself).x_get_parser)) ((xtester)))
                                    (((unsupported)) ((((unsupported)) ((xargs)) ((xexpected_ns)))) (((xtester).xsuccesses)))
                                      seq
                                        (((xisinstance)) ((xargs)) ((xstr))).if
                                          xargs.write ((((xargs).xsplit)) 0)
                                        xresult_ns.write ((((xself).x_parse_args)) ((xparser)) ((xargs)))
                                        bogusForceDataize.write ((((xtester).xassertEqual)) ((xexpected_ns)) ((xresult_ns)))
                        (((unsupported)) ((xadd_arguments)) ((((unsupported)) ((xno_groups)) ((xone_group)) ((xmany_groups)))))
                          (((unsupported)) ((xparse_args)) ((((unsupported)) ((xlistargs)) ((xsysargs)))))
                            bogusForceDataize.write (((xAddTests)) ((xcls)) ((xadd_arguments)) ((xparse_args)))
            xbases.write (((unsupported)) ((xTestCase)))
            xParserTestCase.write (((xParserTesterMetaclass)) ("ParserTestCase") ((xbases)) ((((unsupported)) 0)))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-x"))))
                xfailures.write (((unsupported)) ("-x") ("a") ("--foo") ("-x --foo") ("-x -y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-xa") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-x -1") ((((unsupported)) ((xNS)) ("-1"))))) ((((unsupported)) ("-x-1") ((((unsupported)) ((xNS)) ("-1"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("store_true"))) ((((unsupported)) ((xSig)) ("-yyy") ("store_const") (42))) ((((xSig)) ("-z"))))
                xfailures.write (((unsupported)) ("a") ("--foo") ("-xa") ("-x --foo") ("-x -z") ("-z -x") ("-yx") ("-yz a") ("-yyyx") ("-yyyza") ("-xyza"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-za") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-z a") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-xza") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-xz a") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-x -za") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-x -z a") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) (FALSE) (42) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-yyy") ((((unsupported)) ((xNS)) (FALSE) (42) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x -yyy -za") ((((unsupported)) ((xNS)) (TRUE) (42) ("a"))))) ((((unsupported)) ("-x -yyy -z a") ((((unsupported)) ((xNS)) (TRUE) (42) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-foo"))))
                xfailures.write (((unsupported)) ("-foo") ("a") ("--foo") ("-foo --foo") ("-foo -y") ("-fooa"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foo a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-foo -1") ((((unsupported)) ((xNS)) ("-1"))))) ((((unsupported)) ("-fo a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-f a") ((((unsupported)) ((xNS)) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-f"))) ((((xSig)) ("-foobar"))) ((((xSig)) ("-foorab"))))
                xfailures.write (((unsupported)) ("-f") ("-foo") ("-fo") ("-foo b") ("-foob") ("-fooba") ("-foora"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-fa") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foa") ((((unsupported)) ((xNS)) ("oa") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-fooa") ((((unsupported)) ((xNS)) ("ooa") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foobar a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foorab a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-foobar"))) ((((xSig)) ("-foorab"))))
                xfailures.write (((unsupported)) ("-f") ("-f a") ("-fa") ("-foa") ("-foo") ("-fo") ("-foo b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foob a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foor a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-fooba a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foora a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a"))))) ((((unsupported)) ("-foobar a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-foorab a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-1") ("one"))))
                xfailures.write (((unsupported)) ("-1") ("a") ("-1 --foo") ("-1 -y") ("-1 -1") ("-1 -2"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-1 a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-1a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("-1-2") ((((unsupported)) ((xNS)) ("-2"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("--foo"))))
                xfailures.write (((unsupported)) ("--foo") ("-f") ("-f a") ("a") ("--foo -x") ("--foo --bar"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--foo a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("--foo=a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("--foo -2.5") ((((unsupported)) ((xNS)) ("-2.5"))))) ((((unsupported)) ("--foo=-2.5") ((((unsupported)) ((xNS)) ("-2.5"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--badger") ("store_true"))) ((((xSig)) ("--bat"))))
                xfailures.write (((unsupported)) ("--bar") ("--b") ("--ba") ("--b=2") ("--ba=4") ("--badge 5"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--bat X") ((((unsupported)) ((xNS)) (FALSE) ("X"))))) ((((unsupported)) ("--bad") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badg") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badge") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badger") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--badger") ("store_true"))) ((((xSig)) ("--ba"))))
                xfailures.write (((unsupported)) ("--bar") ("--b") ("--ba") ("--b=2") ("--badge 5"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--ba X") ((((unsupported)) ((xNS)) (FALSE) ("X"))))) ((((unsupported)) ("--ba=X") ((((unsupported)) ((xNS)) (FALSE) ("X"))))) ((((unsupported)) ("--bad") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badg") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badge") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badger") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-f") ("store_true"))) ((((xSig)) ("--bar"))) ((((unsupported)) ((xSig)) ("-baz") ("store_const") (42))))
                xfailures.write (((unsupported)) ("--bar") ("-fbar") ("-fbaz") ("-bazf") ("-b B") ("B"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--ba B") ((((unsupported)) ((xNS)) (FALSE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f --bar B") ((((unsupported)) ((xNS)) (TRUE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f -b") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))) ((((unsupported)) ("-ba -f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("+:/") (FALSE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("+f") ("store_true"))) ((((xSig)) ("::bar"))) ((((unsupported)) ((xSig)) ("/baz") ("store_const") (42))))
                xfailures.write (((unsupported)) ("--bar") ("-fbar") ("-b B") ("B") ("-f") ("--bar B") ("-baz") ("-h") ("--help") ("+h") ("::help") ("/help"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("::ba B") ((((unsupported)) ((xNS)) (FALSE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f ::bar B") ((((unsupported)) ((xNS)) (TRUE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f /b") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))) ((((unsupported)) ("/ba +f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                (((unsupported)) 0)
                xparser_signature.write (((unsupported)) ((xSig)) ("+:/") (TRUE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("+f") ("store_true"))) ((((xSig)) ("::bar"))) ((((unsupported)) ((xSig)) ("/baz") ("store_const") (42))))
                xfailures.write (((unsupported)) ("--bar") ("-fbar") ("-b B") ("B") ("-f") ("--bar B") ("-baz"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("::ba B") ((((unsupported)) ((xNS)) (FALSE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f ::bar B") ((((unsupported)) ((xNS)) (TRUE) ("B") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+f /b") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))) ((((unsupported)) ("/ba +f") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") (42))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("+-") (FALSE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("store_true"))) ((((unsupported)) ((xSig)) ("+y") ("store_true"))) ((((unsupported)) ((xSig)) ("+z") ("store_true"))))
                xfailures.write (((unsupported)) ("-w") ("-xyz") ("+x") ("-y") ("+xyz"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (FALSE))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) (TRUE) (FALSE) (FALSE))))) ((((unsupported)) ("+y -x") ((((unsupported)) ((xNS)) (TRUE) (TRUE) (FALSE))))) ((((unsupported)) ("+yz -x") ((((unsupported)) ((xNS)) (TRUE) (TRUE) (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--verbose") ("-n") ("--noisy") ("store_true"))))
                xfailures.write (((unsupported)) ("--x --verbose") ("-N") ("a") ("-v x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE))))) ((((unsupported)) ("-v") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("--verbose") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("-n") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("--noisy") ((((unsupported)) ((xNS)) (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("--foo-bar"))) ((((unsupported)) ((xSig)) ("--baz") ("zabbaz"))))
                xfailures.write (((unsupported)) ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--foo-bar f") ((((unsupported)) ((xNS)) ("f") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--baz g") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("g"))))) ((((unsupported)) ("--foo-bar h --baz i") ((((unsupported)) ((xNS)) ("h") ("i"))))) ((((unsupported)) ("--baz j --foo-bar k") ((((unsupported)) ((xNS)) ("k") ("j"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-x"))) ((((unsupported)) ((xSig)) ("-y") (42))))
                xfailures.write (((unsupported)) ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (42))))) ((((unsupported)) ("-xx") ((((unsupported)) ((xNS)) ("x") (42))))) ((((unsupported)) ("-yy") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("y"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-x"))))
                xfailures.write (((unsupported)) ("a") ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (1))))
                xfailures.write (((unsupported)) ("a") ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (3))))
                xfailures.write (((unsupported)) ("a") ("-x") ("-x a") ("-x a b") ("a -x") ("a -x b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b") ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") ("?"))) ((((unsupported)) ((xSig)) ("-x") ("?") (42))) ((((unsupported)) ((xSig)) ("-y") ("?") ("spam"))) ((((unsupported)) ((xSig)) ("-z") ("?") ((xint)) ("42") ("84"))))
                xfailures.write (((unsupported)) ("2"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("spam") (84))))) ((((unsupported)) ("-w") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("spam") (84))))) ((((unsupported)) ("-w 2") ((((unsupported)) ((xNS)) ("2") ("None: is there a None literal in the EO language?") ("spam") (84))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (42) ("spam") (84))))) ((((unsupported)) ("-x 2") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("2") ("spam") (84))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (84))))) ((((unsupported)) ("-y 2") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("2") (84))))) ((((unsupported)) ("-z") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("spam") (42))))) ((((unsupported)) ("-z 2") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("spam") (2))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("*"))) ((((unsupported)) ((xSig)) ("-y") ("*") ("spam"))))
                xfailures.write (((unsupported)) ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("spam"))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ("spam"))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ("spam"))))) ((((unsupported)) ("-x a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("spam"))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))) ((((unsupported)) ("-y a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("-y a b") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("+"))) ((((unsupported)) ((xSig)) ("-y") ("+") ("spam"))))
                xfailures.write (((unsupported)) ("a") ("-x") ("-y") ("a -x") ("a -y b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("spam"))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ("spam"))))) ((((unsupported)) ("-x a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("spam"))))) ((((unsupported)) ("-y a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("-y a b") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-f") ("abc"))) ((((unsupported)) ((xSig)) ("-g") ((xint)) ((((xrange)) (5))))))
                xfailures.write (((unsupported)) ("a") ("-f d") ("-fad") ("-ga") ("-g 6"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-f c") ((((unsupported)) ((xNS)) ("c") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-g 0") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (0))))) ((((unsupported)) ("-g 03") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (3))))) ((((unsupported)) ("-fb -g4") ((((unsupported)) ((xNS)) ("b") (4))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ((xint)) (TRUE))))
                xfailures.write (((unsupported)) ("a") (""))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("-x 1") ((((unsupported)) ((xNS)) (1))))) ((((unsupported)) ("-x42") ((((unsupported)) ((xNS)) (42))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("store"))))
                xfailures.write (((unsupported)) ("a") ("a -x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-xfoo") ((((unsupported)) ((xNS)) ("foo"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-y") ("store_const") ((xobject)))))
                xfailures.write (((unsupported)) ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) ((xobject)))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-z") ("store_false"))))
                xfailures.write (((unsupported)) ("a") ("-za") ("-z a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("-z") ((((unsupported)) ((xNS)) (FALSE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--apple") ("store_true"))))
                xfailures.write (((unsupported)) ("a") ("--apple=b") ("--apple b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE))))) ((((unsupported)) ("--apple") ((((unsupported)) ((xNS)) (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--baz") ("append"))))
                xfailures.write (((unsupported)) ("a") ("--baz") ("a --baz") ("--baz a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--baz a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("--baz a --baz b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--baz") ("append") ((((unsupported)) ("X"))))))
                xfailures.write (((unsupported)) ("a") ("--baz") ("a --baz") ("--baz a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ((((unsupported)) ("X"))))))) ((((unsupported)) ("--baz a") ((((unsupported)) ((xNS)) ((((unsupported)) ("X") ("a"))))))) ((((unsupported)) ("--baz a --baz b") ((((unsupported)) ((xNS)) ((((unsupported)) ("X") ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-b") ("append_const") ((xException)))) ((((unsupported)) ((xSig)) ("-c") ("append") ("b"))))
                xfailures.write (((unsupported)) ("a") ("-c") ("a -c") ("-bx") ("-b x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-b") ((((unsupported)) ((xNS)) ((((unsupported)) ((xException)))))))) ((((unsupported)) ("-b -cx -b -cyz") ((((unsupported)) ((xNS)) ((((unsupported)) ((xException)) ("x") ((xException)) ("yz"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-b") ("append_const") ((xException)) ((((unsupported)) ("X"))))) ((((unsupported)) ((xSig)) ("-c") ("append") ("b"))))
                xfailures.write (((unsupported)) ("a") ("-c") ("a -c") ("-bx") ("-b x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ((((unsupported)) ("X"))))))) ((((unsupported)) ("-b") ((((unsupported)) ((xNS)) ((((unsupported)) ("X") ((xException)))))))) ((((unsupported)) ("-b -cx -b -cyz") ((((unsupported)) ((xNS)) ((((unsupported)) ("X") ((xException)) ("x") ((xException)) ("yz"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("count"))))
                xfailures.write (((unsupported)) ("a") ("-x a") ("-x b") ("-x a -x b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) (1))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("--foo"))) ((((xSig)) ("--foobaz"))) ((((unsupported)) ((xSig)) ("--fooble") ("store_true"))))
                xfailures.write (((unsupported)) ("--foob 5") ("--foob"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (FALSE))))) ((((unsupported)) ("--foo 7") ((((unsupported)) ((xNS)) ("7") ("None: is there a None literal in the EO language?") (FALSE))))) ((((unsupported)) ("--fooba a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a") (FALSE))))) ((((unsupported)) ("--foobl --foo g") ((((unsupported)) ((xNS)) ("g") ("None: is there a None literal in the EO language?") (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("--foo"))) ((((unsupported)) ((xSig)) ("--foodle") ("store_true"))) ((((xSig)) ("--foonly"))))
                xfailures.write (((unsupported)) ("-foon 3") ("--foon 3") ("--food") ("--food --foo 2"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--foo 3") ((((unsupported)) ((xNS)) ("3") (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--foonly 7 --foodle --foo 2") ((((unsupported)) ((xNS)) ("2") (TRUE) ("7"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("+") (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("++foo"))) ((((unsupported)) ((xSig)) ("++foodle") ("store_true"))) ((((xSig)) ("++foonly"))))
                xfailures.write (((unsupported)) ("+foon 3") ("++foon 3") ("++food") ("++food ++foo 2"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("++foo 3") ((((unsupported)) ((xNS)) ("3") (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("++foonly 7 ++foodle ++foo 2") ((((unsupported)) ((xNS)) ("2") (TRUE) ("7"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-r"))) ((((unsupported)) ((xSig)) ("-c") ("count"))))
                xfailures.write (((unsupported)) ("-r") ("-c -r"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-ra") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-rcc") ((((unsupported)) ((xNS)) ("cc") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-cc") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (2))))) ((((unsupported)) ("-cc -ra") ((((unsupported)) ((xNS)) ("a") (2))))) ((((unsupported)) ("-ccrcc") ((((unsupported)) ((xNS)) ("cc") (2))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("+") (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("+r"))) ((((unsupported)) ((xSig)) ("+c") ("count"))))
                xfailures.write (((unsupported)) ("+r") ("+c +r"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+ra") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+rcc") ((((unsupported)) ((xNS)) ("cc") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("+cc") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (2))))) ((((unsupported)) ("+cc +ra") ((((unsupported)) ((xNS)) ("a") (2))))) ((((unsupported)) ("+ccrcc") ((((unsupported)) ((xNS)) ("cc") (2))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))))
                xfailures.write (((unsupported)) ("") ("-x") ("a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (1))))
                xfailures.write (((unsupported)) ("") ("-x") ("a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (2))))
                xfailures.write (((unsupported)) ("") ("a") ("-x") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("*"))))
                xfailures.write (((unsupported)) ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ((((unsupported)) 0)))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("*") ("bar"))))
                xfailures.write (((unsupported)) ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("bar"))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("+"))))
                xfailures.write (((unsupported)) ("") ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))))
                xfailures.write (((unsupported)) ("-x") ("a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?") (42))))
                xfailures.write (((unsupported)) ("-x") ("a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (42))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                (((unsupported)) 0)
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?") ((xint)) ("42"))))
                xfailures.write (((unsupported)) ("-x") ("a b") ("1 2"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (42))))) ((((unsupported)) ("1") ((((unsupported)) ((xNS)) (1))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((xSig)) ("bar"))))
                xfailures.write (((unsupported)) ("") ("-x") ("a") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ("b"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (2))) ((((xSig)) ("bar"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("a b") ("a b c d"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("c"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("*"))))
                xfailures.write (((unsupported)) ("") ("--foo"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) 0)))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b") ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("+"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b") ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("?"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ("b"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("*"))) ((((xSig)) ("bar"))))
                xfailures.write (((unsupported)) ("") ("--foo"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ("a"))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ("b"))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("c"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("+"))) ((((xSig)) ("bar"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ("b"))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("c"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?") (42))) ((((xSig)) ("bar"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) (42) ("a"))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ("b"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (2))) ((((unsupported)) ((xSig)) ("bar") ("*"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) 0)))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (2))) ((((unsupported)) ((xSig)) ("bar") ("+"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("a b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") (2))) ((((unsupported)) ((xSig)) ("bar") ("?"))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("a b c d"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ("c"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("*"))) ((((unsupported)) ((xSig)) ("bar") (1))))
                xfailures.write (((unsupported)) ("") ("--foo"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("+"))) ((((unsupported)) ((xSig)) ("bar") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("*"))) ((((unsupported)) ((xSig)) ("baz") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) 0)) ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("+"))) ((((unsupported)) ((xSig)) ("baz") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("b"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) ((((unsupported)) ("c"))))))) ((((unsupported)) ("a b c d") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b") ("c"))) ((((unsupported)) ("d"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("foo"))) ((((unsupported)) ((xSig)) ("bar") ("?") (0.625))) ((((unsupported)) ((xSig)) ("baz") (1))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") (0.625) ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ("b") ((((unsupported)) ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") ("?") (42))))
                xfailures.write (((unsupported)) ("--foo") ("a b c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (42))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") (42))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ("b"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") ("*"))))
                xfailures.write (((unsupported)) ("--foo"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) 0)))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b") ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") ("+"))))
                xfailures.write (((unsupported)) ("") ("--foo"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b") ("c"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("spam") ((((xset)) ("abcdefg"))))))
                xfailures.write (((unsupported)) ("") ("--foo") ("h") ("42") ("ef"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("g") ((((unsupported)) ((xNS)) ("g"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("spam") ((xint)) ((((xrange)) (20))))))
                xfailures.write (((unsupported)) ("") ("--foo") ("h") ("42") ("ef"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("4") ((((unsupported)) ((xNS)) (4))))) ((((unsupported)) ("15") ((((unsupported)) ((xNS)) (15))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("spam") ("append"))) ((((unsupported)) ((xSig)) ("spam") ("append") (2))))
                xfailures.write (((unsupported)) ("") ("--foo") ("a") ("a b") ("a b c d"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a b c") ((((unsupported)) ((xNS)) ((((unsupported)) ("a") ((((unsupported)) ("b") ("c"))))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("x") ("?"))) ((((unsupported)) ((xSig)) ("-4") ("y") ("store_true"))))
                xfailures.write (((unsupported)) ("-2") ("-315"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") (FALSE))))) ((((unsupported)) ("-4") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (TRUE))))) ((((unsupported)) ("-4 a") ((((unsupported)) ((xNS)) ("a") (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("x") ("?"))) ((((unsupported)) ((xSig)) ("-k4") ("y") ("store_true"))))
                xfailures.write (((unsupported)) ("-k3"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE))))) ((((unsupported)) ("-2") ((((unsupported)) ((xNS)) ("-2") (FALSE))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") (FALSE))))) ((((unsupported)) ("-k4") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (TRUE))))) ((((unsupported)) ("-k4 a") ((((unsupported)) ((xNS)) ("a") (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("x") ("?"))) ((((unsupported)) ((xSig)) ("-y") ("--yyy") ("y"))))
                xfailures.write (((unsupported)) ("-y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ((((unsupported)) (""))) ((((unsupported)) ((xNS)) ("") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((unsupported)) ("a badger"))) ((((unsupported)) ((xNS)) ("a badger") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((unsupported)) ("-a badger"))) ((((unsupported)) ((xNS)) ("-a badger") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((unsupported)) ("-y") (""))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (""))))) ((((unsupported)) ((((unsupported)) ("-y") ("a badger"))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a badger"))))) ((((unsupported)) ((((unsupported)) ("-y") ("-a badger"))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("-a badger"))))) ((((unsupported)) ((((unsupported)) ("--yyy=a badger"))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("a badger"))))) ((((unsupported)) ((((unsupported)) ("--yyy=-a badger"))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("-a badger"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                xparser_signature.write (((unsupported)) ((xSig)) ("-+"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-") ("x") ("?") ("badger"))) ((((unsupported)) ((xSig)) ("+") ("y") ((xint)) (42))) ((((unsupported)) ((xSig)) ("-+-") ("z") ("store_true"))))
                xfailures.write (((unsupported)) ("-y") ("+ -"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (42) (FALSE))))) ((((unsupported)) ("-") ((((unsupported)) ((xNS)) ("badger") (42) (FALSE))))) ((((unsupported)) ("- X") ((((unsupported)) ((xNS)) ("X") (42) (FALSE))))) ((((unsupported)) ("+ -3") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((3.neg)) (FALSE))))) ((((unsupported)) ("-+-") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (42) (TRUE))))) ((((unsupported)) ("- ===") ((((unsupported)) ((xNS)) ("===") (42) (FALSE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("*"))) ((((unsupported)) ((xSig)) ("y") ("*"))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ((((unsupported)) 0)))))) ((((unsupported)) ("-x a") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ((((unsupported)) 0)))))) ((((unsupported)) ("-x a -- b") ((((unsupported)) ((xNS)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("a -x") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a -x b") ((((unsupported)) ((xNS)) ((((unsupported)) ("b"))) ((((unsupported)) ("a"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((xSig)) ("x"))) ((((unsupported)) ((xSig)) ("y") ("..."))) ((((xSig)) ("-z"))))
                xfailures.write (((unsupported)) ("") ("-z") ("-z Z"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("X") ((((unsupported)) ((xNS)) ("X") ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("-z Z X") ((((unsupported)) ((xNS)) ("X") ((((unsupported)) 0)) ("Z"))))) ((((unsupported)) ("X A B -z Z") ((((unsupported)) ((xNS)) ("X") ((((unsupported)) ("A") ("B") ("-z") ("Z"))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("X Y --foo") ((((unsupported)) ((xNS)) ("X") ((((unsupported)) ("Y") ("--foo"))) ("None: is there a None literal in the EO language?"))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ((xfloat)))) ((((unsupported)) ((xSig)) ("-3") ((xfloat)) ("y"))) ((((unsupported)) ((xSig)) ("z") ("*"))))
                xfailures.write (((unsupported)) ("-x") ("-y2.5") ("-xa") ("-x -a") ("-x -3") ("-x -3.5") ("-3 -3.5") ("-x -2.5") ("-x -2.5 a") ("-3 -.5") ("a x -1") ("-x -1 a") ("-3 -1 a"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))) ((((unsupported)) ("-x 2.5") ((((unsupported)) ((xNS)) (2.5) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))) ((((unsupported)) ("-x 2.5 a") ((((unsupported)) ((xNS)) (2.5) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("-3.5") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (0.5) ((((unsupported)) 0)))))) ((((unsupported)) ("-3-.5") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((0.5.neg)) ((((unsupported)) 0)))))) ((((unsupported)) ("-3 .5") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (0.5) ((((unsupported)) 0)))))) ((((unsupported)) ("a -3.5") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (0.5) ((((unsupported)) ("a"))))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("a -x 1") ((((unsupported)) ((xNS)) (1.0) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("-x 1 a") ((((unsupported)) ((xNS)) (1.0) ("None: is there a None literal in the EO language?") ((((unsupported)) ("a"))))))) ((((unsupported)) ("-3 1 a") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (1.0) ((((unsupported)) ("a"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?") (((xargparse).xSUPPRESS)))) ((((unsupported)) ((xSig)) ("bar") ("*") (((xargparse).xSUPPRESS)))) ((((unsupported)) ((xSig)) ("--baz") ("store_true") (((xargparse).xSUPPRESS)))))
                xfailures.write (((unsupported)) ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((xNS)) 0)))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("--baz") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("a --baz") ((((unsupported)) ((xNS)) ("a") (TRUE))))) ((((unsupported)) ("--baz a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (((xargparse).xSUPPRESS)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") ("*"))) ((((unsupported)) ((xSig)) ("--baz") ("store_true"))))
                xfailures.write (((unsupported)) ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((xNS)) 0)))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a"))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))))))) ((((unsupported)) ("--baz") ((((unsupported)) ((xNS)) (TRUE))))) ((((unsupported)) ("a --baz") ((((unsupported)) ((xNS)) ("a") (TRUE))))) ((((unsupported)) ("--baz a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) (TRUE))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (42))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--version") ("version") ("1.0"))) ((((unsupported)) ((xSig)) ("foo") ("?"))) ((((unsupported)) ((xSig)) ("bar") ("*"))) ((((unsupported)) ((xSig)) ("--baz") ("store_true"))))
                xfailures.write (((unsupported)) ("-x"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (42) (42) (42) (42))))) ((((unsupported)) ("a") ((((unsupported)) ((xNS)) ("a") (42) (42) (42))))) ((((unsupported)) ("a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) (42) (42))))) ((((unsupported)) ("--baz") ((((unsupported)) ((xNS)) (42) (42) (TRUE) (42))))) ((((unsupported)) ("a --baz") ((((unsupported)) ((xNS)) ("a") (42) (TRUE) (42))))) ((((unsupported)) ("--baz a b") ((((unsupported)) ((xNS)) ("a") ((((unsupported)) ("b"))) (TRUE) (42))))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xfile_texts
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestArgumentsFromFile)) ((xself))).xsetUp)) 0)
                        xfile_texts.write (((unsupported)) ((((unsupported)) ("hello") ("hello world!n"))) ((((unsupported)) ("recursive") ("-anAn@hello"))) ((((unsupported)) ("invalid") ("@no-such-pathn"))))
                        (((unsupported)) ((((unsupported)) ((xpath)) ((xtext)))) ((xfile_texts)))
                          (((unsupported)) ((((xopen)) ((xpath)) ("w"))) ((xfile)))
                            bogusForceDataize.write ((((xfile).xwrite)) ((xtext)))
                xparser_signature.write (((unsupported)) ((xSig)) ("@"))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-a"))) ((((xSig)) ("x"))) ((((unsupported)) ((xSig)) ("y") ("+"))))
                xfailures.write (((unsupported)) ("") ("-b") ("X") ("@invalid") ("@missing"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("X Y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("X") ((((unsupported)) ("Y"))))))) ((((unsupported)) ("X -a A Y Z") ((((unsupported)) ((xNS)) ("A") ("X") ((((unsupported)) ("Y") ("Z"))))))) ((((unsupported)) ("@hello X") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("hello world!") ((((unsupported)) ("X"))))))) ((((unsupported)) ("X @hello") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("X") ((((unsupported)) ("hello world!"))))))) ((((unsupported)) ("-a B @recursive Y Z") ((((unsupported)) ((xNS)) ("A") ("hello world!") ((((unsupported)) ("Y") ("Z"))))))) ((((unsupported)) ("X @recursive Z -a B") ((((unsupported)) ((xNS)) ("B") ("X") ((((unsupported)) ("hello world!") ("Z"))))))) ((((unsupported)) ((((unsupported)) ("-a") ("") ("X") ("Y"))) ((((unsupported)) ((xNS)) ("") ("X") ((((unsupported)) ("Y"))))))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xfile_texts
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestArgumentsFromFileConverter)) ((xself))).xsetUp)) 0)
                        xfile_texts.write (((unsupported)) ((((unsupported)) ("hello") ("hello world!n"))))
                        (((unsupported)) ((((unsupported)) ((xpath)) ((xtext)))) ((xfile_texts)))
                          (((unsupported)) ((((xopen)) ((xpath)) ("w"))) ((xfile)))
                            bogusForceDataize.write ((((xfile).xwrite)) ((xtext)))
                (((unsupported)) ((xErrorRaisingArgumentParser)))
                  xconvert_arg_line_to_args.write
                    [xself xarg_line]
                      seq > @
                        (((unsupported)) ((xarg)) (((((xarg_line).xsplit)) 0)))
                          seq
                            (((((xarg).xstrip)) 0).not).if
                              (((unsupported)) 0)
                            (((unsupported)) ((xarg)))
                xparser_class.write (xFromFileConverterArgumentParser)
                xparser_signature.write (((unsupported)) ((xSig)) ("@"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("y") ("+"))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("@hello X") ((((unsupported)) ((xNS)) ((((unsupported)) ("hello") ("world!") ("X"))))))))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_r.write
                  [xself]
                    memory > xtype
                    seq > @
                      seq
                        xtype.write ((((xargparse).xFileType)) ("r"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("FileType('r')") ((((xrepr)) ((xtype)))))
                xtest_wb_1.write
                  [xself]
                    memory > xtype
                    seq > @
                      seq
                        xtype.write ((((xargparse).xFileType)) ("wb") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("FileType('wb', 1)") ((((xrepr)) ((xtype)))))
                xtest_r_latin.write
                  [xself]
                    memory > xtype
                    seq > @
                      seq
                        xtype.write (((unsupported)) (((xargparse).xFileType)) ("r") ("latin_1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("FileType('r', encoding='latin_1')") ((((xrepr)) ((xtype)))))
                xtest_w_big5_ignore.write
                  [xself]
                    memory > xtype
                    seq > @
                      seq
                        xtype.write (((unsupported)) (((xargparse).xFileType)) ("w") ("big5") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("FileType('w', encoding='big5', errors='ignore')") ((((xrepr)) ((xtype)))))
                xtest_r_1_replace.write
                  [xself]
                    memory > xtype
                    seq > @
                      seq
                        xtype.write (((unsupported)) (((xargparse).xFileType)) ("r") (1) ("replace"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("FileType('r', 1, errors='replace')") ((((xrepr)) ((xtype)))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xattr]
                    seq > @
                      (((unsupported)) (((xself).xattr)) ((xattr)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (((xother).eq (((xgetattr)) ((xsys)) (((xself).xattr))))))
            xeq_stdin.write (((xStdStreamComparer)) ("stdin"))
            xeq_stdout.write (((xStdStreamComparer)) ("stdout"))
            xeq_stderr.write (((xStdStreamComparer)) ("stderr"))
            (((unsupported)) ((xobject)))
              seq
                xseen.write (((unsupported)) 0)
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)) (((xself).xname)) ((xname)))
                x__eq__.write
                  [xself xother]
                    memory > xtext
                    seq > @
                      seq
                        (((unsupported)) ((xother)) (((xself).xseen))).if
                          xtext.write (((unsupported)) (((xself).xseen)) ((xother)))
                          seq
                            (((unsupported)) ((xtext)) ((((unsupported)) (((xself).xseen)) ((xother)))) (((((xother).xread)) 0)))
                            bogusForceDataize.write ((((xother).xclose)) 0)
                        ((((xisinstance)) ((xtext)) ((xstr))).not).if
                          xtext.write ((((xtext).xdecode)) ("ascii"))
                        (((unsupported)) ((((unsupported)) (((xself).xname)) (((xother).xname)) ((xtext)))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestFileTypeR)) ((xself))).xsetUp)) 0)
                        (((unsupported)) ((xfile_name)) ((((unsupported)) ("foo") ("bar"))))
                          (((unsupported)) ((((xopen)) ((((((xos).xpath).xjoin)) (((xself).xtemp_dir)) ((xfile_name)))) ("w"))) ((xfile)))
                            bogusForceDataize.write ((((xfile).xwrite)) ((xfile_name)))
                        bogusForceDataize.write ((((xself).xcreate_readonly_file)) ("readonly"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (((((xargparse).xFileType)) 0)))) ((((unsupported)) ((xSig)) ("spam") (((((xargparse).xFileType)) ("r"))))))
                xfailures.write (((unsupported)) ("-x") ("") ("non-existent-file.txt"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("foo") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((xRFile)) ("foo"))))))) ((((unsupported)) ("-x foo bar") ((((unsupported)) ((xNS)) ((((xRFile)) ("foo"))) ((((xRFile)) ("bar"))))))) ((((unsupported)) ("bar -x foo") ((((unsupported)) ((xNS)) ((((xRFile)) ("foo"))) ((((xRFile)) ("bar"))))))) ((((unsupported)) ("-x - -") ((((unsupported)) ((xNS)) ((xeq_stdin)) ((xeq_stdin)))))) ((((unsupported)) ("readonly") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((xRFile)) ("readonly"))))))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xfile
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestFileTypeDefaults)) ((xself))).xsetUp)) 0)
                        xfile.write (((xopen)) ((((((xos).xpath).xjoin)) (((xself).xtemp_dir)) ("good"))) ("w"))
                        bogusForceDataize.write ((((xfile).xwrite)) ("good"))
                        bogusForceDataize.write ((((xfile).xclose)) 0)
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-c") (((((xargparse).xFileType)) ("r"))) ("no-file.txt"))))
                xfailures.write (((unsupported)) (""))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("-c good") ((((unsupported)) ((xNS)) ((((xRFile)) ("good"))))))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestFileTypeRB)) ((xself))).xsetUp)) 0)
                        (((unsupported)) ((xfile_name)) ((((unsupported)) ("foo") ("bar"))))
                          (((unsupported)) ((((xopen)) ((((((xos).xpath).xjoin)) (((xself).xtemp_dir)) ((xfile_name)))) ("w"))) ((xfile)))
                            bogusForceDataize.write ((((xfile).xwrite)) ((xfile_name)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (((((xargparse).xFileType)) ("rb"))))) ((((unsupported)) ((xSig)) ("spam") (((((xargparse).xFileType)) ("rb"))))))
                xfailures.write (((unsupported)) ("-x") (""))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("foo") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((xRFile)) ("foo"))))))) ((((unsupported)) ("-x foo bar") ((((unsupported)) ((xNS)) ((((xRFile)) ("foo"))) ((((xRFile)) ("bar"))))))) ((((unsupported)) ("bar -x foo") ((((unsupported)) ((xNS)) ((((xRFile)) ("foo"))) ((((xRFile)) ("bar"))))))) ((((unsupported)) ("-x - -") ((((unsupported)) ((xNS)) ((xeq_stdin)) ((xeq_stdin)))))))
            (((unsupported)) ((xobject)))
              seq
                xseen.write (((xset)) 0)
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)) (((xself).xname)) ((xname)))
                x__eq__.write
                  [xself xother]
                    memory > xtext
                    seq > @
                      seq
                        (((unsupported)) ((xother)) (((xself).xseen))).if
                          seq
                            xtext.write "Check that file is writable."
                            (((unsupported)) ("b") (((xother).xmode))).if
                              xtext.write ((((xtext).xencode)) ("ascii"))
                            bogusForceDataize.write ((((xother).xwrite)) ((xtext)))
                            bogusForceDataize.write ((((xother).xclose)) 0)
                            bogusForceDataize.write (((((xself).xseen).xadd)) ((xother)))
                        (((unsupported)) ((((xself).xname).eq ((xother).xname))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)) (((((xunittest).xskipIf)) (((((xhasattr)) ((xos)) ("geteuid")).and (((((xos).xgeteuid)) 0).eq 0))) ("non-root user required"))))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestFileTypeW)) ((xself))).xsetUp)) 0)
                        bogusForceDataize.write ((((xself).xcreate_readonly_file)) ("readonly"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (((((xargparse).xFileType)) ("w"))))) ((((unsupported)) ((xSig)) ("spam") (((((xargparse).xFileType)) ("w"))))))
                xfailures.write (((unsupported)) ("-x") ("") ("readonly"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("foo") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((xWFile)) ("foo"))))))) ((((unsupported)) ("-x foo bar") ((((unsupported)) ((xNS)) ((((xWFile)) ("foo"))) ((((xWFile)) ("bar"))))))) ((((unsupported)) ("bar -x foo") ((((unsupported)) ((xNS)) ((((xWFile)) ("foo"))) ((((xWFile)) ("bar"))))))) ((((unsupported)) ("-x - -") ((((unsupported)) ((xNS)) ((xeq_stdout)) ((xeq_stdout)))))))
            (((unsupported)) ((xTempDirMixin)) ((xParserTestCase)))
              seq
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (((((xargparse).xFileType)) ("wb"))))) ((((unsupported)) ((xSig)) ("spam") (((((xargparse).xFileType)) ("wb"))))))
                xfailures.write (((unsupported)) ("-x") (""))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("foo") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ((((xWFile)) ("foo"))))))) ((((unsupported)) ("-x foo bar") ((((unsupported)) ((xNS)) ((((xWFile)) ("foo"))) ((((xWFile)) ("bar"))))))) ((((unsupported)) ("bar -x foo") ((((unsupported)) ((xNS)) ((((xWFile)) ("foo"))) ((((xWFile)) ("bar"))))))) ((((unsupported)) ("-x - -") ((((unsupported)) ((xNS)) ((xeq_stdout)) ((xeq_stdout)))))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xtest_open_args.write
                  [xself]
                    memory > xcases
                    memory > xFT
                    seq > @
                      seq
                        xFT.write ((xargparse).xFileType)
                        xcases.write (((unsupported)) ((((unsupported)) ((((xFT)) ("rb"))) ((((unsupported)) ("rb") ((1.neg)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((xFT)) ("w") (1))) ((((unsupported)) ("w") (1) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((unsupported)) ((xFT)) ("w") ("replace"))) ((((unsupported)) ("w") ((1.neg)) ("None: is there a None literal in the EO language?") ("replace"))))) ((((unsupported)) ((((unsupported)) ((xFT)) ("wb") ("big5"))) ((((unsupported)) ("wb") ((1.neg)) ("big5") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((xFT)) ("w") (0) ("l1") ("strict"))) ((((unsupported)) ("w") (0) ("l1") ("strict"))))))
                        (((unsupported)) (((((xmock).xpatch)) ("builtins.open"))) ((xm)))
                          (((unsupported)) ((((unsupported)) ((xtype)) ((xargs)))) ((xcases)))
                            seq
                              bogusForceDataize.write (((xtype)) ("foo"))
                              bogusForceDataize.write ((((xm).xassert_called_with)) ("foo") ((((unsupported)) ((xargs)))))
            (((unsupported)) ((xTestCase)))
              seq
                (((unsupported)) 0)
                xtest.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("-x") (((xargparse).xFileType)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("%r is a FileType class object, instance of it must be passed".mod (((unsupported)) (((xargparse).xFileType))))) ((((xstr)) (((xcm).xexception)))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--eggs") ((xcomplex)))) ((((unsupported)) ((xSig)) ("spam") ((xfloat)))))
                xfailures.write (((unsupported)) ("a") ("42j") ("--eggs a") ("--eggs 2i"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--eggs=42 42") ((((unsupported)) ((xNS)) (42) (42.0))))) ((((unsupported)) ("--eggs 2j -- -1.5") ((((unsupported)) ((xNS)) ((((unsupported)) 0)) ((1.5.neg)))))) ((((unsupported)) ("1024.675") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (1024.675))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                (((unsupported)) ((xTestCase)))
                  seq
                    x__init__.write
                      [xself xvalue]
                        seq > @
                          (((unsupported)) (((xself).xvalue)) ((xvalue)))
                    x__eq__.write
                      [xself xother]
                        seq > @
                          (((unsupported)) (((((unsupported)) ((((xtype)) ((xself)))) (((xself).xvalue))).eq (((unsupported)) ((((xtype)) ((xother)))) (((xother).xvalue))))))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ((xMyType)))) ((((unsupported)) ((xSig)) ("spam") ((xMyType)))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a -x b") ((((unsupported)) ((xNS)) ((((xMyType)) ("b"))) ((((xMyType)) ("a"))))))) ((((unsupported)) ("-xf g") ((((unsupported)) ((xNS)) ((((xMyType)) ("f"))) ((((xMyType)) ("g"))))))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                (((unsupported)) 0)
                  seq
                    x__init__.write
                      [xself xvalue]
                        seq > @
                          (((unsupported)) (((xself).xvalue)) ((xvalue)))
                    x__eq__.write
                      [xself xother]
                        seq > @
                          (((unsupported)) (((((unsupported)) ((((xtype)) ((xself)))) (((xself).xvalue))).eq (((unsupported)) ((((xtype)) ((xother)))) (((xother).xvalue))))))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ((xC)))) ((((unsupported)) ((xSig)) ("spam") ((xC)))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("a -x b") ((((unsupported)) ((xNS)) ((((xC)) ("b"))) ((((xC)) ("a"))))))) ((((unsupported)) ("-xf g") ((((unsupported)) ((xNS)) ((((xC)) ("f"))) ((((xC)) ("g"))))))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xtest.write
                  [xself]
                    memory > xget_my_type
                    memory > xparser
                    seq > @
                      seq
                        xget_my_type.write
                          [xstring]
                            seq > @
                              (((unsupported)) (("my_type{%s}".mod (xstring))))
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xregister)) ("type") ("my_type") ((xget_my_type)))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("my_type"))
                        (((unsupported)) (((xparser).xadd_argument)) ("y") ("my_type"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("1".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("my_type{1}"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("-x 1 42".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("my_type{1}") ("my_type{42}"))))
            (((unsupported)) ((xParserTestCase)))
              seq
                unsupported
                (((unsupported)) (((xargparse).xAction)))
                  x__call__.write
                    [xself xparser xnamespace xvalue xoption_string]
                      memory > xe
                      memory > xexpected_ns
                      seq > @
                        (((unsupported)) 0)
                          (((unsupported)) ((xAssertionError)))
                            seq
                              (((unsupported)) ((((xself).xdest).eq "spam")) (("dest: %s".mod ((xself).xdest))))
                              (((unsupported)) (((xoption_string).eq "-s")) (("flag: %s".mod (xoption_string))))
                              xexpected_ns.write (((unsupported)) ((xNS)) (0.25))
                              (((unsupported)) ((xvalue)) ((((unsupported)) (0.125) (0.625)))).if
                                (((unsupported)) (((xexpected_ns).xbadger)) (2))
                                (((unsupported)) ((xvalue)) ((((unsupported)) (2.0)))).if
                                  (((unsupported)) (((xexpected_ns).xbadger)) (84))
                                  (((unsupported)) ((((xAssertionError)) (("value: %s".mod (xvalue))))))
                              (((unsupported)) (((xexpected_ns).eq (xnamespace))) (("expected %s, got %s".mod (((unsupported)) ((xexpected_ns)) ((xnamespace))))))
                            seq
                              xe.write (((unsupported)) (((((xsys).xexc_info)) 0)) (1))
                              (((unsupported)) ((((xArgumentParserError)) (("opt_action failed: %s".mod (xe))))))
                          bogusForceDataize.write (((xsetattr)) ((xnamespace)) ("spam") ((xvalue)))
                (((unsupported)) (((xargparse).xAction)))
                  x__call__.write
                    [xself xparser xnamespace xvalue xoption_string]
                      memory > xe
                      memory > xexpected_ns
                      seq > @
                        (((unsupported)) 0)
                          (((unsupported)) ((xAssertionError)))
                            seq
                              (((unsupported)) ((((unsupported)) ((xoption_string)) ("None: is there a None literal in the EO language?"))) (("option_string: %s".mod (xoption_string))))
                              (((unsupported)) ((((xself).xdest).eq "badger")) (("dest: %s".mod ((xself).xdest))))
                              xexpected_ns.write (((unsupported)) ((xNS)) (2))
                              (((unsupported)) ((xvalue)) ((((unsupported)) (42) (84)))).if
                                (((unsupported)) (((xexpected_ns).xspam)) (0.25))
                                (((unsupported)) ((xvalue)) ((((unsupported)) (1)))).if
                                  (((unsupported)) (((xexpected_ns).xspam)) (0.625))
                                  (((unsupported)) ((xvalue)) ((((unsupported)) (2)))).if
                                    (((unsupported)) (((xexpected_ns).xspam)) (0.125))
                                    (((unsupported)) ((((xAssertionError)) (("value: %s".mod (xvalue))))))
                              (((unsupported)) (((xexpected_ns).eq (xnamespace))) (("expected %s, got %s".mod (((unsupported)) ((xexpected_ns)) ((xnamespace))))))
                            seq
                              xe.write (((unsupported)) (((((xsys).xexc_info)) 0)) (1))
                              (((unsupported)) ((((xArgumentParserError)) (("arg_action failed: %s".mod (xe))))))
                          bogusForceDataize.write (((xsetattr)) ((xnamespace)) ("badger") ((xvalue)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-s") ("spam") ((xOptionalAction)) ((xfloat)) (0.25))) ((((unsupported)) ((xSig)) ("badger") ((xPositionalAction)) ((xint)) ("?") (2))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("-s0.125") ((((unsupported)) ((xNS)) (0.125) (2))))) ((((unsupported)) ("42") ((((unsupported)) ((xNS)) (0.25) (42))))) ((((unsupported)) ("-s 0.625 1") ((((unsupported)) ((xNS)) (0.625) (1))))) ((((unsupported)) ("84 -s2") ((((unsupported)) ((xNS)) (2.0) (84))))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                (((unsupported)) (((xargparse).xAction)))
                  x__call__.write
                    [xself xparser xnamespace xvalues xoption_string]
                      seq > @
                        (((unsupported)) 0)
                          bogusForceDataize.write (((xsetattr)) ((xnamespace)) (((xself).xdest)) (("foo[%s]".mod (xvalues))))
                xtest.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xregister)) ("action") ("my_action") (((xself).xMyAction)))
                        (((unsupported)) (((xparser).xadd_argument)) ("badger") ("my_action"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) ((((unsupported)) ("1"))))) ((((unsupported)) ((xNS)) ("foo[1]"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) ((((unsupported)) ("42"))))) ((((unsupported)) ((xNS)) ("foo[42]"))))
            (((unsupported)) ((xParserTestCase)))
              seq
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("extend") ("+") ((xstr)))))
                xfailures.write (((unsupported)) 0)
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--foo f1 --foo f2 f3 f4") ((((unsupported)) ((xNS)) ((((unsupported)) ("f1") ("f2") ("f3") ("f4"))))))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xassertArgumentParserError.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xArgumentParserError)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                x_get_parser.write
                  [xself xsubparser_help xprefix_chars xaliases]
                    memory > xparser1_kwargs
                    memory > xparser1
                    memory > xparser
                    memory > xsubparsers_kwargs
                    memory > xparser2
                    memory > xparser3_kwargs
                    memory > xparser2_kwargs
                    memory > xparser3
                    memory > xsubparsers
                    seq > @
                      (((unsupported)) 0)
                        (xprefix_chars).if
                          seq
                            xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") ("main description") ((xprefix_chars)))
                            (((unsupported)) (((xparser).xadd_argument)) ((((((unsupported)) ((xprefix_chars)) (0)).mul 2).add "foo")) ("store_true") ("foo help"))
                          seq
                            xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") ("main description"))
                            (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("store_true") ("foo help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("bar") ((xfloat)) ("bar help"))
                        xsubparsers_kwargs.write (((unsupported)) ("required") (FALSE))
                        (xaliases).if
                          seq
                            (((unsupported)) ((((unsupported)) ((xsubparsers_kwargs)) ("metavar"))) ("COMMAND"))
                            (((unsupported)) ((((unsupported)) ((xsubparsers_kwargs)) ("title"))) ("commands"))
                          (((unsupported)) ((((unsupported)) ((xsubparsers_kwargs)) ("help"))) ("command help"))
                        xsubparsers.write ((((xparser).xadd_subparsers)) ((((unsupported)) ((xsubparsers_kwargs)))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xadd_subparsers)))
                        xparser1_kwargs.write (((unsupported)) ((xdict)) ("1 description"))
                        (xsubparser_help).if
                          (((unsupported)) ((((unsupported)) ((xparser1_kwargs)) ("help"))) ("1 help"))
                        (xaliases).if
                          (((unsupported)) ((((unsupported)) ((xparser1_kwargs)) ("aliases"))) ((((unsupported)) ("1alias1") ("1alias2"))))
                        xparser1.write ((((xsubparsers).xadd_parser)) ("1") ((((unsupported)) ((xparser1_kwargs)))))
                        (((unsupported)) (((xparser1).xadd_argument)) ("-w") ((xint)) ("w help"))
                        (((unsupported)) (((xparser1).xadd_argument)) ("x") ("abc") ("x help"))
                        xparser2_kwargs.write (((unsupported)) ((xdict)) ("2 description"))
                        (xsubparser_help).if
                          (((unsupported)) ((((unsupported)) ((xparser2_kwargs)) ("help"))) ("2 help"))
                        xparser2.write ((((xsubparsers).xadd_parser)) ("2") ((((unsupported)) ((xparser2_kwargs)))))
                        (((unsupported)) (((xparser2).xadd_argument)) ("-y") ("123") ("y help"))
                        (((unsupported)) (((xparser2).xadd_argument)) ("z") ((xcomplex)) ("*") ("z help"))
                        xparser3_kwargs.write (((unsupported)) ((xdict)) ("3 description"))
                        (xsubparser_help).if
                          (((unsupported)) ((((unsupported)) ((xparser3_kwargs)) ("help"))) ("3 help"))
                        xparser3.write ((((xsubparsers).xadd_parser)) ("3") ((((unsupported)) ((xparser3_kwargs)))))
                        (((unsupported)) (((xparser3).xadd_argument)) ("t") ((xint)) ("t help"))
                        (((unsupported)) (((xparser3).xadd_argument)) ("u") ("...") ("u help"))
                        (((unsupported)) ((xparser)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xparser)) (((((xself).x_get_parser)) 0)))
                        (((unsupported)) (((xself).xcommand_help_parser)) ((((unsupported)) (((xself).x_get_parser)) (TRUE))))
                xtest_parse_args_failures.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) ((xargs_str)) ((((unsupported)) ("") ("a") ("a a") ("0.5 a") ("0.5 1") ("0.5 1 -y") ("0.5 2 -w"))))
                        seq
                          xargs.write ((((xargs_str).xsplit)) 0)
                          bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((((xself).xparser).xparse_args)) ((xargs)))
                xtest_parse_args.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_args)) (((("0.5 1 b -w 7".xsplit)) 0)))) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_args)) (((("0.25 --foo 2 -y 2 3j -- -1j".xsplit)) 0)))) ((((unsupported)) ((xNS)) (TRUE) (0.25) ("2") ((((unsupported)) ((((unsupported)) 0)) (((((unsupported)) 0).neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_args)) (((("--foo 0.125 1 c".xsplit)) 0)))) ((((unsupported)) ((xNS)) (TRUE) (0.125) ("None: is there a None literal in the EO language?") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_args)) (((("-1.5 3 11 -- a --foo 7 -- b".xsplit)) 0)))) ((((unsupported)) ((xNS)) (FALSE) ((1.5.neg)) (11) ((((unsupported)) ("a") ("--foo") ("7") ("--") ("b"))))))
                xtest_parse_known_args.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_known_args)) (((("0.5 1 b -w 7".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_known_args)) (((("0.5 -p 1 b -w 7".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))) ((((unsupported)) ("-p"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_known_args)) (((("0.5 1 b -w 7 -p".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))) ((((unsupported)) ("-p"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_known_args)) (((("0.5 1 b -q -rs -w 7".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))) ((((unsupported)) ("-q") ("-rs"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xparse_known_args)) (((("0.5 -W 1 b -X Y -w 7 Z".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) (7) ("b"))) ((((unsupported)) ("-W") ("-X") ("Y") ("Z"))))))
                xtest_dest.write
                  [xself]
                    memory > xparser
                    memory > xsubparsers
                    memory > xparser1
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("store_true"))
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("bar"))
                        xparser1.write ((((xsubparsers).xadd_parser)) ("1"))
                        bogusForceDataize.write ((((xparser1).xadd_argument)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) (FALSE) ("1") ("2"))) (((((xparser).xparse_args)) (((("1 2".xsplit)) 0)))))
                x_test_required_subparsers.write
                  [xself xparser]
                    memory > xret
                    seq > @
                      seq
                        xret.write ((((xparser).xparse_args)) ((((unsupported)) ("run"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xret).xcommand)) ("run"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) ((((unsupported)) 0)))
                xtest_required_subparsers_via_attribute.write
                  [xself]
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("command"))
                        (((unsupported)) (((xsubparsers).xrequired)) (TRUE))
                        bogusForceDataize.write ((((xsubparsers).xadd_parser)) ("run"))
                        bogusForceDataize.write ((((xself).x_test_required_subparsers)) ((xparser)))
                xtest_required_subparsers_via_kwarg.write
                  [xself]
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("command") (TRUE))
                        bogusForceDataize.write ((((xsubparsers).xadd_parser)) ("run"))
                        bogusForceDataize.write ((((xself).x_test_required_subparsers)) ((xparser)))
                xtest_required_subparsers_default.write
                  [xself]
                    memory > xret
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("command"))
                        bogusForceDataize.write ((((xsubparsers).xadd_parser)) ("run"))
                        xret.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xret).xcommand)))
                xtest_optional_subparsers.write
                  [xself]
                    memory > xret
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("command") (FALSE))
                        bogusForceDataize.write ((((xsubparsers).xadd_parser)) ("run"))
                        xret.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xret).xcommand)))
                xtest_help.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xformat_usage)) 0)) ("usage: PROG [-h] [--foo] bar {1,2,3} ...n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_help_extra_prefix_chars.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xself).x_get_parser)) ("+:-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_usage)) 0)) ("usage: PROG [-h] [++foo] bar {1,2,3} ...n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_help_non_breaking_spaces.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") ("main description"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--non-breaking") ("store_false") ("help message containing non-breaking spaces shall not wrapN{NO-BREAK SPACE}at non-breaking spaces"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_help_alternate_prefix_chars.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xself).x_get_parser)) ("+:/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_usage)) 0)) ("usage: PROG [+h] [++foo] bar {1,2,3} ...n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_parser_command_help.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcommand_help_parser).xformat_usage)) 0)) ("usage: PROG [-h] [--foo] bar {1,2,3} ...n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcommand_help_parser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_subparser_title_help.write
                  [xself]
                    memory > xparser2
                    memory > xparser
                    memory > xsubparsers
                    memory > xparser1
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") ("main description"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("store_true") ("foo help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("bar") ("bar help"))
                        xsubparsers.write (((unsupported)) (((xparser).xadd_subparsers)) ("subcommands") ("command help") ("additional text"))
                        xparser1.write ((((xsubparsers).xadd_parser)) ("1"))
                        xparser2.write ((((xsubparsers).xadd_parser)) ("2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_usage)) 0)) ("usage: PROG [-h] [--foo] bar {1,2} ...n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                x_test_subparser_help.write
                  [xself xargs_str xexpected_help]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xparser).xparse_args)) (((((xargs_str).xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_help)) ((((xcm).xexception).xstdout)))
                xtest_subparser1_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_subparser_help)) ("5.0 1 -h") (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_subparser2_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_subparser_help)) ("5.0 2 -h") (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_alias_invocation.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xself).x_get_parser)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_known_args)) (((("0.5 1alias1 b".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) ("None: is there a None literal in the EO language?") ("b"))) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_known_args)) (((("0.5 1alias2 b".xsplit)) 0)))) ((((unsupported)) ((((unsupported)) ((xNS)) (FALSE) (0.5) ("None: is there a None literal in the EO language?") ("b"))) ((((unsupported)) 0)))))
                xtest_error_alias_invocation.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xself).x_get_parser)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) (((("0.5 1alias3 b".xsplit)) 0)))
                xtest_alias_help.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xself).x_get_parser)) (TRUE) (TRUE))
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xtest_nongroup_first.write
                  [xself]
                    memory > xexpected
                    memory > xgroup
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("foo"))
                        xgroup.write ((((xparser).xadd_argument_group)) ("g"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("bar"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("baz"))
                        xexpected.write (((unsupported)) ((xNS)) ("1") ("2") ("3"))
                        xresult.write ((((xparser).xparse_args)) (((("1 2 3".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xresult)))
                xtest_group_first.write
                  [xself]
                    memory > xexpected
                    memory > xgroup
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xgroup.write ((((xparser).xadd_argument_group)) ("xxx"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("foo"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("bar"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("baz"))
                        xexpected.write (((unsupported)) ((xNS)) ("1") ("2") ("3"))
                        xresult.write ((((xparser).xparse_args)) (((("1 2 3".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xresult)))
                xtest_interleaved_groups.write
                  [xself]
                    memory > xexpected
                    memory > xgroup
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xgroup.write ((((xparser).xadd_argument_group)) ("xxx"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("foo"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("bar"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("baz"))
                        xgroup.write ((((xparser).xadd_argument_group)) ("yyy"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("frell"))
                        xexpected.write (((unsupported)) ((xNS)) ("1") ("2") ("3") ("4"))
                        xresult.write ((((xparser).xparse_args)) (((("1 2 3 4".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xresult)))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xassertArgumentParserError.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xArgumentParserError)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                xsetUp.write
                  [xself]
                    memory > xgroup
                    memory > xc_group
                    memory > xx_group
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xwxyz_parent)) ((((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))))
                        bogusForceDataize.write (((((xself).xwxyz_parent).xadd_argument)) ("--w"))
                        xx_group.write (((((xself).xwxyz_parent).xadd_argument_group)) ("x"))
                        bogusForceDataize.write ((((xx_group).xadd_argument)) ("-y"))
                        bogusForceDataize.write (((((xself).xwxyz_parent).xadd_argument)) ("z"))
                        (((unsupported)) (((xself).xabcd_parent)) ((((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))))
                        bogusForceDataize.write (((((xself).xabcd_parent).xadd_argument)) ("a"))
                        bogusForceDataize.write (((((xself).xabcd_parent).xadd_argument)) ("-b"))
                        xc_group.write (((((xself).xabcd_parent).xadd_argument_group)) ("c"))
                        bogusForceDataize.write ((((xc_group).xadd_argument)) ("--d"))
                        (((unsupported)) (((xself).xw_parent)) ((((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))))
                        bogusForceDataize.write (((((xself).xw_parent).xadd_argument)) ("--w"))
                        (((unsupported)) (((xself).xz_parent)) ((((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))))
                        bogusForceDataize.write (((((xself).xz_parent).xadd_argument)) ("z"))
                        (((unsupported)) (((xself).xab_mutex_parent)) ((((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))))
                        xgroup.write (((((xself).xab_mutex_parent).xadd_mutually_exclusive_group)) 0)
                        (((unsupported)) (((xgroup).xadd_argument)) ("-a") ("store_true"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-b") ("store_true"))
                        (((unsupported)) (((xself).xmain_program)) ((((((xos).xpath).xbasename)) ((((unsupported)) (((xsys).xargv)) (0))))))
                xtest_single_parent.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((((unsupported)) (((xself).xwxyz_parent)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("-y 1 2 --w 3".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("3") ("1") ("2"))))
                xtest_single_parent_mutex.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_mutex_ab)) ((((xself).xab_mutex_parent).xparse_args)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((((unsupported)) (((xself).xab_mutex_parent)))))
                        bogusForceDataize.write ((((xself).x_test_mutex_ab)) (((xparser).xparse_args)))
                xtest_single_granparent_mutex.write
                  [xself]
                    memory > xparents
                    memory > xparser
                    seq > @
                      seq
                        xparents.write (((unsupported)) (((xself).xab_mutex_parent)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE) ((xparents)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((((unsupported)) ((xparser)))))
                        bogusForceDataize.write ((((xself).x_test_mutex_ab)) (((xparser).xparse_args)))
                x_test_mutex_ab.write
                  [xself xparse_args]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xparse_args)) ((((unsupported)) 0)))) ((((unsupported)) ((xNS)) (FALSE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xparse_args)) ((((unsupported)) ("-a"))))) ((((unsupported)) ((xNS)) (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xparse_args)) ((((unsupported)) ("-b"))))) ((((unsupported)) ((xNS)) (FALSE) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparse_args)) ((((unsupported)) ("-a") ("-b"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparse_args)) ((((unsupported)) ("-b") ("-a"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparse_args)) ((((unsupported)) ("-c"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparse_args)) ((((unsupported)) ("-a") ("-c"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparse_args)) ((((unsupported)) ("-b") ("-c"))))
                xtest_multiple_parents.write
                  [xself]
                    memory > xparents
                    memory > xparser
                    seq > @
                      seq
                        xparents.write (((unsupported)) (((xself).xabcd_parent)) (((xself).xwxyz_parent)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((xparents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("--d 1 --w 2 3 4".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("3") ("None: is there a None literal in the EO language?") ("1") ("2") ("None: is there a None literal in the EO language?") ("4"))))
                xtest_multiple_parents_mutex.write
                  [xself]
                    memory > xparents
                    memory > xparser
                    seq > @
                      seq
                        xparents.write (((unsupported)) (((xself).xab_mutex_parent)) (((xself).xwxyz_parent)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((xparents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("-a --w 2 3".xsplit)) 0)))) ((((unsupported)) ((xNS)) (TRUE) (FALSE) ("2") ("None: is there a None literal in the EO language?") ("3"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) (((("-a --w 2 3 -b".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) (((("-a -b --w 2 3".xsplit)) 0)))
                xtest_conflicting_parents.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) (((xargparse).xArgumentError)) (((xargparse).xArgumentParser)) ((((unsupported)) (((xself).xw_parent)) (((xself).xwxyz_parent)))))
                xtest_conflicting_parents_mutex.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) (((xargparse).xArgumentError)) (((xargparse).xArgumentParser)) ((((unsupported)) (((xself).xabcd_parent)) (((xself).xab_mutex_parent)))))
                xtest_same_argument_name_parents.write
                  [xself]
                    memory > xparents
                    memory > xparser
                    seq > @
                      seq
                        xparents.write (((unsupported)) (((xself).xwxyz_parent)) (((xself).xz_parent)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((xparents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("1 2".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("2"))))
                xtest_subparser_parents.write
                  [xself]
                    memory > xabcde_parser
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write ((((xparser).xadd_subparsers)) 0)
                        xabcde_parser.write (((unsupported)) (((xsubparsers).xadd_parser)) ("bar") ((((unsupported)) (((xself).xabcd_parent)))))
                        bogusForceDataize.write ((((xabcde_parser).xadd_argument)) ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("bar -b 1 --d 2 3 4".xsplit)) 0)))) ((((unsupported)) ((xNS)) ("3") ("1") ("2") ("4"))))
                xtest_subparser_parents_mutex.write
                  [xself]
                    memory > xparents
                    memory > xabc_parser
                    memory > xparser
                    memory > xc_group
                    memory > xsubparsers
                    memory > xwxyzabe_parser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xsubparsers.write ((((xparser).xadd_subparsers)) 0)
                        xparents.write (((unsupported)) (((xself).xab_mutex_parent)))
                        xabc_parser.write (((unsupported)) (((xsubparsers).xadd_parser)) ("foo") ((xparents)))
                        xc_group.write ((((xabc_parser).xadd_argument_group)) ("c_group"))
                        bogusForceDataize.write ((((xc_group).xadd_argument)) ("c"))
                        xparents.write (((unsupported)) (((xself).xwxyz_parent)) (((xself).xab_mutex_parent)))
                        xwxyzabe_parser.write (((unsupported)) (((xsubparsers).xadd_parser)) ("bar") ((xparents)))
                        bogusForceDataize.write ((((xwxyzabe_parser).xadd_argument)) ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("foo -a 4".xsplit)) 0)))) ((((unsupported)) ((xNS)) (TRUE) (FALSE) ("4"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xparse_args)) (((("bar -b  --w 2 3 4".xsplit)) 0)))) ((((unsupported)) ((xNS)) (FALSE) (TRUE) ("2") ("None: is there a None literal in the EO language?") ("3") ("4"))))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) (((("foo -a -b 4".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) (((xparser).xparse_args)) (((("bar -b -a 4".xsplit)) 0)))
                xtest_parent_help.write
                  [xself]
                    memory > xparents
                    memory > xprogname
                    memory > xparser_help
                    memory > xparser
                    seq > @
                      seq
                        xparents.write (((unsupported)) (((xself).xabcd_parent)) (((xself).xwxyz_parent)))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((xparents)))
                        xparser_help.write ((((xparser).xformat_help)) 0)
                        xprogname.write ((xself).xmain_program)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparser_help)) (((((xtextwrap).xdedent)) (((((((unsupported)) 0).xformat)) ((xprogname)) (((xprogname).if " " "")))))))
                xtest_groups_parents.write
                  [xself]
                    memory > xparent
                    memory > xparser_help
                    memory > xprogname
                    memory > xg
                    memory > xparser
                    memory > xm
                    seq > @
                      seq
                        xparent.write (((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))
                        xg.write (((unsupported)) (((xparent).xadd_argument_group)) ("g") ("gd"))
                        bogusForceDataize.write ((((xg).xadd_argument)) ("-w"))
                        bogusForceDataize.write ((((xg).xadd_argument)) ("-x"))
                        xm.write ((((xparent).xadd_mutually_exclusive_group)) 0)
                        bogusForceDataize.write ((((xm).xadd_argument)) ("-y"))
                        bogusForceDataize.write ((((xm).xadd_argument)) ("-z"))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((((unsupported)) ((xparent)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xArgumentParserError)) (((xparser).xparse_args)) ((((unsupported)) ("-y") ("Y") ("-z") ("Z"))))
                        xparser_help.write ((((xparser).xformat_help)) 0)
                        xprogname.write ((xself).xmain_program)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xparser_help)) (((((xtextwrap).xdedent)) (((((((unsupported)) 0).xformat)) ((xprogname)) (((xprogname).if " " "")))))))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_invalid_add_argument_group.write
                  [xself]
                    memory > xraises
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xraises.write ((xself).xassertRaises)
                        (((unsupported)) ((xraises)) ((xTypeError)) (((xparser).xadd_mutually_exclusive_group)) ("foo"))
                xtest_invalid_add_argument.write
                  [xself]
                    memory > xraises
                    memory > xgroup
                    memory > xadd_argument
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        xgroup.write ((((xparser).xadd_mutually_exclusive_group)) 0)
                        xadd_argument.write ((xgroup).xadd_argument)
                        xraises.write ((xself).xassertRaises)
                        (((unsupported)) ((xraises)) ((xValueError)) ((xadd_argument)) ("--foo") (TRUE))
                        bogusForceDataize.write (((xraises)) ((xValueError)) ((xadd_argument)) ("bar"))
                        (((unsupported)) ((xraises)) ((xValueError)) ((xadd_argument)) ("bar") ("+"))
                        (((unsupported)) ((xraises)) ((xValueError)) ((xadd_argument)) ("bar") (1))
                        (((unsupported)) ((xraises)) ((xValueError)) ((xadd_argument)) ("bar") (((xargparse).xPARSER)))
                xtest_help.write
                  [xself]
                    memory > xexpected
                    memory > xgroup2
                    memory > xgroup1
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup1.write ((((xparser).xadd_mutually_exclusive_group)) 0)
                        (((unsupported)) (((xgroup1).xadd_argument)) ("--foo") ("store_true"))
                        (((unsupported)) (((xgroup1).xadd_argument)) ("--bar") ("store_false"))
                        xgroup2.write ((((xparser).xadd_mutually_exclusive_group)) 0)
                        (((unsupported)) (((xgroup2).xadd_argument)) ("--soup") ("store_true"))
                        (((unsupported)) (((xgroup2).xadd_argument)) ("--nuts") ("store_false"))
                        xexpected.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((xexpected)))))
            (((unsupported)) ((xobject)))
              seq
                xtest_failures_when_not_required.write
                  [xself]
                    memory > xparse_args
                    memory > xerror
                    seq > @
                      seq
                        xparse_args.write ((((unsupported)) (((xself).xget_parser)) (FALSE)).xparse_args)
                        xerror.write (xArgumentParserError)
                        (((unsupported)) ((xargs_string)) (((xself).xfailures)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) ((xparse_args)) (((((xargs_string).xsplit)) 0)))
                xtest_failures_when_required.write
                  [xself]
                    memory > xparse_args
                    memory > xerror
                    seq > @
                      seq
                        xparse_args.write ((((unsupported)) (((xself).xget_parser)) (TRUE)).xparse_args)
                        xerror.write (xArgumentParserError)
                        (((unsupported)) ((xargs_string)) ((((xself).xfailures).add (((unsupported)) ("")))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) ((xparse_args)) (((((xargs_string).xsplit)) 0)))
                xtest_successes_when_not_required.write
                  [xself]
                    memory > xsuccesses
                    memory > xactual_ns
                    memory > xparse_args
                    seq > @
                      seq
                        xparse_args.write ((((unsupported)) (((xself).xget_parser)) (FALSE)).xparse_args)
                        xsuccesses.write (((xself).xsuccesses).add ((xself).xsuccesses_when_not_required))
                        (((unsupported)) ((((unsupported)) ((xargs_string)) ((xexpected_ns)))) ((xsuccesses)))
                          seq
                            xactual_ns.write (((xparse_args)) (((((xargs_string).xsplit)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual_ns)) ((xexpected_ns)))
                xtest_successes_when_required.write
                  [xself]
                    memory > xactual_ns
                    memory > xparse_args
                    seq > @
                      seq
                        xparse_args.write ((((unsupported)) (((xself).xget_parser)) (TRUE)).xparse_args)
                        (((unsupported)) ((((unsupported)) ((xargs_string)) ((xexpected_ns)))) (((xself).xsuccesses)))
                          seq
                            xactual_ns.write (((xparse_args)) (((((xargs_string).xsplit)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual_ns)) ((xexpected_ns)))
                xtest_usage_when_not_required.write
                  [xself]
                    memory > xexpected_usage
                    memory > xformat_usage
                    seq > @
                      seq
                        xformat_usage.write ((((unsupported)) (((xself).xget_parser)) (FALSE)).xformat_usage)
                        xexpected_usage.write ((xself).xusage_when_not_required)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat_usage)) 0)) (((((xtextwrap).xdedent)) ((xexpected_usage)))))
                xtest_usage_when_required.write
                  [xself]
                    memory > xexpected_usage
                    memory > xformat_usage
                    seq > @
                      seq
                        xformat_usage.write ((((unsupported)) (((xself).xget_parser)) (TRUE)).xformat_usage)
                        xexpected_usage.write ((xself).xusage_when_required)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat_usage)) 0)) (((((xtextwrap).xdedent)) ((xexpected_usage)))))
                xtest_help_when_not_required.write
                  [xself]
                    memory > xformat_help
                    memory > xhelp
                    seq > @
                      seq
                        xformat_help.write ((((unsupported)) (((xself).xget_parser)) (FALSE)).xformat_help)
                        xhelp.write (((xself).xusage_when_not_required).add ((xself).xhelp))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat_help)) 0)) (((((xtextwrap).xdedent)) ((xhelp)))))
                xtest_help_when_required.write
                  [xself]
                    memory > xformat_help
                    memory > xhelp
                    seq > @
                      seq
                        xformat_help.write ((((unsupported)) (((xself).xget_parser)) (TRUE)).xformat_help)
                        xhelp.write (((xself).xusage_when_required).add ((xself).xhelp))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat_help)) 0)) (((((xtextwrap).xdedent)) ((xhelp)))))
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      (((unsupported)) 0)
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--bar") ("bar help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--baz") ("?") ("Z") ("baz help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("--bar X --baz Y") ("--bar X --baz"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--bar X") ((((unsupported)) ((xNS)) ("X") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--bar X --bar Z") ((((unsupported)) ((xNS)) ("Z") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--baz Y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("Y"))))) ((((unsupported)) ("--baz") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("Z"))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      (((unsupported)) 0)
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--abcde") ("abcde help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--fghij") ("fghij help"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--klmno") ("klmno help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--pqrst") ("pqrst help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("--klmno X --pqrst Y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--klmno X") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("X") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--abcde Y --klmno X") ((((unsupported)) ((xNS)) ("Y") ("None: is there a None literal in the EO language?") ("X") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--pqrst X") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("X"))))) ((((unsupported)) ("--pqrst X --fghij Y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("Y") ("None: is there a None literal in the EO language?") ("X"))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-x") (((xargparse).xSUPPRESS)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-y") ("store_false") ("y help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("-x X -y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("-x X") ((((unsupported)) ((xNS)) ("X") (TRUE))))) ((((unsupported)) ("-x X -x Y") ((((unsupported)) ((xNS)) ("Y") (TRUE))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (TRUE))))))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    memory > xadd
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        xadd.write ((xgroup).xadd_argument)
                        (((unsupported)) ((xadd)) ("--spam") ("store_true") (((xargparse).xSUPPRESS)))
                        (((unsupported)) ((xadd)) ("--badger") ("store_false") (((xargparse).xSUPPRESS)))
                        (((unsupported)) ((xadd)) ("--bladder") (((xargparse).xSUPPRESS)))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("--spam --badger") ("--badger --bladder B") ("--bladder B --spam"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--spam") ((((unsupported)) ((xNS)) (TRUE) (TRUE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--badger") ((((unsupported)) ((xNS)) (FALSE) (FALSE) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--bladder B") ((((unsupported)) ((xNS)) (FALSE) (TRUE) ("B"))))) ((((unsupported)) ("--spam --spam") ((((unsupported)) ((xNS)) (TRUE) (TRUE) ("None: is there a None literal in the EO language?"))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) (TRUE) ("None: is there a None literal in the EO language?"))))))
                (((unsupported)) ((xusage_when_required)) ((xusage_when_not_required)) ((((unsupported)) 0)))
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--foo") ("store_true") ("FOO"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--spam") ("SPAM"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("badger") ("*") ("X") ("BADGER"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("--foo --spam S") ("--spam S X") ("X --foo") ("X Y Z --spam S") ("--foo X Y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--foo") ((((unsupported)) ((xNS)) (TRUE) ("None: is there a None literal in the EO language?") ("X"))))) ((((unsupported)) ("--spam S") ((((unsupported)) ((xNS)) (FALSE) ("S") ("X"))))) ((((unsupported)) ("X") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ((((unsupported)) ("X"))))))) ((((unsupported)) ("X Y Z") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ((((unsupported)) ("X") ("Y") ("Z"))))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) ("None: is there a None literal in the EO language?") ("X"))))))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("store_true") ("x help"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-a") ("store_true") ("a help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-b") ("store_true") ("b help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-y") ("store_true") ("y help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-c") ("store_true") ("c help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("-a -b") ("-b -c") ("-a -c") ("-a -b -c"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("-a") ((((unsupported)) ((xNS)) (TRUE) (FALSE) (FALSE) (FALSE) (FALSE))))) ((((unsupported)) ("-b") ((((unsupported)) ((xNS)) (FALSE) (TRUE) (FALSE) (FALSE) (FALSE))))) ((((unsupported)) ("-c") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (TRUE) (FALSE) (FALSE))))) ((((unsupported)) ("-a -x") ((((unsupported)) ((xNS)) (TRUE) (FALSE) (FALSE) (TRUE) (FALSE))))) ((((unsupported)) ("-y -b") ((((unsupported)) ((xNS)) (FALSE) (TRUE) (FALSE) (FALSE) (TRUE))))) ((((unsupported)) ("-x -y -c") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (TRUE) (TRUE) (TRUE))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (FALSE) (FALSE) (FALSE))))) ((((unsupported)) ("-x") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (FALSE) (TRUE) (FALSE))))) ((((unsupported)) ("-y") ((((unsupported)) ((xNS)) (FALSE) (FALSE) (FALSE) (FALSE) (TRUE))))))
                (((unsupported)) ((xusage_when_required)) ((xusage_when_not_required)) ((((unsupported)) 0)))
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xtitled_group
                    memory > xmutex_group
                    memory > xparser
                    seq > @
                      (((unsupported)) 0)
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xtitled_group.write (((unsupported)) (((xparser).xadd_argument_group)) ("Titled group") ("Group description"))
                        xmutex_group.write (((unsupported)) (((xtitled_group).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xmutex_group).xadd_argument)) ("--bar") ("bar help"))
                        (((unsupported)) (((xmutex_group).xadd_argument)) ("--baz") ("baz help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("--bar X --baz Y") ("--baz X --bar Y"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("--bar X") ((((unsupported)) ((xNS)) ("X") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("--baz Y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("Y"))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        (((unsupported)) (((xparser).xadd_argument)) ("x") ("x help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-y") ("store_true") ("y help"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        (((unsupported)) (((xgroup).xadd_argument)) ("a") ("?") ("a help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-b") ("store_true") ("b help"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-c") ("store_true") ("c help"))
                        (((unsupported)) ((xparser)))
                xfailures.write (((unsupported)) ("X A -b") ("-b -c") ("-c X A"))
                xsuccesses.write (((unsupported)) ((((unsupported)) ("X A") ((((unsupported)) ((xNS)) ("A") (FALSE) (FALSE) ("X") (FALSE))))) ((((unsupported)) ("X -b") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (TRUE) (FALSE) ("X") (FALSE))))) ((((unsupported)) ("X -c") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE) (TRUE) ("X") (FALSE))))) ((((unsupported)) ("X A -y") ((((unsupported)) ((xNS)) ("A") (FALSE) (FALSE) ("X") (TRUE))))) ((((unsupported)) ("X -y -b") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (TRUE) (FALSE) ("X") (TRUE))))))
                xsuccesses_when_not_required.write (((unsupported)) ((((unsupported)) ("X") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE) (FALSE) ("X") (FALSE))))) ((((unsupported)) ("X -y") ((((unsupported)) ((xNS)) ("None: is there a None literal in the EO language?") (FALSE) (FALSE) ("X") (TRUE))))))
                (((unsupported)) ((xusage_when_required)) ((xusage_when_not_required)) ((((unsupported)) 0)))
                xhelp.write (((unsupported)) 0)
            (((unsupported)) ((xMEMixin)) ((xTestCase)))
              seq
                xget_parser.write
                  [xself xrequired]
                    memory > xgroup3
                    memory > xgroup
                    memory > xparser
                    memory > xgroup2
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) ((xrequired)))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("-a"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("-b"))
                        xgroup2.write (((unsupported)) (((xgroup).xadd_mutually_exclusive_group)) ((xrequired)))
                        bogusForceDataize.write ((((xgroup2).xadd_argument)) ("-c"))
                        bogusForceDataize.write ((((xgroup2).xadd_argument)) ("-d"))
                        xgroup3.write (((unsupported)) (((xgroup2).xadd_mutually_exclusive_group)) ((xrequired)))
                        bogusForceDataize.write ((((xgroup3).xadd_argument)) ("-e"))
                        bogusForceDataize.write ((((xgroup3).xadd_argument)) ("-f"))
                        (((unsupported)) ((xparser)))
                xusage_when_not_required.write (((unsupported)) 0)
                xusage_when_required.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
                xtest_failures_when_not_required.write "None: is there a None literal in the EO language?"
                xtest_failures_when_required.write "None: is there a None literal in the EO language?"
                xtest_successes_when_not_required.write "None: is there a None literal in the EO language?"
                xtest_successes_when_required.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xobject)))
              xget_parser.write
                [xself xrequired]
                  memory > xparent
                  memory > xparser
                  seq > @
                    (((unsupported)) 0)
                      xparent.write (((unsupported)) (((((xsuper)) ((xMEPBase)) ((xself))).xget_parser)) ((xrequired)))
                      xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) (((xparent).xprog)) (FALSE) ((((unsupported)) ((xparent)))))
                      (((unsupported)) ((xparser)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveGroupErrors)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveSimple)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveLong)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveFirstSuppressed)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveManySuppressed)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveOptionalAndPositional)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveOptionalsMixed)))
            (((unsupported)) ((xMEPBase)) ((xTestMutuallyExclusiveOptionalsAndPositionalsMixed)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_set_defaults_no_args.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xset_defaults)) ("foo"))
                        (((unsupported)) (((xparser).xset_defaults)) ("bar") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo") ("bar") (1))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo") ("bar") (1))) (((((xparser).xparse_args)) ((((unsupported)) 0)) ((((xNS)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("baz") ("bar") (1))) (((((xparser).xparse_args)) ((((unsupported)) 0)) ((((unsupported)) ((xNS)) ("baz"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("baz") ("bar") (2))) (((((xparser).xparse_args)) ((((unsupported)) 0)) ((((unsupported)) ((xNS)) ("baz") (2))))))
                xtest_set_defaults_with_args.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xset_defaults)) ("foo") ("bar"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("xfoox"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("xfoox") ("bar"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("xfoox") ("bar"))) (((((xparser).xparse_args)) ((((unsupported)) 0)) ((((xNS)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("baz") ("bar"))) (((((xparser).xparse_args)) ((((unsupported)) 0)) ((((unsupported)) ((xNS)) ("baz"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("1") ("bar"))) (((((xparser).xparse_args)) (((("-x 1".xsplit)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("1") ("bar"))) (((((xparser).xparse_args)) (((("-x 1".xsplit)) 0)) ((((xNS)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("1") ("bar"))) (((((xparser).xparse_args)) (((("-x 1".xsplit)) 0)) ((((unsupported)) ((xNS)) ("baz"))))))
                xtest_set_defaults_subparsers.write
                  [xself]
                    memory > xparser_a
                    memory > xparser
                    memory > xsubparsers
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xset_defaults)) ("foo"))
                        xsubparsers.write ((((xparser).xadd_subparsers)) 0)
                        xparser_a.write ((((xsubparsers).xadd_parser)) ("a"))
                        (((unsupported)) (((xparser_a).xset_defaults)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo") ("bar"))) (((((xparser).xparse_args)) (((("a".xsplit)) 0)))))
                xtest_set_defaults_parents.write
                  [xself]
                    memory > xparent
                    memory > xparser
                    seq > @
                      seq
                        xparent.write (((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))
                        (((unsupported)) (((xparent).xset_defaults)) ("foo"))
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ((((unsupported)) ((xparent)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                xtest_set_defaults_on_parent_and_subparser.write
                  [xself]
                    memory > xxparser
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        xxparser.write (((((((xparser).xadd_subparsers)) 0).xadd_parser)) ("X"))
                        (((unsupported)) (((xparser).xset_defaults)) (1))
                        (((unsupported)) (((xxparser).xset_defaults)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) (2))) (((((xparser).xparse_args)) ((((unsupported)) ("X"))))))
                xtest_set_defaults_same_as_add_argument.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xset_defaults)) ("W") ("X") ("Y") ("Z"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("-w"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("XX"))
                        (((unsupported)) (((xparser).xadd_argument)) ("y") ("?"))
                        (((unsupported)) (((xparser).xadd_argument)) ("z") ("?") ("ZZ"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("W") ("XX") ("Y") ("ZZ"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xparser).xset_defaults)) ("WW") ("X") ("YY") ("Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("WW") ("X") ("YY") ("Z"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                xtest_set_defaults_same_as_add_argument_group.write
                  [xself]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xset_defaults)) ("W") ("X") ("Y") ("Z"))
                        xgroup.write ((((xparser).xadd_argument_group)) ("foo"))
                        bogusForceDataize.write ((((xgroup).xadd_argument)) ("-w"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("-x") ("XX"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("y") ("?"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("z") ("?") ("ZZ"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("W") ("XX") ("Y") ("ZZ"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xparser).xset_defaults)) ("WW") ("X") ("YY") ("Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("WW") ("X") ("YY") ("Z"))) (((((xparser).xparse_args)) ((((unsupported)) 0)))))
            (((unsupported)) ((xTestCase)))
              xtest_get_default.write
                [xself]
                  memory > xparser
                  seq > @
                    seq
                      xparser.write (((xErrorRaisingArgumentParser)) 0)
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xget_default)) ("foo"))))
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xget_default)) ("bar"))))
                      bogusForceDataize.write ((((xparser).xadd_argument)) ("--foo"))
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xget_default)) ("foo"))))
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xget_default)) ("bar"))))
                      (((unsupported)) (((xparser).xadd_argument)) ("--bar") ((xint)) (42))
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xget_default)) ("foo"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (42) (((((xparser).xget_default)) ("bar"))))
                      (((unsupported)) (((xparser).xset_defaults)) ("badger"))
                      bogusForceDataize.write ((((xself).xassertEqual)) ("badger") (((((xparser).xget_default)) ("foo"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (42) (((((xparser).xget_default)) ("bar"))))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_empty.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write ((((xargparse).xNamespace)) 0)
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("") ((xns)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("x") ((xns)))
                xtest_non_empty.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xargparse).xNamespace)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("") ((xns)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("x") ((xns)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("y") ((xns)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("xx") ((xns)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("z") ((xns)))
            (((unsupported)) ((xtype)))
              x__init__.write
                [xcls xname xbases xbodydict]
                  memory > xtest_format
                  memory > xtest_print
                  memory > xtest_print_file
                  memory > x_get_parser
                  memory > x_test
                  memory > x__init__
                  seq > @
                    seq
                      ((xname).eq "HelpTestCase").if
                        (((unsupported)) 0)
                      (((unsupported)) ((xobject)))
                        seq
                          x__init__.write
                            [xself xtest_class xfunc_suffix xstd_name]
                              memory > xtest_wrapper
                              memory > xtest_name
                              seq > @
                                seq
                                  (((unsupported)) (((xself).xfunc_suffix)) ((xfunc_suffix)))
                                  (((unsupported)) (((xself).xstd_name)) ((xstd_name)))
                                  (((unsupported)) ((xtest_func)) ((((unsupported)) (((xself).xtest_format)) (((xself).xtest_print)) (((xself).xtest_print_file)))))
                                    seq
                                      xtest_name.write ("%s_%s".mod (((unsupported)) (((xtest_func).x__name__)) ((xfunc_suffix))))
                                      xtest_wrapper.write
                                        [xself xtest_func]
                                          seq > @
                                            (((unsupported)) 0)
                                              bogusForceDataize.write (((xtest_func)) ((xself)))
                                      (((unsupported)) ((xTypeError)))
                                        (((unsupported)) (((xtest_wrapper).x__name__)) ((xtest_name)))
                                      bogusForceDataize.write (((xsetattr)) ((xtest_class)) ((xtest_name)) ((xtest_wrapper)))
                          x_get_parser.write
                            [xself xtester]
                              memory > xgroup_sigs
                              memory > xgroup
                              memory > xparser
                              memory > xsubparsers_sigs
                              memory > xsubparsers
                              seq > @
                                seq
                                  xparser.write ((((xargparse).xArgumentParser)) ((((unsupported)) ((((xtester).xparser_signature).xargs)))) ((((unsupported)) ((((xtester).xparser_signature).xkwargs)))))
                                  (((unsupported)) ((xargument_sig)) ((((xgetattr)) ((xtester)) ("argument_signatures") ((((unsupported)) 0)))))
                                    bogusForceDataize.write ((((xparser).xadd_argument)) ((((unsupported)) (((xargument_sig).xargs)))) ((((unsupported)) (((xargument_sig).xkwargs)))))
                                  xgroup_sigs.write (((xgetattr)) ((xtester)) ("argument_group_signatures") ((((unsupported)) 0)))
                                  (((unsupported)) ((((unsupported)) ((xgroup_sig)) ((xargument_sigs)))) ((xgroup_sigs)))
                                    seq
                                      xgroup.write ((((xparser).xadd_argument_group)) ((((unsupported)) (((xgroup_sig).xargs)))) ((((unsupported)) (((xgroup_sig).xkwargs)))))
                                      (((unsupported)) ((xargument_sig)) ((xargument_sigs)))
                                        bogusForceDataize.write ((((xgroup).xadd_argument)) ((((unsupported)) (((xargument_sig).xargs)))) ((((unsupported)) (((xargument_sig).xkwargs)))))
                                  xsubparsers_sigs.write (((xgetattr)) ((xtester)) ("subparsers_signatures") ((((unsupported)) 0)))
                                  (xsubparsers_sigs).if
                                    seq
                                      xsubparsers.write ((((xparser).xadd_subparsers)) 0)
                                      (((unsupported)) ((xsubparser_sig)) ((xsubparsers_sigs)))
                                        bogusForceDataize.write ((((xsubparsers).xadd_parser)) ((((unsupported)) (((xsubparser_sig).xargs)))) ((((unsupported)) (((xsubparser_sig).xkwargs)))))
                                  (((unsupported)) ((xparser)))
                          x_test.write
                            [xself xtester xparser_text]
                              memory > xexpected_text
                              seq > @
                                seq
                                  xexpected_text.write (((xgetattr)) ((xtester)) (((xself).xfunc_suffix)))
                                  xexpected_text.write ((((xtextwrap).xdedent)) ((xexpected_text)))
                                  bogusForceDataize.write ((((xtester).xassertEqual)) ((xexpected_text)) ((xparser_text)))
                          xtest_format.write
                            [xself xtester]
                              memory > xparser
                              memory > xformat
                              seq > @
                                seq
                                  xparser.write ((((xself).x_get_parser)) ((xtester)))
                                  xformat.write (((xgetattr)) ((xparser)) (("format_%s".mod ((xself).xfunc_suffix))))
                                  bogusForceDataize.write ((((xself).x_test)) ((xtester)) ((((xformat)) 0)))
                          xtest_print.write
                            [xself xtester]
                              memory > xprint_
                              memory > xparser_text
                              memory > xold_stream
                              memory > xparser
                              seq > @
                                seq
                                  xparser.write ((((xself).x_get_parser)) ((xtester)))
                                  xprint_.write (((xgetattr)) ((xparser)) (("print_%s".mod ((xself).xfunc_suffix))))
                                  xold_stream.write (((xgetattr)) ((xsys)) (((xself).xstd_name)))
                                  bogusForceDataize.write (((xsetattr)) ((xsys)) (((xself).xstd_name)) ((((xStdIOBuffer)) 0)))
                                  (((unsupported)) 0)
                                    seq
                                      bogusForceDataize.write (((xprint_)) 0)
                                      xparser_text.write ((((((xgetattr)) ((xsys)) (((xself).xstd_name))).xgetvalue)) 0)
                                    bogusForceDataize.write (((xsetattr)) ((xsys)) (((xself).xstd_name)) ((xold_stream)))
                                  bogusForceDataize.write ((((xself).x_test)) ((xtester)) ((xparser_text)))
                          xtest_print_file.write
                            [xself xtester]
                              memory > xprint_
                              memory > xparser_text
                              memory > xsfile
                              memory > xparser
                              seq > @
                                seq
                                  xparser.write ((((xself).x_get_parser)) ((xtester)))
                                  xprint_.write (((xgetattr)) ((xparser)) (("print_%s".mod ((xself).xfunc_suffix))))
                                  xsfile.write (((xStdIOBuffer)) 0)
                                  bogusForceDataize.write (((xprint_)) ((xsfile)))
                                  xparser_text.write ((((xsfile).xgetvalue)) 0)
                                  bogusForceDataize.write ((((xself).x_test)) ((xtester)) ((xparser_text)))
                      (((unsupported)) ((((unsupported)) ((xfunc_suffix)) ((xstd_name)))) ((((unsupported)) ((((unsupported)) ("usage") ("stdout"))) ((((unsupported)) ("help") ("stdout"))))))
                        bogusForceDataize.write (((xAddTests)) ((xcls)) ((xfunc_suffix)) ((xstd_name)))
            xbases.write (((unsupported)) ((xTestCase)))
            xHelpTestCase.write (((xTestHelpFormattingMetaclass)) ("HelpTestCase") ((xbases)) ((((unsupported)) 0)))
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("DESCRIPTION") ("EPILOG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") ("0.1"))) ((((unsupported)) ((xSig)) ("-x") ("store_true") ("X HELP"))) ((((unsupported)) ((xSig)) ("--y") ("Y HELP"))) ((((unsupported)) ((xSig)) ("foo") ("FOO HELP"))) ((((unsupported)) ((xSig)) ("bar") ("BAR HELP"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write (((unsupported)) 0)
            (((unsupported)) ((xHelpTestCase)))
              seq
                (((unsupported)) 0)
                xsetUp.write
                  [xself]
                    memory > xenv
                    seq > @
                      seq
                        xenv.write ((((xsupport).xEnvironmentVarGuard)) 0)
                        bogusForceDataize.write ((((xenv).xset)) ("COLUMNS") ("15"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xenv).x__exit__)))
                xparser_signature.write ((xTestHelpBiggerOptionals).xparser_signature)
                xargument_signatures.write ((xTestHelpBiggerOptionals).xargument_signatures)
                xargument_group_signatures.write ((xTestHelpBiggerOptionals).xargument_group_signatures)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ((xTestHelpBiggerOptionals).xversion)
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("DESCRIPTION") ("EPILOG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") ("0.1"))) ((((unsupported)) ((xSig)) ("-x") ("store_true") ("X HELP"))) ((((unsupported)) ((xSig)) ("--y") ("Y HELP"))) ((((unsupported)) ((xSig)) ("foo") ("FOO HELP"))) ((((unsupported)) ((xSig)) ("bar") ("BAR HELP"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xSig)) ("GROUP TITLE") ("GROUP DESCRIPTION"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("baz") ("BAZ HELP"))) ((((unsupported)) ((xSig)) ("-z") ("+") ("Z HELP"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write (((unsupported)) 0)
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("USAGE") ("DESCRIPTION"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("store_true") ("X HELP"))) ((((unsupported)) ((xSig)) ("--y") ("Y HELP"))) ((((unsupported)) ((xSig)) ("ekiekiekifekang") ("EKI HELP"))) ((((unsupported)) ((xSig)) ("bar") ("BAR HELP"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("   oddly    formattedndescriptionnnthat is so long that it should go onto multiple lines when wrapped"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("XX") ("oddlyn    formatted -x help"))) ((((unsupported)) ((xSig)) ("y") ("yyy") ("normal y help"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xSig)) ("title") ("n    oddly formatted groupnndescription"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-a") ("store_true") (" oddly nformatted    -a  help  n    again, so long that it should be wrapped over multiple lines"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (("DnD".mul 30)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("XX") (("XHH HX".mul 20)))) ((((unsupported)) ((xSig)) ("y") ("yyy") (("YH YH".mul 20)))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("ALPHAS"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-a") ("store_true") (("AHHH HHA".mul 10)))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("USAGE") (("D D".mul 30)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") (("V V".mul 30)))) ((((unsupported)) ((xSig)) ("-x") (("X".mul 25)) (("XH XH".mul 20)))) ((((unsupported)) ((xSig)) ("y") (("y".mul 25)) (("YH YH".mul 20)))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("ALPHAS"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-a") (("A".mul 25)) (("AH AH".mul 20)))) ((((unsupported)) ((xSig)) ("z") (("z".mul 25)) (("ZH ZH".mul 20)))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write (((unsupported)) 0)
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") ("+") ("w"))) ((((unsupported)) ((xSig)) ("-x") ("*") ("x"))) ((((unsupported)) ((xSig)) ("a") ("a"))) ((((unsupported)) ((xSig)) ("b") ("b") (2))) ((((unsupported)) ((xSig)) ("c") ("c") ("?"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("group"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-y") ("?") ("y"))) ((((unsupported)) ((xSig)) ("-z") (3) ("z"))) ((((unsupported)) ((xSig)) ("d") ("d") ("*"))) ((((unsupported)) ((xSig)) ("e") ("e") ("+"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (FALSE))
                xargument_signatures.write (((unsupported)) 0)
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("xxxx"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-x") ("x"))) ((((unsupported)) ((xSig)) ("a") ("a"))))))) ((((unsupported)) ((((xSig)) ("yyyy"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("b") ("b"))) ((((unsupported)) ((xSig)) ("-y") ("y"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (("P".mul 60)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") ("W"))) ((((unsupported)) ((xSig)) ("-x") ("X"))) ((((xSig)) ("a"))) ((((xSig)) ("b"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (("P".mul 60)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") (("W".mul 25)))) ((((unsupported)) ((xSig)) ("-x") (("X".mul 25)))) ((((unsupported)) ((xSig)) ("-y") (("Y".mul 25)))) ((((unsupported)) ((xSig)) ("-z") (("Z".mul 25)))) ((((xSig)) ("a"))) ((((xSig)) ("b"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) (("P".mul 60)) (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) (("a".mul 25)))) ((((xSig)) (("b".mul 25)))) ((((xSig)) (("c".mul 25)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") (("W".mul 25)))) ((((unsupported)) ((xSig)) ("-x") (("X".mul 25)))) ((((unsupported)) ((xSig)) ("-y") (("Y".mul 25)))) ((((unsupported)) ((xSig)) ("-z") (("Z".mul 25)))) ((((xSig)) ("a"))) ((((xSig)) ("b"))) ((((xSig)) ("c"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("-x"))) ((((xSig)) ("-y"))) ((((xSig)) ("-z"))) ((((xSig)) (("a".mul 25)))) ((((xSig)) (("b".mul 25)))) ((((xSig)) (("c".mul 25)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (("X".mul 25)))) ((((unsupported)) ((xSig)) ("-y") (("Y".mul 25)))) ((((unsupported)) ((xSig)) ("-z") (("Z".mul 25)))) ((((xSig)) (("a".mul 25)))) ((((xSig)) (("b".mul 25)))) ((((xSig)) (("c".mul 25)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") (("X".mul 25)))) ((((unsupported)) ((xSig)) ("-y") (("Y".mul 25)))) ((((unsupported)) ((xSig)) ("-z") (("Z".mul 25)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (FALSE))
                xargument_signatures.write (((unsupported)) ((((xSig)) (("a".mul 25)))) ((((xSig)) (("b".mul 25)))) ((((xSig)) (("c".mul 25)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-x") ((xint)) ("x %(prog)s %(default)s %(type)s %%"))) ((((unsupported)) ((xSig)) ("-y") ("store_const") (42) ("XXX") ("y %(prog)s %(default)s %(const)s"))) ((((unsupported)) ((xSig)) ("--foo") ("abc") ("foo %(prog)s %(default)s %(choices)s"))) ((((unsupported)) ((xSig)) ("--bar") ("baz") ((((unsupported)) (1) (2))) ("BBB") ("bar %(prog)s %(default)s %(dest)s"))) ((((unsupported)) ((xSig)) ("spam") ("spam %(prog)s %(default)s"))) ((((unsupported)) ((xSig)) ("badger") (0.5) ("badger %(prog)s %(default)s"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("group"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("-a") ("a %(prog)s %(default)s"))) ((((unsupported)) ((xSig)) ("-b") ((1.neg)) ("b %(prog)s %(default)s"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("%(prog)s FOO"))
                xargument_signatures.write (((unsupported)) 0)
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (FALSE))
                xargument_signatures.write (((unsupported)) 0)
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write (xusage)
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (((xargparse).xSUPPRESS)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("foo help"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xhelp.write (((unsupported)) 0)
                xusage.write ""
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (FALSE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") (((xargparse).xSUPPRESS)))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("foo help"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((xSig)) ("group"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("--bar") (((xargparse).xSUPPRESS)))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("foo help"))) ((((unsupported)) ((xSig)) ("spam") (((xargparse).xSUPPRESS)))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") (TRUE) ("foo help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("^;") (FALSE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("^^foo") ("store_true") ("foo help"))) ((((unsupported)) ((xSig)) (";b") (";;bar") ("bar help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (FALSE))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("foo help"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((xSig)) ("--foo"))) ((((xSig)) ("spam"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-w") ("w") ("+") ((((unsupported)) ("W1") ("W2"))))) ((((unsupported)) ((xSig)) ("-x") ("x") ("*") ((((unsupported)) ("X1") ("X2"))))) ((((unsupported)) ((xSig)) ("-y") ("y") (3) ((((unsupported)) ("Y1") ("Y2") ("Y3"))))) ((((unsupported)) ((xSig)) ("-z") ("z") ("?") ((((unsupported)) ("Z1"))))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (((xargparse).xRawTextHelpFormatter)) ("Keep the formattingn    exactly as it is writtennnheren"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("    foo help should alsonappear as given here"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xSig)) ("title") ("    This textn  should be indentedn    exactly like it is heren"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("--bar") ("bar help"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (((xargparse).xRawDescriptionHelpFormatter)) ("Keep the formattingn    exactly as it is writtennnheren"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("  foo help should notn    retain this odd formatting"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xSig)) ("title") ("    This textn  should be indentedn    exactly like it is heren"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("--bar") ("bar help"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") (((xargparse).xArgumentDefaultsHelpFormatter)) ("description"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("--foo") ("foo help - oh and by the way, %(default)s"))) ((((unsupported)) ((xSig)) ("--bar") ("store_true") ("bar help"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))) ((((unsupported)) ((xSig)) ("badger") ("?") ("wooden") ("badger help"))))
                xargument_group_signatures.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xSig)) ("title") ("description"))) ((((unsupported)) ((((unsupported)) ((xSig)) ("--baz") ((xint)) (42) ("baz help"))))))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("description"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-V") ("--version") ("version") ("3.6"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") ("1.0") (((xargparse).xSUPPRESS)))) ((((unsupported)) ((xSig)) ("--foo") ("foo help"))) ((((unsupported)) ((xSig)) ("spam") ("spam help"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("display some subcommands"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") ("0.1"))))
                xsubparsers_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ((xname)))) ((xname)) ((((unsupported)) ("a") ("b") ("c") ("d") ("e"))))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write (((unsupported)) 0)
            (((unsupported)) ((xHelpTestCase)))
              seq
                unsupported
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("display some subcommands"))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("-v") ("--version") ("version") ("0.1"))))
                xsubcommand_data.write (((unsupported)) ((((unsupported)) ("a") ("a subcommand help"))) ((((unsupported)) ("b") ("b subcommand help"))) ((((unsupported)) ("c") ("c subcommand help"))) ((((unsupported)) ("d") ("d subcommand help"))) ((((unsupported)) ("e") ("e subcommand help"))))
                xsubparsers_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ((xname)) ((xhelp)))) ((((unsupported)) ((xname)) ((xhelp)))) ((xsubcommand_data)))
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write (((unsupported)) 0)
            (((unsupported)) ((xHelpTestCase)))
              seq
                xcustom_type.write
                  [xstring]
                    seq > @
                      (((unsupported)) ((xstring)))
                xparser_signature.write (((unsupported)) ((xSig)) ("PROG") ("description") (((xargparse).xMetavarTypeHelpFormatter)))
                xargument_signatures.write (((unsupported)) ((((unsupported)) ((xSig)) ("a") ((xint)))) ((((unsupported)) ((xSig)) ("-b") ((xcustom_type)))) ((((unsupported)) ((xSig)) ("-c") ((xfloat)) ("SOME FLOAT"))))
                xargument_group_signatures.write (((unsupported)) 0)
                xusage.write (((unsupported)) 0)
                xhelp.write ((xusage).add (((unsupported)) 0))
                xversion.write ""
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xassertTypeError.write
                  [xself]
                    memory > xparser
                    seq > @
                      (((unsupported)) 0)
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xparser).xadd_argument)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                xassertValueError.write
                  [xself]
                    memory > xparser
                    seq > @
                      (((unsupported)) 0)
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xparser).xadd_argument)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                xtest_invalid_keyword_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertTypeError)) ("-x") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertTypeError)) ("-y") ("foo"))
                        (((unsupported)) (((xself).xassertTypeError)) ("-y") ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertTypeError)) ("-y") ((((unsupported)) 0)))
                xtest_missing_destination.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTypeError)) 0)
                        (((unsupported)) ((xaction)) ((((unsupported)) ("append") ("store"))))
                          (((unsupported)) (((xself).xassertTypeError)) ((xaction)))
                xtest_invalid_option_strings.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertValueError)) ("--"))
                        bogusForceDataize.write ((((xself).xassertValueError)) ("---"))
                xtest_invalid_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertValueError)) ("--foo") ("int"))
                        (((unsupported)) (((xself).xassertValueError)) ("--foo") ((((unsupported)) ((xint)) ((xfloat)))))
                xtest_invalid_action.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertValueError)) ("-x") ("foo"))
                        (((unsupported)) (((xself).xassertValueError)) ("foo") ("baz"))
                        (((unsupported)) (((xself).xassertValueError)) ("--foo") ((((unsupported)) ("store") ("append"))))
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("store-true"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("unknown action") ((((xstr)) (((xcm).xexception)))))
                xtest_multiple_dest.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("foo"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("bar") ("baz"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("dest supplied twice for positional argument") ((((xstr)) (((xcm).xexception)))))
                xtest_no_argument_actions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xaction)) ((((unsupported)) ("store_const") ("store_true") ("store_false") ("append_const") ("count"))))
                        (((unsupported)) ((xattrs)) ((((unsupported)) ((((unsupported)) ((xdict)) ((xint)))) ((((unsupported)) ((xdict)) ("+"))) ((((unsupported)) ((xdict)) ("ab"))))))
                          (((unsupported)) (((xself).xassertTypeError)) ("-x") ((xaction)) ((((unsupported)) ((xattrs)))))
                xtest_no_argument_no_const_actions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xaction)) ((((unsupported)) ("store_true") ("store_false") ("count"))))
                        seq
                          (((unsupported)) (((xself).xassertTypeError)) ("-x") ("foo") ((xaction)))
                          (((unsupported)) (((xself).xassertTypeError)) ("-x") ("*") ((xaction)))
                xtest_more_than_one_argument_actions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xaction)) ((((unsupported)) ("store") ("append"))))
                        seq
                          (((unsupported)) (((xself).xassertValueError)) ("-x") (0) ((xaction)))
                          (((unsupported)) (((xself).xassertValueError)) ("spam") (0) ((xaction)))
                          (((unsupported)) ((xnargs)) ((((unsupported)) (1) ("*") ("+"))))
                            seq
                              (((unsupported)) (((xself).xassertValueError)) ("-x") ("foo") ((xnargs)) ((xaction)))
                              (((unsupported)) (((xself).xassertValueError)) ("spam") ("foo") ((xnargs)) ((xaction)))
                xtest_required_const_actions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xaction)) ((((unsupported)) ("store_const") ("append_const"))))
                        (((unsupported)) (((xself).xassertTypeError)) ("-x") ("+") ((xaction)))
                xtest_parsers_action_missing_params.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertTypeError)) ("command") ("parsers"))
                        (((unsupported)) (((xself).xassertTypeError)) ("command") ("parsers") ("PROG"))
                        (((unsupported)) (((xself).xassertTypeError)) ("command") ("parsers") (((xargparse).xArgumentParser)))
                xtest_required_positional.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertTypeError)) ("foo") (TRUE))
                xtest_user_defined_action.write
                  [xself]
                    memory > xparser
                    memory > x__init__
                    memory > x__call__
                    seq > @
                      seq
                        (((unsupported)) ((xException)))
                        (((unsupported)) ((xobject)))
                          seq
                            x__init__.write
                              [xself xoption_strings xdest xconst xdefault xrequired]
                                seq > @
                                  (((unsupported)) 0)
                                    ((xdest).eq "spam").if
                                      (((unsupported)) ((xconst)) ((xSuccess))).if
                                        (((unsupported)) ((xdefault)) ((xSuccess))).if
                                          (((unsupported)) ((((xSuccess)) 0)))
                            x__call__.write
                              [xself]
                                seq > @
                                  (((unsupported)) 0)
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xself).xassertRaises)) ((xSuccess)) (((xparser).xadd_argument)) ("--spam") ((xAction)) ((xSuccess)) ((xSuccess)))
                        (((unsupported)) (((xself).xassertRaises)) ((xSuccess)) (((xparser).xadd_argument)) ("spam") ((xAction)) ((xSuccess)) ((xSuccess)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_dest.write
                  [xself]
                    memory > xaction
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        xaction.write ((((xparser).xadd_argument)) ("--foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xdest)) ("foo"))
                        xaction.write ((((xparser).xadd_argument)) ("-b") ("--bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xdest)) ("bar"))
                        xaction.write ((((xparser).xadd_argument)) ("-x") ("-y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xdest)) ("x"))
                xtest_misc.write
                  [xself]
                    memory > xaction
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        xaction.write (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("?") (42) (84) ((xint)) ((((unsupported)) (1) (2))) ("FOO") ("BAR") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xnargs)) ("?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xconst)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xdefault)) (84))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xtype)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xchoices)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xhelp)) ("FOO"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xmetavar)) ("BAR"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xaction).xdest)) ("baz"))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_bad_type.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xargparse).xArgumentParser)) ("foo"))
                xtest_conflict_error.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("-x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xargparse).xArgumentError)) (((xparser).xadd_argument)) ("-x"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("--spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xargparse).xArgumentError)) (((xparser).xadd_argument)) ("--spam"))
                xtest_resolve_error.write
                  [xself]
                    memory > xparser
                    memory > xget_parser
                    seq > @
                      seq
                        xget_parser.write ((xargparse).xArgumentParser)
                        xparser.write (((unsupported)) ((xget_parser)) ("PROG") ("resolve"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("OLD X"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("NEW X"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xparser).xadd_argument)) ("--spam") ("OLD_SPAM"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--spam") ("NEW_SPAM"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xassertPrintHelpExit.write
                  [xself xparser xargs_str]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) (((((xargs_str).xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xformat_help)) 0)) ((((xcm).xexception).xstdout)))
                xassertArgumentParserError.write
                  [xself xparser]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xArgumentParserError)) (((xparser).xparse_args)) ((xargs)))
                xtest_version.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("-v") ("--version") ("version") ("1.0"))
                        bogusForceDataize.write ((((xself).xassertPrintHelpExit)) ((xparser)) ("-h"))
                        bogusForceDataize.write ((((xself).xassertPrintHelpExit)) ((xparser)) ("--help"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xparser)) ("format_version"))
                xtest_version_format.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PPP"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-v") ("--version") ("version") ("%(prog)s 3.5"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("-v"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("PPP 3.5n") ((((xcm).xexception).xstdout)))
                xtest_version_no_help.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))
                        (((unsupported)) (((xparser).xadd_argument)) ("-v") ("--version") ("version") ("1.0"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("-h"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("--help"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xparser)) ("format_version"))
                xtest_version_action.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("XXX"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-V") ("version") ("%(prog)s 3.7"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("-V"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("XXX 3.7n") ((((xcm).xexception).xstdout)))
                xtest_no_help.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("-h"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("--help"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("-v"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("--version"))
                xtest_alternate_help_version.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("help"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-y") ("version"))
                        bogusForceDataize.write ((((xself).xassertPrintHelpExit)) ((xparser)) ("-x"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("-v"))
                        bogusForceDataize.write ((((xself).xassertArgumentParserError)) ((xparser)) ("--version"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xparser)) ("format_version"))
                xtest_help_version_extra_arguments.write
                  [xself]
                    memory > xvalid_suffixes
                    memory > xparser
                    memory > xformat
                    memory > xvalid_prefixes
                    seq > @
                      seq
                        xparser.write (((xErrorRaisingArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--version") ("version") ("1.0"))
                        (((unsupported)) (((xparser).xadd_argument)) ("-x") ("store_true"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("y"))
                        xvalid_prefixes.write (((unsupported)) ("") ("-x") ("foo") ("-x bar") ("baz -x"))
                        xvalid_suffixes.write ((xvalid_prefixes).add (((unsupported)) ("--bad-option") ("foo bar baz")))
                        (((unsupported)) ((xprefix)) ((xvalid_prefixes)))
                          seq
                            (((unsupported)) ((xsuffix)) ((xvalid_suffixes)))
                              xformat.write ("%s %%s %s".mod (((unsupported)) ((xprefix)) ((xsuffix))))
                            bogusForceDataize.write ((((xself).xassertPrintHelpExit)) ((xparser)) (((xformat).mod "-h")))
                            bogusForceDataize.write ((((xself).xassertPrintHelpExit)) ((xparser)) (((xformat).mod "--help")))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xparser)) ("format_version"))
            (((unsupported)) ((xTestCase)))
              seq
                unsupported
                xassertStringEqual.write
                  [xself xobj xresult_string]
                    seq > @
                      (((unsupported)) ((xfunc)) ((((unsupported)) ((xstr)) ((xrepr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfunc)) ((xobj)))) ((xresult_string)))
                xtest_optional.write
                  [xself]
                    memory > xoption
                    memory > xstring
                    seq > @
                      seq
                        xoption.write (((unsupported)) (((xargparse).xAction)) ((((unsupported)) ("--foo") ("-a") ("-b"))) ("b") ("int") ("+") (42) ((((unsupported)) (1) (2) (3))) ("HELP") ("METAVAR"))
                        xstring.write "Action(option_strings=['--foo', '-a', '-b'], dest='b', nargs='+', const=None, default=42, type='int', choices=[1, 2, 3], help='HELP', metavar='METAVAR')"
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xoption)) ((xstring)))
                xtest_argument.write
                  [xself]
                    memory > xargument
                    memory > xstring
                    seq > @
                      seq
                        xargument.write (((unsupported)) (((xargparse).xAction)) ((((unsupported)) 0)) ("x") ((xfloat)) ("?") (2.5) ((((unsupported)) (0.5) (1.5) (2.5))) ("H HH H") ("MV MV MV"))
                        xstring.write ("Action(option_strings=[], dest='x', nargs='?', const=None, default=2.5, type=%r, choices=[0.5, 1.5, 2.5], help='H HH H', metavar='MV MV MV')".mod (xfloat))
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xargument)) ((xstring)))
                xtest_namespace.write
                  [xself]
                    memory > xns
                    memory > xstring
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xargparse).xNamespace)) (42) ("spam"))
                        xstring.write "Namespace(bar='spam', foo=42)"
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xns)) ((xstring)))
                xtest_namespace_starkwargs_notidentifier.write
                  [xself]
                    memory > xns
                    memory > xstring
                    seq > @
                      seq
                        xns.write ((((xargparse).xNamespace)) ((((unsupported)) ((((unsupported)) ("\"") ("quote"))))))
                        xstring.write "Namespace(**{'\"': 'quote'})"
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xns)) ((xstring)))
                xtest_namespace_kwargs_and_starkwargs_notidentifier.write
                  [xself]
                    memory > xns
                    memory > xstring
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xargparse).xNamespace)) (1) ((((unsupported)) ((((unsupported)) ("\"") ("quote"))))))
                        xstring.write "Namespace(a=1, **{'\"': 'quote'})"
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xns)) ((xstring)))
                xtest_namespace_starkwargs_identifier.write
                  [xself]
                    memory > xns
                    memory > xstring
                    seq > @
                      seq
                        xns.write ((((xargparse).xNamespace)) ((((unsupported)) ((((unsupported)) ("valid") (TRUE))))))
                        xstring.write "Namespace(valid=True)"
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xns)) ((xstring)))
                xtest_parser.write
                  [xself]
                    memory > xparser
                    memory > xstring
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xargparse).xArgumentParser)) ("PROG"))
                        xstring.write ("ArgumentParser(prog='PROG', usage=None, description=None, formatter_class=%r, conflict_handler='error', add_help=True)".mod ((xargparse).xHelpFormatter))
                        bogusForceDataize.write ((((xself).xassertStringEqual)) ((xparser)) ((xstring)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write ((((xargparse).xNamespace)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xns)) ("x"))
                        xns.write (((unsupported)) (((xargparse).xNamespace)) (42) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns).xa)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xns).xb)) ("spam"))
                xtest_equality.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    memory > xns4
                    memory > xns3
                    seq > @
                      seq
                        xns1.write (((unsupported)) (((xargparse).xNamespace)) (1) (2))
                        xns2.write (((unsupported)) (((xargparse).xNamespace)) (2) (1))
                        xns3.write (((unsupported)) (((xargparse).xNamespace)) (1))
                        xns4.write (((unsupported)) (((xargparse).xNamespace)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xns1)) ((xns2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xns1)) ((xns3)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xns1)) ((xns4)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xns2)) ((xns3)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xns2)) ((xns4)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xns1).neq (xns3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xns1).neq (xns4))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xns2).neq (xns3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xns2).neq (xns4))))
                xtest_equality_returns_notimplemented.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write (((unsupported)) (((xargparse).xNamespace)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xns).x__eq__)) ("None: is there a None literal in the EO language?"))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xns).x__ne__)) ("None: is there a None literal in the EO language?"))) ((xNotImplemented)))
            (((unsupported)) ((xTestCase)))
              seq
                x_test_module_encoding.write
                  [xself xpath]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xpath)) ((x_)))) ((((((xos).xpath).xsplitext)) ((xpath)))))
                        (((unsupported)) ((xpath)) (".py"))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xpath)) ("r") ("utf-8"))) ((xf)))
                          bogusForceDataize.write ((((xf).xread)) 0)
                xtest_argparse_module_encoding.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_module_encoding)) (((xargparse).x__file__)))
                xtest_test_argparse_module_encoding.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_module_encoding)) ((x__file__)))
            (((unsupported)) ((xTestCase)))
              xtest_argument_error.write
                [xself]
                  memory > xmsg
                  memory > xerror
                  seq > @
                    seq
                      xmsg.write "my error here"
                      xerror.write ((((xargparse).xArgumentError)) ("None: is there a None literal in the EO language?") ((xmsg)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xerror)))) ((xmsg)))
            (((unsupported)) ((xTestCase)))
              xtest_argument_type_error.write
                [xself]
                  memory > xspam
                  memory > xparser
                  seq > @
                    seq
                      xspam.write
                        [xstring]
                          seq > @
                            (((unsupported)) (((((xargparse).xArgumentTypeError)) ("spam!"))))
                      xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") (FALSE))
                      (((unsupported)) (((xparser).xadd_argument)) ("x") ((xspam)))
                      (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("XXX"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ("usage: PROG xnPROG: error: argument x: spam!n") ((((xcm).xexception).xstderr)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_missing_argument_name_in_message.write
                  [xself]
                    memory > xparser
                    memory > xmsg
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") (""))
                        (((unsupported)) (((xparser).xadd_argument)) ("req_pos") ((xstr)))
                        (((unsupported)) (((xparser).xadd_argument)) ("-req_opt") ((xint)) (TRUE))
                        (((unsupported)) (((xparser).xadd_argument)) ("need_one") ((xstr)) ("+"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_opt"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("need_one"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("myXargument"))))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_opt"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("need_one"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("myXargument") ("-req_opt=1"))))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("req_opt"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("need_one"))
                xtest_optional_optional_not_in_message.write
                  [xself]
                    memory > xparser
                    memory > xmsg
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") (""))
                        (((unsupported)) (((xparser).xadd_argument)) ("req_pos") ((xstr)))
                        (((unsupported)) (((xparser).xadd_argument)) ("--req_opt") ((xint)) (TRUE))
                        (((unsupported)) (((xparser).xadd_argument)) ("--opt_opt") ((xbool)) ("?") (TRUE))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_opt"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("opt_opt"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("--req_opt=1"))))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("req_opt"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("opt_opt"))
                xtest_optional_positional_not_in_message.write
                  [xself]
                    memory > xparser
                    memory > xmsg
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") (""))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("req_pos"))
                        (((unsupported)) (((xparser).xadd_argument)) ("optional_positional") ("?") ("eggs"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        xmsg.write (((xstr)) (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_pos"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmsg)) ("optional_positional"))
            (((unsupported)) ((xTestCase)))
              xtest_type_function_call_only_once.write
                [xself]
                  memory > xparser
                  memory > xspam
                  memory > xargs
                  seq > @
                    seq
                      xspam.write
                        [xstring_to_convert]
                          seq > @
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xstring_to_convert)) ("spam!"))
                              (((unsupported)) ("foo_converted"))
                      xparser.write ((((xargparse).xArgumentParser)) 0)
                      (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xspam)) ("bar"))
                      xargs.write ((((xparser).xparse_args)) (((("--foo spam!".xsplit)) 0)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo_converted"))) ((xargs)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_type_function_call_with_non_string_default.write
                  [xself]
                    memory > xparser
                    memory > xspam
                    memory > xargs
                    seq > @
                      seq
                        xspam.write
                          [xint_to_convert]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xint_to_convert)) (0))
                                (((unsupported)) ("foo_converted"))
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xspam)) (0))
                        xargs.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) (0))) ((xargs)))
                xtest_type_function_call_with_string_default.write
                  [xself]
                    memory > xparser
                    memory > xspam
                    memory > xargs
                    seq > @
                      seq
                        xspam.write
                          [xint_to_convert]
                            seq > @
                              (((unsupported)) ("foo_converted"))
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xspam)) ("0"))
                        xargs.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("foo_converted"))) ((xargs)))
                xtest_no_double_type_conversion_of_default.write
                  [xself]
                    memory > xextend
                    memory > xargs
                    memory > xparser
                    seq > @
                      seq
                        xextend.write
                          [xstr_to_convert]
                            seq > @
                              (((unsupported)) (((xstr_to_convert).add "*")))
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--test") ((xextend)) ("*"))
                        xargs.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("**"))) ((xargs)))
                xtest_issue_15906.write
                  [xself]
                    memory > xargs
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--test") ("test") ((xstr)) ((((unsupported)) 0)) ("append"))
                        xargs.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xargs).xtest)) ((((unsupported)) 0)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_arguments_tuple.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                xtest_arguments_list.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                xtest_arguments_tuple_positional.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("x"))
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("x"))))
                xtest_arguments_list_positional.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("x"))
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) ("x"))))
                xtest_optionals.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("--foo"))
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xextras)))) (((((xparser).xparse_known_args)) (((("--foo F --bar --baz".xsplit)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("F"))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("--bar") ("--baz"))) ((xextras)))
                xtest_mixed.write
                  [xself]
                    memory > xparser
                    memory > xargv
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("-v") ("?") (1) ((xint)))
                        (((unsupported)) (((xparser).xadd_argument)) ("--spam") ("store_false"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("badger"))
                        xargv.write (((unsupported)) ("B") ("C") ("--foo") ("-v") ("3") ("4"))
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xextras)))) (((((xparser).xparse_known_args)) ((xargv)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) (3) (TRUE) ("B"))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("C") ("--foo") ("4"))) ((xextras)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xargs
                    memory > xparser
                    memory > xbar
                    memory > xargv
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xargparse).xArgumentParser)) ("PROG"))
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ("foo"))
                        xbar.write (((unsupported)) (((xparser).xadd_argument)) ("--bar") ("bar") (TRUE))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("cmd"))
                        (((unsupported)) (((xparser).xadd_argument)) ("rest") ("*") ((xint)))
                        xargv.write ((("cmd --foo x 1 --bar y 2 3".xsplit)) 0)
                        xargs.write ((((xparser).xparse_intermixed_args)) ((xargv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("y") ("cmd") ("x") ((((unsupported)) (1) (2) (3))))) ((xargs)))
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xextras)))) (((((xparser).xparse_known_args)) ((xargv)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("y") ("cmd") ("x") ((((unsupported)) 0)))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("1") ("2") ("3"))) ((xextras)))
                        xargv.write ((("cmd --foo x 1 --error 2 --bar y 3".xsplit)) 0)
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xextras)))) (((((xparser).xparse_known_intermixed_args)) ((xargv)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ("y") ("cmd") ("x") ((((unsupported)) (1))))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("--error") ("2") ("3"))) ((xextras)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xparser).xusage)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xbar).xrequired)) (TRUE))
                xtest_remainder.write
                  [xself]
                    memory > xparser
                    memory > xargv
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("-z"))
                        bogusForceDataize.write ((((xparser).xadd_argument)) ("x"))
                        (((unsupported)) (((xparser).xadd_argument)) ("y") ("..."))
                        xargv.write ((("X A B -z Z".xsplit)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xparse_intermixed_args)) ((xargv)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((xcm).xexception)))) ("..."))
                xtest_exclusive.write
                  [xself]
                    memory > xgroup
                    memory > xargs
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) (TRUE))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--foo") ("store_true") ("FOO"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--spam") ("SPAM"))
                        (((unsupported)) (((xparser).xadd_argument)) ("badger") ("*") ("X") ("BADGER"))
                        xargs.write ((((xparser).xparse_intermixed_args)) (((("1 --foo 2".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNS)) ((((unsupported)) ("1") ("2"))) (TRUE) ("None: is there a None literal in the EO language?"))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xArgumentParserError)) (((xparser).xparse_intermixed_args)) (((("1 2".xsplit)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xgroup).xrequired)) (TRUE))
                xtest_exclusive_incompatible.write
                  [xself]
                    memory > xgroup
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG"))
                        xgroup.write (((unsupported)) (((xparser).xadd_mutually_exclusive_group)) (TRUE))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--foo") ("store_true") ("FOO"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("--spam") ("SPAM"))
                        (((unsupported)) (((xgroup).xadd_argument)) ("badger") ("*") ("X") ("BADGER"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xparser).xparse_intermixed_args)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xgroup).xrequired)) (TRUE))
            (((unsupported)) ((xTestCase)))
              xtest_missing_argument_name_in_message.write
                [xself]
                  memory > xparser
                  memory > xmsg
                  seq > @
                    seq
                      xparser.write (((unsupported)) ((xErrorRaisingArgumentParser)) ("PROG") (""))
                      (((unsupported)) (((xparser).xadd_argument)) ("req_pos") ((xstr)))
                      (((unsupported)) (((xparser).xadd_argument)) ("-req_opt") ((xint)) (TRUE))
                      (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                        bogusForceDataize.write ((((xparser).xparse_args)) ((((unsupported)) 0)))
                      xmsg.write (((xstr)) (((xcm).xexception)))
                      bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_pos"))
                      bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_opt"))
                      (((unsupported)) (((((xself).xassertRaises)) ((xArgumentParserError)))) ((xcm)))
                        bogusForceDataize.write ((((xparser).xparse_intermixed_args)) ((((unsupported)) 0)))
                      xmsg.write (((xstr)) (((xcm).xexception)))
                      bogusForceDataize.write ((((xself).xassertNotRegex)) ((xmsg)) ("req_pos"))
                      bogusForceDataize.write ((((xself).xassertRegex)) ((xmsg)) ("req_opt"))
            (((unsupported)) ((xTestCase)))
              seq
                xEXPECTED_MESSAGE.write "length of metavar tuple does not match nargs"
                xdo_test_no_exception.write
                  [xself xnargs xmetavar]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xnargs)) ((xmetavar)))
                xdo_test_exception.write
                  [xself xnargs xmetavar]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xnargs)) ((xmetavar)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xcm).xexception).xargs)) (0))) (((xself).xEXPECTED_MESSAGE)))
                xtest_nargs_None_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("None: is there a None literal in the EO language?") ("1"))
                xtest_nargs_None_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("None: is there a None literal in the EO language?") ((((xtuple)) 0)))
                xtest_nargs_None_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("1"))))
                xtest_nargs_None_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_None_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_optional_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("?") ("1"))
                xtest_nargs_optional_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("?") ((((xtuple)) 0)))
                xtest_nargs_optional_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("?") ((((unsupported)) ("1"))))
                xtest_nargs_optional_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("?") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_optional_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("?") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_zeroormore_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("*") ("1"))
                xtest_nargs_zeroormore_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("*") ((((xtuple)) 0)))
                xtest_nargs_zeroormore_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("*") ((((unsupported)) ("1"))))
                xtest_nargs_zeroormore_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("*") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_zeroormore_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("*") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_oneormore_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("+") ("1"))
                xtest_nargs_oneormore_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("+") ((((xtuple)) 0)))
                xtest_nargs_oneormore_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("+") ((((unsupported)) ("1"))))
                xtest_nargs_oneormore_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("+") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_oneormore_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("+") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_remainder_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("...") ("1"))
                xtest_nargs_remainder_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("...") ((((xtuple)) 0)))
                xtest_nargs_remainder_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("...") ((((unsupported)) ("1"))))
                xtest_nargs_remainder_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("...") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_remainder_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("...") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_parser_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("A...") ("1"))
                xtest_nargs_parser_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("A...") ((((xtuple)) 0)))
                xtest_nargs_parser_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) ("A...") ((((unsupported)) ("1"))))
                xtest_nargs_parser_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("A...") ((((unsupported)) ("1") ("2"))))
                xtest_nargs_parser_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) ("A...") ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_1_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (1) ("1"))
                xtest_nargs_1_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (1) ((((xtuple)) 0)))
                xtest_nargs_1_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (1) ((((unsupported)) ("1"))))
                xtest_nargs_1_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (1) ((((unsupported)) ("1") ("2"))))
                xtest_nargs_1_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (1) ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_2_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (2) ("1"))
                xtest_nargs_2_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (2) ((((xtuple)) 0)))
                xtest_nargs_2_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (2) ((((unsupported)) ("1"))))
                xtest_nargs_2_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (2) ((((unsupported)) ("1") ("2"))))
                xtest_nargs_2_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (2) ((((unsupported)) ("1") ("2") ("3"))))
                xtest_nargs_3_metavar_string.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (3) ("1"))
                xtest_nargs_3_metavar_length0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (3) ((((xtuple)) 0)))
                xtest_nargs_3_metavar_length1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (3) ((((unsupported)) ("1"))))
                xtest_nargs_3_metavar_length2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_exception)) (3) ((((unsupported)) ("1") ("2"))))
                xtest_nargs_3_metavar_length3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_no_exception)) (3) ((((unsupported)) ("1") ("2") ("3"))))
            (((unsupported)) ((xTestCase)))
              seq
                xEXPECTED_INVALID_MESSAGE.write "invalid nargs value"
                xEXPECTED_RANGE_MESSAGE.write "nargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate"
                xdo_test_range_exception.write
                  [xself xnargs]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xnargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xcm).xexception).xargs)) (0))) (((xself).xEXPECTED_RANGE_MESSAGE)))
                xdo_test_invalid_exception.write
                  [xself xnargs]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xargparse).xArgumentParser)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) (((xparser).xadd_argument)) ("--foo") ((xnargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xcm).xexception).xargs)) (0))) (((xself).xEXPECTED_INVALID_MESSAGE)))
                xtest_nargs_alphabetic.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdo_test_invalid_exception)) ("a"))
                        (((unsupported)) (((xself).xdo_test_invalid_exception)) ("abcd"))
                xtest_nargs_zero.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xdo_test_range_exception)) (0))
            (((unsupported)) ((xTestCase)))
              seq
                xtest.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xname)) (((xargparse).x__all__)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xargparse)) ((xname)))))
                xtest_all_exports_everything_but_modules.write
                  [xself]
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)) ((xname)) ((((unsupported)) ((xname)) ((xvalue)))) (((((((xvars)) ((xargparse))).xitems)) 0)) (((((((xname).xstartswith)) ("_")).or ((xname).eq "ngettext")).not)) ((((((xinspect).xismodule)) ((xvalue))).not)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((xitems)))) ((((xsorted)) (((xargparse).x__all__)))))
            (((unsupported)) ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xmetavar
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xparser)) ((((xErrorRaisingArgumentParser)) ("this_is_spammy_prog_with_a_long_name_sorry_about_the_name"))))
                        xmetavar.write "<http[s]://example:1234>"
                        (((unsupported)) ((((xself).xparser).xadd_argument)) ("--proxy") ((xmetavar)))
                xtest_help_with_metavar.write
                  [xself]
                    memory > xhelp_text
                    seq > @
                      seq
                        xhelp_text.write (((((xself).xparser).xformat_help)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhelp_text)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((x__name__)))
                    (((unsupported)) (((xRFile).xseen)) ((((unsupported)) 0)))
                    (((unsupported)) (((xWFile).xseen)) ((((xset)) 0)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)