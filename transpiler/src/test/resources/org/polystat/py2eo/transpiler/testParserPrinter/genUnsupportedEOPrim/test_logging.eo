memory > xLastResortTest
memory > xconfigparser
memory > xk
memory > xthreading
memory > xLoggerTest
memory > xassert_python_failure
memory > xcopy
memory > xUnixDatagramHandlerTest
memory > xFileHandlerTest
memory > xImportError
memory > xAttributeError
memory > xfd
memory > xConfigFileTest
memory > xMyLogger
memory > xrc
memory > xexpected
memory > xdata
memory > xpickle
memory > xFakeHandler
memory > xsecure
memory > xlist
memory > xdatetime
memory > xCheckingFilter
memory > xRuntimeError
memory > xhandler
memory > xlocals
memory > xBuiltinLevelsTest
memory > xBaseHTTPRequestHandler
memory > xassert_python_ok
memory > xValueError
memory > xsignal
memory > xSocketHandlerTest
memory > xStreamWithIntName
memory > xMiscTestCase
memory > xstr
memory > xMyHandler
memory > xio
memory > xout
memory > xUserWarning
memory > xsmtpd
memory > xLoggerAdapterTest
memory > xurlparse
memory > xwarnings
memory > xMockRaceConditionHandler
memory > xAssertionError
memory > xfile
memory > xino
memory > xLogRecordFactoryTest
memory > xsocket
memory > xEncodingTest
memory > xid_
memory > xDelegatingHTTPRequestHandler
memory > xTestBufferingFormatter
memory > xVerySpecificFilter
memory > xrange
memory > xControlMixin
memory > xDerivedLogRecord
memory > xh
memory > xMemoryHandlerTest
memory > xdf
memory > xZeroDivisionError
memory > xFormatterTest
memory > xref
memory > xDatagramRequestHandler
memory > xNotImplementedError
memory > xBufferingFormatterTest
memory > xpeer
memory > xIndexError
memory > xQueueHandlerTest
memory > x_
memory > xmailfrom
memory > xsf
memory > xlvl
memory > xStreamRequestHandler
memory > xdelay
memory > xfn
memory > xproto
memory > xqueue
memory > xKeyError
memory > xparse_qs
memory > xtempfile
memory > xBaseTest
memory > xGarrulousFilter
memory > xTestUDPServer
memory > xConfigDictTest
memory > xnamedtuple
memory > xrandom
memory > xWarningsTest
memory > xoutput
memory > xopen
memory > xtextwrap
memory > xtf
memory > xkw
memory > xpathlib
memory > xExceptionTest
memory > xprint
memory > xany
memory > xtype
memory > xTestSMTPServer
memory > xAdapter
memory > xrcpttos
memory > xssl
memory > xHandlerTest
memory > xTestUnixDatagramServer
memory > xrepr
memory > xint
memory > xre
memory > xThreadingTCPServer
memory > xHTTPHandlerTest
memory > xf
memory > xException
memory > xRotatingFileHandlerTest
memory > xTestUnixStreamServer
memory > xhasattr
memory > xactual
memory > xdev
memory > xNTEventLogHandlerTest
memory > xtime
memory > xcodecs
memory > xi
memory > xwhen
memory > xTestHTTPServer
memory > xstruct
memory > xsuper
memory > xsupport
memory > xsys
memory > xLogRecordTest
memory > xBadStream
memory > xUnixSysLogHandlerTest
memory > xexisting
memory > xm
memory > xtuple
memory > xexp
memory > xIPv6SysLogHandlerTest
memory > xTestStreamHandler
memory > xstderr
memory > xDelegatingTCPRequestHandler
memory > xcls
memory > xgc
memory > xargs
memory > xOSError
memory > xobj
memory > xShutdownTest
memory > xQueueListenerTest
memory > xos
memory > xManagerTest
memory > xDelegatingUDPRequestHandler
memory > xweakref
memory > xExceptionFormatter
memory > xgetattr
memory > xv
memory > xid
memory > xmultiprocessing
memory > xChildLoggerTest
memory > xe
memory > xday
memory > x__file__
memory > xSysLogHandlerTest
memory > xsetattr
memory > xUnixSocketHandlerTest
memory > xzip
memory > xunittest
memory > xTimedRotatingFileHandlerTest
memory > xStreamHandlerTest
memory > xCustomLevelsAndFiltersTest
memory > xasyncore
memory > xBasicConfigTest
memory > xmap
memory > x_OurHandler
memory > xn
memory > xobject
memory > xjson
memory > xthread
memory > xaddr
memory > xstatus
memory > xHTTPServer
memory > xBaseFileTest
memory > xSMTPHandlerTest
memory > xwaited_pid
memory > xzlib
memory > xDatagramHandlerTest
memory > xUTC
memory > xkwargs
memory > xThreadingUDPServer
memory > xisinstance
memory > xMemoryTest
memory > xlen
memory > xdn
memory > xdict
memory > xRecordingHandler
memory > xModuleLevelMiscTest
memory > xBasicFilterTest
memory > xmethod
memory > xrepr_
memory > x__name__
memory > xkey
memory > xlogging
memory > xTestTCPServer
memory > xTypeError
memory > x_NotAnIntOrString
memory > xa
[] > test_logging
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_nested_inherited
        memory > xtest_handlers
        memory > xtest_compute_rollover
        memory > xraise_error
        memory > xtest_stream
        memory > xtest_error_handling
        memory > xassertLogFile
        memory > xtest_config15_ok
        memory > xpywintypes
        memory > xtest_has_handlers
        memory > xtest_format
        memory > xtest_set_logger_class
        memory > xtest_force
        memory > xconfig4a
        memory > xtest_format_validate
        memory > xtest_invalid_names
        memory > xtest_custom_formatter_class_with_validate2
        memory > xtest__all__
        memory > xtest_compute_rollover_weekly_attime
        memory > xtest_datefmt
        memory > xassert_log_lines
        memory > xtest_flat
        memory > xtest_braces
        memory > xtzname
        memory > xconfig6
        memory > xlog_format
        memory > xtest_logger_disabling
        memory > xapply_config
        memory > xtest_rollover
        memory > xtest_encoding_plain_file
        memory > xmy_logging_levels
        memory > xLEVEL_RANGE
        memory > xtest_config_8_ok
        memory > xtest_set_invalid_level
        memory > x_get_temp_domain_socket
        memory > xTALKATIVE
        memory > xhandlerFunc
        memory > xtest_log_invalid_level_with_raise
        memory > xrepeat
        memory > xtest_queue_listener_with_multiple_handlers
        memory > xtest_exception_excinfo
        memory > xtest_handle_called_with_queue_queue
        memory > xtest_dollars
        memory > xTERSE
        memory > xsecs
        memory > xtest_filter
        memory > xtest_config7_ok
        memory > xtest_percent
        memory > xBORING
        memory > xdisable_test
        memory > xtest_specific_filters
        memory > xtest_listen_config_10_ok
        memory > xutcoffset
        memory > xtest_path_objects
        memory > xtest_namedtuple
        memory > xcustom_formatter_class_validate3
        memory > xformatException
        memory > xtest_find_caller_with_stacklevel
        memory > xtest_out_of_order_with_dollar_style
        memory > xformatHeader
        memory > xtest_rollover_filenames
        memory > x_assertTruesurvival
        memory > xtest_config6_ok
        memory > xout_of_order
        memory > xtest_default
        memory > xwin32evtlogutil
        memory > xtest_critical
        memory > xCHATTERBOX
        memory > xconfig1
        memory > xtest_caching
        memory > xtest_config14_ok
        memory > xtest_last_resort
        memory > xconfig7
        memory > xconfig14
        memory > xtest_empty_filter
        memory > xtest_nested_explicit
        memory > xtest_custom_formatter_class_with_validate3
        memory > xSOCIABLE
        memory > xlog_at_all_levels
        memory > xtest_config2a_failure
        memory > xtest_optional
        memory > xZERO
        memory > xcustom_formatter_class_validate
        memory > xtest_with_other_error_in_close_with_raise
        memory > xtest_output
        memory > xtest_calls_task_done_after_stop
        memory > xtest_is_enabled_for
        memory > xtest_callable_filter
        memory > xtest_queue_handler
        memory > xformatFunc
        memory > xtest_config5_ok
        memory > xtest_main
        memory > xtest_queue_listener
        memory > xtest_make_record_with_extra_no_overwrite
        memory > xconfig13
        memory > xtest_filename
        memory > xtest_config1_ok
        memory > xtest_compute_rollover_daily_attime
        memory > xtest_str_rep
        memory > xtest_with_other_error_in_close_without_raise
        memory > xtest_race
        memory > xstop
        memory > xtest_with_other_error_in_flush_with_raise
        memory > xtest_warnings
        memory > xget_all_from_queue
        memory > xtest_listen_config_1_ok
        memory > xtest_error
        memory > xtest_queue_listener_with_StreamHandler
        memory > xtest_config_9_ok
        memory > xnext_rec
        memory > xtest_should_not_rollover
        memory > xtest_listen_verify
        memory > xtest_config8_ok
        memory > xtest_root_logger_aliases
        memory > xtest_file_created
        memory > x_test_with_failure_in_method
        memory > xstart
        memory > xtest_config4_ok
        memory > xsetUp
        memory > xtest_with_other_error_in_acquire_without_raise
        memory > xconfig3
        memory > xconfig10
        memory > xtest_subclass_logger_cache
        memory > xtest_handler_filter
        memory > xtest_config2b_failure
        memory > xtest_multiprocessing
        memory > xtest_pickling
        memory > xhandle_datagram
        memory > xtest_with_ioerror_in_acquire
        memory > xtest_has_handlers_no_propagate
        memory > xcustom_formatter_with_function
        memory > xtest_custom_formatter_class_with_validate2_with_wrong_fmt
        memory > xtest_persistent_loggers
        memory > xmessage_num
        memory > xconfig0
        memory > xtest_manager_loggerclass
        memory > xlevel
        memory > xhandleError
        memory > xtest_with_other_error_in_acquire_with_raise
        memory > xconfig2
        memory > xtest_is_enabled_for_disabled_logger
        memory > xtest_config0_using_cp_ok
        memory > xTIMEOUT
        memory > xtest_with_other_error_in_flush_without_raise
        memory > xutc
        memory > xconfig8a
        memory > xhandle_request
        memory > xtest_no_kwargs
        memory > xtest_baseconfig
        memory > xconfig2a
        memory > xVERBOSE
        memory > xtest_config3_failure
        memory > xconfig9b
        memory > xtest_recursion_error
        memory > xtest_flush_on_close
        memory > xtest_find_caller_with_stack_info
        memory > xtest_config6_failure
        memory > x_test_log
        memory > xtest_incompatible
        memory > xconfig1a
        memory > xtest_with_valueerror_in_close
        memory > xconfig12
        memory > xtest_can_represent_stream_with_int_name
        memory > xtest_custom_formatter_function_with_validate
        memory > xtest_make_record_with_extra_overwrite
        memory > xTACITURN
        memory > xrecord_call
        memory > xtest_post_fork_child_no_deadlock
        memory > xassert_error_message
        memory > xtest_warnings_no_handlers
        memory > xtest_name
        memory > xtest_custom_formatter_class_with_validate
        memory > xtest_basic
        memory > xconfig8
        memory > xGARRULOUS
        memory > xtest_noserver
        memory > xconfig4
        memory > xget_record
        memory > xhandle
        memory > xtest_config11_ok
        memory > xEFFUSIVE
        memory > xtest_logging_at_shutdown
        memory > xtest_nested
        memory > xtest_builtin_handlers
        memory > xtest_exception
        memory > xtest_with_valueerror_in_acquire
        memory > xtest_nested_with_virtual_parent
        memory > xtest_strformatstyle
        memory > xtest_out_of_order
        memory > xnext_message
        memory > xtest_with_ioerror_in_close
        memory > xexpected_log_pat
        memory > xsetup_via_listener
        memory > xtest_dict_arg
        memory > xtest_no_failure
        memory > xtest_config12_failure
        memory > xtest_race_between_set_target_and_flush
        memory > xsetup_and_log
        memory > xtest_with_ioerror_in_flush
        memory > xconfig2b
        memory > xtest_logger_filter
        memory > xtest_log_invalid_level_no_raise
        memory > x__init__
        memory > xtest_style
        memory > xtest_set_log_record_factory
        memory > xtest_config13_failure
        memory > xtest_flush
        memory > xserver_class
        memory > xtest_invalid
        memory > xtest_warning
        memory > xtest_invalid_style
        memory > xtest_should_rollover
        memory > xprocess_message
        memory > xdst
        memory > xconfig11
        memory > xget_request
        memory > xconfig9a
        memory > xtest_log
        memory > xtest_config2_failure
        memory > xtest_disable
        memory > xname
        memory > xtest_child_loggers
        memory > xcleanup
        memory > xwrite
        memory > xSILENT
        memory > xtest_stringtemplatestyle
        memory > xtest_config0_ok
        memory > xserver_bind
        memory > xtest_rotator
        memory > xwin32evtlog
        memory > xtest_regression_22386
        memory > xconfig9
        memory > xtest_config_8a_ok
        memory > xserve_forever
        memory > xtest_config_10_ok
        memory > xtest_issue27935
        memory > xtest_stream_setting
        memory > xtest_with_valueerror_in_flush
        memory > xtest_custom
        memory > xtest_defaults_do_no_interpolation
        memory > xtest_logrecord_class
        memory > xtearDown
        memory > xconfig5
        memory > xtest_delay
        memory > xfilter
        memory > xaddress
        memory > xformatFooter
        memory > xtest_handle_called_with_mp_queue
        memory > x_watch_for_survival
        memory > xtest_encoding_cyrillic_unicode
        memory > xtest_time
        memory > xtest_info
        memory > xhandle_socket
        memory > xtest_debug
        memory > xserver_close
        memory > xtest_level
        memory > xtest_formatting
        memory > xtest_regression_29220
        memory > xcheck_no_resource_warning
        memory > xtest_filemode
        memory > xaddress_family
        memory > xtest_no_messages_in_queue_after_stop
        memory > xtest_config4a_ok
        memory > xallow_reuse_address
        memory > xcustom_formatter_class_validate2
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((xwin32evtlog)) ((xwin32evtlogutil)) ((xpywintypes)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xlog_format.write "%(name)s -> %(levelname)s: %(message)s"
                xexpected_log_pat.write "^([w.]+) -> (w+): (d+)$"
                xmessage_num.write 0
                xsetUp.write
                  [xself]
                    memory > xsaved_loggers
                    memory > xlogger_states
                    memory > xlogger_dict
                    memory > xhlist
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).x_threading_key)) (((((xsupport).xthreading_setup)) 0)))
                        xlogger_dict.write ((((((xlogging).xgetLogger)) 0).xmanager).xloggerDict)
                        bogusForceDataize.write ((((xlogging).x_acquireLock)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xself).xsaved_handlers)) ((((((xlogging).x_handlers).xcopy)) 0)))
                            (((unsupported)) (((xself).xsaved_handler_list)) ((((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))))
                            (((unsupported)) (((xself).xsaved_loggers)) ((xsaved_loggers)) (((((xlogger_dict).xcopy)) 0)))
                            (((unsupported)) (((xself).xsaved_name_to_level)) ((((((xlogging).x_nameToLevel).xcopy)) 0)))
                            (((unsupported)) (((xself).xsaved_level_to_name)) ((((((xlogging).x_levelToName).xcopy)) 0)))
                            (((unsupported)) (((xself).xlogger_states)) ((xlogger_states)) ((((unsupported)) 0)))
                            (((unsupported)) ((xname)) ((xsaved_loggers)))
                              (((unsupported)) ((((unsupported)) ((xlogger_states)) ((xname)))) ((((xgetattr)) ((((unsupported)) ((xsaved_loggers)) ((xname)))) ("disabled") ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xlogging).x_releaseLock)) 0)
                        (((unsupported)) (((xself).xlogger1)) (((((xlogging).xgetLogger)) ("xabxd7xbb"))))
                        (((unsupported)) (((xself).xlogger2)) (((((xlogging).xgetLogger)) ("u013fu00d6u0047"))))
                        (((unsupported)) (((xself).xroot_logger)) (((((xlogging).xgetLogger)) (""))))
                        (((unsupported)) (((xself).xoriginal_logging_level)) ((((((xself).xroot_logger).xgetEffectiveLevel)) 0)))
                        (((unsupported)) (((xself).xstream)) (((((xio).xStringIO)) 0)))
                        bogusForceDataize.write (((((xself).xroot_logger).xsetLevel)) (((xlogging).xDEBUG)))
                        (((unsupported)) (((xself).xroot_hdlr)) (((((xlogging).xStreamHandler)) (((xself).xstream)))))
                        (((unsupported)) (((xself).xroot_formatter)) (((((xlogging).xFormatter)) (((xself).xlog_format)))))
                        bogusForceDataize.write (((((xself).xroot_hdlr).xsetFormatter)) (((xself).xroot_formatter)))
                        (((((xself).xlogger1).xhasHandlers)) 0).if
                          seq
                            xhlist.write ((((xself).xlogger1).xhandlers).add (((xself).xroot_logger).xhandlers))
                            (((unsupported)) ((((xAssertionError)) (("Unexpected handlers: %s".mod (xhlist))))))
                        (((((xself).xlogger2).xhasHandlers)) 0).if
                          seq
                            xhlist.write ((((xself).xlogger2).xhandlers).add (((xself).xroot_logger).xhandlers))
                            (((unsupported)) ((((xAssertionError)) (("Unexpected handlers: %s".mod (xhlist))))))
                        bogusForceDataize.write (((((xself).xroot_logger).xaddHandler)) (((xself).xroot_hdlr)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xlogger1).xhasHandlers)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xlogger2).xhasHandlers)) 0)))
                xtearDown.write
                  [xself]
                    memory > xloggerDict
                    memory > xmanager
                    memory > xlogger_states
                    memory > xh
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xstream).xclose)) 0)
                        bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) (((xself).xroot_hdlr)))
                        while.
                          (((xself).xroot_logger).xhandlers)
                          [unused]
                            seq > @
                              seq
                                xh.write (((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))
                                bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) ((xh)))
                                bogusForceDataize.write ((((xh).xclose)) 0)
                        bogusForceDataize.write (((((xself).xroot_logger).xsetLevel)) (((xself).xoriginal_logging_level)))
                        bogusForceDataize.write ((((xlogging).x_acquireLock)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((((xlogging).x_levelToName).xclear)) 0)
                            bogusForceDataize.write (((((xlogging).x_levelToName).xupdate)) (((xself).xsaved_level_to_name)))
                            bogusForceDataize.write (((((xlogging).x_nameToLevel).xclear)) 0)
                            bogusForceDataize.write (((((xlogging).x_nameToLevel).xupdate)) (((xself).xsaved_name_to_level)))
                            bogusForceDataize.write (((((xlogging).x_handlers).xclear)) 0)
                            bogusForceDataize.write (((((xlogging).x_handlers).xupdate)) (((xself).xsaved_handlers)))
                            (((unsupported)) ((((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))) (((xself).xsaved_handler_list)))
                            xmanager.write (((((xlogging).xgetLogger)) 0).xmanager)
                            (((unsupported)) (((xmanager).xdisable)) (0))
                            xloggerDict.write ((xmanager).xloggerDict)
                            bogusForceDataize.write ((((xloggerDict).xclear)) 0)
                            bogusForceDataize.write ((((xloggerDict).xupdate)) (((xself).xsaved_loggers)))
                            xlogger_states.write ((xself).xlogger_states)
                            (((unsupported)) ((xname)) (((xself).xlogger_states)))
                              (((unsupported)) ((((unsupported)) ((xlogger_states)) ((xname)))) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)) (((((unsupported)) (((xself).xsaved_loggers)) ((xname))).xdisabled)) ((((unsupported)) ((xlogger_states)) ((xname)))))
                          bogusForceDataize.write ((((xlogging).x_releaseLock)) 0)
                        bogusForceDataize.write ((((xself).xdoCleanups)) 0)
                        bogusForceDataize.write ((((xsupport).xthreading_cleanup)) ((((unsupported)) (((xself).x_threading_key)))))
                xassert_log_lines.write
                  [xself xexpected_values xstream xpat]
                    memory > xs
                    memory > xactual_lines
                    memory > xmatch
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xstream.write ((xstream).or ((xself).xstream))
                        xpat.write ((((xre).xcompile)) (((xpat).or ((xself).xexpected_log_pat))))
                        xactual_lines.write (((((((xstream).xgetvalue)) 0).xsplitlines)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xactual_lines)))) ((((xlen)) ((xexpected_values)))))
                        (((unsupported)) ((((unsupported)) ((xactual)) ((xexpected)))) ((((xzip)) ((xactual_lines)) ((xexpected_values)))))
                          seq
                            xmatch.write ((((xpat).xsearch)) ((xactual)))
                            ((xmatch).not).if
                              bogusForceDataize.write ((((xself).xfail)) (("Log line does not match expected pattern:n".add (xactual))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) (((((xmatch).xgroups)) 0)))) ((xexpected)))
                        xs.write ((((xstream).xread)) 0)
                        (xs).if
                          bogusForceDataize.write ((((xself).xfail)) (("Remaining output at end of log stream:n".add (xs))))
                xnext_message.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).xmessage_num)) (1))
                        (((unsupported)) (("%d".mod ((xself).xmessage_num))))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xtest_flat.write
                  [xself]
                    memory > xERR
                    memory > xDEB
                    memory > xm
                    memory > xINF
                    seq > @
                      seq
                        xm.write ((xself).xnext_message)
                        xERR.write ((((xlogging).xgetLogger)) ("ERR"))
                        bogusForceDataize.write ((((xERR).xsetLevel)) (((xlogging).xERROR)))
                        xINF.write ((((xlogging).xLoggerAdapter)) (((((xlogging).xgetLogger)) ("INF"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xINF).xsetLevel)) (((xlogging).xINFO)))
                        xDEB.write ((((xlogging).xgetLogger)) ("DEB"))
                        bogusForceDataize.write ((((xDEB).xsetLevel)) (((xlogging).xDEBUG)))
                        bogusForceDataize.write ((((xERR).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xERR).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xDEB).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xDEB).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xDEB).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xDEB).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xDEB).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xERR).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xERR).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xERR).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("ERR") ("CRITICAL") ("1"))) ((((unsupported)) ("ERR") ("ERROR") ("2"))) ((((unsupported)) ("INF") ("CRITICAL") ("3"))) ((((unsupported)) ("INF") ("ERROR") ("4"))) ((((unsupported)) ("INF") ("WARNING") ("5"))) ((((unsupported)) ("INF") ("INFO") ("6"))) ((((unsupported)) ("DEB") ("CRITICAL") ("7"))) ((((unsupported)) ("DEB") ("ERROR") ("8"))) ((((unsupported)) ("DEB") ("WARNING") ("9"))) ((((unsupported)) ("DEB") ("INFO") ("10"))) ((((unsupported)) ("DEB") ("DEBUG") ("11"))))))
                xtest_nested_explicit.write
                  [xself]
                    memory > xINF_ERR
                    memory > xm
                    memory > xINF
                    seq > @
                      seq
                        xm.write ((xself).xnext_message)
                        xINF.write ((((xlogging).xgetLogger)) ("INF"))
                        bogusForceDataize.write ((((xINF).xsetLevel)) (((xlogging).xINFO)))
                        xINF_ERR.write ((((xlogging).xgetLogger)) ("INF.ERR"))
                        bogusForceDataize.write ((((xINF_ERR).xsetLevel)) (((xlogging).xERROR)))
                        bogusForceDataize.write ((((xINF_ERR).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INF.ERR") ("CRITICAL") ("1"))) ((((unsupported)) ("INF.ERR") ("ERROR") ("2"))))))
                xtest_nested_inherited.write
                  [xself]
                    memory > xINF_UNDEF
                    memory > xINF_ERR_UNDEF
                    memory > xm
                    memory > xINF
                    memory > xUNDEF
                    memory > xINF_ERR
                    seq > @
                      seq
                        xm.write ((xself).xnext_message)
                        xINF.write ((((xlogging).xgetLogger)) ("INF"))
                        bogusForceDataize.write ((((xINF).xsetLevel)) (((xlogging).xINFO)))
                        xINF_ERR.write ((((xlogging).xgetLogger)) ("INF.ERR"))
                        bogusForceDataize.write ((((xINF_ERR).xsetLevel)) (((xlogging).xERROR)))
                        xINF_UNDEF.write ((((xlogging).xgetLogger)) ("INF.UNDEF"))
                        xINF_ERR_UNDEF.write ((((xlogging).xgetLogger)) ("INF.ERR.UNDEF"))
                        xUNDEF.write ((((xlogging).xgetLogger)) ("UNDEF"))
                        bogusForceDataize.write ((((xINF_UNDEF).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_UNDEF).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_UNDEF).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_UNDEF).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR_UNDEF).xlog)) (((xlogging).xCRITICAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR_UNDEF).xerror)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_UNDEF).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR_UNDEF).xwarning)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR_UNDEF).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xINF_ERR_UNDEF).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INF.UNDEF") ("CRITICAL") ("1"))) ((((unsupported)) ("INF.UNDEF") ("ERROR") ("2"))) ((((unsupported)) ("INF.UNDEF") ("WARNING") ("3"))) ((((unsupported)) ("INF.UNDEF") ("INFO") ("4"))) ((((unsupported)) ("INF.ERR.UNDEF") ("CRITICAL") ("5"))) ((((unsupported)) ("INF.ERR.UNDEF") ("ERROR") ("6"))))))
                xtest_nested_with_virtual_parent.write
                  [xself]
                    memory > xGRANDCHILD
                    memory > xCHILD
                    memory > xm
                    memory > xINF
                    seq > @
                      seq
                        xm.write ((xself).xnext_message)
                        xINF.write ((((xlogging).xgetLogger)) ("INF"))
                        xGRANDCHILD.write ((((xlogging).xgetLogger)) ("INF.BADPARENT.UNDEF"))
                        xCHILD.write ((((xlogging).xgetLogger)) ("INF.BADPARENT"))
                        bogusForceDataize.write ((((xINF).xsetLevel)) (((xlogging).xINFO)))
                        bogusForceDataize.write ((((xGRANDCHILD).xlog)) (((xlogging).xFATAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xGRANDCHILD).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xCHILD).xlog)) (((xlogging).xFATAL)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xCHILD).xinfo)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xGRANDCHILD).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xCHILD).xdebug)) ((((xm)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INF.BADPARENT.UNDEF") ("CRITICAL") ("1"))) ((((unsupported)) ("INF.BADPARENT.UNDEF") ("INFO") ("2"))) ((((unsupported)) ("INF.BADPARENT") ("CRITICAL") ("3"))) ((((unsupported)) ("INF.BADPARENT") ("INFO") ("4"))))))
                xtest_regression_22386.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLevelName)) ("INFO"))) (((xlogging).xINFO)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLevelName)) (((xlogging).xINFO)))) ("INFO"))
                xtest_issue27935.write
                  [xself]
                    memory > xfatal
                    seq > @
                      seq
                        xfatal.write ((((xlogging).xgetLevelName)) ("FATAL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfatal)) (((xlogging).xFATAL)))
                xtest_regression_29220.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xlogging).xaddLevelName)) (((xlogging).xINFO)) (""))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xaddLevelName)) (((xlogging).xINFO)) ("INFO"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLevelName)) (((xlogging).xINFO)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLevelName)) (((xlogging).xNOTSET)))) ("NOTSET"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLevelName)) ("NOTSET"))) (((xlogging).xNOTSET)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xtest_filter.write
                  [xself]
                    memory > xhandler
                    memory > xspam_bakedbeans
                    memory > xspam_eggs_fish
                    memory > xfilter_
                    memory > xspam_eggs
                    memory > xspam
                    seq > @
                      seq
                        xfilter_.write ((((xlogging).xFilter)) ("spam.eggs"))
                        xhandler.write (((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xhandler).xaddFilter)) ((xfilter_)))
                            xspam.write ((((xlogging).xgetLogger)) ("spam"))
                            xspam_eggs.write ((((xlogging).xgetLogger)) ("spam.eggs"))
                            xspam_eggs_fish.write ((((xlogging).xgetLogger)) ("spam.eggs.fish"))
                            xspam_bakedbeans.write ((((xlogging).xgetLogger)) ("spam.bakedbeans"))
                            bogusForceDataize.write ((((xspam).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_eggs).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_eggs_fish).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_bakedbeans).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("spam.eggs") ("INFO") ("2"))) ((((unsupported)) ("spam.eggs.fish") ("INFO") ("3"))))))
                          bogusForceDataize.write ((((xhandler).xremoveFilter)) ((xfilter_)))
                xtest_callable_filter.write
                  [xself]
                    memory > xhandler
                    memory > xspam_bakedbeans
                    memory > xspam_eggs
                    memory > xspam
                    memory > xfilterfunc
                    memory > xspam_eggs_fish
                    seq > @
                      seq
                        xfilterfunc.write
                          [xrecord]
                            memory > xparts
                            memory > xprefix
                            seq > @
                              seq
                                xparts.write (((((xrecord).xname).xsplit)) ("."))
                                xprefix.write (((".".xjoin)) ((((unsupported)) ((xparts)) ((((unsupported)) (2))))))
                                (((unsupported)) (((xprefix).eq "spam.eggs")))
                        xhandler.write (((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xhandler).xaddFilter)) ((xfilterfunc)))
                            xspam.write ((((xlogging).xgetLogger)) ("spam"))
                            xspam_eggs.write ((((xlogging).xgetLogger)) ("spam.eggs"))
                            xspam_eggs_fish.write ((((xlogging).xgetLogger)) ("spam.eggs.fish"))
                            xspam_bakedbeans.write ((((xlogging).xgetLogger)) ("spam.bakedbeans"))
                            bogusForceDataize.write ((((xspam).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_eggs).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_eggs_fish).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xspam_bakedbeans).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("spam.eggs") ("INFO") ("2"))) ((((unsupported)) ("spam.eggs.fish") ("INFO") ("3"))))))
                          bogusForceDataize.write ((((xhandler).xremoveFilter)) ((xfilterfunc)))
                xtest_empty_filter.write
                  [xself]
                    memory > xr
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xlogging).xFilter)) 0)
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("name") ("spam.eggs"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xfilter)) ((xr)))))
            xSILENT.write 120
            xTACITURN.write 119
            xTERSE.write 118
            xEFFUSIVE.write 117
            xSOCIABLE.write 116
            xVERBOSE.write 115
            xTALKATIVE.write 114
            xGARRULOUS.write 113
            xCHATTERBOX.write 112
            xBORING.write 111
            xLEVEL_RANGE.write (((xrange)) ((xBORING)) (((xSILENT).add 1)))
            xmy_logging_levels.write (((unsupported)) ((xSILENT)) ("Silent") ((xTACITURN)) ("Taciturn") ((xTERSE)) ("Terse") ((xEFFUSIVE)) ("Effusive") ((xSOCIABLE)) ("Sociable") ((xVERBOSE)) ("Verbose") ((xTALKATIVE)) ("Talkative") ((xGARRULOUS)) ("Garrulous") ((xCHATTERBOX)) ("Chatterbox") ((xBORING)) ("Boring"))
            (((unsupported)) (((xlogging).xFilter)))
              seq
                unsupported
                xfilter.write
                  [xself xrecord]
                    seq > @
                      (((unsupported)) ((((xrecord).xlevelno).neq (xGARRULOUS))))
            (((unsupported)) (((xlogging).xFilter)))
              seq
                unsupported
                xfilter.write
                  [xself xrecord]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xrecord).xlevelno)) ((((unsupported)) ((xSOCIABLE)) ((xTACITURN)))))))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xexpected_log_pat.write "^[w.]+ -> (w+): (d+)$"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) (((((xmy_logging_levels).xitems)) 0)))
                          bogusForceDataize.write ((((xlogging).xaddLevelName)) ((xk)) ((xv)))
                xlog_at_all_levels.write
                  [xself xlogger]
                    seq > @
                      (((unsupported)) ((xlvl)) ((xLEVEL_RANGE)))
                        bogusForceDataize.write ((((xlogger).xlog)) ((xlvl)) (((((xself).xnext_message)) 0)))
                xtest_logger_filter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xroot_logger).xsetLevel)) ((xVERBOSE)))
                        bogusForceDataize.write ((((xself).xlog_at_all_levels)) (((xself).xroot_logger)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("Verbose") ("5"))) ((((unsupported)) ("Sociable") ("6"))) ((((unsupported)) ("Effusive") ("7"))) ((((unsupported)) ("Terse") ("8"))) ((((unsupported)) ("Taciturn") ("9"))) ((((unsupported)) ("Silent") ("10"))))))
                xtest_handler_filter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0)).xsetLevel)) ((xSOCIABLE)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xlog_at_all_levels)) (((xself).xroot_logger)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("Sociable") ("6"))) ((((unsupported)) ("Effusive") ("7"))) ((((unsupported)) ("Terse") ("8"))) ((((unsupported)) ("Taciturn") ("9"))) ((((unsupported)) ("Silent") ("10"))))))
                          bogusForceDataize.write ((((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0)).xsetLevel)) (((xlogging).xNOTSET)))
                xtest_specific_filters.write
                  [xself]
                    memory > xspecific_filter
                    memory > xhandler
                    memory > xgarr
                    memory > xfirst_lines
                    seq > @
                      seq
                        xhandler.write (((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))
                        xspecific_filter.write "None: is there a None literal in the EO language?"
                        xgarr.write (((xGarrulousFilter)) 0)
                        bogusForceDataize.write ((((xhandler).xaddFilter)) ((xgarr)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xlog_at_all_levels)) (((xself).xroot_logger)))
                            xfirst_lines.write (((unsupported)) ((((unsupported)) ("Boring") ("1"))) ((((unsupported)) ("Chatterbox") ("2"))) ((((unsupported)) ("Talkative") ("4"))) ((((unsupported)) ("Verbose") ("5"))) ((((unsupported)) ("Sociable") ("6"))) ((((unsupported)) ("Effusive") ("7"))) ((((unsupported)) ("Terse") ("8"))) ((((unsupported)) ("Taciturn") ("9"))) ((((unsupported)) ("Silent") ("10"))))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((xfirst_lines)))
                            xspecific_filter.write (((xVerySpecificFilter)) 0)
                            bogusForceDataize.write (((((xself).xroot_logger).xaddFilter)) ((xspecific_filter)))
                            bogusForceDataize.write ((((xself).xlog_at_all_levels)) (((xself).xroot_logger)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) (((xfirst_lines).add (((unsupported)) ((((unsupported)) ("Boring") ("11"))) ((((unsupported)) ("Chatterbox") ("12"))) ((((unsupported)) ("Talkative") ("14"))) ((((unsupported)) ("Verbose") ("15"))) ((((unsupported)) ("Effusive") ("17"))) ((((unsupported)) ("Terse") ("18"))) ((((unsupported)) ("Silent") ("20")))))))
                          seq
                            (xspecific_filter).if
                              bogusForceDataize.write (((((xself).xroot_logger).xremoveFilter)) ((xspecific_filter)))
                            bogusForceDataize.write ((((xhandler).xremoveFilter)) ((xgarr)))
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_name.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write ((((xlogging).xHandler)) 0)
                        (((unsupported)) (((xh).xname)) ("generic"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("generic"))
                        (((unsupported)) (((xh).xname)) ("anothergeneric"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("anothergeneric"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNotImplementedError)) (((xh).xemit)) ("None: is there a None literal in the EO language?"))
                xtest_builtin_handlers.write
                  [xself]
                    memory > xsockname
                    memory > xh
                    memory > xr
                    seq > @
                      seq
                        (((unsupported)) (((xsys).xplatform)) ((((unsupported)) ("linux") ("darwin")))).if
                          seq
                            (((unsupported)) ((xexisting)) ((((unsupported)) (TRUE) (FALSE))))
                              seq
                                (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) 0)))
                                bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                                ((xexisting).not).if
                                  bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                                xh.write (((unsupported)) ((((xlogging).xhandlers).xWatchedFileHandler)) ((xfn)) (TRUE))
                                (xexisting).if
                                  seq
                                    (((unsupported)) ((((unsupported)) ((xdev)) ((xino)))) ((((unsupported)) (((xh).xdev)) (((xh).xino)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xdev)) ((1.neg)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xino)) ((1.neg)))
                                    xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("Test"))))
                                    bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                                    bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                                    bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xfn)))))
                                    bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xfn)))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdev)) ((1.neg)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xino)) ((1.neg)))
                                bogusForceDataize.write ((((xh).xclose)) 0)
                                (xexisting).if
                                  bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                            (((xsys).xplatform).eq "darwin").if
                              xsockname.write "/var/run/syslog"
                              xsockname.write "/dev/log"
                            (((unsupported)) ((xOSError)))
                              seq
                                xh.write (((((xlogging).xhandlers).xSysLogHandler)) ((xsockname)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xfacility)) (((xh).xLOG_USER)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((xh).xunixsocket)))
                                bogusForceDataize.write ((((xh).xclose)) 0)
                        (((unsupported)) ((xmethod)) ((((unsupported)) ("GET") ("POST") ("PUT"))))
                          ((xmethod).eq "PUT").if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xlogging).xhandlers).xHTTPHandler)) ("localhost") ("/log") ((xmethod)))
                            seq
                              xh.write (((((xlogging).xhandlers).xHTTPHandler)) ("localhost") ("/log") ((xmethod)))
                              bogusForceDataize.write ((((xh).xclose)) 0)
                        xh.write (((((xlogging).xhandlers).xBufferingHandler)) (0))
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xh).xshouldFlush)) ((xr)))))
                        bogusForceDataize.write ((((xh).xclose)) 0)
                        xh.write (((((xlogging).xhandlers).xBufferingHandler)) (1))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xh).xshouldFlush)) ((xr)))))
                        bogusForceDataize.write ((((xh).xclose)) 0)
                xtest_path_objects.write
                  [xself]
                    memory > xcases
                    memory > xh
                    memory > xpfn
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) 0)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                        xpfn.write ((((xpathlib).xPath)) ((xfn)))
                        xcases.write (((unsupported)) ((((unsupported)) (((xlogging).xFileHandler)) ((((unsupported)) ((xpfn)) ("w"))))) ((((unsupported)) ((((xlogging).xhandlers).xRotatingFileHandler)) ((((unsupported)) ((xpfn)) ("a"))))) ((((unsupported)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) ((((unsupported)) ((xpfn)) ("h"))))))
                        (((unsupported)) (((xsys).xplatform)) ((((unsupported)) ("linux") ("darwin")))).if
                          (((unsupported)) ((xcases)) ((((unsupported)) ((((unsupported)) ((((xlogging).xhandlers).xWatchedFileHandler)) ((((unsupported)) ((xpfn)) ("w"))))))))
                        (((unsupported)) ((((unsupported)) ((xcls)) ((xargs)))) ((xcases)))
                          seq
                            xh.write (((xcls)) ((((unsupported)) ((xargs)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xfn)))))
                            bogusForceDataize.write ((((xh).xclose)) 0)
                            bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                xtest_race.write
                  [xself]
                    memory > xlog_count
                    memory > xh
                    memory > xremove_loop
                    memory > xf
                    memory > xr
                    memory > xremover
                    memory > xdel_count
                    seq > @
                      (((unsupported)) 0)
                        xremove_loop.write
                          [xfname xtries]
                            seq > @
                              (((unsupported)) ((x_)) ((((xrange)) ((xtries)))))
                                seq
                                  (((unsupported)) ((xOSError)))
                                    seq
                                      bogusForceDataize.write ((((xos).xunlink)) ((xfname)))
                                      (((unsupported)) (((xself).xdeletion_time)) (((((xtime).xtime)) 0)))
                                  bogusForceDataize.write ((((xtime).xsleep)) ((0.004.mul ((((xrandom).xrandint)) (0) (4)))))
                        xdel_count.write 500
                        xlog_count.write 500
                        (((unsupported)) (((xself).xhandle_time)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xdeletion_time)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xdelay)) ((((unsupported)) (FALSE) (TRUE))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) (".log") ("test_logging-3-"))))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            xremover.write (((unsupported)) (((xthreading).xThread)) ((xremove_loop)) ((((unsupported)) ((xfn)) ((xdel_count)))))
                            (((unsupported)) (((xremover).xdaemon)) (TRUE))
                            bogusForceDataize.write ((((xremover).xstart)) 0)
                            xh.write (((unsupported)) ((((xlogging).xhandlers).xWatchedFileHandler)) ((xfn)) ((xdelay)))
                            xf.write ((((xlogging).xFormatter)) ("%(asctime)s: %(levelname)s: %(message)s"))
                            bogusForceDataize.write ((((xh).xsetFormatter)) ((xf)))
                            (((unsupported)) 0)
                              (((unsupported)) ((x_)) ((((xrange)) ((xlog_count)))))
                                seq
                                  bogusForceDataize.write ((((xtime).xsleep)) (0.005))
                                  xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("testing"))))
                                  (((unsupported)) ((xException)))
                                    seq
                                      (((unsupported)) (((xself).xhandle_time)) (((((xtime).xtime)) 0)))
                                      bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                                    seq
                                      bogusForceDataize.write (((xprint)) (("Deleted at %s, opened at %s".mod (((unsupported)) (((xself).xdeletion_time)) (((xself).xhandle_time))))))
                                      (((unsupported)) 0)
                              seq
                                bogusForceDataize.write ((((xremover).xjoin)) 0)
                                bogusForceDataize.write ((((xh).xclose)) 0)
                                (((((xos).xpath).xexists)) ((xfn))).if
                                  bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                xtest_post_fork_child_no_deadlock.write
                  [xself]
                    memory > xemit
                    memory > xlock_holder_thread
                    memory > xfork_happened__release_locks_and_end_thread
                    memory > xpid
                    memory > xlocks_held__ready_to_fork
                    memory > xtest_logger
                    memory > x__init__
                    memory > xrefed_h
                    memory > xlock_holder_thread_fn
                    memory > xstart_time
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) (((xlogging).xHandler)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((((xsuper)) 0).x__init__)) 0)
                                    (((unsupported)) (((xself).xsub_handler)) ((((unsupported)) (((xlogging).xStreamHandler)) ((((xopen)) ("/dev/null") ("wt"))))))
                            xemit.write
                              [xself xrecord]
                                seq > @
                                  seq
                                    bogusForceDataize.write (((((xself).xsub_handler).xacquire)) 0)
                                    (((unsupported)) 0)
                                      bogusForceDataize.write (((((xself).xsub_handler).xemit)) ((xrecord)))
                                      bogusForceDataize.write (((((xself).xsub_handler).xrelease)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xlogging).x_handlers)))) (0))
                        xrefed_h.write (((x_OurHandler)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((((xrefed_h).xsub_handler).xstream).xclose)))
                        (((unsupported)) (((xrefed_h).xname)) ("because we need at least one for this test"))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) (((xlogging).x_handlers)))) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) (((xlogging).x_at_fork_reinit_lock_weakset)))) (1))
                        xtest_logger.write ((((xlogging).xgetLogger)) ("test_post_fork_child_no_deadlock"))
                        bogusForceDataize.write ((((xtest_logger).xaddHandler)) ((xrefed_h)))
                        bogusForceDataize.write ((((xtest_logger).xsetLevel)) (((xlogging).xDEBUG)))
                        xlocks_held__ready_to_fork.write ((((xthreading).xEvent)) 0)
                        xfork_happened__release_locks_and_end_thread.write ((((xthreading).xEvent)) 0)
                        xlock_holder_thread_fn.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xlogging).x_acquireLock)) 0)
                                (((unsupported)) 0)
                                  seq
                                    bogusForceDataize.write ((((xrefed_h).xacquire)) 0)
                                    (((unsupported)) 0)
                                      seq
                                        bogusForceDataize.write ((((xlocks_held__ready_to_fork).xset)) 0)
                                        bogusForceDataize.write ((((xfork_happened__release_locks_and_end_thread).xwait)) (0.5))
                                      bogusForceDataize.write ((((xrefed_h).xrelease)) 0)
                                  bogusForceDataize.write ((((xlogging).x_releaseLock)) 0)
                        xlock_holder_thread.write (((unsupported)) (((xthreading).xThread)) ((xlock_holder_thread_fn)) ("test_post_fork_child_no_deadlock lock holder"))
                        bogusForceDataize.write ((((xlock_holder_thread).xstart)) 0)
                        bogusForceDataize.write ((((xlocks_held__ready_to_fork).xwait)) 0)
                        xpid.write ((((xos).xfork)) 0)
                        ((xpid).eq 0).if
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((xtest_logger).xinfo)) ("Child process did not deadlock. o/"))
                            bogusForceDataize.write ((((xos).x_exit)) (0))
                          seq
                            bogusForceDataize.write ((((xtest_logger).xinfo)) ("Parent process returned from fork. o/"))
                            bogusForceDataize.write ((((xfork_happened__release_locks_and_end_thread).xset)) 0)
                            bogusForceDataize.write ((((xlock_holder_thread).xjoin)) 0)
                            xstart_time.write ((((xtime).xmonotonic)) 0)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xtest_logger).xdebug)) ("Waiting for child process."))
                                    (((unsupported)) ((((unsupported)) ((xwaited_pid)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (((xos).xWNOHANG)))))
                                    ((xwaited_pid).eq (xpid)).if
                                      (((unsupported)) 0)
                                    ((((((xtime).xmonotonic)) 0).sub (xstart_time)).greater 7).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xtime).xsleep)) (0.05))
                            bogusForceDataize.write ((((xtest_logger).xdebug)) ("Done waiting."))
                            ((xwaited_pid).neq (xpid)).if
                              seq
                                bogusForceDataize.write ((((xos).xkill)) ((xpid)) (((xsignal).xSIGKILL)))
                                (((unsupported)) ((((unsupported)) ((xwaited_pid)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                                bogusForceDataize.write ((((xself).xfail)) ("child process deadlocked."))
                            (((unsupported)) (((xself).xassertEqual)) ((xstatus)) (0) ("child process error"))
            (((unsupported)) ((xobject)))
              xwrite.write
                [xself xdata]
                  seq > @
                    (((unsupported)) ((((xRuntimeError)) ("deliberate mistake"))))
            (((unsupported)) (((xlogging).xStreamHandler)))
              xhandleError.write
                [xself xrecord]
                  seq > @
                    (((unsupported)) (((xself).xerror_record)) ((xrecord)))
            (((unsupported)) ((xobject)))
              seq
                xlevel.write ((xlogging).xNOTSET)
                xname.write 2
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_error_handling.write
                  [xself]
                    memory > xmsg
                    memory > xold_raise
                    memory > xh
                    memory > xr
                    seq > @
                      seq
                        xh.write (((xTestStreamHandler)) ((((xBadStream)) 0)))
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                        xold_raise.write ((xlogging).xraiseExceptions)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                            bogusForceDataize.write ((((xself).xassertIs)) (((xh).xerror_record)) ((xr)))
                            xh.write ((((xlogging).xStreamHandler)) ((((xBadStream)) 0)))
                            (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                              seq
                                bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                                xmsg.write "nRuntimeError: deliberate mistaken"
                                bogusForceDataize.write ((((xself).xassertIn)) ((xmsg)) (((((xstderr).xgetvalue)) 0)))
                            (((unsupported)) (((xlogging).xraiseExceptions)) (FALSE))
                            (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                              seq
                                bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xstderr).xgetvalue)) 0)))
                          (((unsupported)) (((xlogging).xraiseExceptions)) ((xold_raise)))
                xtest_stream_setting.write
                  [xself]
                    memory > xactual
                    memory > xh
                    memory > xstream
                    memory > xold
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xh.write ((((xlogging).xStreamHandler)) 0)
                        xstream.write ((((xio).xStringIO)) 0)
                        xold.write ((((xh).xsetStream)) ((xstream)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xold)) (((xsys).xstderr)))
                        xactual.write ((((xh).xsetStream)) ((xold)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xactual)) ((xstream)))
                        xactual.write ((((xh).xsetStream)) ((xold)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xactual)))
                xtest_can_represent_stream_with_int_name.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write ((((xlogging).xStreamHandler)) ((((xStreamWithIntName)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xh)))) ("<StreamHandler 2 (NOTSET)>"))
            (((unsupported)) (((xsmtpd).xSMTPServer)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xaddr xhandler xpoll_interval xsockmap]
                    seq > @
                      seq
                        (((unsupported)) ((((xsmtpd).xSMTPServer).x__init__)) ((xself)) ((xaddr)) ("None: is there a None literal in the EO language?") ((xsockmap)) (TRUE))
                        (((unsupported)) (((xself).xport)) ((((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)) (1))))
                        (((unsupported)) (((xself).x_handler)) ((xhandler)))
                        (((unsupported)) (((xself).x_thread)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).x_quit)) (FALSE))
                        (((unsupported)) (((xself).xpoll_interval)) ((xpoll_interval)))
                xprocess_message.write
                  [xself xpeer xmailfrom xrcpttos xdata]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_handler)) ((xpeer)) ((xmailfrom)) ((xrcpttos)) ((xdata)))
                xstart.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).x_thread)) ((xt)) ((((unsupported)) (((xthreading).xThread)) (((xself).xserve_forever)) ((((unsupported)) (((xself).xpoll_interval)))))))
                        bogusForceDataize.write ((((xt).xsetDaemon)) (TRUE))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                xserve_forever.write
                  [xself xpoll_interval]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        while.
                          (((xself).x_quit).not)
                          [unused]
                            seq > @
                              (((unsupported)) (((xasyncore).xloop)) ((xpoll_interval)) (((xself).x_map)) (1))
                xstop.write
                  [xself xtimeout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).x_quit)) (TRUE))
                        bogusForceDataize.write ((((xsupport).xjoin_thread)) (((xself).x_thread)) ((xtimeout)))
                        (((unsupported)) (((xself).x_thread)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xclose)) 0)
                        (((unsupported)) (((xasyncore).xclose_all)) (((xself).x_map)) (TRUE))
            (((unsupported)) ((xobject)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xhandler xpoll_interval]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_thread)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xpoll_interval)) ((xpoll_interval)))
                        (((unsupported)) (((xself).x_handler)) ((xhandler)))
                        (((unsupported)) (((xself).xready)) (((((xthreading).xEvent)) 0)))
                xstart.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).x_thread)) ((xt)) ((((unsupported)) (((xthreading).xThread)) (((xself).xserve_forever)) ((((unsupported)) (((xself).xpoll_interval)))))))
                        bogusForceDataize.write ((((xt).xsetDaemon)) (TRUE))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                xserve_forever.write
                  [xself xpoll_interval]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xready).xset)) 0)
                        bogusForceDataize.write ((((((xsuper)) ((xControlMixin)) ((xself))).xserve_forever)) ((xpoll_interval)))
                xstop.write
                  [xself xtimeout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xshutdown)) 0)
                        (((unsupported)) (((xself).x_thread)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xsupport).xjoin_thread)) (((xself).x_thread)) ((xtimeout)))
                            (((unsupported)) (((xself).x_thread)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xserver_close)) 0)
                        bogusForceDataize.write (((((xself).xready).xclear)) 0)
            (((unsupported)) ((xControlMixin)) ((xHTTPServer)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xaddr xhandler xpoll_interval xlog xsslctx]
                    memory > x__getattr__
                    memory > xlog_message
                    memory > xprocess_request
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xBaseHTTPRequestHandler)))
                          seq
                            x__getattr__.write
                              [xself xname xdefault]
                                seq > @
                                  (((unsupported)) 0)
                                    ((((xname).xstartswith)) ("do_")).if
                                      (((unsupported)) (((xself).xprocess_request)))
                                    (((unsupported)) ((((xAttributeError)) ((xname)))))
                            xprocess_request.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write (((((xself).xserver).x_handler)) ((xself)))
                            xlog_message.write
                              [xself xformat]
                                seq > @
                                  (((unsupported)) 0)
                                    (xlog).if
                                      bogusForceDataize.write ((((((xsuper)) ((xDelegatingHTTPRequestHandler)) ((xself))).xlog_message)) ((xformat)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xHTTPServer).x__init__)) ((xself)) ((xaddr)) ((xDelegatingHTTPRequestHandler)))
                        bogusForceDataize.write ((((xControlMixin).x__init__)) ((xself)) ((xhandler)) ((xpoll_interval)))
                        (((unsupported)) (((xself).xsslctx)) ((xsslctx)))
                xget_request.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xsock)) ((xaddr)))) ((((((xself).xsocket).xaccept)) 0)))
                            ((xself).xsslctx).if
                              xsock.write (((unsupported)) ((((xself).xsslctx).xwrap_socket)) ((xsock)) (TRUE))
                          seq
                            bogusForceDataize.write (((((xsys).xstderr).xwrite)) (("Got an error:n%sn".mod (xe))))
                            (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xsock)) ((xaddr)))))
            (((unsupported)) ((xControlMixin)) ((xThreadingTCPServer)))
              seq
                (((unsupported)) 0)
                xallow_reuse_address.write TRUE
                x__init__.write
                  [xself xaddr xhandler xpoll_interval xbind_and_activate]
                    memory > xhandle
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xStreamRequestHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((((xself).xserver).x_handler)) ((xself)))
                        bogusForceDataize.write ((((xThreadingTCPServer).x__init__)) ((xself)) ((xaddr)) ((xDelegatingTCPRequestHandler)) ((xbind_and_activate)))
                        bogusForceDataize.write ((((xControlMixin).x__init__)) ((xself)) ((xhandler)) ((xpoll_interval)))
                xserver_bind.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestTCPServer)) ((xself))).xserver_bind)) 0)
                        (((unsupported)) (((xself).xport)) ((((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)) (1))))
            (((unsupported)) ((xControlMixin)) ((xThreadingUDPServer)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xaddr xhandler xpoll_interval xbind_and_activate]
                    memory > xfinish
                    memory > xhandle
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xDatagramRequestHandler)))
                          seq
                            xhandle.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write (((((xself).xserver).x_handler)) ((xself)))
                            xfinish.write
                              [xself]
                                memory > xdata
                                seq > @
                                  seq
                                    xdata.write (((((xself).xwfile).xgetvalue)) 0)
                                    (xdata).if
                                      (((unsupported)) ((xOSError)))
                                        bogusForceDataize.write ((((((xsuper)) ((xDelegatingUDPRequestHandler)) ((xself))).xfinish)) 0)
                                        ((((xself).xserver).x_closed).not).if
                                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xThreadingUDPServer).x__init__)) ((xself)) ((xaddr)) ((xDelegatingUDPRequestHandler)) ((xbind_and_activate)))
                        bogusForceDataize.write ((((xControlMixin).x__init__)) ((xself)) ((xhandler)) ((xpoll_interval)))
                        (((unsupported)) (((xself).x_closed)) (FALSE))
                xserver_bind.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestUDPServer)) ((xself))).xserver_bind)) 0)
                        (((unsupported)) (((xself).xport)) ((((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)) (1))))
                xserver_close.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestUDPServer)) ((xself))).xserver_close)) 0)
                        (((unsupported)) (((xself).x_closed)) (TRUE))
            (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
              seq
                (((unsupported)) ((xTestTCPServer)))
                  xaddress_family.write ((xsocket).xAF_UNIX)
                (((unsupported)) ((xTestUDPServer)))
                  xaddress_family.write ((xsocket).xAF_UNIX)
            (((unsupported)) ((xBaseTest)))
              seq
                xTIMEOUT.write 60.0
                xtest_basic.write
                  [xself]
                    memory > xh
                    memory > xsockmap
                    memory > xr
                    memory > xaddr
                    memory > xserver
                    seq > @
                      seq
                        xsockmap.write (((unsupported)) 0)
                        xserver.write (((xTestSMTPServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) (((xself).xprocess_message)) (0.001) ((xsockmap)))
                        bogusForceDataize.write ((((xserver).xstart)) 0)
                        xaddr.write (((unsupported)) (((xsupport).xHOST)) (((xserver).xport)))
                        xh.write (((unsupported)) ((((xlogging).xhandlers).xSMTPHandler)) ((xaddr)) ("me") ("you") ("Log") (((xself).xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xtoaddrs)) ((((unsupported)) ("you"))))
                        (((unsupported)) (((xself).xmessages)) ((((unsupported)) 0)))
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("Hello u2713"))))
                        (((unsupported)) (((xself).xhandled)) (((((xthreading).xEvent)) 0)))
                        bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) (((xself).xTIMEOUT)))
                        bogusForceDataize.write ((((xserver).xstop)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xhandled).xis_set)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xself).xmessages)))) (1))
                        (((unsupported)) ((((unsupported)) ((xpeer)) ((xmailfrom)) ((xrcpttos)) ((xdata)))) ((((unsupported)) (((xself).xmessages)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmailfrom)) ("me"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrcpttos)) ((((unsupported)) ("you"))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("nSubject: Logn") ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdata).xendswith)) ("nnHello u2713"))))
                        bogusForceDataize.write ((((xh).xclose)) 0)
                xprocess_message.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xmessages).xappend)) ((xargs)))
                        bogusForceDataize.write (((((xself).xhandled).xset)) 0)
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xexpected_log_pat.write "^[w.]+ -> (w+): (d+)$"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xmem_hdlr)) ((((((xlogging).xhandlers).xMemoryHandler)) (10) (((xlogging).xWARNING)) (((xself).xroot_hdlr)))))
                        (((unsupported)) (((xself).xmem_logger)) (((((xlogging).xgetLogger)) ("mem"))))
                        (((unsupported)) ((((xself).xmem_logger).xpropagate)) (0))
                        bogusForceDataize.write (((((xself).xmem_logger).xaddHandler)) (((xself).xmem_hdlr)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xmem_hdlr).xclose)) 0)
                        bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xtest_flush.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xself).xmem_logger).xinfo)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xself).xmem_logger).xwarning)) (((((xself).xnext_message)) 0)))
                        xlines.write (((unsupported)) ((((unsupported)) ("DEBUG") ("1"))) ((((unsupported)) ("INFO") ("2"))) ((((unsupported)) ("WARNING") ("3"))))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                        (((unsupported)) ((xn)) ((((unsupported)) (4) (14))))
                          seq
                            (((unsupported)) ((xi)) ((((xrange)) (9))))
                              bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                            bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                            xlines.write ((xlines).add (((unsupported)) ((((unsupported)) ("DEBUG") ((((xstr)) ((xi)))))) ((xi)) ((((xrange)) ((xn)) (((xn).add 10))))))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                        bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                xtest_flush_on_close.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xself).xmem_logger).xinfo)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xself).xmem_logger).xremoveHandler)) (((xself).xmem_hdlr)))
                        bogusForceDataize.write (((((xself).xmem_hdlr).xclose)) 0)
                        xlines.write (((unsupported)) ((((unsupported)) ("DEBUG") ("1"))) ((((unsupported)) ("INFO") ("2"))))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                        (((unsupported)) (((xself).xmem_hdlr)) ((((((xlogging).xhandlers).xMemoryHandler)) (10) (((xlogging).xWARNING)) (((xself).xroot_hdlr)) (FALSE))))
                        bogusForceDataize.write (((((xself).xmem_logger).xaddHandler)) (((xself).xmem_hdlr)))
                        bogusForceDataize.write (((((xself).xmem_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                        bogusForceDataize.write (((((xself).xmem_logger).xinfo)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                        bogusForceDataize.write (((((xself).xmem_logger).xremoveHandler)) (((xself).xmem_hdlr)))
                        bogusForceDataize.write (((((xself).xmem_hdlr).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((xlines)))
                xtest_race_between_set_target_and_flush.write
                  [xself]
                    memory > xtarget
                    memory > x__init__
                    memory > xremoveTarget
                    memory > xhandle
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xmem_hdlr]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xmem_hdlr)) ((xmem_hdlr)))
                                    (((unsupported)) (((xself).xthreads)) ((((unsupported)) 0)))
                            xremoveTarget.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write (((((xself).xmem_hdlr).xsetTarget)) ("None: is there a None literal in the EO language?"))
                            xhandle.write
                              [xself xmsg]
                                memory > xthread
                                seq > @
                                  seq
                                    xthread.write (((unsupported)) (((xthreading).xThread)) (((xself).xremoveTarget)))
                                    bogusForceDataize.write (((((xself).xthreads).xappend)) ((xthread)))
                                    bogusForceDataize.write ((((xthread).xstart)) 0)
                        xtarget.write (((xMockRaceConditionHandler)) (((xself).xmem_hdlr)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((((xself).xmem_hdlr).xsetTarget)) ((xtarget)))
                            (((unsupported)) ((x_)) ((((xrange)) (10))))
                              seq
                                bogusForceDataize.write ((((xtime).xsleep)) (0.005))
                                bogusForceDataize.write (((((xself).xmem_logger).xinfo)) ("not flushed"))
                                bogusForceDataize.write (((((xself).xmem_logger).xwarning)) ("flushed"))
                          (((unsupported)) ((xthread)) (((xtarget).xthreads)))
                            bogusForceDataize.write ((((xsupport).xjoin_thread)) ((xthread)))
            (((unsupported)) (((xlogging).xFormatter)))
              seq
                unsupported
                xformatException.write
                  [xself xei]
                    seq > @
                      (((unsupported)) (("Got a [%s]".mod ((((unsupported)) ((xei)) (0)).x__name__))))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xcheck_no_resource_warning.write ((xsupport).xcheck_no_resource_warning)
                xexpected_log_pat.write "^(w+) ++ (w+)$"
                xconfig0.write (((unsupported)) 0)
                xconfig1.write (((unsupported)) 0)
                xconfig1a.write (((unsupported)) 0)
                xconfig2.write ((((xconfig1).xreplace)) ("sys.stdout") ("sys.stbout"))
                xconfig3.write ((((xconfig1).xreplace)) ("formatter=form1") ("formatter=misspelled_name"))
                xconfig4.write (((((unsupported)) 0).add (x__name__)).add (((unsupported)) 0))
                xconfig5.write ((((xconfig1).xreplace)) ("class=StreamHandler") ("class=logging.StreamHandler"))
                xconfig6.write (((unsupported)) 0)
                xconfig7.write (((unsupported)) 0)
                xconfig8.write (((unsupported)) 0)
                xdisable_test.write (((unsupported)) 0)
                xapply_config.write
                  [xself xconf]
                    memory > xfile
                    seq > @
                      (((unsupported)) 0)
                        xfile.write ((((xio).xStringIO)) (((((xtextwrap).xdedent)) ((xconf)))))
                        bogusForceDataize.write (((((xlogging).xconfig).xfileConfig)) ((xfile)) ((((unsupported)) ((xkwargs)))))
                xtest_config0_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig0)))
                          xlogger.write ((((xlogging).xgetLogger)) 0)
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config0_using_cp_ok.write
                  [xself]
                    memory > xfile
                    memory > xcp
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          xfile.write ((((xio).xStringIO)) (((((xtextwrap).xdedent)) (((xself).xconfig0)))))
                          xcp.write ((((xconfigparser).xConfigParser)) 0)
                          bogusForceDataize.write ((((xcp).xread_file)) ((xfile)))
                          bogusForceDataize.write (((((xlogging).xconfig).xfileConfig)) ((xcp)))
                          xlogger.write ((((xlogging).xgetLogger)) 0)
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config1_ok.write
                  [xself xconfig]
                    memory > xlogger
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config2_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig2)))
                xtest_config3_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig3)))
                xtest_config4_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig4)))
                          xlogger.write ((((xlogging).xgetLogger)) 0)
                          (((unsupported)) ((xRuntimeError)))
                            (((unsupported)) ((((xRuntimeError)) 0)))
                            bogusForceDataize.write ((((xlogging).xexception)) ("just testing"))
                          bogusForceDataize.write (((((xsys).xstdout).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xgetvalue)) 0)) ("ERROR:root:just testingnGot a [RuntimeError]n"))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config5_ok.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xtest_config1_ok)) (((xself).xconfig5)))
                xtest_config6_ok.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xtest_config1_ok)) (((xself).xconfig6)))
                xtest_config7_ok.write
                  [xself]
                    memory > xhyphenated
                    memory > xlogger
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig1a)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            xhyphenated.write ((((xlogging).xgetLogger)) ("compiler-hyphenated"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xhyphenated).xcritical)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))) ((((unsupported)) ("CRITICAL") ("3"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig7)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xlogger).xdisabled)))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xhyphenated).xcritical)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("4"))) ((((unsupported)) ("ERROR") ("5"))) ((((unsupported)) ("INFO") ("6"))) ((((unsupported)) ("ERROR") ("7"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config8_ok.write
                  [xself]
                    memory > xconfig8
                    memory > xhandler
                    memory > xcleanup
                    memory > xfn
                    seq > @
                      seq
                        xcleanup.write
                          [xh1 xfn]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xh1).xclose)) 0)
                                bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) (".log") ("test_logging-X-"))))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            (((xos).xname).eq "nt").if
                              xfn.write ((((xfn).xreplace)) ("\\") ("\\\\"))
                            xconfig8.write (((unsupported)) ((((xself).xconfig8).xformat)) ((xfn)))
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig8)))
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig8)))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)) ((xhandler)) ((xfn)))
                xtest_logger_disabling.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xapply_config)) (((xself).xdisable_test)))
                        xlogger.write ((((xlogging).xgetLogger)) ("some_pristine_logger"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xlogger).xdisabled)))
                        bogusForceDataize.write ((((xself).xapply_config)) (((xself).xdisable_test)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xlogger).xdisabled)))
                        (((unsupported)) (((xself).xapply_config)) (((xself).xdisable_test)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xlogger).xdisabled)))
                xtest_defaults_do_no_interpolation.write
                  [xself]
                    memory > xini
                    seq > @
                      seq
                        unsupported
                        xini.write (((((((xtextwrap).xdedent)) ((((unsupported)) 0))).xstrip)) 0)
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) ((((unsupported)) (((xtempfile).xmkstemp)) ("test_logging_") (".ini"))))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)) ((xfd)) (((((xini).xencode)) ("ascii"))))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            (((unsupported)) ((((xlogging).xconfig).xfileConfig)) ((xfn)) ((((unsupported)) ((xdict)) (1) (FALSE) ((((unsupported)) ("generic") ((((unsupported)) ("format") ("%(asctime)s [%(process)d] [%(levelname)s] %(message)s") ("datefmt") ("[%Y-%m-%d %H:%M:%S %z]") ("class") ("logging.Formatter"))))))))
                          bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xserver_class.write (xTestTCPServer)
                xaddress.write (((unsupported)) ("localhost") (0))
                xsetUp.write
                  [xself]
                    memory > xserver
                    memory > xhcls
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xserver)) (((xself).xsock_hdlr)) (((xself).xserver_exception)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xOSError)))
                          seq
                            (((unsupported)) (((xself).xserver)) ((xserver)) (((((xself).xserver_class)) (((xself).xaddress)) (((xself).xhandle_socket)) (0.01))))
                            bogusForceDataize.write ((((xserver).xstart)) 0)
                          seq
                            (((unsupported)) (((xself).xserver_exception)) ((xe)))
                            (((unsupported)) 0)
                        bogusForceDataize.write (((((xserver).xready).xwait)) 0)
                        xhcls.write (((xlogging).xhandlers).xSocketHandler)
                        (((xisinstance)) (((xserver).xserver_address)) ((xtuple))).if
                          (((unsupported)) (((xself).xsock_hdlr)) ((((xhcls)) ("localhost") (((xserver).xport)))))
                          (((unsupported)) (((xself).xsock_hdlr)) ((((xhcls)) (((xserver).xserver_address)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xself).xlog_output)) (""))
                        bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) ((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))))
                        bogusForceDataize.write (((((xself).xroot_logger).xaddHandler)) (((xself).xsock_hdlr)))
                        (((unsupported)) (((xself).xhandled)) (((((xthreading).xSemaphore)) (0))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) 0)
                          seq
                            ((xself).xsock_hdlr).if
                              seq
                                bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) (((xself).xsock_hdlr)))
                                bogusForceDataize.write (((((xself).xsock_hdlr).xclose)) 0)
                            ((xself).xserver).if
                              bogusForceDataize.write (((((xself).xserver).xstop)) (2.0))
                          bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xhandle_socket.write
                  [xself xrequest]
                    memory > xslen
                    memory > xrecord
                    memory > xconn
                    memory > xobj
                    memory > xchunk
                    seq > @
                      seq
                        xconn.write ((xrequest).xconnection)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xchunk.write ((((xconn).xrecv)) (4))
                                ((((xlen)) ((xchunk))).less 4).if
                                  (((unsupported)) 0)
                                xslen.write (((unsupported)) (((((xstruct).xunpack)) (">L") ((xchunk)))) (0))
                                xchunk.write ((((xconn).xrecv)) ((xslen)))
                                while.
                                  ((((xlen)) ((xchunk))).less (xslen))
                                  [unused]
                                    seq > @
                                      xchunk.write ((xchunk).add ((((xconn).xrecv)) (((xslen).sub (((xlen)) ((xchunk)))))))
                                xobj.write ((((xpickle).xloads)) ((xchunk)))
                                xrecord.write ((((xlogging).xmakeLogRecord)) ((xobj)))
                                (((unsupported)) (((xself).xlog_output)) ((((xrecord).xmsg).add "n")))
                                bogusForceDataize.write (((((xself).xhandled).xrelease)) 0)
                xtest_output.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        ((xself).xserver_exception).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((xself).xserver_exception)))
                        xlogger.write ((((xlogging).xgetLogger)) ("tcp"))
                        bogusForceDataize.write ((((xlogger).xerror)) ("spam"))
                        bogusForceDataize.write (((((xself).xhandled).xacquire)) 0)
                        bogusForceDataize.write ((((xlogger).xdebug)) ("eggs"))
                        bogusForceDataize.write (((((xself).xhandled).xacquire)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xlog_output)) ("spamneggsn"))
                xtest_noserver.write
                  [xself]
                    memory > xnow
                    seq > @
                      seq
                        ((xself).xserver_exception).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((xself).xserver_exception)))
                        (((unsupported)) ((((xself).xsock_hdlr).xretryStart)) (2.5))
                        bogusForceDataize.write (((((xself).xserver).xstop)) (2.0))
                        (((unsupported)) ((xRuntimeError)))
                          (((unsupported)) ((((xRuntimeError)) ("Deliberate mistake"))))
                          bogusForceDataize.write (((((xself).xroot_logger).xexception)) ("Never sent"))
                        bogusForceDataize.write (((((xself).xroot_logger).xerror)) ("Never sent, either"))
                        xnow.write ((((xtime).xtime)) 0)
                        bogusForceDataize.write ((((xself).xassertGreater)) ((((xself).xsock_hdlr).xretryTime)) ((xnow)))
                        bogusForceDataize.write ((((xtime).xsleep)) ((((((xself).xsock_hdlr).xretryTime).sub (xnow)).add 0.001)))
                        bogusForceDataize.write (((((xself).xroot_logger).xerror)) ("Nor this"))
            x_get_temp_domain_socket.write
              []
                seq > @
                  seq
                    (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) ((((unsupported)) (((xtempfile).xmkstemp)) ("test_logging_") (".sock"))))
                    bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                    bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                    (((unsupported)) ((xfn)))
            (((unsupported)) ((xSocketHandlerTest)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("AF_UNIX"))) ("Unix sockets required"))))
              seq
                unsupported
                (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
                  xserver_class.write (xTestUnixStreamServer)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xaddress)) ((((x_get_temp_domain_socket)) 0)))
                        bogusForceDataize.write ((((xSocketHandlerTest).xsetUp)) ((xself)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xSocketHandlerTest).xtearDown)) ((xself)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xself).xaddress)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xserver_class.write (xTestUDPServer)
                xaddress.write (((unsupported)) ("localhost") (0))
                xsetUp.write
                  [xself]
                    memory > xserver
                    memory > xhcls
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xserver)) (((xself).xsock_hdlr)) (((xself).xserver_exception)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xOSError)))
                          seq
                            (((unsupported)) (((xself).xserver)) ((xserver)) (((((xself).xserver_class)) (((xself).xaddress)) (((xself).xhandle_datagram)) (0.01))))
                            bogusForceDataize.write ((((xserver).xstart)) 0)
                          seq
                            (((unsupported)) (((xself).xserver_exception)) ((xe)))
                            (((unsupported)) 0)
                        bogusForceDataize.write (((((xserver).xready).xwait)) 0)
                        xhcls.write (((xlogging).xhandlers).xDatagramHandler)
                        (((xisinstance)) (((xserver).xserver_address)) ((xtuple))).if
                          (((unsupported)) (((xself).xsock_hdlr)) ((((xhcls)) ("localhost") (((xserver).xport)))))
                          (((unsupported)) (((xself).xsock_hdlr)) ((((xhcls)) (((xserver).xserver_address)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xself).xlog_output)) (""))
                        bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) ((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))))
                        bogusForceDataize.write (((((xself).xroot_logger).xaddHandler)) (((xself).xsock_hdlr)))
                        (((unsupported)) (((xself).xhandled)) (((((xthreading).xEvent)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) 0)
                          seq
                            ((xself).xserver).if
                              bogusForceDataize.write (((((xself).xserver).xstop)) (2.0))
                            ((xself).xsock_hdlr).if
                              seq
                                bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) (((xself).xsock_hdlr)))
                                bogusForceDataize.write (((((xself).xsock_hdlr).xclose)) 0)
                          bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xhandle_datagram.write
                  [xself xrequest]
                    memory > xpacket
                    memory > xslen
                    memory > xobj
                    memory > xrecord
                    seq > @
                      seq
                        xslen.write ((((xstruct).xpack)) (">L") (0))
                        xpacket.write (((unsupported)) (((xrequest).xpacket)) ((((unsupported)) ((((xlen)) ((xslen)))))))
                        xobj.write ((((xpickle).xloads)) ((xpacket)))
                        xrecord.write ((((xlogging).xmakeLogRecord)) ((xobj)))
                        (((unsupported)) (((xself).xlog_output)) ((((xrecord).xmsg).add "n")))
                        bogusForceDataize.write (((((xself).xhandled).xset)) 0)
                xtest_output.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        ((xself).xserver_exception).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((xself).xserver_exception)))
                        xlogger.write ((((xlogging).xgetLogger)) ("udp"))
                        bogusForceDataize.write ((((xlogger).xerror)) ("spam"))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                        bogusForceDataize.write (((((xself).xhandled).xclear)) 0)
                        bogusForceDataize.write ((((xlogger).xerror)) ("eggs"))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xlog_output)) ("spamneggsn"))
            (((unsupported)) ((xDatagramHandlerTest)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("AF_UNIX"))) ("Unix sockets required"))))
              seq
                unsupported
                (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
                  xserver_class.write (xTestUnixDatagramServer)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xaddress)) ((((x_get_temp_domain_socket)) 0)))
                        bogusForceDataize.write ((((xDatagramHandlerTest).xsetUp)) ((xself)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xDatagramHandlerTest).xtearDown)) ((xself)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xself).xaddress)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xserver_class.write (xTestUDPServer)
                xaddress.write (((unsupported)) ("localhost") (0))
                xsetUp.write
                  [xself]
                    memory > xserver
                    memory > xhcls
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xserver)) (((xself).xsl_hdlr)) (((xself).xserver_exception)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xOSError)))
                          seq
                            (((unsupported)) (((xself).xserver)) ((xserver)) (((((xself).xserver_class)) (((xself).xaddress)) (((xself).xhandle_datagram)) (0.01))))
                            bogusForceDataize.write ((((xserver).xstart)) 0)
                          seq
                            (((unsupported)) (((xself).xserver_exception)) ((xe)))
                            (((unsupported)) 0)
                        bogusForceDataize.write (((((xserver).xready).xwait)) 0)
                        xhcls.write (((xlogging).xhandlers).xSysLogHandler)
                        (((xisinstance)) (((xserver).xserver_address)) ((xtuple))).if
                          (((unsupported)) (((xself).xsl_hdlr)) ((((xhcls)) ((((unsupported)) ((((unsupported)) (((xserver).xserver_address)) (0))) (((xserver).xport)))))))
                          (((unsupported)) (((xself).xsl_hdlr)) ((((xhcls)) (((xserver).xserver_address)))))
                        (((unsupported)) (((xself).xlog_output)) (""))
                        bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) ((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))))
                        bogusForceDataize.write (((((xself).xroot_logger).xaddHandler)) (((xself).xsl_hdlr)))
                        (((unsupported)) (((xself).xhandled)) (((((xthreading).xEvent)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) 0)
                          seq
                            ((xself).xserver).if
                              bogusForceDataize.write (((((xself).xserver).xstop)) (2.0))
                            ((xself).xsl_hdlr).if
                              seq
                                bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) (((xself).xsl_hdlr)))
                                bogusForceDataize.write (((((xself).xsl_hdlr).xclose)) 0)
                          bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xhandle_datagram.write
                  [xself xrequest]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xlog_output)) (((xrequest).xpacket)))
                        bogusForceDataize.write (((((xself).xhandled).xset)) 0)
                xtest_output.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        ((xself).xserver_exception).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((xself).xserver_exception)))
                        xlogger.write ((((xlogging).xgetLogger)) ("slh"))
                        bogusForceDataize.write ((((xlogger).xerror)) ("spxe4m"))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xlog_output)) ("<11>spxc3xa4mx00"))
                        bogusForceDataize.write (((((xself).xhandled).xclear)) 0)
                        (((unsupported)) ((((xself).xsl_hdlr).xappend_nul)) (FALSE))
                        bogusForceDataize.write ((((xlogger).xerror)) ("spxe4m"))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xlog_output)) ("<11>spxc3xa4m"))
                        bogusForceDataize.write (((((xself).xhandled).xclear)) 0)
                        (((unsupported)) ((((xself).xsl_hdlr).xident)) ("hxe4m-"))
                        bogusForceDataize.write ((((xlogger).xerror)) ("spxe4m"))
                        bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xlog_output)) ("<11>hxc3xa4m-spxc3xa4m"))
            (((unsupported)) ((xSysLogHandlerTest)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("AF_UNIX"))) ("Unix sockets required"))))
              seq
                unsupported
                (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
                  xserver_class.write (xTestUnixDatagramServer)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xaddress)) ((((x_get_temp_domain_socket)) 0)))
                        bogusForceDataize.write ((((xSysLogHandlerTest).xsetUp)) ((xself)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xSysLogHandlerTest).xtearDown)) ((xself)))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xself).xaddress)))
            (((unsupported)) ((xSysLogHandlerTest)) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 support required for this test."))))
              seq
                unsupported
                xserver_class.write (xTestUDPServer)
                xaddress.write (((unsupported)) ("::1") (0))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xserver_class).xaddress_family)) (((xsocket).xAF_INET6)))
                        bogusForceDataize.write ((((((xsuper)) ((xIPv6SysLogHandlerTest)) ((xself))).xsetUp)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xserver_class).xaddress_family)) (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((((xsuper)) ((xIPv6SysLogHandlerTest)) ((xself))).xtearDown)) 0)
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xhandled)) (((((xthreading).xEvent)) 0)))
                xhandle_request.write
                  [xself xrequest]
                    memory > xrlen
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcommand)) (((xrequest).xcommand)))
                        (((unsupported)) (((xself).xlog_data)) ((((xurlparse)) (((xrequest).xpath)))))
                        (((xself).xcommand).eq "POST").if
                          (((unsupported)) 0)
                            seq
                              xrlen.write (((xint)) ((((unsupported)) (((xrequest).xheaders)) ("Content-Length"))))
                              (((unsupported)) (((xself).xpost_data)) ((((((xrequest).xrfile).xread)) ((xrlen)))))
                            (((unsupported)) (((xself).xpost_data)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xrequest).xsend_response)) (200))
                        bogusForceDataize.write ((((xrequest).xend_headers)) 0)
                        bogusForceDataize.write (((((xself).xhandled).xset)) 0)
                xtest_output.write
                  [xself]
                    memory > xd
                    memory > xlogger
                    memory > xcontext
                    memory > xhere
                    memory > xmsg
                    memory > xhost
                    memory > xlocalhost_cert
                    memory > xsslctx
                    memory > xsecure_client
                    memory > xaddr
                    memory > xroot_logger
                    memory > xserver
                    seq > @
                      seq
                        xlogger.write ((((xlogging).xgetLogger)) ("http"))
                        xroot_logger.write ((xself).xroot_logger)
                        bogusForceDataize.write ((((xroot_logger).xremoveHandler)) ((((unsupported)) ((((xself).xroot_logger).xhandlers)) (0))))
                        (((unsupported)) ((xsecure)) ((((unsupported)) (FALSE) (TRUE))))
                          seq
                            xaddr.write (((unsupported)) ("localhost") (0))
                            (xsecure).if
                              (((unsupported)) ((xImportError)))
                                (((unsupported)) 0)
                                xsslctx.write "None: is there a None literal in the EO language?"
                                seq
                                  xhere.write (((((xos).xpath).xdirname)) ((x__file__)))
                                  xlocalhost_cert.write (((((xos).xpath).xjoin)) ((xhere)) ("keycert.pem"))
                                  xsslctx.write ((((xssl).xSSLContext)) (((xssl).xPROTOCOL_TLS_SERVER)))
                                  bogusForceDataize.write ((((xsslctx).xload_cert_chain)) ((xlocalhost_cert)))
                                  xcontext.write (((unsupported)) (((xssl).xcreate_default_context)) ((xlocalhost_cert)))
                              seq
                                xsslctx.write "None: is there a None literal in the EO language?"
                                xcontext.write "None: is there a None literal in the EO language?"
                            (((unsupported)) (((xself).xserver)) ((xserver)) ((((unsupported)) ((xTestHTTPServer)) ((xaddr)) (((xself).xhandle_request)) (0.01) ((xsslctx)))))
                            bogusForceDataize.write ((((xserver).xstart)) 0)
                            bogusForceDataize.write (((((xserver).xready).xwait)) 0)
                            xhost.write ("localhost:%d".mod ((xserver).xserver_port))
                            xsecure_client.write ((xsecure).and (xsslctx))
                            (((unsupported)) (((xself).xh_hdlr)) ((((unsupported)) ((((xlogging).xhandlers).xHTTPHandler)) ((xhost)) ("/frob") ((xsecure_client)) ((xcontext)) ((((unsupported)) ("foo") ("bar"))))))
                            (((unsupported)) (((xself).xlog_data)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xroot_logger).xaddHandler)) (((xself).xh_hdlr)))
                            (((unsupported)) ((xmethod)) ((((unsupported)) ("GET") ("POST"))))
                              seq
                                (((unsupported)) ((((xself).xh_hdlr).xmethod)) ((xmethod)))
                                bogusForceDataize.write (((((xself).xhandled).xclear)) 0)
                                xmsg.write "spxe4m"
                                bogusForceDataize.write ((((xlogger).xerror)) ((xmsg)))
                                bogusForceDataize.write (((((xself).xhandled).xwait)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xlog_data).xpath)) ("/frob"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcommand)) ((xmethod)))
                                ((xmethod).eq "GET").if
                                  xd.write (((xparse_qs)) ((((xself).xlog_data).xquery)))
                                  xd.write (((xparse_qs)) ((((((xself).xpost_data).xdecode)) ("utf-8"))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd)) ("name"))) ((((unsupported)) ("http"))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd)) ("funcName"))) ((((unsupported)) ("test_output"))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd)) ("msg"))) ((((unsupported)) ((xmsg)))))
                            bogusForceDataize.write (((((xself).xserver).xstop)) (2.0))
                            bogusForceDataize.write (((((xself).xroot_logger).xremoveHandler)) (((xself).xh_hdlr)))
                            bogusForceDataize.write (((((xself).xh_hdlr).xclose)) 0)
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).x_survivors)) ((((unsupported)) 0)))
                x_watch_for_survival.write
                  [xself]
                    memory > xkey
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((xobj)) ((xargs)))
                          seq
                            xkey.write (((unsupported)) ((((xid)) ((xobj)))) ((((xrepr)) ((xobj)))))
                            (((unsupported)) ((((unsupported)) (((xself).x_survivors)) ((xkey)))) (((((xweakref).xref)) ((xobj)))))
                x_assertTruesurvival.write
                  [xself]
                    memory > xdead
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        xdead.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xid_)) ((xrepr_)))) ((xref)))) ((((((xself).x_survivors).xitems)) 0)))
                          (((unsupported)) ((((xref)) 0)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xdead).xappend)) ((xrepr_)))
                        (xdead).if
                          bogusForceDataize.write ((((xself).xfail)) (("%d objects should have survived but have been destroyed: %s".mod (((unsupported)) ((((xlen)) ((xdead)))) ((((", ".xjoin)) ((xdead))))))))
                xtest_persistent_loggers.write
                  [xself]
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xroot_logger).xsetLevel)) (((xlogging).xINFO)))
                        xfoo.write ((((xlogging).xgetLogger)) ("foo"))
                        bogusForceDataize.write ((((xself).x_watch_for_survival)) ((xfoo)))
                        bogusForceDataize.write ((((xfoo).xsetLevel)) (((xlogging).xDEBUG)))
                        bogusForceDataize.write (((((xself).xroot_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xfoo).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("foo") ("DEBUG") ("2"))))))
                        (((unsupported)) ((((unsupported)) ((xfoo)))))
                        bogusForceDataize.write ((((xself).x_assertTruesurvival)) 0)
                        xbar.write ((((xlogging).xgetLogger)) ("foo"))
                        bogusForceDataize.write ((((xbar).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("foo") ("DEBUG") ("2"))) ((((unsupported)) ("foo") ("DEBUG") ("3"))))))
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_encoding_plain_file.write
                  [xself]
                    memory > xhandler
                    memory > xlog
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xlog.write ((((xlogging).xgetLogger)) ("test"))
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) (".log") ("test_logging-1-"))))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        xdata.write "foox80"
                        (((unsupported)) 0)
                          seq
                            xhandler.write (((unsupported)) (((xlogging).xFileHandler)) ((xfn)) ("utf-8"))
                            bogusForceDataize.write ((((xlog).xaddHandler)) ((xhandler)))
                            (((unsupported)) 0)
                              bogusForceDataize.write ((((xlog).xwarning)) ((xdata)))
                              seq
                                bogusForceDataize.write ((((xlog).xremoveHandler)) ((xhandler)))
                                bogusForceDataize.write ((((xhandler).xclose)) 0)
                            xf.write (((unsupported)) ((xopen)) ((xfn)) ("utf-8"))
                            (((unsupported)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xf).xread)) 0).xrstrip)) 0)) ((xdata)))
                              bogusForceDataize.write ((((xf).xclose)) 0)
                          (((((xos).xpath).xisfile)) ((xfn))).if
                            bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                xtest_encoding_cyrillic_unicode.write
                  [xself]
                    memory > xmessage
                    memory > xhandler
                    memory > xstream
                    memory > xs
                    memory > xlog
                    memory > xwriter_class
                    memory > xwriter
                    seq > @
                      seq
                        xlog.write ((((xlogging).xgetLogger)) ("test"))
                        xmessage.write "u0434u043e u0441u0432u0438u0434u0430u043du0438u044f"
                        xwriter_class.write ((((xcodecs).xgetwriter)) ("cp1251"))
                        (((unsupported)) (((xwriter_class).xencoding)) ("cp1251"))
                        xstream.write ((((xio).xBytesIO)) 0)
                        xwriter.write (((xwriter_class)) ((xstream)) ("strict"))
                        xhandler.write ((((xlogging).xStreamHandler)) ((xwriter)))
                        bogusForceDataize.write ((((xlog).xaddHandler)) ((xhandler)))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xlog).xwarning)) ((xmessage)))
                          seq
                            bogusForceDataize.write ((((xlog).xremoveHandler)) ((xhandler)))
                            bogusForceDataize.write ((((xhandler).xclose)) 0)
                        xs.write ((((xstream).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ("xe4xee xf1xe2xe8xe4xe0xedxe8xffn"))
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_warnings.write
                  [xself]
                    memory > xlogger
                    memory > xa_file
                    memory > xs
                    memory > xh
                    memory > xstream
                    seq > @
                      (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                        seq
                          bogusForceDataize.write ((((xlogging).xcaptureWarnings)) (TRUE))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xcaptureWarnings)) (FALSE))
                          (((unsupported)) (((xwarnings).xfilterwarnings)) ("always") ((xUserWarning)))
                          xstream.write ((((xio).xStringIO)) 0)
                          xh.write ((((xlogging).xStreamHandler)) ((xstream)))
                          xlogger.write ((((xlogging).xgetLogger)) ("py.warnings"))
                          bogusForceDataize.write ((((xlogger).xaddHandler)) ((xh)))
                          bogusForceDataize.write ((((xwarnings).xwarn)) ("I'm warning you..."))
                          bogusForceDataize.write ((((xlogger).xremoveHandler)) ((xh)))
                          xs.write ((((xstream).xgetvalue)) 0)
                          bogusForceDataize.write ((((xh).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertGreater)) (((((xs).xfind)) ("UserWarning: I'm warning you...n"))) (0))
                          xa_file.write ((((xio).xStringIO)) 0)
                          bogusForceDataize.write ((((xwarnings).xshowwarning)) ("Explicit") ((xUserWarning)) ("dummy.py") (42) ((xa_file)) ("Dummy line"))
                          xs.write ((((xa_file).xgetvalue)) 0)
                          bogusForceDataize.write ((((xa_file).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ("dummy.py:42: UserWarning: Explicitn  Dummy linen"))
                xtest_warnings_no_handlers.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                        seq
                          bogusForceDataize.write ((((xlogging).xcaptureWarnings)) (TRUE))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xcaptureWarnings)) (FALSE))
                          xlogger.write ((((xlogging).xgetLogger)) ("py.warnings"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger).xhandlers)) ((((unsupported)) 0)))
                          bogusForceDataize.write ((((xwarnings).xshowwarning)) ("Explicit") ((xUserWarning)) ("dummy.py") (42))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xlogger).xhandlers)))) (1))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) (((xlogger).xhandlers)) (0))) (((xlogging).xNullHandler)))
            xformatFunc.write
              [xformat xdatefmt]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) (((((xlogging).xFormatter)) ((xformat)) ((xdatefmt)))))
            (((unsupported)) 0)
              x__init__.write
                [xself xfmt xdatefmt]
                  seq > @
                    (((unsupported)) 0)
            xhandlerFunc.write
              []
                seq > @
                  (((unsupported)) (((((xlogging).xStreamHandler)) 0)))
            (((unsupported)) (((xlogging).xStreamHandler)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xcheck_no_resource_warning.write ((xsupport).xcheck_no_resource_warning)
                xexpected_log_pat.write "^(w+) ++ (w+)$"
                xconfig0.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("root") ((((unsupported)) ("level") ("WARNING") ("handlers") ((((unsupported)) ("hand1"))))))
                xconfig1.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig1a.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG"))))) ("root") ((((unsupported)) ("level") ("WARNING") ("handlers") ((((unsupported)) ("hand1"))))))
                xconfig2.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdbout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig2a.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NTOSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig2b.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WRANING"))))
                xconfig3.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("misspelled_name") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig4.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("()") (((x__name__).add ".ExceptionFormatter")) ("format") ("%(levelname)s:%(name)s:%(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("root") ((((unsupported)) ("level") ("NOTSET") ("handlers") ((((unsupported)) ("hand1"))))))
                xconfig4a.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("()") ((xExceptionFormatter)) ("format") ("%(levelname)s:%(name)s:%(message)s"))) ("form2") ((((unsupported)) ("()") (((x__name__).add ".formatFunc")) ("format") ("%(levelname)s:%(name)s:%(message)s"))) ("form3") ((((unsupported)) ("()") ((xformatFunc)) ("format") ("%(levelname)s:%(name)s:%(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))) ("hand2") ((((unsupported)) ("()") ((xhandlerFunc)))))) ("root") ((((unsupported)) ("level") ("NOTSET") ("handlers") ((((unsupported)) ("hand1"))))))
                xconfig5.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") (((x__name__).add ".CustomHandler")) ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig6.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") (((x__name__).add ".CustomHandler")) ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout") ("9") ("invalid parameter name"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig7.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.lexer") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig8.write (((unsupported)) ("version") (1) ("disable_existing_loggers") (FALSE) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))) ("compiler.lexer") ((((unsupported)) 0)))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig8a.write (((unsupported)) ("version") (1) ("disable_existing_loggers") (TRUE) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))) ("compiler.lexer") ((((unsupported)) 0)))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig9.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("WARNING") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("WARNING") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("NOTSET"))))
                xconfig9a.write (((unsupported)) ("version") (1) ("incremental") (TRUE) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("level") ("WARNING"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("INFO"))))))
                xconfig9b.write (((unsupported)) ("version") (1) ("incremental") (TRUE) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("level") ("INFO"))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("INFO"))))))
                xconfig10.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("filters") ((((unsupported)) ("filt1") ((((unsupported)) ("name") ("compiler.parser"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout") ("filters") ((((unsupported)) ("filt1"))))))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("filters") ((((unsupported)) ("filt1"))))))) ("root") ((((unsupported)) ("level") ("WARNING") ("handlers") ((((unsupported)) ("hand1"))))))
                xconfig11.write (((unsupported)) ("version") (1) ("true_formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handler_configs") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("formatters") ("cfg://true_formatters") ("handlers") ((((unsupported)) ("hand1") ("cfg://handler_configs[hand1]"))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig12.write (((unsupported)) ("true_formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handler_configs") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("formatters") ("cfg://true_formatters") ("handlers") ((((unsupported)) ("hand1") ("cfg://handler_configs[hand1]"))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig13.write (((unsupported)) ("version") (2) ("true_formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handler_configs") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("formatters") ("cfg://true_formatters") ("handlers") ((((unsupported)) ("hand1") ("cfg://handler_configs[hand1]"))) ("loggers") ((((unsupported)) ("compiler.parser") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))))))) ("root") ((((unsupported)) ("level") ("WARNING"))))
                xconfig14.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("format") ("%(levelname)s ++ %(message)s"))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout") (".") ((((unsupported)) ("foo") ("bar") ("terminator") ("!n"))))))) ("root") ((((unsupported)) ("level") ("WARNING") ("handlers") ((((unsupported)) ("hand1"))))))
                xout_of_order.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("mySimpleFormatter") ((((unsupported)) ("format") ("%(asctime)s (%(name)s) %(levelname)s: %(message)s") ("style") ("$"))))) ("handlers") ((((unsupported)) ("fileGlobal") ((((unsupported)) ("class") ("logging.StreamHandler") ("level") ("DEBUG") ("formatter") ("mySimpleFormatter"))) ("bufferGlobal") ((((unsupported)) ("class") ("logging.handlers.MemoryHandler") ("capacity") (5) ("formatter") ("mySimpleFormatter") ("target") ("fileGlobal") ("level") ("DEBUG"))))) ("loggers") ((((unsupported)) ("mymodule") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("bufferGlobal"))) ("propagate") ("true"))))))
                xcustom_formatter_class_validate.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("()") (((x__name__).add ".ExceptionFormatter")) ("format") ("%(levelname)s:%(name)s:%(message)s") ("validate") (FALSE))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("my_test_logger_custom_formatter") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))) ("propagate") ("true"))))))
                xcustom_formatter_class_validate2.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("class") (((x__name__).add ".ExceptionFormatter")) ("format") ("%(levelname)s:%(name)s:%(message)s") ("validate") (FALSE))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("my_test_logger_custom_formatter") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))) ("propagate") ("true"))))))
                xcustom_formatter_class_validate3.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("class") (((x__name__).add ".myCustomFormatter")) ("format") ("%(levelname)s:%(name)s:%(message)s") ("validate") (FALSE))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("my_test_logger_custom_formatter") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))) ("propagate") ("true"))))))
                xcustom_formatter_with_function.write (((unsupported)) ("version") (1) ("formatters") ((((unsupported)) ("form1") ((((unsupported)) ("()") ((xformatFunc)) ("format") ("%(levelname)s:%(name)s:%(message)s") ("validate") (FALSE))))) ("handlers") ((((unsupported)) ("hand1") ((((unsupported)) ("class") ("logging.StreamHandler") ("formatter") ("form1") ("level") ("NOTSET") ("stream") ("ext://sys.stdout"))))) ("loggers") ((((unsupported)) ("my_test_logger_custom_formatter") ((((unsupported)) ("level") ("DEBUG") ("handlers") ((((unsupported)) ("hand1"))) ("propagate") ("true"))))))
                xapply_config.write
                  [xself xconf]
                    seq > @
                      bogusForceDataize.write (((((xlogging).xconfig).xdictConfig)) ((xconf)))
                xtest_config0_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig0)))
                          xlogger.write ((((xlogging).xgetLogger)) 0)
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config1_ok.write
                  [xself xconfig]
                    memory > xlogger
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config2_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig2)))
                xtest_config2a_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig2a)))
                xtest_config2b_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig2b)))
                xtest_config3_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig3)))
                xtest_config4_ok.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig4)))
                          (((unsupported)) ((xRuntimeError)))
                            (((unsupported)) ((((xRuntimeError)) 0)))
                            bogusForceDataize.write ((((xlogging).xexception)) ("just testing"))
                          bogusForceDataize.write (((((xsys).xstdout).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xgetvalue)) 0)) ("ERROR:root:just testingnGot a [RuntimeError]n"))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config4a_ok.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig4a)))
                          (((unsupported)) ((xRuntimeError)))
                            (((unsupported)) ((((xRuntimeError)) 0)))
                            bogusForceDataize.write ((((xlogging).xexception)) ("just testing"))
                          bogusForceDataize.write (((((xsys).xstdout).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xgetvalue)) 0)) ("ERROR:root:just testingnGot a [RuntimeError]n"))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config5_ok.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xtest_config1_ok)) (((xself).xconfig5)))
                xtest_config6_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig6)))
                xtest_config7_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig1)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig7)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xlogger).xdisabled)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("3"))) ((((unsupported)) ("ERROR") ("4"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config_8_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig1)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig8)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xlogger).xdisabled)))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("3"))) ((((unsupported)) ("ERROR") ("4"))) ((((unsupported)) ("INFO") ("5"))) ((((unsupported)) ("ERROR") ("6"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config_8a_ok.write
                  [xself]
                    memory > xhyphenated
                    memory > xlogger
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig1a)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            xhyphenated.write ((((xlogging).xgetLogger)) ("compiler-hyphenated"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xhyphenated).xcritical)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))) ((((unsupported)) ("CRITICAL") ("3"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig8a)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xlogger).xdisabled)))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xhyphenated).xcritical)) (((((xself).xnext_message)) 0)))
                            (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("4"))) ((((unsupported)) ("ERROR") ("5"))) ((((unsupported)) ("INFO") ("6"))) ((((unsupported)) ("ERROR") ("7"))))) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_config_9_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig9)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) 0)) ((xoutput)))
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig9a)))
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) 0)) ((xoutput)))
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig9b)))
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("3"))))) ((xoutput)))
                xtest_config_10_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig10)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser.codegen"))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("WARNING") ("1"))) ((((unsupported)) ("ERROR") ("4"))))) ((xoutput)))
                xtest_config11_ok.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xtest_config1_ok)) (((xself).xconfig11)))
                xtest_config12_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig12)))
                xtest_config13_failure.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xself).xapply_config)) (((xself).xconfig13)))
                xtest_config14_ok.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xapply_config)) (((xself).xconfig14)))
                          xh.write (((unsupported)) (((xlogging).x_handlers)) ("hand1"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xfoo)) ("bar"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xterminator)) ("!n"))
                          bogusForceDataize.write ((((xlogging).xwarning)) ("Exclamation"))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xoutput).xgetvalue)) 0).xendswith)) ("Exclamation!n"))))
                xtest_config15_ok.write
                  [xself]
                    memory > xhandler
                    memory > xcleanup
                    memory > xconfig
                    seq > @
                      seq
                        xcleanup.write
                          [xh1 xfn]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xh1).xclose)) 0)
                                bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xfn)))) (((((xtempfile).xmkstemp)) (".log") ("test_logging-X-"))))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            xconfig.write (((unsupported)) ("version") (1) ("handlers") ((((unsupported)) ("file") ((((unsupported)) ("class") ("logging.FileHandler") ("filename") ((xfn)))))) ("root") ((((unsupported)) ("handlers") ((((unsupported)) ("file"))))))
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)) ((xhandler)) ((xfn)))
                xsetup_via_listener.write
                  [xself xtext xverify]
                    memory > xslen
                    memory > xsentsofar
                    memory > xsent
                    memory > xt
                    memory > xsock
                    memory > xleft
                    memory > xs
                    memory > xport
                    seq > @
                      (((unsupported)) 0)
                        xtext.write ((((xtext).xencode)) ("utf-8"))
                        xt.write (((((xlogging).xconfig).xlisten)) (0) ((xverify)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        bogusForceDataize.write (((((xt).xready).xwait)) 0)
                        xport.write ((xt).xport)
                        bogusForceDataize.write (((((xt).xready).xclear)) 0)
                        (((unsupported)) 0)
                          seq
                            xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xsock).xsettimeout)) (2.0))
                            bogusForceDataize.write ((((xsock).xconnect)) ((((unsupported)) ("localhost") ((xport)))))
                            xslen.write ((((xstruct).xpack)) (">L") ((((xlen)) ((xtext)))))
                            xs.write ((xslen).add (xtext))
                            xsentsofar.write 0
                            xleft.write (((xlen)) ((xs)))
                            while.
                              ((xleft).greater 0)
                              [unused]
                                seq > @
                                  seq
                                    xsent.write ((((xsock).xsend)) ((((unsupported)) ((xs)) ((((unsupported)) ((xsentsofar)))))))
                                    (((unsupported)) ((xsentsofar)) ((xsent)))
                                    (((unsupported)) ((xleft)) ((xsent)))
                            bogusForceDataize.write ((((xsock).xclose)) 0)
                          seq
                            bogusForceDataize.write (((((xt).xready).xwait)) (2.0))
                            bogusForceDataize.write (((((xlogging).xconfig).xstopListening)) 0)
                            bogusForceDataize.write ((((xsupport).xjoin_thread)) ((xt)) (2.0))
                xtest_listen_config_10_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xsetup_via_listener)) (((((xjson).xdumps)) (((xself).xconfig10)))))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.lexer"))
                          bogusForceDataize.write ((((xlogger).xwarning)) (((((xself).xnext_message)) 0)))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser.codegen"))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("WARNING") ("1"))) ((((unsupported)) ("ERROR") ("4"))))) ((xoutput)))
                xtest_listen_config_1_ok.write
                  [xself]
                    memory > xlogger
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          bogusForceDataize.write ((((xself).xsetup_via_listener)) (((((xtextwrap).xdedent)) (((xConfigFileTest).xconfig1)))))
                          xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                          bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                          (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) 0)))
                xtest_listen_verify.write
                  [xself]
                    memory > xverify_reverse
                    memory > xlogger
                    memory > xto_send
                    memory > xverify_fail
                    seq > @
                      seq
                        xverify_fail.write
                          [xstuff]
                            seq > @
                              (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xverify_reverse.write
                          [xstuff]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xstuff)) ((((unsupported)) ((1.neg)))))))
                        xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                        xto_send.write ((((xtextwrap).xdedent)) (((xConfigFileTest).xconfig1)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xsetup_via_listener)) ((xto_send)) ((xverify_fail)))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) 0)) ((xoutput)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ("^[w.]+ -> (w+): (d+)$"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xsetup_via_listener)) ((xto_send)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("3"))) ((((unsupported)) ("ERROR") ("4"))))) ((xoutput)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ("^[w.]+ -> (w+): (d+)$"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                          seq
                            bogusForceDataize.write ((((xself).xsetup_via_listener)) ((((unsupported)) ((xto_send)) ((((unsupported)) ((1.neg)))))) ((xverify_reverse)))
                            xlogger.write ((((xlogging).xgetLogger)) ("compiler.parser"))
                            bogusForceDataize.write ((((xlogger).xinfo)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write ((((xlogger).xerror)) (((((xself).xnext_message)) 0)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("5"))) ((((unsupported)) ("ERROR") ("6"))))) ((xoutput)))
                        (((unsupported)) (((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("INFO") ("1"))) ((((unsupported)) ("ERROR") ("2"))))) ("^[w.]+ -> (w+): (d+)$"))
                xtest_out_of_order.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xapply_config)) (((xself).xout_of_order)))
                xtest_out_of_order_with_dollar_style.write
                  [xself]
                    memory > xhandler
                    memory > xconfig
                    seq > @
                      seq
                        xconfig.write ((((xcopy).xdeepcopy)) (((xself).xout_of_order)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xconfig)) ("formatters"))) ("mySimpleFormatter"))) ("format"))) ("${asctime} (${name}) ${levelname}: ${message}"))
                        bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                        xhandler.write (((unsupported)) ((((((xlogging).xgetLogger)) ("mymodule")).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xhandler).xtarget)) (((xlogging).xHandler)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xhandler).xformatter).x_style)) (((xlogging).xStringTemplateStyle)))
                xtest_custom_formatter_class_with_validate.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xapply_config)) (((xself).xcustom_formatter_class_validate)))
                        xhandler.write (((unsupported)) ((((((xlogging).xgetLogger)) ("my_test_logger_custom_formatter")).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xhandler).xformatter)) ((xExceptionFormatter)))
                xtest_custom_formatter_class_with_validate2.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xapply_config)) (((xself).xcustom_formatter_class_validate2)))
                        xhandler.write (((unsupported)) ((((((xlogging).xgetLogger)) ("my_test_logger_custom_formatter")).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xhandler).xformatter)) ((xExceptionFormatter)))
                xtest_custom_formatter_class_with_validate2_with_wrong_fmt.write
                  [xself]
                    memory > xhandler
                    memory > xconfig
                    seq > @
                      seq
                        xconfig.write (((((xself).xcustom_formatter_class_validate).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xconfig)) ("formatters"))) ("form1"))) ("style"))) ("$"))
                        bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                        xhandler.write (((unsupported)) ((((((xlogging).xgetLogger)) ("my_test_logger_custom_formatter")).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xhandler).xformatter)) ((xExceptionFormatter)))
                xtest_custom_formatter_class_with_validate3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xapply_config)) (((xself).xcustom_formatter_class_validate3)))
                xtest_custom_formatter_function_with_validate.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xself).xapply_config)) (((xself).xcustom_formatter_with_function)))
                xtest_baseconfig.write
                  [xself]
                    memory > xd
                    memory > xbc
                    memory > xv
                    seq > @
                      seq
                        xd.write (((unsupported)) ("atuple") ((((unsupported)) (1) (2) (3))) ("alist") ((((unsupported)) ("a") ("b") ("c"))) ("adict") ((((unsupported)) ("d") ("e") ("f") (3))) ("nest1") ((((unsupported)) ("g") ((((unsupported)) ("h") ("i"))) ("j"))) ("nest2") ((((unsupported)) ("k") ((((unsupported)) ("l") ("m"))) ("n"))) ("nest3") ((((unsupported)) ("o") ("cfg://alist") ("p"))))
                        xbc.write (((((xlogging).xconfig).xBaseConfigurator)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://atuple[1]"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://alist[1]"))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://nest1[1][0]"))) ("h"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://nest2[1][1]"))) ("m"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://adict.d"))) ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbc).xconvert)) ("cfg://adict[f]"))) (3))
                        xv.write ((((xbc).xconvert)) ("cfg://nest3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xv).xpop)) (1))) ((((unsupported)) ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xbc).xconvert)) ("cfg://nosuch"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xbc).xconvert)) ("cfg://!"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xbc).xconvert)) ("cfg://adict[2]"))
                xtest_namedtuple.write
                  [xself]
                    memory > xemit
                    memory > xresource
                    memory > xconfig
                    memory > x__init__
                    memory > xResource
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xlogging).xStreamHandler)))
                          seq
                            x__init__.write
                              [xself xresource]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                                    (((unsupported)) (((xself).xresource)) ((xnamedtuple)) ((xresource)))
                            xemit.write
                              [xself xrecord]
                                seq > @
                                  seq
                                    (((unsupported)) (((xrecord).xmsg)) (" {self.resource.type}"))
                                    (((unsupported)) (((((((xsuper)) 0).xemit)) ((xrecord)))))
                        xResource.write (((xnamedtuple)) ("Resource") ((((unsupported)) ("type") ("labels"))))
                        xresource.write (((unsupported)) ((xResource)) ("my_type") ((((unsupported)) ("a"))))
                        xconfig.write (((unsupported)) ("version") (1) ("handlers") ((((unsupported)) ("myhandler") ((((unsupported)) ("()") ((xMyHandler)) ("resource") ((xresource)))))) ("root") ((((unsupported)) ("level") ("INFO") ("handlers") ((((unsupported)) ("myhandler"))))))
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                          seq
                            bogusForceDataize.write ((((xself).xapply_config)) ((xconfig)))
                            bogusForceDataize.write ((((xlogging).xinfo)) ("some log"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) ("some log my_typen"))
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_manager_loggerclass.write
                  [xself]
                    memory > x_log
                    memory > xman
                    memory > xlogger
                    memory > xlogged
                    seq > @
                      seq
                        xlogged.write (((unsupported)) 0)
                        (((unsupported)) (((xlogging).xLogger)))
                          x_log.write
                            [xself xlevel xmsg xargs xexc_info xextra]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((xlogged).xappend)) ((xmsg)))
                        xman.write ((((xlogging).xManager)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xman).xsetLoggerClass)) ((xint)))
                        bogusForceDataize.write ((((xman).xsetLoggerClass)) ((xMyLogger)))
                        xlogger.write ((((xman).xgetLogger)) ("test"))
                        bogusForceDataize.write ((((xlogger).xwarning)) ("should appear in logged"))
                        bogusForceDataize.write ((((xlogging).xwarning)) ("should not appear in logged"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlogged)) ((((unsupported)) ("should appear in logged"))))
                xtest_set_log_record_factory.write
                  [xself]
                    memory > xexpected
                    memory > xman
                    seq > @
                      seq
                        xman.write ((((xlogging).xManager)) ("None: is there a None literal in the EO language?"))
                        xexpected.write (((xobject)) 0)
                        bogusForceDataize.write ((((xman).xsetLogRecordFactory)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xman).xlogRecordFactory)) ((xexpected)))
            (((unsupported)) ((xBaseTest)))
              xtest_child_loggers.write
                [xself]
                  memory > xc3
                  memory > xl2
                  memory > xr
                  memory > xc1
                  memory > xl1
                  memory > xc2
                  seq > @
                    seq
                      xr.write ((((xlogging).xgetLogger)) 0)
                      xl1.write ((((xlogging).xgetLogger)) ("abc"))
                      xl2.write ((((xlogging).xgetLogger)) ("def.ghi"))
                      xc1.write ((((xr).xgetChild)) ("xyz"))
                      xc2.write ((((xr).xgetChild)) ("uvw.xyz"))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xc1)) (((((xlogging).xgetLogger)) ("xyz"))))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xc2)) (((((xlogging).xgetLogger)) ("uvw.xyz"))))
                      xc1.write ((((xl1).xgetChild)) ("def"))
                      xc2.write ((((xc1).xgetChild)) ("ghi"))
                      xc3.write ((((xl1).xgetChild)) ("def.ghi"))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xc1)) (((((xlogging).xgetLogger)) ("abc.def"))))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xc2)) (((((xlogging).xgetLogger)) ("abc.def.ghi"))))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xc2)) ((xc3)))
            (((unsupported)) (((xlogging).xLogRecord)))
            (((unsupported)) ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > x__init__
                    memory > xfilter
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xFilter)))
                          seq
                            x__init__.write
                              [xself xcls]
                                seq > @
                                  (((unsupported)) (((xself).xcls)) ((xcls)))
                            xfilter.write
                              [xself xrecord]
                                memory > xt
                                memory > xmsg
                                seq > @
                                  seq
                                    xt.write (((xtype)) ((xrecord)))
                                    (((unsupported)) ((xt)) (((xself).xcls))).if
                                      seq
                                        xmsg.write ("Unexpected LogRecord type %s, expected %s".mod (((unsupported)) ((xt)) (((xself).xcls))))
                                        (((unsupported)) ((((xTypeError)) ((xmsg)))))
                                    (((unsupported)) (TRUE))
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xfilter)) ((((xCheckingFilter)) ((xDerivedLogRecord)))))
                        bogusForceDataize.write (((((xself).xroot_logger).xaddFilter)) (((xself).xfilter)))
                        (((unsupported)) (((xself).xorig_factory)) (((((xlogging).xgetLogRecordFactory)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xroot_logger).xremoveFilter)) (((xself).xfilter)))
                        bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                        bogusForceDataize.write ((((xlogging).xsetLogRecordFactory)) (((xself).xorig_factory)))
                xtest_logrecord_class.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xroot_logger).xwarning)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xlogging).xsetLogRecordFactory)) ((xDerivedLogRecord)))
                        bogusForceDataize.write (((((xself).xroot_logger).xerror)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassert_log_lines)) ((((unsupported)) ((((unsupported)) ("root") ("ERROR") ("2"))))))
            (((unsupported)) ((xBaseTest)))
              seq
                xexpected_log_pat.write "^[w.]+ -> (w+): (d+)$"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xqueue)) (((((xqueue).xQueue)) ((1.neg)))))
                        (((unsupported)) (((xself).xque_hdlr)) ((((((xlogging).xhandlers).xQueueHandler)) (((xself).xqueue)))))
                        (((unsupported)) (((xself).xname)) ("que"))
                        (((unsupported)) (((xself).xque_logger)) (((((xlogging).xgetLogger)) ("que"))))
                        (((unsupported)) ((((xself).xque_logger).xpropagate)) (FALSE))
                        bogusForceDataize.write (((((xself).xque_logger).xsetLevel)) (((xlogging).xWARNING)))
                        bogusForceDataize.write (((((xself).xque_logger).xaddHandler)) (((xself).xque_hdlr)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xque_hdlr).xclose)) 0)
                        bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xtest_queue_handler.write
                  [xself]
                    memory > xmsg
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xque_logger).xdebug)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xqueue).xEmpty)) ((((xself).xqueue).xget_nowait)))
                        bogusForceDataize.write (((((xself).xque_logger).xinfo)) (((((xself).xnext_message)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xqueue).xEmpty)) ((((xself).xqueue).xget_nowait)))
                        xmsg.write ((((xself).xnext_message)) 0)
                        bogusForceDataize.write (((((xself).xque_logger).xwarning)) ((xmsg)))
                        xdata.write (((((xself).xqueue).xget_nowait)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xdata)) (((xlogging).xLogRecord)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xdata).xname)) ((((xself).xque_logger).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xdata).xmsg)) (((xdata).xargs)))) ((((unsupported)) ((xmsg)) ("None: is there a None literal in the EO language?"))))
                xtest_formatting.write
                  [xself]
                    memory > xlevelname
                    memory > xmsg
                    memory > xlog_format_str
                    memory > xformatted_msg
                    memory > xlog_record
                    memory > xformatter
                    seq > @
                      seq
                        xmsg.write ((((xself).xnext_message)) 0)
                        xlevelname.write ((((xlogging).xgetLevelName)) (((xlogging).xWARNING)))
                        xlog_format_str.write "{name} -> {levelname}: {message}"
                        xformatted_msg.write (((unsupported)) (((xlog_format_str).xformat)) (((xself).xname)) ((xlevelname)) ((xmsg)))
                        xformatter.write ((((xlogging).xFormatter)) (((xself).xlog_format)))
                        bogusForceDataize.write (((((xself).xque_hdlr).xsetFormatter)) ((xformatter)))
                        bogusForceDataize.write (((((xself).xque_logger).xwarning)) ((xmsg)))
                        xlog_record.write (((((xself).xqueue).xget_nowait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xformatted_msg)) (((xlog_record).xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xformatted_msg)) (((xlog_record).xmessage)))
                xtest_queue_listener.write
                  [xself]
                    memory > xlistener
                    memory > xhandler
                    seq > @
                      (((unsupported)) 0)
                        xhandler.write ((((xsupport).xTestHandler)) (((((xsupport).xMatcher)) 0)))
                        xlistener.write (((((xlogging).xhandlers).xQueueListener)) (((xself).xqueue)) ((xhandler)))
                        bogusForceDataize.write ((((xlistener).xstart)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((((xself).xque_logger).xwarning)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write (((((xself).xque_logger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write (((((xself).xque_logger).xcritical)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlistener).xstop)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xWARNING)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xERROR)) ("2"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xCRITICAL)) ("3"))))
                        bogusForceDataize.write ((((xhandler).xclose)) 0)
                        xhandler.write ((((xsupport).xTestHandler)) (((((xsupport).xMatcher)) 0)))
                        bogusForceDataize.write ((((xhandler).xsetLevel)) (((xlogging).xCRITICAL)))
                        xlistener.write (((unsupported)) ((((xlogging).xhandlers).xQueueListener)) (((xself).xqueue)) ((xhandler)) (TRUE))
                        bogusForceDataize.write ((((xlistener).xstart)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((((xself).xque_logger).xwarning)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write (((((xself).xque_logger).xerror)) (((((xself).xnext_message)) 0)))
                            bogusForceDataize.write (((((xself).xque_logger).xcritical)) (((((xself).xnext_message)) 0)))
                          bogusForceDataize.write ((((xlistener).xstop)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xWARNING)) ("4"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xERROR)) ("5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xhandler).xmatches)) (((xlogging).xCRITICAL)) ("6"))))
                        bogusForceDataize.write ((((xhandler).xclose)) 0)
                xtest_queue_listener_with_StreamHandler.write
                  [xself]
                    memory > xlistener
                    memory > xexc
                    seq > @
                      (((unsupported)) 0)
                        xlistener.write (((((xlogging).xhandlers).xQueueListener)) (((xself).xqueue)) (((xself).xroot_hdlr)))
                        bogusForceDataize.write ((((xlistener).xstart)) 0)
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          seq
                            xexc.write (xe)
                            (((unsupported)) ((((xself).xque_logger).xexception)) (((((xself).xnext_message)) 0)) ((xexc)))
                        bogusForceDataize.write ((((xlistener).xstop)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((((((xself).xstream).xgetvalue)) 0).xstrip)) 0).xcount)) ("Traceback"))) (1))
                xtest_queue_listener_with_multiple_handlers.write
                  [xself]
                    memory > xlistener
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xque_hdlr).xsetFormatter)) (((xself).xroot_formatter)))
                        bogusForceDataize.write (((((xself).xque_logger).xaddHandler)) (((xself).xroot_hdlr)))
                        xlistener.write (((((xlogging).xhandlers).xQueueListener)) (((xself).xqueue)) (((xself).xque_hdlr)))
                        bogusForceDataize.write ((((xlistener).xstart)) 0)
                        bogusForceDataize.write (((((xself).xque_logger).xerror)) ("error"))
                        bogusForceDataize.write ((((xlistener).xstop)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xself).xstream).xgetvalue)) 0).xstrip)) 0)) ("que -> ERROR: error"))
            (((xhasattr)) (((xlogging).xhandlers)) ("QueueListener")).if
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
                (((unsupported)) ((xBaseTest)))
                  seq
                    (((unsupported)) 0)
                    xrepeat.write 20
                    xsetup_and_log.write
                      [xlog_queue xident]
                        memory > xlistener
                        memory > xhandler
                        memory > xlogger
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) 0)
                            xlogger.write ((((xlogging).xgetLogger)) (("test_logger_with_id_%s".mod (xident))))
                            bogusForceDataize.write ((((xlogger).xsetLevel)) (((xlogging).xDEBUG)))
                            xhandler.write (((((xlogging).xhandlers).xQueueHandler)) ((xlog_queue)))
                            bogusForceDataize.write ((((xlogger).xaddHandler)) ((xhandler)))
                            xlistener.write (((((xlogging).xhandlers).xQueueListener)) ((xlog_queue)))
                            bogusForceDataize.write ((((xlistener).xstart)) 0)
                            bogusForceDataize.write ((((xlogger).xinfo)) ("one"))
                            bogusForceDataize.write ((((xlogger).xinfo)) ("two"))
                            bogusForceDataize.write ((((xlogger).xinfo)) ("three"))
                            bogusForceDataize.write ((((xlogger).xinfo)) ("four"))
                            bogusForceDataize.write ((((xlogger).xinfo)) ("five"))
                            bogusForceDataize.write ((((xlistener).xstop)) 0)
                            bogusForceDataize.write ((((xlogger).xremoveHandler)) ((xhandler)))
                            bogusForceDataize.write ((((xhandler).xclose)) 0)
                    xtest_handle_called_with_queue_queue.write
                      [xself xmock_handle]
                        memory > xlog_queue
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (((xself).xrepeat)))))
                              seq
                                xlog_queue.write ((((xqueue).xQueue)) 0)
                                bogusForceDataize.write ((((xself).xsetup_and_log)) ((xlog_queue)) (("%s_%s".mod (((unsupported)) (((((xself).xid)) 0)) ((xi))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmock_handle).xcall_count)) ((5.mul ((xself).xrepeat))) ("correct number of handled log messages"))
                    xtest_handle_called_with_mp_queue.write
                      [xself xmock_handle]
                        memory > xlog_queue
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((xsupport).xskip_if_broken_multiprocessing_synchronize)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (((xself).xrepeat)))))
                              seq
                                xlog_queue.write ((((xmultiprocessing).xQueue)) 0)
                                bogusForceDataize.write ((((xself).xsetup_and_log)) ((xlog_queue)) (("%s_%s".mod (((unsupported)) (((((xself).xid)) 0)) ((xi))))))
                                bogusForceDataize.write ((((xlog_queue).xclose)) 0)
                                bogusForceDataize.write ((((xlog_queue).xjoin_thread)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xmock_handle).xcall_count)) ((5.mul ((xself).xrepeat))) ("correct number of handled log messages"))
                    xget_all_from_queue.write
                      [xlog_queue]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((xqueue).xEmpty)))
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    (((unsupported)) (((((xlog_queue).xget_nowait)) 0)))
                              (((unsupported)) ((((unsupported)) 0)))
                    xtest_no_messages_in_queue_after_stop.write
                      [xself]
                        memory > xexpected
                        memory > xqueue
                        memory > xitems
                        seq > @
                          seq
                            (((unsupported)) 0)
                            bogusForceDataize.write ((((xsupport).xskip_if_broken_multiprocessing_synchronize)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (((xself).xrepeat)))))
                              seq
                                xqueue.write ((((xmultiprocessing).xQueue)) 0)
                                bogusForceDataize.write ((((xself).xsetup_and_log)) ((xqueue)) (("%s_%s".mod (((unsupported)) (((((xself).xid)) 0)) ((xi))))))
                                xitems.write (((xlist)) (((((xself).xget_all_from_queue)) ((xqueue)))))
                                bogusForceDataize.write ((((xqueue).xclose)) 0)
                                bogusForceDataize.write ((((xqueue).xjoin_thread)) 0)
                                xexpected.write (((unsupported)) ((((unsupported)) 0)) ((((unsupported)) (((((xlogging).xhandlers).xQueueListener).x_sentinel)))))
                                bogusForceDataize.write ((((xself).xassertIn)) ((xitems)) ((xexpected)) (("Found unexpected messages in queue: %s".mod (((unsupported)) (((((xisinstance)) ((xm)) (((xlogging).xLogRecord))).if ((xm).xmsg) (xm))) ((xm)) ((xitems))))))
                    xtest_calls_task_done_after_stop.write
                      [xself]
                        memory > xlistener
                        memory > xlog_queue
                        seq > @
                          seq
                            xlog_queue.write ((((xqueue).xQueue)) 0)
                            xlistener.write (((((xlogging).xhandlers).xQueueListener)) ((xlog_queue)))
                            bogusForceDataize.write ((((xlistener).xstart)) 0)
                            bogusForceDataize.write ((((xlistener).xstop)) 0)
                            (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                              bogusForceDataize.write ((((xlog_queue).xtask_done)) 0)
            xZERO.write ((((xdatetime).xtimedelta)) (0))
            (((unsupported)) (((xdatetime).xtzinfo)))
              seq
                xutcoffset.write
                  [xself xdt]
                    seq > @
                      (((unsupported)) ((xZERO)))
                xdst.write (xutcoffset)
                xtzname.write
                  [xself xdt]
                    seq > @
                      (((unsupported)) ("UTC"))
            xutc.write (((xUTC)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcommon)) ((((unsupported)) ("name") ("formatter.test") ("level") (((xlogging).xDEBUG)) ("pathname") ((((((xos).xpath).xjoin)) ("path") ("to") ("dummy.ext"))) ("lineno") (42) ("exc_info") ("None: is there a None literal in the EO language?") ("func") ("None: is there a None literal in the EO language?") ("msg") ("Message with %d %s") ("args") ((((unsupported)) (2) ("placeholders"))))))
                        (((unsupported)) (((xself).xvariants)) ((((unsupported)) 0)))
                xget_record.write
                  [xself xname]
                    memory > xresult
                    seq > @
                      (((unsupported)) 0)
                        xresult.write (((xdict)) (((xself).xcommon)))
                        (((unsupported)) ((xname)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xresult).xupdate)) ((((unsupported)) (((xself).xvariants)) ((xname)))))
                        (((unsupported)) (((((xlogging).xmakeLogRecord)) ((xresult)))))
                xassert_error_message.write
                  [xself xexception xmessage]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xexception)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xexception)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage)) (((xe).xmessage)))
                xtest_percent.write
                  [xself]
                    memory > xr
                    memory > xf
                    seq > @
                      seq
                        xr.write ((((xself).xget_record)) 0)
                        xf.write ((((xlogging).xFormatter)) ("${%(message)s}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformat)) ((xr)))) ("${Message with 2 placeholders}"))
                        xf.write ((((xlogging).xFormatter)) ("%(random)s"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xformat)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xusesTime)) 0)))
                        xf.write ((((xlogging).xFormatter)) ("%(asctime)s"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write ((((xlogging).xFormatter)) ("%(asctime)-15s"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write ((((xlogging).xFormatter)) ("%(asctime)#15s"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                xtest_braces.write
                  [xself]
                    memory > xr
                    memory > xf
                    seq > @
                      seq
                        xr.write ((((xself).xget_record)) 0)
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$%{message}%$") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformat)) ((xr)))) ("$%Message with 2 placeholders%$"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{random}") ("{"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xformat)) ((xr)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{message}") ("{"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{asctime}") ("{"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{asctime!s:15}") ("{"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{asctime:15}") ("{"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                xtest_dollars.write
                  [xself]
                    memory > xr
                    memory > xf
                    seq > @
                      seq
                        xr.write ((((xself).xget_record)) 0)
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${message}") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformat)) ((xr)))) ("Message with 2 placeholders"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$message") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformat)) ((xr)))) ("Message with 2 placeholders"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$$%${message}%$$") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformat)) ((xr)))) ("$%Message with 2 placeholders%$"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${random}") ("$"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xf).xformat)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${asctime}") ("$"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$asctime") ("$"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${message}") ("$"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xf).xusesTime)) 0)))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${asctime}--") ("$"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xf).xusesTime)) 0)))
                xtest_format_validate.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xlogging).xFormatter)) ("%(levelname)-15s - %(message) 5s - %(process)03d - %(module) - %(asctime)*.3s"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("%(levelname)-15s - %(message) 5s - %(process)03d - %(module) - %(asctime)*.3s"))
                        xf.write ((((xlogging).xFormatter)) ("%(asctime)*s - %(asctime)*.3s - %(process)-34.33o"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("%(asctime)*s - %(asctime)*.3s - %(process)-34.33o"))
                        xf.write ((((xlogging).xFormatter)) ("%(process)#+027.23X"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("%(process)#+027.23X"))
                        xf.write ((((xlogging).xFormatter)) ("%(foo)#.*g"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("%(foo)#.*g"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$%{message}%$ - {asctime!a:15} - {customfield['key']}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("$%{message}%$ - {asctime!a:15} - {customfield['key']}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{process:.2f} - {custom.f:.4f}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{process:.2f} - {custom.f:.4f}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{customfield!s:#<30}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{customfield!s:#<30}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{message!r}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{message!r}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{message!s}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{message!s}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{message!a}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{message!a}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{process!r:4.2}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{process!r:4.2}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{process!s:<#30,.12f}- {custom:=+#30,.1d} - {module:^30}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{process!s:<#30,.12f}- {custom:=+#30,.1d} - {module:^30}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{process!s:{w},.{p}}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{process!s:{w},.{p}}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{foo:12.{p}}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{foo:12.{p}}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{foo:{w}.6}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{foo:{w}.6}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{foo[0].bar[1].baz}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{foo[0].bar[1].baz}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{foo[k1].bar[k2].baz}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{foo[k1].bar[k2].baz}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("{12[k1].bar[k2].baz}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("{12[k1].bar[k2].baz}"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("${asctime} - $message") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("${asctime} - $message"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$bar $$") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("$bar $$"))
                        xf.write (((unsupported)) (((xlogging).xFormatter)) ("$bar $$$$") ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).x_fmt)) ("$bar $$$$"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)Z"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)*"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)*3s"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)_"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{asctime}"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("${message}"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(foo)#12.3*f"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(foo)0*.8*f"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid field name/expression: 'name-thing'") (((xlogging).xFormatter)) ("{name-thing}") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: no fields") (((xlogging).xFormatter)) ("%(asctime)s") ("{"))
                        bogusForceDataize.write ((((xself).xassert_error_message)) ((xValueError)) ("invalid conversion: 'Z'"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{asctime!s:#30,15f}") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: expected ':' after conversion specifier") (((xlogging).xFormatter)) ("{asctime!aa:15}") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("bad specifier: '.2ff'") (((xlogging).xFormatter)) ("{process:.2ff}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{process:.2Z}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{process!s:<##30,12g}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{process!s:<#30#,12g}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{process!s:{{w}},{{p}}}") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: unmatched '{' in format spec") (((xlogging).xFormatter)) ("{process") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: unmatched '{' in format spec") (((xlogging).xFormatter)) ("process}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{{foo!r:4.2}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{{foo!r:4.2}}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo/bar}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo:{{w}}.{{p}}}}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo!X:{{w}}.{{p}}}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo!a:random}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo!a:ran{dom}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo!a:ran{d}om}") ("{"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("{foo.!a:d}") ("{"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: bare '$' not allowed") (((xlogging).xFormatter)) ("$bar $$$") ("$"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: bare '$' not allowed") (((xlogging).xFormatter)) ("bar $") ("$"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: bare '$' not allowed") (((xlogging).xFormatter)) ("foo $.") ("$"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: no fields") (((xlogging).xFormatter)) ("{asctime}") ("$"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("%(asctime)s") ("$"))
                        (((unsupported)) (((xself).xassert_error_message)) ((xValueError)) ("invalid format: no fields") (((xlogging).xFormatter)) ("foo") ("$"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("${asctime") ("$"))
                xtest_invalid_style.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xFormatter)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("x"))
                xtest_time.write
                  [xself]
                    memory > xr
                    memory > xdt
                    memory > xf
                    seq > @
                      seq
                        xr.write ((((xself).xget_record)) 0)
                        xdt.write ((((xdatetime).xdatetime)) (1993) (4) (21) (8) (3) (0) (0) ((xutc)))
                        (((unsupported)) (((xr).xcreated)) (((((xtime).xmktime)) ((((((((xdt).xastimezone)) ("None: is there a None literal in the EO language?")).xtimetuple)) 0)))))
                        (((unsupported)) (((xr).xmsecs)) (123))
                        xf.write ((((xlogging).xFormatter)) ("%(asctime)s %(message)s"))
                        (((unsupported)) (((xf).xconverter)) (((xtime).xgmtime)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformatTime)) ((xr)))) ("1993-04-21 08:03:00,123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xformatTime)) ((xr)) ("%Y:%d"))) ("1993:21"))
                        bogusForceDataize.write ((((xf).xformat)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xasctime)) ("1993-04-21 08:03:00,123"))
            (((unsupported)) (((xlogging).xBufferingFormatter)))
              seq
                xformatHeader.write
                  [xself xrecords]
                    seq > @
                      (((unsupported)) (("[(%d)".mod (((xlen)) ((xrecords))))))
                xformatFooter.write
                  [xself xrecords]
                    seq > @
                      (((unsupported)) (("(%d)]".mod (((xlen)) ((xrecords))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xrecords)) ((((unsupported)) (((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("one"))))) (((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("two"))))))))
                xtest_default.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xlogging).xBufferingFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("") (((((xf).xformat)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("onetwo") (((((xf).xformat)) (((xself).xrecords)))))
                xtest_custom.write
                  [xself]
                    memory > xlf
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xTestBufferingFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("[(2)onetwo(2)]") (((((xf).xformat)) (((xself).xrecords)))))
                        xlf.write ((((xlogging).xFormatter)) ("<%(message)s>"))
                        xf.write (((xTestBufferingFormatter)) ((xlf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("[(2)<one><two>(2)]") (((((xf).xformat)) (((xself).xrecords)))))
            (((unsupported)) ((xBaseTest)))
              xtest_formatting.write
                [xself]
                  seq > @
            (((unsupported)) ((xBaseTest)))
              xtest_last_resort.write
                [xself]
                  memory > xroot
                  memory > xold_lastresort
                  memory > xmsg
                  memory > xold_raise_exceptions
                  seq > @
                    seq
                      xroot.write ((xself).xroot_logger)
                      bogusForceDataize.write ((((xroot).xremoveHandler)) (((xself).xroot_hdlr)))
                      xold_lastresort.write ((xlogging).xlastResort)
                      xold_raise_exceptions.write ((xlogging).xraiseExceptions)
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                            seq
                              bogusForceDataize.write ((((xroot).xdebug)) ("This should not appear"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) (""))
                              bogusForceDataize.write ((((xroot).xwarning)) ("Final chance!"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) ("Final chance!n"))
                          (((unsupported)) (((xlogging).xlastResort)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                            seq
                              bogusForceDataize.write ((((xroot).xwarning)) ("Final chance!"))
                              xmsg.write "No handlers could be found for logger \"root\"n"
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) ((xmsg)))
                          (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                            seq
                              bogusForceDataize.write ((((xroot).xwarning)) ("Final chance!"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) (""))
                          (((unsupported)) ((((xroot).xmanager).xemittedNoHandlerWarning)) (FALSE))
                          (((unsupported)) (((xlogging).xraiseExceptions)) (FALSE))
                          (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                            seq
                              bogusForceDataize.write ((((xroot).xwarning)) ("Final chance!"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) (""))
                        seq
                          bogusForceDataize.write ((((xroot).xaddHandler)) (((xself).xroot_hdlr)))
                          (((unsupported)) (((xlogging).xlastResort)) ((xold_lastresort)))
                          (((unsupported)) (((xlogging).xraiseExceptions)) ((xold_raise_exceptions)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xidentifier xcalled]
                    seq > @
                      (((unsupported)) ((xmethod)) ((((unsupported)) ("acquire") ("flush") ("close") ("release"))))
                        bogusForceDataize.write (((xsetattr)) ((xself)) ((xmethod)) (((((xself).xrecord_call)) ((xidentifier)) ((xmethod)) ((xcalled)))))
                xrecord_call.write
                  [xself xidentifier xmethod_name xcalled]
                    memory > xinner
                    seq > @
                      seq
                        xinner.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xcalled).xappend)) (((("{} - {}".xformat)) ((xidentifier)) ((xmethod_name)))))
                        (((unsupported)) ((xinner)))
            (((unsupported)) (((xlogging).xNullHandler)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) ((xRecordingHandler)) ((xself))).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((xself).xrecords)) ((((unsupported)) 0)))
                xhandle.write
                  [xself xrecord]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xself).xrecords).xappend)) ((xrecord)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xraise_exceptions
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xShutdownTest)) ((xself))).xsetUp)) 0)
                        (((unsupported)) (((xself).xcalled)) ((((unsupported)) 0)))
                        xraise_exceptions.write ((xlogging).xraiseExceptions)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) ((xlogging)) ("raiseExceptions") ((xraise_exceptions)))
                xraise_error.write
                  [xself xerror]
                    memory > xinner
                    seq > @
                      seq
                        xinner.write
                          []
                            seq > @
                              (((unsupported)) ((((xerror)) 0)))
                        (((unsupported)) ((xinner)))
                xtest_no_failure.write
                  [xself]
                    memory > xexpected
                    memory > xhandlers
                    memory > xhandler0
                    memory > xhandler1
                    memory > xhandler2
                    seq > @
                      seq
                        xhandler0.write (((xFakeHandler)) (0) (((xself).xcalled)))
                        xhandler1.write (((xFakeHandler)) (1) (((xself).xcalled)))
                        xhandler2.write (((xFakeHandler)) (2) (((xself).xcalled)))
                        xhandlers.write (((xmap)) ((((xlogging).xweakref).xref)) ((((unsupported)) ((xhandler0)) ((xhandler1)) ((xhandler2)))))
                        (((unsupported)) (((xlogging).xshutdown)) ((((xlist)) ((xhandlers)))))
                        xexpected.write (((unsupported)) ("2 - acquire") ("2 - flush") ("2 - close") ("2 - release") ("1 - acquire") ("1 - flush") ("1 - close") ("1 - release") ("0 - acquire") ("0 - flush") ("0 - close") ("0 - release"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) (((xself).xcalled)))
                x_test_with_failure_in_method.write
                  [xself xmethod xerror]
                    memory > xhandler
                    memory > xhandlers
                    seq > @
                      seq
                        xhandler.write (((xFakeHandler)) (0) (((xself).xcalled)))
                        bogusForceDataize.write (((xsetattr)) ((xhandler)) ((xmethod)) (((((xself).xraise_error)) ((xerror)))))
                        xhandlers.write (((unsupported)) ((((((xlogging).xweakref).xref)) ((xhandler)))))
                        (((unsupported)) (((xlogging).xshutdown)) ((((xlist)) ((xhandlers)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("0 - release") ((((unsupported)) (((xself).xcalled)) ((1.neg)))))
                xtest_with_ioerror_in_acquire.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("acquire") ((xOSError)))
                xtest_with_ioerror_in_flush.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("flush") ((xOSError)))
                xtest_with_ioerror_in_close.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("close") ((xOSError)))
                xtest_with_valueerror_in_acquire.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("acquire") ((xValueError)))
                xtest_with_valueerror_in_flush.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("flush") ((xValueError)))
                xtest_with_valueerror_in_close.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("close") ((xValueError)))
                xtest_with_other_error_in_acquire_without_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (FALSE))
                        bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("acquire") ((xIndexError)))
                xtest_with_other_error_in_flush_without_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (FALSE))
                        bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("flush") ((xIndexError)))
                xtest_with_other_error_in_close_without_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (FALSE))
                        bogusForceDataize.write ((((xself).x_test_with_failure_in_method)) ("close") ((xIndexError)))
                xtest_with_other_error_in_acquire_with_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xself).x_test_with_failure_in_method)) ("acquire") ((xIndexError)))
                xtest_with_other_error_in_flush_with_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xself).x_test_with_failure_in_method)) ("flush") ((xIndexError)))
                xtest_with_other_error_in_close_with_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xraiseExceptions)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xself).x_test_with_failure_in_method)) ("close") ((xIndexError)))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xtest_disable.write
                  [xself]
                    memory > xold_disable
                    seq > @
                      seq
                        xold_disable.write ((((xlogging).xroot).xmanager).xdisable)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xold_disable)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xdisable)) ((xold_disable)))
                        bogusForceDataize.write ((((xlogging).xdisable)) (83))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xroot).xmanager).xdisable)) (83))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlogging).xdisable)) ("doesnotexists"))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlogging).xdisable)) ((((x_NotAnIntOrString)) 0)))
                        bogusForceDataize.write ((((xlogging).xdisable)) ("WARN"))
                        bogusForceDataize.write ((((xlogging).xdisable)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xroot).xmanager).xdisable)) (((xlogging).xCRITICAL)))
                x_test_log.write
                  [xself xmethod xlevel]
                    memory > xcalled
                    memory > xrecord
                    memory > xlog_method
                    memory > xexpected_level
                    memory > xrecording
                    seq > @
                      (((unsupported)) 0)
                        xcalled.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xpatch)) ((xself)) ((xlogging)) ("basicConfig") ((((unsupported)) (((((xcalled).xappend)) ((((unsupported)) ((xa)) ((xkw)))))))))
                        xrecording.write (((xRecordingHandler)) 0)
                        bogusForceDataize.write (((((xlogging).xroot).xaddHandler)) ((xrecording)))
                        xlog_method.write (((xgetattr)) ((xlogging)) ((xmethod)))
                        (((unsupported)) ((xlevel)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((xlog_method)) ((xlevel)) ("test me: %r") ((xrecording)))
                          bogusForceDataize.write (((xlog_method)) ("test me: %r") ((xrecording)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) (((xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xrecord).xgetMessage)) 0)) (("test me: %r".mod (xrecording))))
                        xexpected_level.write ((((unsupported)) ((xlevel)) ("None: is there a None literal in the EO language?")).if (xlevel) (((xgetattr)) ((xlogging)) (((((xmethod).xupper)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xlevelno)) ((xexpected_level)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcalled)) ((((unsupported)) 0)))
                xtest_log.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("log") (((xlogging).xERROR)))
                xtest_debug.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("debug"))
                xtest_info.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("info"))
                xtest_warning.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("warning"))
                xtest_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("error"))
                xtest_critical.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("critical"))
                xtest_set_logger_class.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlogging).xsetLoggerClass)) ((xobject)))
                        (((unsupported)) (((xlogging).xLogger)))
                        bogusForceDataize.write ((((xlogging).xsetLoggerClass)) ((xMyLogger)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLoggerClass)) 0)) ((xMyLogger)))
                        bogusForceDataize.write ((((xlogging).xsetLoggerClass)) (((xlogging).xLogger)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogging).xgetLoggerClass)) 0)) (((xlogging).xLogger)))
                xtest_subclass_logger_cache.write
                  [xself]
                    memory > x__init__
                    memory > xlogger
                    memory > xmessage
                    memory > xh
                    memory > xstream
                    seq > @
                      seq
                        xmessage.write (((unsupported)) 0)
                        (((unsupported)) (((((xlogging).xgetLoggerClass)) 0)))
                          x__init__.write
                            [xself xname xlevel]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((xname)) ((xlevel)))
                                  bogusForceDataize.write ((((xmessage).xappend)) ("initialized"))
                        bogusForceDataize.write ((((xlogging).xsetLoggerClass)) ((xMyLogger)))
                        xlogger.write ((((xlogging).xgetLogger)) ("just_some_logger"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage)) ((((unsupported)) ("initialized"))))
                        xstream.write ((((xio).xStringIO)) 0)
                        xh.write ((((xlogging).xStreamHandler)) ((xstream)))
                        bogusForceDataize.write ((((xlogger).xaddHandler)) ((xh)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xlogger).xsetLevel)) (((xlogging).xDEBUG)))
                            bogusForceDataize.write ((((xlogger).xdebug)) ("hello"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xstream).xgetvalue)) 0).xstrip)) 0)) ("hello"))
                            bogusForceDataize.write ((((xstream).xtruncate)) (0))
                            bogusForceDataize.write ((((xstream).xseek)) (0))
                            bogusForceDataize.write ((((xlogger).xsetLevel)) (((xlogging).xINFO)))
                            bogusForceDataize.write ((((xlogger).xdebug)) ("hello"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstream).xgetvalue)) 0)) (""))
                          seq
                            bogusForceDataize.write ((((xlogger).xremoveHandler)) ((xh)))
                            bogusForceDataize.write ((((xh).xclose)) 0)
                            bogusForceDataize.write ((((xlogging).xsetLoggerClass)) (((xlogging).xLogger)))
                xtest_logging_at_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xerr
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)) ("-c") ((xcode)))))
                        xerr.write ((((xerr).xdecode)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("exception in __del__") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("ValueError: some error") ((xerr)))
                xtest_recursion_error.write
                  [xself]
                    memory > xcode
                    memory > xerr
                    seq > @
                      seq
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)) ("-c") ((xcode)))))
                        xerr.write ((((xerr).xdecode)) 0)
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("Cannot recover from stack overflow.") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
            (((unsupported)) ((xBaseTest)))
              seq
                xtest_str_rep.write
                  [xself]
                    memory > xs
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                        xs.write (((xstr)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) ("<LogRecord: "))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xendswith)) (">"))))
                xtest_dict_arg.write
                  [xself]
                    memory > xd
                    memory > xh
                    memory > xr
                    seq > @
                      seq
                        xh.write (((xRecordingHandler)) 0)
                        xr.write ((((xlogging).xgetLogger)) 0)
                        bogusForceDataize.write ((((xr).xaddHandler)) ((xh)))
                        xd.write (((unsupported)) ("less") ("more"))
                        bogusForceDataize.write ((((xlogging).xwarning)) ("less is %(less)s") ((xd)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((unsupported)) (((xh).xrecords)) (0)).xargs)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xh).xrecords)) (0)).xmessage)) ("less is more"))
                        bogusForceDataize.write ((((xr).xremoveHandler)) ((xh)))
                        bogusForceDataize.write ((((xh).xclose)) 0)
                xtest_multiprocessing.write
                  [xself]
                    memory > xr
                    memory > xmp
                    seq > @
                      seq
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xprocessName)) ("MainProcess"))
                        (((unsupported)) ((xImportError)))
                          seq
                            (((unsupported)) 0)
                            xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xprocessName)) ((((((xmp).xcurrent_process)) 0).xname)))
                xtest_optional.write
                  [xself]
                    memory > xlog_processes
                    memory > xlog_threads
                    memory > xNONE
                    memory > xlog_multiprocessing
                    memory > xr
                    memory > xNOT_NONE
                    seq > @
                      seq
                        xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                        xNOT_NONE.write ((xself).xassertIsNotNone)
                        bogusForceDataize.write (((xNOT_NONE)) (((xr).xthread)))
                        bogusForceDataize.write (((xNOT_NONE)) (((xr).xthreadName)))
                        bogusForceDataize.write (((xNOT_NONE)) (((xr).xprocess)))
                        bogusForceDataize.write (((xNOT_NONE)) (((xr).xprocessName)))
                        xlog_threads.write ((xlogging).xlogThreads)
                        xlog_processes.write ((xlogging).xlogProcesses)
                        xlog_multiprocessing.write ((xlogging).xlogMultiprocessing)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xlogging).xlogThreads)) (FALSE))
                            (((unsupported)) (((xlogging).xlogProcesses)) (FALSE))
                            (((unsupported)) (((xlogging).xlogMultiprocessing)) (FALSE))
                            xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))
                            xNONE.write ((xself).xassertIsNone)
                            bogusForceDataize.write (((xNONE)) (((xr).xthread)))
                            bogusForceDataize.write (((xNONE)) (((xr).xthreadName)))
                            bogusForceDataize.write (((xNONE)) (((xr).xprocess)))
                            bogusForceDataize.write (((xNONE)) (((xr).xprocessName)))
                          seq
                            (((unsupported)) (((xlogging).xlogThreads)) ((xlog_threads)))
                            (((unsupported)) (((xlogging).xlogProcesses)) ((xlog_processes)))
                            (((unsupported)) (((xlogging).xlogMultiprocessing)) ((xlog_multiprocessing)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xBasicConfigTest)) ((xself))).xsetUp)) 0)
                        (((unsupported)) (((xself).xhandlers)) ((((xlogging).xroot).xhandlers)))
                        (((unsupported)) (((xself).xsaved_handlers)) ((((((xlogging).x_handlers).xcopy)) 0)))
                        (((unsupported)) (((xself).xsaved_handler_list)) ((((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xoriginal_logging_level)) ((((xlogging).xroot).xlevel)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xself).xcleanup)))
                        (((unsupported)) ((((xlogging).xroot).xhandlers)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xh)) ((((unsupported)) ((((xlogging).xroot).xhandlers)) ((((unsupported)) 0)))))
                          seq
                            bogusForceDataize.write (((((xlogging).xroot).xremoveHandler)) ((xh)))
                            bogusForceDataize.write ((((xh).xclose)) 0)
                        bogusForceDataize.write ((((((xsuper)) ((xBasicConfigTest)) ((xself))).xtearDown)) 0)
                xcleanup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xsetattr)) (((xlogging).xroot)) ("handlers") (((xself).xhandlers)))
                        bogusForceDataize.write (((((xlogging).x_handlers).xclear)) 0)
                        bogusForceDataize.write (((((xlogging).x_handlers).xupdate)) (((xself).xsaved_handlers)))
                        (((unsupported)) ((((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))) (((xself).xsaved_handler_list)))
                        bogusForceDataize.write (((((xlogging).xroot).xsetLevel)) (((xself).xoriginal_logging_level)))
                xtest_no_kwargs.write
                  [xself]
                    memory > xhandler
                    memory > xformatter
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlogging).xbasicConfig)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlogging).xroot).xhandlers)))) (1))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xhandler)) (((xlogging).xStreamHandler)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xstream)) (((xsys).xstderr)))
                        xformatter.write ((xhandler).xformatter)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformatter).x_style).x_fmt)) (((xlogging).xBASIC_FORMAT)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xformatter).xdatefmt)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xformatter).x_style)) (((xlogging).xPercentStyle)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlogging).xroot).xlevel)) (((xself).xoriginal_logging_level)))
                xtest_strformatstyle.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          (((unsupported)) (((xlogging).xbasicConfig)) (((xsys).xstdout)) ("{"))
                          bogusForceDataize.write ((((xlogging).xerror)) ("Log an error"))
                          bogusForceDataize.write (((((xsys).xstdout).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xoutput).xgetvalue)) 0).xstrip)) 0)) ("ERROR:root:Log an error"))
                xtest_stringtemplatestyle.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xoutput)))
                        seq
                          (((unsupported)) (((xlogging).xbasicConfig)) (((xsys).xstdout)) ("$"))
                          bogusForceDataize.write ((((xlogging).xerror)) ("Log an error"))
                          bogusForceDataize.write (((((xsys).xstdout).xseek)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xoutput).xgetvalue)) 0).xstrip)) 0)) ("ERROR:root:Log an error"))
                xtest_filename.write
                  [xself]
                    memory > xexpected
                    memory > xhandler
                    memory > xcleanup
                    seq > @
                      seq
                        xcleanup.write
                          [xh1 xh2 xfn]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xh1).xclose)) 0)
                                bogusForceDataize.write ((((xh2).xclose)) 0)
                                bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                        (((unsupported)) (((xlogging).xbasicConfig)) ("test.log"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlogging).xroot).xhandlers)))) (1))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xhandler)) (((xlogging).xFileHandler)))
                        xexpected.write ((((xlogging).xFileHandler)) ("test.log") ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhandler).xstream).xmode)) ((((xexpected).xstream).xmode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhandler).xstream).xname)) ((((xexpected).xstream).xname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)) ((xhandler)) ((xexpected)) ("test.log"))
                xtest_filemode.write
                  [xself]
                    memory > xexpected
                    memory > xhandler
                    memory > xcleanup
                    seq > @
                      seq
                        xcleanup.write
                          [xh1 xh2 xfn]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xh1).xclose)) 0)
                                bogusForceDataize.write ((((xh2).xclose)) 0)
                                bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                        (((unsupported)) (((xlogging).xbasicConfig)) ("test.log") ("wb"))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        xexpected.write ((((xlogging).xFileHandler)) ("test.log") ("wb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhandler).xstream).xmode)) ((((xexpected).xstream).xmode)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)) ((xhandler)) ((xexpected)) ("test.log"))
                xtest_stream.write
                  [xself]
                    memory > xstream
                    memory > xhandler
                    seq > @
                      seq
                        xstream.write ((((xio).xStringIO)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xstream).xclose)))
                        (((unsupported)) (((xlogging).xbasicConfig)) ((xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlogging).xroot).xhandlers)))) (1))
                        xhandler.write (((unsupported)) ((((xlogging).xroot).xhandlers)) (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xhandler)) (((xlogging).xStreamHandler)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xstream)) ((xstream)))
                xtest_format.write
                  [xself]
                    memory > xformatter
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xbasicConfig)) ("%(asctime)s - %(message)s"))
                        xformatter.write ((((unsupported)) ((((xlogging).xroot).xhandlers)) (0)).xformatter)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformatter).x_style).x_fmt)) ("%(asctime)s - %(message)s"))
                xtest_datefmt.write
                  [xself]
                    memory > xformatter
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xbasicConfig)) ("bar"))
                        xformatter.write ((((unsupported)) ((((xlogging).xroot).xhandlers)) (0)).xformatter)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xformatter).xdatefmt)) ("bar"))
                xtest_style.write
                  [xself]
                    memory > xformatter
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xbasicConfig)) ("$"))
                        xformatter.write ((((unsupported)) ((((xlogging).xroot).xhandlers)) (0)).xformatter)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xformatter).x_style)) (((xlogging).xStringTemplateStyle)))
                xtest_level.write
                  [xself]
                    memory > xold_level
                    seq > @
                      seq
                        xold_level.write (((xlogging).xroot).xlevel)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xlogging).xroot).xsetLevel)) ((xold_level)))
                        (((unsupported)) (((xlogging).xbasicConfig)) (57))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlogging).xroot).xlevel)) (57))
                        (((unsupported)) (((xlogging).xbasicConfig)) (58))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlogging).xroot).xlevel)) (57))
                xtest_incompatible.write
                  [xself]
                    memory > xassertRaises
                    memory > xstream
                    memory > xhandlers
                    seq > @
                      seq
                        xassertRaises.write ((xself).xassertRaises)
                        xhandlers.write (((unsupported)) (((((xlogging).xStreamHandler)) 0)))
                        xstream.write ((xsys).xstderr)
                        (((unsupported)) ((xassertRaises)) ((xValueError)) (((xlogging).xbasicConfig)) ("test.log") ((xstream)))
                        (((unsupported)) ((xassertRaises)) ((xValueError)) (((xlogging).xbasicConfig)) ("test.log") ((xhandlers)))
                        (((unsupported)) ((xassertRaises)) ((xValueError)) (((xlogging).xbasicConfig)) ((xstream)) ((xhandlers)))
                        (((unsupported)) ((xassertRaises)) ((xValueError)) (((xlogging).xbasicConfig)) (((xlogging).xINFO)))
                        (((unsupported)) (((xlogging).xbasicConfig)) ("None: is there a None literal in the EO language?") ("a"))
                xtest_handlers.write
                  [xself]
                    memory > xhandlers
                    memory > xf
                    seq > @
                      seq
                        xhandlers.write (((unsupported)) (((((xlogging).xStreamHandler)) 0)) (((((xlogging).xStreamHandler)) (((xsys).xstdout)))) (((((xlogging).xStreamHandler)) 0)))
                        xf.write ((((xlogging).xFormatter)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((xhandlers)) (2)).xsetFormatter)) ((xf)))
                        (((unsupported)) (((xlogging).xbasicConfig)) ((xhandlers)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xhandlers)) (0))) ((((unsupported)) ((((xlogging).xroot).xhandlers)) (0))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xhandlers)) (1))) ((((unsupported)) ((((xlogging).xroot).xhandlers)) (1))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xhandlers)) (2))) ((((unsupported)) ((((xlogging).xroot).xhandlers)) (2))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((unsupported)) ((xhandlers)) (0)).xformatter)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((unsupported)) ((xhandlers)) (1)).xformatter)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((unsupported)) ((xhandlers)) (2)).xformatter)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((unsupported)) ((xhandlers)) (0)).xformatter)) (((((unsupported)) ((xhandlers)) (1)).xformatter)))
                xtest_force.write
                  [xself]
                    memory > xnew_handlers
                    memory > xold_string_io
                    memory > xnew_string_io
                    memory > xold_handlers
                    seq > @
                      seq
                        xold_string_io.write ((((xio).xStringIO)) 0)
                        xnew_string_io.write ((((xio).xStringIO)) 0)
                        xold_handlers.write (((unsupported)) (((((xlogging).xStreamHandler)) ((xold_string_io)))))
                        xnew_handlers.write (((unsupported)) (((((xlogging).xStreamHandler)) ((xnew_string_io)))))
                        (((unsupported)) (((xlogging).xbasicConfig)) (((xlogging).xWARNING)) ((xold_handlers)))
                        bogusForceDataize.write ((((xlogging).xwarning)) ("warn"))
                        bogusForceDataize.write ((((xlogging).xinfo)) ("info"))
                        bogusForceDataize.write ((((xlogging).xdebug)) ("debug"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlogging).xroot).xhandlers)))) (1))
                        (((unsupported)) (((xlogging).xbasicConfig)) (((xlogging).xINFO)) ((xnew_handlers)) (TRUE))
                        bogusForceDataize.write ((((xlogging).xwarning)) ("warn"))
                        bogusForceDataize.write ((((xlogging).xinfo)) ("info"))
                        bogusForceDataize.write ((((xlogging).xdebug)) ("debug"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlogging).xroot).xhandlers)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xold_string_io).xgetvalue)) 0).xstrip)) 0)) ("WARNING:root:warn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xnew_string_io).xgetvalue)) 0).xstrip)) 0)) ("WARNING:root:warnnINFO:root:info"))
                x_test_log.write
                  [xself xmethod xlevel]
                    memory > xold_basic_config
                    memory > xmy_basic_config
                    memory > xcalled
                    memory > xlog_method
                    seq > @
                      (((unsupported)) 0)
                        xcalled.write (((unsupported)) 0)
                        xold_basic_config.write ((xlogging).xbasicConfig)
                        xmy_basic_config.write
                          []
                            memory > xold_level
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write (((xold_basic_config)) 0)
                                xold_level.write (((xlogging).xroot).xlevel)
                                bogusForceDataize.write (((((xlogging).xroot).xsetLevel)) (100))
                                bogusForceDataize.write ((((xself).xaddCleanup)) ((((xlogging).xroot).xsetLevel)) ((xold_level)))
                                bogusForceDataize.write ((((xcalled).xappend)) ((((unsupported)) ((xa)) ((xkw)))))
                        bogusForceDataize.write ((((xsupport).xpatch)) ((xself)) ((xlogging)) ("basicConfig") ((xmy_basic_config)))
                        xlog_method.write (((xgetattr)) ((xlogging)) ((xmethod)))
                        (((unsupported)) ((xlevel)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((xlog_method)) ((xlevel)) ("test me"))
                          bogusForceDataize.write (((xlog_method)) ("test me"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcalled)) ((((unsupported)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))))))
                xtest_log.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("log") (((xlogging).xWARNING)))
                xtest_debug.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("debug"))
                xtest_info.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("info"))
                xtest_warning.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("warning"))
                xtest_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("error"))
                xtest_critical.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_log)) ("critical"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xcleanup
                    memory > xold_handler_list
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xLoggerAdapterTest)) ((xself))).xsetUp)) 0)
                        xold_handler_list.write (((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xrecording)) ((((xRecordingHandler)) 0)))
                        (((unsupported)) (((xself).xlogger)) (((xlogging).xroot)))
                        bogusForceDataize.write (((((xself).xlogger).xaddHandler)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xlogger).xremoveHandler)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xrecording).xclose)))
                        xcleanup.write
                          []
                            seq > @
                              (((unsupported)) ((((unsupported)) (((xlogging).x_handlerList)) ((((unsupported)) 0)))) ((xold_handler_list)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xcleanup)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xshutdown)))
                        (((unsupported)) (((xself).xadapter)) ((((unsupported)) (((xlogging).xLoggerAdapter)) (((xself).xlogger)) ("None: is there a None literal in the EO language?"))))
                xtest_exception.write
                  [xself]
                    memory > xmsg
                    memory > xexc
                    memory > xrecord
                    seq > @
                      seq
                        xmsg.write "testing exception: %r"
                        xexc.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          seq
                            xexc.write (xe)
                            bogusForceDataize.write (((((xself).xadapter).xexception)) ((xmsg)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) ((((xself).xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xlevelno)) (((xlogging).xERROR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xmsg)) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xargs)) ((((unsupported)) (((xself).xrecording)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xexc_info)) ((((unsupported)) (((xexc).x__class__)) ((xexc)) (((xexc).x__traceback__)))))
                xtest_exception_excinfo.write
                  [xself]
                    memory > xexc
                    memory > xrecord
                    seq > @
                      seq
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          xexc.write (xe)
                        (((unsupported)) ((((xself).xadapter).xexception)) ("exc_info test") ((xexc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) ((((xself).xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xexc_info)) ((((unsupported)) (((xexc).x__class__)) ((xexc)) (((xexc).x__traceback__)))))
                xtest_critical.write
                  [xself]
                    memory > xmsg
                    memory > xrecord
                    seq > @
                      seq
                        xmsg.write "critical test! %r"
                        bogusForceDataize.write (((((xself).xadapter).xcritical)) ((xmsg)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) ((((xself).xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xlevelno)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xmsg)) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xargs)) ((((unsupported)) (((xself).xrecording)))))
                xtest_is_enabled_for.write
                  [xself]
                    memory > xold_disable
                    seq > @
                      seq
                        xold_disable.write (((((xself).xadapter).xlogger).xmanager).xdisable)
                        (((unsupported)) ((((((xself).xadapter).xlogger).xmanager).xdisable)) (33))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) (((((xself).xadapter).xlogger).xmanager)) ("disable") ((xold_disable)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xadapter).xisEnabledFor)) (32))))
                xtest_has_handlers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xadapter).xhasHandlers)) 0)))
                        (((unsupported)) ((xhandler)) ((((xself).xlogger).xhandlers)))
                          bogusForceDataize.write (((((xself).xlogger).xremoveHandler)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xlogger).xhasHandlers)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xadapter).xhasHandlers)) 0)))
                xtest_nested.write
                  [xself]
                    memory > xtemp_manager
                    memory > xrecord
                    memory > xadapter
                    memory > xprefix
                    memory > xmsg
                    memory > xorig_manager
                    memory > xprocess
                    memory > xadapter_adapter
                    seq > @
                      seq
                        (((unsupported)) (((xlogging).xLoggerAdapter)))
                          seq
                            xprefix.write "Adapter"
                            xprocess.write
                              [xself xmsg xkwargs]
                                seq > @
                                  (((unsupported)) ((((unsupported)) ("{self.prefix} {msg}") ((xkwargs)))))
                        xmsg.write "Adapters can be nested, yo."
                        xadapter.write (((unsupported)) ((xAdapter)) (((xself).xlogger)) ("None: is there a None literal in the EO language?"))
                        xadapter_adapter.write (((unsupported)) ((xAdapter)) ((xadapter)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xadapter_adapter).xprefix)) ("AdapterAdapter"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xadapter)))) ((((xrepr)) ((xadapter_adapter)))))
                        bogusForceDataize.write ((((xadapter_adapter).xlog)) (((xlogging).xCRITICAL)) ((xmsg)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) ((((xself).xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xlevelno)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xmsg)) ("Adapter AdapterAdapter {msg}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xargs)) ((((unsupported)) (((xself).xrecording)))))
                        xorig_manager.write ((xadapter_adapter).xmanager)
                        bogusForceDataize.write ((((xself).xassertIs)) (((xadapter).xmanager)) ((xorig_manager)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xlogger).xmanager)) ((xorig_manager)))
                        xtemp_manager.write (((xobject)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xadapter_adapter).xmanager)) ((xtemp_manager)))
                            bogusForceDataize.write ((((xself).xassertIs)) (((xadapter_adapter).xmanager)) ((xtemp_manager)))
                            bogusForceDataize.write ((((xself).xassertIs)) (((xadapter).xmanager)) ((xtemp_manager)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xlogger).xmanager)) ((xtemp_manager)))
                          (((unsupported)) (((xadapter_adapter).xmanager)) ((xorig_manager)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xadapter_adapter).xmanager)) ((xorig_manager)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xadapter).xmanager)) ((xorig_manager)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xlogger).xmanager)) ((xorig_manager)))
            (((unsupported)) ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xLoggerTest)) ((xself))).xsetUp)) 0)
                        (((unsupported)) (((xself).xrecording)) ((((xRecordingHandler)) 0)))
                        (((unsupported)) (((xself).xlogger)) ((((unsupported)) (((xlogging).xLogger)) ("blah"))))
                        bogusForceDataize.write (((((xself).xlogger).xaddHandler)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xlogger).xremoveHandler)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xrecording).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlogging).xshutdown)))
                xtest_set_invalid_level.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xlogger).xsetLevel)) ((((xobject)) 0)))
                xtest_exception.write
                  [xself]
                    memory > xmsg
                    memory > xexc
                    memory > xrecord
                    seq > @
                      seq
                        xmsg.write "testing exception: %r"
                        xexc.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xZeroDivisionError)))
                          unsupported
                          seq
                            xexc.write (xe)
                            bogusForceDataize.write (((((xself).xlogger).xexception)) ((xmsg)) (((xself).xrecording)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xself).xrecording).xrecords)))) (1))
                        xrecord.write (((unsupported)) ((((xself).xrecording).xrecords)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xlevelno)) (((xlogging).xERROR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xmsg)) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xargs)) ((((unsupported)) (((xself).xrecording)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrecord).xexc_info)) ((((unsupported)) (((xexc).x__class__)) ((xexc)) (((xexc).x__traceback__)))))
                xtest_log_invalid_level_with_raise.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xswap_attr)) ((xlogging)) ("raiseExceptions") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xlogger).xlog)) ("10") ("test message"))
                xtest_log_invalid_level_no_raise.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xswap_attr)) ((xlogging)) ("raiseExceptions") (FALSE))))
                        bogusForceDataize.write (((((xself).xlogger).xlog)) ("10") ("test message"))
                xtest_find_caller_with_stack_info.write
                  [xself]
                    memory > xcalled
                    seq > @
                      seq
                        xcalled.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xpatch)) ((xself)) (((xlogging).xtraceback)) ("print_stack") ((((unsupported)) (((((xcalled).xappend)) (((((xfile).xgetvalue)) 0)))))))
                        (((unsupported)) ((((xself).xlogger).xfindCaller)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcalled)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("Stack (most recent call last):n") ((((unsupported)) ((xcalled)) (0))))
                xtest_find_caller_with_stacklevel.write
                  [xself]
                    memory > xouter
                    memory > xinner
                    memory > xlineno
                    memory > xrecords
                    memory > xthe_level
                    memory > xinnermost
                    seq > @
                      seq
                        xthe_level.write 1
                        xinnermost.write
                          []
                            seq > @
                              (((unsupported)) ((((xself).xlogger).xwarning)) ("test") ((xthe_level)))
                        xinner.write
                          []
                            seq > @
                              bogusForceDataize.write (((xinnermost)) 0)
                        xouter.write
                          []
                            seq > @
                              bogusForceDataize.write (((xinner)) 0)
                        xrecords.write (((xself).xrecording).xrecords)
                        bogusForceDataize.write (((xouter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xrecords)) ((1.neg))).xfuncName)) ("innermost"))
                        xlineno.write ((((unsupported)) ((xrecords)) ((1.neg))).xlineno)
                        (((unsupported)) ((xthe_level)) (1))
                        bogusForceDataize.write (((xouter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xrecords)) ((1.neg))).xfuncName)) ("inner"))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((unsupported)) ((xrecords)) ((1.neg))).xlineno)) ((xlineno)))
                        xlineno.write ((((unsupported)) ((xrecords)) ((1.neg))).xlineno)
                        (((unsupported)) ((xthe_level)) (1))
                        bogusForceDataize.write (((xouter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xrecords)) ((1.neg))).xfuncName)) ("outer"))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((unsupported)) ((xrecords)) ((1.neg))).xlineno)) ((xlineno)))
                        xlineno.write ((((unsupported)) ((xrecords)) ((1.neg))).xlineno)
                        (((unsupported)) ((xthe_level)) (1))
                        bogusForceDataize.write (((xouter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xrecords)) ((1.neg))).xfuncName)) ("test_find_caller_with_stacklevel"))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((unsupported)) ((xrecords)) ((1.neg))).xlineno)) ((xlineno)))
                xtest_make_record_with_extra_overwrite.write
                  [xself]
                    memory > xexc_info
                    memory > xsinfo
                    memory > xfunc
                    memory > xextra
                    memory > xlevel
                    memory > xrv
                    memory > xargs
                    memory > xname
                    memory > xmsg
                    memory > xfn
                    memory > xlno
                    seq > @
                      seq
                        xname.write "my record"
                        xlevel.write 13
                        (((unsupported)) ((xfn)) ((xlno)) ((xmsg)) ((xargs)) ((xexc_info)) ((xfunc)) ((xsinfo)) ("None: is there a None literal in the EO language?"))
                        xrv.write ((((xlogging).x_logRecordFactory)) ((xname)) ((xlevel)) ((xfn)) ((xlno)) ((xmsg)) ((xargs)) ((xexc_info)) ((xfunc)) ((xsinfo)))
                        (((unsupported)) ((xkey)) (((((unsupported)) ("message") ("asctime")).add (((xtuple)) ((((((xrv).x__dict__).xkeys)) 0))))))
                          seq
                            xextra.write (((unsupported)) ((xkey)) ("some value"))
                            (((unsupported)) (((xself).xassertRaises)) ((xKeyError)) ((((xself).xlogger).xmakeRecord)) ((xname)) ((xlevel)) ((xfn)) ((xlno)) ((xmsg)) ((xargs)) ((xexc_info)) ((xextra)) ((xsinfo)))
                xtest_make_record_with_extra_no_overwrite.write
                  [xself]
                    memory > xexc_info
                    memory > xsinfo
                    memory > xfunc
                    memory > xextra
                    memory > xlevel
                    memory > xargs
                    memory > xname
                    memory > xresult
                    memory > xmsg
                    memory > xfn
                    memory > xlno
                    seq > @
                      seq
                        xname.write "my record"
                        xlevel.write 13
                        (((unsupported)) ((xfn)) ((xlno)) ((xmsg)) ((xargs)) ((xexc_info)) ((xfunc)) ((xsinfo)) ("None: is there a None literal in the EO language?"))
                        xextra.write (((unsupported)) ("valid_key") ("some value"))
                        xresult.write (((unsupported)) ((((xself).xlogger).xmakeRecord)) ((xname)) ((xlevel)) ((xfn)) ((xlno)) ((xmsg)) ((xargs)) ((xexc_info)) ((xextra)) ((xsinfo)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("valid_key") (((xresult).x__dict__)))
                xtest_has_handlers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xlogger).xhasHandlers)) 0)))
                        (((unsupported)) ((xhandler)) ((((xself).xlogger).xhandlers)))
                          bogusForceDataize.write (((((xself).xlogger).xremoveHandler)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xlogger).xhasHandlers)) 0)))
                xtest_has_handlers_no_propagate.write
                  [xself]
                    memory > xchild_logger
                    seq > @
                      seq
                        xchild_logger.write ((((xlogging).xgetLogger)) ("blah.child"))
                        (((unsupported)) (((xchild_logger).xpropagate)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xchild_logger).xhasHandlers)) 0)))
                xtest_is_enabled_for.write
                  [xself]
                    memory > xold_disable
                    seq > @
                      seq
                        xold_disable.write ((((xself).xlogger).xmanager).xdisable)
                        (((unsupported)) (((((xself).xlogger).xmanager).xdisable)) (23))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) ((((xself).xlogger).xmanager)) ("disable") ((xold_disable)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xlogger).xisEnabledFor)) (22))))
                xtest_is_enabled_for_disabled_logger.write
                  [xself]
                    memory > xold_disabled
                    memory > xold_disable
                    seq > @
                      seq
                        xold_disabled.write (((xself).xlogger).xdisabled)
                        xold_disable.write ((((xself).xlogger).xmanager).xdisable)
                        (((unsupported)) ((((xself).xlogger).xdisabled)) (TRUE))
                        (((unsupported)) (((((xself).xlogger).xmanager).xdisable)) (21))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) (((xself).xlogger)) ("disabled") ((xold_disabled)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) ((((xself).xlogger).xmanager)) ("disable") ((xold_disable)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xlogger).xisEnabledFor)) (22))))
                xtest_root_logger_aliases.write
                  [xself]
                    memory > xroot
                    seq > @
                      seq
                        xroot.write ((((xlogging).xgetLogger)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) (((xlogging).xroot)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) (((((xlogging).xgetLogger)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) (((((xlogging).xgetLogger)) (""))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) ((((((xlogging).xgetLogger)) ("foo")).xroot)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) ((((((xlogging).xgetLogger)) ("foo.bar")).xroot)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xroot)) ((((((xlogging).xgetLogger)) ("foo")).xparent)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xroot)) (((((xlogging).xgetLogger)) ("0"))))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xroot)) ((((((xlogging).xgetLogger)) ("foo.bar")).xparent)))
                xtest_invalid_names.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlogging).xgetLogger)) ((xany)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlogging).xgetLogger)) ("foo"))
                xtest_pickling.write
                  [xself]
                    memory > xs
                    memory > xlogger
                    memory > xunpickled
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)) ((xname)) ((((unsupported)) ("") ("root") ("foo") ("foo.bar") ("baz.bar"))))
                          seq
                            xlogger.write ((((xlogging).xgetLogger)) ((xname)))
                            xs.write ((((xpickle).xdumps)) ((xlogger)) ((xproto)))
                            xunpickled.write ((((xpickle).xloads)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((xunpickled)) ((xlogger)))
                xtest_caching.write
                  [xself]
                    memory > xroot
                    memory > xlogger2
                    memory > xlogger1
                    seq > @
                      seq
                        xroot.write ((xself).xroot_logger)
                        xlogger1.write ((((xlogging).xgetLogger)) ("abc"))
                        xlogger2.write ((((xlogging).xgetLogger)) ("abc.def"))
                        bogusForceDataize.write ((((xroot).xsetLevel)) (((xlogging).xERROR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogger2).xgetEffectiveLevel)) 0)) (((xlogging).xERROR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger2).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xlogger2).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger2).xisEnabledFor)) (((xlogging).xDEBUG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger2).x_cache)) ((((unsupported)) (((xlogging).xERROR)) (TRUE) (((xlogging).xDEBUG)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xroot).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xlogger2).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xroot).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xroot).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xroot).x_cache)) ((((unsupported)) (((xlogging).xERROR)) (TRUE))))
                        bogusForceDataize.write ((((xlogger1).xsetLevel)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogger2).xgetEffectiveLevel)) 0)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger2).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger2).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xlogger2).xsetLevel)) (((xlogging).xNOTSET)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogger2).xgetEffectiveLevel)) 0)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger2).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger1).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xroot).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger2).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xlogger2).xisEnabledFor)) (((xlogging).xCRITICAL)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger1).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xlogger1).xisEnabledFor)) (((xlogging).xCRITICAL)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xroot).xisEnabledFor)) (((xlogging).xERROR)))))
                        bogusForceDataize.write ((((xlogging).xdisable)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlogger2).xgetEffectiveLevel)) 0)) (((xlogging).xCRITICAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger2).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xlogger1).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xroot).x_cache)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger1).xisEnabledFor)) (((xlogging).xCRITICAL)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xlogger2).xisEnabledFor)) (((xlogging).xCRITICAL)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xroot).xisEnabledFor)) (((xlogging).xCRITICAL)))))
            (((unsupported)) ((xBaseTest)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTest).xsetUp)) ((xself)))
                        (((unsupported)) ((((unsupported)) ((xfd)) (((xself).xfn)))) (((((xtempfile).xmkstemp)) (".log") ("test_logging-2-"))))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        (((unsupported)) (((xself).xrmfiles)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xfn)) (((xself).xrmfiles)))
                          bogusForceDataize.write ((((xos).xunlink)) ((xfn)))
                        (((((xos).xpath).xexists)) (((xself).xfn))).if
                          bogusForceDataize.write ((((xos).xunlink)) (((xself).xfn)))
                        bogusForceDataize.write ((((xBaseTest).xtearDown)) ((xself)))
                xassertLogFile.write
                  [xself xfilename]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xfilename)))) (("Log file %r does not exist".mod (xfilename))))
                        bogusForceDataize.write (((((xself).xrmfiles).xappend)) ((xfilename)))
            (((unsupported)) ((xBaseFileTest)))
              xtest_delay.write
                [xself]
                  memory > xfh
                  seq > @
                    seq
                      bogusForceDataize.write ((((xos).xunlink)) (((xself).xfn)))
                      xfh.write (((unsupported)) (((xlogging).xFileHandler)) (((xself).xfn)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((xfh).xstream)))
                      bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xfn)))))
                      bogusForceDataize.write ((((xfh).xhandle)) (((((xlogging).xmakeLogRecord)) ((((unsupported)) 0)))))
                      bogusForceDataize.write ((((xself).xassertIsNotNone)) (((xfh).xstream)))
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xfn)))))
                      bogusForceDataize.write ((((xfh).xclose)) 0)
            (((unsupported)) ((xBaseFileTest)))
              seq
                xnext_rec.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xlogging).xLogRecord)) ("n") (((xlogging).xDEBUG)) ("p") (1) (((((xself).xnext_message)) 0)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_should_not_rollover.write
                  [xself]
                    memory > xrh
                    seq > @
                      seq
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xRotatingFileHandler)) (((xself).xfn)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xrh).xshouldRollover)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
                xtest_should_rollover.write
                  [xself]
                    memory > xrh
                    seq > @
                      seq
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xRotatingFileHandler)) (((xself).xfn)) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xrh).xshouldRollover)) (((((xself).xnext_rec)) 0)))))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
                xtest_file_created.write
                  [xself]
                    memory > xrh
                    seq > @
                      seq
                        xrh.write (((((xlogging).xhandlers).xRotatingFileHandler)) (((xself).xfn)))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) (((xself).xfn)))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
                xtest_rollover_filenames.write
                  [xself]
                    memory > xnamer
                    memory > xrh
                    seq > @
                      seq
                        xnamer.write
                          [xname]
                            seq > @
                              (((unsupported)) (((xname).add ".test")))
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xRotatingFileHandler)) (((xself).xfn)) (2) (1))
                        (((unsupported)) (((xrh).xnamer)) ((xnamer)))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) (((xself).xfn)))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) ((((xnamer)) ((((xself).xfn).add ".1")))))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) ((((xnamer)) ((((xself).xfn).add ".2")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((((xnamer)) ((((xself).xfn).add ".3")))))))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
                xtest_rotator.write
                  [xself]
                    memory > xcompressed
                    memory > xnewline
                    memory > xfn
                    memory > xrotator
                    memory > xm1
                    memory > xrh
                    memory > xm2
                    memory > xnamer
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xnamer.write
                          [xname]
                            seq > @
                              (((unsupported)) (((xname).add ".gz")))
                        xrotator.write
                          [xsource xdest]
                            memory > xcompressed
                            memory > xdata
                            seq > @
                              seq
                                (((unsupported)) ((((xopen)) ((xsource)) ("rb"))) ((xsf)))
                                  seq
                                    xdata.write ((((xsf).xread)) 0)
                                    xcompressed.write ((((xzlib).xcompress)) ((xdata)) (9))
                                    (((unsupported)) ((((xopen)) ((xdest)) ("wb"))) ((xdf)))
                                      bogusForceDataize.write ((((xdf).xwrite)) ((xcompressed)))
                                bogusForceDataize.write ((((xos).xremove)) ((xsource)))
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xRotatingFileHandler)) (((xself).xfn)) (2) (1))
                        (((unsupported)) (((xrh).xrotator)) ((xrotator)))
                        (((unsupported)) (((xrh).xnamer)) ((xnamer)))
                        xm1.write ((((xself).xnext_rec)) 0)
                        bogusForceDataize.write ((((xrh).xemit)) ((xm1)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) (((xself).xfn)))
                        xm2.write ((((xself).xnext_rec)) 0)
                        bogusForceDataize.write ((((xrh).xemit)) ((xm2)))
                        xfn.write (((xnamer)) ((((xself).xfn).add ".1")))
                        bogusForceDataize.write ((((xself).xassertLogFile)) ((xfn)))
                        xnewline.write ((xos).xlinesep)
                        (((unsupported)) ((((xopen)) ((xfn)) ("rb"))) ((xf)))
                          seq
                            xcompressed.write ((((xf).xread)) 0)
                            xdata.write ((((xzlib).xdecompress)) ((xcompressed)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) ("ascii"))) ((((xm1).xmsg).add (xnewline))))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        xfn.write (((xnamer)) ((((xself).xfn).add ".2")))
                        bogusForceDataize.write ((((xself).xassertLogFile)) ((xfn)))
                        (((unsupported)) ((((xopen)) ((xfn)) ("rb"))) ((xf)))
                          seq
                            xcompressed.write ((((xf).xread)) 0)
                            xdata.write ((((xzlib).xdecompress)) ((xcompressed)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) ("ascii"))) ((((xm1).xmsg).add (xnewline))))
                        bogusForceDataize.write ((((xrh).xemit)) (((((xself).xnext_rec)) 0)))
                        xfn.write (((xnamer)) ((((xself).xfn).add ".2")))
                        (((unsupported)) ((((xopen)) ((xfn)) ("rb"))) ((xf)))
                          seq
                            xcompressed.write ((((xf).xread)) 0)
                            xdata.write ((((xzlib).xdecompress)) ((xcompressed)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) ("ascii"))) ((((xm2).xmsg).add (xnewline))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((((xnamer)) ((((xself).xfn).add ".3")))))))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
            (((unsupported)) ((xBaseFileTest)))
              seq
                xtest_rollover.write
                  [xself]
                    memory > xpath
                    memory > xr2
                    memory > xprev
                    memory > xfiles
                    memory > xnow
                    memory > xGO_BACK
                    memory > xfh
                    memory > xr1
                    memory > xfmt
                    memory > xmsg
                    memory > xfound
                    memory > xfn
                    seq > @
                      seq
                        xfh.write (((unsupported)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ("S") (1))
                        xfmt.write ((((xlogging).xFormatter)) ("%(asctime)s %(message)s"))
                        bogusForceDataize.write ((((xfh).xsetFormatter)) ((xfmt)))
                        xr1.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("testing - initial"))))
                        bogusForceDataize.write ((((xfh).xemit)) ((xr1)))
                        bogusForceDataize.write ((((xself).xassertLogFile)) (((xself).xfn)))
                        bogusForceDataize.write ((((xtime).xsleep)) (1.1))
                        xr2.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("testing - after delay"))))
                        bogusForceDataize.write ((((xfh).xemit)) ((xr2)))
                        bogusForceDataize.write ((((xfh).xclose)) 0)
                        xfound.write FALSE
                        xnow.write (((((xdatetime).xdatetime).xnow)) 0)
                        xGO_BACK.write (5.mul 60)
                        (((unsupported)) ((xsecs)) ((((xrange)) ((xGO_BACK)))))
                          seq
                            xprev.write ((xnow).sub (((unsupported)) (((xdatetime).xtimedelta)) ((xsecs))))
                            xfn.write (((xself).xfn).add ((((xprev).xstrftime)) (".%Y-%m-%d_%H-%M-%S")))
                            xfound.write (((((xos).xpath).xexists)) ((xfn)))
                            (xfound).if
                              seq
                                bogusForceDataize.write (((((xself).xrmfiles).xappend)) ((xfn)))
                                (((unsupported)) 0)
                        xmsg.write ("No rotated files found, went back %d seconds".mod (xGO_BACK))
                        ((xfound).not).if
                          seq
                            (((unsupported)) ((((unsupported)) ((xdn)) ((xfn)))) ((((((xos).xpath).xsplit)) (((xself).xfn)))))
                            xfiles.write (((unsupported)) ((xf)) ((xf)) (((((xos).xlistdir)) ((xdn)))) (((((xf).xstartswith)) ((xfn)))))
                            (((unsupported)) ((xprint)) (("Test time: %s".mod ((((xnow).xstrftime)) ("%Y-%m-%d %H-%M-%S")))) (((xsys).xstderr)))
                            (((unsupported)) ((xprint)) (("The only matching files are: %s".mod (xfiles))) (((xsys).xstderr)))
                            (((unsupported)) ((xf)) ((xfiles)))
                              seq
                                bogusForceDataize.write (((xprint)) (("Contents of %s:".mod (xf))))
                                xpath.write (((((xos).xpath).xjoin)) ((xdn)) ((xf)))
                                (((unsupported)) ((((xopen)) ((xpath)) ("r"))) ((xtf)))
                                  bogusForceDataize.write (((xprint)) (((((xtf).xread)) 0)))
                        (((unsupported)) (((xself).xassertTrue)) ((xfound)) ((xmsg)))
                xtest_invalid.write
                  [xself]
                    memory > xassertRaises
                    seq > @
                      seq
                        xassertRaises.write ((xself).xassertRaises)
                        (((unsupported)) ((xassertRaises)) ((xValueError)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ("X") (TRUE))
                        (((unsupported)) ((xassertRaises)) ((xValueError)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ("W") (TRUE))
                        (((unsupported)) ((xassertRaises)) ((xValueError)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ("W7") (TRUE))
                xtest_compute_rollover_daily_attime.write
                  [xself]
                    memory > xactual
                    memory > xatTime
                    memory > xcurrentTime
                    memory > xrh
                    seq > @
                      seq
                        xcurrentTime.write 0
                        xatTime.write ((((xdatetime).xtime)) (12) (0) (0))
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ("MIDNIGHT") (1) (0) (TRUE) ((xatTime)))
                        (((unsupported)) 0)
                          seq
                            xactual.write ((((xrh).xcomputeRollover)) ((xcurrentTime)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) (((xcurrentTime).add ((12.mul 60).mul 60))))
                            xactual.write ((((xrh).xcomputeRollover)) (((xcurrentTime).add ((13.mul 60).mul 60))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) (((xcurrentTime).add ((36.mul 60).mul 60))))
                          bogusForceDataize.write ((((xrh).xclose)) 0)
                xtest_compute_rollover_weekly_attime.write
                  [xself]
                    memory > xtoday
                    memory > xexpected
                    memory > xwday
                    memory > xactual
                    memory > xatTime
                    memory > xrh
                    memory > xcurrentTime
                    seq > @
                      seq
                        xcurrentTime.write (((xint)) (((((xtime).xtime)) 0)))
                        xtoday.write ((xcurrentTime).sub ((xcurrentTime).mod 86400))
                        xatTime.write ((((xdatetime).xtime)) (12) (0) (0))
                        xwday.write (((((xtime).xgmtime)) ((xtoday))).xtm_wday)
                        (((unsupported)) ((xday)) ((((xrange)) (7))))
                          seq
                            xrh.write (((unsupported)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) (("W%d".mod (xday))) (1) (0) (TRUE) ((xatTime)))
                            (((unsupported)) 0)
                              seq
                                ((xwday).greater (xday)).if
                                  xexpected.write ((7.sub (xwday)).add (xday))
                                  xexpected.write ((xday).sub (xwday))
                                (((unsupported)) ((xexpected)) (((24.mul 60).mul 60)))
                                (((unsupported)) ((xexpected)) (((12.mul 60).mul 60)))
                                (((unsupported)) ((xexpected)) ((xtoday)))
                                xactual.write ((((xrh).xcomputeRollover)) ((xtoday)))
                                ((xactual).neq (xexpected)).if
                                  seq
                                    bogusForceDataize.write (((xprint)) (("failed in timezone: %d".mod ((xtime).xtimezone))))
                                    bogusForceDataize.write (((xprint)) (("local vars: %s".mod (((xlocals)) 0))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                                ((xday).eq (xwday)).if
                                  (((unsupported)) ((xexpected)) ((((7.mul 24).mul 60).mul 60)))
                                xactual.write ((((xrh).xcomputeRollover)) (((xtoday).add ((13.mul 60).mul 60))))
                                ((xactual).neq (xexpected)).if
                                  seq
                                    bogusForceDataize.write (((xprint)) (("failed in timezone: %d".mod ((xtime).xtimezone))))
                                    bogusForceDataize.write (((xprint)) (("local vars: %s".mod (((xlocals)) 0))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                              bogusForceDataize.write ((((xrh).xclose)) 0)
            xsecs.write
              []
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) (((((xdatetime).xtimedelta)) ((((unsupported)) ((xkw)))))) ((((unsupported)) (((xdatetime).xtimedelta)) (1))))))
            (((unsupported)) ((((unsupported)) ((xwhen)) ((xexp)))) ((((unsupported)) ((((unsupported)) ("S") (1))) ((((unsupported)) ("M") (60))) ((((unsupported)) ("H") ((60.mul 60)))) ((((unsupported)) ("D") (((60.mul 60).mul 24)))) ((((unsupported)) ("MIDNIGHT") (((60.mul 60).mul 24)))) ((((unsupported)) ("W0") ((((unsupported)) ((xsecs)) (4) (24))))))))
              seq
                xtest_compute_rollover.write
                  [xself xwhen xexp]
                    memory > xcurrentMinute
                    memory > xt
                    memory > xcurrentHour
                    memory > xcurrentSecond
                    memory > xrh
                    memory > xcurrentTime
                    memory > xresult
                    memory > xr
                    memory > xactual
                    seq > @
                      (((unsupported)) 0)
                        xrh.write (((unsupported)) ((((xlogging).xhandlers).xTimedRotatingFileHandler)) (((xself).xfn)) ((xwhen)) (1) (0) (TRUE))
                        xcurrentTime.write 0.0
                        xactual.write ((((xrh).xcomputeRollover)) ((xcurrentTime)))
                        ((xexp).neq (xactual)).if
                          ((xwhen).eq "MIDNIGHT").if
                            (((unsupported)) ((xException)))
                              seq
                                ((xrh).xutc).if
                                  xt.write ((((xtime).xgmtime)) ((xcurrentTime)))
                                  xt.write ((((xtime).xlocaltime)) ((xcurrentTime)))
                                xcurrentHour.write (((unsupported)) ((xt)) (3))
                                xcurrentMinute.write (((unsupported)) ((xt)) (4))
                                xcurrentSecond.write (((unsupported)) ((xt)) (5))
                                xr.write ((((xlogging).xhandlers).x_MIDNIGHT).sub (((((xcurrentHour).mul 60).add (xcurrentMinute)).mul 60).add (xcurrentSecond)))
                                xresult.write ((xcurrentTime).add (xr))
                                (((unsupported)) ((xprint)) (("t: %s (%s)".mod (((unsupported)) ((xt)) (((xrh).xutc))))) (((xsys).xstderr)))
                                (((unsupported)) ((xprint)) (("currentHour: %s".mod (xcurrentHour))) (((xsys).xstderr)))
                                (((unsupported)) ((xprint)) (("currentMinute: %s".mod (xcurrentMinute))) (((xsys).xstderr)))
                                (((unsupported)) ((xprint)) (("currentSecond: %s".mod (xcurrentSecond))) (((xsys).xstderr)))
                                (((unsupported)) ((xprint)) (("r: %s".mod (xr))) (((xsys).xstderr)))
                                (((unsupported)) ((xprint)) (("result: %s".mod (xresult))) (((xsys).xstderr)))
                              (((unsupported)) ((xprint)) (("exception in diagnostic code: %s".mod (((unsupported)) (((((xsys).xexc_info)) 0)) (1)))) (((xsys).xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexp)) ((xactual)))
                        bogusForceDataize.write ((((xrh).xclose)) 0)
                bogusForceDataize.write (((xsetattr)) ((xTimedRotatingFileHandlerTest)) (("test_compute_rollover_%s".mod (xwhen))) ((xtest_compute_rollover)))
            (((unsupported)) ((xBaseTest)) (((((xunittest).xskipUnless)) ((xwin32evtlog)) ("win32evtlog/win32evtlogutil/pywintypes required for this test."))))
              xtest_basic.write
                [xself]
                  memory > xflags
                  memory > xelh
                  memory > xGO_BACK
                  memory > xh
                  memory > xnum_recs
                  memory > xr
                  memory > xevents
                  memory > xlogtype
                  memory > xmsg
                  memory > xfound
                  seq > @
                    seq
                      xlogtype.write "Application"
                      xelh.write ((((xwin32evtlog).xOpenEventLog)) ("None: is there a None literal in the EO language?") ((xlogtype)))
                      xnum_recs.write ((((xwin32evtlog).xGetNumberOfEventLogRecords)) ((xelh)))
                      (((unsupported)) (((xpywintypes).xerror)))
                        xh.write (((((xlogging).xhandlers).xNTEventLogHandler)) ("test_logging"))
                        seq
                          (((xe).xwinerror).eq 5).if
                            (((unsupported)) (((((xunittest).xSkipTest)) ("Insufficient privileges to run test"))))
                          (((unsupported)) 0)
                      xr.write ((((xlogging).xmakeLogRecord)) ((((unsupported)) ("msg") ("Test Log Message"))))
                      bogusForceDataize.write ((((xh).xhandle)) ((xr)))
                      bogusForceDataize.write ((((xh).xclose)) 0)
                      bogusForceDataize.write ((((xself).xassertLess)) ((xnum_recs)) (((((xwin32evtlog).xGetNumberOfEventLogRecords)) ((xelh)))))
                      xflags.write (((xwin32evtlog).xEVENTLOG_BACKWARDS_READ).or ((xwin32evtlog).xEVENTLOG_SEQUENTIAL_READ))
                      xfound.write FALSE
                      xGO_BACK.write 100
                      xevents.write ((((xwin32evtlog).xReadEventLog)) ((xelh)) ((xflags)) ((xGO_BACK)))
                      (((unsupported)) ((xe)) ((xevents)))
                        seq
                          (((xe).xSourceName).neq "test_logging").if
                            (((unsupported)) 0)
                          xmsg.write ((((xwin32evtlogutil).xSafeFormatMessage)) ((xe)) ((xlogtype)))
                          ((xmsg).neq "Test Log Messagern").if
                            (((unsupported)) 0)
                          xfound.write TRUE
                          (((unsupported)) 0)
                      xmsg.write ("Record not found in event log, went back %d records".mod (xGO_BACK))
                      (((unsupported)) (((xself).xassertTrue)) ((xfound)) ((xmsg)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)) ("logThreads") ("logMultiprocessing") ("logProcesses") ("currentframe") ("PercentStyle") ("StrFormatStyle") ("StringTemplateStyle") ("Filterer") ("PlaceHolder") ("Manager") ("RootLogger") ("root") ("threading"))
                      (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xlogging)) ((xblacklist)))
            xtest_main.write
              []
                memory > xtests
                seq > @
                  (((unsupported)) 0)
                    xtests.write (((unsupported)) ((xBuiltinLevelsTest)) ((xBasicFilterTest)) ((xCustomLevelsAndFiltersTest)) ((xHandlerTest)) ((xMemoryHandlerTest)) ((xConfigFileTest)) ((xSocketHandlerTest)) ((xDatagramHandlerTest)) ((xMemoryTest)) ((xEncodingTest)) ((xWarningsTest)) ((xConfigDictTest)) ((xManagerTest)) ((xFormatterTest)) ((xBufferingFormatterTest)) ((xStreamHandlerTest)) ((xLogRecordFactoryTest)) ((xChildLoggerTest)) ((xQueueHandlerTest)) ((xShutdownTest)) ((xModuleLevelMiscTest)) ((xBasicConfigTest)) ((xLoggerAdapterTest)) ((xLoggerTest)) ((xSMTPHandlerTest)) ((xFileHandlerTest)) ((xRotatingFileHandlerTest)) ((xLastResortTest)) ((xLogRecordTest)) ((xExceptionTest)) ((xSysLogHandlerTest)) ((xIPv6SysLogHandlerTest)) ((xHTTPHandlerTest)) ((xNTEventLogHandlerTest)) ((xTimedRotatingFileHandlerTest)) ((xUnixSocketHandlerTest)) ((xUnixDatagramHandlerTest)) ((xUnixSysLogHandlerTest)) ((xMiscTestCase)))
                    (((xhasattr)) (((xlogging).xhandlers)) ("QueueListener")).if
                      bogusForceDataize.write ((((xtests).xappend)) ((xQueueListenerTest)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtests)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)