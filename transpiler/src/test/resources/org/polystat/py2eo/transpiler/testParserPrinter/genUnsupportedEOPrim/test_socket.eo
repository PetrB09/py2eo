memory > xcm
memory > xBasicUDPTest
memory > xk
memory > xloopback
memory > xRecvmsgUDPTest
memory > xthreading
memory > xarray
memory > xseg1
memory > xplatform
memory > xBasicTCPTest2
memory > xservice
memory > xmin
memory > xImportError
memory > xSocketCANTest
memory > xflags
memory > xAttributeError
memory > xfd
memory > xc
memory > xmsg_flags
memory > xdata
memory > xpickle
memory > xRecvmsgIntoUDP6Test
memory > xBasicQIPCRTRTest
memory > xnbytes
memory > xSocketUDPTest
memory > xTCPCloserTest
memory > xUDPTestBase
memory > xlist
memory > xhname
memory > xRecvmsgIntoRFC3542AncillaryUDP6Test
memory > xmode
memory > xfd1
memory > xSocketPairTest
memory > xindex
memory > xenumerate
memory > xThreadedCANSocketTest
memory > xNonblockConstantTest
memory > xLineBufferedFileObjectClassTestCase
memory > xThreadedVSOCKSocketStreamTest
memory > xSendrecvmsgDgramFlagsBase
memory > xNetworkConnectionTest
memory > xResourceWarning
memory > xSCTPStreamBase
memory > xSendrecvmsgBase
memory > xValueError
memory > xo
memory > xsignal
memory > xGeneralModuleTests
memory > xUDPTimeoutTest
memory > xsocktype
memory > xerrno
memory > xproxy
memory > xNetworkConnectionNoServer
memory > xio
memory > xconn
memory > xSendmsgTests
memory > xSendmsgStreamTests
memory > xSendmsgUDPTest
memory > xstr
memory > xNetworkConnectionBehaviourTest
memory > xUnicodeReadFileObjectClassTestCase
memory > xseg2
memory > xinfo
memory > xSendrecvmsgServerTimeoutBase
memory > xfile
memory > xRecvmsgIntoTests
memory > xRFC3542AncillaryTest
memory > xTestUnixDomain
memory > xSCMRightsTest
memory > xFileNotFoundError
memory > xThreadedSocketTestMixin
memory > xcmsg_type
memory > xt
memory > xinet_ntop
memory > xRDSTest
memory > xsocket
memory > xfunc
memory > xFileObjectClassTestCase
memory > xAF_INET6
memory > xBasicSocketPairTest
memory > xInterruptedTimeoutBase
memory > xSocketRDSTest
memory > xSocketTCPTest
memory > xLinuxKernelCryptoAPI
memory > xrange
memory > xsock
memory > xcf
memory > xsize
memory > xmath
memory > xBasicVSOCKTest
memory > xUnicodeReadWriteFileObjectClassTestCase
memory > xaliases
memory > xZeroDivisionError
memory > xRecvmsgGenericTests
memory > xTestSocketSharing
memory > x_testcapi
memory > xInterruptedSendTimeoutTest
memory > xSocketConnectedTest
memory > xCmsgMacroTests
memory > xbacklog
memory > xipaddrs
memory > xNotImplementedError
memory > xRecvmsgGenericStreamTests
memory > xSendfileUsingSendfileTest
memory > x_
memory > xRecvmsgIntoUDPTest
memory > xselect
memory > xbytearray
memory > xmsg
memory > xUnixSocketTestBase
memory > xancdata
memory > xhas_ipv6
memory > xqueue
memory > xTestMSWindowsTCPFlags
memory > xtempfile
memory > xRecvmsgIntoUnixStreamTest
memory > xmax
memory > xThreadedUDPSocketTest
memory > xSocketTestBase
memory > xBasicRDSTest
memory > xerr
memory > xTestLinuxAbstractNamespace
memory > xUDP6TestBase
memory > xattributes
memory > xrandom
memory > xs1
memory > xSendmsgConnectionlessTests
memory > xopen
memory > xpath
memory > xifindex
memory > xkind
memory > xAF_INET
memory > xBasicCANTest
memory > xSmallBufferedFileObjectClassTestCase
memory > xBufferIOTest
memory > xtype
memory > xRecvmsgUDP6Test
memory > xcsize
memory > xrecvaddr
memory > xTCPTimeoutTest
memory > xafile
memory > xSendrecvmsgSCTPStreamTestBase
memory > xTIPCTest
memory > xstring
memory > xfamily
memory > xrepr
memory > xint
memory > xcan_mask
memory > xSendrecvmsgUDP6TestBase
memory > xf
memory > xThreadSafeCleanupTestCase
memory > xSendrecvmsgSCTPFlagsBase
memory > xw
memory > xTestExceptions
memory > xtest_interface
memory > xException
memory > xr
memory > xhasattr
memory > xtime
memory > xBasicTCPTest
memory > xsockaddr
memory > xOverflowError
memory > xNetworkConnectionAttributesTest
memory > xx
memory > xi
memory > xSendmsgSCTPStreamTest
memory > xstruct
memory > xsuper
memory > xfd0
memory > xs
memory > xsupport
memory > xsys
memory > xbool
memory > xAlarm
memory > xcmsg_level
memory > xbytes
memory > xtuple
memory > xBaseException
memory > xTCPTestBase
memory > xsrv
memory > xissubclass
memory > xNonBlockingTCPTests
memory > xContextManagersTest
memory > xDeprecationWarning
memory > xInheritanceTest
memory > xs2
memory > xSendmsgTCPTest
memory > xcmsg_data
memory > xRecvmsgSCMRightsStreamTest
memory > xOSError
memory > xFile
memory > xThreadableTest
memory > xdir
memory > xtraceback
memory > xargs
memory > xRecvmsgIntoSCMRightsStreamTest
memory > xitertools
memory > xobj
memory > xos
memory > xThreadedTCPSocketTest
memory > xRecvmsgTests
memory > xRecvmsgIntoSCTPStreamTest
memory > xSendrecvmsgUDPTestBase
memory > xitem
memory > xSendmsgUDP6Test
memory > xgetattr
memory > xprotocol
memory > xPermissionError
memory > xUnicodeEncodeError
memory > xUnicodeWriteFileObjectClassTestCase
memory > xRecvmsgIntoTCPTest
memory > xread
memory > xctx
memory > xe
memory > xRecvmsgTCPTest
memory > xUnbufferedFileObjectClassTestCase
memory > xRecvmsgIntoMixin
memory > xSendfileUsingSendTest
memory > xCANTest
memory > xRecvmsgSCTPStreamTest
memory > xname
memory > xshutil
memory > xunittest
memory > xInterruptedRecvTimeoutTest
memory > xwrite
memory > xexc
memory > xTIPCThreadableTest
memory > xcan_id
memory > xConnectedStreamTestMixin
memory > xCreateServerTest
memory > xn
memory > xobject
memory > xs3
memory > xaddr
memory > xThreadedRDSSocketTest
memory > xmemoryview
memory > xReferenceError
memory > xIsADirectoryError
memory > xinet_pton
memory > xkwargs
memory > xSendrecvmsgConnectionlessBase
memory > xop
memory > xisinstance
memory > xSendmsgUnixStreamTest
memory > xSendrecvmsgTCPTestBase
memory > xInet6TestBase
memory > xlen
memory > xalgo
memory > xSendrecvmsgUnixStreamTestBase
memory > xline
memory > xSendrecvmsgConnectedBase
memory > xInetTestBase
memory > xfp
memory > xBlockingIOError
memory > xRecvmsgUnixStreamTest
memory > xTypeError
memory > xRecvmsgRFC3542AncillaryUDP6Test
memory > xSocketListeningTestMixin
memory > xCreateServerFunctionalTest
memory > xa
memory > xcan_dlc
memory > xUnixStreamBase
memory > x__name__
[] > test_socket
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestSendmsgDataGenerator
        memory > xtestSurrogateescapeBind
        memory > xtestNtoHErrors
        memory > xtest_host_resolution_bad_address
        memory > x_testRecvmsgOverflow
        memory > xcheckRecvmsgFDs
        memory > xnewFDs
        memory > xtestRecvmsgAfterClose
        memory > xrequireSocket
        memory > x_testSetBlocking_overflow
        memory > x_testRecvFromIntoMemoryview
        memory > xtest_listen_backlog_overflow
        memory > xserverExplicitReady
        memory > xtest_ipv6_only_default
        memory > xrecv_data
        memory > x_testReadline
        memory > x_testSendFrame
        memory > xtestSendmsgBadArgs
        memory > xwrite_msg
        memory > x_testSetTrafficClassAndHopLimit
        memory > xtest_aes_cbc
        memory > xtest_host_resolution
        memory > xtest_new_tcp_flags
        memory > xtestRecvmsgTrunc
        memory > xtestCmsgTrunc1
        memory > x_testTimeoutValueNonamed
        memory > xtestSetSockOpt
        memory > xdoCleanups
        memory > xtest_address
        memory > x_testSendAndRecvMulti
        memory > x_testSendmsgExcessCmsgReject
        memory > xcheckFDs
        memory > xtestRecvmsgIntoGenerator
        memory > xtestUnbufferedRead
        memory > x_testRecvmsg
        memory > xtest_weakref
        memory > xremoteProcessServer
        memory > xtestInvalidInterfaceNameToIndex
        memory > xtestSendmsg
        memory > xtestBCM
        memory > xtestBind
        memory > xtest_getaddrinfo_ipv6_scopeid_symbolic
        memory > x_testCountWithOffset
        memory > xtest_aead_aes_gcm
        memory > xtestAttributes
        memory > xtestSocketBufferSize
        memory > x_testFullRead
        memory > x_testSend
        memory > x_testCmsgTruncLen0Plus1
        memory > x_testFamily
        memory > xmsg_flags_eor_indicator
        memory > x_testRealClose
        memory > xtestSendmsgAncillaryGenerator
        memory > x_testRecvIntoBytearray
        memory > xtestWithTimeout
        memory > xtestRecvIntoArray
        memory > xtest_length_restriction
        memory > xtestDefaultTimeout
        memory > xtestSendmsgExcessCmsgReject
        memory > xtestInterruptedRecvTimeout
        memory > xMAIN_TIMEOUT
        memory > x_testRecvmsgLongAncillaryBuf
        memory > xtestSendAll
        memory > xsocklen_t_limit
        memory > xtestEmptyFileSend
        memory > xalarm_time
        memory > xtestCmsgTruncLen0Plus1
        memory > xdoConnect
        memory > xtestSendmsgDontWait
        memory > xread_mode
        memory > xtestRecvmsgIntoScatter
        memory > xtest_pickle
        memory > x_testMakefileCloseSocketDestroy
        memory > xtestGetaddrinfo
        memory > x_testFDPassSeparate
        memory > x_testDetach
        memory > xtestSendmsgBadCmsg
        memory > xencoded
        memory > x_testSingleCmsgTrunc1
        memory > xtestSendtoAndRecv
        memory > xtestLinuxAbstractNamespace
        memory > x_testNonBlocking
        memory > xtestNewAttributes
        memory > xmocked_socket_module
        memory > x_testSingleCmsgTruncLen0Minus1
        memory > xknownTCPFlags
        memory > x_testInheritFlagsTimeout
        memory > x_testSendmsgAfterClose
        memory > x_testUnbufferedReadline
        memory > xtest_get_inheritable_cloexec
        memory > xtestSecondCmsgTrunc1
        memory > xtest_sendall_interrupted
        memory > x_testCmsgTruncLen0Minus1
        memory > xUNIX_PATH_MAX
        memory > xtestNameOverflow
        memory > xmsg_flags_common_unset
        memory > xtestSelect
        memory > xtest_flowinfo
        memory > xtestInvalidBindSock
        memory > xTIPC_UPPER
        memory > xcheckInterruptedRecv
        memory > x_testReadAfterTimeout
        memory > x_testRecvmsgShortAncillaryBuf
        memory > xtest_family_and_type
        memory > xtestShutdown_overflow
        memory > xtest_dup
        memory > x_tearDown
        memory > xcheckTruncatedArray
        memory > xtestShare
        memory > x_testRecvmsgTrunc
        memory > xtest_set_inheritable
        memory > xtestSecondCmsgTruncLen0Minus1
        memory > x_testRecvFromNegative
        memory > xmeth_from_sock
        memory > xtest_makefile_invalid_mode
        memory > xsendAncillaryIfPossible
        memory > xtestGetServBy
        memory > x_testRecvmsgIntoScatter
        memory > xtest_sock_ioctl
        memory > x_testSendMaxFrame
        memory > xtestBytearrayName
        memory > xtestClosedAttr
        memory > xtestRecvmsgExplicitDefaults
        memory > xtest_sendall_interrupted_with_timeout
        memory > xtestRecvTrafficClassAndHopLimitCMSG_SPACE
        memory > xtestSingleCmsgTruncLen0Minus1
        memory > x_testSendmsgExplicitNoneAddr
        memory > xtestUnbound
        memory > xtest_name_closed_socketio
        memory > xtestCmsgTruncLen1
        memory > x_testRecv
        memory > xtestRegularFile
        memory > xtest_getaddrinfo_ipv6_scopeid_numeric
        memory > xecho_client
        memory > xtestSendFrame
        memory > x_testSecondCmsgTrunc2Int
        memory > xtest_socket_consistent_sock_type
        memory > x_testFDPassSimple
        memory > x_testCreateConnectionClose
        memory > xerrors
        memory > x_testRecvmsgEOF
        memory > x_testSendmsgNoDestAddr
        memory > xtestRecvmsgFromSendmsg
        memory > x_have_socket_can_isotp
        memory > xtestRDM
        memory > xsocket_setdefaulttimeout
        memory > xtest_set_inheritable_cloexec
        memory > xtestSocketError
        memory > x_justAccept
        memory > xtestBindSock
        memory > xtestRecvFrom
        memory > x_testRecvmsgIntoBadArgs
        memory > x_testSetBlocking
        memory > x_testCountSmall
        memory > xtestSockName
        memory > x_testSendmsgBadCmsg
        memory > x_testCmsgTruncNoBufSize
        memory > x_check_defaults
        memory > xbindServer
        memory > xtest_unusable_closed_socketio
        memory > x_testSendmsgGather
        memory > x_testRecvTrafficClassAndHopLimit
        memory > xcheck_sendall_interrupted
        memory > xtestFDPassPartialIntInMiddle
        memory > x_testOverFlowRecv
        memory > xtestRecvmsgPeek
        memory > xtestSingleCmsgTrunc2Int
        memory > xtestCloseAfterMakefile
        memory > xtestSmallRead
        memory > x_testWithTimeout
        memory > x_testUnbufferedRead
        memory > x_testSmallReadNonBlocking
        memory > x_testSingleCmsgTrunc0
        memory > xcheckTrafficClassAndHopLimit
        memory > xcli_sock
        memory > x_testTimeoutDefault
        memory > xcan_frame_fmt
        memory > xtestStringToIPv4
        memory > x_have_socket_can
        memory > xtestInheritFlagsTimeout
        memory > xtestRecvFromIntoEmptyBuffer
        memory > xtestDefaults
        memory > xtestTimeoutValueNonamed
        memory > xclientRun
        memory > x_testRecvmsgFromSendmsg
        memory > xecho_server
        memory > xconnect
        memory > xbcm_cmd_msg_fmt
        memory > xtestCMSG_LEN
        memory > xtestSendmsgGather
        memory > xtest_main
        memory > x_testSmallRead
        memory > xtest_repr
        memory > xtest_socket_fileno_rejects_invalid_socket
        memory > x_testSelect
        memory > xtestMakefileAfterMakefileClose
        memory > xtest_default_inheritable
        memory > xFILESIZE
        memory > xtestCmsgTrunc2Int
        memory > x_testCmsgTrunc1
        memory > xtestInterruptedRecvfromTimeout
        memory > xtest_getnameinfo
        memory > xfail_timeout
        memory > xread_msg
        memory > x_testCmsgTrunc0
        memory > xsendmsgToServer
        memory > xtestSetBlocking_overflow
        memory > xtestInterruptedSendtoTimeout
        memory > xcan_frame_size
        memory > xtestFilter
        memory > x_test_socket_fileno
        memory > xtestReadAfterTimeout
        memory > x_testRecvFromIntoSmallBuffer
        memory > xtearDownClass
        memory > x_have_socket_rds
        memory > x_testSourceAddress
        memory > x_testRecvFromIntoArray
        memory > xtestRecvmsgOverflow
        memory > xtestInterruptedRecvIntoTimeout
        memory > xtestMultipleFDPass
        memory > xmsg_flags_common_set
        memory > xtest_listen_backlog
        memory > xtestRecvFromNegative
        memory > xdoRecvmsg
        memory > x_testSendmsgArray
        memory > xrequireAttrs
        memory > xnewline
        memory > xtestFDPassCMSG_SPACE
        memory > x_testSendmsgBadArgs
        memory > xtestSendmsgBadMultiCmsg
        memory > x_testOddCmsgSize
        memory > xtestSendMultiFrames
        memory > x_testFDPassCMSG_LEN
        memory > xtestCreateConnectionBase
        memory > xtest_makefile_mode
        memory > xtestTimeoutNone
        memory > xtestInvalidInterfaceIndexToName
        memory > x_testOutsideTimeout
        memory > x_testSendMultiFrames
        memory > xtestCloseException
        memory > x_testMultipleFDPass
        memory > xbind
        memory > x_testStream
        memory > x_testRecvIntoMemoryview
        memory > xtest_socket_fileno
        memory > xtest_tcp6
        memory > xHAVE_SOCKET_ALG
        memory > xsetUpClass
        memory > xtestRecvmsgShorter
        memory > xtestCrucialConstants
        memory > xtest_socket_fileno_rejects_negative
        memory > x_testCloseAfterMakefile
        memory > xtestFDPassEmpty
        memory > xtest_unknown_socket_family_repr
        memory > xtestStream
        memory > x_testFDPassPartialInt
        memory > xtest_SOCK_NONBLOCK
        memory > xtestLoopback
        memory > xsetUp
        memory > xtestSendAndRecv
        memory > x_testBCM
        memory > xtestRecvIntoMemoryview
        memory > xtestExceptionTree
        memory > xaccept_conn
        memory > xbufsize
        memory > xtestCreateBCMSocket
        memory > xHAVE_SOCKET_VSOCK
        memory > xtest_getnameinfo_ipv6_scopeid_numeric
        memory > xtestBindAny
        memory > xcloseRecvmsgFDs
        memory > xtestAccept
        memory > x_testSendmsg
        memory > xtestCountSmall
        memory > xtest_sio_loopback_fast_path
        memory > xtestShareLength
        memory > x_testSocketClass
        memory > xTIPC_LOWER
        memory > x_testSendAll
        memory > x_testSendAndRecvMsg
        memory > xtestUDPTimeout
        memory > xsendToServer
        memory > x_testFromFd
        memory > xtestRefCountGetNameInfo
        memory > x_testTimeoutValueNamed
        memory > xtestRecvmsg
        memory > xtestFDPassPartialInt
        memory > xtestNtoH
        memory > xHAVE_SOCKET_CAN_ISOTP
        memory > xtestAutoBindSock
        memory > x_testRecvTrafficClassAndHopLimitCMSG_SPACE
        memory > x_testSendmsgDataGenerator
        memory > x_testRegularFile
        memory > xtest__sendfile_use_sendfile
        memory > xTIMEOUT
        memory > xcheckTruncatedHeader
        memory > xtestRecvFromIntoSmallBuffer
        memory > xtestWindowsSpecificConstants
        memory > xtestFromFd
        memory > x_testSendmsgDontWait
        memory > x_setUp
        memory > xtest_drbg_pr_sha256
        memory > xcheckHopLimit
        memory > xtest_hmac_sha1
        memory > x_testCmsgTruncLen0
        memory > xtestFDPassSimple
        memory > xtestOverFlowRecvFrom
        memory > x_testCreateConnectionBase
        memory > xtest_create_connection
        memory > xtestSendAndRecvMsg
        memory > xnewClientSocket
        memory > xtestCountWithOffset
        memory > x_testShutdown
        memory > xtestSecondCmsgTrunc2Int
        memory > x_have_socket_vsock
        memory > xserv_sock
        memory > x_testSecondCmsgTrunc0
        memory > x_testRecvFromIntoEmptyBuffer
        memory > xBUFSIZE
        memory > x_testSendAndRecv
        memory > xtestInsideTimeout
        memory > xfcntl
        memory > xtestRecvFromIntoMemoryview
        memory > xtestSourceAddress
        memory > xtestFDPassSeparateMinSpace
        memory > xtestInterfaceNameIndex
        memory > xtest_dual_stack_client_v4
        memory > xtest_socketpair
        memory > xtestSecondCmsgTrunc0
        memory > xhost
        memory > xtestSendAfterClose
        memory > xtestSetTrafficClassAndHopLimit
        memory > x_testEmptyFileSend
        memory > xtestSmallReadNonBlocking
        memory > xtest_socket_close
        memory > xtestRecvFromIntoArray
        memory > xtestIPv6toString
        memory > xtestClose
        memory > xtest_socket_fileno_rejects_float
        memory > x_testSecondCmsgTruncLen0Minus1
        memory > xbadfd
        memory > xnewSocket
        memory > x_socket
        memory > xtestGetSockOpt
        memory > xtest_idna
        memory > xisTipcAvailable
        memory > xtestRealClose
        memory > xcheckNonblock
        memory > x_testFDPassSeparateMinSpace
        memory > xtestRecvmsgIntoArray
        memory > xtestNonBlocking
        memory > xtest_socket_fileno_requires_valid_fd
        memory > xtestRecvmsgLongAncillaryBuf
        memory > xtestShareLocal
        memory > xtestOddCmsgSize
        memory > xtest_SOCK_CLOEXEC
        memory > xget_cid
        memory > xtestInheritFlagsBlocking
        memory > xtestSendmsgTimeout
        memory > xtestCmsgTruncLen0Minus1
        memory > xtestSendmsgAfterClose
        memory > xtest_setblocking_invalidfd
        memory > xtestRecvFromIntoBytearray
        memory > xcheckHopLimitTruncatedHeader
        memory > xbindSock
        memory > xregisterRecvmsgResult
        memory > x_testClose
        memory > x_testSecondCmsgTrunc1
        memory > xtestRecvHopLimit
        memory > xFILEDATA
        memory > xVSOCKPORT
        memory > x_testSingleCmsgTrunc2Int
        memory > xtestTCPTimeout
        memory > xtestSetBlocking
        memory > x_testFDPassEmpty
        memory > xtestSend
        memory > x_testPeek
        memory > xtest_create_connection_timeout
        memory > xcreate_alg
        memory > xtest_getaddrinfo_ipv6_basic
        memory > xtestSecomdCmsgTruncInData
        memory > xtestRecvTrafficClassAndHopLimit
        memory > xtestCmsgTruncNoBufSize
        memory > x_testRecvmsgPeek
        memory > xtestSingleCmsgTrunc0
        memory > xtestCount
        memory > xcheckInterruptedSend
        memory > xtestSingleCmsgTruncInData
        memory > xtestFDPassCMSG_LEN
        memory > x_testRecvmsgBadArgs
        memory > x_testRecvmsgShorter
        memory > xtestCMSG_SPACE
        memory > xtest_socket_fileno_rejects_other_types
        memory > xtestTimeoutZero
        memory > x_testFDPassCMSG_SPACE
        memory > x_testRecvFrom
        memory > xHAVE_SOCKET_RDS
        memory > xtestStrAddr
        memory > x_testInheritFlagsBlocking
        memory > xtest_errors
        memory > xtest_dealloc_warn
        memory > x_testRecvFromIntoBytearray
        memory > xtestStrName
        memory > x_testShutdown_overflow
        memory > xtestSendMaxFrame
        memory > x_testSecomdCmsgTruncInData
        memory > xencoding
        memory > xtestCreateISOTPSocket
        memory > xtestDetach
        memory > x_testDup
        memory > xtest_str_for_enums
        memory > x__init__
        memory > xtestCreateConnectionClose
        memory > xtestMakefileCloseSocketDestroy
        memory > xtestCmsgTrunc0
        memory > xtestInterruptedRecvfromIntoTimeout
        memory > xtestOverFlowRecv
        memory > xskipWithClientIf
        memory > x_testCmsgTruncLen2Minus1
        memory > xdissect_can_frame
        memory > x_testRecvmsgAfterClose
        memory > x_testNonRegularFile
        memory > xsendmsg_to_server_defaults
        memory > xbuild_can_frame
        memory > x_testOverFlowRecvFrom
        memory > x_testRecvmsgIntoGenerator
        memory > xSIZEOF_INT
        memory > xtest_socket_fileno_requires_socket_fd
        memory > xtestRecvmsgIntoBadArgs
        memory > xtest_sethostname
        memory > xmultiprocessing
        memory > xtestRecvmsgTimeout
        memory > xaddCleanup
        memory > xtestSetHopLimit
        memory > xwrite_mode
        memory > xtestInterruptedRecvmsgTimeout
        memory > xtestInterruptedSendTimeout
        memory > xtestFamily
        memory > xtestReadline
        memory > xTIPC_STYPE
        memory > xtestRecv
        memory > xHAVE_SOCKET_CAN
        memory > x_testSingleCmsgTruncInData
        memory > xtestUnencodableAddr
        memory > xtestStringToIPv6
        memory > xtestRecvmsgBadArgs
        memory > xAIX
        memory > xtest_dualstack_ipv6_family
        memory > xtestDup
        memory > xtestWithTimeoutTriggeredSend
        memory > xtestSendmsgExplicitNoneAddr
        memory > xtestCmsgTruncLen2Minus1
        memory > x_testSendmsgBadMultiCmsg
        memory > xtestMakefileClose
        memory > xtest_sendmsg_afalg_args
        memory > xtest_getnameinfo_ipv6_scopeid_symbolic
        memory > x_testRecvHopLimit
        memory > xtestVSOCKConstants
        memory > x_testDefaults
        memory > xcreateAndSendFDs
        memory > xHOST
        memory > xcheckFlags
        memory > xclientSetUp
        memory > xtestIPv4_inet_aton_fourbytes
        memory > x_testCmsgTruncLen1
        memory > xtestBCMConstants
        memory > xtestOutsideTimeout
        memory > xtestCreateSocket
        memory > xtestSendmsgArray
        memory > xtimeout
        memory > xhop_limit
        memory > x_testClosedAttr
        memory > xassert_sock_timeout
        memory > xsetAlarm
        memory > x_testCount
        memory > xbindClient
        memory > xtest_dual_stack_client_v6
        memory > xtestTimeoutDefault
        memory > x_testRecvmsgTimeout
        memory > x_testSendtoAndRecv
        memory > xMSG
        memory > xtestSendmsgNoDestAddr
        memory > xtestTimeoutValueNamed
        memory > x_testAccept
        memory > x_have_socket_alg
        memory > xtestInterruptedRecvmsgIntoTimeout
        memory > x_testMakefileClose
        memory > xmsg_flags_non_eor_indicator
        memory > xancillaryMapping
        memory > xtest_tcp4
        memory > xtest_csocket_repr
        memory > xtestInterruptedSendmsgTimeout
        memory > xcompareSockets
        memory > x_testMakefileAfterMakefileClose
        memory > xthread
        memory > xtraffic_class
        memory > xtestInterpreterCrash
        memory > xcheckTruncatedSecondHeader
        memory > xtest_reuse_port
        memory > x_test_errors
        memory > xtestFDPassSeparate
        memory > xtest_connect
        memory > xtestTooLongInterfaceName
        memory > xtestOffset
        memory > x_have_socket_qipcrtr
        memory > x_testRecvmsgExplicitDefaults
        memory > xtestIPv4toString
        memory > x_testWriteNonBlocking
        memory > xtestWriteNonBlocking
        memory > xtestRecvIntoBytearray
        memory > x_testRecvHopLimitCMSG_SPACE
        memory > xtestSendAndRecvMulti
        memory > xtest_getsockaddrarg
        memory > xclientTearDown
        memory > x_testFDPassPartialIntInMiddle
        memory > xtestInterruptedTimeout
        memory > x_testTimeoutNone
        memory > xtearDown
        memory > xtestSendtoErrors
        memory > x_testCmsgTrunc2Int
        memory > x_testSendmsgAncillaryGenerator
        memory > xtestRecvmsgEOF
        memory > xtestFullRead
        memory > xtestRecvmsgShortAncillaryBuf
        memory > x_testInitNonBlocking
        memory > xtestHostnameRes
        memory > xtestCmsgTruncLen0
        memory > x_testAttributes
        memory > xtestPeek
        memory > xtestInitNonBlocking
        memory > xHAVE_SOCKET_QIPCRTR
        memory > xtestSingleCmsgTrunc1
        memory > x_testOffset
        memory > xinterface
        memory > xtestBytesAddr
        memory > xtestTypes
        memory > xtest_sha256
        memory > xtestRecvHopLimitCMSG_SPACE
        memory > xtestCrucialIpProtoConstants
        memory > xtest_SocketType_is_socketobject
        memory > x_testWithTimeoutTriggeredSend
        memory > xtestUnbufferedReadline
        memory > xtestShutdown
        memory > x_testSendmsgTimeout
        memory > x_testRecvIntoArray
        memory > xcheckRecvmsgAddress
        memory > xtestNonRegularFile
        memory > x_testSetHopLimit
        memory > xtestMaxName
        memory > x_testInsideTimeout
        memory > x_testRecvmsgIntoArray
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xmultiprocessing.write FALSE
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xfcntl.write "None: is there a None literal in the EO language?"
            xHOST.write ((xsupport).xHOST)
            xMSG.write ((("Michael Gilfix was hereu1234rn".xencode)) ("utf-8"))
            xMAIN_TIMEOUT.write 60.0
            xVSOCKPORT.write 1234
            xAIX.write (((((xplatform).xsystem)) 0).eq "AIX")
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_socket.write "None: is there a None literal in the EO language?"
            xget_cid.write
              []
                memory > xr
                seq > @
                  seq
                    (((unsupported)) ((xfcntl)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)) ("None: is there a None literal in the EO language?"))
                    ((((xhasattr)) ((xsocket)) ("IOCTL_VM_SOCKETS_GET_LOCAL_CID")).not).if
                      (((unsupported)) ("None: is there a None literal in the EO language?"))
                    (((unsupported)) ((xOSError)))
                      (((unsupported)) ((((xopen)) ("/dev/vsock") ("rb"))) ((xf)))
                        xr.write ((((xfcntl).xioctl)) ((xf)) (((xsocket).xIOCTL_VM_SOCKETS_GET_LOCAL_CID)) ("    "))
                      (((unsupported)) ("None: is there a None literal in the EO language?"))
                      (((unsupported)) ((((unsupported)) (((((xstruct).xunpack)) ("I") ((xr)))) (0))))
            x_have_socket_can.write
              []
                memory > xs
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xOSError)))))
                      xs.write ((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))
                      (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) (TRUE))
            x_have_socket_can_isotp.write
              []
                memory > xs
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xOSError)))))
                      xs.write ((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_ISOTP)))
                      (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) (TRUE))
            x_have_socket_rds.write
              []
                memory > xs
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xOSError)))))
                      xs.write ((((xsocket).xsocket)) (((xsocket).xPF_RDS)) (((xsocket).xSOCK_SEQPACKET)) (0))
                      (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) (TRUE))
            x_have_socket_alg.write
              []
                memory > xs
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xOSError)))))
                      xs.write ((((xsocket).xsocket)) (((xsocket).xAF_ALG)) (((xsocket).xSOCK_SEQPACKET)) (0))
                      (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) (TRUE))
            x_have_socket_qipcrtr.write
              []
                memory > xs
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xOSError)))))
                      xs.write ((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)) (0))
                      (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) (TRUE))
            x_have_socket_vsock.write
              []
                memory > xret
                seq > @
                  seq
                    unsupported
                    xret.write (((unsupported)) ((((xget_cid)) 0)) ("None: is there a None literal in the EO language?"))
                    (((unsupported)) ((xret)))
            xsocket_setdefaulttimeout.write
              [xtimeout]
                memory > xold_timeout
                seq > @
                  (((unsupported)) 0)
                    xold_timeout.write ((((xsocket).xgetdefaulttimeout)) 0)
                    (((unsupported)) 0)
                      seq
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ((xtimeout)))
                        (((unsupported)) 0)
                      bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ((xold_timeout)))
            xHAVE_SOCKET_CAN.write (((x_have_socket_can)) 0)
            xHAVE_SOCKET_CAN_ISOTP.write (((x_have_socket_can_isotp)) 0)
            xHAVE_SOCKET_RDS.write (((x_have_socket_rds)) 0)
            xHAVE_SOCKET_ALG.write (((x_have_socket_alg)) 0)
            xHAVE_SOCKET_QIPCRTR.write (((x_have_socket_qipcrtr)) 0)
            xHAVE_SOCKET_VSOCK.write (((x_have_socket_vsock)) 0)
            xSIZEOF_INT.write (((((xarray).xarray)) ("i")).xitemsize)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        (((unsupported)) (((xself).xport)) (((((xsupport).xbind_port)) (((xself).xserv)))))
                        bogusForceDataize.write (((((xself).xserv).xlisten)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        (((unsupported)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))))
                        (((unsupported)) (((xself).xport)) (((((xsupport).xbind_port)) (((xself).xserv)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        (((unsupported)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((xself).x_cleanup_lock)) (((((xthreading).xRLock)) 0)))
                xaddCleanup.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_cleanup_lock)))
                          (((unsupported)) (((((((xsuper)) 0).xaddCleanup)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                xdoCleanups.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_cleanup_lock)))
                          (((unsupported)) (((((((xsuper)) 0).xdoCleanups)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xinterface.write "vcan0"
                xbufsize.write 128
                (((unsupported)) 0)
                xcan_frame_fmt.write "=IB3x8s"
                xcan_frame_size.write ((((xstruct).xcalcsize)) ((xcan_frame_fmt)))
                (((unsupported)) 0)
                xbcm_cmd_msg_fmt.write "@3I4l2I"
                (((unsupported)) ((xbcm_cmd_msg_fmt)) (("x".mul (((((xstruct).xcalcsize)) ((xbcm_cmd_msg_fmt))).mod 8))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xs)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xs).xclose)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write (((((xself).xs).xbind)) ((((unsupported)) (((xself).xinterface)))))
                          bogusForceDataize.write ((((xself).xskipTest)) (("network interface `%s` does not exist".mod ((xself).xinterface))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xbufsize.write 8192
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv)) (((((xsocket).xsocket)) (((xsocket).xPF_RDS)) (((xsocket).xSOCK_SEQPACKET)) (0))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xserv).xclose)))
                        (((unsupported)) ((xOSError)))
                          (((unsupported)) (((xself).xport)) (((((xsupport).xbind_port)) (((xself).xserv)))))
                          bogusForceDataize.write ((((xself).xskipTest)) ("unable to bind RDS socket"))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x__setUp)) (((xself).xsetUp)))
                        (((unsupported)) (((xself).x__tearDown)) (((xself).xtearDown)))
                        (((unsupported)) (((xself).xsetUp)) (((xself).x_setUp)))
                        (((unsupported)) (((xself).xtearDown)) (((xself).x_tearDown)))
                xserverExplicitReady.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserver_ready).xset)) 0)
                x_setUp.write
                  [xself]
                    memory > xtest_method
                    memory > xi
                    memory > xmethodname
                    seq > @
                      seq
                        (((unsupported)) (((xself).xwait_threads)) (((((xsupport).xwait_threads_exit)) 0)))
                        bogusForceDataize.write (((((xself).xwait_threads).x__enter__)) 0)
                        (((unsupported)) (((xself).xserver_ready)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xclient_ready)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xdone)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xqueue)) (((((xqueue).xQueue)) (1))))
                        (((unsupported)) (((xself).xserver_crashed)) (FALSE))
                        xmethodname.write ((((xself).xid)) 0)
                        xi.write ((((xmethodname).xrfind)) ("."))
                        xmethodname.write (((unsupported)) ((xmethodname)) ((((unsupported)) (((xi).add 1)))))
                        xtest_method.write (((xgetattr)) ((xself)) (("_".add (xmethodname))))
                        (((unsupported)) (((xself).xclient_thread)) (((((xthread).xstart_new_thread)) (((xself).xclientRun)) ((((unsupported)) ((xtest_method)))))))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).x__setUp)) 0)
                          seq
                            (((unsupported)) (((xself).xserver_crashed)) (TRUE))
                            (((unsupported)) 0)
                          bogusForceDataize.write (((((xself).xserver_ready).xset)) 0)
                        bogusForceDataize.write (((((xself).xclient_ready).xwait)) 0)
                x_tearDown.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x__tearDown)) 0)
                        bogusForceDataize.write (((((xself).xdone).xwait)) 0)
                        bogusForceDataize.write (((((xself).xwait_threads).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((((xself).xqueue).xqsize)) 0).if
                          seq
                            xexc.write (((((xself).xqueue).xget)) 0)
                            (((unsupported)) ((xexc)))
                xclientRun.write
                  [xself xtest_func]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver_ready).xwait)) 0)
                        (((unsupported)) ((xBaseException)))
                          bogusForceDataize.write ((((xself).xclientSetUp)) 0)
                          seq
                            bogusForceDataize.write (((((xself).xqueue).xput)) ((xe)))
                            bogusForceDataize.write ((((xself).xclientTearDown)) 0)
                            (((unsupported)) 0)
                          bogusForceDataize.write (((((xself).xclient_ready).xset)) 0)
                        ((xself).xserver_crashed).if
                          seq
                            bogusForceDataize.write ((((xself).xclientTearDown)) 0)
                            (((unsupported)) 0)
                        ((((xhasattr)) ((xtest_func)) ("__call__")).not).if
                          (((unsupported)) ((((xTypeError)) ("test_func must be a callable function"))))
                        (((unsupported)) ((xBaseException)))
                          bogusForceDataize.write (((xtest_func)) 0)
                          bogusForceDataize.write (((((xself).xqueue).xput)) ((xe)))
                          bogusForceDataize.write ((((xself).xclientTearDown)) 0)
                xclientSetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xNotImplementedError)) ("clientSetUp must be implemented."))))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xdone).xset)) 0)
                        bogusForceDataize.write ((((xthread).xexit)) 0)
            (((unsupported)) ((xSocketTCPTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketTCPTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) ((xSocketUDPTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketUDPTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) ((xSocketCANTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketCANTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write (((((xself).xcli).xbind)) ((((unsupported)) (((xself).xinterface)))))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) ((xSocketRDSTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketRDSTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xPF_RDS)) (((xsocket).xSOCK_SEQPACKET)) (0))))
                        (((unsupported)) ((xOSError)))
                          seq
                            bogusForceDataize.write (((((xself).xcli).xbind)) ((((unsupported)) ((xHOST)) (0))))
                            (((unsupported)) (((xself).xcli_addr)) ((((((xself).xcli).xgetsockname)) 0)))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) (((xunittest).xTestCase)) ((xThreadableTest)) (((((xunittest).xskipIf)) ((((unsupported)) ((xfcntl)) ("None: is there a None literal in the EO language?"))) ("need fcntl"))) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_VSOCK)) ("VSOCK sockets required for this test."))) (((((xunittest).xskipUnless)) (((((xget_cid)) 0).neq 2)) ("This test can only be run on a virtual guest."))))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xunittest).xTestCase).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv)) (((((xsocket).xsocket)) (((xsocket).xAF_VSOCK)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xserv).xclose)))
                        bogusForceDataize.write (((((xself).xserv).xbind)) ((((unsupported)) (((xsocket).xVMADDR_CID_ANY)) ((xVSOCKPORT)))))
                        bogusForceDataize.write (((((xself).xserv).xlisten)) 0)
                        bogusForceDataize.write ((((xself).xserverExplicitReady)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xconn)) (((xself).xconnaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xconn).xclose)))
                xclientSetUp.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xsleep)) (0.1))
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xAF_VSOCK)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                        xcid.write (((xget_cid)) 0)
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xcid)) ((xVSOCKPORT)))))
                xtestStream.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xconn).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testStream.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xsend)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
            (((unsupported)) ((xThreadedTCPSocketTest)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xThreadedTCPSocketTest).x__init__)) ((xself)) ((xmethodName)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xThreadedTCPSocketTest).xsetUp)) ((xself)))
                        bogusForceDataize.write ((((xself).xserverExplicitReady)) 0)
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        (((unsupported)) (((xself).xcli_conn)) ((xconn)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        (((unsupported)) (((xself).xcli_conn)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadedTCPSocketTest).xtearDown)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xThreadedTCPSocketTest).xclientSetUp)) ((xself)))
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                        (((unsupported)) (((xself).xserv_conn)) (((xself).xcli)))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv_conn).xclose)) 0)
                        (((unsupported)) (((xself).xserv_conn)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadedTCPSocketTest).xclientTearDown)) ((xself)))
            (((unsupported)) (((xunittest).xTestCase)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xunittest).xTestCase).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xserv)) (((xself).xcli)))) (((((xsocket).xsocketpair)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        (((unsupported)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
                xclientSetUp.write
                  [xself]
                    seq > @
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv)) (((((xself).xnewSocket)) 0)))
                        bogusForceDataize.write ((((xself).xbindServer)) 0)
                xbindServer.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xbindSock)) (((xself).xserv)))
                        (((unsupported)) (((xself).xserv_addr)) ((((((xself).xserv).xgetsockname)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        (((unsupported)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xSocketTestBase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        bogusForceDataize.write (((((xself).xserv).xlisten)) 0)
            (((unsupported)) ((xThreadSafeCleanupTestCase)) ((xSocketTestBase)) ((xThreadableTest)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) (((((xself).xnewClientSocket)) 0)))
                        bogusForceDataize.write ((((xself).xbindClient)) 0)
                xnewClientSocket.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((((xself).xnewSocket)) 0)))
                xbindClient.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xbindSock)) (((xself).xcli)))
                        (((unsupported)) (((xself).xcli_addr)) ((((((xself).xcli).xgetsockname)) 0)))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
            (((unsupported)) ((xSocketListeningTestMixin)) ((xThreadedSocketTestMixin)))
              seq
                (((unsupported)) 0)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        bogusForceDataize.write ((((xself).xserverExplicitReady)) 0)
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        (((unsupported)) (((xself).xcli_conn)) ((xconn)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        (((unsupported)) (((xself).xcli_conn)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)) 0).xtearDown)) 0)
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xclientSetUp)) 0)
                        bogusForceDataize.write (((((xself).xcli).xconnect)) (((xself).xserv_addr)))
                        (((unsupported)) (((xself).xserv_conn)) (((xself).xcli)))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xAttributeError)))
                          seq
                            bogusForceDataize.write (((((xself).xserv_conn).xclose)) 0)
                            (((unsupported)) (((xself).xserv_conn)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)) 0).xclientTearDown)) 0)
            (((unsupported)) ((xSocketTestBase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdir_path)) (((((xtempfile).xmkdtemp)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xrmdir)) (((xself).xdir_path)))
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                xbindSock.write
                  [xself xsock]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((unsupported)) (((xtempfile).xmktemp)) (((xself).xdir_path)))
                        bogusForceDataize.write ((((xsupport).xbind_unix_socket)) ((xsock)) ((xpath)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xpath)))
            (((unsupported)) ((xUnixSocketTestBase)))
              seq
                unsupported
                xnewSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))))
            (((unsupported)) ((xSocketTestBase)))
              seq
                unsupported
                xhost.write (xHOST)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xport)) ((((unsupported)) (((xself).xserv_addr)) (1))))
                xbindSock.write
                  [xself xsock]
                    seq > @
                      (((unsupported)) (((xsupport).xbind_port)) ((xsock)) (((xself).xhost)))
            (((unsupported)) ((xInetTestBase)))
              seq
                unsupported
                xnewSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
            (((unsupported)) ((xInetTestBase)))
              seq
                unsupported
                xnewSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))))
            (((unsupported)) ((xInetTestBase)))
              seq
                unsupported
                xnewSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (((xsocket).xIPPROTO_SCTP)))))
            (((unsupported)) ((xInetTestBase)))
              seq
                unsupported
                xhost.write ((xsupport).xHOSTv6)
            (((unsupported)) ((xInet6TestBase)))
              seq
                unsupported
                xnewSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_DGRAM)))))
            xskipWithClientIf.write
              [xcondition xreason]
                memory > xnoskipdec
                memory > xskipdec
                memory > xclient_pass
                seq > @
                  seq
                    (((unsupported)) 0)
                    xclient_pass.write
                      []
                        seq > @
                          (((unsupported)) 0)
                    xskipdec.write
                      [xobj]
                        memory > xretval
                        seq > @
                          seq
                            xretval.write ((((((xunittest).xskip)) ((xreason)))) ((xobj)))
                            ((((xisinstance)) ((xobj)) ((xtype))).not).if
                              (((unsupported)) (((xretval).xclient_skip)) ((((unsupported)) ((xclient_pass)))))
                            (((unsupported)) ((xretval)))
                    xnoskipdec.write
                      [xobj]
                        seq > @
                          seq
                            (((((xisinstance)) ((xobj)) ((xtype))).or (((xhasattr)) ((xobj)) ("client_skip"))).not).if
                              (((unsupported)) (((xobj).xclient_skip)) ((((unsupported)) ((xf)))))
                            (((unsupported)) ((xobj)))
                    (((unsupported)) (((xcondition).if (xskipdec) (xnoskipdec))))
            xrequireAttrs.write
              [xobj]
                memory > xmissing
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    xmissing.write (((unsupported)) ((xname)) ((xname)) ((xattributes)) (((((xhasattr)) ((xobj)) ((xname))).not)))
                    (((unsupported)) ((((xskipWithClientIf)) ((xmissing)) (("don't have ".add (((", ".xjoin)) ((((unsupported)) ((xname)) ((xname)) ((xmissing))))))))))
            xrequireSocket.write
              []
                memory > xmissing
                memory > xs
                memory > xerr
                memory > xcallargs
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    xerr.write "None: is there a None literal in the EO language?"
                    xmissing.write (((unsupported)) ((xobj)) ((xobj)) ((xargs)) (((((xisinstance)) ((xobj)) ((xstr))).and ((((xhasattr)) ((xsocket)) ((xobj))).not))))
                    (xmissing).if
                      xerr.write ("don't have ".add (((", ".xjoin)) ((((unsupported)) ((xname)) ((xname)) ((xmissing))))))
                      seq
                        xcallargs.write (((unsupported)) (((((xisinstance)) ((xobj)) ((xstr))).if (((xgetattr)) ((xsocket)) ((xobj))) (xobj))) ((xobj)) ((xargs)))
                        (((unsupported)) ((xOSError)))
                          xs.write ((((xsocket).xsocket)) ((((unsupported)) ((xcallargs)))))
                          xerr.write (((xstr)) ((xe)))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                    (((unsupported)) ((((xskipWithClientIf)) ((((unsupported)) ((xerr)) ("None: is there a None literal in the EO language?"))) (((("can't create socket({0}): {1}".xformat)) ((((", ".xjoin)) ((((unsupported)) ((((xstr)) ((xo)))) ((xo)) ((xargs)))))) ((xerr)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_SocketType_is_socketobject.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xsocket).xSocketType)) (((x_socket).xsocket)))))
                        xs.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xs)) (((xsocket).xSocketType)))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_repr.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        (((unsupported)) ((xs)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)) (("fd=%i".mod ((((xs).xfileno)) 0))) ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertIn)) (("family=%s".mod ((xsocket).xAF_INET))) ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertIn)) (("type=%s".mod ((xsocket).xSOCK_STREAM))) ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertIn)) ("proto=0") ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ("raddr") ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) ("127.0.0.1") (0))))
                            bogusForceDataize.write ((((xself).xassertIn)) ("laddr") ((((xrepr)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertIn)) ((((xstr)) (((((xs).xgetsockname)) 0)))) ((((xrepr)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("[closed]") ((((xrepr)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("laddr") ((((xrepr)) ((xs)))))
                xtest_csocket_repr.write
                  [xself]
                    memory > xs
                    memory > xexpected
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((x_socket).xsocket)) (((x_socket).xAF_INET)) (((x_socket).xSOCK_STREAM)))
                        (((unsupported)) 0)
                          seq
                            xexpected.write ("<socket object, fd=%s, family=%s, type=%s, proto=%s>".mod (((unsupported)) (((((xs).xfileno)) 0)) (((xs).xfamily)) (((xs).xtype)) (((xs).xproto))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xs)))) ((xexpected)))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                        xexpected.write ("<socket object, fd=-1, family=%s, type=%s, proto=%s>".mod (((unsupported)) (((xs).xfamily)) (((xs).xtype)) (((xs).xproto))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xs)))) ((xexpected)))
                xtest_weakref.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                          seq
                            xp.write (((xproxy)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfileno)) 0)) (((((xs).xfileno)) 0)))
                        xs.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xReferenceError)))
                          bogusForceDataize.write ((((xp).xfileno)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("Socket proxy still exists"))
                xtestSocketError.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Error raising socket exception (%s)."
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xmsg).mod "OSError")))))
                          (((unsupported)) ((xOSError)))
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xmsg).mod "socket.herror")))))
                          (((unsupported)) (((xsocket).xherror)))
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xmsg).mod "socket.gaierror")))))
                          (((unsupported)) (((xsocket).xgaierror)))
                xtestSendtoErrors.write
                  [xself]
                    memory > xs
                    memory > xsockname
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) ("") (0))))
                        xsockname.write ((((xs).xgetsockname)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("u2620") ((xsockname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("a bytes-like object is required, not 'str'"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ((((unsupported)) 0)) ((xsockname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("a bytes-like object is required, not 'complex'"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("not NoneType") ((((xstr)) (((xcm).xexception)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("u2620") (0) ((xsockname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("a bytes-like object is required, not 'str'"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ((((unsupported)) 0)) (0) ((xsockname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("a bytes-like object is required, not 'complex'"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo") (0) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("not NoneType") ((((xstr)) (((xcm).xexception)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo") ("bar") ((xsockname)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("an integer is required") ((((xstr)) (((xcm).xexception)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("an integer is required") ((((xstr)) (((xcm).xexception)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("(1 given)") ((((xstr)) (((xcm).xexception)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xsendto)) ("foo") (0) ((xsockname)) (4))
                        bogusForceDataize.write ((((xself).xassertIn)) ("(4 given)") ((((xstr)) (((xcm).xexception)))))
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((xsocket).xhas_ipv6).if
                          unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtestCrucialIpProtoConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        ((xsocket).xhas_ipv6).if
                          unsupported
                xtestWindowsSpecificConstants.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtestHostnameRes.write
                  [xself]
                    memory > xfqhn
                    memory > xhostname
                    memory > xip
                    memory > xall_host_names
                    seq > @
                      seq
                        xhostname.write ((((xsocket).xgethostname)) 0)
                        (((unsupported)) ((xOSError)))
                          xip.write ((((xsocket).xgethostbyname)) ((xhostname)))
                          bogusForceDataize.write ((((xself).xskipTest)) ("name lookup failure"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xip).xfind)) (".")).geq 0)) ("Error resolving host to ip."))
                        (((unsupported)) ((xOSError)))
                          (((unsupported)) ((((unsupported)) ((xhname)) ((xaliases)) ((xipaddrs)))) (((((xsocket).xgethostbyaddr)) ((xip)))))
                          bogusForceDataize.write ((((xself).xskipTest)) ("name lookup failure"))
                        xall_host_names.write ((((unsupported)) ((xhostname)) ((xhname))).add (xaliases))
                        xfqhn.write ((((xsocket).xgetfqdn)) ((xip)))
                        ((((unsupported)) ((xfqhn)) ((xall_host_names))).not).if
                          bogusForceDataize.write ((((xself).xfail)) (("Error testing host resolution mechanisms. (fqdn: %s, all: %s)".mod (((unsupported)) ((xfqhn)) ((((xrepr)) ((xall_host_names))))))))
                xtest_host_resolution.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xaddr)) ((((unsupported)) (((xsupport).xHOSTv4)) ("10.0.0.1") ("255.255.255.255"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgethostbyname)) ((xaddr)))) ((xaddr)))
                        (((unsupported)) ((xhost)) ((((unsupported)) (((xsupport).xHOSTv4)))))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xhost)) ((((unsupported)) (((((xsocket).xgethostbyaddr)) ((xhost)))) (2))))
                xtest_host_resolution_bad_address.write
                  [xself]
                    memory > xexplanation
                    seq > @
                      seq
                        xexplanation.write "resolving an invalid IP address did not raise OSError; can be caused by a broken DNS server"
                        (((unsupported)) ((xaddr)) ((((unsupported)) ("0.1.1.~1") ("1+.1.1.1") ("::1q") ("::1::2") ("1:1:1:1:1:1:1:1:1"))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xOSError)) ((xaddr)))))
                              bogusForceDataize.write ((((xsocket).xgethostbyname)) ((xaddr)))
                            (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xOSError)) ((xexplanation)))))
                              bogusForceDataize.write ((((xsocket).xgethostbyaddr)) ((xaddr)))
                xtest_sethostname.write
                  [xself]
                    memory > xoldhn
                    seq > @
                      (((unsupported)) 0)
                        xoldhn.write ((((xsocket).xgethostname)) 0)
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xsocket).xsethostname)) ("new"))
                          (((xe).xerrno).eq ((xerrno).xEPERM)).if
                            bogusForceDataize.write ((((xself).xskipTest)) ("test should be run as root"))
                            (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgethostname)) 0)) ("new"))
                            bogusForceDataize.write ((((xsocket).xsethostname)) ("bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgethostname)) 0)) ("bar"))
                          bogusForceDataize.write ((((xsocket).xsethostname)) ((xoldhn)))
                xtestInterfaceNameIndex.write
                  [xself]
                    memory > x_name
                    memory > xinterfaces
                    memory > x_index
                    seq > @
                      (((unsupported)) 0)
                        xinterfaces.write ((((xsocket).xif_nameindex)) 0)
                        (((unsupported)) ((((unsupported)) ((xindex)) ((xname)))) ((xinterfaces)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xindex)) ((xint)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((xindex)) (0))
                            x_index.write ((((xsocket).xif_nametoindex)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((x_index)) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xindex)) ((x_index)))
                            x_name.write ((((xsocket).xif_indextoname)) ((xindex)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((x_name)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xname)) ((x_name)))
                xtestInvalidInterfaceIndexToName.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsocket).xif_indextoname)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsocket).xif_indextoname)) ("_DEADBEEF"))
                xtestInvalidInterfaceNameToIndex.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsocket).xif_nametoindex)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsocket).xif_nametoindex)) ("_DEADBEEF"))
                xtestRefCountGetNameInfo.write
                  [xself]
                    memory > xorig
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xTypeError)))
                          seq
                            xorig.write ((((xsys).xgetrefcount)) ((x__name__)))
                            bogusForceDataize.write ((((xsocket).xgetnameinfo)) ((x__name__)) (0))
                          (((((xsys).xgetrefcount)) ((x__name__))).neq (xorig)).if
                            bogusForceDataize.write ((((xself).xfail)) ("socket.getnameinfo loses a reference"))
                xtestInterpreterCrash.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xsocket).xgetnameinfo)) ((((unsupported)) ("x") (0) (0) (0))) (0))
                xtestNtoH.write
                  [xself]
                    memory > xswapped
                    memory > xsizes
                    memory > xmask
                    seq > @
                      seq
                        xsizes.write (((unsupported)) (((xsocket).xhtonl)) (32) (((xsocket).xntohl)) (32) (((xsocket).xhtons)) (16) (((xsocket).xntohs)) (16))
                        (((unsupported)) ((((unsupported)) ((xfunc)) ((xsize)))) (((((xsizes).xitems)) 0)))
                          seq
                            xmask.write ((((unsupported)) (1) ((xsize))).sub 1)
                            (((unsupported)) ((xi)) ((((unsupported)) (0) (1) (65535) ((65535.neg)) (2) (19088743) (1985229328))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xi).and (xmask))) (((((xfunc)) ((((xfunc)) (((xi).and (xmask)))))).and (xmask))))
                            xswapped.write (((xfunc)) ((xmask)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xswapped).and (xmask))) ((xmask)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xfunc)) ((((unsupported)) (1) (34))))
                xtestNtoHErrors.write
                  [xself]
                    memory > xl_good_values
                    memory > xs_deprecated_values
                    memory > xs_bad_values
                    memory > xs_good_values
                    memory > xl_bad_values
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xs_good_values.write (((unsupported)) (0) (1) (2) (65535))
                        xl_good_values.write ((xs_good_values).add (((unsupported)) ((((unsupported)) 0))))
                        xl_bad_values.write (((unsupported)) ((1.neg)) ((2.neg)) ((((unsupported)) (1) (32))) ((((unsupported)) (1) (1000))))
                        xs_bad_values.write ((xl_bad_values).add (((unsupported)) ((((x_testcapi).xINT_MIN).sub 1)) ((((x_testcapi).xINT_MAX).add 1))))
                        xs_deprecated_values.write (((unsupported)) ((((unsupported)) (1) (16))) (((x_testcapi).xINT_MAX)))
                        (((unsupported)) ((xk)) ((xs_good_values)))
                          seq
                            bogusForceDataize.write ((((xsocket).xntohs)) ((xk)))
                            bogusForceDataize.write ((((xsocket).xhtons)) ((xk)))
                        (((unsupported)) ((xk)) ((xl_good_values)))
                          seq
                            bogusForceDataize.write ((((xsocket).xntohl)) ((xk)))
                            bogusForceDataize.write ((((xsocket).xhtonl)) ((xk)))
                        (((unsupported)) ((xk)) ((xs_bad_values)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xntohs)) ((xk)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xhtons)) ((xk)))
                        (((unsupported)) ((xk)) ((xl_bad_values)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xntohl)) ((xk)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xhtonl)) ((xk)))
                        (((unsupported)) ((xk)) ((xs_deprecated_values)))
                          seq
                            bogusForceDataize.write ((((xself).xassertWarns)) ((xDeprecationWarning)) (((xsocket).xntohs)) ((xk)))
                            bogusForceDataize.write ((((xself).xassertWarns)) ((xDeprecationWarning)) (((xsocket).xhtons)) ((xk)))
                xtestGetServBy.write
                  [xself]
                    memory > xudpport
                    memory > xeq
                    memory > xservices
                    memory > xport
                    memory > xport2
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        ((((((xsys).xplatform).xstartswith)) ((((unsupported)) ("freebsd") ("netbsd") ("gnukfreebsd")))).or (((unsupported)) (((xsys).xplatform)) ((((unsupported)) ("linux") ("darwin"))))).if
                          xservices.write (((unsupported)) ("daytime") ("qotd") ("domain"))
                          xservices.write (((unsupported)) ("echo") ("daytime") ("domain"))
                        (((unsupported)) ((xservice)) ((xservices)))
                          (((unsupported)) ((xOSError)))
                            seq
                              xport.write ((((xsocket).xgetservbyname)) ((xservice)) ("tcp"))
                              (((unsupported)) 0)
                          (((unsupported)) ((xOSError)))
                        (((((xhasattr)) ((xsys)) ("getandroidapilevel")).not).or (((((xsys).xgetandroidapilevel)) 0).geq 23)).if
                          seq
                            xport2.write ((((xsocket).xgetservbyname)) ((xservice)))
                            bogusForceDataize.write (((xeq)) ((xport)) ((xport2)))
                        (((unsupported)) ((xOSError)))
                          xudpport.write ((((xsocket).xgetservbyname)) ((xservice)) ("udp"))
                          xudpport.write "None: is there a None literal in the EO language?"
                          bogusForceDataize.write (((xeq)) ((xudpport)) ((xport)))
                        (((xsupport).xis_android).not).if
                          bogusForceDataize.write (((xeq)) (((((xsocket).xgetservbyport)) ((xport2)))) ((xservice)))
                        bogusForceDataize.write (((xeq)) (((((xsocket).xgetservbyport)) ((xport)) ("tcp"))) ((xservice)))
                        (((unsupported)) ((xudpport)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((xeq)) (((((xsocket).xgetservbyport)) ((xudpport)) ("udp"))) ((xservice)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xgetservbyport)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xgetservbyport)) (65536))
                xtestDefaultTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgetdefaulttimeout)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgettimeout)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((xsocket_setdefaulttimeout)) (10))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgetdefaulttimeout)) 0)) (10))
                            (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xgettimeout)) 0)) (10))
                            bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsocket).xgetdefaulttimeout)) 0)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xgettimeout)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsocket).xsetdefaulttimeout)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsocket).xsetdefaulttimeout)) ("spam"))
                xtestIPv4_inet_aton_fourbytes.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (("x00".mul 4)) (((((xsocket).xinet_aton)) ("0.0.0.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("xff".mul 4)) (((((xsocket).xinet_aton)) ("255.255.255.255"))))
                xtestIPv4toString.write
                  [xself]
                    memory > xassertInvalid
                    memory > xg
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        xg.write (((unsupported)) ((((xinet_pton)) ((xAF_INET)) ((xa)))))
                        xassertInvalid.write (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOSError)) ((xValueError)))) ((xfunc)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("x00x00x00x00") ((((xf)) ("0.0.0.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xffx00xffx00") ((((xf)) ("255.0.255.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xaaxaaxaaxaa") ((((xf)) ("170.170.170.170"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("x01x02x03x04") ((((xf)) ("1.2.3.4"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xffxffxffxff") ((((xf)) ("255.255.255.255"))))
                        ((xAIX).not).if
                          bogusForceDataize.write (((xassertInvalid)) ((xf)) ("0.0.0."))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) ("300.0.0.0"))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) ("a.0.0.0"))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) ("1.2.3.4.5"))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) ("::1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("x00x00x00x00") ((((xg)) ("0.0.0.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xffx00xffx00") ((((xg)) ("255.0.255.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xaaxaaxaaxaa") ((((xg)) ("170.170.170.170"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("xffxffxffxff") ((((xg)) ("255.255.255.255"))))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) ("0.0.0."))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) ("300.0.0.0"))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) ("a.0.0.0"))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) ("1.2.3.4.5"))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) ("::1"))
                xtestIPv6toString.write
                  [xself]
                    memory > xassertInvalid
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xImportError)))
                          seq
                            seq
                              (((unsupported)) 0)
                              (((unsupported)) 0)
                              (((unsupported)) 0)
                            ((xhas_ipv6).not).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("IPv6 not available"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("could not import needed symbols from socket"))
                        (((xsys).xplatform).eq "win32").if
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write (((xinet_pton)) ((xAF_INET6)) ("::"))
                            (((xe).xwinerror).eq 10022).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("IPv6 might not be supported"))
                        xf.write (((unsupported)) ((((xinet_pton)) ((xAF_INET6)) ((xa)))))
                        xassertInvalid.write (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOSError)) ((xValueError)))) ((xf)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("x00".mul 16)) ((((xf)) ("::"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("x00".mul 16)) ((((xf)) ("0::0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("x00x01".add ("x00".mul 14))) ((((xf)) ("1::"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("x45xefx76xcbx00x1ax56xefxafxebx0bxacx19x24xaexae") ((((xf)) ("45ef:76cb:1a:56ef:afeb:bac:1924:aeae"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((("xadx42x0axbc".add ("x00".mul 4)).add "x01x27x00x00x02x54x00x02")) ((((xf)) ("ad42:abc::127:0:254:2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("x00x12x00x0a".add ("x00".mul 12))) ((((xf)) ("12:a::"))))
                        bogusForceDataize.write (((xassertInvalid)) ("0x20::"))
                        bogusForceDataize.write (((xassertInvalid)) (":::"))
                        bogusForceDataize.write (((xassertInvalid)) ("::0::"))
                        bogusForceDataize.write (((xassertInvalid)) ("1::abc::"))
                        bogusForceDataize.write (((xassertInvalid)) ("1::abc::def"))
                        bogusForceDataize.write (((xassertInvalid)) ("1:2:3:4:5:6"))
                        bogusForceDataize.write (((xassertInvalid)) ("1:2:3:4:5:6:"))
                        bogusForceDataize.write (((xassertInvalid)) ("1:2:3:4:5:6:7:8:0"))
                        ((xAIX).not).if
                          bogusForceDataize.write (((xassertInvalid)) ("1:2:3:4:5:6:7:8:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((("x00".mul 12).add "xfex2ax17x40")) ((((xf)) ("::254.42.23.64"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((("x00x42".add ("x00".mul 8)).add "xa2x9bxfex2ax17x40")) ((((xf)) ("42::a29b:254.42.23.64"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("x00x42xa8xb9x00x00x00x02xffxffxa2x9bxfex2ax17x40") ((((xf)) ("42:a8b9:0:2:ffff:a29b:254.42.23.64"))))
                        bogusForceDataize.write (((xassertInvalid)) ("255.254.253.252"))
                        bogusForceDataize.write (((xassertInvalid)) ("1::260.2.3.0"))
                        bogusForceDataize.write (((xassertInvalid)) ("1::0.be.e.0"))
                        bogusForceDataize.write (((xassertInvalid)) ("1:2:3:4:5:6:7:1.2.3.4"))
                        bogusForceDataize.write (((xassertInvalid)) ("::1.2.3.4:0"))
                        bogusForceDataize.write (((xassertInvalid)) ("0.100.200.0:3:4:5:6:7:8"))
                xtestStringToIPv4.write
                  [xself]
                    memory > xassertInvalid
                    memory > xg
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        xg.write (((unsupported)) ((((xinet_ntop)) ((xAF_INET)) ((xa)))))
                        xassertInvalid.write (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOSError)) ((xValueError)))) ((xfunc)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.0.1.0") ((((xf)) ("x01x00x01x00"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("170.85.170.85") ((((xf)) ("xaax55xaax55"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("255.255.255.255") ((((xf)) ("xffxffxffxff"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.4") ((((xf)) ("x01x02x03x04"))))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) (("x00".mul 3)))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) (("x00".mul 5)))
                        bogusForceDataize.write (((xassertInvalid)) ((xf)) (("x00".mul 16)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("170.85.170.85") ((((xf)) ((((xbytearray)) ("xaax55xaax55"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.0.1.0") ((((xg)) ("x01x00x01x00"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("170.85.170.85") ((((xg)) ("xaax55xaax55"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("255.255.255.255") ((((xg)) ("xffxffxffxff"))))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) (("x00".mul 3)))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) (("x00".mul 5)))
                        bogusForceDataize.write (((xassertInvalid)) ((xg)) (("x00".mul 16)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("170.85.170.85") ((((xg)) ((((xbytearray)) ("xaax55xaax55"))))))
                xtestStringToIPv6.write
                  [xself]
                    memory > xassertInvalid
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xImportError)))
                          seq
                            seq
                              (((unsupported)) 0)
                              (((unsupported)) 0)
                              (((unsupported)) 0)
                            ((xhas_ipv6).not).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("IPv6 not available"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("could not import needed symbols from socket"))
                        (((xsys).xplatform).eq "win32").if
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write (((xinet_ntop)) ((xAF_INET6)) (("x00".mul 16)))
                            (((xe).xwinerror).eq 10022).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("IPv6 might not be supported"))
                        xf.write (((unsupported)) ((((xinet_ntop)) ((xAF_INET6)) ((xa)))))
                        xassertInvalid.write (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOSError)) ((xValueError)))) ((xf)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("::") ((((xf)) (("x00".mul 16)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("::1") ((((xf)) ((("x00".mul 15).add "x01")))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("aef:b01:506:1001:ffff:9997:55:170") ((((xf)) ("x0axefx0bx01x05x06x10x01xffxffx99x97x00x55x01x70"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("::1") ((((xf)) ((((xbytearray)) ((("x00".mul 15).add "x01")))))))
                        bogusForceDataize.write (((xassertInvalid)) (("x12".mul 15)))
                        bogusForceDataize.write (((xassertInvalid)) (("x12".mul 17)))
                        bogusForceDataize.write (((xassertInvalid)) (("x12".mul 4)))
                xtestSockName.write
                  [xself]
                    memory > xname
                    memory > xport
                    memory > xmy_ip_addr
                    memory > xsock
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ("0.0.0.0") ((xport)))))
                        xname.write ((((xsock).xgetsockname)) 0)
                        (((unsupported)) ((xOSError)))
                          xmy_ip_addr.write ((((xsocket).xgethostbyname)) (((((xsocket).xgethostname)) 0)))
                          bogusForceDataize.write ((((xself).xskipTest)) ("name lookup failure"))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ((xname)) (0))) ((((unsupported)) ("0.0.0.0") ((xmy_ip_addr)))) (("%s invalid".mod (((unsupported)) ((xname)) (0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xname)) (1))) ((xport)))
                xtestGetSockOpt.write
                  [xself]
                    memory > xreuse
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        xreuse.write ((((xsock).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xreuse).neq 0)) ("initial mode is reuse"))
                xtestSetSockOpt.write
                  [xself]
                    memory > xreuse
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        bogusForceDataize.write ((((xsock).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)) (1))
                        xreuse.write ((((xsock).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xreuse).eq 0)) ("failed to set reuse mode"))
                xtestSendAfterClose.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsock)))
                          bogusForceDataize.write ((((xsock).xsettimeout)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsock).xsend)) ("spam"))
                xtestCloseException.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) (((xsocket).x_LOCALHOST)) (0))))
                        bogusForceDataize.write ((((((unsupported)) (((xsocket).xsocket)) (((((xsock).xfileno)) 0))).xclose)) 0)
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xsock).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertIn)) (((xerr).xerrno)) ((((unsupported)) (((xerrno).xEBADF)) (((xerrno).xENOTSOCK)))))
                          bogusForceDataize.write ((((xself).xfail)) ("close() should raise EBADF/ENOTSOCK"))
                xtestNewAttributes.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsock)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xfamily)) (((xsocket).xAF_INET)))
                          (((xhasattr)) ((xsocket)) ("SOCK_CLOEXEC")).if
                            bogusForceDataize.write ((((xself).xassertIn)) (((xsock).xtype)) ((((unsupported)) ((((xsocket).xSOCK_STREAM).or ((xsocket).xSOCK_CLOEXEC))) (((xsocket).xSOCK_STREAM)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xtype)) (((xsocket).xSOCK_STREAM)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xproto)) (0))
                xtest_getsockaddrarg.write
                  [xself]
                    memory > xneg_port
                    memory > xport
                    memory > xbig_port
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        xbig_port.write ((xport).add 65536)
                        xneg_port.write ((xport).sub 65536)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsock).xbind)) ((((unsupported)) ((xHOST)) ((xbig_port)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsock).xbind)) ((((unsupported)) ((xHOST)) ((xneg_port)))))
                        (((unsupported)) ((xi)) (((((xitertools).xcount)) 0)))
                          seq
                            xport.write ((((xsupport).xfind_unused_port)) 0)
                            (((unsupported)) ((xOSError)))
                              bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ((xHOST)) ((xport)))))
                              ((((xe).xerrno).neq ((xerrno).xEADDRINUSE)).or ((xi).eq 5)).if
                                (((unsupported)) 0)
                              (((unsupported)) 0)
                xtest_sock_ioctl.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) (((xsocket).xsocket)) ("ioctl"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xsocket)) ("SIO_RCVALL"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xsocket)) ("RCVALL_ON"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xsocket)) ("RCVALL_OFF"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xsocket)) ("SIO_KEEPALIVE_VALS"))))
                        xs.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xioctl)) ((1.neg)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xs).xioctl)) (((xsocket).xSIO_KEEPALIVE_VALS)) ((((unsupported)) (1) (100) (100))))
                xtest_sio_loopback_fast_path.write
                  [xself]
                    memory > xWSAEOPNOTSUPP
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xs).xioctl)) (((xsocket).xSIO_LOOPBACK_FAST_PATH)) (TRUE))
                          seq
                            xWSAEOPNOTSUPP.write 10045
                            (((xexc).xwinerror).eq (xWSAEOPNOTSUPP)).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("SIO_LOOPBACK_FAST_PATH is defined but doesn't implemented in this Windows version"))
                            (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xs).xioctl)) (((xsocket).xSIO_LOOPBACK_FAST_PATH)) ("None: is there a None literal in the EO language?"))
                xtestGetaddrinfo.write
                  [xself]
                    memory > xb
                    memory > xinfos
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) (((xsocket).xgaierror)))
                          bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("localhost") (80))
                          seq
                            (((xerr).xerrno).eq ((xsocket).xEAI_SERVICE)).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("buggy libc version"))
                            (((unsupported)) 0)
                        (((unsupported)) ((xinfo)) (((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xinfo)))) (5))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("localhost") (80))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("127.0.0.1") (80))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("None: is there a None literal in the EO language?") (80))
                        ((xsupport).xIPV6_ENABLED).if
                          bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("::1") (80))
                        (((((xhasattr)) ((xsys)) ("getandroidapilevel")).not).or (((((xsys).xgetandroidapilevel)) 0).geq 23)).if
                          bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("http"))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xHOST)) (80))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?"))
                        xinfos.write ((((xsocket).xgetaddrinfo)) ((xHOST)) (80) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        (((unsupported)) ((((unsupported)) ((xfamily)) ((xtype)) ((x_)) ((x_)) ((x_)))) ((xinfos)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xfamily)) (((xsocket).xAF_INET)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xfamily)))) ("AddressFamily.AF_INET"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xtype)))) ("SocketKind.SOCK_STREAM"))
                        xinfos.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (((xsocket).xSOCK_STREAM)))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xsocktype)) ((x_)) ((x_)) ((x_)))) ((xinfos)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xsocktype)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (0) (((xsocket).xSOL_TCP)))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (0) (0) (((xsocket).xAI_PASSIVE)))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("None: is there a None literal in the EO language?") (0) (((xsocket).xAF_UNSPEC)) (((xsocket).xSOCK_STREAM)) (0) (((xsocket).xAI_PASSIVE)))
                        xa.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?"))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        xa.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (((xsocket).xAF_INET)))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        xa.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (((xsocket).xSOCK_STREAM)))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        xa.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (0) (((xsocket).xSOL_TCP)))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (((xsocket).xSOL_TCP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        xa.write ((((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (0) (0) (0) (((xsocket).xAI_PASSIVE)))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ((xHOST)) ("None: is there a None literal in the EO language?") (((xsocket).xAI_PASSIVE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        xa.write ((((xsocket).xgetaddrinfo)) ("None: is there a None literal in the EO language?") (0) (((xsocket).xAF_UNSPEC)) (((xsocket).xSOCK_STREAM)) (0) (((xsocket).xAI_PASSIVE)))
                        xb.write (((unsupported)) (((xsocket).xgetaddrinfo)) ("None: is there a None literal in the EO language?") (0) (((xsocket).xAF_UNSPEC)) (((xsocket).xSOCK_STREAM)) (0) (((xsocket).xAI_PASSIVE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xsocket).xgetaddrinfo)) ("localhost") ("uD800"))
                        (((xhasattr)) ((xsocket)) ("AI_NUMERICSERV")).if
                          (((unsupported)) (((xsocket).xgaierror)))
                            bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ("localhost") ("None: is there a None literal in the EO language?") (0) (0) (0) (((xsocket).xAI_NUMERICSERV)))
                xtest_getnameinfo.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsocket).xgetnameinfo)) ((((unsupported)) ("mail.python.org") (0))) (0))
                xtest_idna.write
                  [xself]
                    memory > xdomain
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xtransient_internet)) ("python.org"))))
                          bogusForceDataize.write ((((xsocket).xgethostbyname)) ("python.org"))
                        xdomain.write "испытание.pythontest.net"
                        bogusForceDataize.write ((((xsocket).xgethostbyname)) ((xdomain)))
                        bogusForceDataize.write ((((xsocket).xgethostbyname_ex)) ((xdomain)))
                        bogusForceDataize.write ((((xsocket).xgetaddrinfo)) ((xdomain)) (0) (((xsocket).xAF_UNSPEC)) (((xsocket).xSOCK_STREAM)))
                xcheck_sendall_interrupted.write
                  [xself xwith_timeout]
                    memory > xok_handler
                    memory > xraising_handler
                    memory > xold_alarm
                    seq > @
                      seq
                        (((((xhasattr)) ((xsignal)) ("alarm")).not).or ((((xhasattr)) ((xsocket)) ("socketpair")).not)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("signal.alarm and socket.socketpair required for this test"))
                        xok_handler.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xacosh)) (0))
                        xraising_handler.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xacosh)) (0))
                                (((unsupported)) (1) (0))
                        (((unsupported)) ((((unsupported)) ((xc)) ((xs)))) (((((xsocket).xsocketpair)) 0)))
                        xold_alarm.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xraising_handler)))
                        (((unsupported)) 0)
                          seq
                            (xwith_timeout).if
                              bogusForceDataize.write ((((xc).xsettimeout)) (1.5))
                            (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))))
                              seq
                                bogusForceDataize.write ((((xsignal).xalarm)) (1))
                                bogusForceDataize.write ((((xc).xsendall)) (("x".mul ((xsupport).xSOCK_MAX_SIZE))))
                            (xwith_timeout).if
                              seq
                                bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xok_handler)))
                                bogusForceDataize.write ((((xsignal).xalarm)) (1))
                                bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) (((xc).xsendall)) (("x".mul ((xsupport).xSOCK_MAX_SIZE))))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (0))
                            bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xold_alarm)))
                            bogusForceDataize.write ((((xc).xclose)) 0)
                            bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_sendall_interrupted.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_sendall_interrupted)) (FALSE))
                xtest_sendall_interrupted_with_timeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_sendall_interrupted)) (TRUE))
                xtest_dealloc_warn.write
                  [xself]
                    memory > xr
                    memory > xsock
                    memory > xf
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        xr.write (((xrepr)) ((xsock)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xResourceWarning)))) ((xcm)))
                          seq
                            xsock.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ((xr)) ((((xstr)) ((((unsupported)) ((((xcm).xwarning).xargs)) (0))))))
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        xf.write ((((xsock).xmakefile)) ("rb"))
                        xr.write (((xrepr)) ((xsock)))
                        xsock.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        (((unsupported)) (((((xself).xassertWarns)) ((xResourceWarning)))))
                          seq
                            xf.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_name_closed_socketio.write
                  [xself]
                    memory > xfp
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsock)))
                        seq
                          xfp.write ((((xsock).xmakefile)) ("rb"))
                          bogusForceDataize.write ((((xfp).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xfp)))) ("<_io.BufferedReader name=-1>"))
                xtest_unusable_closed_socketio.write
                  [xself]
                    memory > xfp
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                        seq
                          xfp.write (((unsupported)) (((xsock).xmakefile)) ("rb") (0))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xfp).xreadable)) 0)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xfp).xwritable)) 0)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xfp).xseekable)) 0)))
                          bogusForceDataize.write ((((xfp).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfp).xreadable)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfp).xwritable)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfp).xseekable)))
                xtest_socket_close.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ((xHOST)) (0))))
                            bogusForceDataize.write ((((xsocket).xclose)) (((((xsock).xfileno)) 0)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                              bogusForceDataize.write ((((xsock).xlisten)) (1))
                          (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                            bogusForceDataize.write ((((xsock).xclose)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xsocket).xclose)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          bogusForceDataize.write ((((xsocket).xclose)) ((1.neg)))
                xtest_makefile_mode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xmode)) ((((unsupported)) ("r") ("rb") ("rw") ("w") ("wb"))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xmode)))))
                          (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                            (((unsupported)) (((((xsock).xmakefile)) ((xmode)))) ((xfp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xfp).xmode)) ((xmode)))
                xtest_makefile_invalid_mode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xmode)) ((((unsupported)) ("rt") ("x") ("+") ("a"))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xmode)))))
                          (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                            (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("invalid mode"))))
                              bogusForceDataize.write ((((xsock).xmakefile)) ((xmode)))
                xtest_pickle.write
                  [xself]
                    memory > xtype
                    memory > xfamily
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          (((unsupported)) ((xprotocol)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpickle).xdumps)) ((xsock)) ((xprotocol)))
                        (((unsupported)) ((xprotocol)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xfamily.write ((((xpickle).xloads)) (((((xpickle).xdumps)) (((xsocket).xAF_INET)) ((xprotocol)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xfamily)) (((xsocket).xAF_INET)))
                            xtype.write ((((xpickle).xloads)) (((((xpickle).xdumps)) (((xsocket).xSOCK_STREAM)) ((xprotocol)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xtype)) (((xsocket).xSOCK_STREAM)))
                xtest_listen_backlog.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xbacklog)) ((((unsupported)) (0) ((1.neg)))))
                          (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsrv)))
                            seq
                              bogusForceDataize.write ((((xsrv).xbind)) ((((unsupported)) ((xHOST)) (0))))
                              bogusForceDataize.write ((((xsrv).xlisten)) ((xbacklog)))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsrv)))
                          seq
                            bogusForceDataize.write ((((xsrv).xbind)) ((((unsupported)) ((xHOST)) (0))))
                            bogusForceDataize.write ((((xsrv).xlisten)) 0)
                xtest_listen_backlog_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xsrv)))
                          seq
                            bogusForceDataize.write ((((xsrv).xbind)) ((((unsupported)) ((xHOST)) (0))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsrv).xlisten)) ((((x_testcapi).xINT_MAX).add 1)))
                xtest_flowinfo.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xgetnameinfo)) ((((unsupported)) (((xsupport).xHOSTv6)) (0) ((((unsupported)) 0)))) (0))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xs).xbind)) ((((unsupported)) (((xsupport).xHOSTv6)) (0) ((10.neg)))))
                xtest_getaddrinfo_ipv6_basic.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((x_)))) ((xsockaddr)))))) (((((xsocket).xgetaddrinfo)) ("ff02::1de:c0:face:8D") (1234) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xIPPROTO_UDP)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsockaddr)) ((((unsupported)) ("ff02::1de:c0:face:8d") (1234) (0) (0))))
                xtest_getaddrinfo_ipv6_scopeid_symbolic.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xifindex)) ((xtest_interface)))) ((((unsupported)) (((((xsocket).xif_nameindex)) 0)) (0))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((x_)))) ((xsockaddr)))))) (((((xsocket).xgetaddrinfo)) (("ff02::1de:c0:face:8D%".add (xtest_interface))) (1234) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xIPPROTO_UDP)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsockaddr)) ((((unsupported)) ("ff02::1de:c0:face:8d") (1234) (0) ((xifindex)))))
                xtest_getaddrinfo_ipv6_scopeid_numeric.write
                  [xself]
                    memory > xifindex
                    seq > @
                      (((unsupported)) 0)
                        xifindex.write 42
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((x_)))) ((xsockaddr)))))) (((((xsocket).xgetaddrinfo)) (("ff02::1de:c0:face:8D%".add (((xstr)) ((xifindex))))) (1234) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xIPPROTO_UDP)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsockaddr)) ((((unsupported)) ("ff02::1de:c0:face:8d") (1234) (0) ((xifindex)))))
                xtest_getnameinfo_ipv6_scopeid_symbolic.write
                  [xself]
                    memory > xsockaddr
                    memory > xnameinfo
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xifindex)) ((xtest_interface)))) ((((unsupported)) (((((xsocket).xif_nameindex)) 0)) (0))))
                        xsockaddr.write (((unsupported)) ("ff02::1de:c0:face:8D") (1234) (0) ((xifindex)))
                        xnameinfo.write ((((xsocket).xgetnameinfo)) ((xsockaddr)) ((((xsocket).xNI_NUMERICHOST).or ((xsocket).xNI_NUMERICSERV))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnameinfo)) ((((unsupported)) (("ff02::1de:c0:face:8d%".add (xtest_interface))) ("1234"))))
                xtest_getnameinfo_ipv6_scopeid_numeric.write
                  [xself]
                    memory > xsockaddr
                    memory > xnameinfo
                    memory > xifindex
                    seq > @
                      (((unsupported)) 0)
                        xifindex.write 42
                        xsockaddr.write (((unsupported)) ("ff02::1de:c0:face:8D") (1234) (0) ((xifindex)))
                        xnameinfo.write ((((xsocket).xgetnameinfo)) ((xsockaddr)) ((((xsocket).xNI_NUMERICHOST).or ((xsocket).xNI_NUMERICSERV))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnameinfo)) ((((unsupported)) (("ff02::1de:c0:face:8d%".add (((xstr)) ((xifindex))))) ("1234"))))
                xtest_str_for_enums.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xs).xfamily)))) ("AddressFamily.AF_INET"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xs).xtype)))) ("SocketKind.SOCK_STREAM"))
                xtest_socket_consistent_sock_type.write
                  [xself]
                    memory > xsock_type
                    memory > xSOCK_NONBLOCK
                    memory > xSOCK_CLOEXEC
                    seq > @
                      seq
                        xSOCK_NONBLOCK.write (((xgetattr)) ((xsocket)) ("SOCK_NONBLOCK") (0))
                        xSOCK_CLOEXEC.write (((xgetattr)) ((xsocket)) ("SOCK_CLOEXEC") (0))
                        xsock_type.write ((((xsocket).xSOCK_STREAM).or (xSOCK_NONBLOCK)).or (xSOCK_CLOEXEC))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) ((xsock_type)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xs).xsettimeout)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xs).xsettimeout)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xs).xsetblocking)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xs).xsetblocking)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                xtest_unknown_socket_family_repr.write
                  [xself]
                    memory > xunknown_family
                    memory > xfd
                    memory > xsock
                    memory > xunknown_type
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        xfd.write ((((xsock).xdetach)) 0)
                        xunknown_family.write ((((xmax)) (((((((xsocket).xAddressFamily).x__members__).xvalues)) 0))).add 1)
                        xunknown_type.write ((((xmax)) ((((unsupported)) ((xkind)) ((((unsupported)) ((xname)) ((xkind)))) (((((((xsocket).xSocketKind).x__members__).xitems)) 0)) ((((unsupported)) ((xname)) ((((unsupported)) ("SOCK_NONBLOCK") ("SOCK_CLOEXEC")))))))).add 1)
                        (((unsupported)) ((((unsupported)) (((xsocket).xsocket)) ((xunknown_family)) ((xunknown_type)) (23) ((xfd)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xfamily)) ((xunknown_family)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) ((xunknown_type)))
                            bogusForceDataize.write ((((xself).xassertIn)) (((xs).xproto)) ((((unsupported)) (0) (23))))
                xtest__sendfile_use_sendfile.write
                  [xself]
                    memory > xfileno
                    memory > xfd
                    memory > x__init__
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xfd]
                                seq > @
                                  (((unsupported)) (((xself).xfd)) ((xfd)))
                            xfileno.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xfd)))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                          seq
                            xfd.write ((((xos).xopen)) (((xos).xcurdir)) (((xos).xO_RDONLY)))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            (((unsupported)) (((((xself).xassertRaises)) (((xsocket).x_GiveupOnSendfile)))))
                              bogusForceDataize.write ((((xsock).x_sendfile_use_sendfile)) ((((xFile)) ((xfd)))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                              bogusForceDataize.write ((((xsock).x_sendfile_use_sendfile)) ((((xFile)) ((((unsupported)) (2) (1000))))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              bogusForceDataize.write ((((xsock).x_sendfile_use_sendfile)) ((((xFile)) ("None: is there a None literal in the EO language?"))))
                x_test_socket_fileno.write
                  [xself xs xfamily xstype]
                    memory > xs2
                    memory > xfd
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xfamily)) ((xfamily)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) ((xstype)))
                        xfd.write ((((xs).xfileno)) 0)
                        xs2.write (((unsupported)) (((xsocket).xsocket)) ((xfd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs2).xclose)))
                        bogusForceDataize.write ((((xs).xdetach)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xs2).xfamily)) ((xfamily)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xs2).xtype)) ((xstype)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs2).xfileno)) 0)) ((xfd)))
                xtest_socket_fileno.write
                  [xself]
                    memory > xs
                    memory > xtmpdir
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) (((xsupport).xHOST)) (0))))
                        bogusForceDataize.write ((((xself).x_test_socket_fileno)) ((xs)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        (((xhasattr)) ((xsocket)) ("SOCK_DGRAM")).if
                          seq
                            xs.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                            bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) (((xsupport).xHOST)) (0))))
                            bogusForceDataize.write ((((xself).x_test_socket_fileno)) ((xs)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))
                        ((xsupport).xIPV6_ENABLED).if
                          seq
                            xs.write ((((xsocket).xsocket)) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                            bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) (((xsupport).xHOSTv6)) (0) (0) (0))))
                            bogusForceDataize.write ((((xself).x_test_socket_fileno)) ((xs)) (((xsocket).xAF_INET6)) (((xsocket).xSOCK_STREAM)))
                        (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
                          seq
                            xtmpdir.write ((((xtempfile).xmkdtemp)) 0)
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xshutil).xrmtree)) ((xtmpdir)))
                            xs.write ((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                            (((unsupported)) ((xPermissionError)))
                              bogusForceDataize.write ((((xs).xbind)) ((((((xos).xpath).xjoin)) ((xtmpdir)) ("socket"))))
                              bogusForceDataize.write ((((xself).x_test_socket_fileno)) ((xs)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))
                xtest_socket_fileno_rejects_float.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("integer argument expected"))))
                        (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (42.5))
                xtest_socket_fileno_rejects_other_types.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("integer is required"))))
                        (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) ("foo"))
                xtest_socket_fileno_rejects_invalid_socket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("negative file descriptor"))))
                        (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) ((1.neg)))
                xtest_socket_fileno_rejects_negative.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("negative file descriptor"))))
                          (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) ((42.neg)))
                xtest_socket_fileno_requires_valid_fd.write
                  [xself]
                    memory > xWSAENOTSOCK
                    seq > @
                      seq
                        xWSAENOTSOCK.write 10038
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xsocket).xsocket)) (((((xsupport).xmake_bad_fd)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xcm).xexception).xerrno)) ((((unsupported)) (((xerrno).xEBADF)) ((xWSAENOTSOCK)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (((((xsupport).xmake_bad_fd)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xcm).xexception).xerrno)) ((((unsupported)) (((xerrno).xEBADF)) ((xWSAENOTSOCK)))))
                xtest_socket_fileno_requires_socket_fd.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xtempfile).xNamedTemporaryFile)) 0)) ((xafile)))
                        seq
                          (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                            (((unsupported)) (((xsocket).xsocket)) (((((xafile).xfileno)) 0)))
                          (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                            (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (((((xafile).xfileno)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENOTSOCK)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_CAN)) ("SocketCan required for this test."))))
              seq
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                xtestBCMConstants.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtestCreateSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                xtestCreateBCMSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_BCM)))) ((xs)))
                xtestBindAny.write
                  [xself]
                    memory > xaddress
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                        seq
                          xaddress.write (((unsupported)) (""))
                          bogusForceDataize.write ((((xs).xbind)) ((xaddress)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetsockname)) 0)) ((xaddress)))
                xtestTooLongInterfaceName.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xOSError)) ("interface name too long") (((xs).xbind)) ((((unsupported)) (("x".mul 1024)))))
                xtestLoopback.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                          (((unsupported)) ((xloopback)) ((((unsupported)) (0) (1))))
                            seq
                              bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_CAN_RAW)) (((xsocket).xCAN_RAW_LOOPBACK)) ((xloopback)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xloopback)) (((((xs).xgetsockopt)) (((xsocket).xSOL_CAN_RAW)) (((xsocket).xCAN_RAW_LOOPBACK)))))
                xtestFilter.write
                  [xself]
                    memory > xcan_filter
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xcan_id)) ((xcan_mask)))) ((((unsupported)) (512) (1792))))
                        xcan_filter.write ((((xstruct).xpack)) ("=II") ((xcan_id)) ((xcan_mask)))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_CAN_RAW)) (((xsocket).xCAN_RAW_FILTER)) ((xcan_filter)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcan_filter)) (((((xs).xgetsockopt)) (((xsocket).xSOL_CAN_RAW)) (((xsocket).xCAN_RAW_FILTER)) (8))))
                            bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_CAN_RAW)) (((xsocket).xCAN_RAW_FILTER)) ((((xbytearray)) ((xcan_filter)))))
            (((unsupported)) ((xThreadedCANSocketTest)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_CAN)) ("SocketCan required for this test."))))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xThreadedCANSocketTest).x__init__)) ((xself)) ((xmethodName)))
                xbuild_can_frame.write
                  [xcls xcan_id xdata]
                    memory > xcan_dlc
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xcan_dlc.write (((xlen)) ((xdata)))
                        xdata.write ((((xdata).xljust)) (8) ("x00"))
                        (((unsupported)) (((((xstruct).xpack)) (((xcls).xcan_frame_fmt)) ((xcan_id)) ((xcan_dlc)) ((xdata)))))
                xdissect_can_frame.write
                  [xcls xframe]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xcan_id)) ((xcan_dlc)) ((xdata)))) (((((xstruct).xunpack)) (((xcls).xcan_frame_fmt)) ((xframe)))))
                        (((unsupported)) ((((unsupported)) ((xcan_id)) ((xcan_dlc)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xcan_dlc)))))))))
                xtestSendFrame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xcf)) ((xaddr)))) ((((((xself).xs).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcf)) ((xcf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaddr)) (0))) (((xself).xinterface)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaddr)) (1))) (((xsocket).xAF_CAN)))
                x_testSendFrame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcf)) (((((xself).xbuild_can_frame)) (0) ("x01x02x03x04x05"))))
                        bogusForceDataize.write (((((xself).xcli).xsend)) (((xself).xcf)))
                xtestSendMaxFrame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xcf)) ((xaddr)))) ((((((xself).xs).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcf)) ((xcf)))
                x_testSendMaxFrame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcf)) (((((xself).xbuild_can_frame)) (0) (("x07".mul 8)))))
                        bogusForceDataize.write (((((xself).xcli).xsend)) (((xself).xcf)))
                xtestSendMultiFrames.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xcf)) ((xaddr)))) ((((((xself).xs).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcf1)) ((xcf)))
                        (((unsupported)) ((((unsupported)) ((xcf)) ((xaddr)))) ((((((xself).xs).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcf2)) ((xcf)))
                x_testSendMultiFrames.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcf1)) (((((xself).xbuild_can_frame)) (7) ("x44x33x22x11"))))
                        bogusForceDataize.write (((((xself).xcli).xsend)) (((xself).xcf1)))
                        (((unsupported)) (((xself).xcf2)) (((((xself).xbuild_can_frame)) (18) ("x99x22x33"))))
                        bogusForceDataize.write (((((xself).xcli).xsend)) (((xself).xcf2)))
                x_testBCM.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xcf)) ((xaddr)))) ((((((xself).xcli).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcf)) ((xcf)))
                        (((unsupported)) ((((unsupported)) ((xcan_id)) ((xcan_dlc)) ((xdata)))) (((((xself).xdissect_can_frame)) ((xcf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcan_id)) ((xcan_id)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                xtestBCM.write
                  [xself]
                    memory > xcount
                    memory > xbcm_can_id
                    memory > xheader_plus_frame
                    memory > xnframes
                    memory > xival2_seconds
                    memory > xflags
                    memory > xheader
                    memory > xbcm
                    memory > xbytes_sent
                    memory > xival1_seconds
                    memory > xival2_usec
                    memory > xival1_usec
                    memory > xopcode
                    seq > @
                      (((unsupported)) 0)
                        xbcm.write ((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_BCM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xbcm).xclose)))
                        bogusForceDataize.write ((((xbcm).xconnect)) ((((unsupported)) (((xself).xinterface)))))
                        (((unsupported)) (((xself).xcan_id)) (291))
                        (((unsupported)) (((xself).xdata)) ((((xbytes)) ((((unsupported)) (192) (255) (238))))))
                        (((unsupported)) (((xself).xcf)) (((((xself).xbuild_can_frame)) (((xself).xcan_id)) (((xself).xdata)))))
                        xopcode.write ((xsocket).xCAN_BCM_TX_SEND)
                        xflags.write 0
                        xcount.write 0
                        (((unsupported)) ((xival1_seconds)) ((xival1_usec)) ((xival2_seconds)) ((xival2_usec)) (0))
                        xbcm_can_id.write 546
                        xnframes.write 1
                        (((unsupported)) (((((xlen)) (((xself).xcf))).eq 16)))
                        xheader.write ((((xstruct).xpack)) (((xself).xbcm_cmd_msg_fmt)) ((xopcode)) ((xflags)) ((xcount)) ((xival1_seconds)) ((xival1_usec)) ((xival2_seconds)) ((xival2_usec)) ((xbcm_can_id)) ((xnframes)))
                        xheader_plus_frame.write ((xheader).add ((xself).xcf))
                        xbytes_sent.write ((((xbcm).xsend)) ((xheader_plus_frame)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbytes_sent)) ((((xlen)) ((xheader_plus_frame)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_CAN_ISOTP)) ("CAN ISOTP required for this test."))))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((xself).xinterface)) ("vcan0"))
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtestCreateSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_RAW)) (((xsocket).xCAN_RAW)))) ((xs)))
                xtestCreateISOTPSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_ISOTP)))) ((xs)))
                xtestTooLongInterfaceName.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_ISOTP)))) ((xs)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xOSError)) ("interface name too long"))))
                          bogusForceDataize.write ((((xs).xbind)) ((((unsupported)) (("x".mul 1024)) (1) (2))))
                xtestBind.write
                  [xself]
                    memory > xaddr
                    seq > @
                      (((unsupported)) ((xOSError)))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_CAN)) (((xsocket).xSOCK_DGRAM)) (((xsocket).xCAN_ISOTP)))) ((xs)))
                          seq
                            xaddr.write (((unsupported)) (((xself).xinterface)) (291) (1110))
                            bogusForceDataize.write ((((xs).xbind)) ((xaddr)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetsockname)) 0)) ((xaddr)))
                        (((xe).xerrno).eq ((xerrno).xENODEV)).if
                          bogusForceDataize.write ((((xself).xskipTest)) (("network interface `%s` does not exist".mod ((xself).xinterface))))
                          (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_RDS)) ("RDS sockets required for this test."))))
              seq
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                xtestCreateSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_RDS)) (((xsocket).xSOCK_SEQPACKET)) (0))) ((xs)))
                xtestSocketBufferSize.write
                  [xself]
                    memory > xbufsize
                    seq > @
                      seq
                        xbufsize.write 16384
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xPF_RDS)) (((xsocket).xSOCK_SEQPACKET)) (0))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_RCVBUF)) ((xbufsize)))
                            bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_SNDBUF)) ((xbufsize)))
            (((unsupported)) ((xThreadedRDSSocketTest)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_RDS)) ("RDS sockets required for this test."))))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xThreadedRDSSocketTest).x__init__)) ((xself)) ((xmethodName)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xevt)) (((((xthreading).xEvent)) 0)))
                xtestSendAndRecv.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcli_addr)) ((xaddr)))
                x_testSendAndRecv.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdata)) ("spam"))
                        bogusForceDataize.write (((((xself).xcli).xsendto)) (((xself).xdata)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestPeek.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)) (((xsocket).xMSG_PEEK)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                x_testPeek.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdata)) ("spam"))
                        bogusForceDataize.write (((((xself).xcli).xsendto)) (((xself).xdata)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestSendAndRecvMsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xancdata)) ((xmsg_flags)) ((xaddr)))) ((((((xself).xserv).xrecvmsg)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                x_testSendAndRecvMsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xdata)) (("hello ".mul 10)))
                        bogusForceDataize.write (((((xself).xcli).xsendmsg)) ((((unsupported)) (((xself).xdata)))) ((((unsupported)) 0)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestSendAndRecvMulti.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata1)) ((xdata)))
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata2)) ((xdata)))
                x_testSendAndRecvMulti.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdata1)) ("bacon"))
                        bogusForceDataize.write (((((xself).xcli).xsendto)) (((xself).xdata1)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                        (((unsupported)) (((xself).xdata2)) ("egg"))
                        bogusForceDataize.write (((((xself).xcli).xsendto)) (((xself).xdata2)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestSelect.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)) ((xx)))) (((((xselect).xselect)) ((((unsupported)) (((xself).xserv)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (3.0))))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xself).xserv)) ((xr)))
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) (((xself).xbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xdata)) ((xdata)))
                x_testSelect.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdata)) ("select"))
                        bogusForceDataize.write (((((xself).xcli).xsendto)) (((xself).xdata)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_QIPCRTR)) ("QIPCRTR sockets required for this test."))))
              seq
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      unsupported
                xtestCreateSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                xtestUnbound.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xs).xgetsockname)) 0)) (1))) (0))
                xtestBindSock.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                        seq
                          (((unsupported)) (((xsupport).xbind_port)) ((xs)) ((((unsupported)) (((((xs).xgetsockname)) 0)) (0))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((((unsupported)) (((((xs).xgetsockname)) 0)) (1))) (0))
                xtestInvalidBindSock.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xsupport).xbind_port)) ((xs)) ((2.neg)))
                xtestAutoBindSock.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_QIPCRTR)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                        seq
                          bogusForceDataize.write ((((xs).xconnect)) ((((unsupported)) (123) (123))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((((unsupported)) (((((xs).xgetsockname)) 0)) (1))) (0))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((unsupported)) ((xfcntl)) ("None: is there a None literal in the EO language?"))) ("need fcntl"))) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_VSOCK)) ("VSOCK sockets required for this test."))))
              seq
                xtestCrucialConstants.write
                  [xself]
                    seq > @
                      unsupported
                xtestVSOCKConstants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtestCreateSocket.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_VSOCK)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                xtestSocketBufferSize.write
                  [xself]
                    memory > xorig_min
                    memory > xorig
                    memory > xorig_max
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_VSOCK)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                        seq
                          xorig_max.write ((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MAX_SIZE)))
                          xorig.write ((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_SIZE)))
                          xorig_min.write ((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MIN_SIZE)))
                          bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MAX_SIZE)) (((xorig_max).mul 2)))
                          bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_SIZE)) (((xorig).mul 2)))
                          bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MIN_SIZE)) (((xorig_min).mul 2)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xorig_max).mul 2)) (((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MAX_SIZE)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xorig).mul 2)) (((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_SIZE)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xorig_min).mul 2)) (((((xs).xgetsockopt)) (((xsocket).xAF_VSOCK)) (((xsocket).xSO_VM_SOCKETS_BUFFER_MIN_SIZE)))))
            (((unsupported)) ((xSocketConnectedTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketConnectedTest).x__init__)) ((xself)) ((xmethodName)))
                xtestRecv.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xcli_conn).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecv.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestOverFlowRecv.write
                  [xself]
                    memory > xseg1
                    memory > xmsg
                    memory > xseg2
                    seq > @
                      seq
                        xseg1.write (((((xself).xcli_conn).xrecv)) (((((xlen)) ((xMSG))).sub 3)))
                        xseg2.write (((((xself).xcli_conn).xrecv)) (1024))
                        xmsg.write ((xseg1).add (xseg2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testOverFlowRecv.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestRecvFrom.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom)) (1024))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvFrom.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestOverFlowRecvFrom.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xseg1)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom)) (((((xlen)) ((xMSG))).sub 3)))))
                        (((unsupported)) ((((unsupported)) ((xseg2)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom)) (1024))))
                        xmsg.write ((xseg1).add (xseg2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testOverFlowRecvFrom.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestSendAll.write
                  [xself]
                    memory > xmsg
                    memory > xread
                    seq > @
                      seq
                        xmsg.write ""
                        while.
                          1
                          [unused]
                            seq > @
                              seq
                                xread.write (((((xself).xcli_conn).xrecv)) (1024))
                                ((xread).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xmsg)) ((xread)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (("f".mul 2048)))
                x_testSendAll.write
                  [xself]
                    memory > xbig_chunk
                    seq > @
                      seq
                        xbig_chunk.write ("f".mul 2048)
                        bogusForceDataize.write (((((xself).xserv_conn).xsendall)) ((xbig_chunk)))
                xtestFromFd.write
                  [xself]
                    memory > xmsg
                    memory > xfd
                    memory > xsock
                    seq > @
                      seq
                        xfd.write (((((xself).xcli_conn).xfileno)) 0)
                        xsock.write ((((xsocket).xfromfd)) ((xfd)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsock)) (((xsocket).xsocket)))
                        xmsg.write ((((xsock).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testFromFd.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestDup.write
                  [xself]
                    memory > xmsg
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((((xself).xcli_conn).xdup)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        xmsg.write ((((xsock).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testDup.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestShutdown.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xcli_conn).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xdone).xwait)) 0)
                x_testShutdown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xserv_conn).xshutdown)) (2))
                xtestShutdown_overflow.write ((((xsupport).xcpython_only)) ((xtestShutdown)))
                x_testShutdown_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((((xself).xserv_conn).xshutdown)) ((((x_testcapi).xINT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((((xself).xserv_conn).xshutdown)) ((2.add (((x_testcapi).xUINT_MAX).add 1))))
                        bogusForceDataize.write (((((xself).xserv_conn).xshutdown)) (2))
                xtestDetach.write
                  [xself]
                    memory > xfileno
                    memory > xmsg
                    memory > xsock
                    memory > xf
                    seq > @
                      seq
                        xfileno.write (((((xself).xcli_conn).xfileno)) 0)
                        xf.write (((((xself).xcli_conn).xdetach)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xf)) ((xfileno)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xcli_conn).x_closed)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xcli_conn).xrecv)) (1024))
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        xsock.write (((unsupported)) (((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) ((xf)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        xmsg.write ((((xsock).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testDetach.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
            (((unsupported)) ((xThreadedUDPSocketTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xThreadedUDPSocketTest).x__init__)) ((xself)) ((xmethodName)))
                xtestSendtoAndRecv.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xserv).xrecv)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testSendtoAndRecv.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xsendto)) ((xMSG)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestRecvFrom.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xaddr)))) ((((((xself).xserv).xrecvfrom)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvFrom.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xsendto)) ((xMSG)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestRecvFromNegative.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xserv).xrecvfrom)) ((1.neg)))
                x_testRecvFromNegative.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xsendto)) ((xMSG)) (0) ((((unsupported)) ((xHOST)) (((xself).xport)))))
            (((unsupported)) ((xThreadSafeCleanupTestCase)))
              seq
                xfail_timeout.write 3.0
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xmisc_event)) (((((xthreading).xEvent)) 0)))
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                xsendToServer.write
                  [xself xmsg]
                    seq > @
                      (((unsupported)) ((((((xself).xcli_sock).xsend)) ((xmsg)))))
                xsendmsg_to_server_defaults.write (((unsupported)) 0)
                xsendmsgToServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xself).xcli_sock).xsendmsg)) ((((unsupported)) (((xargs).add (((unsupported)) (((xself).xsendmsg_to_server_defaults)) ((((unsupported)) ((((xlen)) ((xargs))))))))))))))
                xdoRecvmsg.write
                  [xself xsock xbufsize]
                    memory > xresult
                    seq > @
                      (((unsupported)) 0)
                        xresult.write ((((xsock).xrecvmsg)) ((xbufsize)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xregisterRecvmsgResult)) ((xresult)))
                        (((unsupported)) ((xresult)))
                xregisterRecvmsgResult.write
                  [xself xresult]
                    seq > @
                xcheckRecvmsgAddress.write
                  [xself xaddr1 xaddr2]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xaddr1)) ((xaddr2)))
                xmsg_flags_common_unset.write 0
                (((unsupported)) ((xname)) ((((unsupported)) ("MSG_CTRUNC") ("MSG_OOB"))))
                  (((unsupported)) ((xmsg_flags_common_unset)) ((((xgetattr)) ((xsocket)) ((xname)) (0))))
                xmsg_flags_common_set.write 0
                xmsg_flags_eor_indicator.write 0
                xmsg_flags_non_eor_indicator.write 0
                xcheckFlags.write
                  [xself xflags xeor xcheckset xcheckunset xignore]
                    memory > xdefaultunset
                    memory > xmask
                    memory > xdefaultset
                    memory > xinboth
                    seq > @
                      (((unsupported)) 0)
                        xdefaultset.write ((xself).xmsg_flags_common_set)
                        xdefaultunset.write ((xself).xmsg_flags_common_unset)
                        (xeor).if
                          seq
                            (((unsupported)) ((xdefaultset)) (((xself).xmsg_flags_eor_indicator)))
                            (((unsupported)) ((xdefaultunset)) (((xself).xmsg_flags_non_eor_indicator)))
                          (((unsupported)) ((xeor)) ("None: is there a None literal in the EO language?")).if
                            seq
                              (((unsupported)) ((xdefaultset)) (((xself).xmsg_flags_non_eor_indicator)))
                              (((unsupported)) ((xdefaultunset)) (((xself).xmsg_flags_eor_indicator)))
                        (((unsupported)) ((xdefaultset)) (((xcheckunset).neg)))
                        (((unsupported)) ((xdefaultunset)) (((xcheckset).neg)))
                        (((unsupported)) ((xcheckset)) ((xdefaultset)))
                        (((unsupported)) ((xcheckunset)) ((xdefaultunset)))
                        xinboth.write (((xcheckset).and (xcheckunset)).and ((xignore).neg))
                        (xinboth).if
                          (((unsupported)) ((((xException)) (((("contradictory set, unset requirements for flags {0:#x}".xformat)) ((xinboth)))))))
                        xmask.write (((xcheckset).or (xcheckunset)).and ((xignore).neg))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xflags).and (xmask))) (((xcheckset).and (xmask))))
            (((unsupported)) ((xSendrecvmsgBase)))
              xdoRecvmsg.write
                [xself xsock xbufsize]
                  memory > xresult
                  memory > xbuf
                  seq > @
                    (((unsupported)) 0)
                      xbuf.write (((xbytearray)) ((xbufsize)))
                      xresult.write ((((xsock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))) ((((unsupported)) ((xargs)))))
                      bogusForceDataize.write ((((xself).xregisterRecvmsgResult)) ((xresult)))
                      bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xresult)) (0))) (0))
                      bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xresult)) (0))) ((xbufsize)))
                      (((unsupported)) (((((unsupported)) ((((xbytes)) ((((unsupported)) ((xbuf)) ((((unsupported)) ((((unsupported)) ((xresult)) (0)))))))))).add (((unsupported)) ((xresult)) ((((unsupported)) (1)))))))
            (((unsupported)) ((xSendrecvmsgBase)))
              xmsg_flags_non_eor_indicator.write
                [xself]
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((((((xsuper)) 0).xmsg_flags_non_eor_indicator).or ((xsocket).xMSG_TRUNC))))
            (((unsupported)) ((xSendrecvmsgBase)))
              xmsg_flags_eor_indicator.write
                [xself]
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((((((xsuper)) 0).xmsg_flags_eor_indicator).or ((xsocket).xMSG_EOR))))
            (((unsupported)) ((xSendrecvmsgBase)))
              seq
                xserv_sock.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xserv)))
                xcli_sock.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcli)))
                xsendmsg_to_server_defaults.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)) (0) (((xself).xserv_addr)))))
                xsendToServer.write
                  [xself xmsg]
                    seq > @
                      (((unsupported)) ((((((xself).xcli_sock).xsendto)) ((xmsg)) (((xself).xserv_addr)))))
            (((unsupported)) ((xSendrecvmsgBase)))
              seq
                xserv_sock.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcli_conn)))
                xcli_sock.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xserv_conn)))
                xcheckRecvmsgAddress.write
                  [xself xaddr1 xaddr2]
                    seq > @
            (((unsupported)) ((xSendrecvmsgBase)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                      bogusForceDataize.write (((((xself).xserv_sock).xsettimeout)) (((xself).xfail_timeout)))
            (((unsupported)) ((xSendrecvmsgServerTimeoutBase)))
              seq
                xtestSendmsg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))))) ((((xlen)) ((xMSG)))))
                xtestSendmsgDataGenerator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsgDataGenerator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xo)) ((xo)) ((((unsupported)) ((xMSG)))))))) ((((xlen)) ((xMSG)))))
                xtestSendmsgAncillaryGenerator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsgAncillaryGenerator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((xo)) ((xo)) ((((unsupported)) 0)))))) ((((xlen)) ((xMSG)))))
                xtestSendmsgArray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsgArray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) (((((xarray).xarray)) ("B") ((xMSG)))))))) ((((xlen)) ((xMSG)))))
                xtestSendmsgGather.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsgGather.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((((unsupported)) ((xMSG)) ((((unsupported)) (3))))) ((((unsupported)) ((xMSG)) ((((unsupported)) (3))))))))) ((((xlen)) ((xMSG)))))
                xtestSendmsgBadArgs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (1000))) ("done"))
                x_testSendmsgBadArgs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xcli_sock).xsendmsg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ("not in an iterable"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) 0)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) 0)) (0) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xsendToServer)) ("done"))
                xtestSendmsgBadCmsg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (1000))) ("done"))
                x_testSendmsgBadCmsg.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) ((((xobject)) 0)) (0) ("data"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) ((((xobject)) 0)) ("data"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) (0) ((((xobject)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) (0) ("data") (42))))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ("done"))
                xtestSendmsgBadMultiCmsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (1000))) ("done"))
                x_testSendmsgBadMultiCmsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) (0) (0) (""))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) (0) (""))) ((((xobject)) 0)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ("done"))
                xtestSendmsgExcessCmsgReject.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (1000))) ("done"))
                x_testSendmsgExcessCmsgReject.write
                  [xself]
                    seq > @
                      seq
                        ((((xhasattr)) ((xsocket)) ("CMSG_SPACE")).not).if
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (0) (0) (""))) ((((unsupported)) (0) (0) (""))))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((((xcm).xexception).xerrno)))
                        bogusForceDataize.write ((((xself).xsendToServer)) ("done"))
                xtestSendmsgAfterClose.write
                  [xself]
                    seq > @
                x_testSendmsgAfterClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_sock).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))))
            (((unsupported)) ((xSendmsgTests)))
              seq
                xtestSendmsgExplicitNoneAddr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) ((((xlen)) ((xMSG)))))) ((xMSG)))
                x_testSendmsgExplicitNoneAddr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) 0)) (0) ("None: is there a None literal in the EO language?"))) ((((xlen)) ((xMSG)))))
                xtestSendmsgTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (512))) (("a".mul 512)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                x_testSendmsgTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        seq
                          bogusForceDataize.write (((((xself).xcli_sock).xsettimeout)) (0.03))
                          (((unsupported)) (((xsocket).xtimeout)) ((xOSError)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  bogusForceDataize.write ((((xself).xsendmsgToServer)) ((((unsupported)) (("a".mul 512)))))
                            (((xexc).xerrno).neq ((xerrno).xENOMEM)).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xfail)) ("socket.timeout not raised"))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                xtestSendmsgDontWait.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv_sock).xrecv)) (512))) (("a".mul 512)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                x_testSendmsgDontWait.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    bogusForceDataize.write ((((xself).xsendmsgToServer)) ((((unsupported)) (("a".mul 512)))) ((((unsupported)) 0)) (((xsocket).xMSG_DONTWAIT)))
                            bogusForceDataize.write ((((xself).xassertIn)) ((((xcm).xexception).xerrno)) ((((unsupported)) (((xerrno).xEAGAIN)) (((xerrno).xEWOULDBLOCK)) (((xerrno).xENOMEM)))))
                          bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
            (((unsupported)) ((xSendmsgTests)))
              seq
                xtestSendmsgNoDestAddr.write
                  [xself]
                    seq > @
                x_testSendmsgNoDestAddr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xcli_sock).xsendmsg)) ((((unsupported)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xcli_sock).xsendmsg)) ((((unsupported)) ((xMSG)))) ((((unsupported)) 0)) (0) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xSendrecvmsgBase)))
              seq
                xtestRecvmsg.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgExplicitDefaults.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgExplicitDefaults.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgShorter.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (((((xlen)) ((xMSG))).add 42)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgShorter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgTrunc.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (((((xlen)) ((xMSG))).sub 3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((((unsupported)) ((xMSG)) ((((unsupported)) ((3.neg)))))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (FALSE))
                x_testRecvmsgTrunc.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgShortAncillaryBuf.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgShortAncillaryBuf.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgLongAncillaryBuf.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgLongAncillaryBuf.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgAfterClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv_sock).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xself).xdoRecvmsg)) (((xself).xserv_sock)) (1024))
                x_testRecvmsgAfterClose.write
                  [xself]
                    seq > @
                xtestRecvmsgTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        seq
                          bogusForceDataize.write (((((xself).xserv_sock).xsettimeout)) (0.03))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) (((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                x_testRecvmsgTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                xtestRecvmsgPeek.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (((((xlen)) ((xMSG))).sub 3)) (0) (((xsocket).xMSG_PEEK)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((((unsupported)) ((xMSG)) ((((unsupported)) ((3.neg)))))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (FALSE) ((((xgetattr)) ((xsocket)) ("MSG_TRUNC") (0))))
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (0) (((xsocket).xMSG_PEEK)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgPeek.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgFromSendmsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsettimeout)) (((xself).xfail_timeout)))
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgFromSendmsg.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((((unsupported)) ((xMSG)) ((((unsupported)) (3))))) ((((unsupported)) ((xMSG)) ((((unsupported)) (3))))))))) ((((xlen)) ((xMSG)))))
            (((unsupported)) ((xRecvmsgGenericTests)))
              seq
                xtestRecvmsgEOF.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (1024))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (""))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) ("None: is there a None literal in the EO language?"))
                x_testRecvmsgEOF.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli_sock).xclose)) 0)
                xtestRecvmsgOverflow.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xseg1)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (((((xlen)) ((xMSG))).sub 3)))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (FALSE))
                        (((unsupported)) ((((unsupported)) ((xseg2)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) (1024))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                        xmsg.write ((xseg1).add (xseg2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvmsgOverflow.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
            (((unsupported)) ((xRecvmsgGenericTests)))
              seq
                xtestRecvmsgBadArgs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xserv_sock).xrecvmsg)) ((1.neg)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xserv_sock).xrecvmsg)) ((((xlen)) ((xMSG)))) ((1.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg)) ((((unsupported)) ((((xbytearray)) (10))))) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg)) ((((xobject)) 0)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg)) ((((xlen)) ((xMSG)))) ((((xobject)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg)) ((((xlen)) ((xMSG)))) (0) ((((xobject)) 0)))
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) ((((((xself).xserv_sock).xrecvmsg)) ((((xlen)) ((xMSG)))) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgBadArgs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
            (((unsupported)) ((xRecvmsgIntoMixin)) ((xRecvmsgGenericTests)))
              seq
                xtestRecvmsgIntoBadArgs.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((xlen)) ((xMSG)))) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((xbuf)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((((xobject)) 0)))) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ("I'm not writable"))) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)) ((((xobject)) 0)))) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))) ((1.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))) ((((xobject)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))) (0) ((((xobject)) 0)))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xancdata)) ((xflags)) ((xaddr)))) ((((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ((((xbytearray)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgIntoBadArgs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgIntoGenerator.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) ((((xlen)) ((xMSG)))))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xancdata)) ((xflags)) ((xaddr)))) ((((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xo)) ((xo)) ((((unsupported)) ((xbuf)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ((((xbytearray)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgIntoGenerator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgIntoArray.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write ((((xarray).xarray)) ("B") (((((unsupported)) (0)).mul (((xlen)) ((xMSG))))))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xancdata)) ((xflags)) ((xaddr)))) ((((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xbuf)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuf).xtobytes)) 0)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgIntoArray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvmsgIntoScatter.write
                  [xself]
                    memory > xb3
                    memory > xb1
                    memory > xb2
                    seq > @
                      seq
                        xb1.write (((xbytearray)) ("----"))
                        xb2.write (((xbytearray)) ("0123456789"))
                        xb3.write (((xbytearray)) ("--------------"))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xancdata)) ((xflags)) ((xaddr)))) ((((((xself).xserv_sock).xrecvmsg_into)) ((((unsupported)) ((xb1)) ((((unsupported)) ((((xmemoryview)) ((xb2)))) ((((unsupported)) (2) (9))))) ((xb3)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ("Mary had a little lamb"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb1)) ((((xbytearray)) ("Mary"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb2)) ((((xbytearray)) ("01 had a 9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb3)) ((((xbytearray)) ("little lamb---"))))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE))
                x_testRecvmsgIntoScatter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendToServer)) ("Mary had a little lamb"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) ((xImportError)))
                  (((unsupported)) 0)
                  xsocklen_t_limit.write 2147483647
                  xsocklen_t_limit.write (((xmin)) (2147483647) (((x_testcapi).xINT_MAX)))
                xtestCMSG_LEN.write
                  [xself]
                    memory > xret
                    memory > xvalues
                    memory > xtoobig
                    seq > @
                      (((unsupported)) 0)
                        xtoobig.write ((((xself).xsocklen_t_limit).sub ((((xsocket).xCMSG_LEN)) (0))).add 1)
                        xvalues.write ((((xlist)) ((((xrange)) (257)))).add (((xlist)) ((((xrange)) (((xtoobig).sub 257)) ((xtoobig))))))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((xsocket).xCMSG_LEN)) (0))) (((((((xarray).xarray)) ("i")).xitemsize).mul 2)))
                        (((unsupported)) ((xn)) ((xvalues)))
                          seq
                            xret.write ((((xsocket).xCMSG_LEN)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xret).sub ((((xsocket).xCMSG_LEN)) (0)))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertLessEqual)) ((xret)) (((xself).xsocklen_t_limit)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_LEN)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_LEN)) ((xtoobig)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_LEN)) (((xsys).xmaxsize)))
                xtestCMSG_SPACE.write
                  [xself]
                    memory > xret
                    memory > xvalues
                    memory > xlast
                    memory > xtoobig
                    seq > @
                      (((unsupported)) 0)
                        xtoobig.write ((((xself).xsocklen_t_limit).sub ((((xsocket).xCMSG_SPACE)) (1))).add 1)
                        xvalues.write ((((xlist)) ((((xrange)) (257)))).add (((xlist)) ((((xrange)) (((xtoobig).sub 257)) ((xtoobig))))))
                        xlast.write ((((xsocket).xCMSG_SPACE)) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xlast)) (((((((xarray).xarray)) ("i")).xitemsize).mul 2)))
                        (((unsupported)) ((xn)) ((xvalues)))
                          seq
                            xret.write ((((xsocket).xCMSG_SPACE)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xret)) ((xlast)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xret)) (((((xsocket).xCMSG_LEN)) ((xn)))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xret)) (((xn).add ((((xsocket).xCMSG_LEN)) (0)))))
                            bogusForceDataize.write ((((xself).xassertLessEqual)) ((xret)) (((xself).xsocklen_t_limit)))
                            xlast.write (xret)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_SPACE)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_SPACE)) ((xtoobig)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xsocket).xCMSG_SPACE)) (((xsys).xmaxsize)))
            (((unsupported)) ((xSendrecvmsgServerTimeoutBase)))
              seq
                xbadfd.write (21845.neg)
                xnewFDs.write
                  [xself xn]
                    memory > xfds
                    seq > @
                      seq
                        xfds.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xpath)))) (((((xtempfile).xmkstemp)) 0)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xunlink)) ((xpath)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                            bogusForceDataize.write ((((xos).xwrite)) ((xfd)) (((((((xstr)) ((xi))).xencode)) 0)))
                            bogusForceDataize.write ((((xfds).xappend)) ((xfd)))
                        (((unsupported)) ((xfds)))
                xcheckFDs.write
                  [xself xfds]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xn)) ((xfd)))) ((((xenumerate)) ((xfds)))))
                        seq
                          bogusForceDataize.write ((((xos).xlseek)) ((xfd)) (0) (((xos).xSEEK_SET)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xread)) ((xfd)) (1024))) (((((((xstr)) ((xn))).xencode)) 0)))
                xregisterRecvmsgResult.write
                  [xself xresult]
                    seq > @
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xself).xcloseRecvmsgFDs)) ((xresult)))
                xcloseRecvmsgFDs.write
                  [xself xrecvmsg_result]
                    memory > xfds
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((((unsupported)) ((xrecvmsg_result)) (1))))
                        (((xcmsg_level).eq ((xsocket).xSOL_SOCKET)).and ((xcmsg_type).eq ((xsocket).xSCM_RIGHTS))).if
                          seq
                            xfds.write ((((xarray).xarray)) ("i"))
                            bogusForceDataize.write ((((xfds).xfrombytes)) ((((unsupported)) ((xcmsg_data)) ((((unsupported)) (((((xlen)) ((xcmsg_data))).sub ((((xlen)) ((xcmsg_data))).mod ((xfds).xitemsize)))))))))
                            (((unsupported)) ((xfd)) ((xfds)))
                              bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xcreateAndSendFDs.write
                  [xself xn]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") (((((xself).xnewFDs)) ((xn)))))))))))) ((((xlen)) ((xMSG)))))
                xcheckRecvmsgFDs.write
                  [xself xnumfds xresult xmaxcmsgs xignoreflags]
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xancdata)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xancdata)))) ((xmaxcmsgs)))
                        xfds.write ((((xarray).xarray)) ("i"))
                        (((unsupported)) ((xitem)) ((xancdata)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xitem)) ((xtuple)))
                            (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((xitem)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xSOL_SOCKET)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xSCM_RIGHTS)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcmsg_data)) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xlen)) ((xcmsg_data))).mod (xSIZEOF_INT))) (0))
                            bogusForceDataize.write ((((xfds).xfrombytes)) ((xcmsg_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xfds)))) ((xnumfds)))
                        bogusForceDataize.write ((((xself).xcheckFDs)) ((xfds)))
                xtestFDPassSimple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckRecvmsgFDs)) (1) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))))
                x_testFDPassSimple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) ((((((((xarray).xarray)) ("i") (((((xself).xnewFDs)) (1)))).xtobytes)) 0)))))))) ((((xlen)) ((xMSG)))))
                xtestMultipleFDPass.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckRecvmsgFDs)) (4) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))))
                x_testMultipleFDPass.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (4))
                xtestFDPassCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckRecvmsgFDs)) (4) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (((((xsocket).xCMSG_SPACE)) ((4.mul (xSIZEOF_INT))))))))
                x_testFDPassCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (4))
                xtestFDPassCMSG_LEN.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckRecvmsgFDs)) (1) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (((((xsocket).xCMSG_LEN)) ((4.mul (xSIZEOF_INT))))))) (((xsocket).xMSG_CTRUNC)))
                x_testFDPassCMSG_LEN.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestFDPassSeparate.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckRecvmsgFDs)) (2) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))) (2))
                x_testFDPassSeparate.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xfd0)) ((xfd1)))) (((((xself).xnewFDs)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") ((((unsupported)) ((xfd0)))))))) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") ((((unsupported)) ((xfd1)))))))))))) ((((xlen)) ((xMSG)))))
                xtestFDPassSeparateMinSpace.write
                  [xself]
                    memory > xnum_fds
                    seq > @
                      (((unsupported)) 0)
                        xnum_fds.write 2
                        (((unsupported)) (((xself).xcheckRecvmsgFDs)) ((xnum_fds)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).add ((((xsocket).xCMSG_LEN)) (((xSIZEOF_INT).mul (xnum_fds)))))))) (2) (((xsocket).xMSG_CTRUNC)))
                x_testFDPassSeparateMinSpace.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xfd0)) ((xfd1)))) (((((xself).xnewFDs)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") ((((unsupported)) ((xfd0)))))))) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") ((((unsupported)) ((xfd1)))))))))))) ((((xlen)) ((xMSG)))))
                xsendAncillaryIfPossible.write
                  [xself xmsg xancdata]
                    memory > xnbytes
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          xnbytes.write ((((xself).xsendmsgToServer)) ((((unsupported)) ((xmsg)))) ((xancdata)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xe).xerrno)) ((xint)))
                            xnbytes.write ((((xself).xsendmsgToServer)) ((((unsupported)) ((xmsg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xmsg)))))
                xtestFDPassEmpty.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckRecvmsgFDs)) (0) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))) (((xsocket).xMSG_CTRUNC)))
                x_testFDPassEmpty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendAncillaryIfPossible)) ((xMSG)) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (""))))))
                xtestFDPassPartialInt.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xancdata)))) (1))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((xancdata)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xSOL_SOCKET)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xSCM_RIGHTS)))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                x_testFDPassPartialInt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsendAncillaryIfPossible)) ((xMSG)) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) ((((unsupported)) ((((((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xbadfd))))).xtobytes)) 0)) ((((unsupported)) ((1.neg)))))))))))
                xtestFDPassPartialIntInMiddle.write
                  [xself]
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (10240))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xancdata)))) (2))
                        xfds.write ((((xarray).xarray)) ("i"))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((xancdata)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xSOL_SOCKET)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xSCM_RIGHTS)))
                            bogusForceDataize.write ((((xfds).xfrombytes)) ((((unsupported)) ((xcmsg_data)) ((((unsupported)) (((((xlen)) ((xcmsg_data))).sub ((((xlen)) ((xcmsg_data))).mod ((xfds).xitemsize)))))))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xfds)))) (2))
                        bogusForceDataize.write ((((xself).xcheckFDs)) ((xfds)))
                x_testFDPassPartialIntInMiddle.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xfd0)) ((xfd1)))) (((((xself).xnewFDs)) (2))))
                        bogusForceDataize.write ((((xself).xsendAncillaryIfPossible)) ((xMSG)) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) ((((unsupported)) ((((((((xarray).xarray)) ("i") ((((unsupported)) ((xfd0)) (((xself).xbadfd))))).xtobytes)) 0)) ((((unsupported)) ((1.neg)))))))) ((((unsupported)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSCM_RIGHTS)) (((((xarray).xarray)) ("i") ((((unsupported)) ((xfd1)))))))))))
                xcheckTruncatedHeader.write
                  [xself xresult xignoreflags]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                xtestCmsgTruncNoBufSize.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedHeader)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))))) (((xsocket).xMSG_CTRUNC)))
                x_testCmsgTruncNoBufSize.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestCmsgTrunc0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedHeader)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (0))) (((xsocket).xMSG_CTRUNC)))
                x_testCmsgTrunc0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestCmsgTrunc1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckTruncatedHeader)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (1))))
                x_testCmsgTrunc1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckTruncatedHeader)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (((xSIZEOF_INT).mul 2)))))
                x_testCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckTruncatedHeader)) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((((((xsocket).xCMSG_LEN)) (0)).sub 1)))))
                x_testCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xcheckTruncatedArray.write
                  [xself xancbuf xmaxdata xmindata]
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((xancbuf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)))
                        (((xmindata).eq 0).and ((xancdata).eq (((unsupported)) 0))).if
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xancdata)))) (1))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((((unsupported)) ((xancdata)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xSOL_SOCKET)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xSCM_RIGHTS)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((xlen)) ((xcmsg_data)))) ((xmindata)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xcmsg_data)))) ((xmaxdata)))
                        xfds.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xfds).xfrombytes)) ((((unsupported)) ((xcmsg_data)) ((((unsupported)) (((((xlen)) ((xcmsg_data))).sub ((((xlen)) ((xcmsg_data))).mod ((xfds).xitemsize)))))))))
                        bogusForceDataize.write ((((xself).xcheckFDs)) ((xfds)))
                xtestCmsgTruncLen0.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedArray)) (((((xsocket).xCMSG_LEN)) (0))) (0))
                x_testCmsgTruncLen0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (1))
                xtestCmsgTruncLen0Plus1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedArray)) ((((((xsocket).xCMSG_LEN)) (0)).add 1)) (1))
                x_testCmsgTruncLen0Plus1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (2))
                xtestCmsgTruncLen1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedArray)) (((((xsocket).xCMSG_LEN)) ((xSIZEOF_INT)))) ((xSIZEOF_INT)))
                x_testCmsgTruncLen1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (2))
                xtestCmsgTruncLen2Minus1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheckTruncatedArray)) ((((((xsocket).xCMSG_LEN)) ((2.mul (xSIZEOF_INT)))).sub 1)) (((2.mul (xSIZEOF_INT)).sub 1)))
                x_testCmsgTruncLen2Minus1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcreateAndSendFDs)) (2))
            (((unsupported)) ((xSendrecvmsgServerTimeoutBase)))
              seq
                xhop_limit.write 2
                xtraffic_class.write (1.neg)
                xancillaryMapping.write
                  [xself xancdata]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((xancdata)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)))) ((xd)))
                            (((unsupported)) ((((unsupported)) ((xd)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)))))) ((xcmsg_data)))
                        (((unsupported)) ((xd)))
                xcheckHopLimit.write
                  [xself xancbufsize xmaxhop xignoreflags]
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((xancbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xancdata)))) (1))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xancdata)) (0))) ((xtuple)))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((((unsupported)) ((xancdata)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xIPPROTO_IPV6)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xIPV6_HOPLIMIT)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcmsg_data)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                        xa.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xa).xfrombytes)) ((xcmsg_data)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xa)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xa)) (0))) ((xmaxhop)))
                xtestRecvHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimit)) (10240))
                x_testRecvHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvHopLimitCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimit)) (((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT)))))
                x_testRecvHopLimitCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSetHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimit)) (10240) (((xself).xhop_limit)))
                x_testSetHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_HOPLIMIT)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xhop_limit)))))))))))) ((((xlen)) ((xMSG)))))
                xcheckTrafficClassAndHopLimit.write
                  [xself xancbufsize xmaxhop xignoreflags]
                    memory > xtcdata
                    memory > xhldata
                    memory > xancmap
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVTCLASS)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((xancbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xancdata)))) (2))
                        xancmap.write ((((xself).xancillaryMapping)) ((xancdata)))
                        xtcdata.write (((unsupported)) ((xancmap)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_TCLASS)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xtcdata)))) ((xSIZEOF_INT)))
                        xa.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xa).xfrombytes)) ((xtcdata)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xa)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xa)) (0))) (255))
                        xhldata.write (((unsupported)) ((xancmap)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_HOPLIMIT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xhldata)))) ((xSIZEOF_INT)))
                        xa.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xa).xfrombytes)) ((xhldata)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xa)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xa)) (0))) ((xmaxhop)))
                xtestRecvTrafficClassAndHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckTrafficClassAndHopLimit)) (10240))
                x_testRecvTrafficClassAndHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestRecvTrafficClassAndHopLimitCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckTrafficClassAndHopLimit)) ((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).mul 2)))
                x_testRecvTrafficClassAndHopLimitCMSG_SPACE.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSetTrafficClassAndHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckTrafficClassAndHopLimit)) (10240) (((xself).xhop_limit)))
                x_testSetTrafficClassAndHopLimit.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_TCLASS)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xtraffic_class)))))))) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_HOPLIMIT)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xhop_limit)))))))))))) ((((xlen)) ((xMSG)))))
                xtestOddCmsgSize.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckTrafficClassAndHopLimit)) (10240) (((xself).xhop_limit)))
                x_testOddCmsgSize.write
                  [xself]
                    memory > xnbytes
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        (((unsupported)) ((xOSError)))
                          xnbytes.write ((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_TCLASS)) (((((((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xtraffic_class))))).xtobytes)) 0).add "x00")))) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_HOPLIMIT)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xhop_limit)))))))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xe).xerrno)) ((xint)))
                            xnbytes.write ((((xself).xsendmsgToServer)) ((((unsupported)) ((xMSG)))) ((((unsupported)) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_TCLASS)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xtraffic_class)))))))) ((((unsupported)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_HOPLIMIT)) (((((xarray).xarray)) ("i") ((((unsupported)) (((xself).xhop_limit)))))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                xcheckHopLimitTruncatedHeader.write
                  [xself xancbufsize xignoreflags]
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        xargs.write ((((unsupported)) ((xancbufsize)) ("None: is there a None literal in the EO language?")).if (((unsupported)) 0) (((unsupported)) ((xancbufsize))))
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((((unsupported)) ((xargs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                xtestCmsgTruncNoBufSize.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimitTruncatedHeader)) ("None: is there a None literal in the EO language?") (((xsocket).xMSG_CTRUNC)))
                x_testCmsgTruncNoBufSize.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSingleCmsgTrunc0.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimitTruncatedHeader)) (0) (((xsocket).xMSG_CTRUNC)))
                x_testSingleCmsgTrunc0.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSingleCmsgTrunc1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimitTruncatedHeader)) (1))
                x_testSingleCmsgTrunc1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSingleCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimitTruncatedHeader)) ((2.mul (xSIZEOF_INT))))
                x_testSingleCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSingleCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckHopLimitTruncatedHeader)) ((((((xsocket).xCMSG_LEN)) (0)).sub 1)))
                x_testSingleCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSingleCmsgTruncInData.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((((((xsocket).xCMSG_LEN)) ((xSIZEOF_INT))).sub 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xlen)) ((xancdata)))) (1))
                        (xancdata).if
                          seq
                            (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((((unsupported)) ((xancdata)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xIPPROTO_IPV6)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_type)) (((xsocket).xIPV6_HOPLIMIT)))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                x_testSingleCmsgTruncInData.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xcheckTruncatedSecondHeader.write
                  [xself xancbufsize xignoreflags]
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVTCLASS)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) ((xancbufsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)) ((xignoreflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xancdata)))) (1))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) ((((unsupported)) ((xancdata)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xIPPROTO_IPV6)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xcmsg_type)) ((((unsupported)) (((xsocket).xIPV6_TCLASS)) (((xsocket).xIPV6_HOPLIMIT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                        xa.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xa).xfrombytes)) ((xcmsg_data)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xa)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xa)) (0))) (255))
                xtestSecondCmsgTrunc0.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheckTruncatedSecondHeader)) (((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT)))) (((xsocket).xMSG_CTRUNC)))
                x_testSecondCmsgTrunc0.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSecondCmsgTrunc1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckTruncatedSecondHeader)) ((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).add 1)))
                x_testSecondCmsgTrunc1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSecondCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckTruncatedSecondHeader)) ((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).add (2.mul (xSIZEOF_INT)))))
                x_testSecondCmsgTrunc2Int.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSecondCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckTruncatedSecondHeader)) (((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).add ((((xsocket).xCMSG_LEN)) (0))).sub 1)))
                x_testSecondCmsgTruncLen0Minus1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
                xtestSecomdCmsgTruncInData.write
                  [xself]
                    memory > xcmsg_types
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVHOPLIMIT)) (1))
                        bogusForceDataize.write (((((xself).xserv_sock).xsetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_RECVTCLASS)) (1))
                        bogusForceDataize.write (((((xself).xmisc_event).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xmsg)) ((xancdata)) ((xflags)) ((xaddr)))) (((((xself).xdoRecvmsg)) (((xself).xserv_sock)) ((((xlen)) ((xMSG)))) (((((((xsocket).xCMSG_SPACE)) ((xSIZEOF_INT))).add ((((xsocket).xCMSG_LEN)) ((xSIZEOF_INT)))).sub 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xcheckRecvmsgAddress)) ((xaddr)) (((xself).xcli_addr)))
                        (((unsupported)) (((xself).xcheckFlags)) ((xflags)) (TRUE) (((xsocket).xMSG_CTRUNC)))
                        xcmsg_types.write (((unsupported)) (((xsocket).xIPV6_TCLASS)) (((xsocket).xIPV6_HOPLIMIT)))
                        (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) (((((xancdata).xpop)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xIPPROTO_IPV6)))
                        bogusForceDataize.write ((((xcmsg_types).xremove)) ((xcmsg_type)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                        xa.write ((((xarray).xarray)) ("i"))
                        bogusForceDataize.write ((((xa).xfrombytes)) ((xcmsg_data)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xa)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xa)) (0))) (255))
                        (xancdata).if
                          seq
                            (((unsupported)) ((((unsupported)) ((xcmsg_level)) ((xcmsg_type)) ((xcmsg_data)))) (((((xancdata).xpop)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xcmsg_level)) (((xsocket).xIPPROTO_IPV6)))
                            bogusForceDataize.write ((((xcmsg_types).xremove)) ((xcmsg_type)))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xcmsg_data)))) ((xSIZEOF_INT)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xancdata)) ((((unsupported)) 0)))
                x_testSecomdCmsgTruncInData.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xself).xmisc_event).xwait)) (((xself).xfail_timeout)))))
                        bogusForceDataize.write ((((xself).xsendToServer)) ((xMSG)))
            (((unsupported)) ((xSendrecvmsgDgramFlagsBase)) ((xSendrecvmsgConnectionlessBase)) ((xThreadedSocketTestMixin)) ((xUDPTestBase)))
            (((unsupported)) ((xSendmsgConnectionlessTests)) ((xSendrecvmsgUDPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg"))))
            (((unsupported)) ((xRecvmsgTests)) ((xSendrecvmsgUDPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))))
            (((unsupported)) ((xRecvmsgIntoTests)) ((xSendrecvmsgUDPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))))
            (((unsupported)) ((xSendrecvmsgDgramFlagsBase)) ((xSendrecvmsgConnectionlessBase)) ((xThreadedSocketTestMixin)) ((xUDP6TestBase)))
              xcheckRecvmsgAddress.write
                [xself xaddr1 xaddr2]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaddr1)) ((((unsupported)) ((1.neg)))))) ((((unsupported)) ((xaddr2)) ((((unsupported)) ((1.neg)))))))
            (((unsupported)) ((xSendmsgConnectionlessTests)) ((xSendrecvmsgUDP6TestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg"))) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 required for this test."))) ((((xrequireSocket)) ("AF_INET6") ("SOCK_DGRAM"))))
            (((unsupported)) ((xRecvmsgTests)) ((xSendrecvmsgUDP6TestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 required for this test."))) ((((xrequireSocket)) ("AF_INET6") ("SOCK_DGRAM"))))
            (((unsupported)) ((xRecvmsgIntoTests)) ((xSendrecvmsgUDP6TestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 required for this test."))) ((((xrequireSocket)) ("AF_INET6") ("SOCK_DGRAM"))))
            (((unsupported)) ((xRFC3542AncillaryTest)) ((xSendrecvmsgUDP6TestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 required for this test."))) ((((xrequireAttrs)) ((xsocket)) ("IPPROTO_IPV6"))) ((((xrequireSocket)) ("AF_INET6") ("SOCK_DGRAM"))))
            (((unsupported)) ((xRecvmsgIntoMixin)) ((xRFC3542AncillaryTest)) ((xSendrecvmsgUDP6TestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 required for this test."))) ((((xrequireAttrs)) ((xsocket)) ("IPPROTO_IPV6"))) ((((xrequireSocket)) ("AF_INET6") ("SOCK_DGRAM"))))
            (((unsupported)) ((xSendrecvmsgConnectedBase)) ((xConnectedStreamTestMixin)) ((xTCPTestBase)))
            (((unsupported)) ((xSendmsgStreamTests)) ((xSendrecvmsgTCPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg"))))
            (((unsupported)) ((xRecvmsgTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgTCPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))))
            (((unsupported)) ((xRecvmsgIntoTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgTCPTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))))
            (((unsupported)) ((xSendrecvmsgSCTPFlagsBase)) ((xSendrecvmsgConnectedBase)) ((xConnectedStreamTestMixin)) ((xSCTPStreamBase)))
            (((unsupported)) ((xSendmsgStreamTests)) ((xSendrecvmsgSCTPStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg"))) (((((xunittest).xskipIf)) ((xAIX)) ("IPPROTO_SCTP: [Errno 62] Protocol not supported on AIX"))) ((((xrequireSocket)) ("AF_INET") ("SOCK_STREAM") ("IPPROTO_SCTP"))))
            (((unsupported)) ((xRecvmsgTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgSCTPStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))) (((((xunittest).xskipIf)) ((xAIX)) ("IPPROTO_SCTP: [Errno 62] Protocol not supported on AIX"))) ((((xrequireSocket)) ("AF_INET") ("SOCK_STREAM") ("IPPROTO_SCTP"))))
              xtestRecvmsgEOF.write
                [xself]
                  seq > @
                    (((unsupported)) ((xOSError)))
                      bogusForceDataize.write ((((((xsuper)) ((xRecvmsgSCTPStreamTest)) ((xself))).xtestRecvmsgEOF)) 0)
                      seq
                        (((xe).xerrno).neq ((xerrno).xENOTCONN)).if
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xskipTest)) ("sporadic ENOTCONN (kernel issue?) - see issue #13876"))
            (((unsupported)) ((xRecvmsgIntoTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgSCTPStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))) (((((xunittest).xskipIf)) ((xAIX)) ("IPPROTO_SCTP: [Errno 62] Protocol not supported on AIX"))) ((((xrequireSocket)) ("AF_INET") ("SOCK_STREAM") ("IPPROTO_SCTP"))))
              xtestRecvmsgEOF.write
                [xself]
                  seq > @
                    (((unsupported)) ((xOSError)))
                      bogusForceDataize.write ((((((xsuper)) ((xRecvmsgIntoSCTPStreamTest)) ((xself))).xtestRecvmsgEOF)) 0)
                      seq
                        (((xe).xerrno).neq ((xerrno).xENOTCONN)).if
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xskipTest)) ("sporadic ENOTCONN (kernel issue?) - see issue #13876"))
            (((unsupported)) ((xSendrecvmsgConnectedBase)) ((xConnectedStreamTestMixin)) ((xUnixStreamBase)))
            (((unsupported)) ((xSendmsgStreamTests)) ((xSendrecvmsgUnixStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg"))) ((((xrequireAttrs)) ((xsocket)) ("AF_UNIX"))))
            (((unsupported)) ((xRecvmsgTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgUnixStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg"))) ((((xrequireAttrs)) ((xsocket)) ("AF_UNIX"))))
            (((unsupported)) ((xRecvmsgIntoTests)) ((xRecvmsgGenericStreamTests)) ((xSendrecvmsgUnixStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("recvmsg_into"))) ((((xrequireAttrs)) ((xsocket)) ("AF_UNIX"))))
            (((unsupported)) ((xSCMRightsTest)) ((xSendrecvmsgUnixStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg") ("recvmsg"))) ((((xrequireAttrs)) ((xsocket)) ("AF_UNIX") ("SOL_SOCKET") ("SCM_RIGHTS"))))
            (((unsupported)) ((xRecvmsgIntoMixin)) ((xSCMRightsTest)) ((xSendrecvmsgUnixStreamTestBase)) ((((xrequireAttrs)) (((xsocket).xsocket)) ("sendmsg") ("recvmsg_into"))) ((((xrequireAttrs)) ((xsocket)) ("AF_UNIX") ("SOL_SOCKET") ("SCM_RIGHTS"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xorig_alrm_handler
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        xorig_alrm_handler.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((((unsupported)) ((1.div 0)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xorig_alrm_handler)))
                xtimeout.write 4.0
                (((xhasattr)) ((xsignal)) ("setitimer")).if
                  seq
                    xalarm_time.write 0.05
                    xsetAlarm.write
                      [xself xseconds]
                        seq > @
                          bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) ((xseconds)))
                  seq
                    xalarm_time.write 2
                    xsetAlarm.write
                      [xself xseconds]
                        seq > @
                          bogusForceDataize.write ((((xsignal).xalarm)) ((xseconds)))
            (((unsupported)) ((xInterruptedTimeoutBase)) ((xUDPTestBase)) ((((xrequireAttrs)) ((xsignal)) ("siginterrupt"))) (((((xunittest).xskipUnless)) (((((xhasattr)) ((xsignal)) ("alarm")).or (((xhasattr)) ((xsignal)) ("setitimer")))) ("Don't have signal.alarm or signal.setitimer"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) (((xself).xtimeout)))
                xcheckInterruptedRecv.write
                  [xself xfunc]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xsetAlarm)) (((xself).xalarm_time)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))) ((xcm)))
                              bogusForceDataize.write (((xfunc)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                          bogusForceDataize.write ((((xself).xsetAlarm)) (0))
                xtestInterruptedRecvTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecv)) (1024))
                xtestInterruptedRecvIntoTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecv_into)) ((((xbytearray)) (1024))))
                xtestInterruptedRecvfromTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecvfrom)) (1024))
                xtestInterruptedRecvfromIntoTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecvfrom_into)) ((((xbytearray)) (1024))))
                xtestInterruptedRecvmsgTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecvmsg)) (1024))
                xtestInterruptedRecvmsgIntoTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckInterruptedRecv)) ((((xself).xserv).xrecvmsg_into)) ((((unsupported)) ((((xbytearray)) (1024))))))
            (((unsupported)) ((xInterruptedTimeoutBase)) ((xThreadSafeCleanupTestCase)) ((xSocketListeningTestMixin)) ((xTCPTestBase)) ((((xrequireAttrs)) ((xsignal)) ("siginterrupt"))) (((((xunittest).xskipUnless)) (((((xhasattr)) ((xsignal)) ("alarm")).or (((xhasattr)) ((xsignal)) ("setitimer")))) ("Don't have signal.alarm or signal.setitimer"))))
              seq
                xsetUp.write
                  [xself]
                    memory > xcli_thread
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).xserv_conn)) (((((xself).xnewSocket)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xserv_conn).xclose)))
                        xcli_thread.write (((unsupported)) (((xthreading).xThread)) (((xself).xdoConnect)))
                        bogusForceDataize.write ((((xcli_thread).xstart)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xcli_conn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli_conn).xclose)))
                        bogusForceDataize.write ((((xcli_thread).xjoin)) 0)
                        bogusForceDataize.write (((((xself).xserv_conn).xsettimeout)) (((xself).xtimeout)))
                xdoConnect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xconnect)) (((xself).xserv_addr)))
                xcheckInterruptedSend.write
                  [xself xfunc]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))) ((xcm)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).xsetAlarm)) (((xself).xalarm_time)))
                                    bogusForceDataize.write (((xfunc)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                          bogusForceDataize.write ((((xself).xsetAlarm)) (0))
                xtestInterruptedSendTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckInterruptedSend)) ((((xself).xserv_conn).xsend)) (("a".mul 512)))
                xtestInterruptedSendtoTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckInterruptedSend)) ((((xself).xserv_conn).xsendto)) (("a".mul 512)) (((xself).xserv_addr)))
                xtestInterruptedSendmsgTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckInterruptedSend)) ((((xself).xserv_conn).xsendmsg)) ((((unsupported)) (("a".mul 512)))))
            (((unsupported)) ((xThreadedTCPSocketTest)))
              seq
                xtestClose.write
                  [xself]
                    memory > xsd
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xconn).xclose)) 0)
                        xsd.write ((xself).xcli)
                        (((unsupported)) ((((unsupported)) ((xread)) ((xwrite)) ((xerr)))) (((((xselect).xselect)) ((((unsupported)) ((xsd)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (1.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xread)) ((((unsupported)) ((xsd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsd).xrecv)) (1))) (""))
                        bogusForceDataize.write ((((xconn).xclose)) 0)
                        bogusForceDataize.write ((((xconn).xclose)) 0)
                x_testClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                        bogusForceDataize.write ((((xtime).xsleep)) (1.0))
            (((unsupported)) ((xSocketPairTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketPairTest).x__init__)) ((xself)) ((xmethodName)))
                x_check_defaults.write
                  [xself xsock]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsock)) (((xsocket).xsocket)))
                        (((xhasattr)) ((xsocket)) ("AF_UNIX")).if
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xfamily)) (((xsocket).xAF_UNIX)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xfamily)) (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xtype)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xproto)) (0))
                x_testDefaults.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_defaults)) (((xself).xcli)))
                xtestDefaults.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_defaults)) (((xself).xserv)))
                xtestRecv.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xserv).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecv.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xsend)) ((xMSG)))
                xtestSend.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv).xsend)) ((xMSG)))
                x_testSend.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xcli).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
            (((unsupported)) ((xThreadedTCPSocketTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xevent)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xThreadedTCPSocketTest).x__init__)) ((xself)) ((xmethodName)))
                xassert_sock_timeout.write
                  [xself xsock xtimeout]
                    memory > xfd_blocking
                    memory > xblocking
                    memory > xflag
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv).xgettimeout)) 0)) ((xtimeout)))
                        xblocking.write ((xtimeout).neq 0.0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xgetblocking)) 0)) ((xblocking)))
                        (((unsupported)) ((xfcntl)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xfd_blocking.write (((unsupported)) ((xtimeout)) ("None: is there a None literal in the EO language?"))
                            xflag.write ((((xfcntl).xfcntl)) ((xsock)) (((xfcntl).xF_GETFL)) (((xos).xO_NONBLOCK)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xbool)) (((xflag).and ((xos).xO_NONBLOCK)))).not)) ((xfd_blocking)))
                xtestSetBlocking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xsetblocking)) (TRUE))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xserv).xsetblocking)) (FALSE))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) (0.0))
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) (0))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) (0))
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) (10))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) (10))
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) (0))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) (0))
                x_testSetBlocking.write
                  [xself]
                    seq > @
                xtestSetBlocking_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((x_testcapi).xUINT_MAX).geq ((x_testcapi).xULONG_MAX)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("needs UINT_MAX < ULONG_MAX"))
                        bogusForceDataize.write (((((xself).xserv).xsetblocking)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xserv).xgettimeout)) 0)) (0.0))
                        bogusForceDataize.write (((((xself).xserv).xsetblocking)) ((((x_testcapi).xUINT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((((xself).xserv).xgettimeout)) 0)))
                x_testSetBlocking_overflow.write ((((xsupport).xcpython_only)) ((x_testSetBlocking)))
                xtestInitNonBlocking.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        (((unsupported)) (((xself).xserv)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) ((((xsocket).xSOCK_STREAM).or ((xsocket).xSOCK_NONBLOCK))))))
                        bogusForceDataize.write ((((xself).xassert_sock_timeout)) (((xself).xserv)) (0))
                x_testInitNonBlocking.write
                  [xself]
                    seq > @
                xtestInheritFlagsBlocking.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xsocket_setdefaulttimeout)) ("None: is there a None literal in the EO language?"))))
                        seq
                          bogusForceDataize.write (((((xself).xserv).xsettimeout)) (10))
                          (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((((xconn).xgettimeout)) 0)))
                x_testInheritFlagsBlocking.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestInheritFlagsTimeout.write
                  [xself]
                    memory > xdefault_timeout
                    seq > @
                      seq
                        xdefault_timeout.write 20.0
                        (((unsupported)) ((((xsocket_setdefaulttimeout)) ((xdefault_timeout)))))
                          seq
                            bogusForceDataize.write (((((xself).xserv).xsettimeout)) (10))
                            (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xconn).xgettimeout)) 0)) ((xdefault_timeout)))
                x_testInheritFlagsTimeout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestAccept.write
                  [xself]
                    memory > xdt
                    memory > xstart_time
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xsetblocking)) (0))
                        xstart_time.write ((((xtime).xmonotonic)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xBlockingIOError)))))
                          (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        xdt.write (((((xtime).xmonotonic)) 0).sub (xstart_time))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xdt)) (1.0))
                        bogusForceDataize.write (((((xself).xevent).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xread)) ((xwrite)) ((xerr)))) (((((xselect).xselect)) ((((unsupported)) (((xself).xserv)))) ((((unsupported)) 0)) ((((unsupported)) 0)) ((xMAIN_TIMEOUT)))))
                        (((unsupported)) (((xself).xserv)) ((xread))).if
                          bogusForceDataize.write ((((xself).xfail)) ("Error trying to do accept after select."))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xconn).xgettimeout)) 0)))
                x_testAccept.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevent).xwait)) 0)
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                xtestRecv.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        bogusForceDataize.write ((((xconn).xsetblocking)) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((xBlockingIOError)))))
                          xmsg.write ((((xconn).xrecv)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write (((((xself).xevent).xset)) 0)
                        (((unsupported)) ((((unsupported)) ((xread)) ((xwrite)) ((xerr)))) (((((xselect).xselect)) ((((unsupported)) ((xconn)))) ((((unsupported)) 0)) ((((unsupported)) 0)) ((xMAIN_TIMEOUT)))))
                        (((unsupported)) ((xconn)) ((xread))).if
                          bogusForceDataize.write ((((xself).xfail)) ("Error during select call to non-blocking socket."))
                        xmsg.write ((((xconn).xrecv)) ((((xlen)) ((xMSG)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecv.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((((unsupported)) ((xHOST)) (((xself).xport)))))
                        bogusForceDataize.write (((((xself).xevent).xwait)) 0)
                        bogusForceDataize.write (((((xself).xcli).xsendall)) ((xMSG)))
            (((unsupported)) ((xSocketConnectedTest)))
              seq
                (((unsupported)) 0)
                xbufsize.write (1.neg)
                xencoding.write "utf-8"
                xerrors.write "strict"
                xnewline.write "None: is there a None literal in the EO language?"
                xread_mode.write "rb"
                xread_msg.write (xMSG)
                xwrite_mode.write "wb"
                xwrite_msg.write (xMSG)
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketConnectedTest).x__init__)) ((xself)) ((xmethodName)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xself).xevt1)) (((xself).xevt2)) (((xself).xserv_finished)) (((xself).xcli_finished)))) ((((unsupported)) (((((xthreading).xEvent)) 0)) ((xi)) ((((xrange)) (4))))))
                        bogusForceDataize.write ((((xSocketConnectedTest).xsetUp)) ((xself)))
                        (((unsupported)) (((xself).xread_file)) ((((unsupported)) ((((xself).xcli_conn).xmakefile)) (((xself).xread_mode)) (((xself).xbufsize)) (((xself).xencoding)) (((xself).xerrors)) (((xself).xnewline)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv_finished).xset)) 0)
                        bogusForceDataize.write (((((xself).xread_file).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xread_file).xclosed)))
                        (((unsupported)) (((xself).xread_file)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xSocketConnectedTest).xtearDown)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xSocketConnectedTest).xclientSetUp)) ((xself)))
                        (((unsupported)) (((xself).xwrite_file)) ((((unsupported)) ((((xself).xserv_conn).xmakefile)) (((xself).xwrite_mode)) (((xself).xbufsize)) (((xself).xencoding)) (((xself).xerrors)) (((xself).xnewline)))))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_finished).xset)) 0)
                        bogusForceDataize.write (((((xself).xwrite_file).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xwrite_file).xclosed)))
                        (((unsupported)) (((xself).xwrite_file)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xSocketConnectedTest).xclientTearDown)) ((xself)))
                xtestReadAfterTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xsettimeout)) (1))
                        bogusForceDataize.write (((((xself).xread_file).xread)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) ((((xself).xread_file).xread)) (1))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xctx)))
                          bogusForceDataize.write (((((xself).xread_file).xread)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)) ("cannot read from timed out object") ((((xstr)) (((xctx).xexception)))))
                x_testReadAfterTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) ((((unsupported)) (((xself).xwrite_msg)) ((((unsupported)) (0) (3))))))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                        bogusForceDataize.write (((((xself).xserv_finished).xwait)) 0)
                xtestSmallRead.write
                  [xself]
                    memory > xsecond_seg
                    memory > xmsg
                    memory > xfirst_seg
                    seq > @
                      seq
                        xfirst_seg.write (((((xself).xread_file).xread)) (((((xlen)) (((xself).xread_msg))).sub 3)))
                        xsecond_seg.write (((((xself).xread_file).xread)) (3))
                        xmsg.write ((xfirst_seg).add (xsecond_seg))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                x_testSmallRead.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestFullRead.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xread_file).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                x_testFullRead.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xclose)) 0)
                xtestUnbufferedRead.write
                  [xself]
                    memory > xchar
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((((xtype)) (((xself).xread_msg)))) 0)
                        while.
                          1
                          [unused]
                            seq > @
                              seq
                                xchar.write (((((xself).xread_file).xread)) (1))
                                ((xchar).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xbuf)) ((xchar)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) (((xself).xread_msg)))
                x_testUnbufferedRead.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestReadline.write
                  [xself]
                    memory > xline
                    seq > @
                      seq
                        xline.write (((((xself).xread_file).xreadline)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) (((xself).xread_msg)))
                x_testReadline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestCloseAfterMakefile.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        xmsg.write (((((xself).xread_file).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                x_testCloseAfterMakefile.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestMakefileAfterMakefileClose.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xread_file).xclose)) 0)
                        xmsg.write (((((xself).xcli_conn).xrecv)) ((((xlen)) ((xMSG)))))
                        (((xisinstance)) (((xself).xread_msg)) ((xstr))).if
                          xmsg.write ((((xmsg).xdecode)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                x_testMakefileAfterMakefileClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestClosedAttr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xself).xread_file).xclosed).not)))
                x_testClosedAttr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xself).xwrite_file).xclosed).not)))
                xtestAttributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xread_file).xmode)) (((xself).xread_mode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xread_file).xname)) ((((((xself).xcli_conn).xfileno)) 0)))
                x_testAttributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xwrite_file).xmode)) (((xself).xwrite_mode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xwrite_file).xname)) ((((((xself).xserv_conn).xfileno)) 0)))
                xtestRealClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xread_file).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xread_file).xfileno)))
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xcli_conn).xgetsockname)))
                x_testRealClose.write
                  [xself]
                    seq > @
            (((unsupported)) ((xFileObjectClassTestCase)))
              seq
                (((unsupported)) 0)
                xbufsize.write 0
                xtestUnbufferedReadline.write
                  [xself]
                    memory > xline
                    seq > @
                      seq
                        xline.write (((((xself).xread_file).xreadline)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) (("A. ".add ((xself).xwrite_msg))))
                        (((unsupported)) (((xself).xread_file)) ((((((xself).xcli_conn).xmakefile)) ("rb") (0))))
                        xline.write (((((xself).xread_file).xreadline)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) (("B. ".add ((xself).xwrite_msg))))
                x_testUnbufferedReadline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (("A. ".add ((xself).xwrite_msg))))
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (("B. ".add ((xself).xwrite_msg))))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestMakefileClose.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xclose)) 0)
                        xmsg.write (((((xself).xcli_conn).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                        bogusForceDataize.write (((((xself).xread_file).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xself).xcli_conn).xrecv)) (1024))
                x_testMakefileClose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                xtestMakefileCloseSocketDestroy.write
                  [xself]
                    memory > xrefcount_before
                    memory > xrefcount_after
                    seq > @
                      seq
                        xrefcount_before.write ((((xsys).xgetrefcount)) (((xself).xcli_conn)))
                        bogusForceDataize.write (((((xself).xread_file).xclose)) 0)
                        xrefcount_after.write ((((xsys).xgetrefcount)) (((xself).xcli_conn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xrefcount_before).sub 1)) ((xrefcount_after)))
                x_testMakefileCloseSocketDestroy.write
                  [xself]
                    seq > @
                xtestSmallReadNonBlocking.write
                  [xself]
                    memory > xn
                    memory > xfirst_seg
                    memory > xmsg
                    memory > xbuf
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_conn).xsetblocking)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xread_file).xreadinto)) ((((xbytearray)) (10))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xread_file).xread)) (((((xlen)) (((xself).xread_msg))).sub 3)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xevt1).xset)) 0)
                        bogusForceDataize.write (((((xself).xevt2).xwait)) (1.0))
                        xfirst_seg.write (((((xself).xread_file).xread)) (((((xlen)) (((xself).xread_msg))).sub 3)))
                        (((unsupported)) ((xfirst_seg)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xtime).xsleep)) (0.5))
                            xfirst_seg.write (((((xself).xread_file).xread)) (((((xlen)) (((xself).xread_msg))).sub 3)))
                        xbuf.write (((xbytearray)) (10))
                        xn.write (((((xself).xread_file).xreadinto)) ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xn)) (3))
                        xmsg.write ((xfirst_seg).add (((unsupported)) ((xbuf)) ((((unsupported)) ((xn))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) (((xself).xread_msg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xread_file).xreadinto)) ((((xbytearray)) (16))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xread_file).xread)) (1))) ("None: is there a None literal in the EO language?"))
                x_testSmallReadNonBlocking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevt1).xwait)) (1.0))
                        bogusForceDataize.write (((((xself).xwrite_file).xwrite)) (((xself).xwrite_msg)))
                        bogusForceDataize.write (((((xself).xwrite_file).xflush)) 0)
                        bogusForceDataize.write (((((xself).xevt2).xset)) 0)
                        bogusForceDataize.write (((((xself).xserv_finished).xwait)) (5.0))
                xtestWriteNonBlocking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli_finished).xwait)) (5.0))
                        ((xself).xserv_skipped).if
                          bogusForceDataize.write ((((xself).xskipTest)) (((xself).xserv_skipped)))
                x_testWriteNonBlocking.write
                  [xself]
                    memory > xn
                    memory > xBIG
                    memory > xLIMIT
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserv_skipped)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xserv_conn).xsetblocking)) (FALSE))
                        xBIG.write ("x".mul ((xsupport).xSOCK_MAX_SIZE))
                        xLIMIT.write 10
                        xn.write (((((xself).xwrite_file).xwrite)) ((xBIG)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xn)) (0))
                        (((unsupported)) ((xi)) ((((xrange)) ((xLIMIT)))))
                          seq
                            xn.write (((((xself).xwrite_file).xwrite)) ((xBIG)))
                            (((unsupported)) ((xn)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertGreater)) ((xn)) (0))
                          (((unsupported)) (((xself).xserv_skipped)) ("failed to saturate the socket buffer"))
            (((unsupported)) ((xFileObjectClassTestCase)))
              xbufsize.write 1
            (((unsupported)) ((xFileObjectClassTestCase)))
              xbufsize.write 2
            (((unsupported)) ((xFileObjectClassTestCase)))
              seq
                unsupported
                xread_mode.write "r"
                xread_msg.write ((((xMSG).xdecode)) ("utf-8"))
                xwrite_mode.write "wb"
                xwrite_msg.write (xMSG)
                xnewline.write ""
            (((unsupported)) ((xFileObjectClassTestCase)))
              seq
                unsupported
                xread_mode.write "rb"
                xread_msg.write (xMSG)
                xwrite_mode.write "w"
                xwrite_msg.write ((((xMSG).xdecode)) ("utf-8"))
                xnewline.write ""
            (((unsupported)) ((xFileObjectClassTestCase)))
              seq
                unsupported
                xread_mode.write "r"
                xread_msg.write ((((xMSG).xdecode)) ("utf-8"))
                xwrite_mode.write "w"
                xwrite_msg.write ((((xMSG).xdecode)) ("utf-8"))
                xnewline.write ""
            (((unsupported)) ((xobject)))
              seq
                unsupported
                xclientSetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))))))
                        (((unsupported)) (((xself).xserv_conn)) (((xself).xcli)))
            (((unsupported)) ((xNetworkConnectionTest)) ((xBasicTCPTest)))
              (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) (((xsocket).xsocket)))
                  xconnect.write
                    [xself]
                      seq > @
                        (((unsupported)) 0)
                          (((unsupported)) (((((xsocket).xtimeout)) ("timed out"))))
                xmocked_socket_module.write
                  [xself]
                    memory > xold_socket
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xold_socket.write ((xsocket).xsocket)
                        (((unsupported)) (((xsocket).xsocket)) (((xself).xMockSocket)))
                        (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) (((xsocket).xsocket)) ((xold_socket)))
                xtest_connect.write
                  [xself]
                    memory > xport
                    memory > xcli
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        xcli.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xcli).xclose)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xcli).xconnect)) ((((unsupported)) ((xHOST)) ((xport)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xECONNREFUSED)))
                xtest_create_connection.write
                  [xself]
                    memory > xexpected_errnos
                    memory > xport
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) ((xport)))))
                        xexpected_errnos.write ((((xsupport).xget_socket_conn_refused_errs)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xcm).xexception).xerrno)) ((xexpected_errnos)))
                xtest_create_connection_timeout.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xmocked_socket_module)) 0)))
                        (((unsupported)) (((xsocket).xtimeout)) ((xOSError)))
                          bogusForceDataize.write ((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (1234))))
                          (((xsupport).xIPV6_ENABLED).or (((xexc).xerrno).neq ((xerrno).xEAFNOSUPPORT))).if
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("socket.timeout not raised"))
            (((unsupported)) ((xSocketTCPTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketTCPTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xsource_port)) (((((xsupport).xfind_unused_port)) 0)))
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
                x_justAccept.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xconn).xclose)) 0)
                xtestFamily.write (x_justAccept)
                x_testFamily.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) ((((unsupported)) (((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) (30))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xcli).xfamily)) (2))
                xtestSourceAddress.write (x_justAccept)
                x_testSourceAddress.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) ((((unsupported)) (((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) (30) ((((unsupported)) ("") (((xself).xsource_port)))))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xself).xcli).xgetsockname)) 0)) (1))) (((xself).xsource_port)))
                xtestTimeoutDefault.write (x_justAccept)
                x_testTimeoutDefault.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((((xsocket).xgetdefaulttimeout)) 0)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (42))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xself).xcli)) (((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))))))
                            bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcli).xgettimeout)) 0)) (42))
                xtestTimeoutNone.write (x_justAccept)
                x_testTimeoutNone.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((((xsocket).xgetdefaulttimeout)) 0)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (30))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xself).xcli)) ((((unsupported)) (((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcli).xgettimeout)) 0)) ("None: is there a None literal in the EO language?"))
                xtestTimeoutValueNamed.write (x_justAccept)
                x_testTimeoutValueNamed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) ((((unsupported)) (((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) (30))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcli).xgettimeout)) 0)) (30))
                xtestTimeoutValueNonamed.write (x_justAccept)
                x_testTimeoutValueNonamed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) (30))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xcli).xgettimeout)) 0)) (30))
            (((unsupported)) ((xSocketTCPTest)) ((xThreadableTest)))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketTCPTest).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xclientSetUp.write
                  [xself]
                    seq > @
                xclientTearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
                        (((unsupported)) (((xself).xcli)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xThreadableTest).xclientTearDown)) ((xself)))
                xtestInsideTimeout.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        bogusForceDataize.write ((((xtime).xsleep)) (3))
                        bogusForceDataize.write ((((xconn).xsend)) ("done!"))
                xtestOutsideTimeout.write (xtestInsideTimeout)
                x_testInsideTimeout.write
                  [xself]
                    memory > xdata
                    memory > xsock
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) ((xsock)) (((((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))))))
                        xdata.write ((((xsock).xrecv)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("done!"))
                x_testOutsideTimeout.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcli)) ((xsock)) ((((unsupported)) (((xsocket).xcreate_connection)) ((((unsupported)) ((xHOST)) (((xself).xport)))) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) ((((unsupported)) (((((xsock).xrecv)) (5))))))
            (((unsupported)) ((xSocketTCPTest)))
              seq
                xtestTCPTimeout.write
                  [xself]
                    memory > xraise_timeout
                    seq > @
                      seq
                        xraise_timeout.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write (((((xself).xserv).xsettimeout)) (1.0))
                                bogusForceDataize.write (((((xself).xserv).xaccept)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) ((xraise_timeout)) ("Error generating a timeout exception (TCP)"))
                xtestTimeoutZero.write
                  [xself]
                    memory > xok
                    memory > xfoo
                    seq > @
                      seq
                        xok.write FALSE
                        (((unsupported)) (((xsocket).xtimeout)) ((xOSError)))
                          seq
                            bogusForceDataize.write (((((xself).xserv).xsettimeout)) (0.0))
                            xfoo.write (((((xself).xserv).xaccept)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("caught timeout instead of error (TCP)"))
                          xok.write TRUE
                          bogusForceDataize.write ((((xself).xfail)) ("caught unexpected exception (TCP)"))
                        ((xok).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("accept() returned success when we did not expect it"))
                xtestInterruptedTimeout.write
                  [xself]
                    memory > xalarm_handler
                    memory > xfoo
                    memory > xold_alarm
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) (5.0))
                        (((unsupported)) ((xException)))
                        xalarm_handler.write
                          [xsignal xframe]
                            seq > @
                              (((unsupported)) ((xAlarm)))
                        xold_alarm.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xalarm_handler)))
                        (((unsupported)) ((xAlarm)))
                          (((unsupported)) (((xsocket).xtimeout)) ((xAlarm)))
                            seq
                              bogusForceDataize.write ((((xsignal).xalarm)) (2))
                              xfoo.write (((((xself).xserv).xaccept)) 0)
                            bogusForceDataize.write ((((xself).xfail)) ("caught timeout instead of Alarm"))
                            bogusForceDataize.write ((((xself).xfail)) (("caught other exception instead of Alarm: %s(%s):n%s".mod ((((unsupported)) (((((xsys).xexc_info)) 0)) ((((unsupported)) (2)))).add (((unsupported)) (((((xtraceback).xformat_exc)) 0)))))))
                            bogusForceDataize.write ((((xself).xfail)) ("nothing caught"))
                            bogusForceDataize.write ((((xsignal).xalarm)) (0))
                          bogusForceDataize.write ((((xself).xfail)) ("got Alarm in wrong place"))
                          bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xold_alarm)))
            (((unsupported)) ((xSocketUDPTest)))
              seq
                xtestUDPTimeout.write
                  [xself]
                    memory > xraise_timeout
                    seq > @
                      seq
                        xraise_timeout.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write (((((xself).xserv).xsettimeout)) (1.0))
                                bogusForceDataize.write (((((xself).xserv).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) ((xraise_timeout)) ("Error generating a timeout exception (UDP)"))
                xtestTimeoutZero.write
                  [xself]
                    memory > xok
                    memory > xfoo
                    seq > @
                      seq
                        xok.write FALSE
                        (((unsupported)) (((xsocket).xtimeout)) ((xOSError)))
                          seq
                            bogusForceDataize.write (((((xself).xserv).xsettimeout)) (0.0))
                            xfoo.write (((((xself).xserv).xrecv)) (1024))
                          bogusForceDataize.write ((((xself).xfail)) ("caught timeout instead of error (UDP)"))
                          xok.write TRUE
                          bogusForceDataize.write ((((xself).xfail)) ("caught unexpected exception (UDP)"))
                        ((xok).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("recv() returned success when we did not expect it"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtestExceptionTree.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xOSError)) ((xException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xsocket).xherror)) ((xOSError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xsocket).xgaierror)) ((xOSError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xsocket).xtimeout)) ((xOSError)))))
                xtest_setblocking_invalidfd.write
                  [xself]
                    memory > xsock0
                    memory > xsock
                    seq > @
                      seq
                        xsock0.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (0))
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)) (0) (((((xsock0).xfileno)) 0)))
                        bogusForceDataize.write ((((xsock0).xclose)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xdetach)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          bogusForceDataize.write ((((xsock).xsetblocking)) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "linux")) ("Linux specific test"))))
              seq
                xUNIX_PATH_MAX.write 108
                xtestLinuxAbstractNamespace.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write "x00python-test-hellox00xff"
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))) ((xs1)))
                          seq
                            bogusForceDataize.write ((((xs1).xbind)) ((xaddress)))
                            bogusForceDataize.write ((((xs1).xlisten)) 0)
                            (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))) ((xs2)))
                              seq
                                bogusForceDataize.write ((((xs2).xconnect)) (((((xs1).xgetsockname)) 0)))
                                (((unsupported)) ((((unsupported)) (((((xs1).xaccept)) 0)) (0))) ((xs3)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xs1).xgetsockname)) 0)) ((xaddress)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xs2).xgetpeername)) 0)) ((xaddress)))
                xtestMaxName.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write ("x00".add ("h".mul (((xself).xUNIX_PATH_MAX).sub 1)))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xbind)) ((xaddress)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetsockname)) 0)) ((xaddress)))
                xtestNameOverflow.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write ("x00".add ("h".mul ((xself).xUNIX_PATH_MAX)))
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xs).xbind)) ((xaddress)))
                xtestStrName.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xs).xbind)) ("x00pythonx00testx00"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetsockname)) 0)) ("x00pythonx00testx00"))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtestBytearrayName.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                        seq
                          bogusForceDataize.write ((((xs).xbind)) ((((xbytearray)) ("x00pythonx00testx00"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetsockname)) 0)) ("x00pythonx00testx00"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("AF_UNIX"))) ("test needs socket.AF_UNIX"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xsock)) (((((xsocket).xsocket)) (((xsocket).xAF_UNIX)) (((xsocket).xSOCK_STREAM)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xsock).xclose)) 0)
                xencoded.write
                  [xself xpath]
                    seq > @
                      (((unsupported)) ((xUnicodeEncodeError)))
                        (((unsupported)) (((((xos).xfsencode)) ((xpath)))))
                        bogusForceDataize.write ((((xself).xskipTest)) (((("Pathname {0!a} cannot be represented in file system encoding {1!r}".xformat)) ((xpath)) (((((xsys).xgetfilesystemencoding)) 0)))))
                xbind.write
                  [xself xsock xpath]
                    seq > @
                      (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xsupport).xbind_unix_socket)) ((xsock)) ((xpath)))
                        ((((xstr)) ((xe))).eq "AF_UNIX path too long").if
                          bogusForceDataize.write ((((xself).xskipTest)) (((("Pathname {0!a} is too long to serve as an AF_UNIX path".xformat)) ((xpath)))))
                          (((unsupported)) 0)
                xtestUnbound.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) ((((((xself).xsock).xgetsockname)) 0)) ((((unsupported)) ("") ("None: is there a None literal in the EO language?"))))
                xtestStrAddr.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xabspath)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xbind)) (((xself).xsock)) ((xpath)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xsock).xgetsockname)) 0)) ((xpath)))
                xtestBytesAddr.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xabspath)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xbind)) (((xself).xsock)) (((((xself).xencoded)) ((xpath)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xsock).xgetsockname)) 0)) ((xpath)))
                xtestSurrogateescapeBind.write
                  [xself]
                    memory > xpath
                    memory > xb
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xabspath)) (((xsupport).xTESTFN_UNICODE)))
                        xb.write ((((xself).xencoded)) ((xpath)))
                        bogusForceDataize.write ((((xself).xbind)) (((xself).xsock)) (((((xb).xdecode)) ("ascii") ("surrogateescape"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xsock).xgetsockname)) 0)) ((xpath)))
                xtestUnencodableAddr.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)) (((xsupport).xTESTFN_UNENCODABLE)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("No unencodable filename available"))
                        xpath.write (((((xos).xpath).xabspath)) (((xsupport).xTESTFN_UNENCODABLE)))
                        bogusForceDataize.write ((((xself).xbind)) (((xself).xsock)) ((xpath)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xsock).xgetsockname)) 0)) ((xpath)))
            (((unsupported)) ((xSocketConnectedTest)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xSocketConnectedTest).x__init__)) ((xself)) ((xmethodName)))
                xtestRecvIntoArray.write
                  [xself]
                    memory > xmsg
                    memory > xnbytes
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write ((((xarray).xarray)) ("B") (((((unsupported)) (0)).mul (((xlen)) ((xMSG))))))
                        xnbytes.write (((((xself).xcli_conn).xrecv_into)) ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xbuf.write ((((xbuf).xtobytes)) 0)
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvIntoArray.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytes)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xbuf)))
                xtestRecvIntoBytearray.write
                  [xself]
                    memory > xmsg
                    memory > xnbytes
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) (1024))
                        xnbytes.write (((((xself).xcli_conn).xrecv_into)) ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvIntoBytearray.write (x_testRecvIntoArray)
                xtestRecvIntoMemoryview.write
                  [xself]
                    memory > xmsg
                    memory > xnbytes
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) (1024))
                        xnbytes.write (((((xself).xcli_conn).xrecv_into)) ((((xmemoryview)) ((xbuf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvIntoMemoryview.write (x_testRecvIntoArray)
                xtestRecvFromIntoArray.write
                  [xself]
                    memory > xmsg
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write ((((xarray).xarray)) ("B") (((((unsupported)) (0)).mul (((xlen)) ((xMSG))))))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom_into)) ((xbuf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xbuf.write ((((xbuf).xtobytes)) 0)
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvFromIntoArray.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytes)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xbuf)))
                xtestRecvFromIntoBytearray.write
                  [xself]
                    memory > xmsg
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) (1024))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom_into)) ((xbuf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvFromIntoBytearray.write (x_testRecvFromIntoArray)
                xtestRecvFromIntoMemoryview.write
                  [xself]
                    memory > xmsg
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) (1024))
                        (((unsupported)) ((((unsupported)) ((xnbytes)) ((xaddr)))) ((((((xself).xcli_conn).xrecvfrom_into)) ((((xmemoryview)) ((xbuf)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnbytes)) ((((xlen)) ((xMSG)))))
                        xmsg.write (((unsupported)) ((xbuf)) ((((unsupported)) ((((xlen)) ((xMSG)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                x_testRecvFromIntoMemoryview.write (x_testRecvFromIntoArray)
                xtestRecvFromIntoSmallBuffer.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) (8))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xcli_conn).xrecvfrom_into)) ((xbuf)) (1024))
                x_testRecvFromIntoSmallBuffer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserv_conn).xsend)) ((xMSG)))
                xtestRecvFromIntoEmptyBuffer.write
                  [xself]
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((xbytearray)) 0)
                        bogusForceDataize.write (((((xself).xcli_conn).xrecvfrom_into)) ((xbuf)))
                        bogusForceDataize.write (((((xself).xcli_conn).xrecvfrom_into)) ((xbuf)) (0))
                x_testRecvFromIntoEmptyBuffer.write (x_testRecvFromIntoArray)
            xTIPC_STYPE.write 2000
            xTIPC_LOWER.write 200
            xTIPC_UPPER.write 210
            xisTipcAvailable.write
              []
                memory > xf
                seq > @
                  seq
                    (((unsupported)) 0)
                    ((((xhasattr)) ((xsocket)) ("AF_TIPC")).not).if
                      (((unsupported)) (FALSE))
                    (((unsupported)) ((((unsupported)) ((xFileNotFoundError)) ((xIsADirectoryError)) ((xPermissionError)))))
                      xf.write (((xopen)) ("/proc/modules"))
                      (((unsupported)) (FALSE))
                    (((unsupported)) ((xf)))
                      (((unsupported)) ((xline)) ((xf)))
                        ((((xline).xstartswith)) ("tipc ")).if
                          (((unsupported)) (TRUE))
                    (((unsupported)) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xisTipcAvailable)) 0)) ("TIPC module is not loaded, please 'sudo modprobe tipc'"))))
              xtestRDM.write
                [xself]
                  memory > xsrvaddr
                  memory > xsrv
                  memory > xsendaddr
                  memory > xcli
                  seq > @
                    seq
                      xsrv.write ((((xsocket).xsocket)) (((xsocket).xAF_TIPC)) (((xsocket).xSOCK_RDM)))
                      xcli.write ((((xsocket).xsocket)) (((xsocket).xAF_TIPC)) (((xsocket).xSOCK_RDM)))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xsrv).xclose)))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xcli).xclose)))
                      bogusForceDataize.write ((((xsrv).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)) (1))
                      xsrvaddr.write (((unsupported)) (((xsocket).xTIPC_ADDR_NAMESEQ)) ((xTIPC_STYPE)) ((xTIPC_LOWER)) ((xTIPC_UPPER)))
                      bogusForceDataize.write ((((xsrv).xbind)) ((xsrvaddr)))
                      xsendaddr.write (((unsupported)) (((xsocket).xTIPC_ADDR_NAME)) ((xTIPC_STYPE)) (((xTIPC_LOWER).add (((xint)) ((((xTIPC_UPPER).sub (xTIPC_LOWER)).div 2))))) (0))
                      bogusForceDataize.write ((((xcli).xsendto)) ((xMSG)) ((xsendaddr)))
                      (((unsupported)) ((((unsupported)) ((xmsg)) ((xrecvaddr)))) (((((xsrv).xrecvfrom)) (1024))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xcli).xgetsockname)) 0)) ((xrecvaddr)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
            (((unsupported)) (((xunittest).xTestCase)) ((xThreadableTest)) (((((xunittest).xskipUnless)) ((((xisTipcAvailable)) 0)) ("TIPC module is not loaded, please 'sudo modprobe tipc'"))))
              seq
                x__init__.write
                  [xself xmethodName]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xunittest).xTestCase).x__init__)) ((xself)) ((xmethodName)))
                        bogusForceDataize.write ((((xThreadableTest).x__init__)) ((xself)))
                xsetUp.write
                  [xself]
                    memory > xsrvaddr
                    seq > @
                      seq
                        (((unsupported)) (((xself).xsrv)) (((((xsocket).xsocket)) (((xsocket).xAF_TIPC)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xsrv).xclose)))
                        bogusForceDataize.write (((((xself).xsrv).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)) (1))
                        xsrvaddr.write (((unsupported)) (((xsocket).xTIPC_ADDR_NAMESEQ)) ((xTIPC_STYPE)) ((xTIPC_LOWER)) ((xTIPC_UPPER)))
                        bogusForceDataize.write (((((xself).xsrv).xbind)) ((xsrvaddr)))
                        bogusForceDataize.write (((((xself).xsrv).xlisten)) 0)
                        bogusForceDataize.write ((((xself).xserverExplicitReady)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xconn)) (((xself).xconnaddr)))) ((((((xself).xsrv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xconn).xclose)))
                xclientSetUp.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xsleep)) (0.1))
                        (((unsupported)) (((xself).xcli)) (((((xsocket).xsocket)) (((xsocket).xAF_TIPC)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xcli).xclose)))
                        xaddr.write (((unsupported)) (((xsocket).xTIPC_ADDR_NAME)) ((xTIPC_STYPE)) (((xTIPC_LOWER).add (((xint)) ((((xTIPC_UPPER).sub (xTIPC_LOWER)).div 2))))) (0))
                        bogusForceDataize.write (((((xself).xcli).xconnect)) ((xaddr)))
                        (((unsupported)) (((xself).xcliaddr)) ((((((xself).xcli).xgetsockname)) 0)))
                xtestStream.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((((xself).xconn).xrecv)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((xMSG)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xcliaddr)) (((xself).xconnaddr)))
                x_testStream.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcli).xsend)) ((xMSG)))
                        bogusForceDataize.write (((((xself).xcli).xclose)) 0)
            (((unsupported)) ((xThreadedTCPSocketTest)))
              seq
                x_testSocketClass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xsock).x_closed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xsock).x_closed)))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                          bogusForceDataize.write ((((xsock).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xsock).x_closed)))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xsock)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsock).xsendall)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xsock).x_closed)))
                xtestCreateConnectionBase.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        xdata.write ((((xconn).xrecv)) (1024))
                        bogusForceDataize.write ((((xconn).xsendall)) ((xdata)))
                x_testCreateConnectionBase.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xsock).x_closed)))
                            bogusForceDataize.write ((((xsock).xsendall)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xrecv)) (1024))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xsock).x_closed)))
                xtestCreateConnectionClose.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        xdata.write ((((xconn).xrecv)) (1024))
                        bogusForceDataize.write ((((xconn).xsendall)) ((xdata)))
                x_testCreateConnectionClose.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)))
                          bogusForceDataize.write ((((xsock).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xsock).x_closed)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsock).xsendall)) ("foo"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_SOCK_CLOEXEC.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) ((((xsocket).xSOCK_STREAM).or ((xsocket).xSOCK_CLOEXEC))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xget_inheritable)) 0)))
                xtest_default_inheritable.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xget_inheritable)) 0)) (FALSE))
                xtest_dup.write
                  [xself]
                    memory > xnewsock
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          seq
                            xnewsock.write ((((xsock).xdup)) 0)
                            bogusForceDataize.write ((((xsock).xclose)) 0)
                            (((unsupported)) ((xnewsock)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewsock).xget_inheritable)) 0)) (FALSE))
                xtest_set_inheritable.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xsock).xset_inheritable)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xget_inheritable)) 0)) (TRUE))
                            bogusForceDataize.write ((((xsock).xset_inheritable)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xget_inheritable)) 0)) (FALSE))
                xtest_get_inheritable_cloexec.write
                  [xself]
                    memory > xflags
                    memory > xfd
                    memory > xsock
                    seq > @
                      (((unsupported)) 0)
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          seq
                            xfd.write ((((xsock).xfileno)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xget_inheritable)) 0)) (FALSE))
                            xflags.write ((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD)))
                            (((unsupported)) ((xflags)) ((((xfcntl).xFD_CLOEXEC).neg)))
                            bogusForceDataize.write ((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_SETFD)) ((xflags)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xget_inheritable)) 0)) (TRUE))
                xtest_set_inheritable_cloexec.write
                  [xself]
                    memory > xfd
                    memory > xsock
                    seq > @
                      (((unsupported)) 0)
                        xsock.write ((((xsocket).xsocket)) 0)
                        (((unsupported)) ((xsock)))
                          seq
                            xfd.write ((((xsock).xfileno)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD))).and ((xfcntl).xFD_CLOEXEC))) (((xfcntl).xFD_CLOEXEC)))
                            bogusForceDataize.write ((((xsock).xset_inheritable)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD))).and ((xfcntl).xFD_CLOEXEC))) (0))
                xtest_socketpair.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xs1)) ((xs2)))) (((((xsocket).xsocketpair)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs1).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs2).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs1).xget_inheritable)) 0)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs2).xget_inheritable)) 0)) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("SOCK_NONBLOCK"))) ("SOCK_NONBLOCK not defined"))))
              seq
                xcheckNonblock.write
                  [xself xs xnonblock xtimeout]
                    seq > @
                      (((unsupported)) 0)
                        (xnonblock).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgettimeout)) 0)) ((xtimeout)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xfcntl).xfcntl)) ((xs)) (((xfcntl).xF_GETFL)) (((xos).xO_NONBLOCK))).and ((xos).xO_NONBLOCK))))
                            ((xtimeout).eq 0).if
                              bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xgetblocking)) 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xgetblocking)) 0)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xtype)) (((xsocket).xSOCK_STREAM)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgettimeout)) 0)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xfcntl).xfcntl)) ((xs)) (((xfcntl).xF_GETFL)) (((xos).xO_NONBLOCK))).and ((xos).xO_NONBLOCK))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xgetblocking)) 0)))
                xtest_SOCK_NONBLOCK.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsocket).xsocket)) (((xsocket).xAF_INET)) ((((xsocket).xSOCK_STREAM).or ((xsocket).xSOCK_NONBLOCK))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xself).xcheckNonblock)) ((xs)))
                            bogusForceDataize.write ((((xs).xsetblocking)) (1))
                            (((unsupported)) (((xself).xcheckNonblock)) ((xs)) (FALSE))
                            bogusForceDataize.write ((((xs).xsetblocking)) (0))
                            bogusForceDataize.write ((((xself).xcheckNonblock)) ((xs)))
                            bogusForceDataize.write ((((xs).xsettimeout)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((xself).xcheckNonblock)) ((xs)) (FALSE))
                            bogusForceDataize.write ((((xs).xsettimeout)) (2.0))
                            (((unsupported)) (((xself).xcheckNonblock)) ((xs)) (2.0))
                            bogusForceDataize.write ((((xs).xsetblocking)) (1))
                            (((unsupported)) (((xself).xcheckNonblock)) ((xs)) (FALSE))
                        xt.write ((((xsocket).xgetdefaulttimeout)) 0)
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (0.0))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xcheckNonblock)) ((xs)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xcheckNonblock)) ((xs)) (FALSE))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) (2.0))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                          (((unsupported)) (((xself).xcheckNonblock)) ((xs)) (2.0))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xcheckNonblock)) ((xs)) (FALSE))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)) ((xt)))
            (((unsupported)) ((xSocketTCPTest)) (((((xunittest).xskipUnless)) ((((xos).xname).eq "nt")) ("Windows specific"))) (((((xunittest).xskipUnless)) ((xmultiprocessing)) ("need multiprocessing"))))
              seq
                xremoteProcessServer.write
                  [xcls xq]
                    memory > xsdata
                    memory > xs
                    memory > xmessage
                    seq > @
                      (((unsupported)) 0)
                        xsdata.write ((((xq).xget)) 0)
                        xmessage.write ((((xq).xget)) 0)
                        xs.write ((((xsocket).xfromshare)) ((xsdata)))
                        (((unsupported)) ((((unsupported)) ((xs2)) ((xc)))) (((((xs).xaccept)) 0)))
                        bogusForceDataize.write ((((xs2).xsendall)) ((xmessage)))
                        bogusForceDataize.write ((((xs2).xclose)) 0)
                        bogusForceDataize.write ((((xs).xclose)) 0)
                xtestShare.write
                  [xself]
                    memory > xreceived
                    memory > xq
                    memory > xp
                    memory > xs
                    memory > xm
                    memory > xaddr
                    memory > xdata
                    memory > xmessage
                    seq > @
                      seq
                        xq.write ((((xmultiprocessing).xQueue)) 0)
                        xp.write (((unsupported)) (((xmultiprocessing).xProcess)) (((xself).xremoteProcessServer)) ((((unsupported)) ((xq)))))
                        bogusForceDataize.write ((((xp).xstart)) 0)
                        xdata.write (((((xself).xserv).xshare)) (((xp).xpid)))
                        xaddr.write (((((xself).xserv).xgetsockname)) 0)
                        bogusForceDataize.write (((((xself).xserv).xclose)) 0)
                        bogusForceDataize.write ((((xq).xput)) ((xdata)))
                        xmessage.write "slapmahfro"
                        bogusForceDataize.write ((((xq).xput)) ((xmessage)))
                        xs.write ((((xsocket).xcreate_connection)) ((xaddr)))
                        xm.write (((unsupported)) 0)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xdata.write ((((xs).xrecv)) (100))
                                ((xdata).not).if
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xm).xappend)) ((xdata)))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                        xreceived.write ((("".xjoin)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreceived)) ((xmessage)))
                        bogusForceDataize.write ((((xp).xjoin)) 0)
                xtestShareLength.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((((xself).xserv).xshare)) (((((xos).xgetpid)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsocket).xfromshare)) ((((unsupported)) ((xdata)) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsocket).xfromshare)) (((xdata).add "foo")))
                xcompareSockets.write
                  [xself xorg xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xorg).xgettimeout)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xorg).xgettimeout)) 0)) (((((xother).xgettimeout)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xorg).xfamily)) (((xother).xfamily)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xorg).xtype)) (((xother).xtype)))
                        (((xorg).xproto).neq 0).if
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xorg).xproto)) (((xother).xproto)))
                xtestShareLocal.write
                  [xself]
                    memory > xs
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((((xself).xserv).xshare)) (((((xos).xgetpid)) 0)))
                        xs.write ((((xsocket).xfromshare)) ((xdata)))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xcompareSockets)) (((xself).xserv)) ((xs)))
                          bogusForceDataize.write ((((xs).xclose)) 0)
                xtestTypes.write
                  [xself]
                    memory > xtypes
                    memory > xdata
                    memory > xfamilies
                    memory > xshared
                    memory > xsource
                    seq > @
                      seq
                        xfamilies.write (((unsupported)) (((xsocket).xAF_INET)) (((xsocket).xAF_INET6)))
                        xtypes.write (((unsupported)) (((xsocket).xSOCK_STREAM)) (((xsocket).xSOCK_DGRAM)))
                        (((unsupported)) ((xf)) ((xfamilies)))
                          (((unsupported)) ((xt)) ((xtypes)))
                            seq
                              (((unsupported)) ((xOSError)))
                                xsource.write ((((xsocket).xsocket)) ((xf)) ((xt)))
                                (((unsupported)) 0)
                              (((unsupported)) 0)
                                seq
                                  xdata.write ((((xsource).xshare)) (((((xos).xgetpid)) 0)))
                                  xshared.write ((((xsocket).xfromshare)) ((xdata)))
                                  (((unsupported)) 0)
                                    bogusForceDataize.write ((((xself).xcompareSockets)) ((xsource)) ((xshared)))
                                    bogusForceDataize.write ((((xshared).xclose)) 0)
                                bogusForceDataize.write ((((xsource).xclose)) 0)
            (((unsupported)) ((xThreadedTCPSocketTest)))
              seq
                (((unsupported)) 0)
                xFILESIZE.write ((10.mul 1024).mul 1024)
                xBUFSIZE.write 8192
                xFILEDATA.write ""
                xTIMEOUT.write 2
                xsetUpClass.write
                  [xcls]
                    memory > xchunk
                    memory > xchunks
                    seq > @
                      (((unsupported)) 0)
                        xchunks.write
                          [xtotal xstep]
                            seq > @
                              seq
                                (((unsupported)) (((xtotal).geq (xstep))))
                                while.
                                  ((xtotal).greater (xstep))
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)) ((xstep)))
                                        (((unsupported)) ((xtotal)) ((xstep)))
                                (xtotal).if
                                  (((unsupported)) ((xtotal)))
                        xchunk.write ((("".xjoin)) ((((unsupported)) ((((((((xrandom).xchoice)) (((xstring).xascii_letters))).xencode)) 0)) ((xi)) ((((xrange)) (((xcls).xBUFSIZE)))))))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          (((unsupported)) ((xcsize)) ((((xchunks)) (((xcls).xFILESIZE)) (((xcls).xBUFSIZE)))))
                            bogusForceDataize.write ((((xf).xwrite)) ((xchunk)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          seq
                            (((unsupported)) (((xcls).xFILEDATA)) (((((xf).xread)) 0)))
                            (((unsupported)) (((((xlen)) (((xcls).xFILEDATA))).eq ((xcls).xFILESIZE))))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xaccept_conn.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xsettimeout)) ((xMAIN_TIMEOUT)))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserv).xaccept)) 0)))
                        bogusForceDataize.write ((((xconn).xsettimeout)) (((xself).xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xconn).xclose)))
                        (((unsupported)) ((xconn)))
                xrecv_data.write
                  [xself xconn]
                    memory > xchunk
                    memory > xreceived
                    seq > @
                      seq
                        xreceived.write (((unsupported)) 0)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xchunk.write ((((xconn).xrecv)) (((xself).xBUFSIZE)))
                                ((xchunk).not).if
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xreceived).xappend)) ((xchunk)))
                        (((unsupported)) (((("".xjoin)) ((xreceived)))))
                xmeth_from_sock.write
                  [xself xsock]
                    seq > @
                      (((unsupported)) ((((xgetattr)) ((xsock)) ("_sendfile_use_send"))))
                x_testRegularFile.write
                  [xself]
                    memory > xfile
                    memory > xmeth
                    memory > xaddress
                    memory > xsent
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((xmeth)) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) (((xself).xFILESIZE)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) (((xself).xFILESIZE)))
                xtestRegularFile.write
                  [xself]
                    memory > xconn
                    memory > xdata
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) (((xself).xFILESIZE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (((xself).xFILEDATA)))
                x_testNonRegularFile.write
                  [xself]
                    memory > xfile
                    memory > xaddress
                    memory > xsent
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write ((((xio).xBytesIO)) (((xself).xFILEDATA)))
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xsent.write ((((xsock).xsendfile)) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) (((xself).xFILESIZE)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) (((xself).xFILESIZE)))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).x_GiveupOnSendfile)) (((xsock).x_sendfile_use_sendfile)) ((xfile)))
                xtestNonRegularFile.write
                  [xself]
                    memory > xconn
                    memory > xdata
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) (((xself).xFILESIZE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (((xself).xFILEDATA)))
                x_testEmptyFileSend.write
                  [xself]
                    memory > xfilename
                    memory > xmeth
                    memory > xsent
                    memory > xfile
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfilename.write (((xsupport).xTESTFN).add "2")
                        (((unsupported)) ((((xopen)) ((xfilename)) ("wb"))))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfilename)))
                        xfile.write (((xopen)) ((xfilename)) ("rb"))
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((xmeth)) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) (0))
                xtestEmptyFileSend.write
                  [xself]
                    memory > xconn
                    memory > xdata
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (""))
                x_testOffset.write
                  [xself]
                    memory > xfile
                    memory > xmeth
                    memory > xaddress
                    memory > xsent
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((unsupported)) ((xmeth)) ((xfile)) (5000))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) ((((xself).xFILESIZE).sub 5000)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) (((xself).xFILESIZE)))
                xtestOffset.write
                  [xself]
                    memory > xconn
                    memory > xdata
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((((xself).xFILESIZE).sub 5000)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) (((xself).xFILEDATA)) ((((unsupported)) (5000))))))
                x_testCount.write
                  [xself]
                    memory > xcount
                    memory > xmeth
                    memory > xsent
                    memory > xfile
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_connection)) ((xaddress)) (2))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xcount.write 5000007
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((unsupported)) ((xmeth)) ((xfile)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) ((xcount)))
                xtestCount.write
                  [xself]
                    memory > xconn
                    memory > xcount
                    memory > xdata
                    seq > @
                      seq
                        xcount.write 5000007
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((xcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) (((xself).xFILEDATA)) ((((unsupported)) ((xcount)))))))
                x_testCountSmall.write
                  [xself]
                    memory > xcount
                    memory > xmeth
                    memory > xsent
                    memory > xfile
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_connection)) ((xaddress)) (2))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xcount.write 1
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((unsupported)) ((xmeth)) ((xfile)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) ((xcount)))
                xtestCountSmall.write
                  [xself]
                    memory > xconn
                    memory > xcount
                    memory > xdata
                    seq > @
                      seq
                        xcount.write 1
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((xcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) (((xself).xFILEDATA)) ((((unsupported)) ((xcount)))))))
                x_testCountWithOffset.write
                  [xself]
                    memory > xcount
                    memory > xmeth
                    memory > xsent
                    memory > xfile
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_connection)) ((xaddress)) (2))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xcount.write 100007
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((unsupported)) ((xmeth)) ((xfile)) (2007) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xtell)) 0)) (((xcount).add 2007)))
                xtestCountWithOffset.write
                  [xself]
                    memory > xconn
                    memory > xcount
                    memory > xdata
                    seq > @
                      seq
                        xcount.write 100007
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((xcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) (((xself).xFILEDATA)) ((((unsupported)) (2007) (((xcount).add 2007)))))))
                x_testNonBlocking.write
                  [xself]
                    memory > xfile
                    memory > xmeth
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            bogusForceDataize.write ((((xsock).xsetblocking)) (FALSE))
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmeth)) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsock).xsendfile)) ((xfile)))
                xtestNonBlocking.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        ((((xconn).xrecv)) (8192)).if
                          bogusForceDataize.write ((((xself).xfail)) ("was not supposed to receive any data"))
                x_testWithTimeout.write
                  [xself]
                    memory > xfile
                    memory > xmeth
                    memory > xaddress
                    memory > xsent
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        xfile.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_connection)) ((xaddress)) (2))) ((xsock)) ((xfile)) ((xfile)))
                          seq
                            xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                            xsent.write (((xmeth)) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) (((xself).xFILESIZE)))
                xtestWithTimeout.write
                  [xself]
                    memory > xconn
                    memory > xdata
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        xdata.write ((((xself).xrecv_data)) ((xconn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) (((xself).xFILESIZE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (((xself).xFILEDATA)))
                x_testWithTimeoutTriggeredSend.write
                  [xself]
                    memory > xmeth
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write (((((xself).xserv).xgetsockname)) 0)
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfile)))
                          (((unsupported)) (((((xsocket).xcreate_connection)) ((xaddress)))) ((xsock)))
                            seq
                              bogusForceDataize.write ((((xsock).xsettimeout)) (0.01))
                              xmeth.write ((((xself).xmeth_from_sock)) ((xsock)))
                              bogusForceDataize.write ((((xself).xassertRaises)) (((xsocket).xtimeout)) ((xmeth)) ((xfile)))
                xtestWithTimeoutTriggeredSend.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xself).xaccept_conn)) 0)
                        bogusForceDataize.write ((((xconn).xrecv)) (88192))
                x_test_errors.write
                  [xself]
                    seq > @
                xtest_errors.write
                  [xself]
                    memory > xmeth
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfile)))
                          (((unsupported)) ((((unsupported)) (((xsocket).xsocket)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                            seq
                              xmeth.write ((((xself).xmeth_from_sock)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xValueError)) ("SOCK_STREAM") ((xmeth)) ((xfile)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rt"))) ((xfile)))
                          (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                            seq
                              xmeth.write ((((xself).xmeth_from_sock)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xValueError)) ("binary mode") ((xmeth)) ((xfile)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfile)))
                          (((unsupported)) (((((xsocket).xsocket)) 0)) ((xs)))
                            seq
                              xmeth.write ((((xself).xmeth_from_sock)) ((xs)))
                              (((unsupported)) (((xself).xassertRaisesRegex)) ((xTypeError)) ("positive integer") ((xmeth)) ((xfile)) ("2"))
                              (((unsupported)) (((xself).xassertRaisesRegex)) ((xTypeError)) ("positive integer") ((xmeth)) ((xfile)) (0.1))
                              (((unsupported)) (((xself).xassertRaisesRegex)) ((xValueError)) ("positive integer") ((xmeth)) ((xfile)) (0))
                              (((unsupported)) (((xself).xassertRaisesRegex)) ((xValueError)) ("positive integer") ((xmeth)) ((xfile)) ((1.neg)))
            (((unsupported)) ((xSendfileUsingSendTest)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("sendfile"))) ("os.sendfile() required for this test."))))
              seq
                (((unsupported)) 0)
                xmeth_from_sock.write
                  [xself xsock]
                    seq > @
                      (((unsupported)) ((((xgetattr)) ((xsock)) ("_sendfile_use_sendfile"))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xHAVE_SOCKET_ALG)) ("AF_ALG required"))))
              seq
                xcreate_alg.write
                  [xself xtyp xname]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_ALG)) (((xsocket).xSOCK_SEQPACKET)) (0))
                        (((unsupported)) ((xFileNotFoundError)))
                          bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ((xtyp)) ((xname)))))
                          seq
                            bogusForceDataize.write ((((xsock).xclose)) 0)
                            (((unsupported)) (((((xunittest).xSkipTest)) ((((xstr)) ((xe)))) ((xtyp)) ((xname)))))
                          (((unsupported)) ((xsock)))
                xtest_sha256.write
                  [xself]
                    memory > xexpected
                    seq > @
                      (((unsupported)) 0)
                        xexpected.write ((((xbytes).xfromhex)) ("ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"))
                        (((unsupported)) (((((xself).xcreate_alg)) ("hash") ("sha256"))) ((xalgo)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                bogusForceDataize.write ((((xop).xsendall)) ("abc"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xop).xrecv)) (512))) ((xexpected)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                bogusForceDataize.write ((((xop).xsend)) ("a") (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsend)) ("b") (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsend)) ("c") (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsend)) (""))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xop).xrecv)) (512))) ((xexpected)))
                xtest_hmac_sha1.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write ((((xbytes).xfromhex)) ("effcdf6ae5eb2fa2d27416d5f184df9c259a7c79"))
                        (((unsupported)) (((((xself).xcreate_alg)) ("hash") ("hmac(sha1)"))) ((xalgo)))
                          seq
                            bogusForceDataize.write ((((xalgo).xsetsockopt)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_KEY)) ("Jefe"))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                bogusForceDataize.write ((((xop).xsendall)) ("what do ya want for nothing?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xop).xrecv)) (512))) ((xexpected)))
                xtest_aes_cbc.write
                  [xself]
                    memory > xiv
                    memory > xciphertext
                    memory > xdec
                    memory > xlongmsg
                    memory > xmsg
                    memory > xenc
                    memory > xmsglen
                    memory > xmultiplier
                    memory > xkey
                    seq > @
                      (((unsupported)) 0)
                        xkey.write ((((xbytes).xfromhex)) ("06a9214036b8a15b512e03d534120006"))
                        xiv.write ((((xbytes).xfromhex)) ("3dafba429d9eb430b422da802c9fac41"))
                        xmsg.write "Single block msg"
                        xciphertext.write ((((xbytes).xfromhex)) ("e353779c1079aeb82708942dbe77181a"))
                        xmsglen.write (((xlen)) ((xmsg)))
                        (((unsupported)) (((((xself).xcreate_alg)) ("skcipher") ("cbc(aes)"))) ((xalgo)))
                          seq
                            bogusForceDataize.write ((((xalgo).xsetsockopt)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_KEY)) ((xkey)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                (((unsupported)) (((xop).xsendmsg_afalg)) (((xsocket).xALG_OP_ENCRYPT)) ((xiv)) (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsendall)) ((xmsg)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xop).xrecv)) ((xmsglen)))) ((xciphertext)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                (((unsupported)) (((xop).xsendmsg_afalg)) ((((unsupported)) ((xciphertext)))) (((xsocket).xALG_OP_DECRYPT)) ((xiv)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xop).xrecv)) ((xmsglen)))) ((xmsg)))
                            xmultiplier.write 1024
                            xlongmsg.write ((((unsupported)) ((xmsg))).mul (xmultiplier))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                (((unsupported)) (((xop).xsendmsg_afalg)) ((xlongmsg)) (((xsocket).xALG_OP_ENCRYPT)) ((xiv)))
                                xenc.write ((((xop).xrecv)) (((xmsglen).mul (xmultiplier))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xenc)))) (((xmsglen).mul (xmultiplier))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xenc)) ((((unsupported)) ((xmsglen)))))) ((xciphertext)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                (((unsupported)) (((xop).xsendmsg_afalg)) ((((unsupported)) ((xenc)))) (((xsocket).xALG_OP_DECRYPT)) ((xiv)))
                                xdec.write ((((xop).xrecv)) (((xmsglen).mul (xmultiplier))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdec)))) (((xmsglen).mul (xmultiplier))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xdec)) (((xmsg).mul (xmultiplier))))
                xtest_aead_aes_gcm.write
                  [xself]
                    memory > xiv
                    memory > xassoclen
                    memory > xplain
                    memory > xassoc
                    memory > xexpected_tag
                    memory > xres
                    memory > xpack_uint32
                    memory > xtaglen
                    memory > xkey
                    memory > xmsg
                    memory > xexpected_ct
                    seq > @
                      (((unsupported)) 0)
                        xkey.write ((((xbytes).xfromhex)) ("c939cc13397c1d37de6ae0e1cb7c423c"))
                        xiv.write ((((xbytes).xfromhex)) ("b3d8cc017cbb89b39e0f67e2"))
                        xplain.write ((((xbytes).xfromhex)) ("c3b3c41f113a31b73d9a5cd432103069"))
                        xassoc.write ((((xbytes).xfromhex)) ("24825602bd12a984e0092d3e448eda5f"))
                        xexpected_ct.write ((((xbytes).xfromhex)) ("93fe7d9e9bfd10348a5606e5cafa7354"))
                        xexpected_tag.write ((((xbytes).xfromhex)) ("0032a1dc85f1c9786925a2e71d8272dd"))
                        xtaglen.write (((xlen)) ((xexpected_tag)))
                        xassoclen.write (((xlen)) ((xassoc)))
                        (((unsupported)) (((((xself).xcreate_alg)) ("aead") ("gcm(aes)"))) ((xalgo)))
                          seq
                            bogusForceDataize.write ((((xalgo).xsetsockopt)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_KEY)) ((xkey)))
                            bogusForceDataize.write ((((xalgo).xsetsockopt)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_AEAD_AUTHSIZE)) ("None: is there a None literal in the EO language?") ((xtaglen)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                (((unsupported)) (((xop).xsendmsg_afalg)) (((xsocket).xALG_OP_ENCRYPT)) ((xiv)) ((xassoclen)) (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsendall)) ((xassoc)) (((xsocket).xMSG_MORE)))
                                bogusForceDataize.write ((((xop).xsendall)) ((xplain)))
                                xres.write ((((xop).xrecv)) ((((xassoclen).add (((xlen)) ((xplain)))).add (xtaglen))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_ct)) ((((unsupported)) ((xres)) ((((unsupported)) ((xassoclen)) (((xtaglen).neg)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_tag)) ((((unsupported)) ((xres)) ((((unsupported)) (((xtaglen).neg)))))))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                xmsg.write ((xassoc).add (xplain))
                                (((unsupported)) (((xop).xsendmsg_afalg)) ((((unsupported)) ((xmsg)))) (((xsocket).xALG_OP_ENCRYPT)) ((xiv)) ((xassoclen)))
                                xres.write ((((xop).xrecv)) ((((xassoclen).add (((xlen)) ((xplain)))).add (xtaglen))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_ct)) ((((unsupported)) ((xres)) ((((unsupported)) ((xassoclen)) (((xtaglen).neg)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_tag)) ((((unsupported)) ((xres)) ((((unsupported)) (((xtaglen).neg)))))))
                            xpack_uint32.write (((((xstruct).xStruct)) ("I")).xpack)
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                xmsg.write ((xassoc).add (xplain))
                                bogusForceDataize.write ((((xop).xsendmsg)) ((((unsupported)) ((xmsg)))) ((((unsupported)) ((((unsupported)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_OP)) ((((xpack_uint32)) (((xsocket).xALG_OP_ENCRYPT)))))) ((((unsupported)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_IV)) (((((xpack_uint32)) ((((xlen)) ((xiv))))).add (xiv))))) ((((unsupported)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_AEAD_ASSOCLEN)) ((((xpack_uint32)) ((xassoclen)))))))))
                                xres.write ((((xop).xrecv)) (((((xlen)) ((xmsg))).add (xtaglen))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_ct)) ((((unsupported)) ((xres)) ((((unsupported)) ((xassoclen)) (((xtaglen).neg)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected_tag)) ((((unsupported)) ((xres)) ((((unsupported)) (((xtaglen).neg)))))))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                xmsg.write (((xassoc).add (xexpected_ct)).add (xexpected_tag))
                                (((unsupported)) (((xop).xsendmsg_afalg)) ((((unsupported)) ((xmsg)))) (((xsocket).xALG_OP_DECRYPT)) ((xiv)) ((xassoclen)))
                                xres.write ((((xop).xrecv)) (((((xlen)) ((xmsg))).sub (xtaglen))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xplain)) ((((unsupported)) ((xres)) ((((unsupported)) ((xassoclen)))))))
                xtest_drbg_pr_sha256.write
                  [xself]
                    memory > xextra_seed
                    memory > xrn
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xcreate_alg)) ("rng") ("drbg_pr_sha256"))) ((xalgo)))
                          seq
                            xextra_seed.write ((((xos).xurandom)) (32))
                            bogusForceDataize.write ((((xalgo).xsetsockopt)) (((xsocket).xSOL_ALG)) (((xsocket).xALG_SET_KEY)) ((xextra_seed)))
                            (((unsupported)) ((((unsupported)) ((xop)) ((x_)))) (((((xalgo).xaccept)) 0)))
                            (((unsupported)) ((xop)))
                              seq
                                xrn.write ((((xop).xrecv)) (32))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xrn)))) (32))
                xtest_sendmsg_afalg_args.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_ALG)) (((xsocket).xSOCK_SEQPACKET)) (0))
                        (((unsupported)) ((xsock)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              bogusForceDataize.write ((((xsock).xsendmsg_afalg)) 0)
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((unsupported)) (((xsock).xsendmsg_afalg)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              bogusForceDataize.write ((((xsock).xsendmsg_afalg)) (1))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((unsupported)) (((xsock).xsendmsg_afalg)) (((xsocket).xALG_OP_ENCRYPT)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((unsupported)) (((xsock).xsendmsg_afalg)) (((xsocket).xALG_OP_ENCRYPT)) ((1.neg)))
                xtest_length_restriction.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) (((xsocket).xAF_ALG)) (((xsocket).xSOCK_SEQPACKET)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock).xclose)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))))
                          bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) (("t".mul 13)) ("name"))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("type too long"))))
                          bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) (("t".mul 14)) ("name"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))))
                          bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ("type") (("n".mul 63)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("name too long"))))
                          bogusForceDataize.write ((((xsock).xbind)) ((((unsupported)) ("type") (("n".mul 64)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((((xsys).xplatform).xstartswith)) ("win"))) ("requires Windows"))))
              seq
                xknownTCPFlags.write (((unsupported)) ("TCP_MAXSEG") ("TCP_NODELAY") ("TCP_FASTOPEN") ("TCP_KEEPCNT") ("TCP_KEEPIDLE") ("TCP_KEEPINTVL"))
                xtest_new_tcp_flags.write
                  [xself]
                    memory > xprovided
                    memory > xunknown
                    seq > @
                      seq
                        xprovided.write (((unsupported)) ((xs)) ((xs)) ((((xdir)) ((xsocket)))) (((((xs).xstartswith)) ("TCP"))))
                        xunknown.write (((unsupported)) ((xs)) ((xs)) ((xprovided)) ((((unsupported)) ((xs)) (((xself).xknownTCPFlags)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) ((xunknown)) ("New TCP flags were discovered. See bpo-32394 for more information"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_address.write
                  [xself]
                    memory > xport
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) (((((xsocket).xcreate_server)) ((((unsupported)) ("127.0.0.1") ((xport)))))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xsock).xgetsockname)) 0)) (0))) ("127.0.0.1"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xsock).xgetsockname)) 0)) (1))) ((xport)))
                        ((xsupport).xIPV6_ENABLED).if
                          (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("::1") ((xport)))) (((xsocket).xAF_INET6)))) ((xsock)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xsock).xgetsockname)) 0)) (0))) ("::1"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xsock).xgetsockname)) 0)) (1))) ((xport)))
                xtest_family_and_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsocket).xcreate_server)) ((((unsupported)) ("127.0.0.1") (0))))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xfamily)) (((xsocket).xAF_INET)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xtype)) (((xsocket).xSOCK_STREAM)))
                        ((xsupport).xIPV6_ENABLED).if
                          (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("::1") (0))) (((xsocket).xAF_INET6)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xs).xfamily)) (((xsocket).xAF_INET6)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xtype)) (((xsocket).xSOCK_STREAM)))
                xtest_reuse_port.write
                  [xself]
                    memory > xopt
                    seq > @
                      ((((xhasattr)) ((xsocket)) ("SO_REUSEPORT")).not).if
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("localhost") (0))) (TRUE))
                        seq
                          (((unsupported)) (((((xsocket).xcreate_server)) ((((unsupported)) ("localhost") (0))))) ((xsock)))
                            seq
                              xopt.write ((((xsock).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEPORT)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xopt)) (0))
                          (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("localhost") (0))) (TRUE))) ((xsock)))
                            seq
                              xopt.write ((((xsock).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEPORT)))
                              bogusForceDataize.write ((((xself).xassertNotEqual)) ((xopt)) (0))
                xtest_ipv6_only_default.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("::1") (0))) (((xsocket).xAF_INET6)))) ((xsock)))
                          (((unsupported)) (((((xsock).xgetsockopt)) (((xsocket).xIPPROTO_IPV6)) (((xsocket).xIPV6_V6ONLY)))))
                xtest_dualstack_ipv6_family.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("::1") (0))) (((xsocket).xAF_INET6)) (TRUE))) ((xsock)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xsock).xfamily)) (((xsocket).xAF_INET6)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtimeout.write 3
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xthread)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xthread)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write (((((xself).xthread).xjoin)) (((xself).xtimeout)))
                xecho_server.write
                  [xself xsock]
                    memory > xevent
                    memory > xrun
                    seq > @
                      seq
                        xrun.write
                          [xsock]
                            memory > xmsg
                            seq > @
                              (((unsupported)) ((xsock)))
                                seq
                                  (((unsupported)) ((((unsupported)) ((xconn)) ((x_)))) (((((xsock).xaccept)) 0)))
                                  (((unsupported)) ((xconn)))
                                    seq
                                      bogusForceDataize.write ((((xevent).xwait)) (((xself).xtimeout)))
                                      xmsg.write ((((xconn).xrecv)) (1024))
                                      ((xmsg).not).if
                                        (((unsupported)) 0)
                                      bogusForceDataize.write ((((xconn).xsendall)) ((xmsg)))
                        xevent.write ((((xthreading).xEvent)) 0)
                        bogusForceDataize.write ((((xsock).xsettimeout)) (((xself).xtimeout)))
                        (((unsupported)) (((xself).xthread)) ((((unsupported)) (((xthreading).xThread)) ((xrun)) ((((unsupported)) ((xsock)))))))
                        bogusForceDataize.write (((((xself).xthread).xstart)) 0)
                        bogusForceDataize.write ((((xevent).xset)) 0)
                xecho_client.write
                  [xself xaddr xfamily]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsocket).xsocket)) ((xfamily)))) ((xsock)))
                        seq
                          bogusForceDataize.write ((((xsock).xsettimeout)) (((xself).xtimeout)))
                          bogusForceDataize.write ((((xsock).xconnect)) ((xaddr)))
                          bogusForceDataize.write ((((xsock).xsendall)) ("foo"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xsock).xrecv)) (1024))) ("foo"))
                xtest_tcp4.write
                  [xself]
                    memory > xport
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) (((((xsocket).xcreate_server)) ((((unsupported)) ("") ((xport)))))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xecho_server)) ((xsock)))
                            bogusForceDataize.write ((((xself).xecho_client)) ((((unsupported)) ("127.0.0.1") ((xport)))) (((xsocket).xAF_INET)))
                xtest_tcp6.write
                  [xself]
                    memory > xport
                    seq > @
                      (((unsupported)) 0)
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("") ((xport)))) (((xsocket).xAF_INET6)))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xecho_server)) ((xsock)))
                            bogusForceDataize.write ((((xself).xecho_client)) ((((unsupported)) ("::1") ((xport)))) (((xsocket).xAF_INET6)))
                xtest_dual_stack_client_v4.write
                  [xself]
                    memory > xport
                    seq > @
                      (((unsupported)) 0)
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("") ((xport)))) (((xsocket).xAF_INET6)) (TRUE))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xecho_server)) ((xsock)))
                            bogusForceDataize.write ((((xself).xecho_client)) ((((unsupported)) ("127.0.0.1") ((xport)))) (((xsocket).xAF_INET)))
                xtest_dual_stack_client_v6.write
                  [xself]
                    memory > xport
                    seq > @
                      (((unsupported)) 0)
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        (((unsupported)) ((((unsupported)) (((xsocket).xcreate_server)) ((((unsupported)) ("") ((xport)))) (((xsocket).xAF_INET6)) (TRUE))) ((xsock)))
                          seq
                            bogusForceDataize.write ((((xself).xecho_server)) ((xsock)))
                            bogusForceDataize.write ((((xself).xecho_client)) ((((unsupported)) ("::1") ((xport)))) (((xsocket).xAF_INET6)))
            xtest_main.write
              []
                memory > xthread_info
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)) ((xGeneralModuleTests)) ((xBasicTCPTest)) ((xTCPCloserTest)) ((xTCPTimeoutTest)) ((xTestExceptions)) ((xBufferIOTest)) ((xBasicTCPTest2)) ((xBasicUDPTest)) ((xUDPTimeoutTest)) ((xCreateServerTest)) ((xCreateServerFunctionalTest)))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xNonBlockingTCPTests)) ((xFileObjectClassTestCase)) ((xUnbufferedFileObjectClassTestCase)) ((xLineBufferedFileObjectClassTestCase)) ((xSmallBufferedFileObjectClassTestCase)) ((xUnicodeReadFileObjectClassTestCase)) ((xUnicodeWriteFileObjectClassTestCase)) ((xUnicodeReadWriteFileObjectClassTestCase)) ((xNetworkConnectionNoServer)) ((xNetworkConnectionAttributesTest)) ((xNetworkConnectionBehaviourTest)) ((xContextManagersTest)) ((xInheritanceTest)) ((xNonblockConstantTest)))))
                    bogusForceDataize.write ((((xtests).xappend)) ((xBasicSocketPairTest)))
                    bogusForceDataize.write ((((xtests).xappend)) ((xTestUnixDomain)))
                    bogusForceDataize.write ((((xtests).xappend)) ((xTestLinuxAbstractNamespace)))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xTIPCTest)) ((xTIPCThreadableTest)))))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xBasicCANTest)) ((xCANTest)))))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xBasicRDSTest)) ((xRDSTest)))))
                    bogusForceDataize.write ((((xtests).xappend)) ((xLinuxKernelCryptoAPI)))
                    bogusForceDataize.write ((((xtests).xappend)) ((xBasicQIPCRTRTest)))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xBasicVSOCKTest)) ((xThreadedVSOCKSocketStreamTest)))))
                    bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xCmsgMacroTests)) ((xSendmsgUDPTest)) ((xRecvmsgUDPTest)) ((xRecvmsgIntoUDPTest)) ((xSendmsgUDP6Test)) ((xRecvmsgUDP6Test)) ((xRecvmsgRFC3542AncillaryUDP6Test)) ((xRecvmsgIntoRFC3542AncillaryUDP6Test)) ((xRecvmsgIntoUDP6Test)) ((xSendmsgTCPTest)) ((xRecvmsgTCPTest)) ((xRecvmsgIntoTCPTest)) ((xSendmsgSCTPStreamTest)) ((xRecvmsgSCTPStreamTest)) ((xRecvmsgIntoSCTPStreamTest)) ((xSendmsgUnixStreamTest)) ((xRecvmsgUnixStreamTest)) ((xRecvmsgIntoUnixStreamTest)) ((xRecvmsgSCMRightsStreamTest)) ((xRecvmsgIntoSCMRightsStreamTest)) ((xInterruptedRecvTimeoutTest)) ((xInterruptedSendTimeoutTest)) ((xTestSocketSharing)) ((xSendfileUsingSendTest)) ((xSendfileUsingSendfileTest)))))
                    bogusForceDataize.write ((((xtests).xappend)) ((xTestMSWindowsTCPFlags)))
                    xthread_info.write ((((xsupport).xthreading_setup)) 0)
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtests)))))
                    bogusForceDataize.write ((((xsupport).xthreading_cleanup)) ((((unsupported)) ((xthread_info)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)