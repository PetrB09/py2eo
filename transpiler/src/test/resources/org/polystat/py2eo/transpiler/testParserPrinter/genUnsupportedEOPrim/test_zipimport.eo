memory > xImportError
memory > xz
memory > xAssertionError
memory > xrange
memory > xzipimport
memory > xlno
memory > xopen
memory > xx
memory > xbytes
memory > xZipFile
memory > xextract_stack
memory > xcm
memory > xZIP_STORED
memory > xinspect
memory > xdata
memory > xlist
memory > xZIP_DEFLATED
memory > xImportHooksBaseTestCase
memory > xp2
memory > xlocals
memory > ximportlib
memory > xUncompressedZipImportTestCase
memory > xio
memory > xBadFileZipImportTestCase
memory > xlinecache
memory > xCompressedZipImportTestCase
memory > xold_master
memory > xprint_tb
memory > xbytearray
memory > xmodules
memory > xkw
memory > xtype
memory > xf
memory > xrepr
memory > xint
memory > xZipInfo
memory > xtime
memory > xdoctest
memory > xcompile
memory > xstruct
memory > xsupport
memory > xsys
memory > xOSError
memory > xos
memory > xextract_tb
memory > xmtime
memory > xname
memory > xunittest
memory > xn
memory > xmemoryview
memory > xline
memory > xmarshal
memory > xlen
memory > xfp
memory > xTypeError
memory > xp1
memory > x__name__
[] > test_zipimport
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdoTest
        memory > xtest_pyc
        memory > xtestEmptyFilename
        memory > xTESTPACK
        memory > xtestBadMagic
        memory > xtest_src
        memory > xtestGetData
        memory > xtestDoctestSuite
        memory > xtestEmptyFile
        memory > xpyc_ext
        memory > xtestBoth
        memory > xTEMP_ZIP
        memory > xdoDoctestFile
        memory > xtestDefaultOptimizationLevel
        memory > xtestEmptyPy
        memory > xmodule_path_to_dotted_name
        memory > xtestBadMagic2
        memory > xtestImporterAttr
        memory > xtestComment
        memory > xraise_src
        memory > xtestAFakeZlib
        memory > xtestNotZipFile
        memory > xdoDoctestSuite
        memory > xtestImport_WithStuff
        memory > xTESTPACK2
        memory > xtestTraceback
        memory > xpyc_file
        memory > xtestGetSource
        memory > xmake_pyc
        memory > xtestZipImporterMethods
        memory > xtest_main
        memory > xtestBeginningCruftAndComment
        memory > xtestFileUnreadable
        memory > xTESTMOD
        memory > xtest_checked_hash_based_change_pyc
        memory > xmakeZip
        memory > xtestPy
        memory > xtestMixedNamespacePackage
        memory > xrunDoctest
        memory > xsetUp
        memory > xtestNoFile
        memory > xtestDoctestFile
        memory > xtestSubPackage
        memory > xtestUnencodable
        memory > xcompression
        memory > xtestGetCompiledSource
        memory > xtestNamespacePackage
        memory > xtest_co
        memory > xNOW
        memory > xdoTraceback
        memory > xtestFilenameTooLong
        memory > xtestBadArgs
        memory > xtestUncheckedHashBasedPyc
        memory > xassertModuleSource
        memory > xtestPyc
        memory > xtestBytesPath
        memory > xmakeTree
        memory > xtestLargestPossibleComment
        memory > xassertZipFailure
        memory > xtestBadMTime
        memory > xtestSubNamespacePackage
        memory > xTEMP_DIR
        memory > xtearDown
        memory > xzlib
        memory > xtestPackage
        memory > xtestZipImporterMethodsInSubDirectory
        memory > x_testBogusZipFile
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xzlib.write "None: is there a None literal in the EO language?"
            xtest_src.write (((unsupported)) 0)
            xtest_co.write (((xcompile)) ((xtest_src)) ("<???>") ("exec"))
            xraise_src.write "def do_raise(): raise TypeErrorn"
            xmake_pyc.write
              [xco xmtime xsize]
                memory > xdata
                memory > xpyc
                seq > @
                  seq
                    xdata.write ((((xmarshal).xdumps)) ((xco)))
                    (((unsupported)) ((((xtype)) ((xmtime)))) ((((xtype)) (0.0)))).if
                      ((xmtime).less 2147483647).if
                        xmtime.write (((xint)) ((xmtime)))
                        xmtime.write (((xint)) ((((((unsupported)) 0).neg).add (((xint)) ((xmtime))))))
                    xpyc.write (((((ximportlib).xutil).xMAGIC_NUMBER).add ((((xstruct).xpack)) ("<iii") (0) ((((xint)) ((xmtime)))) (((xsize).and (((unsupported)) 0))))).add (xdata))
                    (((unsupported)) ((xpyc)))
            xmodule_path_to_dotted_name.write
              [xpath]
                seq > @
                  (((unsupported)) (((((xpath).xreplace)) (((xos).xsep)) ("."))))
            xNOW.write ((((xtime).xtime)) 0)
            xtest_pyc.write (((xmake_pyc)) ((xtest_co)) ((xNOW)) ((((xlen)) ((xtest_src)))))
            xTESTMOD.write "ziptestmodule"
            xTESTPACK.write "ziptestpackage"
            xTESTPACK2.write "ziptestpackage2"
            xTEMP_DIR.write (((((xos).xpath).xabspath)) ("junk95142"))
            xTEMP_ZIP.write (((((xos).xpath).xabspath)) ("junk95142.zip"))
            xpyc_file.write (((((ximportlib).xutil).xcache_from_source)) (((xTESTMOD).add ".py")))
            xpyc_ext.write ".pyc"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xpath)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xmeta_path)) ((((unsupported)) (((xsys).xmeta_path)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xpath_hooks)) ((((unsupported)) (((xsys).xpath_hooks)) ((((unsupported)) 0)))))
                        bogusForceDataize.write (((((xsys).xpath_importer_cache).xclear)) 0)
                        (((unsupported)) (((xself).xmodules_before)) (((((xsupport).xmodules_setup)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))) (((xself).xpath)))
                        (((unsupported)) ((((unsupported)) (((xsys).xmeta_path)) ((((unsupported)) 0)))) (((xself).xmeta_path)))
                        (((unsupported)) ((((unsupported)) (((xsys).xpath_hooks)) ((((unsupported)) 0)))) (((xself).xpath_hooks)))
                        bogusForceDataize.write (((((xsys).xpath_importer_cache).xclear)) 0)
                        bogusForceDataize.write ((((xsupport).xmodules_cleanup)) ((((unsupported)) (((xself).xmodules_before)))))
            (((unsupported)) ((xImportHooksBaseTestCase)))
              seq
                xcompression.write (xZIP_STORED)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlinecache).xclearcache)) 0)
                        bogusForceDataize.write (((((xzipimport).x_zip_directory_cache).xclear)) 0)
                        bogusForceDataize.write ((((xImportHooksBaseTestCase).xsetUp)) ((xself)))
                xmakeTree.write
                  [xself xfiles xdirName]
                    memory > xdname
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xdirName)))
                        (((unsupported)) ((((unsupported)) ((xname)) ((((unsupported)) ((xmtime)) ((xdata)))))) (((((xfiles).xitems)) 0)))
                          seq
                            xpath.write (((((xos).xpath).xjoin)) ((xdirName)) ((xname)))
                            ((((unsupported)) ((xpath)) ((1.neg))).eq ((xos).xsep)).if
                              ((((((xos).xpath).xisdir)) ((xpath))).not).if
                                bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)))
                              seq
                                xdname.write (((((xos).xpath).xdirname)) ((xpath)))
                                ((((((xos).xpath).xisdir)) ((xdname))).not).if
                                  bogusForceDataize.write ((((xos).xmakedirs)) ((xdname)))
                                (((unsupported)) ((((xopen)) ((xpath)) ("wb"))) ((xfp)))
                                  bogusForceDataize.write ((((xfp).xwrite)) ((xdata)))
                xmakeZip.write
                  [xself xfiles xzipName]
                    memory > xcomment
                    memory > xdata
                    memory > xzinfo
                    memory > xstuff
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xzipName)))
                        (((unsupported)) ((((xZipFile)) ((xzipName)) ("w"))) ((xz)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xname)) ((((unsupported)) ((xmtime)) ((xdata)))))) (((((xfiles).xitems)) 0)))
                              seq
                                xzinfo.write (((xZipInfo)) ((xname)) (((((xtime).xlocaltime)) ((xmtime)))))
                                (((unsupported)) (((xzinfo).xcompress_type)) (((xself).xcompression)))
                                bogusForceDataize.write ((((xz).xwritestr)) ((xzinfo)) ((xdata)))
                            xcomment.write ((((xkw).xget)) ("comment") ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((xcomment)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)) (((xz).xcomment)) ((xcomment)))
                        xstuff.write ((((xkw).xget)) ("stuff") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xstuff)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)) ((((xopen)) ((xzipName)) ("rb"))) ((xf)))
                              xdata.write ((((xf).xread)) 0)
                            (((unsupported)) ((((xopen)) ((xzipName)) ("wb"))) ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xwrite)) ((xstuff)))
                                bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                xdoTest.write
                  [xself xexpected_ext xfiles]
                    memory > xfile
                    memory > xcall
                    memory > xmod
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakeZip)) ((xfiles)) ((((unsupported)) ((xkw)))))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xTEMP_ZIP)))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((xmodules)))))
                        xcall.write ((((xkw).xget)) ("call"))
                        (((unsupported)) ((xcall)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((xcall)) ((xmod)))
                        (xexpected_ext).if
                          seq
                            xfile.write ((((xmod).xget_file)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xfile)) (((((((xos).xpath).xjoin)) ((xTEMP_ZIP)) ((((unsupported)) ((xmodules))))).add (xexpected_ext))))
                xtestAFakeZlib.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        (((unsupported)) ("zlib") (((xsys).xbuiltin_module_names))).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("zlib is a builtin module"))
                        (((unsupported)) ("zlib") (((xsys).xmodules))).if
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("zlib"))))))
                        xfiles.write (((unsupported)) ("zlib.py") ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) ((xImportError)))
                          bogusForceDataize.write ((((xself).xdoTest)) (".py") ((xfiles)) ("zlib"))
                          (((xself).xcompression).neq (xZIP_DEFLATED)).if
                            bogusForceDataize.write ((((xself).xfail)) ("expected test to not raise ImportError"))
                          (((xself).xcompression).neq (xZIP_STORED)).if
                            bogusForceDataize.write ((((xself).xfail)) ("expected test to raise ImportError"))
                xtestPy.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        bogusForceDataize.write ((((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)))
                xtestPyc.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTMOD)))
                xtestBoth.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTMOD)))
                xtestUncheckedHashBasedPyc.write
                  [xself]
                    memory > xcheck
                    memory > xbytecode
                    memory > xfiles
                    memory > xsource_hash
                    memory > xsource
                    seq > @
                      seq
                        xsource.write "state = 'old'"
                        xsource_hash.write (((((ximportlib).xutil).xsource_hash)) ((xsource)))
                        xbytecode.write (((((ximportlib).x_bootstrap_external).x_code_to_hash_pyc)) ((((xcompile)) ((xsource)) ("???") ("exec"))) ((xsource_hash)) (FALSE))
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ("state = 'new'"))) (((xTESTMOD).add ".pyc")) ((((unsupported)) (((xNOW).sub 20)) ((xbytecode)))))
                        xcheck.write
                          [xmod]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xstate)) ("old"))
                        (((unsupported)) (((xself).xdoTest)) ("None: is there a None literal in the EO language?") ((xfiles)) ((xTESTMOD)) ((xcheck)))
                xtest_checked_hash_based_change_pyc.write
                  [xself]
                    memory > xcheck
                    memory > xbytecode
                    memory > xfiles
                    memory > xsource_hash
                    memory > xsource
                    seq > @
                      (((unsupported)) 0)
                        xsource.write "state = 'old'"
                        xsource_hash.write (((((ximportlib).xutil).xsource_hash)) ((xsource)))
                        xbytecode.write (((((ximportlib).x_bootstrap_external).x_code_to_hash_pyc)) ((((xcompile)) ((xsource)) ("???") ("exec"))) ((xsource_hash)) (FALSE))
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ("state = 'new'"))) (((xTESTMOD).add ".pyc")) ((((unsupported)) (((xNOW).sub 20)) ((xbytecode)))))
                        xcheck.write
                          [xmod]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xmod).xstate)) ("new"))
                        (((unsupported)) (((xself).xdoTest)) ("None: is there a None literal in the EO language?") ((xfiles)) ((xTESTMOD)) ((xcheck)))
                xtestEmptyPy.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) (""))))
                        bogusForceDataize.write ((((xself).xdoTest)) ("None: is there a None literal in the EO language?") ((xfiles)) ((xTESTMOD)))
                xtestBadMagic.write
                  [xself]
                    memory > xfiles
                    memory > xbadmagic_pyc
                    seq > @
                      seq
                        xbadmagic_pyc.write (((xbytearray)) ((xtest_pyc)))
                        (((unsupported)) ((((unsupported)) ((xbadmagic_pyc)) (0))) (4))
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xbadmagic_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)))
                xtestBadMagic2.write
                  [xself]
                    memory > xfiles
                    memory > xbadmagic_pyc
                    seq > @
                      seq
                        xbadmagic_pyc.write (((xbytearray)) ((xtest_pyc)))
                        (((unsupported)) ((((unsupported)) ((xbadmagic_pyc)) (0))) (4))
                        xfiles.write (((unsupported)) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xbadmagic_pyc)))))
                        (((unsupported)) ((xImportError)))
                          bogusForceDataize.write ((((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)))
                          bogusForceDataize.write ((((xself).xfail)) ("expected ImportError; import from bad pyc"))
                xtestBadMTime.write
                  [xself]
                    memory > xbadtime_pyc
                    memory > xfiles
                    seq > @
                      seq
                        xbadtime_pyc.write (((xbytearray)) ((xtest_pyc)))
                        (((unsupported)) ((((unsupported)) ((xbadtime_pyc)) (11))) (2))
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xbadtime_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)))
                xtestPackage.write
                  [xself]
                    memory > xpackdir
                    memory > xfiles
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xfiles.write (((unsupported)) ((((xpackdir).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTPACK)) ((xTESTMOD)))
                xtestSubPackage.write
                  [xself]
                    memory > xpackdir
                    memory > xpackdir2
                    memory > xfiles
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xfiles.write (((unsupported)) ((((xpackdir).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTPACK)) ((xTESTPACK2)) ((xTESTMOD)))
                xtestSubNamespacePackage.write
                  [xself]
                    memory > xpackdir
                    memory > xpackdir2
                    memory > xfiles
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xfiles.write (((unsupported)) ((xpackdir)) ((((unsupported)) ((xNOW)) (""))) ((xpackdir2)) ((((unsupported)) ((xNOW)) (""))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTPACK)) ((xTESTPACK2)) ((xTESTMOD)))
                xtestMixedNamespacePackage.write
                  [xself]
                    memory > xsubpkg
                    memory > xpackdir2
                    memory > xfiles2
                    memory > xzip1
                    memory > xmpath
                    memory > xpackdir
                    memory > xzip2
                    memory > xpackdir3
                    memory > xfiles1
                    memory > xmod
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xpackdir3.write ((((xpackdir2).add (xTESTPACK)).add "3").add ((xos).xsep))
                        xfiles1.write (((unsupported)) ((xpackdir)) ((((unsupported)) ((xNOW)) (""))) ((((xpackdir).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((xpackdir2)) ((((unsupported)) ((xNOW)) (""))) ((xpackdir3)) ((((unsupported)) ((xNOW)) (""))) ((((xpackdir3).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) (((((xpackdir2).add (xTESTMOD)).add "3").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        xfiles2.write (((unsupported)) ((xpackdir)) ((((unsupported)) ((xNOW)) (""))) (((((xpackdir).add (xTESTMOD)).add "2").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((xpackdir2)) ((((unsupported)) ((xNOW)) (""))) (((((xpackdir2).add (xTESTMOD)).add "2").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        xzip1.write (((((xos).xpath).xabspath)) ("path1.zip"))
                        bogusForceDataize.write ((((xself).xmakeZip)) ((xfiles1)) ((xzip1)))
                        xzip2.write (xTEMP_DIR)
                        bogusForceDataize.write ((((xself).xmakeTree)) ((xfiles2)) ((xzip2)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip1)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip2)))
                        xmod.write ((((ximportlib).ximport_module)) ((xTESTPACK)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xlen)) (((xmod).x__path__)))))
                        (((unsupported)) ((((unsupported)) ((xp1)) ((xp2)))) (((xmod).x__path__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((xTEMP_DIR)))) ((((unsupported)) (((((xp1).xsplit)) (((xos).xsep)))) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) (((((xp2).xsplit)) (((xos).xsep)))) ((2.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((unsupported)) (((((xpackdir3).xreplace)) (((xos).xsep)) ("."))) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((xmod).x__path__)))))
                        xmpath.write (((unsupported)) (((((((unsupported)) ((((xlist)) (((xmod).x__path__)))) (0)).xsplit)) (("path1.zip".add ((xos).xsep))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpackdir3)) ((((unsupported)) ((1.neg)))))) ((xmpath)))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xTESTPACK)) ((xTESTMOD)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xTESTPACK)) (((xTESTMOD).add "2")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((xTEMP_DIR)))) ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xsubpkg.write (((".".xjoin)) ((((unsupported)) ((xTESTPACK)) ((xTESTPACK2)))))
                        xmod.write ((((ximportlib).ximport_module)) ((xsubpkg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xlen)) (((xmod).x__path__)))))
                        (((unsupported)) ((((unsupported)) ((xp1)) ((xp2)))) (((xmod).x__path__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((xTEMP_DIR)))) ((((unsupported)) (((((xp1).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) (((((xp2).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) ((xTESTMOD)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((xTEMP_DIR)))) ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) (((xTESTMOD).add "2")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((xTEMP_DIR)))) ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) (((xTESTMOD).add "3")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                xtestNamespacePackage.write
                  [xself]
                    memory > xsubpkg
                    memory > xpackdir2
                    memory > xfiles2
                    memory > xzip1
                    memory > xmpath
                    memory > xpackdir
                    memory > xzip2
                    memory > xpackdir3
                    memory > xfiles1
                    memory > xmod
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xpackdir3.write ((((xpackdir2).add (xTESTPACK)).add "3").add ((xos).xsep))
                        xfiles1.write (((unsupported)) ((xpackdir)) ((((unsupported)) ((xNOW)) (""))) ((((xpackdir).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((xpackdir2)) ((((unsupported)) ((xNOW)) (""))) ((xpackdir3)) ((((unsupported)) ((xNOW)) (""))) ((((xpackdir3).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) (((((xpackdir2).add (xTESTMOD)).add "3").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        xzip1.write (((((xos).xpath).xabspath)) ("path1.zip"))
                        bogusForceDataize.write ((((xself).xmakeZip)) ((xfiles1)) ((xzip1)))
                        xfiles2.write (((unsupported)) ((xpackdir)) ((((unsupported)) ((xNOW)) (""))) (((((xpackdir).add (xTESTMOD)).add "2").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((xpackdir2)) ((((unsupported)) ((xNOW)) (""))) (((((xpackdir2).add (xTESTMOD)).add "2").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        xzip2.write (((((xos).xpath).xabspath)) ("path2.zip"))
                        bogusForceDataize.write ((((xself).xmakeZip)) ((xfiles2)) ((xzip2)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip1)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip2)))
                        xmod.write ((((ximportlib).ximport_module)) ((xTESTPACK)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xlen)) (((xmod).x__path__)))))
                        (((unsupported)) ((((unsupported)) ((xp1)) ((xp2)))) (((xmod).x__path__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path2.zip") ((((unsupported)) (((((xp1).xsplit)) (((xos).xsep)))) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) (((((xp2).xsplit)) (((xos).xsep)))) ((2.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((unsupported)) (((((xpackdir3).xreplace)) (((xos).xsep)) ("."))) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((xmod).x__path__)))))
                        xmpath.write (((unsupported)) (((((((unsupported)) ((((xlist)) (((xmod).x__path__)))) (0)).xsplit)) (("path1.zip".add ((xos).xsep))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpackdir3)) ((((unsupported)) ((1.neg)))))) ((xmpath)))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xTESTPACK)) ((xTESTMOD)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xTESTPACK)) (((xTESTMOD).add "2")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path2.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xsubpkg.write (((".".xjoin)) ((((unsupported)) ((xTESTPACK)) ((xTESTPACK2)))))
                        xmod.write ((((ximportlib).ximport_module)) ((xsubpkg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xlen)) (((xmod).x__path__)))))
                        (((unsupported)) ((((unsupported)) ((xp1)) ((xp2)))) (((xmod).x__path__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path2.zip") ((((unsupported)) (((((xp1).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) (((((xp2).xsplit)) (((xos).xsep)))) ((3.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) ((xTESTMOD)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path2.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) (((xTESTMOD).add "2")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path2.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                        xmod.write ((((ximportlib).ximport_module)) ((((".".xjoin)) ((((unsupported)) ((xsubpkg)) (((xTESTMOD).add "3")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path1.zip") ((((unsupported)) ((((((xmod).x__file__).xsplit)) (((xos).xsep)))) ((4.neg)))))
                xtestZipImporterMethods.write
                  [xself]
                    memory > xmod_path
                    memory > xloader
                    memory > xfind_mod
                    memory > xzi2
                    memory > xzinfo
                    memory > xexisting_pack_path
                    memory > xexpected_path_path
                    memory > xpackdir2
                    memory > xload_mod
                    memory > xfiles
                    memory > xmod
                    memory > xzi
                    memory > xmod_name
                    memory > xpackdir
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xfiles.write (((unsupported)) ((((xpackdir).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) (("spam".add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTEMP_ZIP)))
                        (((unsupported)) ((((xZipFile)) ((xTEMP_ZIP)) ("w"))) ((xz)))
                          (((unsupported)) ((((unsupported)) ((xname)) ((((unsupported)) ((xmtime)) ((xdata)))))) (((((xfiles).xitems)) 0)))
                            seq
                              xzinfo.write (((xZipInfo)) ((xname)) (((((xtime).xlocaltime)) ((xmtime)))))
                              (((unsupported)) (((xzinfo).xcompress_type)) (((xself).xcompression)))
                              (((unsupported)) (((xzinfo).xcomment)) ("spam"))
                              bogusForceDataize.write ((((xz).xwritestr)) ((xzinfo)) ((xdata)))
                        xzi.write ((((xzipimport).xzipimporter)) ((xTEMP_ZIP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xzi).xarchive)) ((xTEMP_ZIP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) ((xTESTPACK)))) (TRUE))
                        xfind_mod.write ((((xzi).xfind_module)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xfind_mod)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfind_mod)) (((xzipimport).xzipimporter)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xfind_mod).xis_package)) ("spam"))))
                        xload_mod.write ((((xfind_mod).xload_module)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfind_mod).xget_filename)) ("spam"))) (((xload_mod).x__file__)))
                        xmod.write ((((xzi).xload_module)) ((xTESTPACK)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_filename)) ((xTESTPACK)))) (((xmod).x__file__)))
                        xexisting_pack_path.write (((unsupported)) ((((((ximportlib).ximport_module)) ((xTESTPACK))).x__path__)) (0))
                        xexpected_path_path.write (((((xos).xpath).xjoin)) ((xTEMP_ZIP)) ((xTESTPACK)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexisting_pack_path)) ((xexpected_path_path)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) (((xpackdir).add "__init__")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) (((xpackdir).add (xTESTPACK2))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) (((xpackdir2).add (xTESTMOD))))) (FALSE))
                        xmod_path.write ((xpackdir2).add (xTESTMOD))
                        xmod_name.write (((xmodule_path_to_dotted_name)) ((xmod_path)))
                        xmod.write ((((ximportlib).ximport_module)) ((xmod_name)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xmod_name)) (((xsys).xmodules)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_source)) ((xTESTPACK)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_source)) ((xmod_path)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_filename)) ((xmod_path)))) (((xmod).x__file__)))
                        xloader.write ((xmod).x__loader__)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xloader).xget_source)) ((xmod_name)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xloader).xget_filename)) ((xmod_name)))) (((xmod).x__file__)))
                        xzi2.write ((((xzipimport).xzipimporter)) ((((xTEMP_ZIP).add ((xos).xsep)).add (xTESTPACK))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xzi2).xarchive)) ((xTEMP_ZIP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xzi2).xprefix)) (((xTESTPACK).add ((xos).xsep))))
                xtestZipImporterMethodsInSubDirectory.write
                  [xself]
                    memory > xmod_path
                    memory > xloader
                    memory > xzi2
                    memory > xzinfo
                    memory > xpackdir2
                    memory > xload_mod
                    memory > xfiles
                    memory > xmod
                    memory > xmod_name
                    memory > xpackdir
                    memory > xpkg_path
                    memory > xfind_mod_dotted
                    memory > xzi
                    seq > @
                      seq
                        xpackdir.write ((xTESTPACK).add ((xos).xsep))
                        xpackdir2.write (((xpackdir).add (xTESTPACK2)).add ((xos).xsep))
                        xfiles.write (((unsupported)) ((((xpackdir2).add "__init__").add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))) ((((xpackdir2).add (xTESTMOD)).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xtest_pyc)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTEMP_ZIP)))
                        (((unsupported)) ((((xZipFile)) ((xTEMP_ZIP)) ("w"))) ((xz)))
                          (((unsupported)) ((((unsupported)) ((xname)) ((((unsupported)) ((xmtime)) ((xdata)))))) (((((xfiles).xitems)) 0)))
                            seq
                              xzinfo.write (((xZipInfo)) ((xname)) (((((xtime).xlocaltime)) ((xmtime)))))
                              (((unsupported)) (((xzinfo).xcompress_type)) (((xself).xcompression)))
                              (((unsupported)) (((xzinfo).xcomment)) ("eggs"))
                              bogusForceDataize.write ((((xz).xwritestr)) ((xzinfo)) ((xdata)))
                        xzi.write ((((xzipimport).xzipimporter)) ((((xTEMP_ZIP).add ((xos).xsep)).add (xpackdir))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xzi).xarchive)) ((xTEMP_ZIP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xzi).xprefix)) ((xpackdir)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) ((xTESTPACK2)))) (TRUE))
                        xmod.write ((((xzi).xload_module)) ((xTESTPACK2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_filename)) ((xTESTPACK2)))) (((xmod).x__file__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) ((((xTESTPACK2).add ((xos).xsep)).add "__init__")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xis_package)) ((((xTESTPACK2).add ((xos).xsep)).add (xTESTMOD))))) (FALSE))
                        xpkg_path.write ((((xTEMP_ZIP).add ((xos).xsep)).add (xpackdir)).add (xTESTPACK2))
                        xzi2.write ((((xzipimport).xzipimporter)) ((xpkg_path)))
                        xfind_mod_dotted.write ((((xzi2).xfind_module)) ((xTESTMOD)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xfind_mod_dotted)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfind_mod_dotted)) (((xzipimport).xzipimporter)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xzi2).xis_package)) ((xTESTMOD)))))
                        xload_mod.write ((((xfind_mod_dotted).xload_module)) ((xTESTMOD)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfind_mod_dotted).xget_filename)) ((xTESTMOD)))) (((xload_mod).x__file__)))
                        xmod_path.write (((xTESTPACK2).add ((xos).xsep)).add (xTESTMOD))
                        xmod_name.write (((xmodule_path_to_dotted_name)) ((xmod_path)))
                        xmod.write ((((ximportlib).ximport_module)) ((xmod_name)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xmod_name)) (((xsys).xmodules)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_source)) ((xTESTPACK2)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_source)) ((xmod_path)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xzi).xget_filename)) ((xmod_path)))) (((xmod).x__file__)))
                        xloader.write ((xmod).x__loader__)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xloader).xget_source)) ((xmod_name)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xloader).xget_filename)) ((xmod_name)))) (((xmod).x__file__)))
                xtestGetData.write
                  [xself]
                    memory > xname
                    memory > xzi
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTEMP_ZIP)))
                        (((unsupported)) ((((xZipFile)) ((xTEMP_ZIP)) ("w"))) ((xz)))
                          seq
                            (((unsupported)) (((xz).xcompression)) (((xself).xcompression)))
                            xname.write "testdata.dat"
                            xdata.write (((xbytes)) ((((unsupported)) ((xx)) ((xx)) ((((xrange)) (256))))))
                            bogusForceDataize.write ((((xz).xwritestr)) ((xname)) ((xdata)))
                        xzi.write ((((xzipimport).xzipimporter)) ((xTEMP_ZIP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (((((xzi).xget_data)) ((xname)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("zipimporter object") ((((xrepr)) ((xzi)))))
                xtestImporterAttr.write
                  [xself]
                    memory > xsrc
                    memory > xfiles
                    memory > xpyc
                    seq > @
                      seq
                        xsrc.write (((unsupported)) 0)
                        xpyc.write (((xmake_pyc)) ((((xcompile)) ((xsrc)) ("<???>") ("exec"))) ((xNOW)) ((((xlen)) ((xsrc)))))
                        xfiles.write (((unsupported)) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xpyc)))) ("some.data") ((((unsupported)) ((xNOW)) ("some data"))))
                        bogusForceDataize.write ((((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTMOD)))
                xtestDefaultOptimizationLevel.write
                  [xself]
                    memory > xsrc
                    memory > xfiles
                    memory > xmod
                    seq > @
                      seq
                        xsrc.write (((unsupported)) 0)
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xsrc)))))
                        bogusForceDataize.write ((((xself).xmakeZip)) ((xfiles)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xTEMP_ZIP)))
                        xmod.write ((((ximportlib).ximport_module)) ((xTESTMOD)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmod).xtest)) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) (((xmod).xtest)) (FALSE))
                xtestImport_WithStuff.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) (("Some Stuff".mul 31)))
                xassertModuleSource.write
                  [xself xmodule]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xinspect).xgetsource)) ((xmodule)))) ((xtest_src)))
                xtestGetSource.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) (((xself).xassertModuleSource)))
                xtestGetCompiledSource.write
                  [xself]
                    memory > xfiles
                    memory > xpyc
                    seq > @
                      seq
                        xpyc.write (((xmake_pyc)) ((((xcompile)) ((xtest_src)) ("<???>") ("exec"))) ((xNOW)) ((((xlen)) ((xtest_src)))))
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))) (((xTESTMOD).add (xpyc_ext))) ((((unsupported)) ((xNOW)) ((xpyc)))))
                        (((unsupported)) (((xself).xdoTest)) ((xpyc_ext)) ((xfiles)) ((xTESTMOD)) (((xself).xassertModuleSource)))
                xrunDoctest.write
                  [xself xcallback]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))) ("xyz.txt") ((((unsupported)) ((xNOW)) (">>> log.append(True)n"))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) ((xcallback)))
                xdoDoctestFile.write
                  [xself xmodule]
                    memory > xlog
                    seq > @
                      seq
                        xlog.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xold_master)) (((xdoctest).xmaster)))) ((((unsupported)) (((xdoctest).xmaster)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) 0)
                          (((unsupported)) (((xdoctest).xtestfile)) ("xyz.txt") ((xmodule)) (TRUE) ((((xlocals)) 0)))
                          (((unsupported)) (((xdoctest).xmaster)) ((xold_master)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlog)) ((((unsupported)) (TRUE))))
                xtestDoctestFile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrunDoctest)) (((xself).xdoDoctestFile)))
                xdoDoctestSuite.write
                  [xself xmodule]
                    memory > xlog
                    seq > @
                      seq
                        xlog.write (((unsupported)) 0)
                        bogusForceDataize.write ((((((unsupported)) (((xdoctest).xDocFileTest)) ("xyz.txt") ((xmodule)) (TRUE) ((((xlocals)) 0))).xrun)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlog)) ((((unsupported)) (TRUE))))
                xtestDoctestSuite.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrunDoctest)) (((xself).xdoDoctestSuite)))
                xdoTraceback.write
                  [xself xmodule]
                    memory > xs
                    memory > xtb
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xmodule).xdo_raise)) 0)
                        seq
                          xtb.write ((((unsupported)) (((((xsys).xexc_info)) 0)) (2)).xtb_next)
                          (((unsupported)) ((((unsupported)) ((xf)) ((xlno)) ((xn)) ((xline)))) ((((unsupported)) ((((xextract_tb)) ((xtb)) (1))) (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) (((((xraise_src).xstrip)) 0)))
                          (((unsupported)) ((((unsupported)) ((xf)) ((xlno)) ((xn)) ((xline)))) ((((unsupported)) ((((xextract_stack)) (((xtb).xtb_frame)) (1))) (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) (((((xraise_src).xstrip)) 0)))
                          xs.write ((((xio).xStringIO)) 0)
                          bogusForceDataize.write (((xprint_tb)) ((xtb)) (1) ((xs)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xs).xgetvalue)) 0).xendswith)) ((xraise_src)))))
                        (((unsupported)) ((((xAssertionError)) ("This ought to be impossible"))))
                xtestTraceback.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xraise_src)))))
                        (((unsupported)) (((xself).xdoTest)) ("None: is there a None literal in the EO language?") ((xfiles)) ((xTESTMOD)) (((xself).xdoTraceback)))
                xtestUnencodable.write
                  [xself]
                    memory > xzinfo
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        xfilename.write (((xsupport).xTESTFN_UNENCODABLE).add ".zip")
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)) ((((xZipFile)) ((xfilename)) ("w"))) ((xz)))
                          seq
                            xzinfo.write (((xZipInfo)) (((xTESTMOD).add ".py")) (((((xtime).xlocaltime)) ((xNOW)))))
                            (((unsupported)) (((xzinfo).xcompress_type)) (((xself).xcompression)))
                            bogusForceDataize.write ((((xz).xwritestr)) ((xzinfo)) ((xtest_src)))
                        bogusForceDataize.write (((((((xzipimport).xzipimporter)) ((xfilename))).xload_module)) ((xTESTMOD)))
                xtestBytesPath.write
                  [xself]
                    memory > xzinfo
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xsupport).xTESTFN).add ".zip")
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)) ((((xZipFile)) ((xfilename)) ("w"))) ((xz)))
                          seq
                            xzinfo.write (((xZipInfo)) (((xTESTMOD).add ".py")) (((((xtime).xlocaltime)) ((xNOW)))))
                            (((unsupported)) (((xzinfo).xcompress_type)) (((xself).xcompression)))
                            bogusForceDataize.write ((((xz).xwritestr)) ((xzinfo)) ((xtest_src)))
                        bogusForceDataize.write ((((xzipimport).xzipimporter)) ((xfilename)))
                        bogusForceDataize.write ((((xzipimport).xzipimporter)) (((((xos).xfsencode)) ((xfilename)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xzipimport).xzipimporter)) ((((xbytearray)) (((((xos).xfsencode)) ((xfilename)))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xzipimport).xzipimporter)) ((((xmemoryview)) (((((xos).xfsencode)) ((xfilename)))))))
                xtestComment.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) ("comment"))
                xtestBeginningCruftAndComment.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) (("cruft".mul 64)) ("hi"))
                xtestLargestPossibleComment.write
                  [xself]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)) (((xTESTMOD).add ".py")) ((((unsupported)) ((xNOW)) ((xtest_src)))))
                        (((unsupported)) (((xself).xdoTest)) (".py") ((xfiles)) ((xTESTMOD)) (("c".mul ((((unsupported)) (1) (16)).sub 1))))
            (((unsupported)) ((xUncompressedZipImportTestCase)) (((xsupport).xrequires_zlib)))
              xcompression.write (xZIP_DEFLATED)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xassertZipFailure.write
                  [xself xfilename]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) (((xzipimport).xZipImportError)) (((xzipimport).xzipimporter)) ((xfilename)))
                xtestNoFile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertZipFailure)) ("AdfjdkFJKDFJjdklfjs"))
                xtestEmptyFilename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertZipFailure)) (""))
                xtestBadArgs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xzipimport).xzipimporter)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xzipimport).xzipimporter)) ((xTESTMOD)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xzipimport).xzipimporter)) ((((xlist)) (((((xos).xfsencode)) ((xTESTMOD)))))))
                xtestFilenameTooLong.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertZipFailure)) (("A".mul 33000)))
                xtestEmptyFile.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)) ((xTESTMOD)))
                        bogusForceDataize.write ((((xself).xassertZipFailure)) ((xTESTMOD)))
                xtestFileUnreadable.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
                        xfd.write ((((xos).xopen)) ((xTESTMOD)) (((xos).xO_CREAT)) (0))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            (((unsupported)) (((((xself).xassertRaises)) (((xzipimport).xZipImportError)))) ((xcm)))
                              bogusForceDataize.write ((((xzipimport).xzipimporter)) ((xTESTMOD)))
                          seq
                            bogusForceDataize.write ((((xos).xchmod)) ((xTESTMOD)) (438))
                            bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
                xtestNotZipFile.write
                  [xself]
                    memory > xfp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
                        xfp.write (((xopen)) ((xTESTMOD)) ("w+"))
                        bogusForceDataize.write ((((xfp).xwrite)) (("a".mul 22)))
                        bogusForceDataize.write ((((xfp).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertZipFailure)) ((xTESTMOD)))
                x_testBogusZipFile.write
                  [xself]
                    memory > xfp
                    memory > xz
                    memory > xerror
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
                        xfp.write (((xopen)) ((xTESTMOD)) ("w+"))
                        bogusForceDataize.write ((((xfp).xwrite)) (((((xstruct).xpack)) ("=I") (101010256))))
                        bogusForceDataize.write ((((xfp).xwrite)) (("a".mul 18)))
                        bogusForceDataize.write ((((xfp).xclose)) 0)
                        xz.write ((((xzipimport).xzipimporter)) ((xTESTMOD)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xfind_module)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xload_module)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xis_package)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xget_code)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xget_data)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xz).xget_source)) ("None: is there a None literal in the EO language?"))
                            xerror.write ((xzipimport).xZipImportError)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xz).xfind_module)) ("abc"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) (((xz).xload_module)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) (((xz).xget_code)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xz).xget_data)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) (((xz).xget_source)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) (((xz).xis_package)) ("abc"))
                          bogusForceDataize.write (((((xzipimport).x_zip_directory_cache).xclear)) 0)
            xtest_main.write
              []
                seq > @
                  (((unsupported)) 0)
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xUncompressedZipImportTestCase)) ((xCompressedZipImportTestCase)) ((xBadFileZipImportTestCase)))
                    bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTMOD)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)