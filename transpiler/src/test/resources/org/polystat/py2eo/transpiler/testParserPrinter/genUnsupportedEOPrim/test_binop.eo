memory > xle
memory > xC
memory > xValueError
memory > xstr
memory > xOperationLogger
memory > xxn
memory > xargs
memory > xunittest
memory > xcomplex
memory > xc
memory > xB
memory > xSN
memory > xS
memory > xrange
memory > xRat
memory > xZeroDivisionError
memory > xT
memory > xeq
memory > xdivmod
memory > xeval
memory > xf
memory > xrepr
memory > xint
memory > xX
memory > xproperty
memory > xOverflowError
memory > xne
memory > xx
memory > xi
memory > xF
memory > xSupEq
memory > xs
memory > xissubclass
memory > xNotImplemented
memory > xclasses
memory > xfloat
memory > xbad
memory > xXN
memory > xV
memory > xsn
memory > xe
memory > xobject
memory > xABCMeta
memory > xA
memory > xj
memory > xisinstance
memory > xTypeError
memory > x__name__
[] > test_binop
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_eq
        memory > xtest_constructor
        memory > xtest_add
        memory > x__ne__
        memory > xtest_fallback_rmethod_blocking
        memory > xtest_comparison_orders
        memory > x__float__
        memory > x__str__
        memory > xtest_floordiv
        memory > xtest_div
        memory > x__radd__
        memory > xnum
        memory > x__eq__
        memory > x__repr__
        memory > x__truediv__
        memory > x__sub__
        memory > xisnum
        memory > xtest_fallback_ne_blocking
        memory > x__rmul__
        memory > xisRat
        memory > xlog_operation
        memory > x__le__
        memory > x__rmod__
        memory > xisint
        memory > xtest_true_div
        memory > x__rsub__
        memory > x_get_den
        memory > x__rtruediv__
        memory > x__rdivmod__
        memory > x__rfloordiv__
        memory > x__slots__
        memory > x_get_num
        memory > xtest_sub
        memory > xtest_mul
        memory > xden
        memory > x__floordiv__
        memory > x__add__
        memory > x__init__
        memory > x__mod__
        memory > x__divmod__
        memory > xop_sequence
        memory > x__int__
        memory > xtest_gcd
        memory > x__mul__
        memory > xgcd
        memory > x__ge__
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            xgcd.write
              [xa xb]
                seq > @
                  seq
                    unsupported
                    while.
                      (xa)
                      [unused]
                        seq > @
                          (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (((xb).mod (xa))) ((xa)))))
                    (((unsupported)) ((xb)))
            xisint.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xisinstance)) ((xx)) ((xint)))))
            xisnum.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xT)) ((((unsupported)) ((xint)) ((xfloat)) ((xcomplex)))))
                      (((xisinstance)) ((xx)) ((xT))).if
                        (((unsupported)) (1))
                    (((unsupported)) (0))
            xisRat.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xisinstance)) ((xx)) ((xRat)))))
            (((unsupported)) ((xobject)))
              seq
                unsupported
                x__slots__.write (((unsupported)) ("_Rat__num") ("_Rat__den"))
                x__init__.write
                  [xself xnum xden]
                    memory > xg
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        ((((xisint)) ((xnum))).not).if
                          (((unsupported)) ((((xTypeError)) (("Rat numerator must be int (%r)".mod (xnum))))))
                        ((((xisint)) ((xden))).not).if
                          (((unsupported)) ((((xTypeError)) (("Rat denominator must be int (%r)".mod (xden))))))
                        ((xden).eq 0).if
                          (((unsupported)) ((((xZeroDivisionError)) ("zero denominator"))))
                        xg.write (((xgcd)) ((xden)) ((xnum)))
                        (((unsupported)) (((xself).x__num)) ((((xint)) ((((unsupported)) ((xnum)) ((xg)))))))
                        (((unsupported)) (((xself).x__den)) ((((xint)) ((((unsupported)) ((xden)) ((xg)))))))
                x_get_num.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).x__num)))
                xnum.write (((xproperty)) ((x_get_num)) ("None: is there a None literal in the EO language?"))
                x_get_den.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).x__den)))
                xden.write (((xproperty)) ((x_get_den)) ("None: is there a None literal in the EO language?"))
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (("Rat(%d, %d)".mod (((unsupported)) (((xself).x__num)) (((xself).x__den))))))
                x__str__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((xstr)) ((((xfloat)) ((xself)))))))
                x__float__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((((xself).x__num).mul 1.0).div ((xself).x__den))))
                x__int__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).x__den).eq 1).if
                          (((unsupported)) ((xOverflowError)))
                            (((unsupported)) ((((xint)) (((xself).x__num)))))
                            (((unsupported)) ((((xOverflowError)) (("%s too large to convert to int".mod (((xrepr)) ((xself))))))))
                        (((unsupported)) ((((xValueError)) (("can't convert %s to int".mod (((xrepr)) ((xself))))))))
                x__add__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) (((((xself).x__num).mul ((xother).x__den)).add (((xother).x__num).mul ((xself).x__den)))) ((((xself).x__den).mul ((xother).x__den))))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((((xfloat)) ((xself))).add (xother))))
                        (((unsupported)) ((xNotImplemented)))
                x__radd__.write (x__add__)
                x__sub__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) (((((xself).x__num).mul ((xother).x__den)).sub (((xother).x__num).mul ((xself).x__den)))) ((((xself).x__den).mul ((xother).x__den))))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((((xfloat)) ((xself))).sub (xother))))
                        (((unsupported)) ((xNotImplemented)))
                x__rsub__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) (((((xother).x__num).mul ((xself).x__den)).sub (((xself).x__num).mul ((xother).x__den)))) ((((xself).x__den).mul ((xother).x__den))))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((xother).sub (((xfloat)) ((xself))))))
                        (((unsupported)) ((xNotImplemented)))
                x__mul__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) ((((xself).x__num).mul ((xother).x__num))) ((((xself).x__den).mul ((xother).x__den))))))
                        (((xisint)) ((xother))).if
                          (((unsupported)) ((((xRat)) ((((xself).x__num).mul (xother))) (((xself).x__den)))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((((xfloat)) ((xself))).mul (xother))))
                        (((unsupported)) ((xNotImplemented)))
                x__rmul__.write (x__mul__)
                x__truediv__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) ((((xself).x__num).mul ((xother).x__den))) ((((xself).x__den).mul ((xother).x__num))))))
                        (((xisint)) ((xother))).if
                          (((unsupported)) ((((xRat)) (((xself).x__num)) ((((xself).x__den).mul (xother))))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((((xfloat)) ((xself))).div (xother))))
                        (((unsupported)) ((xNotImplemented)))
                x__rtruediv__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisRat)) ((xother))).if
                          (((unsupported)) ((((xRat)) ((((xother).x__num).mul ((xself).x__den))) ((((xother).x__den).mul ((xself).x__num))))))
                        (((xisint)) ((xother))).if
                          (((unsupported)) ((((xRat)) (((xother).mul ((xself).x__den))) (((xself).x__num)))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((xother).div (((xfloat)) ((xself))))))
                        (((unsupported)) ((xNotImplemented)))
                x__floordiv__.write
                  [xself xother]
                    memory > xx
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                          ((((xisRat)) ((xother))).not).if
                            (((unsupported)) ((xNotImplemented)))
                        xx.write ((xself).div (xother))
                        (((unsupported)) ((((unsupported)) (((xx).x__num)) (((xx).x__den)))))
                x__rfloordiv__.write
                  [xself xother]
                    memory > xx
                    seq > @
                      seq
                        unsupported
                        xx.write ((xother).div (xself))
                        (((unsupported)) ((((unsupported)) (((xx).x__num)) (((xx).x__den)))))
                x__divmod__.write
                  [xself xother]
                    memory > xx
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                          ((((xisRat)) ((xother))).not).if
                            (((unsupported)) ((xNotImplemented)))
                        xx.write (((unsupported)) ((xself)) ((xother)))
                        (((unsupported)) ((((unsupported)) ((xx)) (((xself).sub ((xother).mul (xx)))))))
                x__rdivmod__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          xother.write (((xRat)) ((xother)))
                          ((((xisRat)) ((xother))).not).if
                            (((unsupported)) ((xNotImplemented)))
                        (((unsupported)) ((((xdivmod)) ((xother)) ((xself)))))
                x__mod__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((((xdivmod)) ((xself)) ((xother)))) (1))))
                x__rmod__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((((xdivmod)) ((xother)) ((xself)))) (1))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((xisint)) ((xother))).if
                          (((unsupported)) (((((xself).x__den).eq 1).and (((xself).x__num).eq (xother)))))
                        (((xisRat)) ((xother))).if
                          (((unsupported)) (((((xself).x__num).eq ((xother).x__num)).and (((xself).x__den).eq ((xother).x__den)))))
                        (((xisnum)) ((xother))).if
                          (((unsupported)) (((((xfloat)) ((xself))).eq (xother))))
                        (((unsupported)) ((xNotImplemented)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_gcd.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) (10) (12))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) (10) (15))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) (10) (11))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) (100) (15))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) ((10.neg)) (2))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) (10) ((2.neg)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgcd)) ((10.neg)) ((2.neg)))) ((2.neg)))
                        (((unsupported)) ((xi)) ((((xrange)) (1) (20))))
                          (((unsupported)) ((xj)) ((((xrange)) (1) (20))))
                            seq
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xgcd)) ((xi)) ((xj))).greater 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xgcd)) (((xi).neg)) ((xj))).less 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xgcd)) ((xi)) (((xj).neg))).greater 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xgcd)) (((xi).neg)) (((xj).neg))).less 0)))
                xtest_constructor.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((xRat)) (10) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xnum)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xden)) (3))
                        xa.write (((xRat)) (10) ((15.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xnum)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xden)) (3))
                        xa.write (((xRat)) ((10.neg)) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xnum)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xden)) (3))
                        xa.write (((xRat)) ((10.neg)) ((15.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xnum)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xden)) (3))
                        xa.write (((xRat)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xnum)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xden)) (1))
                        (((unsupported)) ((xZeroDivisionError)))
                          xa.write (((xRat)) (1) (0))
                          bogusForceDataize.write ((((xself).xfail)) ("Rat(1, 0) didn't raise ZeroDivisionError"))
                        (((unsupported)) ((xbad)) ((((unsupported)) ("0") (0.0) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?") ((xRat)) ((xunittest)))))
                          seq
                            (((unsupported)) ((xTypeError)))
                              xa.write (((xRat)) ((xbad)))
                              bogusForceDataize.write ((((xself).xfail)) (("Rat(%r) didn't raise TypeError".mod (xbad))))
                            (((unsupported)) ((xTypeError)))
                              xa.write (((xRat)) (1) ((xbad)))
                              bogusForceDataize.write ((((xself).xfail)) (("Rat(1, %r) didn't raise TypeError".mod (xbad))))
                xtest_add.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (2) (3)).add (((xRat)) (1) (3)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (2) (3)).add 1)) ((((xRat)) (5) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add (((xRat)) (2) (3)))) ((((xRat)) (5) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.0.add (((xRat)) (1) (2)))) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (1) (2)).add 1.0)) (1.5))
                xtest_sub.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (7) (2)).sub (((xRat)) (7) (5)))) ((((xRat)) (21) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (7) (5)).sub 1)) ((((xRat)) (2) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.sub (((xRat)) (3) (5)))) ((((xRat)) (2) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (3) (2)).sub 1.0)) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.0.sub (((xRat)) (1) (2)))) (0.5))
                xtest_mul.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (2) (3)).mul (((xRat)) (5) (7)))) ((((xRat)) (10) (21))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (3)).mul 3)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((3.mul (((xRat)) (10) (3)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (5)).mul 0.5)) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((0.5.mul (((xRat)) (10) (5)))) (1.0))
                xtest_div.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (3)).div (((xRat)) (5) (7)))) ((((xRat)) (14) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (3)).div 3)) ((((xRat)) (10) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((2.div (((xRat)) (5)))) ((((xRat)) (2) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((3.0.mul (((xRat)) (1) (2)))) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (1) (2)).mul 3.0)) (1.5))
                xtest_floordiv.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xRat)) (10))) ((((xRat)) (4))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xRat)) (10) (3))) ((((xRat)) (4) (3))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xRat)) (10))) (4))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (10) ((((xRat)) (4))))) (2))
                xtest_eq.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xRat)) (10))) ((((xRat)) (20) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xRat)) (10))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (10) ((((xRat)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xRat)) (10))) (10.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (10.0) ((((xRat)) (10))))
                xtest_true_div.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (3)).div (((xRat)) (5) (7)))) ((((xRat)) (14) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (10) (3)).div 3)) ((((xRat)) (10) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((2.div (((xRat)) (5)))) ((((xRat)) (2) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((3.0.mul (((xRat)) (1) (2)))) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xRat)) (1) (2)).mul 3.0)) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("1/2"))) (0.5))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xlogger]
                    seq > @
                      (((unsupported)) (((xself).xlogger)) ((xlogger)))
                xlog_operation.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xlogger)) ((((unsupported)) ((xargs)))))
            xop_sequence.write
              [xop]
                memory > xinstances
                memory > xlog
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    xlog.write (((unsupported)) 0)
                    xinstances.write (((unsupported)) 0)
                    (((unsupported)) ((xc)) ((xclasses)))
                      bogusForceDataize.write ((((xinstances).xappend)) ((((xc)) (((xlog).xappend)))))
                    (((unsupported)) ((xTypeError)))
                      bogusForceDataize.write (((xop)) ((((unsupported)) ((xinstances)))))
                    (((unsupported)) ((xlog)))
            (((unsupported)) ((xOperationLogger)))
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("A.__eq__"))
                        (((unsupported)) ((xNotImplemented)))
                x__le__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("A.__le__"))
                        (((unsupported)) ((xNotImplemented)))
                x__ge__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("A.__ge__"))
                        (((unsupported)) ((xNotImplemented)))
            (((unsupported)) ((xOperationLogger)) ((xABCMeta)))
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("B.__eq__"))
                        (((unsupported)) ((xNotImplemented)))
                x__le__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("B.__le__"))
                        (((unsupported)) ((xNotImplemented)))
                x__ge__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("B.__ge__"))
                        (((unsupported)) ((xNotImplemented)))
            (((unsupported)) ((xB)))
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("C.__eq__"))
                        (((unsupported)) ((xNotImplemented)))
                x__le__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("C.__le__"))
                        (((unsupported)) ((xNotImplemented)))
                x__ge__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("C.__ge__"))
                        (((unsupported)) ((xNotImplemented)))
            (((unsupported)) ((xOperationLogger)))
              seq
                unsupported
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("V.__eq__"))
                        (((unsupported)) ((xNotImplemented)))
                x__le__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("V.__le__"))
                        (((unsupported)) ((xNotImplemented)))
                x__ge__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_operation)) ("V.__ge__"))
                        (((unsupported)) ((xNotImplemented)))
            bogusForceDataize.write ((((xB).xregister)) ((xV)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_comparison_orders.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xA)) ((xA)))) ((((unsupported)) ("A.__eq__") ("A.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xA)) ((xB)))) ((((unsupported)) ("A.__eq__") ("B.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xB)) ((xA)))) ((((unsupported)) ("B.__eq__") ("A.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xB)) ((xC)))) ((((unsupported)) ("C.__eq__") ("B.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xC)) ((xB)))) ((((unsupported)) ("C.__eq__") ("B.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xA)) ((xA)))) ((((unsupported)) ("A.__le__") ("A.__ge__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xA)) ((xB)))) ((((unsupported)) ("A.__le__") ("B.__ge__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xB)) ((xA)))) ((((unsupported)) ("B.__le__") ("A.__ge__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xB)) ((xC)))) ((((unsupported)) ("C.__ge__") ("B.__le__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xC)) ((xB)))) ((((unsupported)) ("C.__le__") ("B.__ge__"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xV)) ((xB)))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xeq)) ((xB)) ((xV)))) ((((unsupported)) ("B.__eq__") ("V.__eq__"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xop_sequence)) ((xle)) ((xB)) ((xV)))) ((((unsupported)) ("B.__le__") ("V.__ge__"))))
            (((unsupported)) ((xobject)))
              seq
                unsupported
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (TRUE))
            (((unsupported)) ((xSupEq)))
              seq
                unsupported
                x__eq__.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xobject)))
              unsupported
            (((unsupported)) ((xobject)))
              seq
                unsupported
                x__eq__.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xSupEq)))
              seq
                unsupported
                x__ne__.write "None: is there a None literal in the EO language?"
            (((unsupported)) 0)
              seq
                unsupported
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (TRUE))
                x__ne__.write "None: is there a None literal in the EO language?"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_fallback_rmethod_blocking.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xe)) ((xf)) ((xs)) ((xx)))) ((((unsupported)) ((((xSupEq)) 0)) ((((xF)) 0)) ((((xS)) 0)) ((((xX)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xe)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xe)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xf)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xe)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeq)) ((xx)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeq)) ((xe)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeq)) ((xs)) ((xe)))
                xtest_fallback_ne_blocking.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xe)) ((xsn)) ((xxn)))) ((((unsupported)) ((((xSupEq)) 0)) ((((xSN)) 0)) ((((xXN)) 0)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xe).neq (xe))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xne)) ((xe)) ((xsn)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xne)) ((xsn)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xe).neq (xxn))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xne)) ((xxn)) ((xe)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)