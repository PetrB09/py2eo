memory > xAttributeError
memory > xwebbrowser
memory > xstr
memory > xoption
memory > xgetattr
memory > xunittest
memory > xenv
memory > xdict
memory > xIndexError
memory > xPopenMock
memory > xExampleBrowser
memory > xerr
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xmock
memory > xos
memory > x__name__
memory > xCommandTestMixin
[] > test_webbrowser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_open_new_tab
        memory > xtest_environment
        memory > xtest_register_default
        memory > xCMD_NAME
        memory > xtest_get
        memory > xsetUp
        memory > x_check_registration
        memory > x_test
        memory > xtearDown
        memory > xtest_open_with_autoraise_false
        memory > xbrowser_class
        memory > xtest_register_preferred
        memory > xtest_environment_preferred
        memory > xtest_register
        memory > xURL
        memory > xtest_open
        memory > xtest_open_new
        memory > xtest_synthesize
        memory > xwait
        memory > xpoll
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xURL.write "http://www.example.com"
            xCMD_NAME.write "test"
            (((unsupported)) (((xmock).xMagicMock)))
              seq
                xpoll.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
                xwait.write
                  [xself xseconds]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (0))
            (((unsupported)) 0)
              x_test.write
                [xself xmeth xargs xkw xoptions xarguments]
                  memory > xpopen_args
                  memory > xpopen
                  memory > xbrowser
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) 0)
                      xpopen.write (((xPopenMock)) 0)
                      bogusForceDataize.write ((((xsupport).xpatch)) ((xself)) ((xsubprocess)) ("Popen") ((xpopen)))
                      xbrowser.write (((unsupported)) (((xself).xbrowser_class)) ((xCMD_NAME)))
                      bogusForceDataize.write (((((xgetattr)) ((xbrowser)) ((xmeth)))) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkw)))))
                      xpopen_args.write (((unsupported)) ((((unsupported)) ((((xsubprocess).xPopen).xcall_args)) (0))) (0))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpopen_args)) (0))) ((xCMD_NAME)))
                      bogusForceDataize.write ((((xpopen_args).xpop)) (0))
                      (((unsupported)) ((xoption)) ((xoptions)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIn)) ((xoption)) ((xpopen_args)))
                          bogusForceDataize.write ((((xpopen_args).xpop)) (((((xpopen_args).xindex)) ((xoption)))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xpopen_args)) ((xarguments)))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xGenericBrowser)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xBackgroundBrowser)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xChrome)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ((xdict)) (FALSE))) ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) ("--new-window"))) ((((unsupported)) ((xURL)))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xMozilla)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ((xdict)) (FALSE))) ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) 0)) ((((unsupported)) ("-new-window") ((xURL)))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) 0)) ((((unsupported)) ("-new-tab") ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xNetscape)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ("-raise") ("-remote"))) ((((unsupported)) (((("openURL({})".xformat)) ((xURL)))))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ((xdict)) (FALSE))) ((((unsupported)) ("-noraise") ("-remote"))) ((((unsupported)) (((("openURL({})".xformat)) ((xURL)))))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) ("-raise") ("-remote"))) ((((unsupported)) (((("openURL({},new-window)".xformat)) ((xURL)))))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) ("-raise") ("-remote"))) ((((unsupported)) (((("openURL({},new-tab)".xformat)) ((xURL)))))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xGaleon)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ("-n"))) ((((unsupported)) ((xURL)))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ((xdict)) (FALSE))) ((((unsupported)) ("-noraise") ("-n"))) ((((unsupported)) ((xURL)))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) ("-w"))) ((((unsupported)) ((xURL)))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) ("-w"))) ((((unsupported)) ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xOpera)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ((xdict)) (FALSE))) ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) ("--new-window"))) ((((unsupported)) ((xURL)))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) 0)) ((((unsupported)) ((xURL)))))
            (((unsupported)) ((xCommandTestMixin)) (((xunittest).xTestCase)))
              seq
                xbrowser_class.write ((xwebbrowser).xElinks)
                xtest_open.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ("-remote"))) ((((unsupported)) (((("openURL({})".xformat)) ((xURL)))))))
                xtest_open_with_autoraise_false.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open") ((((unsupported)) ("-remote"))) ((((unsupported)) (((("openURL({})".xformat)) ((xURL)))))))
                xtest_open_new.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new") ((((unsupported)) ("-remote"))) ((((unsupported)) (((("openURL({},new-window)".xformat)) ((xURL)))))))
                xtest_open_new_tab.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ("open_new_tab") ((((unsupported)) ("-remote"))) ((((unsupported)) (((("openURL({},new-tab)".xformat)) ((xURL)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_saved_tryorder)) (((xwebbrowser).x_tryorder)))
                        (((unsupported)) (((xwebbrowser).x_tryorder)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).x_saved_browsers)) (((xwebbrowser).x_browsers)))
                        (((unsupported)) (((xwebbrowser).x_browsers)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xwebbrowser).x_tryorder)) (((xself).x_saved_tryorder)))
                        (((unsupported)) (((xwebbrowser).x_browsers)) (((xself).x_saved_browsers)))
                x_check_registration.write
                  [xself xpreferred]
                    memory > xinstance
                    memory > xexpected_browsers
                    memory > xexpected_tryorder
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xexpected_tryorder.write (((unsupported)) 0)
                        xexpected_browsers.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_tryorder)) ((xexpected_tryorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_browsers)) ((xexpected_browsers)))
                        bogusForceDataize.write ((((xwebbrowser).xregister)) ("Example1") ((xExampleBrowser)))
                        xexpected_tryorder.write (((unsupported)) ("Example1"))
                        (((unsupported)) ((((unsupported)) ((xexpected_browsers)) ("example1"))) ((((unsupported)) ((xExampleBrowser)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_tryorder)) ((xexpected_tryorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_browsers)) ((xexpected_browsers)))
                        xinstance.write (((xExampleBrowser)) 0)
                        (((unsupported)) ((xpreferred)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) (((xwebbrowser).xregister)) ("example2") ((xExampleBrowser)) ((xinstance)) ((xpreferred)))
                          bogusForceDataize.write ((((xwebbrowser).xregister)) ("example2") ((xExampleBrowser)) ((xinstance)))
                        (xpreferred).if
                          xexpected_tryorder.write (((unsupported)) ("example2") ("Example1"))
                          xexpected_tryorder.write (((unsupported)) ("Example1") ("example2"))
                        (((unsupported)) ((((unsupported)) ((xexpected_browsers)) ("example2"))) ((((unsupported)) ((xExampleBrowser)) ((xinstance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_tryorder)) ((xexpected_tryorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xwebbrowser).x_browsers)) ((xexpected_browsers)))
                xtest_register.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_registration)) (FALSE))
                xtest_register_default.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_registration)) ("None: is there a None literal in the EO language?"))
                xtest_register_preferred.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_registration)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_register.write
                  [xself]
                    memory > xwebbrowser
                    seq > @
                      seq
                        xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xwebbrowser).x_tryorder)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xwebbrowser).x_browsers)))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xwebbrowser).xregister)) ("Example1") ((xExampleBrowser)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xwebbrowser).x_tryorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xwebbrowser).x_tryorder)) ((1.neg)))) ("Example1"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xwebbrowser).x_browsers)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("example1") (((xwebbrowser).x_browsers)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xwebbrowser).x_browsers)) ("example1"))) ((((unsupported)) ((xExampleBrowser)) ("None: is there a None literal in the EO language?"))))
                xtest_get.write
                  [xself]
                    memory > xwebbrowser
                    seq > @
                      seq
                        xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xwebbrowser).x_tryorder)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xwebbrowser).x_browsers)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xwebbrowser).xError)))))
                          bogusForceDataize.write ((((xwebbrowser).xget)) ("fakebrowser"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((xwebbrowser).x_tryorder)))
                xtest_synthesize.write
                  [xself]
                    memory > xname
                    memory > xwebbrowser
                    seq > @
                      seq
                        xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                        xname.write ((((((((xos).xpath).xbasename)) (((xsys).xexecutable))).xlower)) 0)
                        bogusForceDataize.write ((((xwebbrowser).xregister)) ((xname)) ("None: is there a None literal in the EO language?") (((((xwebbrowser).xGenericBrowser)) ((xname)))))
                        bogusForceDataize.write ((((xwebbrowser).xget)) (((xsys).xexecutable)))
                xtest_environment.write
                  [xself]
                    memory > xwebbrowser
                    memory > xbrowser
                    seq > @
                      seq
                        xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                        (((unsupported)) ((((unsupported)) (((xwebbrowser).xError)) ((xAttributeError)))))
                          xbrowser.write (((((xwebbrowser).xget)) 0).xname)
                          bogusForceDataize.write ((((xself).xskipTest)) ((((xstr)) ((xerr)))))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xenv)) ("BROWSER"))) ((xbrowser)))
                            xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                            bogusForceDataize.write ((((xwebbrowser).xget)) 0)
                xtest_environment_preferred.write
                  [xself]
                    memory > xwebbrowser
                    memory > xleast_preferred_browser
                    seq > @
                      seq
                        xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                        (((unsupported)) ((((unsupported)) (((xwebbrowser).xError)) ((xAttributeError)) ((xIndexError)))))
                          seq
                            bogusForceDataize.write ((((xwebbrowser).xget)) 0)
                            xleast_preferred_browser.write (((((xwebbrowser).xget)) ((((unsupported)) (((xwebbrowser).x_tryorder)) ((1.neg))))).xname)
                          bogusForceDataize.write ((((xself).xskipTest)) ((((xstr)) ((xerr)))))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xenv)) ("BROWSER"))) ((xleast_preferred_browser)))
                            xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xwebbrowser).xget)) 0).xname)) ((xleast_preferred_browser)))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenv)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xenv)) ("BROWSER"))) (((xsys).xexecutable)))
                            xwebbrowser.write ((((xsupport).ximport_fresh_module)) ("webbrowser"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xwebbrowser).xget)) 0).xname)) (((xsys).xexecutable)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)