memory > xValueError
memory > xsocket
memory > xchar
memory > xSMTPDChannelTest
memory > xException
memory > xDeprecationWarning
memory > xargs
memory > xunittest
memory > xasyncore
memory > xaddr
memory > xkwargs
memory > x__name__
memory > xsmtpd
memory > xio
memory > xconn
memory > xNotImplementedError
memory > xBrokenDummyServer
memory > xDummyDispatcherBroken
memory > xDummyServer
memory > xtextwrap
memory > xkw
memory > xmock_socket
memory > xs
memory > xsupport
memory > xline
memory > xmail_parameters
memory > xlen
[] > test_smtpd
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xwrite_line
        memory > xtest_HELO_RSET
        memory > xtest_unknown_command
        memory > xtest_QUIT
        memory > xtest_EHLO_bad_syntax
        memory > xtest_process_message_with_decode_data_false
        memory > xtest_MAIL_quoted_localpart
        memory > xlisten
        memory > xtest_MAIL_syntax_HELO
        memory > xtest_no_HELO_DATA
        memory > xtest_MAIL_RCPT_unknown_parameters
        memory > xtest_VRFY_syntax
        memory > xtest__all__
        memory > xtest_decode_data_and_enable_SMTPUTF8_raises
        memory > xsend_data
        memory > xtest_with_decode_data_false
        memory > xtest_with_enable_smtputf8_true
        memory > xtest_multiple_RCPT
        memory > xtest_RSET
        memory > xtest_utf8_data
        memory > xtest_MAIL_size_parameter
        memory > xtest_no_HELO_MAIL
        memory > xtest_HELO
        memory > xtest_MAIL_invalid_size_parameter
        memory > xtest_data_limit_dialog
        memory > xtest_NOOP
        memory > xtest_MAIL_command_rejects_SMTPUTF8_by_default
        memory > xtest_MAIL_quoted_localpart_with_size_no_angles
        memory > xtest_EHLO_duplicate
        memory > xtest_nothing_accepted
        memory > xtest_data_transparency_section_4_5_2
        memory > xtest_command_too_long
        memory > xtest_QUIT_arg_ignored
        memory > xtest_RCPT_syntax_HELO
        memory > xtest_broken_connect
        memory > xtest_process_SMTPUTF8_message_with_enable_SMTPUTF8_true
        memory > xtest_MAIL_command_limit_extended_with_SIZE
        memory > xtest_HELP_command_unknown
        memory > xtest_process_message_with_enable_SMTPUTF8_true
        memory > xtest_extended_MAIL_allows_space_after_colon
        memory > xtest_params_rejected
        memory > xtest_MAIL_quoted_localpart_no_angles
        memory > xtest_server_accept
        memory > xtest_with_decode_data_true
        memory > xtest_missing_data
        memory > xtest_ascii_data
        memory > xtest_MAIL_command_accepts_SMTPUTF8_when_announced
        memory > xtest_manual_status
        memory > xsetUp
        memory > xtest_HELP
        memory > xtest_HELO_bad_syntax
        memory > xtest_no_HELO_RCPT
        memory > xtest_attribute_deprecations
        memory > xtest_VRFY
        memory > xtest_process_message_unimplemented
        memory > xtest_need_RCPT
        memory > xtest_NOOP_bad_syntax
        memory > xtest_EXPN_not_implemented
        memory > xtest_nested_MAIL
        memory > xtest_MAIL_quoted_localpart_with_size
        memory > xtest_MAIL_missing_address
        memory > xtest_MAIL_size_parameter_larger_than_default_data_size_limit
        memory > xtest_data_dialog
        memory > xtest_socket_uses_IPv4
        memory > xtest_MAIL_allows_space_after_colon
        memory > xtest_data_limit_dialog_too_much_data
        memory > xtest_RCPT_lowercase_to_OK
        memory > x__init__
        memory > xtest_HELO_parameter_rejected_when_extensions_not_enabled
        memory > xtest_HELO_NOOP
        memory > xprocess_message
        memory > xtest_data_longer_than_default_data_size_limit
        memory > xtest_process_smtputf8_message
        memory > xtest_socket_uses_IPv6
        memory > xtest_process_message_with_decode_data_true
        memory > xtest_HELO_duplicate
        memory > xtest_need_MAIL
        memory > xtest_EHLO_HELO_duplicate
        memory > xerror_response
        memory > xtest_RSET_syntax
        memory > xtest_MAIL_syntax_EHLO
        memory > xtest_DATA_syntax
        memory > xtest_HELO_QUIT
        memory > xtest_MAIL_chevrons
        memory > xtest_RCPT_syntax_EHLO
        memory > xtest_MAIL_command_limit_extended_with_SIZE_and_SMTPUTF8
        memory > xtest_HELP_command
        memory > xtearDown
        memory > xtest_multiple_emails_with_extended_command_length
        memory > xtest_MAIL_empty_chevrons
        memory > xtest_bad_state
        memory > xtest_EHLO
        memory > xtest_HELO_EHLO_duplicate
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xsmtpd).xSMTPServer)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xsmtpd).xSMTPServer).x__init__)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((xself).xmessages)) ((((unsupported)) 0)))
                        ((xself).x_decode_data).if
                          (((unsupported)) (((xself).xreturn_status)) ("return status"))
                          (((unsupported)) (((xself).xreturn_status)) ("return status"))
                xprocess_message.write
                  [xself xpeer xmailfrom xrcpttos xdata]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xmessages).xappend)) ((((unsupported)) ((xpeer)) ((xmailfrom)) ((xrcpttos)) ((xdata)))))
                        ((xdata).eq ((xself).xreturn_status)).if
                          (((unsupported)) ("250 Okish"))
                        ((((unsupported)) ("mail_options") ((xkw))).and (((unsupported)) ("SMTPUTF8") ((((unsupported)) ((xkw)) ("mail_options"))))).if
                          (((unsupported)) ("250 SMTPUTF8 message okish"))
            (((unsupported)) ((xException)))
            (((unsupported)) ((xDummyServer)))
              xlisten.write
                [xself xnum]
                  seq > @
                    (((unsupported)) ((((xDummyDispatcherBroken)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xtest_process_message_unimplemented.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xwrite_line
                    seq > @
                      seq
                        xserver.write (((unsupported)) (((xsmtpd).xSMTPServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        xwrite_line.write
                          [xline]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)) ((xline)))
                                bogusForceDataize.write ((((xchannel).xhandle_read)) 0)
                        bogusForceDataize.write (((xwrite_line)) ("HELO example"))
                        bogusForceDataize.write (((xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write (((xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write (((xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNotImplementedError)) ((xwrite_line)) ("spamrn.rn"))
                xtest_decode_data_and_enable_SMTPUTF8_raises.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xsmtpd).xSMTPServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE) (TRUE))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xsend_data.write
                  [xself xchannel xdata xenable_SMTPUTF8]
                    memory > xwrite_line
                    seq > @
                      (((unsupported)) 0)
                        xwrite_line.write
                          [xline]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)) ((xline)))
                                bogusForceDataize.write ((((xchannel).xhandle_read)) 0)
                        bogusForceDataize.write (((xwrite_line)) ("EHLO example"))
                        (xenable_SMTPUTF8).if
                          bogusForceDataize.write (((xwrite_line)) ("MAIL From:eggs@example BODY=8BITMIME SMTPUTF8"))
                          bogusForceDataize.write (((xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write (((xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write (((xwrite_line)) ("DATA"))
                        bogusForceDataize.write (((xwrite_line)) ((xdata)))
                        bogusForceDataize.write (((xwrite_line)) ("."))
                xtest_process_message_with_decode_data_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)) (((xsmtpd).xDebuggingServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)) ((xchannel)) ("From: testnnhellon"))
                        xstdout.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_process_message_with_decode_data_false.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write ((((xsmtpd).xDebuggingServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)) ((xchannel)) ("From: testnnhxc3xa9lloxffn"))
                        xstdout.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_process_message_with_enable_SMTPUTF8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)) (((xsmtpd).xDebuggingServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)) ((xchannel)) ("From: testnnhxc3xa9lloxffn"))
                        xstdout.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_process_SMTPUTF8_message_with_enable_SMTPUTF8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)) (((xsmtpd).xDebuggingServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xs)))
                          (((unsupported)) (((xself).xsend_data)) ((xchannel)) ("From: testnnhxc3xa9lloxffn") (TRUE))
                        xstdout.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                xtest_socket_uses_IPv6.write
                  [xself]
                    memory > xserver
                    seq > @
                      (((unsupported)) 0)
                        xserver.write ((((xsmtpd).xSMTPServer)) ((((unsupported)) (((xsupport).xHOSTv6)) (0))) ((((unsupported)) (((xsupport).xHOSTv4)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserver).xsocket).xfamily)) (((xsocket).xAF_INET6)))
                xtest_socket_uses_IPv4.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        xserver.write ((((xsmtpd).xSMTPServer)) ((((unsupported)) (((xsupport).xHOSTv4)) (0))) ((((unsupported)) (((xsupport).xHOSTv6)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserver).xsocket).xfamily)) (((xsocket).xAF_INET)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xerror_response.write "555 RCPT TO parameters not recognized or not implementedrn"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xchannel xline]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write ((((xchannel).xhandle_read)) 0)
                xtest_params_rejected.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("RCPT to: <foo@example.com> foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                xtest_nothing_accepted.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("RCPT to: <foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) ("250 OKrn"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xerror_response.write "555 MAIL FROM parameters not recognized or not implementedrn"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xchannel xline]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write ((((xchannel).xhandle_read)) 0)
                xtest_with_decode_data_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("EHLO example"))
                        (((unsupported)) ((xline)) ((((unsupported)) ("MAIL from: <foo@example.com> size=20 SMTPUTF8") ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=8BITMIME") ("MAIL from: <foo@example.com> size=20 BODY=UNKNOWN") ("MAIL from: <foo@example.com> size=20 body=8bitmime"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ((xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_with_decode_data_false.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("EHLO example"))
                        (((unsupported)) ((xline)) ((((unsupported)) ("MAIL from: <foo@example.com> size=20 SMTPUTF8") ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=8BITMIME"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ((xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=UNKNOWN"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) ("501 Error: BODY can only be one of 7BIT, 8BITMIMErn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20 body=8bitmime"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_with_enable_smtputf8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserver).xaccept)) 0)))
                        xchannel.write (((unsupported)) (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((xchannel)) ("MAIL from: <foo@example.com> size=20 body=8bitmime smtputf8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchannel).xsocket).xlast)) ("250 OKrn"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                        (((unsupported)) (((xself).xserver)) ((((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                        (((unsupported)) (((xself).xchannel)) ((((unsupported)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)) 0)
                xtest_broken_connect.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xDummyDispatcherBroken)) ((xBrokenDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))
                xtest_decode_data_and_enable_SMTPUTF8_raises.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((((xself).xchannel).xconn)) ((((xself).xchannel).xaddr)) (TRUE) (TRUE))
                xtest_server_accept.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserver).xhandle_accept)) 0)
                xtest_missing_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("500 Error: bad syntaxrn"))
                xtest_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 HELPrn"))
                xtest_EHLO_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: EHLO hostnamern"))
                xtest_EHLO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_EHLO_HELO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELO.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        xname.write (((((xsmtpd).xsocket).xgetfqdn)) 0)
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ((((((("250 {}rn".xformat)) ((xname))).xencode)) ("ascii"))))
                xtest_HELO_EHLO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELP"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) (("250 Supported commands: EHLO HELO MAIL RCPT ".add "DATA RSET NOOP QUIT VRFYrn")))
                xtest_HELP_command.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELP MAIL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 Syntax: MAIL FROM: <address>rn"))
                xtest_HELP_command_unknown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELP SPAM"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) (("501 Supported commands: EHLO HELO MAIL RCPT ".add "DATA RSET NOOP QUIT VRFYrn")))
                xtest_HELO_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: HELO hostnamern"))
                xtest_HELO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELO_parameter_rejected_when_extensions_not_enabled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xextended_smtp)) (FALSE))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:<foo@example.com> SIZE=1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_allows_space_after_colon.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:   <foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_extended_MAIL_allows_space_after_colon.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:   <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_NOOP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("NOOP"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_HELO_NOOP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("NOOP"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_NOOP_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("NOOP hi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: NOOPrn"))
                xtest_QUIT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("QUIT"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_HELO_QUIT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("QUIT"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_QUIT_arg_ignored.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("QUIT bye bye"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_bad_state.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xchannel).xsmtp_state)) ("BAD STATE"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("451 Internal confusionrn"))
                xtest_command_too_long.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from: ".add ("a".mul (((xself).xchannel).xcommand_size_limit))).add "@example")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                xtest_MAIL_command_limit_extended_with_SIZE.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        xfill_len.write ((((xself).xchannel).xcommand_size_limit).sub (((xlen)) ("MAIL from:<@example>")))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ("a".mul (xfill_len))).add "@example> SIZE=1234")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ("a".mul ((xfill_len).add 26))).add "@example> SIZE=1234")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                xtest_MAIL_command_rejects_SMTPUTF8_by_default.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from: <naive@example.com> BODY=8BITMIME SMTPUTF8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (1))))) ("5"))
                xtest_data_longer_than_default_data_size_limit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xchannel).xdata_size_limit)) (1048))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("A".mul (((xself).xchannel).xdata_size_limit)).add "Arn.")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("552 Error: Too much mail datarn"))
                xtest_MAIL_size_parameter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL FROM:<eggs@example> SIZE=512"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_invalid_size_parameter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL FROM:<eggs@example> SIZE=invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address> [SP <mail-parameters>]rn"))
                xtest_MAIL_RCPT_unknown_parameters.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL FROM:<eggs@example> ham=green"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("555 MAIL FROM parameters not recognized or not implementedrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL FROM:<eggs@example>"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT TO:<eggs@example> ham=green"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("555 RCPT TO parameters not recognized or not implementedrn"))
                xtest_MAIL_size_parameter_larger_than_default_data_size_limit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xchannel).xdata_size_limit)) (1048))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL FROM:<eggs@example> SIZE=2096"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("552 Error: message size exceeds fixed maximum message sizern"))
                xtest_need_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT to:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: need MAIL commandrn"))
                xtest_MAIL_syntax_HELO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_syntax_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address> [SP <mail-parameters>]rn"))
                xtest_MAIL_missing_address.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_chevrons.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:<eggs@example>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_empty_chevrons.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:<>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_quoted_localpart.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from: <\"Fred Blogs\"@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_no_angles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from: \"Fred Blogs\"@example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_with_size.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from: <\"Fred Blogs\"@example.com> SIZE=1000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_with_size_no_angles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from: \"Fred Blogs\"@example.com SIZE=1000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_nested_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: nested MAIL commandrn"))
                xtest_VRFY.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("VRFY eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) (("252 Cannot VRFY user, but will accept message and attempt ".add "deliveryrn")))
                xtest_VRFY_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("VRFY"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: VRFY <address>rn"))
                xtest_EXPN_not_implemented.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EXPN"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("502 EXPN not implementedrn"))
                xtest_no_HELO_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL from:<foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_need_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: need RCPT commandrn"))
                xtest_RCPT_syntax_HELO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RCPT TO: <address>rn"))
                xtest_RCPT_syntax_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RCPT TO: <address> [SP <mail-parameters>]rn"))
                xtest_RCPT_lowercase_to_OK.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT to: <eggs@example>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_no_HELO_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_data_dialog.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("datarnmorern."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xmessages)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)) ("spam@example"))) ("datanmore"))))))
                xtest_DATA_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: DATArn"))
                xtest_no_HELO_DATA.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_data_transparency_section_4_5_2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("..rn.rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("."))
                xtest_multiple_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:ham@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("datarn."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xmessages)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)) ("spam@example") ("ham@example"))) ("data"))))))
                xtest_manual_status.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("return statusrn."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 Okishrn"))
                xtest_RSET.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RSET"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:foo@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("datarn."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xmessages)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("peer-address") ("peer-port"))) ("foo@example") ((((unsupported)) ("eggs@example"))) ("data"))))))
                xtest_HELO_RSET.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RSET"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_RSET_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RSET hi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RSETrn"))
                xtest_unknown_command.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("UNKNOWN_CMD"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) (("500 Error: command \"UNKNOWN_CMD\" not ".add "recognizedrn")))
                xtest_attribute_deprecations.write
                  [xself]
                    memory > xspam
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__server)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__server)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__line)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__line)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__state)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__state)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__greeting)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__greeting)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__mailfrom)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__mailfrom)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__rcpttos)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__rcpttos)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__data)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__data)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__fqdn)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__fqdn)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__peer)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__peer)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__conn)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__conn)) ("spam"))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__addr)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) ((((xself).xchannel).x_SMTPChannel__addr)) ("spam"))
            (((unsupported)) ((xSMTPDChannelTest)) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 not enabled"))))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                      (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                      (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                      (((unsupported)) (((xself).xserver)) ((((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOSTv6)) (0))) ((((unsupported)) ("b") (0))) (TRUE))))
                      (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                      (((unsupported)) (((xself).xchannel)) ((((unsupported)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                        (((unsupported)) (((xself).xserver)) ((((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                        (((unsupported)) (((xself).xchannel)) ((((unsupported)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (32) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)) 0)
                xtest_data_limit_dialog.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("datarnmorern."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xmessages)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)) ("spam@example"))) ("datanmore"))))))
                xtest_data_limit_dialog_too_much_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("This message is longer than 32 bytesrn."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("552 Error: Too much mail datarn"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                        (((unsupported)) (((xself).xserver)) ((((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                        (((unsupported)) (((xself).xchannel)) (((((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)) 0)
                xtest_ascii_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("plain ascii text"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("plain ascii text"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("and some plain ascii"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87nand some plain ascii"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                        (((unsupported)) (((xself).xserver)) ((((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                        (((unsupported)) (((xself).xchannel)) ((((unsupported)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)) 0)
                xtest_ascii_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("plain ascii text"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("plain ascii text"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("and some plain ascii"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: żźćnand some plain ascii"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)) (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)) (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)) 0)))
                        (((unsupported)) (((xself).xserver)) ((((unsupported)) ((xDummyServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((((unsupported)) ("b") (0))) (TRUE))))
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)) 0)))
                        (((unsupported)) (((xself).xchannel)) ((((unsupported)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                        (((unsupported)) (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)) (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)) ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)) 0)
                xtest_MAIL_command_accepts_SMTPUTF8_when_announced.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) (((("MAIL from: <naïve@example.com> BODY=8BITMIME SMTPUTF8".xencode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_process_smtputf8_message.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        (((unsupported)) ((xmail_parameters)) ((((unsupported)) ("") ("BODY=8BITMIME SMTPUTF8"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)) (("MAIL from: <a@example> ".add (xmail_parameters))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("rcpt to:<b@example.com>"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("data"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("354"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("crn."))
                            ((xmail_parameters).eq "").if
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 SMTPUTF8 message okishrn"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)) (((("MAIL From: naïve@examplé BODY=8BITMIME SMTPUTF8".xencode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                        bogusForceDataize.write ((((xself).xwrite_line)) (((("RCPT To:späm@examplé".xencode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("354"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                xtest_MAIL_command_limit_extended_with_SIZE_and_SMTPUTF8.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("ehlo example"))
                        xfill_len.write (((512.add 26).add 10).sub (((xlen)) ("mail from:<@example>")))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ("a".mul ((xfill_len).add 1))).add "@example>")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ("a".mul (xfill_len))).add "@example>")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_multiple_emails_with_extended_command_length.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)) ("ehlo example"))
                        xfill_len.write (((512.add 26).add 10).sub (((xlen)) ("mail from:<@example>")))
                        (((unsupported)) ((xchar)) ((((unsupported)) ("a") ("b") ("c"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ((xchar).mul (xfill_len))).add "a@example>")))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("500"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ((("MAIL from:<".add ((xchar).mul (xfill_len))).add "@example>")))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("rcpt to:<hans@example.com>"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("data"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("354"))
                            bogusForceDataize.write ((((xself).xwrite_line)) ("testrn."))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xself).xchannel).xsocket).xlast)) ((((unsupported)) (0) (3))))) ("250"))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)) ("program") ("Devnull") ("DEBUGSTREAM") ("NEWLINE") ("COMMASPACE") ("DATA_SIZE_DEFAULT") ("usage") ("Options") ("parseargs"))
                      (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xsmtpd)) ((xblacklist)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)