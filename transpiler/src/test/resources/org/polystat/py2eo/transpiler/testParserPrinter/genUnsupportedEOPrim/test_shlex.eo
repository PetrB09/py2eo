memory > xu
memory > xAttributeError
memory > xio
memory > xpunct
memory > xstring
memory > xcommand
memory > xdelimiter
memory > xlen
memory > xmethname
memory > xexpected
memory > xlist
memory > xss
memory > xdelattr
memory > xrange
memory > xShlexTest
memory > xx
memory > xi
memory > xitertools
memory > xdir
memory > xshlex
memory > xitem
memory > xgetattr
memory > xunittest
memory > xsource
memory > xws
memory > x__name__
memory > xsplit_command
[] > test_shlex
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestPunctuationWithPosix
        memory > xtestSplitPosix
        memory > xtestTokenTypes
        memory > xsetUp
        memory > xoldSplit
        memory > xtestUnicodeHandling
        memory > xtestSyntaxSplitRedirect
        memory > xtestSyntaxSplitSemicolon
        memory > xposix_data
        memory > xtestPunctuationWithWhitespaceSplit
        memory > xtestSyntaxSplitParen
        memory > xsplitTest
        memory > xdata
        memory > xtestPunctuationCharsReadOnly
        memory > xtestCompat
        memory > xtestSyntaxSplitCustom
        memory > xtestJoinRoundtrip
        memory > xtestJoin
        memory > xtestPunctuationInWordChars
        memory > xtestSyntaxSplitAmpersandAndPipe
        memory > xtestEmptyStringHandling
        memory > xtestQuote
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xdata.write (((unsupported)) 0)
            xposix_data.write (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdata)) ((((unsupported)) ((((unsupported)) (((((xx).xsplit)) ("|"))) ((((unsupported)) ((1.neg)))))) ((xx)) (((((xdata).xsplitlines)) 0)))))
                        (((unsupported)) (((xself).xposix_data)) ((((unsupported)) ((((unsupported)) (((((xx).xsplit)) ("|"))) ((((unsupported)) ((1.neg)))))) ((xx)) (((((xposix_data).xsplitlines)) 0)))))
                        (((unsupported)) ((xitem)) (((xself).xdata)))
                          (((unsupported)) ((((unsupported)) ((xitem)) (0))) (((((((unsupported)) ((xitem)) (0)).xreplace)) ("n") ("n"))))
                        (((unsupported)) ((xitem)) (((xself).xposix_data)))
                          (((unsupported)) ((((unsupported)) ((xitem)) (0))) (((((((unsupported)) ((xitem)) (0)).xreplace)) ("n") ("n"))))
                xsplitTest.write
                  [xself xdata xcomments]
                    memory > xl
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xdata)))))))
                        seq
                          xl.write (((unsupported)) (((xshlex).xsplit)) ((((unsupported)) ((((unsupported)) ((xdata)) ((xi)))) (0))) ((xcomments)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xl)) ((((unsupported)) ((((unsupported)) ((xdata)) ((xi)))) ((((unsupported)) (1))))) (("%s: %s != %s".mod (((unsupported)) ((((unsupported)) ((((unsupported)) ((xdata)) ((xi)))) (0))) ((xl)) ((((unsupported)) ((((unsupported)) ((xdata)) ((xi)))) ((((unsupported)) (1)))))))))
                xoldSplit.write
                  [xself xs]
                    memory > xtok
                    memory > xret
                    memory > xlex
                    seq > @
                      seq
                        xret.write (((unsupported)) 0)
                        xlex.write ((((xshlex).xshlex)) (((((xio).xStringIO)) ((xs)))))
                        xtok.write ((((xlex).xget_token)) 0)
                        while.
                          (xtok)
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xret).xappend)) ((xtok)))
                                xtok.write ((((xlex).xget_token)) 0)
                        (((unsupported)) ((xret)))
                xtestSplitPosix.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).xsplitTest)) (((xself).xposix_data)) (TRUE))
                xtestCompat.write
                  [xself]
                    memory > xl
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) (((xself).xdata)))))))
                          seq
                            xl.write ((((xself).xoldSplit)) ((((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xl)) ((((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))) ((((unsupported)) (1))))) (("%s: %s != %s".mod (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))) (0))) ((xl)) ((((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))) ((((unsupported)) (1)))))))))
                xtestSyntaxSplitAmpersandAndPipe.write
                  [xself]
                    memory > xsrc
                    memory > xs
                    memory > xresult
                    memory > xref
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xdelimiter)) ((((unsupported)) ("&&") ("&") ("|&") (";&") (";;&") ("||") ("|") ("&|") (";|") (";;|"))))
                          seq
                            xsrc.write (((unsupported)) (("echo hi %s echo bye".mod (xdelimiter))) (("echo hi%secho bye".mod (xdelimiter))))
                            xref.write (((unsupported)) ("echo") ("hi") ((xdelimiter)) ("echo") ("bye"))
                            (((unsupported)) ((((unsupported)) ((xss)) ((xws)))) (((((xitertools).xproduct)) ((xsrc)) ((((unsupported)) (FALSE) (TRUE))))))
                              seq
                                xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                                (((unsupported)) (((xs).xwhitespace_split)) ((xws)))
                                xresult.write (((xlist)) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=%s]".mod (((unsupported)) ((xss)) ((xws))))))
                xtestSyntaxSplitSemicolon.write
                  [xself]
                    memory > xsrc
                    memory > xs
                    memory > xresult
                    memory > xref
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xdelimiter)) ((((unsupported)) (";") (";;") (";&") (";;&"))))
                          seq
                            xsrc.write (((unsupported)) (("echo hi %s echo bye".mod (xdelimiter))) (("echo hi%s echo bye".mod (xdelimiter))) (("echo hi%secho bye".mod (xdelimiter))))
                            xref.write (((unsupported)) ("echo") ("hi") ((xdelimiter)) ("echo") ("bye"))
                            (((unsupported)) ((((unsupported)) ((xss)) ((xws)))) (((((xitertools).xproduct)) ((xsrc)) ((((unsupported)) (FALSE) (TRUE))))))
                              seq
                                xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                                (((unsupported)) (((xs).xwhitespace_split)) ((xws)))
                                xresult.write (((xlist)) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=%s]".mod (((unsupported)) ((xss)) ((xws))))))
                xtestSyntaxSplitRedirect.write
                  [xself]
                    memory > xsrc
                    memory > xs
                    memory > xresult
                    memory > xref
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xdelimiter)) ((((unsupported)) ("<") ("|"))))
                          seq
                            xsrc.write (((unsupported)) (("echo hi %s out".mod (xdelimiter))) (("echo hi%s out".mod (xdelimiter))) (("echo hi%sout".mod (xdelimiter))))
                            xref.write (((unsupported)) ("echo") ("hi") ((xdelimiter)) ("out"))
                            (((unsupported)) ((((unsupported)) ((xss)) ((xws)))) (((((xitertools).xproduct)) ((xsrc)) ((((unsupported)) (FALSE) (TRUE))))))
                              seq
                                xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                                xresult.write (((xlist)) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=%s]".mod (((unsupported)) ((xss)) ((xws))))))
                xtestSyntaxSplitParen.write
                  [xself]
                    memory > xsrc
                    memory > xs
                    memory > xresult
                    memory > xref
                    seq > @
                      seq
                        unsupported
                        xsrc.write (((unsupported)) ("( echo hi )") ("(echo hi)"))
                        xref.write (((unsupported)) ("(") ("echo") ("hi") (")"))
                        (((unsupported)) ((((unsupported)) ((xss)) ((xws)))) (((((xitertools).xproduct)) ((xsrc)) ((((unsupported)) (FALSE) (TRUE))))))
                          seq
                            xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                            (((unsupported)) (((xs).xwhitespace_split)) ((xws)))
                            xresult.write (((xlist)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=%s]".mod (((unsupported)) ((xss)) ((xws))))))
                xtestSyntaxSplitCustom.write
                  [xself]
                    memory > xs
                    memory > xresult
                    memory > xref
                    memory > xss
                    seq > @
                      seq
                        unsupported
                        xss.write "~/a&&b-c --color=auto||d *.py?"
                        xref.write (((unsupported)) ("~/a") ("&") ("&") ("b-c") ("--color=auto") ("||") ("d") ("*.py?"))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) ("|"))
                        xresult.write (((xlist)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=False]".mod (xss))))
                        xref.write (((unsupported)) ("~/a&&b-c") ("--color=auto") ("||") ("d") ("*.py?"))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) ("|"))
                        (((unsupported)) (((xs).xwhitespace_split)) (TRUE))
                        xresult.write (((xlist)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xref)) ((xresult)) (("While splitting '%s' [ws=True]".mod (xss))))
                xtestTokenTypes.write
                  [xself]
                    memory > xtt
                    memory > xt
                    memory > xs
                    memory > xobserved
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xsource)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("a && b || c") ((((unsupported)) ((((unsupported)) ("a") ("a"))) ((((unsupported)) ("&&") ("c"))) ((((unsupported)) ("b") ("a"))) ((((unsupported)) ("||") ("c"))) ((((unsupported)) ("c") ("a"))))))))))
                          seq
                            xs.write (((unsupported)) (((xshlex).xshlex)) ((xsource)) (TRUE))
                            xobserved.write (((unsupported)) 0)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xt.write ((((xs).xget_token)) 0)
                                    ((xt).eq ((xs).xeof)).if
                                      (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) ((xt)) (0))) (((xs).xpunctuation_chars))).if
                                      xtt.write "c"
                                      xtt.write "a"
                                    bogusForceDataize.write ((((xobserved).xappend)) ((((unsupported)) ((xt)) ((xtt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xobserved)) ((xexpected)))
                xtestPunctuationInWordChars.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("a_b__c") ("_"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("_") (((xs).xwordchars)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((((unsupported)) ("a") ("_") ("b") ("__") ("c"))))
                xtestPunctuationWithWhitespaceSplit.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("a  && b  ||  c") ("&"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((((unsupported)) ("a") ("&&") ("b") ("|") ("|") ("c"))))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("a  && b  ||  c") ("&"))
                        (((unsupported)) (((xs).xwhitespace_split)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((((unsupported)) ("a") ("&&") ("b") ("||") ("c"))))
                xtestPunctuationWithPosix.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("f >\"abc\"") (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((((unsupported)) ("f") (">") ("abc"))))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("f >\\\"abc\\\"") (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((((unsupported)) ("f") (">") ("\"abc\""))))
                xtestEmptyStringHandling.write
                  [xself]
                    memory > xslist
                    memory > xs
                    memory > xexpected
                    seq > @
                      seq
                        unsupported
                        xexpected.write (((unsupported)) ("") (")") ("abc"))
                        (((unsupported)) ((xpunct)) ((((unsupported)) (FALSE) (TRUE))))
                          seq
                            xs.write (((unsupported)) (((xshlex).xshlex)) ("'')abc") (TRUE) ((xpunct)))
                            xslist.write (((xlist)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xslist)) ((xexpected)))
                        xexpected.write (((unsupported)) ("''") (")") ("abc"))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ("'')abc") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((xexpected)))
                xtestUnicodeHandling.write
                  [xself]
                    memory > xs
                    memory > xref
                    memory > xss
                    seq > @
                      seq
                        unsupported
                        xss.write "u2119u01b4u2602u210cu00f8u1f24"
                        xref.write (((unsupported)) ("u2119u01b4u2602u210cu00f8u1f24"))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                        (((unsupported)) (((xs).xwhitespace_split)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((xref)))
                        xref.write (((unsupported)) ("u2119") ("u01b4") ("u2602") ("u210c") ("u00f8") ("u1f24"))
                        xs.write (((unsupported)) (((xshlex).xshlex)) ((xss)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xs)))) ((xref)))
                xtestQuote.write
                  [xself]
                    memory > xunsafe
                    memory > xunicode_sample
                    memory > xsafeunquoted
                    seq > @
                      seq
                        xsafeunquoted.write ((((xstring).xascii_letters).add ((xstring).xdigits)).add "@%_-+=:,./")
                        xunicode_sample.write "xe9xe0xdf"
                        xunsafe.write ((((unsupported)) 0).add (xunicode_sample))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xshlex).xquote)) (""))) ("''"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xshlex).xquote)) ((xsafeunquoted)))) ((xsafeunquoted)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xshlex).xquote)) ("test file name"))) ("'test file name'"))
                        (((unsupported)) ((xu)) ((xunsafe)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xshlex).xquote)) (("test%sname".mod (xu))))) (("'test%sname'".mod (xu))))
                        (((unsupported)) ((xu)) ((xunsafe)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xshlex).xquote)) (("test%s'name'".mod (xu))))) (("'test%s'\"'\"'name'\"'\"''".mod (xu))))
                xtestJoin.write
                  [xself]
                    memory > xjoined
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xsplit_command)) ((xcommand)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("a ") ("b"))) ("'a ' b"))) ((((unsupported)) ((((unsupported)) ("a") (" b"))) ("a ' b'"))) ((((unsupported)) ((((unsupported)) ("a") (" ") ("b"))) ("a ' ' b"))) ((((unsupported)) ((((unsupported)) ("\"a") ("b\""))) ("'\"a' 'b\"'"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xcommand)))))
                          seq
                            xjoined.write ((((xshlex).xjoin)) ((xsplit_command)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xjoined)) ((xcommand)))
                xtestJoinRoundtrip.write
                  [xself]
                    memory > xall_data
                    memory > xjoined
                    memory > xresplit
                    seq > @
                      seq
                        xall_data.write (((xself).xdata).add ((xself).xposix_data))
                        (((unsupported)) ((((unsupported)) ((xcommand)) ((((unsupported)) ((xsplit_command)))))) ((xall_data)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xcommand)))))
                            seq
                              xjoined.write ((((xshlex).xjoin)) ((xsplit_command)))
                              xresplit.write ((((xshlex).xsplit)) ((xjoined)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xsplit_command)) ((xresplit)))
                xtestPunctuationCharsReadOnly.write
                  [xself]
                    memory > xshlex_instance
                    memory > xpunctuation_chars
                    seq > @
                      seq
                        xpunctuation_chars.write "/|$%^"
                        xshlex_instance.write (((unsupported)) (((xshlex).xshlex)) ((xpunctuation_chars)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xshlex_instance).xpunctuation_chars)) ((xpunctuation_chars)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xshlex_instance).xpunctuation_chars)) (FALSE))
            ((((xgetattr)) ((xshlex)) ("split") ("None: is there a None literal in the EO language?")).not).if
              (((unsupported)) ((xmethname)) ((((xdir)) ((xShlexTest)))))
                (((((xmethname).xstartswith)) ("test")).and ((xmethname).neq "testCompat")).if
                  bogusForceDataize.write (((xdelattr)) ((xShlexTest)) ((xmethname)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)