memory > xthreading
memory > xForkingUnixDatagramServer
memory > xBaseErrorTestServer
memory > xRuntimeError
memory > xselect
memory > xw
memory > xfloat
memory > xHandler
memory > x__name__
memory > xValueError
memory > xsignal
memory > xMyHandler
memory > xio
memory > xsocket
memory > xpos
memory > xreader
memory > xrange
memory > xtest
memory > xverbose
memory > xForkingUnixStreamServer
memory > xfn
memory > xThreadingErrorTestServer
memory > xtempfile
memory > xreap_children
memory > xForkingErrorTestServer
memory > xopen
memory > xkw
memory > xprint
memory > xr
memory > xhasattr
memory > xOverflowError
memory > xx
memory > xMyServer
memory > xi
memory > xsuper
memory > xs
memory > xsocketserver
memory > xlog
memory > xOSError
memory > xos
memory > xdir
memory > xgetattr
memory > xPermissionError
memory > xBadHandler
memory > xe
memory > xSystemExit
memory > xname
memory > xunittest
memory > xn
memory > xpid2
memory > xstatus
memory > xserver
memory > xisinstance
memory > xlen
[] > test_socketserver
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xhandle_error
        memory > xtest_UDPServer
        memory > xshutdown_request
        memory > xtest_ForkingTCPServer
        memory > xsetUp
        memory > xtest_forking_not_handled
        memory > xrun_server
        memory > xcheck_result
        memory > xsimple_subprocess
        memory > xtest_ThreadingTCPServer
        memory > xtest_UnixStreamServer
        memory > xpickaddr
        memory > xHAVE_UNIX_SOCKETS
        memory > xrequires_forking
        memory > xtest_all
        memory > xtest_ForkingUnixDatagramServer
        memory > xHAVE_FORKING
        memory > xtest_ThreadingUnixStreamServer
        memory > xtest_threading_handled
        memory > xtest_write
        memory > xtest_shutdown
        memory > xtest_threads_reaped
        memory > xwait_done
        memory > xstream_examine
        memory > xtest_ForkingUDPServer
        memory > xTEST_STR
        memory > xsignal_alarm
        memory > xtest_sync_not_handled
        memory > xtest_tcpserver_bind_leak
        memory > xtest_ForkingUnixStreamServer
        memory > xhandle
        memory > x_real_select
        memory > xtest_TCPServer
        memory > xreceive
        memory > xtest_ThreadingUDPServer
        memory > xtest_context_manager
        memory > xtest_UnixDatagramServer
        memory > xtest_basics
        memory > xtest_ThreadingUnixDatagramServer
        memory > x__init__
        memory > xmake_server
        memory > xtest_shutdown_request_called_if_verify_request_false
        memory > xHOST
        memory > xdgram_examine
        memory > xrequires_unix_sockets
        memory > xtest_threading_not_handled
        memory > xtest_forking_handled
        memory > xtearDown
        memory > xtest_close_immediately
        memory > xtest_sync_handled
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            bogusForceDataize.write (((((xtest).xsupport).xrequires)) ("network"))
            xTEST_STR.write "hello worldn"
            xHOST.write (((xtest).xsupport).xHOST)
            xHAVE_UNIX_SOCKETS.write (((xhasattr)) ((xsocket)) ("AF_UNIX"))
            xrequires_unix_sockets.write ((((xunittest).xskipUnless)) ((xHAVE_UNIX_SOCKETS)) ("requires Unix sockets"))
            xHAVE_FORKING.write (((xhasattr)) ((xos)) ("fork"))
            xrequires_forking.write ((((xunittest).xskipUnless)) ((xHAVE_FORKING)) ("requires forking"))
            xsignal_alarm.write
              [xn]
                seq > @
                  seq
                    unsupported
                    (((xhasattr)) ((xsignal)) ("alarm")).if
                      bogusForceDataize.write ((((xsignal).xalarm)) ((xn)))
            x_real_select.write ((xselect).xselect)
            xreceive.write
              [xsock xn xtimeout]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xr)) ((xw)) ((xx)))) ((((x_real_select)) ((((unsupported)) ((xsock)))) ((((unsupported)) 0)) ((((unsupported)) 0)) ((xtimeout)))))
                    (((unsupported)) ((xsock)) ((xr))).if
                      (((unsupported)) (((((xsock).xrecv)) ((xn)))))
                      (((unsupported)) ((((xRuntimeError)) (("timed out on %r".mod (((unsupported)) ((xsock))))))))
            ((xHAVE_UNIX_SOCKETS).and (xHAVE_FORKING)).if
              seq
                (((unsupported)) (((xsocketserver).xForkingMixIn)) (((xsocketserver).xUnixStreamServer)))
                (((unsupported)) (((xsocketserver).xForkingMixIn)) (((xsocketserver).xUnixDatagramServer)))
            xsimple_subprocess.write
              [xtestcase]
                memory > xpid
                seq > @
                  (((unsupported)) 0)
                    unsupported
                    xpid.write ((((xos).xfork)) 0)
                    ((xpid).eq 0).if
                      bogusForceDataize.write ((((xos).x_exit)) (72))
                    (((unsupported)) 0)
                      (((unsupported)) ("None: is there a None literal in the EO language?"))
                      (((unsupported)) 0)
                      seq
                        (((unsupported)) ((((unsupported)) ((xpid2)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                        bogusForceDataize.write ((((xtestcase).xassertEqual)) ((xpid2)) ((xpid)))
                        bogusForceDataize.write ((((xtestcase).xassertEqual)) ((((unsupported)) (72) (8))) ((xstatus)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xsignal_alarm)) (60))
                        (((unsupported)) (((xself).xport_seed)) (0))
                        (((unsupported)) (((xself).xtest_files)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xsignal_alarm)) (0))
                        bogusForceDataize.write (((xreap_children)) 0)
                        (((unsupported)) ((xfn)) (((xself).xtest_files)))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xos).xremove)) ((xfn)))
                        (((unsupported)) ((((unsupported)) (((xself).xtest_files)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                xpickaddr.write
                  [xself xproto]
                    memory > xdir
                    memory > xfn
                    seq > @
                      ((xproto).eq ((xsocket).xAF_INET)).if
                        (((unsupported)) ((((unsupported)) ((xHOST)) (0))))
                        seq
                          xdir.write "None: is there a None literal in the EO language?"
                          xfn.write (((unsupported)) (((xtempfile).xmktemp)) ("unix_socket.") ((xdir)))
                          bogusForceDataize.write (((((xself).xtest_files).xappend)) ((xfn)))
                          (((unsupported)) ((xfn)))
                xmake_server.write
                  [xself xaddr xsvrcls xhdlrbase]
                    memory > xserver
                    memory > xhandle_error
                    memory > xhandle
                    seq > @
                      seq
                        (((unsupported)) ((xsvrcls)))
                          xhandle_error.write
                            [xself xrequest xclient_address]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).xclose_request)) ((xrequest)))
                                  (((unsupported)) 0)
                        (((unsupported)) ((xhdlrbase)))
                          xhandle.write
                            [xself]
                              memory > xline
                              seq > @
                                seq
                                  xline.write (((((xself).xrfile).xreadline)) 0)
                                  bogusForceDataize.write (((((xself).xwfile).xwrite)) ((xline)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("creating server"))
                        (((unsupported)) ((xPermissionError)))
                          xserver.write (((xMyServer)) ((xaddr)) ((xMyHandler)))
                          bogusForceDataize.write ((((xself).xskipTest)) (("Cannot create server (%s, %s): %s".mod (((unsupported)) ((xsvrcls)) ((xaddr)) ((xe))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xserver_address)) ((((((xserver).xsocket).xgetsockname)) 0)))
                        (((unsupported)) ((xserver)))
                xrun_server.write
                  [xself xsvrcls xhdlrbase xtestfunc]
                    memory > xaddr
                    memory > xt
                    memory > xserver
                    seq > @
                      (((unsupported)) 0)
                        xserver.write ((((xself).xmake_server)) (((((xself).xpickaddr)) (((xsvrcls).xaddress_family)))) ((xsvrcls)) ((xhdlrbase)))
                        xaddr.write ((xserver).xserver_address)
                        (xverbose).if
                          seq
                            bogusForceDataize.write (((xprint)) ("ADDR =") ((xaddr)))
                            bogusForceDataize.write (((xprint)) ("CLASS =") ((xsvrcls)))
                        xt.write (((unsupported)) (((xthreading).xThread)) (("%s serving".mod (xsvrcls))) (((xserver).xserve_forever)) ((((unsupported)) ("poll_interval") (0.01))))
                        (((unsupported)) (((xt).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("server running"))
                        (((unsupported)) ((xi)) ((((xrange)) (3))))
                          seq
                            (xverbose).if
                              bogusForceDataize.write (((xprint)) ("test client") ((xi)))
                            bogusForceDataize.write (((xtestfunc)) (((xsvrcls).xaddress_family)) ((xaddr)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("waiting for server"))
                        bogusForceDataize.write ((((xserver).xshutdown)) 0)
                        bogusForceDataize.write ((((xt).xjoin)) 0)
                        bogusForceDataize.write ((((xserver).xserver_close)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.neg)) ((((((xserver).xsocket).xfileno)) 0)))
                        ((xHAVE_FORKING).and (((xisinstance)) ((xserver)) (((xsocketserver).xForkingMixIn)))).if
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xactive_children)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)) ("done"))
                xstream_examine.write
                  [xself xproto xaddr]
                    memory > xbuf
                    memory > xdata
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) ((xproto)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                        seq
                          bogusForceDataize.write ((((xs).xconnect)) ((xaddr)))
                          bogusForceDataize.write ((((xs).xsendall)) ((xTEST_STR)))
                          (((unsupported)) ((xbuf)) ((xdata)) ((((xreceive)) ((xs)) (100))))
                          while.
                            ((xdata).and (((unsupported)) ("n") ((xbuf))))
                            [unused]
                              seq > @
                                seq
                                  xdata.write (((xreceive)) ((xs)) (100))
                                  (((unsupported)) ((xbuf)) ((xdata)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ((xTEST_STR)))
                xdgram_examine.write
                  [xself xproto xaddr]
                    memory > xbuf
                    memory > xdata
                    seq > @
                      (((unsupported)) (((((xsocket).xsocket)) ((xproto)) (((xsocket).xSOCK_DGRAM)))) ((xs)))
                        seq
                          ((xHAVE_UNIX_SOCKETS).and ((xproto).eq ((xsocket).xAF_UNIX))).if
                            bogusForceDataize.write ((((xs).xbind)) (((((xself).xpickaddr)) ((xproto)))))
                          bogusForceDataize.write ((((xs).xsendto)) ((xTEST_STR)) ((xaddr)))
                          (((unsupported)) ((xbuf)) ((xdata)) ((((xreceive)) ((xs)) (100))))
                          while.
                            ((xdata).and (((unsupported)) ("n") ((xbuf))))
                            [unused]
                              seq > @
                                seq
                                  xdata.write (((xreceive)) ((xs)) (100))
                                  (((unsupported)) ((xbuf)) ((xdata)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xbuf)) ((xTEST_STR)))
                xtest_TCPServer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xTCPServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_ThreadingTCPServer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xThreadingTCPServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_ForkingTCPServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xsimple_subprocess)) ((xself)))))
                          bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xForkingTCPServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_UnixStreamServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xUnixStreamServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_ThreadingUnixStreamServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xThreadingUnixStreamServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_ForkingUnixStreamServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xsimple_subprocess)) ((xself)))))
                          bogusForceDataize.write ((((xself).xrun_server)) ((xForkingUnixStreamServer)) (((xsocketserver).xStreamRequestHandler)) (((xself).xstream_examine)))
                xtest_UDPServer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xUDPServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_ThreadingUDPServer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xThreadingUDPServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_ForkingUDPServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xsimple_subprocess)) ((xself)))))
                          bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xForkingUDPServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_UnixDatagramServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xUnixDatagramServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_ThreadingUnixDatagramServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xrun_server)) (((xsocketserver).xThreadingUnixDatagramServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_ForkingUnixDatagramServer.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xrun_server)) ((xForkingUnixDatagramServer)) (((xsocketserver).xDatagramRequestHandler)) (((xself).xdgram_examine)))
                xtest_shutdown.write
                  [xself]
                    memory > xt
                    memory > xs
                    memory > xthreads
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xsocketserver).xTCPServer)))
                        (((unsupported)) (((xsocketserver).xStreamRequestHandler)))
                        xthreads.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          seq
                            xs.write (((xMyServer)) ((((unsupported)) ((xHOST)) (0))) ((xMyHandler)))
                            xt.write (((unsupported)) (((xthreading).xThread)) ("MyServer serving") (((xs).xserve_forever)) ((((unsupported)) ("poll_interval") (0.01))))
                            (((unsupported)) (((xt).xdaemon)) (TRUE))
                            bogusForceDataize.write ((((xthreads).xappend)) ((((unsupported)) ((xt)) ((xs)))))
                        (((unsupported)) ((((unsupported)) ((xt)) ((xs)))) ((xthreads)))
                          seq
                            bogusForceDataize.write ((((xt).xstart)) 0)
                            bogusForceDataize.write ((((xs).xshutdown)) 0)
                        (((unsupported)) ((((unsupported)) ((xt)) ((xs)))) ((xthreads)))
                          seq
                            bogusForceDataize.write ((((xt).xjoin)) 0)
                            bogusForceDataize.write ((((xs).xserver_close)) 0)
                xtest_close_immediately.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)) (((xsocketserver).xThreadingMixIn)) (((xsocketserver).xTCPServer)))
                        xserver.write (((xMyServer)) ((((unsupported)) ((xHOST)) (0))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xserver).xserver_close)) 0)
                xtest_tcpserver_bind_leak.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) (1024))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((xsocketserver).xTCPServer)) ((((unsupported)) ((xHOST)) ((1.neg)))) (((xsocketserver).xStreamRequestHandler)))
                xtest_context_manager.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsocketserver).xTCPServer)) ((((unsupported)) ((xHOST)) (0))) (((xsocketserver).xStreamRequestHandler)))) ((xserver)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.neg)) ((((((xserver).xsocket).xfileno)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xtest).xsupport).xunlink)) ((((xtest).xsupport).xTESTFN)))
                xtest_sync_handled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xBaseErrorTestServer)) ((xValueError)))
                        (((unsupported)) (((xself).xcheck_result)) (TRUE))
                xtest_sync_not_handled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSystemExit)))))
                          bogusForceDataize.write (((xBaseErrorTestServer)) ((xSystemExit)))
                        (((unsupported)) (((xself).xcheck_result)) (FALSE))
                xtest_threading_handled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xThreadingErrorTestServer)) ((xValueError)))
                        (((unsupported)) (((xself).xcheck_result)) (TRUE))
                xtest_threading_not_handled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xThreadingErrorTestServer)) ((xSystemExit)))
                        (((unsupported)) (((xself).xcheck_result)) (FALSE))
                xtest_forking_handled.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((xForkingErrorTestServer)) ((xValueError)))
                        (((unsupported)) (((xself).xcheck_result)) (TRUE))
                xtest_forking_not_handled.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((xForkingErrorTestServer)) ((xSystemExit)))
                        (((unsupported)) (((xself).xcheck_result)) (FALSE))
                xcheck_result.write
                  [xself xhandled]
                    memory > xexpected
                    seq > @
                      (((unsupported)) ((((xopen)) ((((xtest).xsupport).xTESTFN)))) ((xlog)))
                        seq
                          xexpected.write ("Handler calledn".add ("Error handledn".mul (xhandled)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xlog).xread)) 0)) ((xexpected)))
            (((unsupported)) (((xsocketserver).xTCPServer)))
              seq
                x__init__.write
                  [xself xexception]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xexception)) ((xexception)))
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xHOST)) (0))) ((xBadHandler)))
                        (((unsupported)) (((((xsocket).xcreate_connection)) (((xself).xserver_address)))))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xhandle_request)) 0)
                          bogusForceDataize.write ((((xself).xserver_close)) 0)
                        bogusForceDataize.write ((((xself).xwait_done)) 0)
                xhandle_error.write
                  [xself xrequest xclient_address]
                    seq > @
                      (((unsupported)) ((((xopen)) ((((xtest).xsupport).xTESTFN)) ("a"))) ((xlog)))
                        bogusForceDataize.write ((((xlog).xwrite)) ("Error handledn"))
                xwait_done.write
                  [xself]
                    seq > @
            (((unsupported)) (((xsocketserver).xBaseRequestHandler)))
              xhandle.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) ((((xopen)) ((((xtest).xsupport).xTESTFN)) ("a"))) ((xlog)))
                        bogusForceDataize.write ((((xlog).xwrite)) ("Handler calledn"))
                      (((unsupported)) ((((((xself).xserver).xexception)) ("Test error"))))
            (((unsupported)) (((xsocketserver).xThreadingMixIn)) ((xBaseErrorTestServer)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xdone)) (((((xthreading).xEvent)) 0)))
                        bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xpos)))) ((((unsupported)) ((xkw)))))
                xshutdown_request.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) 0).xshutdown_request)) ((((unsupported)) ((xpos)))) ((((unsupported)) ((xkw)))))
                        bogusForceDataize.write (((((xself).xdone).xset)) 0)
                xwait_done.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xdone).xwait)) 0)
            (xHAVE_FORKING).if
              (((unsupported)) (((xsocketserver).xForkingMixIn)) ((xBaseErrorTestServer)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xs
                    memory > xserver
                    memory > xhandle
                    seq > @
                      seq
                        (((unsupported)) (((xsocketserver).xStreamRequestHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) ((((xself).xserver).xwfile)) (((xself).xwfile)))
                                  (((unsupported)) ((((xself).xserver).xwfile_fileno)) ((((((xself).xwfile).xfileno)) 0)))
                                  (((unsupported)) ((((xself).xserver).xrequest_fileno)) ((((((xself).xrequest).xfileno)) 0)))
                        xserver.write ((((xsocketserver).xTCPServer)) ((((unsupported)) ((xHOST)) (0))) ((xHandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xserver).xserver_close)))
                        xs.write ((((xsocket).xsocket)) (((xserver).xaddress_family)) (((xsocket).xSOCK_STREAM)) (((xsocket).xIPPROTO_TCP)))
                        (((unsupported)) ((xs)))
                          bogusForceDataize.write ((((xs).xconnect)) (((xserver).xserver_address)))
                        bogusForceDataize.write ((((xserver).xhandle_request)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xserver).xwfile)) (((xio).xBufferedIOBase)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xwfile_fileno)) (((xserver).xrequest_fileno)))
                xtest_write.write
                  [xself]
                    memory > xrun_client
                    memory > xresponse1
                    memory > xmain_thread
                    memory > xsignal_handler
                    memory > xhandle
                    memory > xpthread_kill
                    memory > xreceived2
                    memory > xoriginal
                    memory > xserver
                    memory > xbackground
                    memory > xinterrupted
                    seq > @
                      seq
                        xpthread_kill.write (((((xtest).xsupport).xget_attribute)) ((xsignal)) ("pthread_kill"))
                        (((unsupported)) (((xsocketserver).xStreamRequestHandler)))
                          xhandle.write
                            [xself]
                              memory > xbig_chunk
                              seq > @
                                seq
                                  (((unsupported)) ((((xself).xserver).xsent1)) ((((((xself).xwfile).xwrite)) ("write datan"))))
                                  (((unsupported)) ((((xself).xserver).xreceived)) ((((((xself).xrfile).xreadline)) 0)))
                                  xbig_chunk.write ("0".mul (((xtest).xsupport).xSOCK_MAX_SIZE))
                                  (((unsupported)) ((((xself).xserver).xsent2)) ((((((xself).xwfile).xwrite)) ((xbig_chunk)))))
                        xserver.write ((((xsocketserver).xTCPServer)) ((((unsupported)) ((xHOST)) (0))) ((xHandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xserver).xserver_close)))
                        xinterrupted.write ((((xthreading).xEvent)) 0)
                        xsignal_handler.write
                          [xsignum xframe]
                            seq > @
                              bogusForceDataize.write ((((xinterrupted).xset)) 0)
                        xoriginal.write ((((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ((xsignal_handler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ((xoriginal)))
                        xresponse1.write "None: is there a None literal in the EO language?"
                        xreceived2.write "None: is there a None literal in the EO language?"
                        xmain_thread.write ((((xthreading).xget_ident)) 0)
                        xrun_client.write
                          []
                            memory > xs
                            memory > xresponse1
                            memory > xreceived2
                            seq > @
                              seq
                                xs.write ((((xsocket).xsocket)) (((xserver).xaddress_family)) (((xsocket).xSOCK_STREAM)) (((xsocket).xIPPROTO_TCP)))
                                (((unsupported)) ((xs)) (((((xs).xmakefile)) ("rb"))) ((xreader)))
                                  seq
                                    bogusForceDataize.write ((((xs).xconnect)) (((xserver).xserver_address)))
                                    (((unsupported)) 0)
                                    xresponse1.write ((((xreader).xreadline)) 0)
                                    bogusForceDataize.write ((((xs).xsendall)) ("client responsen"))
                                    bogusForceDataize.write ((((xreader).xread)) (100))
                                    while.
                                      TRUE
                                      [unused]
                                        seq > @
                                          seq
                                            bogusForceDataize.write (((xpthread_kill)) ((xmain_thread)) (((xsignal).xSIGUSR1)))
                                            (((unsupported)) (((xinterrupted).xwait)) ((((xfloat)) (1)))).if
                                              (((unsupported)) 0)
                                    (((unsupported)) 0)
                                    xreceived2.write (((xlen)) (((((xreader).xread)) 0)))
                        xbackground.write (((unsupported)) (((xthreading).xThread)) ((xrun_client)))
                        bogusForceDataize.write ((((xbackground).xstart)) 0)
                        bogusForceDataize.write ((((xserver).xhandle_request)) 0)
                        bogusForceDataize.write ((((xbackground).xjoin)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xsent1)) ((((xlen)) ((xresponse1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresponse1)) ("write datan"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xreceived)) ("client responsen"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xsent2)) ((((xtest).xsupport).xSOCK_MAX_SIZE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreceived2)) (((((xtest).xsupport).xSOCK_MAX_SIZE).sub 100)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_all.write
                  [xself]
                    memory > xexpected
                    memory > xmod_object
                    seq > @
                      seq
                        xexpected.write (((unsupported)) 0)
                        (((unsupported)) ((xname)) ((((xdir)) ((xsocketserver)))))
                          (((((xname).xstartswith)) ("_")).not).if
                            seq
                              xmod_object.write (((xgetattr)) ((xsocketserver)) ((xname)))
                              ((((xgetattr)) ((xmod_object)) ("__module__") ("None: is there a None literal in the EO language?")).eq "socketserver").if
                                bogusForceDataize.write ((((xexpected).xappend)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)) (((xsocketserver).x__all__)) ((xexpected)))
                xtest_shutdown_request_called_if_verify_request_false.write
                  [xself]
                    memory > xshutdown_called
                    memory > xshutdown_request
                    memory > xverify_request
                    memory > xs
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)) (((xsocketserver).xTCPServer)))
                          seq
                            xverify_request.write
                              [xself xrequest xclient_address]
                                seq > @
                                  (((unsupported)) (FALSE))
                            xshutdown_called.write 0
                            xshutdown_request.write
                              [xself xrequest]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xshutdown_called)) (1))
                                    bogusForceDataize.write (((((xsocketserver).xTCPServer).xshutdown_request)) ((xself)) ((xrequest)))
                        xserver.write (((xMyServer)) ((((unsupported)) ((xHOST)) (0))) (((xsocketserver).xStreamRequestHandler)))
                        xs.write ((((xsocket).xsocket)) (((xserver).xaddress_family)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xs).xconnect)) (((xserver).xserver_address)))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                        bogusForceDataize.write ((((xserver).xhandle_request)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xserver).xshutdown_called)) (1))
                        bogusForceDataize.write ((((xserver).xserver_close)) 0)
                xtest_threads_reaped.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xsocketserver).xThreadingMixIn)) (((xsocketserver).xTCPServer)))
                        xserver.write (((xMyServer)) ((((unsupported)) ((xHOST)) (0))) (((xsocketserver).xStreamRequestHandler)))
                        (((unsupported)) ((xn)) ((((xrange)) (10))))
                          (((unsupported)) (((((xsocket).xcreate_connection)) (((xserver).xserver_address)))))
                            bogusForceDataize.write ((((xserver).xhandle_request)) 0)
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) (((xserver).x_threads)))) (10))
                        bogusForceDataize.write ((((xserver).xserver_close)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)