memory > xthreading
memory > xrun_unittest
memory > ximportlib
memory > xB
memory > xrange
memory > xKeyError
memory > xi
memory > xsys
memory > xlen
memory > xImportError
memory > xAttributeError
memory > xtest
memory > xverbose
memory > xrandom
memory > xopen
memory > xrmtree
memory > xprint
memory > xf
memory > xset
memory > xException
memory > xtime
memory > xFlushingFinder
memory > xunlink
memory > xTESTFN
memory > xmock
memory > xos
memory > xThreadedImportTests
memory > xforget
memory > xgetattr
memory > xFinder
memory > xe
memory > xname
memory > xshutil
memory > xunittest
memory > xmodname
memory > xA
memory > x__import__
memory > xN
memory > xstart_threads
memory > x__name__
[] > test_threaded_import
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcircular_imports_modules
        memory > xtest_main
        memory > xtest_parallel_path_hooks
        memory > xsetUp
        memory > xtask
        memory > xtest_side_effect_import
        memory > xtest_parallel_meta_path
        memory > x__init__
        memory > xcheck_parallel_module_init
        memory > xtest_import_hangers
        memory > xmock_register_at_fork
        memory > xtearDown
        memory > xtest_parallel_module_init
        memory > xfind_spec
        memory > ximp
        memory > xtest_circular_imports
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            xtask.write
              [xN xdone xdone_tasks xerrors]
                memory > xx
                memory > xfinished
                seq > @
                  (((unsupported)) ((xException)))
                    seq
                      ((((xlen)) ((xdone_tasks))).mod 2).if
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                      xx.write ((((xrandom).xrandrange)) (1) (3))
                    bogusForceDataize.write ((((xerrors).xappend)) (((((xe).xwith_traceback)) ("None: is there a None literal in the EO language?"))))
                    seq
                      bogusForceDataize.write ((((xdone_tasks).xappend)) (((((xthreading).xget_ident)) 0)))
                      xfinished.write ((((xlen)) ((xdone_tasks))).eq (xN))
                      (xfinished).if
                        bogusForceDataize.write ((((xdone).xset)) 0)
            xmock_register_at_fork.write
              [xfunc]
                seq > @
                  (((unsupported)) ((((((unsupported)) (((xmock).xpatch)) ("os.register_at_fork") (TRUE))) ((xfunc)))))
            xcircular_imports_modules.write (((unsupported)) ("A") ((((unsupported)) 0)) ("B") ((((unsupported)) 0)) ("C") ("import B") ("D") ("import A"))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xnumcalls)) (0))
                        (((unsupported)) (((xself).xx)) (0))
                        (((unsupported)) (((xself).xlock)) (((((xthreading).xLock)) 0)))
                xfind_spec.write
                  [xself xname xpath xtarget]
                    memory > xx
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((ximp).xlock_held)) 0)))
                        (((unsupported)) (((xself).xlock)))
                          (((unsupported)) (((xself).xnumcalls)) (1))
                        xx.write ((xself).xx)
                        bogusForceDataize.write ((((xtime).xsleep)) (0.01))
                        (((unsupported)) (((xself).xx)) (((xx).add 1)))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                xfind_spec.write
                  [xself xname xpath xtarget]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xsys).xpath_importer_cache).xclear)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xold_random)) ((((((xsys).xmodules).xpop)) ("random") ("None: is there a None literal in the EO language?"))))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xold_random)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("random"))) (((xself).xold_random)))
                xcheck_parallel_module_init.write
                  [xself xmock_os]
                    memory > xdbg_info
                    memory > xerrors
                    memory > xdt
                    memory > xdone_tasks
                    memory > xdone
                    memory > xt0
                    memory > xcompleted
                    seq > @
                      (((unsupported)) 0)
                        ((((ximp).xlock_held)) 0).if
                          (((unsupported)) (((((xunittest).xSkipTest)) ("can't run when import lock is held"))))
                        xdone.write ((((xthreading).xEvent)) 0)
                        (((unsupported)) ((xN)) (((((unsupported)) (20) (50)).mul 3)))
                          seq
                            (xverbose).if
                              (((unsupported)) ((xprint)) ("Trying") ((xN)) ("threads ...") (" "))
                            (((unsupported)) ((xmodname)) ((((unsupported)) ("random") ("modulefinder"))))
                              (((unsupported)) ((xKeyError)))
                                (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xmodname)))))))
                            xerrors.write (((unsupported)) 0)
                            xdone_tasks.write (((unsupported)) 0)
                            bogusForceDataize.write ((((xdone).xclear)) 0)
                            xt0.write ((((xtime).xmonotonic)) 0)
                            (((unsupported)) ((((xstart_threads)) ((((unsupported)) ((((unsupported)) (((xthreading).xThread)) ((xtask)) ((((unsupported)) ((xN)) ((xdone)) ((xdone_tasks)) ((xerrors)))))) ((xi)) ((((xrange)) ((xN)))))))))
                            xcompleted.write ((((xdone).xwait)) ((10.mul 60)))
                            xdt.write (((((xtime).xmonotonic)) 0).sub (xt0))
                            (xverbose).if
                              (((unsupported)) ((xprint)) (("%.1f ms".mod ((xdt).mul (((unsupported)) 0)))) (TRUE) (" "))
                            xdbg_info.write ("done: %s/%s".mod (((unsupported)) ((((xlen)) ((xdone_tasks)))) ((xN))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((xerrors)) ((xdbg_info)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((xcompleted)) ((xdbg_info)))
                            (xverbose).if
                              bogusForceDataize.write (((xprint)) ("OK."))
                xtest_parallel_module_init.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_parallel_module_init)) 0)
                xtest_parallel_meta_path.write
                  [xself]
                    memory > xfinder
                    seq > @
                      seq
                        xfinder.write (((xFinder)) 0)
                        bogusForceDataize.write (((((xsys).xmeta_path).xinsert)) (0) ((xfinder)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xcheck_parallel_module_init)) 0)
                            bogusForceDataize.write ((((xself).xassertGreater)) (((xfinder).xnumcalls)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xfinder).xx)) (((xfinder).xnumcalls)))
                          bogusForceDataize.write (((((xsys).xmeta_path).xremove)) ((xfinder)))
                xtest_parallel_path_hooks.write
                  [xself]
                    memory > xfinder
                    memory > xpath_hook
                    memory > xnumtests
                    memory > xflushing_finder
                    seq > @
                      seq
                        xfinder.write (((xFinder)) 0)
                        xflushing_finder.write (((xFlushingFinder)) 0)
                        xpath_hook.write
                          [xpath]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xfinder).xfind_spec)) (""))
                                (((unsupported)) ((xImportError)))
                        bogusForceDataize.write (((((xsys).xpath_hooks).xinsert)) (0) ((xpath_hook)))
                        bogusForceDataize.write (((((xsys).xmeta_path).xappend)) ((xflushing_finder)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xflushing_finder).xfind_spec)) (""))
                            xnumtests.write ((((xself).xcheck_parallel_module_init)) 0)
                            bogusForceDataize.write ((((xself).xassertGreater)) (((xfinder).xnumcalls)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xfinder).xx)) (((xfinder).xnumcalls)))
                          seq
                            bogusForceDataize.write (((((xsys).xmeta_path).xremove)) ((xflushing_finder)))
                            bogusForceDataize.write (((((xsys).xpath_hooks).xremove)) ((xpath_hook)))
                xtest_import_hangers.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xKeyError)))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("test.threaded_import_hangers"))))))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xtest).xthreaded_import_hangers).xerrors)))
                xtest_circular_imports.write
                  [xself]
                    memory > xt2
                    memory > xcontents
                    memory > ximport_ab
                    memory > xresults
                    memory > xt1
                    memory > xdelay
                    memory > ximport_ba
                    seq > @
                      seq
                        xdelay.write 0.5
                        bogusForceDataize.write ((((xos).xmkdir)) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xshutil).xrmtree)) ((xTESTFN)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xsys).xpath).xremove)) ((xTESTFN)))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xcontents)))) (((((xcircular_imports_modules).xitems)) 0)))
                          seq
                            xcontents.write ((xcontents).mod (((unsupported)) ("delay") ((xdelay))))
                            (((unsupported)) ((((xopen)) ((((((xos).xpath).xjoin)) ((xTESTFN)) (((xname).add ".py")))) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) (((((xcontents).xencode)) ("utf-8"))))
                            bogusForceDataize.write ((((xself).xaddCleanup)) ((xforget)) ((xname)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)) 0)
                        xresults.write (((unsupported)) 0)
                        ximport_ab.write
                          []
                            seq > @
                              seq
                                (((unsupported)) 0)
                                bogusForceDataize.write ((((xresults).xappend)) ((((xgetattr)) ((xA)) ("x") ("None: is there a None literal in the EO language?"))))
                        ximport_ba.write
                          []
                            seq > @
                              seq
                                (((unsupported)) 0)
                                bogusForceDataize.write ((((xresults).xappend)) ((((xgetattr)) ((xB)) ("x") ("None: is there a None literal in the EO language?"))))
                        xt1.write (((unsupported)) (((xthreading).xThread)) ((ximport_ab)))
                        xt2.write (((unsupported)) (((xthreading).xThread)) ((ximport_ba)))
                        bogusForceDataize.write ((((xt1).xstart)) 0)
                        bogusForceDataize.write ((((xt2).xstart)) 0)
                        bogusForceDataize.write ((((xt1).xjoin)) 0)
                        bogusForceDataize.write ((((xt2).xjoin)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xresults)))) ((((unsupported)) ("a") ("b"))))
                xtest_side_effect_import.write
                  [xself xmock_os]
                    memory > xcode
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) (((xos).xcurdir)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xsys).xpath).xremove)) (((xos).xcurdir)))
                        xfilename.write ((xTESTFN).add ".py")
                        (((unsupported)) ((((xopen)) ((xfilename)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) (((((xcode).xencode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xunlink)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xforget)) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xrmtree)) ("__pycache__"))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)) 0)
                        bogusForceDataize.write (((x__import__)) ((xTESTFN)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xTESTFN)))))))
            xtest_main.write
              []
                memory > xold_switchinterval
                seq > @
                  (((unsupported)) 0)
                    xold_switchinterval.write "None: is there a None literal in the EO language?"
                    (((unsupported)) ((xAttributeError)))
                      seq
                        xold_switchinterval.write ((((xsys).xgetswitchinterval)) 0)
                        bogusForceDataize.write ((((xsys).xsetswitchinterval)) ((((unsupported)) 0)))
                    (((unsupported)) 0)
                      bogusForceDataize.write (((xrun_unittest)) ((xThreadedImportTests)))
                      (((unsupported)) ((xold_switchinterval)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((xsys).xsetswitchinterval)) ((xold_switchinterval)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)