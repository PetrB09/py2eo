memory > xstderr_lines
memory > xsetting
memory > xstr
memory > xenv_var
memory > xnamedtuple
memory > xprint
memory > x_LocaleHandlingTestCase
memory > xunittest
memory > xresult
memory > x__name__
memory > xhasattr
memory > xEncodingDetails
memory > xLocaleCoercionTests
memory > xtarget_locale
memory > xsupport
memory > xsys
memory > xencoding_details
memory > xbool
memory > xrun_python_until_end
memory > xlocale
memory > xlocale_to_set
memory > xsubprocess
memory > xos
memory > xLocaleConfigurationTests
memory > xe
memory > xsysconfig
memory > xextra_vars
memory > xpy_cmd
memory > xdict
[] > test_c_locale_coercion
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xAVAILABLE_TARGETS
        memory > xCLI_COERCION_TARGET
        memory > xget_child_details
        memory > xget_expected_details
        memory > x_check_child_encoding_details
        memory > xtest_main
        memory > xtest_PYTHONCOERCECLOCALE_not_zero
        memory > xEXPECT_COERCION_IN_DEFAULT_LOCALE
        memory > xtest_LC_ALL_set_to_C
        memory > x_EncodingDetails
        memory > x_check_nl_langinfo_CODESET
        memory > xtest_PYTHONCOERCECLOCALE_not_set
        memory > xEXPECTED_C_LOCALE_EQUIVALENTS
        memory > xCLI_COERCION_WARNING_FMT
        memory > xsetUpModule
        memory > xLEGACY_LOCALE_WARNING
        memory > x_C_UTF8_LOCALES
        memory > xtest_external_target_locale_configuration
        memory > x_check_c_locale_coercion
        memory > xsetUpClass
        memory > xtest_PYTHONCOERCECLOCALE_set_to_zero
        memory > xEXPECTED_C_LOCALE_STREAM_ENCODING
        memory > xtest_PYTHONCOERCECLOCALE_set_to_one
        memory > xTARGET_LOCALES
        memory > xtest_PYTHONCOERCECLOCALE_set_to_warn
        memory > x_set_locale_in_subprocess
        memory > x_fields
        memory > xEXPECTED_C_LOCALE_FS_ENCODING
        memory > xCLI_COERCION_WARNING
        memory > xCHILD_PROCESS_SCRIPT
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xEXPECTED_C_LOCALE_EQUIVALENTS.write (((unsupported)) ("C") ("invalid.ascii"))
            xEXPECTED_C_LOCALE_STREAM_ENCODING.write "ascii"
            xEXPECTED_C_LOCALE_FS_ENCODING.write "ascii"
            xEXPECT_COERCION_IN_DEFAULT_LOCALE.write TRUE
            xTARGET_LOCALES.write (((unsupported)) ("C.UTF-8") ("C.utf8") ("UTF-8"))
            (((((xsys).xplatform).xstartswith)) ("linux")).if
              ((xsupport).xis_android).if
                seq
                  xEXPECTED_C_LOCALE_STREAM_ENCODING.write "utf-8"
                  xEXPECTED_C_LOCALE_FS_ENCODING.write "utf-8"
                bogusForceDataize.write ((((xEXPECTED_C_LOCALE_EQUIVALENTS).xappend)) ("POSIX"))
              (((((xsys).xplatform).xstartswith)) ("aix")).if
                seq
                  xEXPECTED_C_LOCALE_STREAM_ENCODING.write "iso8859-1"
                  xEXPECTED_C_LOCALE_FS_ENCODING.write "iso8859-1"
                (((xsys).xplatform).eq "darwin").if
                  xEXPECTED_C_LOCALE_FS_ENCODING.write "utf-8"
                  (((xsys).xplatform).eq "cygwin").if
                    xEXPECT_COERCION_IN_DEFAULT_LOCALE.write FALSE
            x_C_UTF8_LOCALES.write (((unsupported)) ("C.UTF-8") ("C.utf8") ("UTF-8"))
            x_check_nl_langinfo_CODESET.write (((xbool)) ((((((unsupported)) (((xsys).xplatform)) ((((unsupported)) ("darwin") ("linux")))).and (((xhasattr)) ((xlocale)) ("nl_langinfo"))).and (((xhasattr)) ((xlocale)) ("CODESET")))))
            x_set_locale_in_subprocess.write
              [xlocale_name]
                memory > xcmd_fmt
                memory > xcmd
                seq > @
                  seq
                    xcmd_fmt.write "import locale; print(locale.setlocale(locale.LC_CTYPE, '{}'))"
                    (x_check_nl_langinfo_CODESET).if
                      (((unsupported)) ((xcmd_fmt)) ("; import sys; sys.exit(not locale.nl_langinfo(locale.CODESET))"))
                    xcmd.write ((((xcmd_fmt).xformat)) ((xlocale_name)))
                    (((unsupported)) ((((unsupported)) ((xresult)) ((xpy_cmd)))) ((((unsupported)) ((xrun_python_until_end)) ("-c") ((xcmd)) (""))))
                    (((unsupported)) ((((xresult).xrc).eq 0)))
            x_fields.write "fsencoding stdin_info stdout_info stderr_info lang lc_ctype lc_all"
            x_EncodingDetails.write (((xnamedtuple)) ("EncodingDetails") ((x_fields)))
            (((unsupported)) ((x_EncodingDetails)))
              seq
                xCHILD_PROCESS_SCRIPT.write (((";".xjoin)) ((((unsupported)) ("import sys, os") ("print(sys.getfilesystemencoding())") ("print(sys.stdin.encoding + ':' + sys.stdin.errors)") ("print(sys.stdout.encoding + ':' + sys.stdout.errors)") ("print(sys.stderr.encoding + ':' + sys.stderr.errors)") ("print(os.environ.get('LANG', 'not set'))") ("print(os.environ.get('LC_CTYPE', 'not set'))") ("print(os.environ.get('LC_ALL', 'not set'))"))))
                xget_expected_details.write
                  [xcls xcoercion_expected xfs_encoding xstream_encoding xenv_vars]
                    memory > xenv_info
                    memory > xexpected_lc_all
                    memory > xexpected_lc_ctype
                    memory > xstream_info
                    memory > xexpected_lang
                    memory > x_stream
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        x_stream.write ((xstream_encoding).add ":{}")
                        xstream_info.write (2.mul (((unsupported)) (((((x_stream).xformat)) ("surrogateescape")))))
                        bogusForceDataize.write ((((xstream_info).xappend)) (((((x_stream).xformat)) ("backslashreplace"))))
                        xexpected_lang.write ((((xenv_vars).xget)) ("LANG") ("not set"))
                        (xcoercion_expected).if
                          xexpected_lc_ctype.write (xCLI_COERCION_TARGET)
                          xexpected_lc_ctype.write ((((xenv_vars).xget)) ("LC_CTYPE") ("not set"))
                        xexpected_lc_all.write ((((xenv_vars).xget)) ("LC_ALL") ("not set"))
                        xenv_info.write (((unsupported)) ((xexpected_lang)) ((xexpected_lc_ctype)) ((xexpected_lc_all)))
                        (((unsupported)) ((((xdict)) (((((((xcls)) ((xfs_encoding)) ((((unsupported)) ((xstream_info)))) ((((unsupported)) ((xenv_info))))).x_asdict)) 0)))))
                xget_child_details.write
                  [xcls xenv_vars]
                    memory > xstderr_lines
                    memory > xchild_encoding_details
                    memory > xstdout_lines
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xresult)) ((xpy_cmd)))) ((((xrun_python_until_end)) ("-X") ("utf8=0") ("-c") (((xcls).xCHILD_PROCESS_SCRIPT)) ((((unsupported)) ((xenv_vars)))))))
                        ((((xresult).xrc).eq 0).not).if
                          bogusForceDataize.write ((((xresult).xfail)) ((xpy_cmd)))
                        xstdout_lines.write ((((((((xresult).xout).xdecode)) ("ascii")).xsplitlines)) 0)
                        xchild_encoding_details.write (((xdict)) (((((((xcls)) ((((unsupported)) ((xstdout_lines))))).x_asdict)) 0)))
                        xstderr_lines.write (((((((((((xresult).xerr).xdecode)) ("ascii")).xrstrip)) 0).xsplitlines)) 0)
                        (((unsupported)) ((((unsupported)) ((xchild_encoding_details)) ((xstderr_lines)))))
            xLEGACY_LOCALE_WARNING.write "Python runtime initialized with LC_CTYPE=C (a locale with default ASCII encoding), which may cause Unicode compatibility problems. Using C.UTF-8, C.utf8, or UTF-8 (if available) as alternative Unicode-compatible locales is recommended."
            xCLI_COERCION_WARNING_FMT.write "Python detected LC_CTYPE=C: LC_CTYPE coerced to {} (set another locale or PYTHONCOERCECLOCALE=0 to disable this locale coercion behavior)."
            xAVAILABLE_TARGETS.write "None: is there a None literal in the EO language?"
            xCLI_COERCION_TARGET.write "None: is there a None literal in the EO language?"
            xCLI_COERCION_WARNING.write "None: is there a None literal in the EO language?"
            xsetUpModule.write
              []
                memory > xCLI_COERCION_WARNING
                memory > xAVAILABLE_TARGETS
                memory > xCLI_COERCION_TARGET
                seq > @
                  seq
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) ((xAVAILABLE_TARGETS)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)) 0)
                    xAVAILABLE_TARGETS.write (((unsupported)) 0)
                    (((unsupported)) ((xtarget_locale)) ((x_C_UTF8_LOCALES)))
                      (((x_set_locale_in_subprocess)) ((xtarget_locale))).if
                        bogusForceDataize.write ((((xAVAILABLE_TARGETS).xappend)) ((xtarget_locale)))
                    (xAVAILABLE_TARGETS).if
                      seq
                        xCLI_COERCION_TARGET.write (((unsupported)) ((xAVAILABLE_TARGETS)) (0))
                        xCLI_COERCION_WARNING.write ((((xCLI_COERCION_WARNING_FMT).xformat)) ((xCLI_COERCION_TARGET)))
                    ((xsupport).xverbose).if
                      seq
                        bogusForceDataize.write (((xprint)) ("AVAILABLE_TARGETS = {AVAILABLE_TARGETS!r}"))
                        bogusForceDataize.write (((xprint)) ("EXPECTED_C_LOCALE_EQUIVALENTS = {EXPECTED_C_LOCALE_EQUIVALENTS!r}"))
                        bogusForceDataize.write (((xprint)) ("EXPECTED_C_LOCALE_STREAM_ENCODING = {EXPECTED_C_LOCALE_STREAM_ENCODING!r}"))
                        bogusForceDataize.write (((xprint)) ("EXPECTED_C_LOCALE_FS_ENCODING = {EXPECTED_C_LOCALE_FS_ENCODING!r}"))
                        bogusForceDataize.write (((xprint)) ("EXPECT_COERCION_IN_DEFAULT_LOCALE = {EXPECT_COERCION_IN_DEFAULT_LOCALE!r}"))
                        bogusForceDataize.write (((xprint)) ("_C_UTF8_LOCALES = {_C_UTF8_LOCALES!r}"))
                        bogusForceDataize.write (((xprint)) ("_check_nl_langinfo_CODESET = {_check_nl_langinfo_CODESET!r}"))
            (((unsupported)) (((xunittest).xTestCase)))
              x_check_child_encoding_details.write
                [xself xenv_vars xexpected_fs_encoding xexpected_stream_encoding xexpected_warnings xcoercion_expected]
                  memory > xresult
                  memory > xexpected_details
                  seq > @
                    seq
                      (((unsupported)) 0)
                      xresult.write ((((xEncodingDetails).xget_child_details)) ((xenv_vars)))
                      (((unsupported)) ((((unsupported)) ((xencoding_details)) ((xstderr_lines)))) ((xresult)))
                      xexpected_details.write ((((xEncodingDetails).xget_expected_details)) ((xcoercion_expected)) ((xexpected_fs_encoding)) ((xexpected_stream_encoding)) ((xenv_vars)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xencoding_details)) ((xexpected_details)))
                      (((unsupported)) ((xexpected_warnings)) ("None: is there a None literal in the EO language?")).if
                        xexpected_warnings.write (((unsupported)) 0)
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xstderr_lines)) ((xexpected_warnings)))
            (((unsupported)) ((x_LocaleHandlingTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        ((xAVAILABLE_TARGETS).not).if
                          (((unsupported)) (((((xunittest).xSkipTest)) ("No C-with-UTF-8 locale available"))))
                xtest_external_target_locale_configuration.write
                  [xself]
                    memory > xexpected_fs_encoding
                    memory > xexpected_stream_encoding
                    memory > xbase_var_dict
                    memory > xvar_dict
                    seq > @
                      seq
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        xexpected_fs_encoding.write "utf-8"
                        xexpected_stream_encoding.write "utf-8"
                        xbase_var_dict.write (((unsupported)) ("LANG") ("") ("LC_CTYPE") ("") ("LC_ALL") ("") ("PYTHONCOERCECLOCALE") (""))
                        (((unsupported)) ((xenv_var)) ((((unsupported)) ("LANG") ("LC_CTYPE"))))
                          (((unsupported)) ((xlocale_to_set)) ((xAVAILABLE_TARGETS)))
                            seq
                              (((xenv_var).eq "LANG").and ((xlocale_to_set).eq "UTF-8")).if
                                (((unsupported)) 0)
                              (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xenv_var)) ((xlocale_to_set)))))
                                seq
                                  xvar_dict.write ((((xbase_var_dict).xcopy)) 0)
                                  (((unsupported)) ((((unsupported)) ((xvar_dict)) ((xenv_var)))) ((xlocale_to_set)))
                                  (((unsupported)) (((xself).x_check_child_encoding_details)) ((xvar_dict)) ((xexpected_fs_encoding)) ((xexpected_stream_encoding)) ("None: is there a None literal in the EO language?") (FALSE))
            (((unsupported)) ((x_LocaleHandlingTestCase)) (((xsupport).xcpython_only)) (((((xunittest).xskipUnless)) (((((xsysconfig).xget_config_var)) ("PY_COERCE_C_LOCALE"))) ("C locale coercion disabled at build time"))))
              seq
                x_check_c_locale_coercion.write
                  [xself xfs_encoding xstream_encoding xcoerce_c_locale xexpected_warnings xcoercion_expected]
                    memory > x_expected_warnings
                    memory > x_coercion_expected
                    memory > xbase_var_dict
                    memory > xvar_dict
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        ((xAVAILABLE_TARGETS).not).if
                          seq
                            xfs_encoding.write (xEXPECTED_C_LOCALE_FS_ENCODING)
                            xstream_encoding.write (xEXPECTED_C_LOCALE_STREAM_ENCODING)
                            xcoercion_expected.write FALSE
                            (xexpected_warnings).if
                              xexpected_warnings.write (((unsupported)) ((xLEGACY_LOCALE_WARNING)))
                        xbase_var_dict.write (((unsupported)) ("LANG") ("") ("LC_CTYPE") ("") ("LC_ALL") ("") ("PYTHONCOERCECLOCALE") (""))
                        bogusForceDataize.write ((((xbase_var_dict).xupdate)) ((xextra_vars)))
                        (((unsupported)) ((xcoerce_c_locale)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) ((((unsupported)) ((xbase_var_dict)) ("PYTHONCOERCECLOCALE"))) ((xcoerce_c_locale)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) (TRUE) ((xcoerce_c_locale)))))
                          seq
                            (xEXPECT_COERCION_IN_DEFAULT_LOCALE).if
                              seq
                                x_expected_warnings.write (xexpected_warnings)
                                x_coercion_expected.write (xcoercion_expected)
                              seq
                                x_expected_warnings.write "None: is there a None literal in the EO language?"
                                x_coercion_expected.write FALSE
                            (((xsupport).xis_android).and ((x_expected_warnings).eq (((unsupported)) ((xCLI_COERCION_WARNING))))).if
                              x_expected_warnings.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xself).x_check_child_encoding_details)) ((xbase_var_dict)) ((xfs_encoding)) ((xstream_encoding)) ((x_expected_warnings)) ((x_coercion_expected)))
                        (((unsupported)) ((xlocale_to_set)) ((xEXPECTED_C_LOCALE_EQUIVALENTS)))
                          (((unsupported)) ((xenv_var)) ((((unsupported)) ("LANG") ("LC_CTYPE"))))
                            (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xenv_var)) ((xlocale_to_set)) ((xcoerce_c_locale)))))
                              seq
                                xvar_dict.write ((((xbase_var_dict).xcopy)) 0)
                                (((unsupported)) ((((unsupported)) ((xvar_dict)) ((xenv_var)))) ((xlocale_to_set)))
                                bogusForceDataize.write ((((xself).x_check_child_encoding_details)) ((xvar_dict)) ((xfs_encoding)) ((xstream_encoding)) ((xexpected_warnings)) ((xcoercion_expected)))
                xtest_PYTHONCOERCECLOCALE_not_set.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_c_locale_coercion)) ("utf-8") ("utf-8") ("None: is there a None literal in the EO language?"))
                xtest_PYTHONCOERCECLOCALE_not_zero.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xsetting)) ((((unsupported)) ("") ("1") ("true") ("false"))))
                        (((unsupported)) (((xself).x_check_c_locale_coercion)) ("utf-8") ("utf-8") ((xsetting)))
                xtest_PYTHONCOERCECLOCALE_set_to_warn.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_c_locale_coercion)) ("utf-8") ("utf-8") ("warn") ((((unsupported)) ((xCLI_COERCION_WARNING)))))
                xtest_PYTHONCOERCECLOCALE_set_to_zero.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_check_c_locale_coercion)) ((xEXPECTED_C_LOCALE_FS_ENCODING)) ((xEXPECTED_C_LOCALE_STREAM_ENCODING)) ("0") (FALSE))
                        (((unsupported)) (((xself).x_check_c_locale_coercion)) ((xEXPECTED_C_LOCALE_FS_ENCODING)) ((xEXPECTED_C_LOCALE_STREAM_ENCODING)) ("0") ("C") (FALSE))
                xtest_LC_ALL_set_to_C.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_check_c_locale_coercion)) ((xEXPECTED_C_LOCALE_FS_ENCODING)) ((xEXPECTED_C_LOCALE_STREAM_ENCODING)) ("None: is there a None literal in the EO language?") ("C") (FALSE))
                        (((unsupported)) (((xself).x_check_c_locale_coercion)) ((xEXPECTED_C_LOCALE_FS_ENCODING)) ((xEXPECTED_C_LOCALE_STREAM_ENCODING)) ("warn") ("C") ((((unsupported)) ((xLEGACY_LOCALE_WARNING)))) (FALSE))
                xtest_PYTHONCOERCECLOCALE_set_to_one.write
                  [xself]
                    memory > xcmd
                    memory > xcode
                    memory > xloc
                    memory > xold_loc
                    memory > xenv
                    seq > @
                      seq
                        xold_loc.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xold_loc)))
                        (((unsupported)) (((xlocale).xError)))
                          xloc.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) (""))
                          bogusForceDataize.write ((((xself).xskipTest)) ((((xstr)) ((xe)))))
                        ((xloc).eq "C").if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test requires LC_CTYPE locale different than C"))
                        (((unsupported)) ((xloc)) ((xTARGET_LOCALES))).if
                          bogusForceDataize.write ((((xself).xskipTest)) (("coerced LC_CTYPE locale: %s".mod (xloc))))
                        xcode.write "import locale; print(locale.setlocale(locale.LC_CTYPE, None))"
                        xenv.write (((unsupported)) ((xdict)) (((xos).xenviron)) ("1"))
                        xcmd.write (((unsupported)) (((xsubprocess).xrun)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))) (((xsubprocess).xPIPE)) ((xenv)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xcmd).xstdout).xrstrip)) 0)) ((xloc)))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xLocaleConfigurationTests)) ((xLocaleCoercionTests)))
                    bogusForceDataize.write ((((xsupport).xreap_children)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)