memory > xkwargs
memory > xd
memory > xk
memory > xthreading
memory > xcm
memory > xUnicodeError
memory > xdir2
memory > xtopfd
memory > xstdout
memory > xfield
memory > xu
memory > xmin
memory > xFakePath
memory > xImportError
memory > xmaster_fd
memory > xAttributeError
memory > xgid_1
memory > xUnicodeDecodeError
memory > xrc
memory > xtopdown
memory > xcount
memory > xmember
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xdecimal
memory > xenumerate
memory > xuuid
memory > xlocals
memory > xerr2
memory > xSendfileTestServer
memory > xResourceWarning
memory > xassert_python_ok
memory > xfnmatch
memory > xValueError
memory > xo
memory > xsignal
memory > xtmpdir
memory > xerrno
memory > xpwd
memory > xrootfd
memory > xstr
memory > xconn
memory > xout
memory > xallow_fd
memory > xwarnings
memory > xstat
memory > xmsvcrt
memory > xTestPEP519
memory > xFileNotFoundError
memory > xsocket
memory > xBadInt
memory > xfile
memory > xBytesWarning
memory > xfunc
memory > xdest
memory > xrange
memory > xgid_2
memory > xb
memory > xvalue
memory > xctypes
memory > xZeroDivisionError
memory > xfunc_args
memory > xNotImplementedError
memory > x_
memory > xalias
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xFwalkTests
memory > xKeyError
memory > xdirs
memory > xf2
memory > xfn
memory > xentry
memory > xproto
memory > xrfd
memory > xStr
memory > xtempfile
memory > xunix_shell
memory > xmax
memory > xslave_fd
memory > xerr
memory > xatime_ns
memory > xp
memory > xopen
memory > xpath
memory > xprint
memory > xtype
memory > xf
memory > xroot_fd
memory > xw
memory > xset
memory > xWalkTests
memory > xrepr
memory > xint
memory > xit
memory > xException
memory > xr
memory > xcleanup_fn
memory > xhasattr
memory > xout2
memory > xOverflowError
memory > xcalls
memory > xthing
memory > xtime
memory > xcodecs
memory > xx
memory > xiterator
memory > xi
memory > xs
memory > xsupport
memory > xsys
memory > xissubclass
memory > xbytes
memory > xsorted
memory > xDeprecationWarning
memory > xfloat
memory > xfiles
memory > xsrc
memory > xcls
memory > xargs
memory > xOSError
memory > xfractions
memory > xos
memory > xdir
memory > xdirname
memory > xwfd
memory > xfilenames
memory > xf1
memory > xitertools
memory > xobj
memory > xsubprocess
memory > xextra_args
memory > xval
memory > xgetattr
memory > xbdirs
memory > xv
memory > xPermissionError
memory > xUnicodeEncodeError
memory > xbroot
memory > xuid_1
memory > xasynchat
memory > xe
memory > xiter
memory > xctx
memory > x__file__
memory > xattr
memory > xname
memory > xshutil
memory > xunittest
memory > xexc
memory > xstaticmethod
memory > xasyncore
memory > xhash
memory > xmap
memory > xnext
memory > xfobj
memory > xmtime_ns
memory > xA
memory > xaddr
memory > xpid2
memory > xpopen
memory > xstatus
memory > xmapping_tests
memory > xobject
memory > xsysconfig
memory > xmemoryview
memory > xfollow_symlinks
memory > xlen
memory > xdict
memory > xbfiles
memory > xroot
memory > xj
memory > xisinstance
memory > xfp
memory > xBlockingIOError
memory > xTypeError
memory > x__name__
memory > xkey
memory > xwintypes
memory > xa
memory > xuid_2
memory > xmmap
[] > test_os
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_fspath_protocol_bytes
        memory > xhandle_error
        memory > xtest_walk_symlink
        memory > xtest_mkdir
        memory > xtest_environb
        memory > xtest_remove_directory_link_to_missing_target
        memory > xtest_key_type
        memory > xtest_directory_link
        memory > xtest_iter_error_when_changing_os_environ_items
        memory > xtest_chmod
        memory > xall_users
        memory > xtest_not_symlink
        memory > xtest_inheritable
        memory > xtest_kill_sigterm
        memory > xtest_12084
        memory > xtest_pathlike
        memory > xtest_spawnl_noargs
        memory > xtest_file_link
        memory > xSUPPORT_HEADERS_TRAILERS
        memory > xtest_rename
        memory > xtest_write_windows_console
        memory > xtest_iter_error_when_changing_os_environ
        memory > xtest_copy_file_range_invalid_values
        memory > xfilelinkb
        memory > xtest_spawnv
        memory > xtest_walk_many_open_files
        memory > xtest_listdir_extended_path
        memory > xtest_dup_standard_stream
        memory > xtest_remove_partial
        memory > xtest_bytes
        memory > xtest_os_all
        memory > xhandle_close
        memory > xtest_return_string
        memory > xtest_waitpid_exitcode
        memory > xtest_listdir
        memory > xtest_link
        memory > xtest_get_exec_path
        memory > xtest_link_bytes
        memory > xtest_spawnv_noargs
        memory > xtest_setgid
        memory > xtest_setuid
        memory > xtest_spawnve_noargs
        memory > xtest_flags
        memory > xtest_getrandom_type
        memory > xtest_path_t_converter_and_custom_class
        memory > xtest_compare_to_walk
        memory > xUSING_LINUXTHREADS
        memory > xtest_getfinalpathname_handles
        memory > xtest_remove_all
        memory > xtest___repr__
        memory > xfwalk
        memory > xtest_removed_dir
        memory > xtest_setreuid
        memory > xtest_1686475
        memory > xtest_keyvalue_types
        memory > xtest_spawnvp
        memory > xtest_iter_error_when_changing_os_environ_values
        memory > xtest_trailers_overflow_32bits
        memory > xtest_urandom_subprocess
        memory > xtest_get_inheritable_cloexec
        memory > xtest_spawnve_bytes
        memory > xtest_execvpe_with_bad_arglist
        memory > xtest_memfd_create
        memory > xINT_MAX
        memory > xtest_fsencode_fsdecode
        memory > xtest_chown_without_permission
        memory > xtest_chown_uid_gid_arguments_must_be_index
        memory > xtest_access
        memory > xtest_lseek
        memory > x_test_link
        memory > xcheck_stat_attributes
        memory > x_reference
        memory > xtest_stty_match
        memory > xtest_close
        memory > xtest_unicode_name
        memory > xtest_dup
        memory > xtest_urandom_length
        memory > xtest_getcwd_long_path
        memory > xdirlink
        memory > xtest_execve_invalid_env
        memory > xrequires_headers_trailers
        memory > xtest_unlink_removes_junction
        memory > xtest_urandom_fd_closed
        memory > xtest_bad_path_type
        memory > xjunction_target
        memory > xtest_15261
        memory > xtest_copy_file_range_offset
        memory > xtest_CTRL_BREAK_EVENT
        memory > xtest_simple
        memory > xtest_getrandom0
        memory > xtest_utime_by_indexed
        memory > xtest_dup2
        memory > xtest_offset_overflow
        memory > xtest_spawnl
        memory > xtest_set_inheritable_cloexec
        memory > xcreate_file_entry
        memory > xtest_pipe
        memory > xcheck
        memory > xtest_stat_result_pickle
        memory > xtest_context_manager_close
        memory > xtest_urandom_fd_reopened
        memory > xtest_large_time
        memory > xtest_getrandom_nonblock
        memory > xfilelinkb_target
        memory > xtest_execve_with_empty_path
        memory > xtest_chown_with_root
        memory > xtest_keywords
        memory > xtest_fspath_protocol
        memory > xtest_utime
        memory > xjunction
        memory > xtest_stat_block_device
        memory > xtest_spawnle
        memory > xtest_removed_file
        memory > x_check_xattrs_str
        memory > xtest_repr
        memory > xtest_waitpid_windows
        memory > xfspath
        memory > xtest_copy_file_range
        memory > xtest_fd
        memory > xtest_cpu_count
        memory > xHAVE_WHEEL_GROUP
        memory > xtest_exist_ok_existing_regular_file
        memory > xcheck_waitpid
        memory > xtest_garbage_in_exception_out
        memory > xstop
        memory > xtest_fpathconf
        memory > x_test_internal_execvpe
        memory > xdirlink_target
        memory > xtest_write
        memory > xrequires_os_func
        memory > xtest_isatty
        memory > xtest_update2
        memory > xtest_chdir
        memory > xtest_isdir_on_directory_link_to_missing_target
        memory > xtearDownClass
        memory > xtest_headers_overflow_32bits
        memory > xtest_fd_leak
        memory > xtest_devnull
        memory > xtest_rmdir_on_directory_link_to_missing_target
        memory > x_test_environ_iteration
        memory > xtest_makedir
        memory > xtest_utime_dir_fd
        memory > xns_to_sec
        memory > xtest_send_at_certain_offset
        memory > xstart
        memory > xsetUp
        memory > xtest_remove
        memory > xassertPathEqual
        memory > x_kill_with_event
        memory > xtest_getcwdb
        memory > xtest_getrandom_random
        memory > xtest_issue31577
        memory > xtest_times
        memory > xsetUpClass
        memory > xtest_mode
        memory > xcreate_args
        memory > xfunctions
        memory > xtest_getcwd
        memory > xtest_broken_symlink
        memory > xtest_utime_invalid_arguments
        memory > xGID_OVERFLOW
        memory > xtest_buffer_overflow
        memory > xtest_fdopen
        memory > xtest_missing_link
        memory > xtest_internal_execvpe_str
        memory > xtest_open
        memory > xcheck_file_attributes
        memory > xtest_urandom_failure
        memory > xtest_walk_bad_dir
        memory > xfdopen_helper
        memory > xtest_pathlike_bytes
        memory > x_compare_to_walk
        memory > xtest_utime_current
        memory > xsupport_subsecond
        memory > xtest_spawnvpe
        memory > xtest_closerange
        memory > xsendfile_wrapper
        memory > xtest_listdir_no_extended_path
        memory > xsupports_extended_attributes
        memory > xwritable
        memory > xtest_stat
        memory > xOS_URANDOM_DONT_USE_FD
        memory > xtest_replace
        memory > xtest_directory_link_nonlocal
        memory > xtest_remove_nothing
        memory > xtest_waitpid
        memory > xfilelink_target
        memory > xtest_walk_bottom_up
        memory > xtest_bad_fd
        memory > xcheck_stat
        memory > xtest_getrandom_value
        memory > xfcntl
        memory > xPY_SSIZE_T_MAX
        memory > xtest_nop
        memory > x_test_invalid_env
        memory > x_test_utime_current
        memory > xget_urandom_subprocess
        memory > xhandle_read
        memory > xwrite_windows_console
        memory > xtest_seteuid
        memory > xtest_ftruncate
        memory > xtest_open_keywords
        memory > xget_entries
        memory > xcreate_file
        memory > xtest_headers
        memory > xtest_spawnve
        memory > xtest_exist_ok_existing_directory
        memory > xtest_pathlike_subclasshook
        memory > xtest_stat_attributes
        memory > xtest_fchmod
        memory > xget_file_system
        memory > xtest_setregid
        memory > xtest_setegid
        memory > xtest_execvpe_with_bad_program
        memory > xtest_create_junction
        memory > xhandle_connect
        memory > xtest_symlink_keywords
        memory > xrunning
        memory > x_create_missing_dir_link
        memory > x_kill
        memory > xtest_setregid_neg1
        memory > xtest_stat_attributes_bytes
        memory > xtest_kill_int
        memory > xrun
        memory > xwalk
        memory > xtest_yields_correct_dir_fd
        memory > xtest_identity
        memory > xtest_openpty
        memory > xassert_stat_equal
        memory > xtest_bytes_like
        memory > xfilelink
        memory > xtest_CTRL_C_EVENT
        memory > xtest_unset_error
        memory > xtest_get_set_inheritable_badf
        memory > xtest_utime_by_times
        memory > xresource
        memory > xtest_getlogin
        memory > xtest_context_manager
        memory > xtest_readv
        memory > xtest_lpath
        memory > xtest_dup_nul
        memory > x__init__
        memory > xtest_getppid
        memory > xtest_walk_prune
        memory > xtest_chown_gid
        memory > xtest_nowait
        memory > xtest_oserror_filename
        memory > xtest_29248
        memory > xtest_utime_current_old
        memory > xtest_dir_fd
        memory > xtest_walk_topdown
        memory > xrequires_32b
        memory > xtest_device_encoding
        memory > xtest_execv_with_bad_arglist
        memory > xtest_invalid_offset
        memory > x_winapi
        memory > x_check_xattrs
        memory > xtest_utime_directory
        memory > xtest_statvfs_result_pickle
        memory > xtest_os_popen_iter
        memory > xtest_tcsetpgrpt
        memory > x_execvpe_mockup
        memory > x_test_utime
        memory > xget_entry
        memory > xtest_send_whole_file
        memory > xtest_read
        memory > xtest_spawnlp
        memory > xtest_fchown
        memory > xtest_utime_fd
        memory > xget_single
        memory > xtest_access_denied
        memory > xtest_appexeclink
        memory > xtest_spawnve_invalid_env
        memory > xtest_resource_warning
        memory > xtest_bad_pathlike
        memory > xwait
        memory > xget_data
        memory > xUID_OVERFLOW
        memory > xtest_spawnvpe_invalid_env
        memory > xtest_spawnlpe
        memory > xmissing_link
        memory > xDATA
        memory > xtest_attributes
        memory > xtest_return_bytes
        memory > xtest_utime_nofollow_symlinks
        memory > xtest_set_get_priority
        memory > xroot_in_posix
        memory > xtype2test
        memory > xtest_empty_path
        memory > xcheck_entry
        memory > xtest_context_manager_exception
        memory > xtest_writev
        memory > xtest_large_read
        memory > xtearDown
        memory > xtest_spawnle_noargs
        memory > xtest_exist_ok_s_isgid_directory
        memory > x_empty_mapping
        memory > xtest_path_t_converter
        memory > xtest_does_not_crash
        memory > xtest_statvfs_attributes
        memory > xtest_file_attributes
        memory > xtest_current_directory
        memory > xtest_fds
        memory > xtest_get_set_inheritable_o_path
        memory > xtest_file_like_path
        memory > xtest_argument_required
        memory > xtest_items
        memory > xtest_get_set_inheritable
        memory > xtest_trailers
        memory > xtest_statvfs
        memory > xtest_setreuid_neg1
        memory > xhandle_accept
        memory > xtest_blocking
        memory > xtest_consume_iterator_twice
        memory > xcheck_no_resource_warning
        memory > xtest_urandom_value
        memory > xsingles
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xresource.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xfcntl.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_winapi.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((((unsupported)) ((xImportError)) ((xAttributeError)))))
              seq
                (((unsupported)) 0)
                xall_users.write (((unsupported)) (((xu).xpw_uid)) ((xu)) (((((xpwd).xgetpwall)) 0)))
              xall_users.write (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((xINT_MAX)) ((xPY_SSIZE_T_MAX)) (((xsys).xmaxsize)))
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            xroot_in_posix.write FALSE
            (((xhasattr)) ((xos)) ("geteuid")).if
              xroot_in_posix.write (((((xos).xgeteuid)) 0).eq 0)
            ((((xhasattr)) ((xsys)) ("thread_info")).and (((xsys).xthread_info).xversion)).if
              xUSING_LINUXTHREADS.write ((((((xsys).xthread_info).xversion).xstartswith)) ("linuxthreads"))
              xUSING_LINUXTHREADS.write FALSE
            xHAVE_WHEEL_GROUP.write ((((((xsys).xplatform).xstartswith)) ("freebsd")).and (((((xos).xgetgid)) 0).eq 0))
            xrequires_os_func.write
              [xname]
                seq > @
                  (((unsupported)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ((xname)))) (("requires os.%s".mod (xname))))))
            xcreate_file.write
              [xfilename xcontent]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((xopen)) ((xfilename)) ("xb") (0))) ((xfp)))
                      bogusForceDataize.write ((((xfp).xwrite)) ((xcontent)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_getcwd.write
                  [xself]
                    memory > xcwd
                    seq > @
                      seq
                        xcwd.write ((((xos).xgetcwd)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcwd)) ((xstr)))
                xtest_getcwd_long_path.write
                  [xself]
                    memory > xexpected
                    memory > xmin_len
                    memory > xcwd
                    memory > xpath
                    memory > xneed
                    memory > xdirname
                    memory > xdirlen
                    seq > @
                      seq
                        xmin_len.write 2000
                        xdirlen.write 200
                        xdirname.write "python_test_dir_"
                        xdirname.write ((xdirname).add ("a".mul ((xdirlen).sub (((xlen)) ((xdirname))))))
                        (((unsupported)) (((((xtempfile).xTemporaryDirectory)) 0)) ((xtmpdir)))
                          (((unsupported)) (((((xsupport).xchange_cwd)) ((xtmpdir)))) ((xpath)))
                            seq
                              xexpected.write (xpath)
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    seq
                                      xcwd.write ((((xos).xgetcwd)) 0)
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((xcwd)) ((xexpected)))
                                      xneed.write ((xmin_len).sub ((((xlen)) ((xcwd))).add (((xlen)) ((((xos).xpath).xsep)))))
                                      ((xneed).leq 0).if
                                        (((unsupported)) 0)
                                      (((((xlen)) ((xdirname))).greater (xneed)).and ((xneed).greater 0)).if
                                        xdirname.write (((unsupported)) ((xdirname)) ((((unsupported)) ((xneed)))))
                                      xpath.write (((((xos).xpath).xjoin)) ((xpath)) ((xdirname)))
                                      (((unsupported)) ((xFileNotFoundError)) ((xOSError)))
                                        seq
                                          bogusForceDataize.write ((((xos).xmkdir)) ((xpath)))
                                          bogusForceDataize.write ((((xos).xchdir)) ((xpath)))
                                        (((unsupported)) 0)
                                        (((xexc).xerrno).eq ((xerrno).xENAMETOOLONG)).if
                                          (((unsupported)) 0)
                                          (((unsupported)) 0)
                                      xexpected.write (xpath)
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((xprint)) ("Tested current directory length: {len(cwd)}"))
                xtest_getcwdb.write
                  [xself]
                    memory > xcwd
                    seq > @
                      seq
                        xcwd.write ((((xos).xgetcwdb)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcwd)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfsdecode)) ((xcwd)))) (((((xos).xgetcwd)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((((xos).xpath).xlexists)) (((xsupport).xTESTFN))).if
                        bogusForceDataize.write ((((xos).xunlink)) (((xsupport).xTESTFN)))
                xtearDown.write (xsetUp)
                xtest_access.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_CREAT).or ((xos).xO_RDWR))))
                        bogusForceDataize.write ((((xos).xclose)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xos).xaccess)) (((xsupport).xTESTFN)) (((xos).xW_OK)))))
                xtest_closerange.write
                  [xself]
                    memory > xretries
                    memory > xfirst
                    memory > xsecond
                    seq > @
                      seq
                        xfirst.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_CREAT).or ((xos).xO_RDWR))))
                        xsecond.write ((((xos).xdup)) ((xfirst)))
                        (((unsupported)) 0)
                          seq
                            xretries.write 0
                            while.
                              ((xsecond).neq ((xfirst).add 1))
                              [unused]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xos).xclose)) ((xfirst)))
                                    (((unsupported)) ((xretries)) (1))
                                    ((xretries).greater 10).if
                                      bogusForceDataize.write ((((xself).xskipTest)) ("couldn't allocate two consecutive fds"))
                                    (((unsupported)) ((((unsupported)) ((xfirst)) ((xsecond)))) ((((unsupported)) ((xsecond)) (((((xos).xdup)) ((xsecond)))))))
                          bogusForceDataize.write ((((xos).xclose)) ((xsecond)))
                        bogusForceDataize.write ((((xos).xcloserange)) ((xfirst)) (((xfirst).add 2)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xwrite)) ((xfirst)) ("a"))
                xtest_rename.write
                  [xself]
                    memory > xpath
                    memory > xnew
                    memory > xold
                    seq > @
                      (((unsupported)) 0)
                        xpath.write ((xsupport).xTESTFN)
                        xold.write ((((xsys).xgetrefcount)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xrename)) ((xpath)) (0))
                        xnew.write ((((xsys).xgetrefcount)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xold)) ((xnew)))
                xtest_read.write
                  [xself]
                    memory > xs
                    memory > xfd
                    seq > @
                      (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("w+b"))) ((xfobj)))
                        seq
                          bogusForceDataize.write ((((xfobj).xwrite)) ("spam"))
                          bogusForceDataize.write ((((xfobj).xflush)) 0)
                          xfd.write ((((xfobj).xfileno)) 0)
                          bogusForceDataize.write ((((xos).xlseek)) ((xfd)) (0) (0))
                          xs.write ((((xos).xread)) ((xfd)) (4))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xs)))) ((xbytes)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ("spam"))
                xtest_large_read.write
                  [xself xsize]
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) ("test"))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfp)))
                          xdata.write ((((xos).xread)) (((((xfp).xfileno)) 0)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("test"))
                xtest_write.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_CREAT).or ((xos).xO_WRONLY))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xwrite)) ((xfd)) ("beans"))
                        bogusForceDataize.write ((((xos).xwrite)) ((xfd)) ("baconn"))
                        bogusForceDataize.write ((((xos).xwrite)) ((xfd)) ((((xbytearray)) ("eggsn"))))
                        bogusForceDataize.write ((((xos).xwrite)) ((xfd)) ((((xmemoryview)) ("spamn"))))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfobj)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xfobj).xread)) 0).xsplitlines)) 0)) ((((unsupported)) ("bacon") ("eggs") ("spam"))))
                xwrite_windows_console.write
                  [xself]
                    memory > xretcode
                    seq > @
                      (((unsupported)) 0)
                        xretcode.write (((unsupported)) (((xsubprocess).xcall)) ((xargs)) (((xsubprocess).xCREATE_NEW_CONSOLE)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xretcode)) (0))
                xtest_write_windows_console.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write "print('x' * 100000)"
                        bogusForceDataize.write ((((xself).xwrite_windows_console)) (((xsys).xexecutable)) ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xwrite_windows_console)) (((xsys).xexecutable)) ("-u") ("-c") ((xcode)))
                xfdopen_helper.write
                  [xself]
                    memory > xfd
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xf.write ((((xos).xfdopen)) ((xfd)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_fdopen.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_CREAT).or ((xos).xO_RDWR))))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xfdopen_helper)) 0)
                        bogusForceDataize.write ((((xself).xfdopen_helper)) ("r"))
                        bogusForceDataize.write ((((xself).xfdopen_helper)) ("r") (100))
                xtest_replace.write
                  [xself]
                    memory > xTESTFN2
                    seq > @
                      seq
                        xTESTFN2.write (((xsupport).xTESTFN).add ".2")
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN2)))
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) ("1"))
                        bogusForceDataize.write (((xcreate_file)) ((xTESTFN2)) ("2"))
                        bogusForceDataize.write ((((xos).xreplace)) (((xsupport).xTESTFN)) ((xTESTFN2)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xos).xstat)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((((xopen)) ((xTESTFN2)) ("r"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("1"))
                xtest_open_keywords.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)) (((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)) (511) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xos).xclose)) ((xf)))
                xtest_symlink_keywords.write
                  [xself]
                    memory > xsymlink
                    seq > @
                      seq
                        xsymlink.write ((((xsupport).xget_attribute)) ((xos)) ("symlink"))
                        (((unsupported)) ((((unsupported)) ((xNotImplementedError)) ((xOSError)))))
                          (((unsupported)) ((xsymlink)) ("target") (((xsupport).xTESTFN)) (FALSE) ("None: is there a None literal in the EO language?"))
                xtest_copy_file_range_invalid_values.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xos).xcopy_file_range)) (0) (1) ((10.neg)))
                xtest_copy_file_range.write
                  [xself]
                    memory > xin_fd
                    memory > xTESTFN2
                    memory > xi
                    memory > xout_fd
                    memory > xin_file
                    memory > xout_file
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xTESTFN2.write (((xsupport).xTESTFN).add ".3")
                        xdata.write "0123456789"
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) ((xdata)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        xin_file.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xin_file).xclose)))
                        xin_fd.write ((((xin_file).xfileno)) 0)
                        xout_file.write (((xopen)) ((xTESTFN2)) ("w+b"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN2)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xout_file).xclose)))
                        xout_fd.write ((((xout_file).xfileno)) 0)
                        (((unsupported)) ((xOSError)))
                          xi.write ((((xos).xcopy_file_range)) ((xin_fd)) ((xout_fd)) (5))
                          seq
                            (((xe).xerrno).neq ((xerrno).xENOSYS)).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xskipTest)) ((xe)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)) ((xi)) ((((xrange)) (0) (6))))
                            (((unsupported)) ((((xopen)) ((xTESTFN2)) ("rb"))) ((xin_file)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xin_file).xread)) 0)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)))))))
                xtest_copy_file_range_offset.write
                  [xself]
                    memory > xin_fd
                    memory > xTESTFN4
                    memory > xout_seek
                    memory > xbytes_to_copy
                    memory > xin_skip
                    memory > xi
                    memory > xout_fd
                    memory > xread
                    memory > xin_file
                    memory > xout_file
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xTESTFN4.write (((xsupport).xTESTFN).add ".4")
                        xdata.write "0123456789"
                        xbytes_to_copy.write 6
                        xin_skip.write 3
                        xout_seek.write 5
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) ((xdata)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        xin_file.write (((xopen)) (((xsupport).xTESTFN)) ("rb"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xin_file).xclose)))
                        xin_fd.write ((((xin_file).xfileno)) 0)
                        xout_file.write (((xopen)) ((xTESTFN4)) ("w+b"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN4)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xout_file).xclose)))
                        xout_fd.write ((((xout_file).xfileno)) 0)
                        (((unsupported)) ((xOSError)))
                          xi.write (((unsupported)) (((xos).xcopy_file_range)) ((xin_fd)) ((xout_fd)) ((xbytes_to_copy)) ((xin_skip)) ((xout_seek)))
                          seq
                            (((xe).xerrno).neq ((xerrno).xENOSYS)).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xskipTest)) ((xe)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)) ((xi)) ((((xrange)) (0) (((xbytes_to_copy).add 1)))))
                            (((unsupported)) ((((xopen)) ((xTESTFN4)) ("rb"))) ((xin_file)))
                              xread.write ((((xin_file).xread)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xread)) ((((unsupported)) ((xout_seek)))))) (("x00".mul (xout_seek))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xread)) ((((unsupported)) ((xout_seek)))))) ((((unsupported)) ((xdata)) ((((unsupported)) ((xin_skip)) (((xin_skip).add (xi))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xfname)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xself).xfname)))
                        bogusForceDataize.write (((xcreate_file)) (((xself).xfname)) ("ABC"))
                xcheck_stat_attributes.write
                  [xself xfname]
                    memory > xtrunc
                    memory > xnanosecondy
                    memory > xmembers
                    memory > xresult2
                    memory > xattr
                    memory > xresult
                    memory > xfloaty
                    seq > @
                      seq
                        xresult.write ((((xos).xstat)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xresult)) (((xstat).xST_SIZE)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xst_size)) (3))
                        xmembers.write (((xdir)) ((xresult)))
                        (((unsupported)) ((xname)) ((((xdir)) ((xstat)))))
                          ((((unsupported)) ((xname)) ((((unsupported)) (3)))).eq "ST_").if
                            seq
                              xattr.write ((((xname).xlower)) 0)
                              ((((xname).xendswith)) ("TIME")).if
                                xtrunc.write
                                  [xx]
                                    seq > @
                                      (((unsupported)) ((((xint)) ((xx)))))
                                xtrunc.write
                                  [xx]
                                    seq > @
                                      (((unsupported)) ((xx)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xtrunc)) ((((xgetattr)) ((xresult)) ((xattr)))))) ((((unsupported)) ((xresult)) ((((xgetattr)) ((xstat)) ((xname)))))))
                              bogusForceDataize.write ((((xself).xassertIn)) ((xattr)) ((xmembers)))
                        (((unsupported)) ((xname)) (((("st_atime st_mtime st_ctime".xsplit)) 0)))
                          seq
                            xfloaty.write (((xint)) (((((xgetattr)) ((xresult)) ((xname))).mul 100000)))
                            xnanosecondy.write (((unsupported)) ((((xgetattr)) ((xresult)) (((xname).add "_ns")))) (10000))
                            (((unsupported)) (((xself).xassertAlmostEqual)) ((xfloaty)) ((xnanosecondy)) (2))
                        (((unsupported)) ((xIndexError)))
                          seq
                            (((unsupported)) ((xresult)) (200))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xAttributeError)))
                          seq
                            (((unsupported)) (((xresult).xst_mode)) (1))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xTypeError)))))
                          seq
                            (((unsupported)) (((xresult).xst_rdev)) (1))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xAttributeError)))
                          seq
                            (((unsupported)) (((xresult).xparrot)) (1))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xTypeError)))
                          seq
                            xresult2.write ((((xos).xstat_result)) ((((unsupported)) (10))))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xTypeError)))
                          xresult2.write ((((xos).xstat_result)) ((((unsupported)) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14))))
                xtest_stat_attributes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stat_attributes)) (((xself).xfname)))
                xtest_stat_attributes_bytes.write
                  [xself]
                    memory > xfname
                    seq > @
                      seq
                        (((unsupported)) ((xUnicodeEncodeError)))
                          xfname.write (((((xself).xfname).xencode)) (((((xsys).xgetfilesystemencoding)) 0)))
                          bogusForceDataize.write ((((xself).xskipTest)) (("cannot encode %a for the filesystem".mod ((xself).xfname))))
                        bogusForceDataize.write ((((xself).xcheck_stat_attributes)) ((xfname)))
                xtest_stat_result_pickle.write
                  [xself]
                    memory > xresult
                    memory > xp
                    memory > xunpickled
                    seq > @
                      seq
                        xresult.write ((((xos).xstat)) (((xself).xfname)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xp.write ((((xpickle).xdumps)) ((xresult)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertIn)) ("stat_result") ((xp)))
                            ((xproto).less 4).if
                              bogusForceDataize.write ((((xself).xassertIn)) ("cosnstat_resultn") ((xp)))
                            xunpickled.write ((((xpickle).xloads)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xunpickled)))
                xtest_statvfs_attributes.write
                  [xself]
                    memory > xmembers
                    memory > xresult2
                    memory > xresult
                    seq > @
                      (((unsupported)) 0)
                        xresult.write ((((xos).xstatvfs)) (((xself).xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xf_bfree)) ((((unsupported)) ((xresult)) (3))))
                        xmembers.write (((unsupported)) ("bsize") ("frsize") ("blocks") ("bfree") ("bavail") ("files") ("ffree") ("favail") ("flag") ("namemax"))
                        (((unsupported)) ((((unsupported)) ((xvalue)) ((xmember)))) ((((xenumerate)) ((xmembers)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xresult)) (("f_".add (xmember))))) ((((unsupported)) ((xresult)) ((xvalue)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) (((xresult).xf_fsid)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) (10))
                        (((unsupported)) ((xAttributeError)))
                          seq
                            (((unsupported)) (((xresult).xf_bfree)) (1))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xAttributeError)))
                          seq
                            (((unsupported)) (((xresult).xparrot)) (1))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xTypeError)))
                          seq
                            xresult2.write ((((xos).xstatvfs_result)) ((((unsupported)) (10))))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised"))
                        (((unsupported)) ((xTypeError)))
                          xresult2.write ((((xos).xstatvfs_result)) ((((unsupported)) (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14))))
                xtest_statvfs_result_pickle.write
                  [xself]
                    memory > xresult
                    memory > xp
                    memory > xunpickled
                    seq > @
                      (((unsupported)) 0)
                        xresult.write ((((xos).xstatvfs)) (((xself).xfname)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xp.write ((((xpickle).xdumps)) ((xresult)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertIn)) ("statvfs_result") ((xp)))
                            ((xproto).less 4).if
                              bogusForceDataize.write ((((xself).xassertIn)) ("cosnstatvfs_resultn") ((xp)))
                            xunpickled.write ((((xpickle).xloads)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xunpickled)))
                xtest_1686475.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xFileNotFoundError)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xstat)) ("c:pagefile.sys"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("c:pagefile.sys does not exist"))
                          bogusForceDataize.write ((((xself).xfail)) ("Could not stat pagefile.sys"))
                xtest_15261.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xos).xstat)) ((xr)))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xctx)))
                          bogusForceDataize.write ((((xos).xstat)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xctx).xexception).xerrno)) (((xerrno).xEBADF)))
                xcheck_file_attributes.write
                  [xself xresult]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xresult)) ("st_file_attributes"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) (((xresult).xst_file_attributes)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (0) (((xresult).xst_file_attributes)) ((((unsupported)) 0)))))
                xtest_file_attributes.write
                  [xself]
                    memory > xresult
                    memory > xdirname
                    seq > @
                      (((unsupported)) 0)
                        xresult.write ((((xos).xstat)) (((xself).xfname)))
                        bogusForceDataize.write ((((xself).xcheck_file_attributes)) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xresult).xst_file_attributes).and ((xstat).xFILE_ATTRIBUTE_DIRECTORY))) (0))
                        xdirname.write (((xsupport).xTESTFN).add "dir")
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xrmdir)) ((xdirname)))
                        xresult.write ((((xos).xstat)) ((xdirname)))
                        bogusForceDataize.write ((((xself).xcheck_file_attributes)) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xresult).xst_file_attributes).and ((xstat).xFILE_ATTRIBUTE_DIRECTORY))) (((xstat).xFILE_ATTRIBUTE_DIRECTORY)))
                xtest_access_denied.write
                  [xself]
                    memory > xresult
                    memory > xDETACHED_PROCESS
                    memory > xfname
                    seq > @
                      (((unsupported)) 0)
                        xfname.write (((((xos).xpath).xjoin)) ((((unsupported)) (((xos).xenviron)) ("TEMP"))) (((xself).xfname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfname)))
                        bogusForceDataize.write (((xcreate_file)) ((xfname)) ("ABC"))
                        xDETACHED_PROCESS.write 8
                        (((unsupported)) (((xsubprocess).xcheck_call)) ((((unsupported)) ("icacls.exe") ((xfname)) ("/deny") ("*S-1-5-32-545:(S)"))) ((xDETACHED_PROCESS)))
                        xresult.write ((((xos).xstat)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xresult).xst_size)) (0))
                xtest_stat_block_device.write
                  [xself]
                    memory > xresult
                    memory > xfname
                    seq > @
                      (((unsupported)) 0)
                        xfname.write ("//./".add (((unsupported)) ((((((xos).xpath).xsplitdrive)) (((((xos).xgetcwd)) 0)))) (0)))
                        xresult.write ((((xos).xstat)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xresult).xst_mode)) (((xstat).xS_IFBLK)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdirname)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((xself).xfname)) ((((((xos).xpath).xjoin)) (((xself).xdirname)) ("f1"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) (((xself).xdirname)))
                        bogusForceDataize.write ((((xos).xmkdir)) (((xself).xdirname)))
                        bogusForceDataize.write (((xcreate_file)) (((xself).xfname)))
                xsupport_subsecond.write
                  [xself xfilename]
                    memory > xst
                    seq > @
                      seq
                        xst.write ((((xos).xstat)) ((xfilename)))
                        (((unsupported)) ((((((xst).xst_atime).neq (((unsupported)) ((xst)) (7))).or (((xst).xst_mtime).neq (((unsupported)) ((xst)) (8)))).or (((xst).xst_ctime).neq (((unsupported)) ((xst)) (9))))))
                x_test_utime.write
                  [xself xset_time xfilename]
                    memory > xst
                    memory > xsupport_subsecond
                    memory > xatime_ns
                    memory > xmtime_ns
                    seq > @
                      (((unsupported)) 0)
                        ((xfilename).not).if
                          xfilename.write ((xself).xfname)
                        xsupport_subsecond.write ((((xself).xsupport_subsecond)) ((xfilename)))
                        (xsupport_subsecond).if
                          seq
                            xatime_ns.write 1002003000
                            xmtime_ns.write (((unsupported)) 0)
                          seq
                            xatime_ns.write (5.mul (((unsupported)) (10) (9)))
                            xmtime_ns.write (8.mul (((unsupported)) (10) (9)))
                        bogusForceDataize.write (((xset_time)) ((xfilename)) ((((unsupported)) ((xatime_ns)) ((xmtime_ns)))))
                        xst.write ((((xos).xstat)) ((xfilename)))
                        (xsupport_subsecond).if
                          seq
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((xst).xst_atime)) (((xatime_ns).mul (((unsupported)) 0))) ((((unsupported)) 0)))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((xst).xst_mtime)) (((xmtime_ns).mul (((unsupported)) 0))) ((((unsupported)) 0)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xst).xst_atime)) (((xatime_ns).mul (((unsupported)) 0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xst).xst_mtime)) (((xmtime_ns).mul (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst).xst_atime_ns)) ((xatime_ns)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst).xst_mtime_ns)) ((xmtime_ns)))
                xtest_utime.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename xns]
                            seq > @
                              (((unsupported)) (((xos).xutime)) ((xfilename)) ((xns)))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xns_to_sec.write
                  [xns]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xns).mul (((unsupported)) 0)).add (((unsupported)) 0))))
                xtest_utime_by_indexed.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename xns]
                            memory > xatime
                            memory > xmtime
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xatime_ns)) ((xmtime_ns)))) ((xns)))
                                xatime.write ((((xself).xns_to_sec)) ((xatime_ns)))
                                xmtime.write ((((xself).xns_to_sec)) ((xmtime_ns)))
                                bogusForceDataize.write ((((xos).xutime)) ((xfilename)) ((((unsupported)) ((xatime)) ((xmtime)))))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xtest_utime_by_times.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename xns]
                            memory > xatime
                            memory > xmtime
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xatime_ns)) ((xmtime_ns)))) ((xns)))
                                xatime.write ((((xself).xns_to_sec)) ((xatime_ns)))
                                xmtime.write ((((xself).xns_to_sec)) ((xmtime_ns)))
                                (((unsupported)) (((xos).xutime)) ((xfilename)) ((((unsupported)) ((xatime)) ((xmtime)))))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xtest_utime_nofollow_symlinks.write
                  [xself]
                    memory > xset_time
                    seq > @
                      (((unsupported)) 0)
                        xset_time.write
                          [xfilename xns]
                            seq > @
                              (((unsupported)) (((xos).xutime)) ((xfilename)) ((xns)) (FALSE))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xtest_utime_fd.write
                  [xself]
                    memory > xset_time
                    seq > @
                      (((unsupported)) 0)
                        xset_time.write
                          [xfilename xns]
                            seq > @
                              (((unsupported)) ((((xopen)) ((xfilename)) ("wb") (0))) ((xfp)))
                                (((unsupported)) (((xos).xutime)) (((((xfp).xfileno)) 0)) ((xns)))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xtest_utime_dir_fd.write
                  [xself]
                    memory > xset_time
                    seq > @
                      (((unsupported)) 0)
                        xset_time.write
                          [xfilename xns]
                            memory > xdirfd
                            seq > @
                              seq
                                (((unsupported)) ((((unsupported)) ((xdirname)) ((xname)))) ((((((xos).xpath).xsplit)) ((xfilename)))))
                                xdirfd.write ((((xos).xopen)) ((xdirname)) (((xos).xO_RDONLY)))
                                (((unsupported)) 0)
                                  (((unsupported)) (((xos).xutime)) ((xname)) ((xdirfd)) ((xns)))
                                  bogusForceDataize.write ((((xos).xclose)) ((xdirfd)))
                        bogusForceDataize.write ((((xself).x_test_utime)) ((xset_time)))
                xtest_utime_directory.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename xns]
                            seq > @
                              (((unsupported)) (((xos).xutime)) ((xfilename)) ((xns)))
                        (((unsupported)) (((xself).x_test_utime)) ((xset_time)) (((xself).xdirname)))
                x_test_utime_current.write
                  [xself xset_time]
                    memory > xst
                    memory > xdelta
                    memory > xmsg
                    memory > xcurrent
                    seq > @
                      seq
                        xcurrent.write ((((xtime).xtime)) 0)
                        bogusForceDataize.write (((xset_time)) (((xself).xfname)))
                        (((((xself).xsupport_subsecond)) (((xself).xfname))).not).if
                          xdelta.write 1.0
                          xdelta.write 0.050
                        xst.write ((((xos).xstat)) (((xself).xfname)))
                        xmsg.write ("st_time=%r, current=%r, dt=%r".mod (((unsupported)) (((xst).xst_mtime)) ((xcurrent)) ((((xst).xst_mtime).sub (xcurrent)))))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((xst).xst_mtime)) ((xcurrent)) ((xdelta)) ((xmsg)))
                xtest_utime_current.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename]
                            seq > @
                              bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)))
                        bogusForceDataize.write ((((xself).x_test_utime_current)) ((xset_time)))
                xtest_utime_current_old.write
                  [xself]
                    memory > xset_time
                    seq > @
                      seq
                        xset_time.write
                          [xfilename]
                            seq > @
                              bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).x_test_utime_current)) ((xset_time)))
                xget_file_system.write
                  [xself xpath]
                    memory > xroot
                    memory > xkernel32
                    memory > xbuf
                    memory > xok
                    seq > @
                      (((xsys).xplatform).eq "win32").if
                        seq
                          xroot.write ((((unsupported)) ((((((xos).xpath).xsplitdrive)) ((((((xos).xpath).xabspath)) ((xpath)))))) (0)).add "\\")
                          (((unsupported)) 0)
                          xkernel32.write (((xctypes).xwindll).xkernel32)
                          xbuf.write ((((xctypes).xcreate_unicode_buffer)) ("") (100))
                          xok.write ((((xkernel32).xGetVolumeInformationW)) ((xroot)) ("None: is there a None literal in the EO language?") (0) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xbuf)) ((((xlen)) ((xbuf)))))
                          (xok).if
                            (((unsupported)) (((xbuf).xvalue)))
                xtest_large_time.write
                  [xself]
                    memory > xlarge
                    seq > @
                      seq
                        (((((xself).xget_file_system)) (((xself).xdirname))).neq "NTFS").if
                          bogusForceDataize.write ((((xself).xskipTest)) ("requires NTFS"))
                        xlarge.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)) ((((unsupported)) ((xlarge)) ((xlarge)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xstat)) (((xself).xfname))).xst_mtime)) ((xlarge)))
                xtest_utime_invalid_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5))) ((((unsupported)) (5) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5) (5))))
                        (((unsupported)) (((xos).xutime)) (((xos).xsupports_follow_symlinks))).if
                          (((unsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                            (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5))) (FALSE))
                        (((unsupported)) (((xos).xutime)) (((xos).xsupports_fd))).if
                          (((unsupported)) ((((xopen)) (((xself).xfname)) ("wb") (0))) ((xfp)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              bogusForceDataize.write ((((xos).xutime)) (((((xfp).xfileno)) 0)) ((((unsupported)) (5) (5))))
                        (((unsupported)) (((xos).xutime)) (((xos).xsupports_dir_fd))).if
                          (((unsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                            (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) (5) (5))) (0))
                xtest_issue31577.write
                  [xself]
                    memory > xget_bad_int
                    seq > @
                      (((unsupported)) 0)
                        xget_bad_int.write
                          [xdivmod_ret_val]
                            memory > x__divmod__
                            seq > @
                              seq
                                (((unsupported)) 0)
                                  x__divmod__.write
                                    []
                                      seq > @
                                        (((unsupported)) 0)
                                          (((unsupported)) ((xdivmod_ret_val)))
                                (((unsupported)) ((((xBadInt)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) ((((xget_bad_int)) (42))) (1))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) ((((xget_bad_int)) ((((unsupported)) 0)))) (1))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xos).xutime)) (((xself).xfname)) ((((unsupported)) ((((xget_bad_int)) ((((unsupported)) (1) (2) (3))))) (1))))
            (((unsupported)) 0)
            (((unsupported)) (((xmapping_tests).xBasicTestMappingProtocol)))
              seq
                unsupported
                xtype2test.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x__save)) ((((xdict)) (((xos).xenviron)))))
                        ((xos).xsupports_bytes_environ).if
                          (((unsupported)) (((xself).x__saveb)) ((((xdict)) (((xos).xenvironb)))))
                        (((unsupported)) ((((unsupported)) ((xkey)) ((xvalue)))) ((((((((xself).x_reference)) 0).xitems)) 0)))
                          (((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xkey)))) ((xvalue)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                        bogusForceDataize.write (((((xos).xenviron).xupdate)) (((xself).x__save)))
                        ((xos).xsupports_bytes_environ).if
                          seq
                            bogusForceDataize.write (((((xos).xenvironb).xclear)) 0)
                            bogusForceDataize.write (((((xos).xenvironb).xupdate)) (((xself).x__saveb)))
                x_reference.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ("KEY1") ("VALUE1") ("KEY2") ("VALUE2") ("KEY3") ("VALUE3"))))
                x_empty_mapping.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                        (((unsupported)) (((xos).xenviron)))
                xtest_update2.write
                  [xself]
                    memory > xvalue
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                        (((unsupported)) ((((xos).xenviron).xupdate)) ("World"))
                        (((unsupported)) (((((xos).xpopen)) (("%s -c 'echo $HELLO'".mod (xunix_shell))))) ((xpopen)))
                          seq
                            xvalue.write (((((((xpopen).xread)) 0).xstrip)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xvalue)) ("World"))
                xtest_os_popen_iter.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xos).xpopen)) (("%s -c 'echo \"line1nline2nline3\"'".mod (xunix_shell))))) ((xpopen)))
                          seq
                            xit.write (((xiter)) ((xpopen)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ("line1n"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ("line2n"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ("line3n"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xit)))
                xtest_keyvalue_types.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xkey)) ((xval)))) ((((((xos).xenviron).xitems)) 0)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xkey)))) ((xstr)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xval)))) ((xstr)))
                xtest_items.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xkey)) ((xvalue)))) ((((((((xself).x_reference)) 0).xitems)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xenviron).xget)) ((xkey)))) ((xvalue)))
                xtest___repr__.write
                  [xself]
                    memory > xenv
                    seq > @
                      seq
                        unsupported
                        xenv.write ((xos).xenviron)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xenv)))) (((("environ({{{}}})".xformat)) ((((", ".xjoin)) ((((unsupported)) (((("{!r}: {!r}".xformat)) ((xkey)) ((xvalue)))) ((((unsupported)) ((xkey)) ((xvalue)))) (((((xenv).xitems)) 0)))))))))
                xtest_get_exec_path.write
                  [xself]
                    memory > xdefpath_list
                    memory > xmixed_env
                    memory > xtest_env
                    memory > xsaved_environ
                    memory > xtest_path
                    seq > @
                      seq
                        xdefpath_list.write (((((xos).xdefpath).xsplit)) (((xos).xpathsep)))
                        xtest_path.write (((unsupported)) ("/monty") ("/python") ("") ("/flying/circus"))
                        xtest_env.write (((unsupported)) ("PATH") ((((((xos).xpathsep).xjoin)) ((xtest_path)))))
                        xsaved_environ.write ((xos).xenviron)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xos).xenviron)) ((((xdict)) ((xtest_env)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xtest_path)) (((((xos).xget_exec_path)) 0)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xtest_path)) ((((unsupported)) (((xos).xget_exec_path)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)) (((xos).xenviron)) ((xsaved_environ)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xdefpath_list)) (((((xos).xget_exec_path)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) (""))) (((((xos).xget_exec_path)) ((((unsupported)) ("PATH") (""))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xtest_path)) (((((xos).xget_exec_path)) ((xtest_env)))))
                        ((xos).xsupports_bytes_environ).if
                          seq
                            (((unsupported)) ((xBytesWarning)))
                              (((unsupported)) ((((unsupported)) (((xwarnings).xcatch_warnings)) (TRUE))))
                                xmixed_env.write (((unsupported)) ("PATH") ("1") ("PATH") ("2"))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xget_exec_path)) ((xmixed_env)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) (((((xos).xget_exec_path)) ((((unsupported)) ("PATH") ("abc"))))) ((((unsupported)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) (((((xos).xget_exec_path)) ((((unsupported)) ("PATH") ("abc"))))) ((((unsupported)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) (((((xos).xget_exec_path)) ((((unsupported)) ("PATH") ("abc"))))) ((((unsupported)) ("abc"))))
                xtest_environb.write
                  [xself]
                    memory > xvalue
                    memory > xvalue_str
                    memory > xmsg
                    memory > xvalue_bytes
                    seq > @
                      (((unsupported)) 0)
                        xvalue.write "eurou20ac"
                        (((unsupported)) ((xUnicodeEncodeError)))
                          xvalue_bytes.write ((((xvalue).xencode)) (((((xsys).xgetfilesystemencoding)) 0)) ("surrogateescape"))
                          seq
                            xmsg.write ("U+20AC character is not encodable to %s".mod (((unsupported)) (((((xsys).xgetfilesystemencoding)) 0))))
                            bogusForceDataize.write ((((xself).xskipTest)) ((xmsg)))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("unicode"))) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xenviron)) ("unicode"))) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xenvironb)) ("unicode"))) ((xvalue_bytes)))
                        xvalue.write "xff"
                        (((unsupported)) ((((unsupported)) (((xos).xenvironb)) ("bytes"))) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xenvironb)) ("bytes"))) ((xvalue)))
                        xvalue_str.write ((((xvalue).xdecode)) (((((xsys).xgetfilesystemencoding)) 0)) ("surrogateescape"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xenviron)) ("bytes"))) ((xvalue_str)))
                xtest_unset_error.write
                  [xself]
                    memory > xkey
                    seq > @
                      (((unsupported)) 0)
                        (((xsys).xplatform).eq "win32").if
                          seq
                            xkey.write ("x".mul 50000)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xos).xenviron).x__delitem__)) ((xkey)))
                          seq
                            xkey.write "key="
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) ((((xos).xenviron).x__delitem__)) ((xkey)))
                xtest_key_type.write
                  [xself]
                    memory > xmissing
                    seq > @
                      seq
                        xmissing.write "missingkey"
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xmissing)) (((xos).xenviron)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))) ((xcm)))
                          (((unsupported)) (((xos).xenviron)) ((xmissing)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((((xcm).xexception).xargs)) (0))) ((xmissing)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcm).xexception).x__suppress_context__)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))) ((xcm)))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xmissing)))))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((((xcm).xexception).xargs)) (0))) ((xmissing)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcm).xexception).x__suppress_context__)))
                x_test_environ_iteration.write
                  [xself xcollection]
                    memory > xnew_key
                    memory > xiterator
                    seq > @
                      seq
                        xiterator.write (((xiter)) ((xcollection)))
                        xnew_key.write "__new_key__"
                        bogusForceDataize.write (((xnext)) ((xiterator)))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xnew_key)))) ("test_environ_iteration"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((xnext)) ((xiterator)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xenviron)) ((xnew_key)))) ("test_environ_iteration"))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xnew_key)))))))
                xtest_iter_error_when_changing_os_environ.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_environ_iteration)) (((xos).xenviron)))
                xtest_iter_error_when_changing_os_environ_items.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_environ_iteration)) ((((((xos).xenviron).xitems)) 0)))
                xtest_iter_error_when_changing_os_environ_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_environ_iteration)) ((((((xos).xenviron).xvalues)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xwalk.write
                  [xself xtop]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ("follow_symlinks") ((xkwargs))).if
                          (((unsupported)) ((((unsupported)) ((xkwargs)) ("followlinks"))) (((((xkwargs).xpop)) ("follow_symlinks"))))
                        (((unsupported)) (((((xos).xwalk)) ((xtop)) ((((unsupported)) ((xkwargs)))))))
                xsetUp.write
                  [xself]
                    memory > xjoin
                    memory > xtmp4_path
                    memory > xtmp1_path
                    memory > xt2_path
                    memory > xbroken_link3_path
                    memory > xbroken_link_path
                    memory > xtmp2_path
                    memory > xsub21_path
                    memory > xbroken_link2_path
                    memory > xtmp3_path
                    memory > xtmp5_path
                    memory > xsub2_path
                    seq > @
                      seq
                        xjoin.write (((xos).xpath).xjoin)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((xself).xwalk_path)) ((((xjoin)) (((xsupport).xTESTFN)) ("TEST1"))))
                        (((unsupported)) (((xself).xsub1_path)) ((((xjoin)) (((xself).xwalk_path)) ("SUB1"))))
                        (((unsupported)) (((xself).xsub11_path)) ((((xjoin)) (((xself).xsub1_path)) ("SUB11"))))
                        xsub2_path.write (((xjoin)) (((xself).xwalk_path)) ("SUB2"))
                        xsub21_path.write (((xjoin)) ((xsub2_path)) ("SUB21"))
                        xtmp1_path.write (((xjoin)) (((xself).xwalk_path)) ("tmp1"))
                        xtmp2_path.write (((xjoin)) (((xself).xsub1_path)) ("tmp2"))
                        xtmp3_path.write (((xjoin)) ((xsub2_path)) ("tmp3"))
                        xtmp5_path.write (((xjoin)) ((xsub21_path)) ("tmp3"))
                        (((unsupported)) (((xself).xlink_path)) ((((xjoin)) ((xsub2_path)) ("link"))))
                        xt2_path.write (((xjoin)) (((xsupport).xTESTFN)) ("TEST2"))
                        xtmp4_path.write (((xjoin)) (((xsupport).xTESTFN)) ("TEST2") ("tmp4"))
                        xbroken_link_path.write (((xjoin)) ((xsub2_path)) ("broken_link"))
                        xbroken_link2_path.write (((xjoin)) ((xsub2_path)) ("broken_link2"))
                        xbroken_link3_path.write (((xjoin)) ((xsub2_path)) ("broken_link3"))
                        bogusForceDataize.write ((((xos).xmakedirs)) (((xself).xsub11_path)))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xsub2_path)))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xsub21_path)))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xt2_path)))
                        (((unsupported)) ((xpath)) ((((unsupported)) ((xtmp1_path)) ((xtmp2_path)) ((xtmp3_path)) ((xtmp4_path)) ((xtmp5_path)))))
                          (((unsupported)) ((((xopen)) ((xpath)) ("x"))) ((xf)))
                            bogusForceDataize.write ((((xf).xwrite)) ((("I'm ".add (xpath)).add " and proud of it.  Blame test_os.n")))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)) ((((((xos).xpath).xabspath)) ((xt2_path)))) (((xself).xlink_path)))
                            bogusForceDataize.write ((((xos).xsymlink)) ("broken") ((xbroken_link_path)) (TRUE))
                            bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("tmp3") ("broken"))) ((xbroken_link2_path)) (TRUE))
                            bogusForceDataize.write ((((xos).xsymlink)) ((((xjoin)) ("SUB21") ("tmp5"))) ((xbroken_link3_path)) (TRUE))
                            (((unsupported)) (((xself).xsub2_tree)) ((((unsupported)) ((xsub2_path)) ((((unsupported)) ("SUB21") ("link"))) ((((unsupported)) ("broken_link") ("broken_link2") ("broken_link3") ("tmp3"))))))
                          (((unsupported)) (((xself).xsub2_tree)) ((((unsupported)) ((xsub2_path)) ((((unsupported)) ("SUB21"))) ((((unsupported)) ("tmp3"))))))
                        bogusForceDataize.write ((((xos).xchmod)) ((xsub21_path)) (0))
                        (((unsupported)) ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xlistdir)) ((xsub21_path)))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xchmod)) ((xsub21_path)) (((xstat).xS_IRWXU)))
                          seq
                            bogusForceDataize.write ((((xos).xchmod)) ((xsub21_path)) (((xstat).xS_IRWXU)))
                            bogusForceDataize.write ((((xos).xunlink)) ((xtmp5_path)))
                            bogusForceDataize.write ((((xos).xrmdir)) ((xsub21_path)))
                            (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xsub2_tree)) (1))) ((((unsupported)) (1))))))))
                xtest_walk_topdown.write
                  [xself]
                    memory > xall
                    memory > xflipped
                    seq > @
                      seq
                        xall.write (((xlist)) (((((xself).xwalk)) (((xself).xwalk_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xall)))) (4))
                        xflipped.write ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xall)) (0))) (1))) (0)).neq "SUB1")
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) (0))) (1)).xsort)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) ((3.sub (2.mul (xflipped)))))) ((1.neg))).xsort)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) ((3.sub (2.mul (xflipped)))))) (1)).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) (0))) ((((unsupported)) (((xself).xwalk_path)) ((((unsupported)) ("SUB1") ("SUB2"))) ((((unsupported)) ("tmp1"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) ((1.add (xflipped))))) ((((unsupported)) (((xself).xsub1_path)) ((((unsupported)) ("SUB11"))) ((((unsupported)) ("tmp2"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) ((2.add (xflipped))))) ((((unsupported)) (((xself).xsub11_path)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) ((3.sub (2.mul (xflipped)))))) (((xself).xsub2_tree)))
                xtest_walk_prune.write
                  [xself xwalk_path]
                    memory > xall
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xwalk_path)) ("None: is there a None literal in the EO language?")).if
                          xwalk_path.write ((xself).xwalk_path)
                        xall.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))) (((((xself).xwalk)) ((xwalk_path)))))
                          seq
                            bogusForceDataize.write ((((xall).xappend)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))))
                            (((unsupported)) ("SUB1") ((xdirs))).if
                              bogusForceDataize.write ((((xdirs).xremove)) ("SUB1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xall)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) (0))) ((((unsupported)) (((xself).xwalk_path)) ((((unsupported)) ("SUB2"))) ((((unsupported)) ("tmp1"))))))
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) (1))) ((1.neg))).xsort)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) (1))) (1)).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) (1))) (((xself).xsub2_tree)))
                xtest_file_like_path.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xtest_walk_prune)) ((((xFakePath)) (((xself).xwalk_path)))))
                xtest_walk_bottom_up.write
                  [xself]
                    memory > xall
                    memory > xflipped
                    seq > @
                      seq
                        xall.write (((xlist)) ((((unsupported)) (((xself).xwalk)) (((xself).xwalk_path)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xall)))) (4) ((xall)))
                        xflipped.write ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xall)) (3))) (1))) (0)).neq "SUB1")
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) (3))) (1)).xsort)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) ((2.sub (2.mul (xflipped)))))) ((1.neg))).xsort)) 0)
                        bogusForceDataize.write ((((((unsupported)) ((((unsupported)) ((xall)) ((2.sub (2.mul (xflipped)))))) (1)).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) (3))) ((((unsupported)) (((xself).xwalk_path)) ((((unsupported)) ("SUB1") ("SUB2"))) ((((unsupported)) ("tmp1"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) ((xflipped)))) ((((unsupported)) (((xself).xsub11_path)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) (((xflipped).add 1)))) ((((unsupported)) (((xself).xsub1_path)) ((((unsupported)) ("SUB11"))) ((((unsupported)) ("tmp2"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xall)) ((2.sub (2.mul (xflipped)))))) (((xself).xsub2_tree)))
                xtest_walk_symlink.write
                  [xself]
                    memory > xwalk_it
                    seq > @
                      seq
                        (((((xsupport).xcan_symlink)) 0).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("need symlink support"))
                        xwalk_it.write (((unsupported)) (((xself).xwalk)) (((xself).xwalk_path)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))) ((xwalk_it)))
                          ((xroot).eq ((xself).xlink_path)).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xdirs)) ((((unsupported)) 0)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xfiles)) ((((unsupported)) ("tmp4"))))
                              (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("Didn't follow symlink with followlinks=True"))
                xtest_walk_bad_dir.write
                  [xself]
                    memory > xerrors
                    memory > xpath1new
                    memory > xpath1
                    memory > xroots
                    memory > xwalk_it
                    memory > xdir1
                    seq > @
                      seq
                        xerrors.write (((unsupported)) 0)
                        xwalk_it.write (((unsupported)) (((xself).xwalk)) (((xself).xwalk_path)) (((xerrors).xappend)))
                        (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))) ((((xnext)) ((xwalk_it)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xerrors)) ((((unsupported)) 0)))
                        xdir1.write "SUB1"
                        xpath1.write (((((xos).xpath).xjoin)) ((xroot)) ((xdir1)))
                        xpath1new.write (((((xos).xpath).xjoin)) ((xroot)) (((xdir1).add ".new")))
                        bogusForceDataize.write ((((xos).xrename)) ((xpath1)) ((xpath1new)))
                        (((unsupported)) 0)
                          seq
                            xroots.write (((unsupported)) ((xr)) ((((unsupported)) ((xr)) ((xd)) ((xf)))) ((xwalk_it)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((xerrors)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xpath1)) ((xroots)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xpath1new)) ((xroots)))
                            (((unsupported)) ((xdir2)) ((xdirs)))
                              ((xdir2).neq (xdir1)).if
                                bogusForceDataize.write ((((xself).xassertIn)) ((((((xos).xpath).xjoin)) ((xroot)) ((xdir2)))) ((xroots)))
                          bogusForceDataize.write ((((xos).xrename)) ((xpath1new)) ((xpath1)))
                xtest_walk_many_open_files.write
                  [xself]
                    memory > xiters
                    memory > xexpected
                    memory > xbase
                    memory > xp
                    memory > xdepth
                    seq > @
                      seq
                        xdepth.write 30
                        xbase.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("deep"))
                        xp.write (((((xos).xpath).xjoin)) ((xbase)) ((((unsupported)) (((((unsupported)) ("d")).mul (xdepth))))))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xp)))
                        xiters.write (((unsupported)) ((((unsupported)) (((xself).xwalk)) ((xbase)) (FALSE))) ((xj)) ((((xrange)) (100))))
                        (((unsupported)) ((xi)) ((((xrange)) (((xdepth).add 1)))))
                          seq
                            xexpected.write (((unsupported)) ((xp)) (((xi).if (((unsupported)) ("d")) (((unsupported)) 0))) ((((unsupported)) 0)))
                            (((unsupported)) ((xit)) ((xiters)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((xexpected)))
                            xp.write (((((xos).xpath).xdirname)) ((xp)))
                        xiters.write (((unsupported)) ((((unsupported)) (((xself).xwalk)) ((xbase)) (TRUE))) ((xj)) ((((xrange)) (100))))
                        xp.write (xbase)
                        (((unsupported)) ((xi)) ((((xrange)) (((xdepth).add 1)))))
                          seq
                            xexpected.write (((unsupported)) ((xp)) ((((xi).less (xdepth)).if (((unsupported)) ("d")) (((unsupported)) 0))) ((((unsupported)) 0)))
                            (((unsupported)) ((xit)) ((xiters)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((xexpected)))
                            xp.write (((((xos).xpath).xjoin)) ((xp)) ("d"))
            (((unsupported)) ((xWalkTests)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("fwalk"))) ("Test needs os.fwalk()"))))
              seq
                unsupported
                xwalk.write
                  [xself xtop]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)) ((xroot_fd)))) (((((xself).xfwalk)) ((xtop)) ((((unsupported)) ((xkwargs)))))))
                          (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))))
                xfwalk.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xos).xfwalk)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                x_compare_to_walk.write
                  [xself xwalk_kwargs xfwalk_kwargs]
                    memory > xexpected
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xwalk_kwargs.write ((((xwalk_kwargs).xcopy)) 0)
                        xfwalk_kwargs.write ((((xfwalk_kwargs).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xtopdown)) ((xfollow_symlinks)))) ((((unsupported)) (((xitertools).xproduct)) ((((unsupported)) (TRUE) (FALSE))) (2))))
                          seq
                            (((unsupported)) (((xwalk_kwargs).xupdate)) ((xtopdown)) ((xfollow_symlinks)))
                            (((unsupported)) (((xfwalk_kwargs).xupdate)) ((xtopdown)) ((xfollow_symlinks)))
                            xexpected.write (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))) (((((xos).xwalk)) ((((unsupported)) ((xwalk_kwargs)))))))
                              (((unsupported)) ((((unsupported)) ((xexpected)) ((xroot)))) ((((unsupported)) ((((xset)) ((xdirs)))) ((((xset)) ((xfiles)))))))
                            (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)) ((xrootfd)))) (((((xself).xfwalk)) ((((unsupported)) ((xfwalk_kwargs)))))))
                              seq
                                bogusForceDataize.write ((((xself).xassertIn)) ((xroot)) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xexpected)) ((xroot)))) ((((unsupported)) ((((xset)) ((xdirs)))) ((((xset)) ((xfiles)))))))
                xtest_compare_to_walk.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)) ("top") (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).x_compare_to_walk)) ((xkwargs)) ((xkwargs)))
                xtest_dir_fd.write
                  [xself]
                    memory > xfwalk_kwargs
                    memory > xwalk_kwargs
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        seq
                          xfd.write ((((xos).xopen)) (".") (((xos).xO_RDONLY)))
                          xwalk_kwargs.write (((unsupported)) ("top") (((xsupport).xTESTFN)))
                          xfwalk_kwargs.write ((((xwalk_kwargs).xcopy)) 0)
                          (((unsupported)) ((((unsupported)) ((xfwalk_kwargs)) ("dir_fd"))) ((xfd)))
                          bogusForceDataize.write ((((xself).x_compare_to_walk)) ((xwalk_kwargs)) ((xfwalk_kwargs)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_yields_correct_dir_fd.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xtopdown)) ((xfollow_symlinks)))) ((((unsupported)) (((xitertools).xproduct)) ((((unsupported)) (TRUE) (FALSE))) (2))))
                        seq
                          xargs.write (((unsupported)) (((xsupport).xTESTFN)) ((xtopdown)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)) ((xrootfd)))) ((((unsupported)) (((xself).xfwalk)) ((((unsupported)) ((xargs)))) ((xfollow_symlinks)))))
                            seq
                              bogusForceDataize.write ((((xos).xfstat)) ((xrootfd)))
                              bogusForceDataize.write ((((xos).xstat)) ((xrootfd)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xos).xlistdir)) ((xrootfd)))))) (((((xset)) ((xdirs))).or (((xset)) ((xfiles))))))
                xtest_fd_leak.write
                  [xself]
                    memory > xminfd
                    memory > xnewfd
                    seq > @
                      seq
                        xminfd.write ((((xos).xdup)) (1))
                        bogusForceDataize.write ((((xos).xclose)) ((xminfd)))
                        (((unsupported)) ((xi)) ((((xrange)) (256))))
                          (((unsupported)) ((xx)) (((((xself).xfwalk)) (((xsupport).xTESTFN)))))
                        xnewfd.write ((((xos).xdup)) (1))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xnewfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnewfd)) ((xminfd)))
                xtest_walk_many_open_files.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xWalkTests)))
              seq
                unsupported
                xwalk.write
                  [xself xtop]
                    memory > xdirs
                    memory > xroot
                    memory > xfiles
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ("follow_symlinks") ((xkwargs))).if
                          (((unsupported)) ((((unsupported)) ((xkwargs)) ("followlinks"))) (((((xkwargs).xpop)) ("follow_symlinks"))))
                        (((unsupported)) ((((unsupported)) ((xbroot)) ((xbdirs)) ((xbfiles)))) (((((xos).xwalk)) (((((xos).xfsencode)) ((xtop)))) ((((unsupported)) ((xkwargs)))))))
                          seq
                            xroot.write ((((xos).xfsdecode)) ((xbroot)))
                            xdirs.write (((xlist)) ((((xmap)) (((xos).xfsdecode)) ((xbdirs)))))
                            xfiles.write (((xlist)) ((((xmap)) (((xos).xfsdecode)) ((xbfiles)))))
                            (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)))))
                            (((unsupported)) ((((unsupported)) ((xbdirs)) ((((unsupported)) 0)))) ((((xlist)) ((((xmap)) (((xos).xfsencode)) ((xdirs)))))))
                            (((unsupported)) ((((unsupported)) ((xbfiles)) ((((unsupported)) 0)))) ((((xlist)) ((((xmap)) (((xos).xfsencode)) ((xfiles)))))))
            (((unsupported)) ((xFwalkTests)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("fwalk"))) ("Test needs os.fwalk()"))))
              seq
                unsupported
                xfwalk.write
                  [xself xtop]
                    memory > xdirs
                    memory > xroot
                    memory > xfiles
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xbroot)) ((xbdirs)) ((xbfiles)) ((xtopfd)))) (((((xos).xfwalk)) (((((xos).xfsencode)) ((xtop)))) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                          seq
                            xroot.write ((((xos).xfsdecode)) ((xbroot)))
                            xdirs.write (((xlist)) ((((xmap)) (((xos).xfsdecode)) ((xbdirs)))))
                            xfiles.write (((xlist)) ((((xmap)) (((xos).xfsdecode)) ((xbfiles)))))
                            (((unsupported)) ((((unsupported)) ((xroot)) ((xdirs)) ((xfiles)) ((xtopfd)))))
                            (((unsupported)) ((((unsupported)) ((xbdirs)) ((((unsupported)) 0)))) ((((xlist)) ((((xmap)) (((xos).xfsencode)) ((xdirs)))))))
                            (((unsupported)) ((((unsupported)) ((xbfiles)) ((((unsupported)) 0)))) ((((xlist)) ((((xmap)) (((xos).xfsencode)) ((xfiles)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xos).xmkdir)) (((xsupport).xTESTFN)))
                xtest_makedir.write
                  [xself]
                    memory > xbase
                    memory > xpath
                    seq > @
                      seq
                        xbase.write ((xsupport).xTESTFN)
                        xpath.write (((((xos).xpath).xjoin)) ((xbase)) ("dir1") ("dir2") ("dir3"))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)))
                        xpath.write (((((xos).xpath).xjoin)) ((xbase)) ("dir1") ("dir2") ("dir3") ("dir4"))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) (((xos).xcurdir)))
                        xpath.write (((((xos).xpath).xjoin)) ((xbase)) ("dir1") ("dir2") ("dir3") ("dir4") ("dir5") (((xos).xcurdir)))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)))
                        xpath.write (((((xos).xpath).xjoin)) ((xbase)) ("dir1") (((xos).xcurdir)) ("dir2") ("dir3") ("dir4") ("dir5") ("dir6"))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)))
                xtest_mode.write
                  [xself]
                    memory > xbase
                    memory > xparent
                    memory > xpath
                    seq > @
                      (((unsupported)) (((((xsupport).xtemp_umask)) (2))))
                        seq
                          xbase.write ((xsupport).xTESTFN)
                          xparent.write (((((xos).xpath).xjoin)) ((xbase)) ("dir1"))
                          xpath.write (((((xos).xpath).xjoin)) ((xparent)) ("dir2"))
                          bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)) (365))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xpath)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xpath)))))
                          (((xos).xname).neq "nt").if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((((xos).xstat)) ((xpath))).xst_mode).and 511)) (365))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((((xos).xstat)) ((xparent))).xst_mode).and 511)) (509))
                xtest_exist_ok_existing_directory.write
                  [xself]
                    memory > xold_mask
                    memory > xpath
                    memory > xmode
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dir1"))
                        xmode.write 511
                        xold_mask.write ((((xos).xumask)) (18))
                        bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)) ((xmode)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) ((xpath)) ((xmode)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) ((xpath)) ((xmode)) (FALSE))
                        (((unsupported)) (((xos).xmakedirs)) ((xpath)) (510) (TRUE))
                        (((unsupported)) (((xos).xmakedirs)) ((xpath)) ((xmode)) (TRUE))
                        bogusForceDataize.write ((((xos).xumask)) ((xold_mask)))
                        (((unsupported)) (((xos).xmakedirs)) ((((((xos).xpath).xabspath)) ("/"))) (TRUE))
                xtest_exist_ok_s_isgid_directory.write
                  [xself]
                    memory > xmode
                    memory > xS_ISGID
                    memory > xpath
                    memory > xexisting_testfn_mode
                    memory > xold_mask
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dir1"))
                        xS_ISGID.write ((xstat).xS_ISGID)
                        xmode.write 511
                        xold_mask.write ((((xos).xumask)) (18))
                        (((unsupported)) 0)
                          seq
                            xexisting_testfn_mode.write ((((xstat).xS_IMODE)) ((((((xos).xlstat)) (((xsupport).xTESTFN))).xst_mode)))
                            (((unsupported)) ((xPermissionError)))
                              bogusForceDataize.write ((((xos).xchmod)) (((xsupport).xTESTFN)) (((xexisting_testfn_mode).or (xS_ISGID))))
                              (((unsupported)) (((((xunittest).xSkipTest)) ("Cannot set S_ISGID for dir."))))
                            (((((((xos).xlstat)) (((xsupport).xTESTFN))).xst_mode).and (xS_ISGID)).neq (xS_ISGID)).if
                              (((unsupported)) (((((xunittest).xSkipTest)) ("No support for S_ISGID dir mode."))))
                            bogusForceDataize.write ((((xos).xmakedirs)) ((xpath)) (((xmode).or (xS_ISGID))))
                            (((unsupported)) (((xos).xmakedirs)) ((xpath)) ((xmode)) (TRUE))
                            bogusForceDataize.write ((((xos).xchmod)) ((xpath)) ((((((xstat).xS_IMODE)) ((((((xos).xlstat)) ((xpath))).xst_mode))).and ((xS_ISGID).neg))))
                            (((unsupported)) (((xos).xmakedirs)) ((xpath)) (((xmode).or (xS_ISGID))) (TRUE))
                          bogusForceDataize.write ((((xos).xumask)) ((xold_mask)))
                xtest_exist_ok_existing_regular_file.write
                  [xself]
                    memory > xbase
                    memory > xpath
                    seq > @
                      seq
                        xbase.write ((xsupport).xTESTFN)
                        xpath.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dir1"))
                        (((unsupported)) ((((xopen)) ((xpath)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) ((xpath)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) ((xpath)) (FALSE))
                        (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xos).xmakedirs)) ((xpath)) (TRUE))
                        bogusForceDataize.write ((((xos).xremove)) ((xpath)))
                xtearDown.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dir1") ("dir2") ("dir3") ("dir4") ("dir5") ("dir6"))
                        while.
                          (((((((xos).xpath).xexists)) ((xpath))).not).and ((xpath).neq ((xsupport).xTESTFN)))
                          [unused]
                            seq > @
                              xpath.write (((((xos).xpath).xdirname)) ((xpath)))
                        bogusForceDataize.write ((((xos).xremovedirs)) ((xpath)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("chown"))) ("Test needs chown"))))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xmkdir)) (((xsupport).xTESTFN)))
                xtest_chown_uid_gid_arguments_must_be_index.write
                  [xself]
                    memory > xgid
                    memory > xuid
                    memory > xstat
                    seq > @
                      seq
                        xstat.write ((((xos).xstat)) (((xsupport).xTESTFN)))
                        xuid.write ((xstat).xst_uid)
                        xgid.write ((xstat).xst_gid)
                        (((unsupported)) ((xvalue)) ((((unsupported)) ((1.0.neg)) (((((unsupported)) 0).neg)) (((((xdecimal).xDecimal)) ((1.neg)))) (((((xfractions).xFraction)) ((2.neg)) (2))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xchown)) (((xsupport).xTESTFN)) ((xvalue)) ((xgid)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xchown)) (((xsupport).xTESTFN)) ((xuid)) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid)) ((xgid)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xos).xchown)) (((xsupport).xTESTFN)) ((1.neg)) ((1.neg)))))
                xtest_chown_gid.write
                  [xself]
                    memory > xgroups
                    memory > xgid
                    memory > xuid
                    seq > @
                      (((unsupported)) 0)
                        xgroups.write ((((xos).xgetgroups)) 0)
                        ((((xlen)) ((xgroups))).less 2).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test needs at least 2 groups"))
                        (((unsupported)) ((((unsupported)) ((xgid_1)) ((xgid_2)))) ((((unsupported)) ((xgroups)) ((((unsupported)) (2))))))
                        xuid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_uid)
                        bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid)) ((xgid_1)))
                        xgid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_gid)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgid)) ((xgid_1)))
                        bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid)) ((xgid_2)))
                        xgid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_gid)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgid)) ((xgid_2)))
                xtest_chown_with_root.write
                  [xself]
                    memory > xgid
                    memory > xuid
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xuid_1)) ((xuid_2)))) ((((unsupported)) ((xall_users)) ((((unsupported)) (2))))))
                        xgid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_gid)
                        bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid_1)) ((xgid)))
                        xuid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_uid)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xuid)) ((xuid_1)))
                        bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid_2)) ((xgid)))
                        xuid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_uid)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xuid)) ((xuid_2)))
                xtest_chown_without_permission.write
                  [xself]
                    memory > xgid
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xuid_1)) ((xuid_2)))) ((((unsupported)) ((xall_users)) ((((unsupported)) (2))))))
                        xgid.write (((((xos).xstat)) (((xsupport).xTESTFN))).xst_gid)
                        (((unsupported)) (((((xself).xassertRaises)) ((xPermissionError)))))
                          seq
                            bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid_1)) ((xgid)))
                            bogusForceDataize.write ((((xos).xchown)) (((xsupport).xTESTFN)) ((xuid_2)) ((xgid)))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xrmdir)) (((xsupport).xTESTFN)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xos).xmakedirs)) (((xsupport).xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xrmtree)) (((xsupport).xTESTFN)))
                xtest_remove_all.write
                  [xself]
                    memory > xdirb
                    memory > xdira
                    seq > @
                      seq
                        xdira.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dira"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdira)))
                        xdirb.write (((((xos).xpath).xjoin)) ((xdira)) ("dirb"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirb)))
                        bogusForceDataize.write ((((xos).xremovedirs)) ((xdirb)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdirb)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdira)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xsupport).xTESTFN)))))
                xtest_remove_partial.write
                  [xself]
                    memory > xdirb
                    memory > xdira
                    seq > @
                      seq
                        xdira.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dira"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdira)))
                        xdirb.write (((((xos).xpath).xjoin)) ((xdira)) ("dirb"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirb)))
                        bogusForceDataize.write (((xcreate_file)) ((((((xos).xpath).xjoin)) ((xdira)) ("file.txt"))))
                        bogusForceDataize.write ((((xos).xremovedirs)) ((xdirb)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdirb)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xdira)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xsupport).xTESTFN)))))
                xtest_remove_nothing.write
                  [xself]
                    memory > xdirb
                    memory > xdira
                    seq > @
                      seq
                        xdira.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ("dira"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdira)))
                        xdirb.write (((((xos).xpath).xjoin)) ((xdira)) ("dirb"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirb)))
                        bogusForceDataize.write (((xcreate_file)) ((((((xos).xpath).xjoin)) ((xdirb)) ("file.txt"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          bogusForceDataize.write ((((xos).xremovedirs)) ((xdirb)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xdirb)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) ((xdira)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xsupport).xTESTFN)))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_devnull.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)) ((((xopen)) (((xos).xdevnull)) ("wb") (0))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xf).xwrite)) ("hello"))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                      (((unsupported)) ((((xopen)) (((xos).xdevnull)) ("rb"))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_urandom_length.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xos).xurandom)) (0))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xos).xurandom)) (1))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xos).xurandom)) (10))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xos).xurandom)) (100))))) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xos).xurandom)) (1000))))) (1000))
                xtest_urandom_value.write
                  [xself]
                    memory > xdata1
                    memory > xdata2
                    seq > @
                      seq
                        xdata1.write ((((xos).xurandom)) (16))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xdata1)) ((xbytes)))
                        xdata2.write ((((xos).xurandom)) (16))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata1)) ((xdata2)))
                xget_urandom_subprocess.write
                  [xself xcount]
                    memory > xcode
                    memory > xout
                    memory > xstdout
                    seq > @
                      seq
                        xcode.write ((("n".xjoin)) ((((unsupported)) ("import os, sys") (("data = os.urandom(%s)".mod (xcount))) ("sys.stdout.buffer.write(data)") ("sys.stdout.buffer.flush()"))))
                        xout.write (((xassert_python_ok)) ("-c") ((xcode)))
                        xstdout.write (((unsupported)) ((xout)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xstdout)))) ((xcount)))
                        (((unsupported)) ((xstdout)))
                xtest_urandom_subprocess.write
                  [xself]
                    memory > xdata1
                    memory > xdata2
                    seq > @
                      seq
                        xdata1.write ((((xself).xget_urandom_subprocess)) (16))
                        xdata2.write ((((xself).xget_urandom_subprocess)) (16))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata1)) ((xdata2)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("getrandom"))) ("need os.getrandom()"))))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xgetrandom)) (1))
                          (((xexc).xerrno).eq ((xerrno).xENOSYS)).if
                            (((unsupported)) (((((xunittest).xSkipTest)) ("getrandom() syscall fails with ENOSYS"))))
                            (((unsupported)) 0)
                xtest_getrandom_type.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xos).xgetrandom)) (16))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xdata)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) (16))
                xtest_getrandom0.write
                  [xself]
                    memory > xempty
                    seq > @
                      seq
                        xempty.write ((((xos).xgetrandom)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xempty)) (""))
                xtest_getrandom_random.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xos)) ("GRND_RANDOM"))))
                xtest_getrandom_nonblock.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xBlockingIOError)))
                        bogusForceDataize.write ((((xos).xgetrandom)) (1) (((xos).xGRND_NONBLOCK)))
                xtest_getrandom_value.write
                  [xself]
                    memory > xdata1
                    memory > xdata2
                    seq > @
                      seq
                        xdata1.write ((((xos).xgetrandom)) (16))
                        xdata2.write ((((xos).xgetrandom)) (16))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata1)) ((xdata2)))
            xOS_URANDOM_DONT_USE_FD.write (((((((xsysconfig).xget_config_var)) ("HAVE_GETENTROPY")).eq 1).or (((((xsysconfig).xget_config_var)) ("HAVE_GETRANDOM")).eq 1)).or (((((xsysconfig).xget_config_var)) ("HAVE_GETRANDOM_SYSCALL")).eq 1))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((xOS_URANDOM_DONT_USE_FD)) ("os.random() does not use a file descriptor"))) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "vxworks")) ("VxWorks can't set RLIMIT_NOFILE to 1"))))
              seq
                xtest_urandom_failure.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_urandom_fd_closed.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)) ("-Sc") ((xcode)))))
                xtest_urandom_fd_reopened.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) (("x".mul 256)))
                        xcode.write (((unsupported)) (((((unsupported)) 0).xformat)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)) ("-Sc") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xout)))) (8))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((unsupported)) ((xout)) ((((unsupported)) (0) (4))))) ((((unsupported)) ((xout)) ((((unsupported)) (4) (8))))))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout2)) ((xerr2)))) ((((xassert_python_ok)) ("-Sc") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xout2)))) (8))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xout2)) ((xout)))
            x_execvpe_mockup.write
              [xdefpath]
                memory > xmock_execv
                memory > xorig_defpath
                memory > xcalls
                memory > xorig_execve
                memory > xmock_execve
                memory > xorig_execv
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    xcalls.write (((unsupported)) 0)
                    xmock_execv.write
                      [xname]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((xcalls).xappend)) ((((unsupported)) ("execv") ((xname)) ((xargs)))))
                            (((unsupported)) ((((xRuntimeError)) ("execv called"))))
                    xmock_execve.write
                      [xname]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((xcalls).xappend)) ((((unsupported)) ("execve") ((xname)) ((xargs)))))
                            (((unsupported)) ((((xOSError)) (((xerrno).xENOTDIR)) ("execve called"))))
                    (((unsupported)) 0)
                      seq
                        xorig_execv.write ((xos).xexecv)
                        xorig_execve.write ((xos).xexecve)
                        xorig_defpath.write ((xos).xdefpath)
                        (((unsupported)) (((xos).xexecv)) ((xmock_execv)))
                        (((unsupported)) (((xos).xexecve)) ((xmock_execve)))
                        (((unsupported)) ((xdefpath)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) (((xos).xdefpath)) ((xdefpath)))
                        (((unsupported)) ((xcalls)))
                      seq
                        (((unsupported)) (((xos).xexecv)) ((xorig_execv)))
                        (((unsupported)) (((xos).xexecve)) ((xorig_execve)))
                        (((unsupported)) (((xos).xdefpath)) ((xorig_defpath)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("execv"))) ("need os.execv()"))))
              seq
                xtest_execvpe_with_bad_program.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xexecvpe)) ("no such app-") ((((unsupported)) ("no such app-"))) ("None: is there a None literal in the EO language?"))
                xtest_execv_with_bad_arglist.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecv)) ("notepad") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecv)) ("notepad") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecv)) ("notepad") ((((unsupported)) (""))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecv)) ("notepad") ((((unsupported)) (""))))
                xtest_execvpe_with_bad_arglist.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecvpe)) ("notepad") ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecvpe)) ("notepad") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xexecvpe)) ("notepad") ((((unsupported)) (""))) ((((unsupported)) 0)))
                x_test_internal_execvpe.write
                  [xself xtest_type]
                    memory > xarguments
                    memory > xfullpath
                    memory > xenv_path
                    memory > xnative_fullpath
                    memory > xprogram_path
                    memory > xenv
                    memory > xprogram
                    seq > @
                      (((unsupported)) 0)
                        xprogram_path.write (((xos).xsep).add "absolutepath")
                        (((unsupported)) ((xtest_type)) ((xbytes))).if
                          seq
                            xprogram.write "executable"
                            xfullpath.write (((((xos).xpath).xjoin)) (((((xos).xfsencode)) ((xprogram_path)))) ((xprogram)))
                            xnative_fullpath.write (xfullpath)
                            xarguments.write (((unsupported)) ("progname") ("arg1") ("arg2"))
                          seq
                            xprogram.write "executable"
                            xarguments.write (((unsupported)) ("progname") ("arg1") ("arg2"))
                            xfullpath.write (((((xos).xpath).xjoin)) ((xprogram_path)) ((xprogram)))
                            (((xos).xname).neq "nt").if
                              xnative_fullpath.write ((((xos).xfsencode)) ((xfullpath)))
                              xnative_fullpath.write (xfullpath)
                        xenv.write (((unsupported)) ("spam") ("beans"))
                        (((unsupported)) ((((x_execvpe_mockup)) 0)) ((xcalls)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xos).x_execvpe)) ((xfullpath)) ((xarguments)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcalls)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xcalls)) (0))) ((((unsupported)) ("execv") ((xfullpath)) ((((unsupported)) ((xarguments)))))))
                        (((unsupported)) ((((unsupported)) ((x_execvpe_mockup)) ((xprogram_path)))) ((xcalls)))
                          seq
                            (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xos).x_execvpe)) ((xprogram)) ((xarguments)) ((xenv)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcalls)))) (1))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ((xcalls)) (0))) ((((unsupported)) ("execve") ((xnative_fullpath)) ((((unsupported)) ((xarguments)) ((xenv)))))))
                        (((unsupported)) ((((x_execvpe_mockup)) 0)) ((xcalls)))
                          seq
                            xenv_path.write ((((xenv).xcopy)) 0)
                            (((unsupported)) ((xtest_type)) ((xbytes))).if
                              (((unsupported)) ((((unsupported)) ((xenv_path)) ("PATH"))) ((xprogram_path)))
                              (((unsupported)) ((((unsupported)) ((xenv_path)) ("PATH"))) ((xprogram_path)))
                            (((unsupported)) (((xself).xassertRaises)) ((xOSError)) (((xos).x_execvpe)) ((xprogram)) ((xarguments)) ((xenv_path)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcalls)))) (1))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ((xcalls)) (0))) ((((unsupported)) ("execve") ((xnative_fullpath)) ((((unsupported)) ((xarguments)) ((xenv_path)))))))
                xtest_internal_execvpe_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_internal_execvpe)) ((xstr)))
                        (((xos).xname).neq "nt").if
                          bogusForceDataize.write ((((xself).x_test_internal_execvpe)) ((xbytes)))
                xtest_execve_invalid_env.write
                  [xself]
                    memory > xnewenv
                    memory > xargs
                    seq > @
                      seq
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ("pass"))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT0VEGETABLE"))) ("cabbage"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xos).xexecve)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange0VEGETABLE=cabbage"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xos).xexecve)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT=ORANGE"))) ("lemon"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xos).xexecve)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                xtest_execve_with_empty_path.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xexecve)) ("") ((((unsupported)) ("arg"))) ((((unsupported)) 0)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) (((xe).xwinerror)) ("None: is there a None literal in the EO language?")).or (((xe).xwinerror).neq 0))))
                          bogusForceDataize.write ((((xself).xfail)) ("No OSError raised"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))))
              seq
                xsetUp.write
                  [xself]
                    memory > xexists
                    seq > @
                      (((unsupported)) ((xFileNotFoundError)) ((xOSError)))
                        bogusForceDataize.write ((((xos).xstat)) (((xsupport).xTESTFN)))
                        xexists.write FALSE
                        seq
                          xexists.write TRUE
                          bogusForceDataize.write ((((xself).xfail)) (("file %s must not exist; os.stat failed with %s".mod (((unsupported)) (((xsupport).xTESTFN)) ((xexc))))))
                        bogusForceDataize.write ((((xself).xfail)) (("file %s must not exist".mod ((xsupport).xTESTFN))))
                xtest_rename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xrename)) (((xsupport).xTESTFN)) ((((xsupport).xTESTFN).add ".bak")))
                xtest_remove.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xremove)) (((xsupport).xTESTFN)))
                xtest_chdir.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xchdir)) (((xsupport).xTESTFN)))
                xtest_mkdir.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("x"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xmkdir)) (((xsupport).xTESTFN)))
                xtest_utime.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xutime)) (((xsupport).xTESTFN)) ("None: is there a None literal in the EO language?"))
                xtest_chmod.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xchmod)) (((xsupport).xTESTFN)) (0))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsingles.write (((unsupported)) ("fchdir") ("dup") ("fdopen") ("fdatasync") ("fstat") ("fstatvfs") ("fsync") ("tcgetpgrp") ("ttyname"))
                xget_single.write
                  [xf]
                    memory > xhelper
                    seq > @
                      seq
                        xhelper.write
                          [xself]
                            seq > @
                              (((xhasattr)) ((xos)) ((xf))).if
                                bogusForceDataize.write ((((xself).xcheck)) ((((xgetattr)) ((xos)) ((xf)))))
                        (((unsupported)) ((xhelper)))
                (((unsupported)) ((xf)) ((xsingles)))
                  (((unsupported)) ((((unsupported)) ((((xlocals)) 0)) (("test_".add (xf))))) ((((xget_single)) ((xf)))))
                xcheck.write
                  [xself xf]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write (((xf)) (((((xsupport).xmake_bad_fd)) 0)) ((((unsupported)) ((xargs)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xerrno)) (((xerrno).xEBADF)))
                          bogusForceDataize.write ((((xself).xfail)) (("%r didn't raise an OSError with a bad file descriptor".mod (xf))))
                xtest_isatty.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xisatty)) (((((xsupport).xmake_bad_fd)) 0)))) (FALSE))
                xtest_closerange.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xsupport).xmake_bad_fd)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xos).xfstat)) (((xfd).add (xi))))
                            (((unsupported)) 0)
                        ((xi).less 2).if
                          (((unsupported)) (((((xunittest).xSkipTest)) ("Unable to acquire a range of invalid file descriptors"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xcloserange)) ((xfd)) ((((xfd).add (xi)).sub 1)))) ("None: is there a None literal in the EO language?"))
                xtest_dup2.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xdup2)) (20))
                xtest_fchmod.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xfchmod)) (0))
                xtest_fchown.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xfchown)) ((1.neg)) ((1.neg)))
                xtest_fpathconf.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xpathconf)) ("PC_NAME_MAX"))
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xfpathconf)) ("PC_NAME_MAX"))
                xtest_ftruncate.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xtruncate)) (0))
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xftruncate)) (0))
                xtest_lseek.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xlseek)) (0) (0))
                xtest_read.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xread)) (1))
                xtest_readv.write
                  [xself]
                    memory > xbuf
                    seq > @
                      (((unsupported)) 0)
                        xbuf.write (((xbytearray)) (10))
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xreadv)) ((((unsupported)) ((xbuf)))))
                xtest_tcsetpgrpt.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xtcsetpgrp)) (0))
                xtest_write.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xwrite)) (" "))
                xtest_writev.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xwritev)) ((((unsupported)) ("abc"))))
                xtest_inheritable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xget_inheritable)))
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xset_inheritable)) (TRUE))
                xtest_blocking.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xget_blocking)))
                        bogusForceDataize.write ((((xself).xcheck)) (((xos).xset_blocking)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xfile1)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((xself).xfile2)) ((((((xos).xpath).xjoin)) ((((xsupport).xTESTFN).add "2")))))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xfile)) ((((unsupported)) (((xself).xfile1)) (((xself).xfile2)))))
                        (((((xos).xpath).xexists)) ((xfile))).if
                          bogusForceDataize.write ((((xos).xunlink)) ((xfile)))
                x_test_link.write
                  [xself xfile1 xfile2]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcreate_file)) ((xfile1)))
                        (((unsupported)) ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xlink)) ((xfile1)) ((xfile2)))
                          bogusForceDataize.write ((((xself).xskipTest)) (("os.link(): %s".mod (xe))))
                        (((unsupported)) ((((xopen)) ((xfile1)) ("r"))) ((xf1)) ((((xopen)) ((xfile2)) ("r"))) ((xf2)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xsameopenfile)) (((((xf1).xfileno)) 0)) (((((xf2).xfileno)) 0)))))
                xtest_link.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_link)) (((xself).xfile1)) (((xself).xfile2)))
                xtest_link_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_link)) ((((xbytes)) (((xself).xfile1)) (((((xsys).xgetfilesystemencoding)) 0)))) ((((xbytes)) (((xself).xfile2)) (((((xsys).xgetfilesystemencoding)) 0)))))
                xtest_unicode_name.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xUnicodeError)))
                          bogusForceDataize.write ((((xos).xfsencode)) ("xf1"))
                          (((unsupported)) (((((xunittest).xSkipTest)) ("Unable to encode for this platform."))))
                        (((unsupported)) (((xself).xfile1)) ("xf1"))
                        (((unsupported)) (((xself).xfile2)) ((((xself).xfile1).add "2")))
                        bogusForceDataize.write ((((xself).x_test_link)) (((xself).xfile1)) (((xself).xfile2)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Posix specific tests"))))
              seq
                xUID_OVERFLOW.write (((unsupported)) (1) (32))
                xGID_OVERFLOW.write (((unsupported)) (1) (32))
                xtest_setuid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((((xos).xgetuid)) 0).neq 0).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xsetuid)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetuid)) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetuid)) (((xself).xUID_OVERFLOW)))
                xtest_setgid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        ((((((xos).xgetuid)) 0).neq 0).and ((xHAVE_WHEEL_GROUP).not)).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xsetgid)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetgid)) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetgid)) (((xself).xGID_OVERFLOW)))
                xtest_seteuid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((((xos).xgetuid)) 0).neq 0).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xseteuid)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetegid)) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xseteuid)) (((xself).xUID_OVERFLOW)))
                xtest_setegid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        ((((((xos).xgetuid)) 0).neq 0).and ((xHAVE_WHEEL_GROUP).not)).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xsetegid)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetegid)) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetegid)) (((xself).xGID_OVERFLOW)))
                xtest_setreuid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((((xos).xgetuid)) 0).neq 0).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xsetreuid)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetreuid)) ("not an int") (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetreuid)) (0) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetreuid)) (((xself).xUID_OVERFLOW)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetreuid)) (0) (((xself).xUID_OVERFLOW)))
                xtest_setreuid_neg1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsubprocess).xcheck_call)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os,sys;os.setreuid(-1,-1);sys.exit(0)"))))
                xtest_setregid.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        ((((((xos).xgetuid)) 0).neq 0).and ((xHAVE_WHEEL_GROUP).not)).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xsetregid)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetregid)) ("not an int") (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xsetregid)) (0) ("not an int"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetregid)) (((xself).xGID_OVERFLOW)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xos).xsetregid)) (0) (((xself).xGID_OVERFLOW)))
                xtest_setregid_neg1.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsubprocess).xcheck_call)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os,sys;os.setregid(-1,-1);sys.exit(0)"))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Posix specific tests"))))
              seq
                xsetUp.write
                  [xself]
                    memory > xadd_filename
                    memory > xfn
                    memory > xbytesfn
                    seq > @
                      seq
                        ((xsupport).xTESTFN_UNENCODABLE).if
                          (((unsupported)) (((xself).xdir)) (((xsupport).xTESTFN_UNENCODABLE)))
                          ((xsupport).xTESTFN_NONASCII).if
                            (((unsupported)) (((xself).xdir)) (((xsupport).xTESTFN_NONASCII)))
                            (((unsupported)) (((xself).xdir)) (((xsupport).xTESTFN)))
                        (((unsupported)) (((xself).xbdir)) (((((xos).xfsencode)) (((xself).xdir)))))
                        xbytesfn.write (((unsupported)) 0)
                        xadd_filename.write
                          [xfn]
                            seq > @
                              seq
                                (((unsupported)) ((xUnicodeEncodeError)))
                                  xfn.write ((((xos).xfsencode)) ((xfn)))
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xbytesfn).xappend)) ((xfn)))
                        bogusForceDataize.write (((xadd_filename)) (((xsupport).xTESTFN_UNICODE)))
                        ((xsupport).xTESTFN_UNENCODABLE).if
                          bogusForceDataize.write (((xadd_filename)) (((xsupport).xTESTFN_UNENCODABLE)))
                        ((xsupport).xTESTFN_NONASCII).if
                          bogusForceDataize.write (((xadd_filename)) (((xsupport).xTESTFN_NONASCII)))
                        ((xbytesfn).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("couldn't create any non-ascii filename"))
                        (((unsupported)) (((xself).xunicodefn)) ((((xset)) 0)))
                        bogusForceDataize.write ((((xos).xmkdir)) (((xself).xdir)))
                        (((unsupported)) 0)
                          (((unsupported)) ((xfn)) ((xbytesfn)))
                            seq
                              bogusForceDataize.write ((((xsupport).xcreate_empty_file)) ((((((xos).xpath).xjoin)) (((xself).xbdir)) ((xfn)))))
                              xfn.write ((((xos).xfsdecode)) ((xfn)))
                              (((unsupported)) ((xfn)) (((xself).xunicodefn))).if
                                (((unsupported)) ((((xValueError)) ("duplicate filename"))))
                              bogusForceDataize.write (((((xself).xunicodefn).xadd)) ((xfn)))
                          seq
                            bogusForceDataize.write ((((xshutil).xrmtree)) (((xself).xdir)))
                            (((unsupported)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xshutil).xrmtree)) (((xself).xdir)))
                xtest_listdir.write
                  [xself]
                    memory > xexpected
                    memory > xcurrent_directory
                    memory > xfound
                    seq > @
                      seq
                        xexpected.write ((xself).xunicodefn)
                        xfound.write (((xset)) (((((xos).xlistdir)) (((xself).xdir)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfound)) ((xexpected)))
                        xcurrent_directory.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xchdir)) (((xos).xsep)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((((xos).xlistdir)) 0)))) ((((xset)) (((((xos).xlistdir)) (((xos).xsep)))))))
                          bogusForceDataize.write ((((xos).xchdir)) ((xcurrent_directory)))
                xtest_open.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)) ((xfn)) (((xself).xunicodefn)))
                        seq
                          xf.write (((xopen)) ((((((xos).xpath).xjoin)) (((xself).xdir)) ((xfn)))) ("rb"))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_statvfs.write
                  [xself]
                    memory > xfullname
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xfn)) (((xself).xunicodefn)))
                          seq
                            xfullname.write (((((xos).xpath).xjoin)) (((xself).xdir)) ((xfn)))
                            bogusForceDataize.write ((((xos).xstatvfs)) ((xfullname)))
                xtest_stat.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xfn)) (((xself).xunicodefn)))
                        bogusForceDataize.write ((((xos).xstat)) ((((((xos).xpath).xjoin)) (((xself).xdir)) ((xfn)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))))
              seq
                x_kill.write
                  [xself xsig]
                    memory > xrslt
                    memory > xmsg
                    memory > xbuf
                    memory > xproc
                    memory > xPeekNamedPipe
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        xPeekNamedPipe.write ((((xctypes).xwindll).xkernel32).xPeekNamedPipe)
                        (((unsupported)) (((xPeekNamedPipe).xrestype)) (((xwintypes).xBOOL)))
                        (((unsupported)) (((xPeekNamedPipe).xargtypes)) ((((unsupported)) (((xwintypes).xHANDLE)) (((((xctypes).xPOINTER)) (((xctypes).xc_char)))) (((xwintypes).xDWORD)) (((((xctypes).xPOINTER)) (((xwintypes).xDWORD)))) (((((xctypes).xPOINTER)) (((xwintypes).xDWORD)))) (((((xctypes).xPOINTER)) (((xwintypes).xDWORD)))))))
                        xmsg.write "running"
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((("import sys;sys.stdout.write('{}');sys.stdout.flush();input()".xformat)) ((xmsg)))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xproc).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xproc).xstderr).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xproc).xstdin).xclose)))
                        (((unsupported)) ((((unsupported)) ((xcount)) ((xmax)))) ((((unsupported)) (0) (100))))
                        (((unsupported)) ((((xcount).less (xmax)).and (((unsupported)) (((((xproc).xpoll)) 0)) ("None: is there a None literal in the EO language?")))))
                          seq
                            xbuf.write ((((xctypes).xcreate_string_buffer)) ((((xlen)) ((xmsg)))))
                            xrslt.write (((xPeekNamedPipe)) (((((xmsvcrt).xget_osfhandle)) ((((((xproc).xstdout).xfileno)) 0)))) ((xbuf)) (((((xctypes).xsizeof)) ((xbuf)))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xrslt)) (0) ("PeekNamedPipe failed"))
                            ((xbuf).xvalue).if
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((((((xbuf).xvalue).xdecode)) 0)))
                                (((unsupported)) 0)
                            bogusForceDataize.write ((((xtime).xsleep)) (0.1))
                            (((unsupported)) ((xcount)) (1))
                          bogusForceDataize.write ((((xself).xfail)) ("Did not receive communication from the subprocess"))
                        bogusForceDataize.write ((((xos).xkill)) (((xproc).xpid)) ((xsig)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xproc).xwait)) 0)) ((xsig)))
                xtest_kill_sigterm.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill)) (((xsignal).xSIGTERM)))
                xtest_kill_int.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill)) (100))
                x_kill_with_event.write
                  [xself xevent xname]
                    memory > xproc
                    memory > xtagname
                    memory > xm
                    seq > @
                      seq
                        xtagname.write ("test_os_%s".mod ((((xuuid).xuuid1)) 0))
                        xm.write ((((xmmap).xmmap)) ((1.neg)) (1) ((xtagname)))
                        (((unsupported)) ((((unsupported)) ((xm)) (0))) (0))
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("win_console_handler.py"))) ((xtagname)))) (((xsubprocess).xCREATE_NEW_PROCESS_GROUP)))
                        (((unsupported)) ((((unsupported)) ((xcount)) ((xmax)))) ((((unsupported)) (0) (100))))
                        (((unsupported)) ((((xcount).less (xmax)).and (((unsupported)) (((((xproc).xpoll)) 0)) ("None: is there a None literal in the EO language?")))))
                          seq
                            ((((unsupported)) ((xm)) (0)).eq 1).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xtime).xsleep)) (0.1))
                            (((unsupported)) ((xcount)) (1))
                          seq
                            bogusForceDataize.write ((((xos).xkill)) (((xproc).xpid)) (((xsignal).xSIGINT)))
                            bogusForceDataize.write ((((xself).xfail)) ("Subprocess didn't finish initialization"))
                        bogusForceDataize.write ((((xos).xkill)) (((xproc).xpid)) ((xevent)))
                        bogusForceDataize.write ((((xtime).xsleep)) (0.5))
                        (((((xproc).xpoll)) 0).not).if
                          seq
                            bogusForceDataize.write ((((xos).xkill)) (((xproc).xpid)) (((xsignal).xSIGINT)))
                            bogusForceDataize.write ((((xself).xfail)) (((("subprocess did not stop on {}".xformat)) ((xname)))))
                xtest_CTRL_C_EVENT.write
                  [xself]
                    memory > xSetConsoleCtrlHandler
                    memory > xNULL
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        xNULL.write ((((((xctypes).xPOINTER)) (((xctypes).xc_int)))) 0)
                        xSetConsoleCtrlHandler.write ((((xctypes).xwindll).xkernel32).xSetConsoleCtrlHandler)
                        (((unsupported)) (((xSetConsoleCtrlHandler).xargtypes)) ((((unsupported)) (((((xctypes).xPOINTER)) (((xctypes).xc_int)))) (((xwintypes).xBOOL)))))
                        (((unsupported)) (((xSetConsoleCtrlHandler).xrestype)) (((xwintypes).xBOOL)))
                        bogusForceDataize.write (((xSetConsoleCtrlHandler)) ((xNULL)) (0))
                        bogusForceDataize.write ((((xself).x_kill_with_event)) (((xsignal).xCTRL_C_EVENT)) ("CTRL_C_EVENT"))
                xtest_CTRL_BREAK_EVENT.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_with_event)) (((xsignal).xCTRL_BREAK_EVENT)) ("CTRL_BREAK_EVENT"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xfile_name
                    memory > xfile_path
                    memory > xdir_path
                    memory > xdir_name
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcreated_paths)) ((((unsupported)) 0)))
                        (((unsupported)) ((xi)) ((((xrange)) (2))))
                          seq
                            xdir_name.write ("SUB%d".mod (xi))
                            xdir_path.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ((xdir_name)))
                            xfile_name.write ("FILE%d".mod (xi))
                            xfile_path.write (((((xos).xpath).xjoin)) (((xsupport).xTESTFN)) ((xfile_name)))
                            bogusForceDataize.write ((((xos).xmakedirs)) ((xdir_path)))
                            (((unsupported)) ((((xopen)) ((xfile_path)) ("w"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) (("I'm %s and proud of it. Blame test_os.n".mod (xfile_path))))
                            bogusForceDataize.write (((((xself).xcreated_paths).xextend)) ((((unsupported)) ((xdir_name)) ((xfile_name)))))
                        bogusForceDataize.write (((((xself).xcreated_paths).xsort)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xshutil).xrmtree)) (((xsupport).xTESTFN)))
                xtest_listdir_no_extended_path.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xos).xlistdir)) (((xsupport).xTESTFN)))))) (((xself).xcreated_paths)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xos).xlistdir)) (((((xos).xfsencode)) (((xsupport).xTESTFN)))))))) ((((unsupported)) (((((xos).xfsencode)) ((xpath)))) ((xpath)) (((xself).xcreated_paths)))))
                xtest_listdir_extended_path.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xpath.write ((((unsupported)) 0).add (((((xos).xpath).xabspath)) (((xsupport).xTESTFN))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xos).xlistdir)) ((xpath)))))) (((xself).xcreated_paths)))
                        xpath.write ((((unsupported)) 0).add ((((xos).xfsencode)) ((((((xos).xpath).xabspath)) (((xsupport).xTESTFN))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xos).xlistdir)) ((xpath)))))) ((((unsupported)) (((((xos).xfsencode)) ((xpath)))) ((xpath)) (((xself).xcreated_paths)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("readlink"))) ("needs os.readlink()"))))
              seq
                xfilelink.write "readlinktest"
                xfilelink_target.write (((((xos).xpath).xabspath)) ((x__file__)))
                xfilelinkb.write ((((xos).xfsencode)) ((xfilelink)))
                xfilelinkb_target.write ((((xos).xfsencode)) ((xfilelink_target)))
                xassertPathEqual.write
                  [xself xleft xright]
                    memory > xhas_prefix
                    seq > @
                      seq
                        xleft.write (((((xos).xpath).xnormcase)) ((xleft)))
                        xright.write (((((xos).xpath).xnormcase)) ((xright)))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            xhas_prefix.write (((unsupported)) (((((xp).xstartswith)) (((((xisinstance)) ((xp)) ((xbytes))).if (((unsupported)) 0) (((unsupported)) 0))))))
                            (((xhas_prefix)) ((xleft))).if
                              xleft.write (((unsupported)) ((xleft)) ((((unsupported)) (4))))
                            (((xhas_prefix)) ((xright))).if
                              xright.write (((unsupported)) ((xright)) ((((unsupported)) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xleft)) ((xright)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xfilelink_target)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xfilelinkb_target)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xfilelink)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xfilelinkb)))))
                xtest_not_symlink.write
                  [xself]
                    memory > xfilelink_target
                    seq > @
                      seq
                        xfilelink_target.write (((xFakePath)) (((xself).xfilelink_target)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xreadlink)) (((xself).xfilelink_target)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xreadlink)) ((xfilelink_target)))
                xtest_missing_link.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xos).xreadlink)) ("missing-link"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xos).xreadlink)) ((((xFakePath)) ("missing-link"))))
                xtest_pathlike.write
                  [xself]
                    memory > xfilelink
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xsymlink)) (((xself).xfilelink_target)) (((xself).xfilelink)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xself).xfilelink)))
                        xfilelink.write (((xFakePath)) (((xself).xfilelink)))
                        bogusForceDataize.write ((((xself).xassertPathEqual)) (((((xos).xreadlink)) ((xfilelink)))) (((xself).xfilelink_target)))
                xtest_pathlike_bytes.write
                  [xself]
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xsymlink)) (((xself).xfilelinkb_target)) (((xself).xfilelinkb)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xself).xfilelinkb)))
                        xpath.write ((((xos).xreadlink)) ((((xFakePath)) (((xself).xfilelinkb)))))
                        bogusForceDataize.write ((((xself).xassertPathEqual)) ((xpath)) (((xself).xfilelinkb_target)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xpath)) ((xbytes)))
                xtest_bytes.write
                  [xself]
                    memory > xpath
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xsymlink)) (((xself).xfilelinkb_target)) (((xself).xfilelinkb)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xself).xfilelinkb)))
                        xpath.write ((((xos).xreadlink)) (((xself).xfilelinkb)))
                        bogusForceDataize.write ((((xself).xassertPathEqual)) ((xpath)) (((xself).xfilelinkb_target)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xpath)) ((xbytes)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))) (((xsupport).xskip_unless_symlink)))
              seq
                xfilelink.write "filelinktest"
                xfilelink_target.write (((((xos).xpath).xabspath)) ((x__file__)))
                xdirlink.write "dirlinktest"
                xdirlink_target.write (((((xos).xpath).xdirname)) ((xfilelink_target)))
                xmissing_link.write "missing link"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((((xos).xpath).xexists)) (((xself).xdirlink_target)))))
                        (((unsupported)) ((((((xos).xpath).xexists)) (((xself).xfilelink_target)))))
                        (((unsupported)) (((((((xos).xpath).xexists)) (((xself).xdirlink))).not)))
                        (((unsupported)) (((((((xos).xpath).xexists)) (((xself).xfilelink))).not)))
                        (((unsupported)) (((((((xos).xpath).xexists)) (((xself).xmissing_link))).not)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((((xos).xpath).xexists)) (((xself).xfilelink))).if
                          bogusForceDataize.write ((((xos).xremove)) (((xself).xfilelink)))
                        (((((xos).xpath).xexists)) (((xself).xdirlink))).if
                          bogusForceDataize.write ((((xos).xrmdir)) (((xself).xdirlink)))
                        (((((xos).xpath).xlexists)) (((xself).xmissing_link))).if
                          bogusForceDataize.write ((((xos).xremove)) (((xself).xmissing_link)))
                xtest_directory_link.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xsymlink)) (((xself).xdirlink_target)) (((xself).xdirlink)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xdirlink)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) (((xself).xdirlink)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xislink)) (((xself).xdirlink)))))
                        bogusForceDataize.write ((((xself).xcheck_stat)) (((xself).xdirlink)) (((xself).xdirlink_target)))
                xtest_file_link.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xsymlink)) (((xself).xfilelink_target)) (((xself).xfilelink)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xfilelink)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisfile)) (((xself).xfilelink)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xislink)) (((xself).xfilelink)))))
                        bogusForceDataize.write ((((xself).xcheck_stat)) (((xself).xfilelink)) (((xself).xfilelink_target)))
                x_create_missing_dir_link.write
                  [xself]
                    memory > xtarget
                    memory > xtarget_is_dir
                    memory > xlinkname
                    seq > @
                      seq
                        unsupported
                        xlinkname.write ((xself).xmissing_link)
                        (((((xos).xpath).xlexists)) ((xlinkname))).if
                          bogusForceDataize.write ((((xos).xremove)) ((xlinkname)))
                        xtarget.write (((unsupported)) 0)
                        (((unsupported)) (((((((xos).xpath).xexists)) ((xtarget))).not)))
                        xtarget_is_dir.write TRUE
                        bogusForceDataize.write ((((xos).xsymlink)) ((xtarget)) ((xlinkname)) ((xtarget_is_dir)))
                xtest_remove_directory_link_to_missing_target.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_missing_dir_link)) 0)
                        bogusForceDataize.write ((((xos).xremove)) (((xself).xmissing_link)))
                xtest_isdir_on_directory_link_to_missing_target.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_missing_dir_link)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xisdir)) (((xself).xmissing_link)))))
                xtest_rmdir_on_directory_link_to_missing_target.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_missing_dir_link)) 0)
                        bogusForceDataize.write ((((xos).xrmdir)) (((xself).xmissing_link)))
                xcheck_stat.write
                  [xself xlink xtarget]
                    memory > xbytes_link
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) ((xlink)))) (((((xos).xstat)) ((xtarget)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xos).xlstat)) ((xlink)))) (((((xos).xstat)) ((xlink)))))
                        xbytes_link.write ((((xos).xfsencode)) ((xlink)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) ((xbytes_link)))) (((((xos).xstat)) ((xtarget)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xos).xlstat)) ((xbytes_link)))) (((((xos).xstat)) ((xbytes_link)))))
                xtest_12084.write
                  [xself]
                    memory > xfile1
                    memory > xlevel1
                    memory > xlevel2
                    memory > xlink
                    memory > xlevel3
                    memory > xorig_dir
                    seq > @
                      seq
                        xlevel1.write (((((xos).xpath).xabspath)) (((xsupport).xTESTFN)))
                        xlevel2.write (((((xos).xpath).xjoin)) ((xlevel1)) ("level2"))
                        xlevel3.write (((((xos).xpath).xjoin)) ((xlevel2)) ("level3"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xlevel1)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xlevel1)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xlevel2)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xlevel3)))
                        xfile1.write (((((xos).xpath).xabspath)) ((((((xos).xpath).xjoin)) ((xlevel1)) ("file1"))))
                        bogusForceDataize.write (((xcreate_file)) ((xfile1)))
                        xorig_dir.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xchdir)) ((xlevel2)))
                            xlink.write (((((xos).xpath).xjoin)) ((xlevel2)) ("link"))
                            bogusForceDataize.write ((((xos).xsymlink)) ((((((xos).xpath).xrelpath)) ((xfile1)))) ("link"))
                            bogusForceDataize.write ((((xself).xassertIn)) ("link") (((((xos).xlistdir)) (((((xos).xgetcwd)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) ((xfile1)))) (((((xos).xstat)) ("link"))))
                            bogusForceDataize.write ((((xos).xchdir)) ((xlevel1)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) ((xfile1)))) (((((xos).xstat)) ((((((xos).xpath).xrelpath)) ((xlink)))))))
                            bogusForceDataize.write ((((xos).xchdir)) ((xlevel3)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) ((xfile1)))) (((((xos).xstat)) ((((((xos).xpath).xrelpath)) ((xlink)))))))
                          bogusForceDataize.write ((((xos).xchdir)) ((xorig_dir)))
                xtest_29248.write
                  [xself]
                    memory > xtarget
                    seq > @
                      (((unsupported)) 0)
                        xtarget.write ((((xos).xreadlink)) ("C:UsersAll Users"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xsamefile)) ((xtarget)) ("C:ProgramData"))))
                xtest_buffer_overflow.write
                  [xself]
                    memory > xtest_cases
                    memory > xpath
                    memory > xsegment
                    seq > @
                      seq
                        xsegment.write ("X".mul 27)
                        xpath.write (((((xos).xpath).xjoin)) ((((unsupported)) (((((unsupported)) ((xsegment))).mul 10)))))
                        xtest_cases.write (((unsupported)) ((((unsupported)) (("\\".add (xpath))) ((xsegment)))) ((((unsupported)) ((xsegment)) ((xpath)))) ((((unsupported)) ((((unsupported)) ((xpath)) ((((unsupported)) (180))))) ((((unsupported)) ((xpath)) ((((unsupported)) (180))))))))
                        (((unsupported)) ((((unsupported)) ((xsrc)) ((xdest)))) ((xtest_cases)))
                          seq
                            (((unsupported)) ((xFileNotFoundError)))
                              bogusForceDataize.write ((((xos).xsymlink)) ((xsrc)) ((xdest)))
                              (((unsupported)) ((xOSError)))
                                bogusForceDataize.write ((((xos).xremove)) ((xdest)))
                            (((unsupported)) ((xFileNotFoundError)))
                              bogusForceDataize.write ((((xos).xsymlink)) (((((xos).xfsencode)) ((xsrc)))) (((((xos).xfsencode)) ((xdest)))))
                              (((unsupported)) ((xOSError)))
                                bogusForceDataize.write ((((xos).xremove)) ((xdest)))
                xtest_appexeclink.write
                  [xself]
                    memory > xst
                    memory > xroot
                    memory > xaliases
                    seq > @
                      seq
                        xroot.write (((((xos).xpath).xexpandvars)) ("%LOCALAPPDATA%MicrosoftWindowsApps"))
                        ((((((xos).xpath).xisdir)) ((xroot))).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test requires a WindowsApps directory"))
                        xaliases.write (((unsupported)) ((((((xos).xpath).xjoin)) ((xroot)) ((xa)))) ((xa)) (((((xfnmatch).xfilter)) (((((xos).xlistdir)) ((xroot)))) ("*.exe"))))
                        (((unsupported)) ((xalias)) ((xaliases)))
                          seq
                            ((xsupport).xverbose).if
                              seq
                                bogusForceDataize.write (((xprint)) 0)
                                bogusForceDataize.write (((xprint)) ("Testing with") ((xalias)))
                            xst.write ((((xos).xlstat)) ((xalias)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xst)) (((((xos).xstat)) ((xalias)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xstat).xS_ISLNK)) (((xst).xst_mode)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xst).xst_reparse_tag)) (((xstat).xIO_REPARSE_TAG_APPEXECLINK)))
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("test requires an app execution alias"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))))
              seq
                xjunction.write "junctiontest"
                xjunction_target.write (((((xos).xpath).xdirname)) ((((((xos).xpath).xabspath)) ((x__file__)))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((((xos).xpath).xexists)) (((xself).xjunction_target)))))
                        (((unsupported)) (((((((xos).xpath).xlexists)) (((xself).xjunction))).not)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((((xos).xpath).xlexists)) (((xself).xjunction))).if
                        bogusForceDataize.write ((((xos).xunlink)) (((xself).xjunction)))
                xtest_create_junction.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((x_winapi).xCreateJunction)) (((xself).xjunction_target)) (((xself).xjunction)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xlexists)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xos).xstat)) (((xself).xjunction)))) (((((xos).xlstat)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xstat)) (((xself).xjunction)))) (((((xos).xstat)) (((xself).xjunction_target)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xislink)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xnormcase)) (((((unsupported)) 0).add ((xself).xjunction_target))))) ((((((xos).xpath).xnormcase)) (((((xos).xreadlink)) (((xself).xjunction)))))))
                xtest_unlink_removes_junction.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((x_winapi).xCreateJunction)) (((xself).xjunction_target)) (((xself).xjunction)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xlexists)) (((xself).xjunction)))))
                        bogusForceDataize.write ((((xos).xunlink)) (((xself).xjunction)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xself).xjunction)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Win32 specific tests"))))
              xtest_getfinalpathname_handles.write
                [xself]
                  memory > xkernel
                  memory > xbefore_count
                  memory > xfilenames
                  memory > xhandle_count
                  memory > xhproc
                  memory > xctypes
                  memory > xhandle_delta
                  memory > xnt
                  memory > xok
                  seq > @
                    seq
                      xnt.write ((((xsupport).ximport_module)) ("nt"))
                      xctypes.write ((((xsupport).ximport_module)) ("ctypes"))
                      (((unsupported)) 0)
                      xkernel.write (((unsupported)) (((xctypes).xWinDLL)) ("Kernel32.dll") (TRUE))
                      (((unsupported)) ((((xkernel).xGetCurrentProcess).xrestype)) ((((xctypes).xwintypes).xHANDLE)))
                      (((unsupported)) ((((xkernel).xGetProcessHandleCount).xrestype)) ((((xctypes).xwintypes).xBOOL)))
                      (((unsupported)) ((((xkernel).xGetProcessHandleCount).xargtypes)) ((((unsupported)) ((((xctypes).xwintypes).xHANDLE)) ((((xctypes).xwintypes).xLPDWORD)))))
                      xhproc.write ((((xkernel).xGetCurrentProcess)) 0)
                      xhandle_count.write (((((xctypes).xwintypes).xDWORD)) 0)
                      xok.write ((((xkernel).xGetProcessHandleCount)) ((xhproc)) (((((xctypes).xbyref)) ((xhandle_count)))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (1) ((xok)))
                      xbefore_count.write ((xhandle_count).xvalue)
                      xfilenames.write (((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((x__file__)))
                      (((unsupported)) ((x_)) ((((xrange)) (10))))
                        (((unsupported)) ((xname)) ((xfilenames)))
                          seq
                            (((unsupported)) ((xException)))
                              bogusForceDataize.write ((((xnt).x_getfinalpathname)) ((xname)))
                            (((unsupported)) ((xException)))
                              bogusForceDataize.write ((((xos).xstat)) ((xname)))
                      xok.write ((((xkernel).xGetProcessHandleCount)) ((xhproc)) (((((xctypes).xbyref)) ((xhandle_count)))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (1) ((xok)))
                      xhandle_delta.write (((xhandle_count).xvalue).sub (xbefore_count))
                      bogusForceDataize.write ((((xself).xassertEqual)) (0) ((xhandle_delta)))
            (((unsupported)) (((xunittest).xTestCase)) (((xsupport).xskip_unless_symlink)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xos).xmakedirs)) ("base/some_dir"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xshutil).xrmtree)) ("base"))
                xtest_directory_link_nonlocal.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xsrc.write (((((xos).xpath).xjoin)) ("base") ("some_link"))
                        bogusForceDataize.write ((((xos).xsymlink)) ("some_dir") ((xsrc)))
                        (((unsupported)) ((((((xos).xpath).xisdir)) ((xsrc)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_nop.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfsencode)) ("abcxff"))) ("abcxff"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfsdecode)) ("abcu0141"))) ("abcu0141"))
                xtest_identity.write
                  [xself]
                    memory > xbytesfn
                    seq > @
                      (((unsupported)) ((xfn)) ((((unsupported)) ("unicodeu0141") ("latinxe9") ("ascii"))))
                        seq
                          (((unsupported)) ((xUnicodeEncodeError)))
                            xbytesfn.write ((((xos).xfsencode)) ((xfn)))
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfsdecode)) ((xbytesfn)))) ((xfn)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_bad_fd.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsNone)) (((((xos).xdevice_encoding)) (123456))))
                xtest_device_encoding.write
                  [xself]
                    memory > xencoding
                    seq > @
                      (((unsupported)) 0)
                        xencoding.write ((((xos).xdevice_encoding)) (0))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xencoding)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xcodecs).xlookup)) ((xencoding)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_getppid.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os; print(os.getppid())"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((x_)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((xstdout)))) (((((xos).xgetpid)) 0)))
                xcheck_waitpid.write
                  [xself xcode xexitcode]
                    memory > xpid
                    memory > xargs
                    seq > @
                      seq
                        (((xsys).xplatform).eq "win32").if
                          xargs.write (((unsupported)) ("\"{sys.executable}\"") ("-c") ("\"{code}\""))
                          xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                        xpid.write ((((xos).xspawnv)) (((xos).xP_NOWAIT)) (((xsys).xexecutable)) ((xargs)))
                        (((unsupported)) ((((unsupported)) ((xpid2)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                        (((xsys).xplatform).eq "win32").if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstatus)) ((((unsupported)) ((xexitcode)) (8))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xos).xWIFEXITED)) ((xstatus)))) ((xstatus)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xWEXITSTATUS)) ((xstatus)))) ((xexitcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpid2)) ((xpid)))
                xtest_waitpid.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_waitpid)) ("pass") (0))
                xtest_waitpid_exitcode.write
                  [xself]
                    memory > xcode
                    memory > xexitcode
                    seq > @
                      seq
                        xexitcode.write 23
                        xcode.write "import sys; sys.exit({exitcode})"
                        (((unsupported)) (((xself).xcheck_waitpid)) ((xcode)) ((xexitcode)))
                xtest_waitpid_windows.write
                  [xself]
                    memory > xcode
                    memory > xSTATUS_CONTROL_C_EXIT
                    seq > @
                      (((unsupported)) 0)
                        xSTATUS_CONTROL_C_EXIT.write (((unsupported)) 0)
                        xcode.write "import _winapi; _winapi.ExitProcess({STATUS_CONTROL_C_EXIT})"
                        (((unsupported)) (((xself).xcheck_waitpid)) ((xcode)) ((xSTATUS_CONTROL_C_EXIT)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcreate_args.write
                  [xself xwith_env xuse_bytes]
                    memory > xcode
                    memory > xargs
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xexitcode)) (17))
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfilename)))
                        ((xwith_env).not).if
                          xcode.write ("import sys; sys.exit(%s)".mod ((xself).xexitcode))
                          seq
                            (((unsupported)) (((xself).xenv)) ((((xdict)) (((xos).xenviron)))))
                            (((unsupported)) (((xself).xkey)) ((((xstr)) (((((xuuid).xuuid4)) 0)))))
                            (((unsupported)) ((((unsupported)) (((xself).xenv)) (((xself).xkey)))) (((xself).xkey)))
                            xcode.write ("import sys, os; magic = os.environ[%r]; sys.exit(%s)".mod (((unsupported)) (((xself).xkey)) (((xself).xexitcode))))
                        (((unsupported)) ((((xopen)) ((xfilename)) ("w"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) ((xcode)))
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ((xfilename)))
                        (xuse_bytes).if
                          seq
                            xargs.write (((unsupported)) (((((xos).xfsencode)) ((xa)))) ((xa)) ((xargs)))
                            (((unsupported)) (((xself).xenv)) ((((unsupported)) (((((xos).xfsencode)) ((xk)))) (((((xos).xfsencode)) ((xv)))) ((((unsupported)) ((xk)) ((xv)))) ((((((xself).xenv).xitems)) 0)))))
                        (((unsupported)) ((xargs)))
                xtest_spawnl.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        xexitcode.write ((((xos).xspawnl)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnle.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write (((unsupported)) (((xself).xcreate_args)) (TRUE))
                        xexitcode.write ((((xos).xspawnle)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) ((xargs)))) (((xself).xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnlp.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        xexitcode.write ((((xos).xspawnlp)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnlpe.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write (((unsupported)) (((xself).xcreate_args)) (TRUE))
                        xexitcode.write ((((xos).xspawnlpe)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) ((xargs)))) (((xself).xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnv.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        xexitcode.write ((((xos).xspawnv)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnve.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write (((unsupported)) (((xself).xcreate_args)) (TRUE))
                        xexitcode.write ((((xos).xspawnve)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) (((xself).xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnvp.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        xexitcode.write ((((xos).xspawnvp)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnvpe.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write (((unsupported)) (((xself).xcreate_args)) (TRUE))
                        xexitcode.write ((((xos).xspawnvpe)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) (((xself).xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_nowait.write
                  [xself]
                    memory > xpid
                    memory > xresult
                    memory > xargs
                    memory > xstatus
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        xpid.write ((((xos).xspawnv)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)))
                        xresult.write ((((xos).xwaitpid)) ((xpid)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xresult)) (0))) ((xpid)))
                        xstatus.write (((unsupported)) ((xresult)) (1))
                        (((xhasattr)) ((xos)) ("WIFEXITED")).if
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xos).xWIFEXITED)) ((xstatus)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xWEXITSTATUS)) ((xstatus)))) (((xself).xexitcode)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstatus)) ((((unsupported)) (((xself).xexitcode)) (8))))
                xtest_spawnve_bytes.write
                  [xself]
                    memory > xargs
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xargs.write (((unsupported)) (((xself).xcreate_args)) (TRUE) (TRUE))
                        xexitcode.write ((((xos).xspawnve)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) (((xself).xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (((xself).xexitcode)))
                xtest_spawnl_noargs.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnl)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnl)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) (""))
                xtest_spawnle_noargs.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnle)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnle)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ("") ((((unsupported)) 0)))
                xtest_spawnv_noargs.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnv)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnv)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnv)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) (""))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnv)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) (""))))
                xtest_spawnve_noargs.write
                  [xself]
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((((xself).xcreate_args)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnve)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnve)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnve)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) (""))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xos).xspawnve)) (((xos).xP_NOWAIT)) ((((unsupported)) ((xargs)) (0))) ((((unsupported)) (""))) ((((unsupported)) 0)))
                x_test_invalid_env.write
                  [xself xspawn]
                    memory > xnewenv
                    memory > xargs
                    memory > xexitcode
                    memory > xfilename
                    seq > @
                      seq
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ("pass"))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT0VEGETABLE"))) ("cabbage"))
                        (((unsupported)) ((xValueError)))
                          xexitcode.write (((xspawn)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (127))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange0VEGETABLE=cabbage"))
                        (((unsupported)) ((xValueError)))
                          xexitcode.write (((xspawn)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (127))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT=ORANGE"))) ("lemon"))
                        (((unsupported)) ((xValueError)))
                          xexitcode.write (((xspawn)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (127))
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)) ((((xopen)) ((xfilename)) ("w"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) ("import sys, osnif os.getenv(\"FRUIT\") != \"orange=lemon\":n    raise AssertionError"))
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ((xfilename)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange=lemon"))
                        xexitcode.write (((xspawn)) (((xos).xP_WAIT)) ((((unsupported)) ((xargs)) (0))) ((xargs)) ((xnewenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_spawnve_invalid_env.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_invalid_env)) (((xos).xspawnve)))
                xtest_spawnvpe_invalid_env.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_invalid_env)) (((xos).xspawnvpe)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskip)) ("Skip due to platform/environment differences on *NIX buildbots"))) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("getlogin"))) ("test needs os.getlogin"))))
              xtest_getlogin.write
                [xself]
                  memory > xuser_name
                  seq > @
                    seq
                      xuser_name.write ((((xos).xgetlogin)) 0)
                      bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xlen)) ((xuser_name)))) (0))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) (((((xhasattr)) ((xos)) ("getpriority")).and (((xhasattr)) ((xos)) ("setpriority")))) ("needs os.getpriority and os.setpriority"))))
              seq
                unsupported
                xtest_set_get_priority.write
                  [xself]
                    memory > xbase
                    memory > xnew_prio
                    seq > @
                      seq
                        xbase.write ((((xos).xgetpriority)) (((xos).xPRIO_PROCESS)) (((((xos).xgetpid)) 0)))
                        bogusForceDataize.write ((((xos).xsetpriority)) (((xos).xPRIO_PROCESS)) (((((xos).xgetpid)) 0)) (((xbase).add 1)))
                        (((unsupported)) 0)
                          seq
                            xnew_prio.write ((((xos).xgetpriority)) (((xos).xPRIO_PROCESS)) (((((xos).xgetpid)) 0)))
                            (((xbase).geq 19).and ((xnew_prio).leq 19)).if
                              (((unsupported)) (((((xunittest).xSkipTest)) (("unable to reliably test setpriority at current nice level of %s".mod (xbase))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_prio)) (((xbase).add 1)))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xos).xsetpriority)) (((xos).xPRIO_PROCESS)) (((((xos).xgetpid)) 0)) ((xbase)))
                            (((xerr).xerrno).neq ((xerrno).xEACCES)).if
                              (((unsupported)) 0)
            (((unsupported)) (((xasyncore).xdispatcher)) (((xthreading).xThread)))
              seq
                (((unsupported)) (((xasynchat).xasync_chat)))
                  seq
                    x__init__.write
                      [xself xconn]
                        seq > @
                          seq
                            bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)) ((xself)) ((xconn)))
                            (((unsupported)) (((xself).xin_buffer)) ((((unsupported)) 0)))
                            (((unsupported)) (((xself).xaccumulate)) (TRUE))
                            (((unsupported)) (((xself).xclosed)) (FALSE))
                            bogusForceDataize.write ((((xself).xpush)) ("220 readyrn"))
                    xhandle_read.write
                      [xself]
                        memory > xdata
                        seq > @
                          seq
                            xdata.write ((((xself).xrecv)) (4096))
                            ((xself).xaccumulate).if
                              bogusForceDataize.write (((((xself).xin_buffer).xappend)) ((xdata)))
                    xget_data.write
                      [xself]
                        seq > @
                          (((unsupported)) (((("".xjoin)) (((xself).xin_buffer)))))
                    xhandle_close.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xclose)) 0)
                            (((unsupported)) (((xself).xclosed)) (TRUE))
                    xhandle_error.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                x__init__.write
                  [xself xaddress]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)) ((xself)))
                        bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)) ((xself)))
                        bogusForceDataize.write ((((xself).xcreate_socket)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xbind)) ((xaddress)))
                        bogusForceDataize.write ((((xself).xlisten)) (5))
                        (((unsupported)) ((((unsupported)) (((xself).xhost)) (((xself).xport)))) ((((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)) ((((unsupported)) (2))))))
                        (((unsupported)) (((xself).xhandler_instance)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).x_active)) (FALSE))
                        (((unsupported)) (((xself).x_active_lock)) (((((xthreading).xLock)) 0)))
                xrunning.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_active)))
                xstart.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xrunning).not)))
                        (((unsupported)) (((xself).x__flag)) (((((xthreading).xEvent)) 0)))
                        bogusForceDataize.write (((((xthreading).xThread).xstart)) ((xself)))
                        bogusForceDataize.write (((((xself).x__flag).xwait)) 0)
                xstop.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xrunning)))
                        (((unsupported)) (((xself).x_active)) (FALSE))
                        bogusForceDataize.write ((((xself).xjoin)) 0)
                xwait.write
                  [xself]
                    seq > @
                      seq
                        while.
                          ((((xgetattr)) (((xself).xhandler_instance)) ("closed") (FALSE)).not)
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xtime).xsleep)) (0.001))
                        bogusForceDataize.write ((((xself).xstop)) 0)
                xrun.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_active)) (TRUE))
                        bogusForceDataize.write (((((xself).x__flag).xset)) 0)
                        while.
                          (((xself).x_active).and ((xasyncore).xsocket_map))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xself).x_active_lock).xacquire)) 0)
                                (((unsupported)) (((xasyncore).xloop)) (0.001) (1))
                                bogusForceDataize.write (((((xself).x_active_lock).xrelease)) 0)
                        bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                xhandle_accept.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xself).xaccept)) 0)))
                        (((unsupported)) (((xself).xhandler_instance)) (((((xself).xHandler)) ((xconn)))))
                xhandle_connect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xclose)) 0)
                xhandle_read.write (xhandle_connect)
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)) (0))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("sendfile"))) ("test needs os.sendfile()"))))
              seq
                xDATA.write (("12345abcde".mul 16).mul 1024)
                xSUPPORT_HEADERS_TRAILERS.write ((((((((xsys).xplatform).xstartswith)) ("linux")).not).and ((((((xsys).xplatform).xstartswith)) ("solaris")).not)).and ((((((xsys).xplatform).xstartswith)) ("sunos")).not))
                xrequires_headers_trailers.write ((((xunittest).xskipUnless)) ((xSUPPORT_HEADERS_TRAILERS)) ("requires headers and trailers support"))
                xrequires_32b.write ((((xunittest).xskipUnless)) ((((xsys).xmaxsize).less (((unsupported)) (2) (32)))) ("test is only meaningful on 32-bit builds"))
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xcls).xkey)) (((((xsupport).xthreading_setup)) 0)))
                        bogusForceDataize.write (((xcreate_file)) (((xsupport).xTESTFN)) (((xcls).xDATA)))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xthreading_cleanup)) ((((unsupported)) (((xcls).xkey)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserver)) ((((xSendfileTestServer)) ((((unsupported)) (((xsupport).xHOST)) (0))))))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        (((unsupported)) (((xself).xclient)) (((((xsocket).xsocket)) 0)))
                        bogusForceDataize.write (((((xself).xclient).xconnect)) ((((unsupported)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)))))
                        bogusForceDataize.write (((((xself).xclient).xsettimeout)) (1))
                        bogusForceDataize.write (((((xself).xclient).xrecv)) (1024))
                        (((unsupported)) (((xself).xsockno)) ((((((xself).xclient).xfileno)) 0)))
                        (((unsupported)) (((xself).xfile)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))))
                        (((unsupported)) (((xself).xfileno)) ((((((xself).xfile).xfileno)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xfile).xclose)) 0)
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        (((xself).xserver).xrunning).if
                          bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xsendfile_wrapper.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              (((unsupported)) ((xOSError)))
                                (((unsupported)) (((((xos).xsendfile)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                                (((xerr).xerrno).eq ((xerrno).xECONNRESET)).if
                                  (((unsupported)) 0)
                                  (((unsupported)) (((xerr).xerrno)) ((((unsupported)) (((xerrno).xEAGAIN)) (((xerrno).xEBUSY))))).if
                                    (((unsupported)) 0)
                                    (((unsupported)) 0)
                xtest_send_whole_file.write
                  [xself]
                    memory > xsent
                    memory > xtotal_sent
                    memory > xoffset
                    memory > xnbytes
                    memory > xdata
                    seq > @
                      seq
                        xtotal_sent.write 0
                        xoffset.write 0
                        xnbytes.write 4096
                        while.
                          ((xtotal_sent).less (((xlen)) (((xself).xDATA))))
                          [unused]
                            seq > @
                              seq
                                xsent.write ((((xself).xsendfile_wrapper)) (((xself).xsockno)) (((xself).xfileno)) ((xoffset)) ((xnbytes)))
                                ((xsent).eq 0).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xoffset)) ((xsent)))
                                (((unsupported)) ((xtotal_sent)) ((xsent)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((xsent).leq (xnbytes))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xoffset)) ((xtotal_sent)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtotal_sent)) ((((xlen)) (((xself).xDATA)))))
                        bogusForceDataize.write (((((xself).xclient).xshutdown)) (((xsocket).xSHUT_RDWR)))
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xwait)) 0)
                        xdata.write ((((((xself).xserver).xhandler_instance).xget_data)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((((xlen)) (((xself).xDATA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (((xself).xDATA)))
                xtest_send_at_certain_offset.write
                  [xself]
                    memory > xsent
                    memory > xtotal_sent
                    memory > xnbytes
                    memory > xexpected
                    memory > xdata
                    memory > xmust_send
                    memory > xoffset
                    seq > @
                      seq
                        xtotal_sent.write 0
                        xoffset.write (((unsupported)) ((((xlen)) (((xself).xDATA)))) (2))
                        xmust_send.write ((((xlen)) (((xself).xDATA))).sub (xoffset))
                        xnbytes.write 4096
                        while.
                          ((xtotal_sent).less (xmust_send))
                          [unused]
                            seq > @
                              seq
                                xsent.write ((((xself).xsendfile_wrapper)) (((xself).xsockno)) (((xself).xfileno)) ((xoffset)) ((xnbytes)))
                                ((xsent).eq 0).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xoffset)) ((xsent)))
                                (((unsupported)) ((xtotal_sent)) ((xsent)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((xsent).leq (xnbytes))))
                        bogusForceDataize.write (((((xself).xclient).xshutdown)) (((xsocket).xSHUT_RDWR)))
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xwait)) 0)
                        xdata.write ((((((xself).xserver).xhandler_instance).xget_data)) 0)
                        xexpected.write (((unsupported)) (((xself).xDATA)) ((((unsupported)) ((((unsupported)) ((((xlen)) (((xself).xDATA)))) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtotal_sent)) ((((xlen)) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((((xlen)) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected)))
                xtest_offset_overflow.write
                  [xself]
                    memory > xsent
                    memory > xoffset
                    memory > xdata
                    seq > @
                      seq
                        xoffset.write ((((xlen)) (((xself).xDATA))).add 4096)
                        (((unsupported)) ((xOSError)))
                          xsent.write ((((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) ((xoffset)) (4096))
                          (((xe).xerrno).neq ((xerrno).xEINVAL)).if
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xsent)) (0))
                        bogusForceDataize.write (((((xself).xclient).xshutdown)) (((xsocket).xSHUT_RDWR)))
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xwait)) 0)
                        xdata.write ((((((xself).xserver).xhandler_instance).xget_data)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) (""))
                xtest_invalid_offset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) ((1.neg)) (4096))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                xtest_keywords.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (0) (4096) ((((unsupported)) ((((unsupported)) ("in") (((xself).xfileno)))))))
                        ((xself).xSUPPORT_HEADERS_TRAILERS).if
                          (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) (0) (4096) ((((unsupported)) 0)) ((((unsupported)) 0)) (0))
                xtest_headers.write
                  [xself]
                    memory > xsent
                    memory > xtotal_sent
                    memory > xexpected_data
                    memory > xoffset
                    memory > xnbytes
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xtotal_sent.write 0
                        xexpected_data.write ((("x".mul 512).add ("y".mul 256)).add (((unsupported)) (((xself).xDATA)) ((((unsupported)) ((1.neg))))))
                        xsent.write (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) (0) (4096) ((((unsupported)) (("x".mul 512)) (("y".mul 256)))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xsent)) (((512.add 256).add 4096)))
                        (((unsupported)) ((xtotal_sent)) ((xsent)))
                        xoffset.write 4096
                        while.
                          ((xtotal_sent).less (((xlen)) ((xexpected_data))))
                          [unused]
                            seq > @
                              seq
                                xnbytes.write (((xmin)) (((((xlen)) ((xexpected_data))).sub (xtotal_sent))) (4096))
                                xsent.write ((((xself).xsendfile_wrapper)) (((xself).xsockno)) (((xself).xfileno)) ((xoffset)) ((xnbytes)))
                                ((xsent).eq 0).if
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertLessEqual)) ((xsent)) ((xnbytes)))
                                (((unsupported)) ((xtotal_sent)) ((xsent)))
                                (((unsupported)) ((xoffset)) ((xsent)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtotal_sent)) ((((xlen)) ((xexpected_data)))))
                        bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                        bogusForceDataize.write (((((xself).xserver).xwait)) 0)
                        xdata.write ((((((xself).xserver).xhandler_instance).xget_data)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xdata)))) ((((xhash)) ((xexpected_data)))))
                xtest_trailers.write
                  [xself]
                    memory > xfile_data
                    memory > xdata
                    memory > xTESTFN2
                    seq > @
                      (((unsupported)) 0)
                        xTESTFN2.write (((xsupport).xTESTFN).add "2")
                        xfile_data.write "abcdef"
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN2)))
                        bogusForceDataize.write (((xcreate_file)) ((xTESTFN2)) ((xfile_data)))
                        (((unsupported)) ((((xopen)) ((xTESTFN2)) ("rb"))) ((xf)))
                          seq
                            (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((((xf).xfileno)) 0)) (0) (5) ((((unsupported)) ("123456") ("789"))))
                            bogusForceDataize.write (((((xself).xclient).xclose)) 0)
                            bogusForceDataize.write (((((xself).xserver).xwait)) 0)
                            xdata.write ((((((xself).xserver).xhandler_instance).xget_data)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("abcde123456789"))
                xtest_headers_overflow_32bits.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xserver).xhandler_instance).xaccumulate)) (FALSE))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) (0) (0) (((((unsupported)) (("x".mul (((unsupported)) (2) (16))))).mul (((unsupported)) (2) (15)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                xtest_trailers_overflow_32bits.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xserver).xhandler_instance).xaccumulate)) (FALSE))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) (0) (0) (((((unsupported)) (("x".mul (((unsupported)) (2) (16))))).mul (((unsupported)) (2) (15)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                xtest_flags.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          (((unsupported)) (((xos).xsendfile)) (((xself).xsockno)) (((xself).xfileno)) (0) (4096) (((xos).xSF_NODISKIO)))
                          (((unsupported)) (((xerr).xerrno)) ((((unsupported)) (((xerrno).xEBUSY)) (((xerrno).xEAGAIN))))).if
                            (((unsupported)) 0)
            xsupports_extended_attributes.write
              []
                seq > @
                  seq
                    ((((xhasattr)) ((xos)) ("setxattr")).not).if
                      (((unsupported)) (FALSE))
                    (((unsupported)) 0)
                      (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("xb") (0))) ((xfp)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xsetxattr)) (((((xfp).xfileno)) 0)) ("user.test") (""))
                          (((unsupported)) (FALSE))
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                    (((unsupported)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsupports_extended_attributes)) 0)) ("no non-broken extended attribute support"))) (((((xsupport).xrequires_linux_version)) (2) (6) (39))))
              seq
                x_check_xattrs_str.write
                  [xself xs xgetxattr xsetxattr xremovexattr xlistxattr]
                    memory > xxattr
                    memory > xinit_xattr
                    memory > xmany
                    memory > xfn
                    seq > @
                      (((unsupported)) 0)
                        xfn.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xfn)))
                        bogusForceDataize.write (((xcreate_file)) ((xfn)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write (((xgetxattr)) ((xfn)) ((((xs)) ("user.test"))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENODATA)))
                        xinit_xattr.write (((xlistxattr)) ((xfn)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xinit_xattr)) ((xlist)))
                        bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test"))) ("") ((((unsupported)) ((xkwargs)))))
                        xxattr.write (((xset)) ((xinit_xattr)))
                        bogusForceDataize.write ((((xxattr).xadd)) ("user.test"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xlistxattr)) ((xfn)))))) ((xxattr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetxattr)) ((xfn)) ("user.test") ((((unsupported)) ((xkwargs)))))) (""))
                        bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test"))) ("hello") (((xos).xXATTR_REPLACE)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetxattr)) ((xfn)) ("user.test") ((((unsupported)) ((xkwargs)))))) ("hello"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test"))) ("bye") (((xos).xXATTR_CREATE)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEEXIST)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test2"))) ("bye") (((xos).xXATTR_REPLACE)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENODATA)))
                        bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test2"))) ("foo") (((xos).xXATTR_CREATE)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xxattr).xadd)) ("user.test2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xlistxattr)) ((xfn)))))) ((xxattr)))
                        bogusForceDataize.write (((xremovexattr)) ((xfn)) ((((xs)) ("user.test"))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write (((xgetxattr)) ((xfn)) ((((xs)) ("user.test"))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xENODATA)))
                        bogusForceDataize.write ((((xxattr).xremove)) ("user.test"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xlistxattr)) ((xfn)))))) ((xxattr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetxattr)) ((xfn)) ((((xs)) ("user.test2"))) ((((unsupported)) ((xkwargs)))))) ("foo"))
                        bogusForceDataize.write (((xsetxattr)) ((xfn)) ((((xs)) ("user.test"))) (("a".mul 1024)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetxattr)) ((xfn)) ((((xs)) ("user.test"))) ((((unsupported)) ((xkwargs)))))) (("a".mul 1024)))
                        bogusForceDataize.write (((xremovexattr)) ((xfn)) ((((xs)) ("user.test"))) ((((unsupported)) ((xkwargs)))))
                        xmany.write (((xsorted)) ((((unsupported)) (((("user.test{}".xformat)) ((xi)))) ((xi)) ((((xrange)) (100))))))
                        (((unsupported)) ((xthing)) ((xmany)))
                          bogusForceDataize.write (((xsetxattr)) ((xfn)) ((xthing)) ("x") ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xlistxattr)) ((xfn)))))) (((((xset)) ((xinit_xattr))).or (((xset)) ((xmany))))))
                x_check_xattrs.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_check_xattrs_str)) ((xstr)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).x_check_xattrs_str)) (((xos).xfsencode)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_simple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_xattrs)) (((xos).xgetxattr)) (((xos).xsetxattr)) (((xos).xremovexattr)) (((xos).xlistxattr)))
                xtest_lpath.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_check_xattrs)) (((xos).xgetxattr)) (((xos).xsetxattr)) (((xos).xremovexattr)) (((xos).xlistxattr)) (FALSE))
                xtest_fds.write
                  [xself]
                    memory > xlistxattr
                    memory > xsetxattr
                    memory > xremovexattr
                    memory > xgetxattr
                    seq > @
                      seq
                        xgetxattr.write
                          [xpath]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xopen)) ((xpath)) ("rb"))) ((xfp)))
                                  (((unsupported)) (((((xos).xgetxattr)) (((((xfp).xfileno)) 0)) ((((unsupported)) ((xargs)))))))
                        xsetxattr.write
                          [xpath]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xopen)) ((xpath)) ("wb") (0))) ((xfp)))
                                  bogusForceDataize.write ((((xos).xsetxattr)) (((((xfp).xfileno)) 0)) ((((unsupported)) ((xargs)))))
                        xremovexattr.write
                          [xpath]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xopen)) ((xpath)) ("wb") (0))) ((xfp)))
                                  bogusForceDataize.write ((((xos).xremovexattr)) (((((xfp).xfileno)) 0)) ((((unsupported)) ((xargs)))))
                        xlistxattr.write
                          [xpath]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xopen)) ((xpath)) ("rb"))) ((xfp)))
                                  (((unsupported)) (((((xos).xlistxattr)) (((((xfp).xfileno)) 0)) ((((unsupported)) ((xargs)))))))
                        bogusForceDataize.write ((((xself).x_check_xattrs)) ((xgetxattr)) ((xsetxattr)) ((xremovexattr)) ((xlistxattr)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("get_terminal_size"))) ("requires os.get_terminal_size"))))
              seq
                xtest_does_not_crash.write
                  [xself]
                    memory > xsize
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          xsize.write ((((xos).xget_terminal_size)) 0)
                          seq
                            ((((xsys).xplatform).eq "win32").or (((unsupported)) (((xe).xerrno)) ((((unsupported)) (((xerrno).xEINVAL)) (((xerrno).xENOTTY)))))).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("failed to query terminal size"))
                            (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((xsize).xcolumns)) (0))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((xsize).xlines)) (0))
                xtest_stty_match.write
                  [xself]
                    memory > xexpected
                    memory > xactual
                    memory > xsize
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xFileNotFoundError)) (((xsubprocess).xCalledProcessError)) ((xPermissionError)))))
                          xsize.write ((((((((((xsubprocess).xcheck_output)) ((((unsupported)) ("stty") ("size")))).xdecode)) 0).xsplit)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("stty invocation failed"))
                        xexpected.write (((unsupported)) ((((xint)) ((((unsupported)) ((xsize)) (1))))) ((((xint)) ((((unsupported)) ((xsize)) (0))))))
                        (((unsupported)) ((xOSError)))
                          xactual.write ((((xos).xget_terminal_size)) ((((((xsys).x__stdin__).xfileno)) 0)))
                          seq
                            ((((xsys).xplatform).eq "win32").or (((unsupported)) (((xe).xerrno)) ((((unsupported)) (((xerrno).xEINVAL)) (((xerrno).xENOTTY)))))).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("failed to query terminal size"))
                            (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xactual)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("memfd_create"))) ("requires os.memfd_create"))) (((((xsupport).xrequires_linux_version)) (3) (17))))
              xtest_memfd_create.write
                [xself]
                  memory > xfd
                  memory > xfd2
                  seq > @
                    seq
                      xfd.write ((((xos).xmemfd_create)) ("Hi") (((xos).xMFD_CLOEXEC)))
                      bogusForceDataize.write ((((xself).xassertNotEqual)) ((xfd)) ((1.neg)))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xos).xget_inheritable)) ((xfd)))))
                      (((unsupported)) ((((unsupported)) ((xopen)) ((xfd)) ("wb") (FALSE))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xf).xwrite)) ("memfd_create"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xtell)) 0)) (12))
                      xfd2.write ((((xos).xmemfd_create)) ("Hi"))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd2)))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xos).xget_inheritable)) ((xfd2)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xencoded
                    memory > xdecoded
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                        (((unsupported)) (((xself).xbytes_filenames)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xunicode_filenames)) ((((unsupported)) 0)))
                        (((unsupported)) (((xsupport).xTESTFN_UNENCODABLE)) ("None: is there a None literal in the EO language?")).if
                          xdecoded.write ((xsupport).xTESTFN_UNENCODABLE)
                          xdecoded.write ((xsupport).xTESTFN)
                        bogusForceDataize.write (((((xself).xunicode_filenames).xappend)) ((xdecoded)))
                        bogusForceDataize.write (((((xself).xunicode_filenames).xappend)) ((((xStr)) ((xdecoded)))))
                        (((unsupported)) (((xsupport).xTESTFN_UNDECODABLE)) ("None: is there a None literal in the EO language?")).if
                          xencoded.write ((xsupport).xTESTFN_UNDECODABLE)
                          xencoded.write ((((xos).xfsencode)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write (((((xself).xbytes_filenames).xappend)) ((xencoded)))
                        bogusForceDataize.write (((((xself).xbytes_filenames).xappend)) ((((xbytearray)) ((xencoded)))))
                        bogusForceDataize.write (((((xself).xbytes_filenames).xappend)) ((((xmemoryview)) ((xencoded)))))
                        (((unsupported)) (((xself).xfilenames)) ((((xself).xbytes_filenames).add ((xself).xunicode_filenames))))
                xtest_oserror_filename.write
                  [xself]
                    memory > xfuncs
                    seq > @
                      seq
                        xfuncs.write (((unsupported)) ((((unsupported)) (((xself).xfilenames)) (((xos).xchdir)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xchmod)) (511))) ((((unsupported)) (((xself).xfilenames)) (((xos).xlstat)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xopen)) (((xos).xO_RDONLY)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xrmdir)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xstat)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xunlink)))))
                        (((xsys).xplatform).eq "win32").if
                          bogusForceDataize.write ((((xfuncs).xextend)) ((((unsupported)) ((((unsupported)) (((xself).xbytes_filenames)) (((xos).xrename)) ("dst"))) ((((unsupported)) (((xself).xbytes_filenames)) (((xos).xreplace)) ("dst"))) ((((unsupported)) (((xself).xunicode_filenames)) (((xos).xrename)) ("dst"))) ((((unsupported)) (((xself).xunicode_filenames)) (((xos).xreplace)) ("dst"))) ((((unsupported)) (((xself).xunicode_filenames)) (((xos).xlistdir)))))))
                          bogusForceDataize.write ((((xfuncs).xextend)) ((((unsupported)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlistdir)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xrename)) ("dst"))) ((((unsupported)) (((xself).xfilenames)) (((xos).xreplace)) ("dst"))))))
                        (((xhasattr)) ((xos)) ("chown")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xchown)) (0) (0))))
                        (((xhasattr)) ((xos)) ("lchown")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlchown)) (0) (0))))
                        (((xhasattr)) ((xos)) ("truncate")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xtruncate)) (0))))
                        (((xhasattr)) ((xos)) ("chflags")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xchflags)) (0))))
                        (((xhasattr)) ((xos)) ("lchflags")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlchflags)) (0))))
                        (((xhasattr)) ((xos)) ("chroot")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xchroot)))))
                        (((xhasattr)) ((xos)) ("link")).if
                          (((xsys).xplatform).eq "win32").if
                            seq
                              bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xbytes_filenames)) (((xos).xlink)) ("dst"))))
                              bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xunicode_filenames)) (((xos).xlink)) ("dst"))))
                            bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlink)) ("dst"))))
                        (((xhasattr)) ((xos)) ("listxattr")).if
                          bogusForceDataize.write ((((xfuncs).xextend)) ((((unsupported)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlistxattr)))) ((((unsupported)) (((xself).xfilenames)) (((xos).xgetxattr)) ("user.test"))) ((((unsupported)) (((xself).xfilenames)) (((xos).xsetxattr)) ("user.test") ("user"))) ((((unsupported)) (((xself).xfilenames)) (((xos).xremovexattr)) ("user.test"))))))
                        (((xhasattr)) ((xos)) ("lchmod")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xlchmod)) (511))))
                        (((xhasattr)) ((xos)) ("readlink")).if
                          bogusForceDataize.write ((((xfuncs).xappend)) ((((unsupported)) (((xself).xfilenames)) (((xos).xreadlink)))))
                        (((unsupported)) ((((unsupported)) ((xfilenames)) ((xfunc)) ((((unsupported)) ((xfunc_args)))))) ((xfuncs)))
                          (((unsupported)) ((xname)) ((xfilenames)))
                            (((unsupported)) ((xOSError)) ((xUnicodeDecodeError)))
                              (((xisinstance)) ((xname)) ((((unsupported)) ((xstr)) ((xbytes))))).if
                                bogusForceDataize.write (((xfunc)) ((xname)) ((((unsupported)) ((xfunc_args)))))
                                (((unsupported)) (((((xself).xassertWarnsRegex)) ((xDeprecationWarning)) ("should be"))))
                                  bogusForceDataize.write (((xfunc)) ((xname)) ((((unsupported)) ((xfunc_args)))))
                              bogusForceDataize.write ((((xself).xassertIs)) (((xerr).xfilename)) ((xname)) ((((xstr)) ((xfunc)))))
                              bogusForceDataize.write ((((xself).xfail)) (((("No exception thrown by {}".xformat)) ((xfunc)))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_cpu_count.write
                [xself]
                  memory > xcpus
                  seq > @
                    seq
                      xcpus.write ((((xos).xcpu_count)) 0)
                      (((unsupported)) ((xcpus)) ("None: is there a None literal in the EO language?")).if
                        seq
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcpus)) ((xint)))
                          bogusForceDataize.write ((((xself).xassertGreater)) ((xcpus)) (0))
                        bogusForceDataize.write ((((xself).xskipTest)) ("Could not determine the number of CPUs"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_get_set_inheritable.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (FALSE))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (TRUE))
                xtest_get_inheritable_cloexec.write
                  [xself]
                    memory > xflags
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (FALSE))
                        xflags.write ((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD)))
                        (((unsupported)) ((xflags)) ((((xfcntl).xFD_CLOEXEC).neg)))
                        bogusForceDataize.write ((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_SETFD)) ((xflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (TRUE))
                xtest_set_inheritable_cloexec.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD))).and ((xfcntl).xFD_CLOEXEC))) (((xfcntl).xFD_CLOEXEC)))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfcntl).xfcntl)) ((xfd)) (((xfcntl).xF_GETFD))).and ((xfcntl).xFD_CLOEXEC))) (0))
                xtest_get_set_inheritable_o_path.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_PATH)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (FALSE))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (TRUE))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (FALSE))
                xtest_get_set_inheritable_badf.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xsupport).xmake_bad_fd)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xctx)))
                          bogusForceDataize.write ((((xos).xget_inheritable)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xctx).xexception).xerrno)) (((xerrno).xEBADF)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xctx)))
                          bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xctx).xexception).xerrno)) (((xerrno).xEBADF)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xctx)))
                          bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xctx).xexception).xerrno)) (((xerrno).xEBADF)))
                xtest_open.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd)))) (FALSE))
                xtest_pipe.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrfd)) ((xwfd)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xrfd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xwfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xrfd)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xwfd)))) (FALSE))
                xtest_dup.write
                  [xself]
                    memory > xfd1
                    memory > xfd2
                    seq > @
                      seq
                        xfd1.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd1)))
                        xfd2.write ((((xos).xdup)) ((xfd1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xfd2)))) (FALSE))
                xtest_dup_standard_stream.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xdup)) (1))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xfd)) (0))
                xtest_dup_nul.write
                  [xself]
                    memory > xfd1
                    memory > xfd2
                    seq > @
                      (((unsupported)) 0)
                        xfd1.write ((((xos).xopen)) ("NUL") (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd1)))
                        xfd2.write ((((xos).xdup)) ((xfd1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd2)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xos).xget_inheritable)) ((xfd2)))))
                xtest_dup2.write
                  [xself]
                    memory > xfd3
                    memory > xfd
                    memory > xfd2
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        xfd2.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xdup2)) ((xfd)) ((xfd2)))) ((xfd2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xos).xget_inheritable)) ((xfd2)))))
                        xfd3.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xos).xdup2)) ((xfd)) ((xfd3)) (FALSE))) ((xfd3)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xos).xget_inheritable)) ((xfd3)))))
                xtest_openpty.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmaster_fd)) ((xslave_fd)))) (((((xos).xopenpty)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xmaster_fd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xslave_fd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xmaster_fd)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xslave_fd)))) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfunctions.write (((unsupported)) ((((unsupported)) ("stat") (TRUE) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("lstat") (FALSE) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("access") (FALSE) ((((unsupported)) (((xos).xF_OK)))) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("chflags") (FALSE) ((((unsupported)) (0))) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("lchflags") (FALSE) ((((unsupported)) (0))) ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("open") (FALSE) ((((unsupported)) (0))) ((((xgetattr)) ((xos)) ("close") ("None: is there a None literal in the EO language?"))))))
                xtest_path_t_converter.write
                  [xself]
                    memory > xfd
                    memory > xbytes_fspath
                    memory > xstr_filename
                    memory > xfn
                    memory > xstr_fspath
                    memory > xbytes_filename
                    memory > xint_fspath
                    memory > xresult
                    seq > @
                      seq
                        xstr_filename.write ((xsupport).xTESTFN)
                        (((xos).xname).eq "nt").if
                          (((unsupported)) ((xbytes_fspath)) ((xbytes_filename)) ("None: is there a None literal in the EO language?"))
                          seq
                            xbytes_filename.write (((((xsupport).xTESTFN).xencode)) ("ascii"))
                            xbytes_fspath.write (((xFakePath)) ((xbytes_filename)))
                        xfd.write ((((xos).xopen)) ((((xFakePath)) ((xstr_filename)))) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        xint_fspath.write (((xFakePath)) ((xfd)))
                        xstr_fspath.write (((xFakePath)) ((xstr_filename)))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xallow_fd)) ((xextra_args)) ((xcleanup_fn)))) (((xself).xfunctions)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)))))
                            seq
                              (((unsupported)) ((xAttributeError)))
                                xfn.write (((xgetattr)) ((xos)) ((xname)))
                                (((unsupported)) 0)
                              (((unsupported)) ((xpath)) ((((unsupported)) ((xstr_filename)) ((xbytes_filename)) ((xstr_fspath)) ((xbytes_fspath)))))
                                seq
                                  (((unsupported)) ((xpath)) ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)) 0)
                                  (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)) ((xpath)))))
                                    seq
                                      xresult.write (((xfn)) ((xpath)) ((((unsupported)) ((xextra_args)))))
                                      (((unsupported)) ((xcleanup_fn)) ("None: is there a None literal in the EO language?")).if
                                        bogusForceDataize.write (((xcleanup_fn)) ((xresult)))
                              (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("to return str or bytes"))))
                                bogusForceDataize.write (((xfn)) ((xint_fspath)) ((((unsupported)) ((xextra_args)))))
                              (xallow_fd).if
                                seq
                                  xresult.write (((xfn)) ((xfd)) ((((unsupported)) ((xextra_args)))))
                                  (((unsupported)) ((xcleanup_fn)) ("None: is there a None literal in the EO language?")).if
                                    bogusForceDataize.write (((xcleanup_fn)) ((xresult)))
                                (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("os.PathLike"))))
                                  bogusForceDataize.write (((xfn)) ((xfd)) ((((unsupported)) ((xextra_args)))))
                xtest_path_t_converter_and_custom_class.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "__fspath__() to return str or bytes, not %s"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) (((xmsg).mod "int")))))
                          bogusForceDataize.write ((((xos).xstat)) ((((xFakePath)) (2))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) (((xmsg).mod "float")))))
                          bogusForceDataize.write ((((xos).xstat)) ((((xFakePath)) (2.34))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) (((xmsg).mod "object")))))
                          bogusForceDataize.write ((((xos).xstat)) ((((xFakePath)) ((((xobject)) 0)))))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xos)) ("get_blocking"))) ("needs os.get_blocking() and os.set_blocking()"))))
              xtest_blocking.write
                [xself]
                  memory > xfd
                  seq > @
                    seq
                      xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_blocking)) ((xfd)))) (TRUE))
                      bogusForceDataize.write ((((xos).xset_blocking)) ((xfd)) (FALSE))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_blocking)) ((xfd)))) (FALSE))
                      bogusForceDataize.write ((((xos).xset_blocking)) ((xfd)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_blocking)) ((xfd)))) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_os_all.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertIn)) ("open") (((xos).x__all__)))
                      bogusForceDataize.write ((((xself).xassertIn)) ("walk") (((xos).x__all__)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_no_resource_warning.write ((xsupport).xcheck_no_resource_warning)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xpath)) ((((((xos).xpath).xrealpath)) (((xsupport).xTESTFN)))))
                        (((unsupported)) (((xself).xbytes_path)) (((((xos).xfsencode)) (((xself).xpath)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) (((xself).xpath)))
                        bogusForceDataize.write ((((xos).xmkdir)) (((xself).xpath)))
                xcreate_file.write
                  [xself xname]
                    memory > xpath
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        xpath.write ((((xisinstance)) ((xname)) ((xbytes))).if ((xself).xbytes_path) ((xself).xpath))
                        xfilename.write (((((xos).xpath).xjoin)) ((xpath)) ((xname)))
                        bogusForceDataize.write (((xcreate_file)) ((xfilename)) ("python"))
                        (((unsupported)) ((xfilename)))
                xget_entries.write
                  [xself xnames]
                    memory > xentries
                    seq > @
                      seq
                        xentries.write (((xdict)) ((((unsupported)) ((((unsupported)) (((xentry).xname)) ((xentry)))) ((xentry)) (((((xos).xscandir)) (((xself).xpath)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xentries).xkeys)) 0)))) ((xnames)))
                        (((unsupported)) ((xentries)))
                xassert_stat_equal.write
                  [xself xstat1 xstat2 xskip_fields]
                    seq > @
                      (xskip_fields).if
                        (((unsupported)) ((xattr)) ((((xdir)) ((xstat1)))))
                          seq
                            (((((xattr).xstartswith)) ("st_")).not).if
                              (((unsupported)) 0)
                            (((unsupported)) ((xattr)) ((((unsupported)) ("st_dev") ("st_ino") ("st_nlink")))).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xstat1)) ((xattr)))) ((((xgetattr)) ((xstat2)) ((xattr)))) ((((unsupported)) ((xstat1)) ((xstat2)) ((xattr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstat1)) ((xstat2)))
                xcheck_entry.write
                  [xself xentry xname xis_dir xis_file xis_symlink]
                    seq > @
                xtest_attributes.write
                  [xself]
                    memory > xentries
                    memory > xfilename
                    memory > xentry
                    memory > xnames
                    memory > xdirname
                    memory > xsymlink
                    memory > xlink
                    seq > @
                      seq
                        xlink.write (((xhasattr)) ((xos)) ("link"))
                        xsymlink.write ((((xsupport).xcan_symlink)) 0)
                        xdirname.write (((((xos).xpath).xjoin)) (((xself).xpath)) ("dir"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirname)))
                        xfilename.write ((((xself).xcreate_file)) ("file.txt"))
                        (xlink).if
                          (((unsupported)) ((xPermissionError)))
                            bogusForceDataize.write ((((xos).xlink)) ((xfilename)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("link_file.txt"))))
                            bogusForceDataize.write ((((xself).xskipTest)) (("os.link(): %s".mod (xe))))
                        (xsymlink).if
                          seq
                            (((unsupported)) (((xos).xsymlink)) ((xdirname)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("symlink_dir"))) (TRUE))
                            bogusForceDataize.write ((((xos).xsymlink)) ((xfilename)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("symlink_file.txt"))))
                        xnames.write (((unsupported)) ("dir") ("file.txt"))
                        (xlink).if
                          bogusForceDataize.write ((((xnames).xappend)) ("link_file.txt"))
                        (xsymlink).if
                          bogusForceDataize.write ((((xnames).xextend)) ((((unsupported)) ("symlink_dir") ("symlink_file.txt"))))
                        xentries.write ((((xself).xget_entries)) ((xnames)))
                        xentry.write (((unsupported)) ((xentries)) ("dir"))
                        bogusForceDataize.write ((((xself).xcheck_entry)) ((xentry)) ("dir") (TRUE) (FALSE) (FALSE))
                        xentry.write (((unsupported)) ((xentries)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcheck_entry)) ((xentry)) ("file.txt") (FALSE) (TRUE) (FALSE))
                        (xlink).if
                          seq
                            xentry.write (((unsupported)) ((xentries)) ("link_file.txt"))
                            bogusForceDataize.write ((((xself).xcheck_entry)) ((xentry)) ("link_file.txt") (FALSE) (TRUE) (FALSE))
                        (xsymlink).if
                          seq
                            xentry.write (((unsupported)) ((xentries)) ("symlink_dir"))
                            bogusForceDataize.write ((((xself).xcheck_entry)) ((xentry)) ("symlink_dir") (TRUE) (FALSE) (TRUE))
                            xentry.write (((unsupported)) ((xentries)) ("symlink_file.txt"))
                            bogusForceDataize.write ((((xself).xcheck_entry)) ((xentry)) ("symlink_file.txt") (FALSE) (TRUE) (TRUE))
                xget_entry.write
                  [xself xname]
                    memory > xentries
                    memory > xpath
                    memory > xentry
                    seq > @
                      seq
                        xpath.write ((((xisinstance)) ((xname)) ((xbytes))).if ((xself).xbytes_path) ((xself).xpath))
                        xentries.write (((xlist)) (((((xos).xscandir)) ((xpath)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries)))) (1))
                        xentry.write (((unsupported)) ((xentries)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xname)) ((xname)))
                        (((unsupported)) ((xentry)))
                xcreate_file_entry.write
                  [xself xname]
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        xfilename.write (((unsupported)) (((xself).xcreate_file)) ((xname)))
                        (((unsupported)) (((((xself).xget_entry)) ((((((xos).xpath).xbasename)) ((xfilename)))))))
                xtest_current_directory.write
                  [xself]
                    memory > xentries
                    memory > xold_dir
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((((xself).xcreate_file)) 0)
                        xold_dir.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xchdir)) (((xself).xpath)))
                            xentries.write (((xdict)) ((((unsupported)) ((((unsupported)) (((xentry).xname)) ((xentry)))) ((xentry)) (((((xos).xscandir)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xentries).xkeys)) 0)))) ((((unsupported)) ((((((xos).xpath).xbasename)) ((xfilename)))))))
                          bogusForceDataize.write ((((xos).xchdir)) ((xold_dir)))
                xtest_repr.write
                  [xself]
                    memory > xentry
                    seq > @
                      seq
                        xentry.write ((((xself).xcreate_file_entry)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xentry)))) ("<DirEntry 'file.txt'>"))
                xtest_fspath_protocol.write
                  [xself]
                    memory > xentry
                    seq > @
                      seq
                        xentry.write ((((xself).xcreate_file_entry)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfspath)) ((xentry)))) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("file.txt"))))
                xtest_fspath_protocol_bytes.write
                  [xself]
                    memory > xbytes_filename
                    memory > xbytes_entry
                    memory > xfspath
                    seq > @
                      seq
                        xbytes_filename.write ((((xos).xfsencode)) ("bytesfile.txt"))
                        xbytes_entry.write (((unsupported)) (((xself).xcreate_file_entry)) ((xbytes_filename)))
                        xfspath.write ((((xos).xfspath)) ((xbytes_entry)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfspath)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfspath)) ((((((xos).xpath).xjoin)) (((((xos).xfsencode)) (((xself).xpath)))) ((xbytes_filename)))))
                xtest_removed_dir.write
                  [xself]
                    memory > xpath
                    memory > xentry
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)) (((xself).xpath)) ("dir"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xpath)))
                        xentry.write ((((xself).xget_entry)) ("dir"))
                        bogusForceDataize.write ((((xos).xrmdir)) ((xpath)))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xentry).xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_symlink)) 0)))
                        (((xos).xname).eq "nt").if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xinode)))
                            bogusForceDataize.write ((((xentry).xstat)) 0)
                            (((unsupported)) (((xentry).xstat)) (FALSE))
                          seq
                            bogusForceDataize.write ((((xself).xassertGreater)) (((((xentry).xinode)) 0)) (0))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xstat)))
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xstat)) (FALSE))
                xtest_removed_file.write
                  [xself]
                    memory > xentry
                    seq > @
                      seq
                        xentry.write ((((xself).xcreate_file_entry)) 0)
                        bogusForceDataize.write ((((xos).xunlink)) (((xentry).xpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_dir)) 0)))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xentry).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_symlink)) 0)))
                        (((xos).xname).eq "nt").if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xinode)))
                            bogusForceDataize.write ((((xentry).xstat)) 0)
                            (((unsupported)) (((xentry).xstat)) (FALSE))
                          seq
                            bogusForceDataize.write ((((xself).xassertGreater)) (((((xentry).xinode)) 0)) (0))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xstat)))
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xstat)) (FALSE))
                xtest_broken_symlink.write
                  [xself]
                    memory > xentries
                    memory > xentry
                    memory > xfilename
                    seq > @
                      seq
                        (((((xsupport).xcan_symlink)) 0).not).if
                          (((unsupported)) (((((xself).xskipTest)) ("cannot create symbolic link"))))
                        xfilename.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xos).xsymlink)) ((xfilename)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("symlink.txt"))))
                        xentries.write ((((xself).xget_entries)) ((((unsupported)) ("file.txt") ("symlink.txt"))))
                        xentry.write (((unsupported)) ((xentries)) ("symlink.txt"))
                        bogusForceDataize.write ((((xos).xunlink)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((xentry).xinode)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_dir)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xentry).xis_file)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xentry).xis_dir)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xentry).xis_file)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xentry).xis_symlink)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xentry).xstat)))
                        (((unsupported)) (((xentry).xstat)) (FALSE))
                xtest_bytes.write
                  [xself]
                    memory > xentry
                    memory > xentries
                    memory > xpath_bytes
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        xpath_bytes.write ((((xos).xfsencode)) (((xself).xpath)))
                        xentries.write (((xlist)) (((((xos).xscandir)) ((xpath_bytes)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries)))) (1) ((xentries)))
                        xentry.write (((unsupported)) ((xentries)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xname)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xpath)) (((((xos).xfsencode)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("file.txt"))))))
                xtest_bytes_like.write
                  [xself]
                    memory > xentry
                    memory > xentries
                    memory > xpath_bytes
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        (((unsupported)) ((xcls)) ((((unsupported)) ((xbytearray)) ((xmemoryview)))))
                          seq
                            xpath_bytes.write (((xcls)) (((((xos).xfsencode)) (((xself).xpath)))))
                            (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                              xentries.write (((xlist)) (((((xos).xscandir)) ((xpath_bytes)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries)))) (1) ((xentries)))
                            xentry.write (((unsupported)) ((xentries)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xname)) ("file.txt"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xpath)) (((((xos).xfsencode)) ((((((xos).xpath).xjoin)) (((xself).xpath)) ("file.txt"))))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((xentry).xname)))) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((xentry).xpath)))) ((xbytes)))
                xtest_fd.write
                  [xself]
                    memory > xentries
                    memory > xfd
                    memory > xst
                    memory > xexpected_names
                    memory > xnames
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) (((xos).xscandir)) (((xos).xsupports_fd)))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        xexpected_names.write (((unsupported)) ("file.txt"))
                        ((((xsupport).xcan_symlink)) 0).if
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)) ("file.txt") ((((((xos).xpath).xjoin)) (((xself).xpath)) ("link"))))
                            bogusForceDataize.write ((((xexpected_names).xappend)) ("link"))
                        xfd.write ((((xos).xopen)) (((xself).xpath)) (((xos).xO_RDONLY)))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((((xos).xscandir)) ((xfd)))) ((xit)))
                              xentries.write (((xlist)) ((xit)))
                            xnames.write (((unsupported)) (((xentry).xname)) ((xentry)) ((xentries)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((xnames)))) ((xexpected_names)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xnames)) (((((xos).xlistdir)) ((xfd)))))
                            (((unsupported)) ((xentry)) ((xentries)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xentry).xpath)) (((xentry).xname)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xfspath)) ((xentry)))) (((xentry).xname)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xentry).xis_symlink)) 0)) ((((xentry).xname).eq "link")))
                                (((unsupported)) (((xos).xstat)) (((xos).xsupports_dir_fd))).if
                                  seq
                                    xst.write (((unsupported)) (((xos).xstat)) (((xentry).xname)) ((xfd)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xentry).xstat)) 0)) ((xst)))
                                    xst.write (((unsupported)) (((xos).xstat)) (((xentry).xname)) ((xfd)) (FALSE))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xentry).xstat)) (FALSE))) ((xst)))
                          bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_empty_path.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xos).xscandir)) (""))
                xtest_consume_iterator_twice.write
                  [xself]
                    memory > xentries2
                    memory > xiterator
                    memory > xentries
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        xiterator.write ((((xos).xscandir)) (((xself).xpath)))
                        xentries.write (((xlist)) ((xiterator)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries)))) (1) ((xentries)))
                        xentries2.write (((xlist)) ((xiterator)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries2)))) (0) ((xentries2)))
                xtest_bad_path_type.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) ((((unsupported)) (1.234) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xos).xscandir)) ((xobj)))
                xtest_close.write
                  [xself]
                    memory > xiterator
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file2.txt"))
                        xiterator.write ((((xos).xscandir)) (((xself).xpath)))
                        bogusForceDataize.write (((xnext)) ((xiterator)))
                        bogusForceDataize.write ((((xiterator).xclose)) 0)
                        bogusForceDataize.write ((((xiterator).xclose)) 0)
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          (((unsupported)) ((((unsupported)) ((xiterator)))))
                xtest_context_manager.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file2.txt"))
                        (((unsupported)) (((((xos).xscandir)) (((xself).xpath)))) ((xiterator)))
                          bogusForceDataize.write (((xnext)) ((xiterator)))
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          (((unsupported)) ((((unsupported)) ((xiterator)))))
                xtest_context_manager_close.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file2.txt"))
                        (((unsupported)) (((((xos).xscandir)) (((xself).xpath)))) ((xiterator)))
                          seq
                            bogusForceDataize.write (((xnext)) ((xiterator)))
                            bogusForceDataize.write ((((xiterator).xclose)) 0)
                xtest_context_manager_exception.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file2.txt"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))))
                          (((unsupported)) (((((xos).xscandir)) (((xself).xpath)))) ((xiterator)))
                            seq
                              bogusForceDataize.write (((xnext)) ((xiterator)))
                              unsupported
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          (((unsupported)) ((((unsupported)) ((xiterator)))))
                xtest_resource_warning.write
                  [xself]
                    memory > xiterator
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file.txt"))
                        bogusForceDataize.write ((((xself).xcreate_file)) ("file2.txt"))
                        xiterator.write ((((xos).xscandir)) (((xself).xpath)))
                        bogusForceDataize.write (((xnext)) ((xiterator)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xResourceWarning)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xiterator)))))
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        xiterator.write ((((xos).xscandir)) (((xself).xpath)))
                        bogusForceDataize.write (((xlist)) ((xiterator)))
                        (((unsupported)) (((((xself).xcheck_no_resource_warning)) 0)))
                          (((unsupported)) ((((unsupported)) ((xiterator)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfspath.write (((xstaticmethod)) (((xos).xfspath)))
                xtest_return_bytes.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xb)) ((((unsupported)) ("hello") ("goodbye") ("some/path/and/file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb)) (((((xself).xfspath)) ((xb)))))
                xtest_return_string.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("hello") ("goodbye") ("some/path/and/file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((((xself).xfspath)) ((xs)))))
                xtest_fsencode_fsdecode.write
                  [xself]
                    memory > xpathlike
                    seq > @
                      (((unsupported)) ((xp)) ((((unsupported)) ("path/like/object") ("path/like/object"))))
                        seq
                          xpathlike.write (((xFakePath)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) (((((xself).xfspath)) ((xpathlike)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ("path/like/object") (((((xos).xfsencode)) ((xpathlike)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ("path/like/object") (((((xos).xfsdecode)) ((xpathlike)))))
                xtest_pathlike.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ("#feelthegil") (((((xself).xfspath)) ((((xFakePath)) ("#feelthegil"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xFakePath)) (((xos).xPathLike)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((((xFakePath)) ("x"))) (((xos).xPathLike)))))
                xtest_garbage_in_exception_out.write
                  [xself]
                    memory > xvapor
                    seq > @
                      seq
                        xvapor.write (((xtype)) ("blah") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) ((xo)) ((((unsupported)) ((xint)) ((xtype)) ((xos)) ((((xvapor)) 0)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfspath)) ((xo)))
                xtest_argument_required.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfspath)))
                xtest_bad_pathlike.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfspath)) ((((xFakePath)) (42))))
                        xc.write (((xtype)) ("foo") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((xc).x__fspath__)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfspath)) ((((xc)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) (((xself).xfspath)) ((((xFakePath)) ((((xZeroDivisionError)) 0)))))
                xtest_pathlike_subclasshook.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xos).xPathLike)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xissubclass)) ((xFakePath)) ((xA)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xFakePath)) (((xos).xPathLike)))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_times.write
                [xself]
                  memory > xvalue
                  memory > xtimes
                  seq > @
                    seq
                      xtimes.write ((((xos).xtimes)) 0)
                      bogusForceDataize.write ((((xself).xassertIsInstance)) ((xtimes)) (((xos).xtimes_result)))
                      (((unsupported)) ((xfield)) ((((unsupported)) ("user") ("system") ("children_user") ("children_system") ("elapsed"))))
                        seq
                          xvalue.write (((xgetattr)) ((xtimes)) ((xfield)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xvalue)) ((xfloat)))
                      (((xos).xname).eq "nt").if
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xtimes).xchildren_user)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xtimes).xchildren_system)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xtimes).xelapsed)) (0))
            (((xhasattr)) ((xos)) ("_fspath")).if
              (((unsupported)) ((xTestPEP519)))
                seq
                  unsupported
                  xfspath.write (((xstaticmethod)) (((xos).x_fspath)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)