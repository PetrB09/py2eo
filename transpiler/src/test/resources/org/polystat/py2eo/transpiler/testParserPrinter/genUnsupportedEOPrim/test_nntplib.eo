memory > xNetworkedNNTPTestsMixin
memory > xpatch
memory > xssl_err
memory > xcm
memory > xthreading
memory > xmock_socket_module
memory > xNetworkedNNTPTests
memory > xlines
memory > xImportError
memory > xc
memory > xcount
memory > xdatetime
memory > xlist
memory > xcontextlib
memory > xValueError
memory > xbypass_context
memory > xstr
memory > xio
memory > xids
memory > xnntplib
memory > xNNTPv2Handler
memory > xinfo
memory > xfields
memory > xfile
memory > xsocket
memory > xpos
memory > xoverviews
memory > xart_dict
memory > xresp
memory > xNNTPv1v2TestsMixin
memory > xbytearray
memory > x_
memory > xhead
memory > xdate
memory > xMockedNNTPTestsMixin
memory > xgroup
memory > xdescs
memory > xcallable
memory > xkw
memory > xtype
memory > x_NNTPServerIO
memory > xtextwrap
memory > xcmd
memory > xf
memory > xset
memory > xart_num
memory > xint
memory > xre
memory > xNNTP
memory > xlast
memory > xException
memory > xMockSocketTests
memory > xhasattr
memory > xMockedNNTPWithReaderModeMixin
memory > xbody
memory > xcaps
memory > xNNTPv1Handler
memory > xmessage_id
memory > xsuper
memory > xtokens
memory > xarticle
memory > xsupport
memory > xascii
memory > xbytes
memory > xtuple
memory > xover
memory > xModeSwitchingNNTPv2Handler
memory > xargs
memory > xOSError
memory > xos
memory > xdir
memory > xgetattr
memory > xv
memory > xfirst
memory > xMockSocket
memory > xiter
memory > xe
memory > x__file__
memory > xGroupInfo
memory > xcleanup
memory > xsetattr
memory > xname
memory > xunittest
memory > xCapsAfterLoginNNTPv2Handler
memory > xEOFError
memory > xhelp
memory > xserver
memory > xHandler
memory > xkwargs
memory > xline
memory > xlen
memory > xdict
memory > x__name__
memory > xgroups
[] > test_nntplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xSSLError
        memory > x_decode
        memory > xNNTP_HOST
        memory > xtest_descriptions
        memory > xtest_caps
        memory > xhandle_BODY
        memory > xtest_post
        memory > xsample_body
        memory > xtest_parse_overview
        memory > xtest_group
        memory > xtest_list_active
        memory > xreadinto
        memory > xtest_ihave
        memory > xtest_head
        memory > xtest_ssl_support
        memory > xDESC
        memory > xcertfile
        memory > xtest_last
        memory > xhandle_unknown
        memory > xtest_article_file
        memory > x_check_article_head
        memory > xreadable
        memory > xtest_too_long_lines
        memory > xtest_article_head_body
        memory > xwrap_socket
        memory > xhandle_XOVER
        memory > x_check_article_data
        memory > xtest_with_statement
        memory > xtest_help
        memory > xtest_zzquit
        memory > xhandle_HELP
        memory > xhandle_ARTICLE
        memory > xhandle_MODE
        memory > xhandle_NEXT
        memory > xnntp_class
        memory > xtest_capabilities
        memory > xtest_zlogin
        memory > xwrap_methods
        memory > xsample_post
        memory > xexpect_body
        memory > xhandle_STAT
        memory > xtearDownClass
        memory > xpush_lit
        memory > xhandle_NEWNEWS
        memory > xNNTP_CLASS
        memory > xtest_article
        memory > xhandler_class
        memory > xstart
        memory > xsetUp
        memory > xsetUpClass
        memory > xtest_welcome
        memory > xtest_date
        memory > xTIMEOUT
        memory > xtest_newnews
        memory > xtest_parse_overview_fmt
        memory > xcheck_post_ihave
        memory > xcheck_over_xover_resp
        memory > xssl
        memory > xwritable
        memory > xtest_stat
        memory > xtest_service_permanently_unavailable
        memory > xEOF_ERRORS
        memory > x_check_post_ihave_sub
        memory > xtest_description
        memory > xtest_unknown_command
        memory > xtest_body_file
        memory > xhandle_CAPABILITIES
        memory > xsample_head
        memory > xtest_xover
        memory > x_check_article_body
        memory > xtest_bad_capabilities
        memory > xhandle_HEAD
        memory > xhandle_IHAVE
        memory > xhandle_AUTHINFO
        memory > xtest_head_file
        memory > xtest_caps_only_after_login
        memory > xhandle_LIST
        memory > xwelcome
        memory > xsample_article
        memory > xhandle_POST
        memory > xtest_bad_welcome
        memory > xhandle_DATE
        memory > xmake_server
        memory > xhandle_welcome
        memory > x__init__
        memory > xtest_next
        memory > xGROUP_PAT
        memory > xtest_xhdr
        memory > xtest_service_temporarily_unavailable
        memory > xtest_quit
        memory > xtest_module_all_attribute
        memory > xtest_authinfo
        memory > xtest_newgroups
        memory > xtest_parse_datetime
        memory > xprocess_pending
        memory > xtest_unparse_datetime_legacy
        memory > xreason
        memory > xwrite
        memory > xtest_we_are_in_reader_mode_after_connect
        memory > xtest_login_aborted
        memory > xtest_starttls
        memory > xcheck_constructor_error_conditions
        memory > xnntp_version
        memory > xhandle_LAST
        memory > xhandle_OVER
        memory > xhandle_QUIT
        memory > xtest_body
        memory > xtest_over
        memory > xpush_data
        memory > xtearDown
        memory > x_check_posted_body
        memory > xGROUP_NAME
        memory > xtest_unparse_datetime
        memory > xtest_decode_header
        memory > xcheck_article_resp
        memory > xrun_server
        memory > xhandle_GROUP
        memory > xtest_list
        memory > x_check_art_dict
        memory > xmake_mock_file
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xssl.write "None: is there a None literal in the EO language?"
            xTIMEOUT.write 30
            xcertfile.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("keycert3.pem"))
            (((unsupported)) ((xssl)) ("None: is there a None literal in the EO language?")).if
              xSSLError.write ((xssl).xSSLError)
              (((unsupported)) ((xException)))
                seq
                  unsupported
                  xreason.write "This will never be raised."
            (((unsupported)) 0)
              seq
                xtest_welcome.write
                  [xself]
                    memory > xwelcome
                    seq > @
                      seq
                        xwelcome.write (((((xself).xserver).xgetwelcome)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstr)) ((((xtype)) ((xwelcome)))))
                xtest_help.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xlines)))) ((((((xself).xserver).xhelp)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("100 "))) ((xresp)))
                        (((unsupported)) ((xline)) ((xlines)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstr)) ((((xtype)) ((xline)))))
                xtest_list.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xlist)) 0)))
                        ((((xlen)) ((xgroups))).greater 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xGroupInfo)) ((((xtype)) ((((unsupported)) ((xgroups)) (0))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xstr)) ((((xtype)) (((((unsupported)) ((xgroups)) (0)).xgroup)))))
                xtest_list_active.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xlist)) (((xself).xGROUP_PAT)))))
                        ((((xlen)) ((xgroups))).greater 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xGroupInfo)) ((((xtype)) ((((unsupported)) ((xgroups)) (0))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xstr)) ((((xtype)) (((((unsupported)) ((xgroups)) (0)).xgroup)))))
                xtest_unknown_command.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPPermanentError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).x_shortcmd)) ("XYZZY"))
                        xresp.write (((xcm).xexception).xresponse)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("500 "))) ((xresp)))
                xtest_newgroups.write
                  [xself]
                    memory > xdt
                    seq > @
                      seq
                        xdt.write ((((((xdatetime).xdate).xtoday)) 0).sub (((unsupported)) (((xdatetime).xtimedelta)) (7)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xnewgroups)) ((xdt)))))
                        ((((xlen)) ((xgroups))).greater 0).if
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xgroups)) (0))) ((xGroupInfo)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) ((xgroups)) (0)).xgroup)) ((xstr)))
                xtest_description.write
                  [xself]
                    memory > xdesc
                    memory > x_check_desc
                    seq > @
                      seq
                        x_check_desc.write
                          [xdesc]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xdesc)) ((xstr)))
                                bogusForceDataize.write ((((xself).xassertNotIn)) (((xself).xGROUP_NAME)) ((xdesc)))
                        xdesc.write (((((xself).xserver).xdescription)) (((xself).xGROUP_NAME)))
                        bogusForceDataize.write (((x_check_desc)) ((xdesc)))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xself).xDESC)) ((xdesc)))
                        xdesc.write (((((xself).xserver).xdescription)) (((xself).xGROUP_PAT)))
                        bogusForceDataize.write (((x_check_desc)) ((xdesc)))
                        xdesc.write (((((xself).xserver).xdescription)) ("zk.brrtt.baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdesc)) (""))
                xtest_descriptions.write
                  [xself]
                    memory > xdesc
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xdescs)))) ((((((xself).xserver).xdescriptions)) (((xself).xGROUP_PAT)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xresp).xstartswith)) ("215 ")).or ((((xresp).xstartswith)) ("282 ")))) ((xresp)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xdescs)) ((xdict)))
                        xdesc.write (((unsupported)) ((xdescs)) (((xself).xGROUP_NAME)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdesc)) ((((((xself).xserver).xdescription)) (((xself).xGROUP_NAME)))))
                xtest_group.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xserver).xgroup)) (((xself).xGROUP_NAME)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (5) ((((xlen)) ((xresult)))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xgroup)))) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgroup)) (((xself).xGROUP_NAME)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcount)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfirst)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xlast)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xfirst)) ((xlast)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("211 "))) ((xresp)))
                xtest_date.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xdate)))) ((((((xself).xserver).xdate)) 0)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xdate)) (((xdatetime).xdatetime)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((xdate).xyear)) (1995))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) (((xdate).xyear)) (2030))
                x_check_art_dict.write
                  [xself xart_dict]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xart_dict)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((((xart_dict).xkeys)) 0)) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines"))))
                        (((unsupported)) ((xv)) (((((xart_dict).xvalues)) 0)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xv)) ((((unsupported)) ((xstr)) ((((xtype)) ("None: is there a None literal in the EO language?"))))))
                xtest_xover.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xname)))) ((((((xself).xserver).xgroup)) (((xself).xGROUP_NAME)))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xlines)))) ((((((xself).xserver).xxover)) (((xlast).sub 5)) ((xlast)))))
                        ((((xlen)) ((xlines))).eq 0).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("no articles retrieved"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xart_dict)))) ((((unsupported)) ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xart_num)) (((xlast).sub 5)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xart_num)) ((xlast)))
                        bogusForceDataize.write ((((xself).x_check_art_dict)) ((xart_dict)))
                xtest_over.write
                  [xself]
                    memory > xstart
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xname)))) ((((((xself).xserver).xgroup)) (((xself).xGROUP_NAME)))))
                        xstart.write ((xlast).sub 10)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xlines)))) ((((((xself).xserver).xover)) ((((unsupported)) ((xstart)) ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xart_dict)))) ((((unsupported)) ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).x_check_art_dict)) ((xart_dict)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xlines)))) ((((((xself).xserver).xover)) ((((unsupported)) ((xstart)) ((xlast)))))))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xart_dict)))) ((((unsupported)) ((xlines)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xart_num)) ((xstart)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xart_num)) ((xlast)))
                        bogusForceDataize.write ((((xself).x_check_art_dict)) ((xart_dict)))
                xtest_xhdr.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xname)))) ((((((xself).xserver).xgroup)) (((xself).xGROUP_NAME)))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xlines)))) ((((((xself).xserver).xxhdr)) ("subject") ((xlast)))))
                        (((unsupported)) ((xline)) ((xlines)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstr)) ((((xtype)) ((((unsupported)) ((xline)) (1))))))
                xcheck_article_resp.write
                  [xself xresp xarticle xart_num]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xarticle)) (((xnntplib).xArticleInfo)))
                        (((unsupported)) ((xart_num)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xarticle).xnumber)) ((xart_num)))
                        (((unsupported)) ((xline)) (((xarticle).xlines)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xline)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) (((xarticle).xlines)) ((1.neg)))) ((((unsupported)) (".") (".n") (".rn"))))
                xtest_article_head_body.write
                  [xself]
                    memory > xfiltered_lines
                    memory > xfiltered_head_lines
                    memory > xblacklist
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xname)))) ((((((xself).xserver).xgroup)) (((xself).xGROUP_NAME)))))
                        (((unsupported)) ((xart_num)) ((((unsupported)) ((xlast)) ((xfirst)) (((xlast).sub 1)))))
                          seq
                            (((unsupported)) (((xnntplib).xNNTPTemporaryError)))
                              (((unsupported)) ((((unsupported)) ((xresp)) ((xhead)))) ((((((xself).xserver).xhead)) ((xart_num)))))
                              seq
                                ((((((xe).xresponse).xstartswith)) ("423 ")).not).if
                                  (((unsupported)) 0)
                                (((unsupported)) 0)
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("could not find a suitable article number"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("221 "))) ((xresp)))
                        bogusForceDataize.write ((((xself).xcheck_article_resp)) ((xresp)) ((xhead)) ((xart_num)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xbody)))) ((((((xself).xserver).xbody)) ((xart_num)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("222 "))) ((xresp)))
                        bogusForceDataize.write ((((xself).xcheck_article_resp)) ((xresp)) ((xbody)) ((xart_num)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xarticle)))) ((((((xself).xserver).xarticle)) ((xart_num)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("220 "))) ((xresp)))
                        bogusForceDataize.write ((((xself).xcheck_article_resp)) ((xresp)) ((xarticle)) ((xart_num)))
                        xblacklist.write (((unsupported)) (((((xline).xstartswith)) ("X-Antivirus"))))
                        xfiltered_head_lines.write (((unsupported)) ((xline)) ((xline)) (((xhead).xlines)) (((((xblacklist)) ((xline))).not)))
                        xfiltered_lines.write (((unsupported)) ((xline)) ((xline)) (((xarticle).xlines)) (((((xblacklist)) ((xline))).not)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfiltered_lines)) ((((xfiltered_head_lines).add (((unsupported)) (""))).add ((xbody).xlines))))
                xtest_capabilities.write
                  [xself]
                    memory > x_check_caps
                    seq > @
                      seq
                        x_check_caps.write
                          [xcaps]
                            memory > xcaps_list
                            seq > @
                              seq
                                xcaps_list.write (((unsupported)) ((xcaps)) ("LIST"))
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xcaps_list)) ((((unsupported)) ((xlist)) ((xtuple)))))
                                bogusForceDataize.write ((((xself).xassertIn)) ("OVERVIEW.FMT") ((xcaps_list)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((xself).xserver).xnntp_version)) (2))
                        bogusForceDataize.write (((x_check_caps)) ((((((xself).xserver).xgetcapabilities)) 0)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcaps)))) ((((((xself).xserver).xcapabilities)) 0)))
                        bogusForceDataize.write (((x_check_caps)) ((xcaps)))
                xtest_zlogin.write
                  [xself]
                    memory > xbadpw
                    memory > xbaduser
                    seq > @
                      seq
                        xbaduser.write "notarealuser"
                        xbadpw.write "notarealpassword"
                        (((unsupported)) (((xself).xassertRaises)) (((xnntplib).xNNTPError)) ((((xself).xserver).xlogin)) ((xbaduser)) ((xbadpw)) (FALSE))
                xtest_zzquit.write
                  [xself]
                    memory > xcls
                    seq > @
                      seq
                        xcls.write (((xtype)) ((xself)))
                        (((unsupported)) 0)
                          bogusForceDataize.write (((((xself).xserver).xquit)) 0)
                          (((unsupported)) (((xcls).xserver)) ("None: is there a None literal in the EO language?"))
                xwrap_methods.write
                  [xcls]
                    memory > xmeth
                    memory > xwrap_meth
                    seq > @
                      (((unsupported)) 0)
                        xwrap_meth.write
                          [xmeth]
                            memory > xwrapped
                            seq > @
                              seq
                                xwrapped.write
                                  [xself]
                                    seq > @
                                      (((unsupported)) 0)
                                        (((unsupported)) (((((xsupport).xtransient_internet)) (((xself).xNNTP_HOST)))))
                                          bogusForceDataize.write (((xmeth)) ((xself)))
                                (((unsupported)) ((xwrapped)))
                        (((unsupported)) ((xname)) ((((xdir)) ((xcls)))))
                          seq
                            (((((xname).xstartswith)) ("test_")).not).if
                              (((unsupported)) 0)
                            xmeth.write (((xgetattr)) ((xcls)) ((xname)))
                            ((((xcallable)) ((xmeth))).not).if
                              (((unsupported)) 0)
                            bogusForceDataize.write (((xsetattr)) ((xcls)) ((xname)) ((((xwrap_meth)) ((xmeth)))))
                xtest_with_statement.write
                  [xself]
                    memory > xis_connected
                    seq > @
                      seq
                        xis_connected.write
                          []
                            seq > @
                              seq
                                ((((xhasattr)) ((xserver)) ("file")).not).if
                                  (((unsupported)) (FALSE))
                                (((unsupported)) ((((unsupported)) ((xOSError)) ((xEOFError)))))
                                  bogusForceDataize.write ((((xserver).xhelp)) 0)
                                  (((unsupported)) (FALSE))
                                (((unsupported)) (TRUE))
                        (((unsupported)) ((xSSLError)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).xNNTP_CLASS)) (((xself).xNNTP_HOST)) ((xTIMEOUT)) (FALSE))) ((xserver)))
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xis_connected)) 0)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xserver).xhelp)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((xis_connected)) 0)))
                            (((unsupported)) ((((unsupported)) (((xself).xNNTP_CLASS)) (((xself).xNNTP_HOST)) ((xTIMEOUT)) (FALSE))) ((xserver)))
                              bogusForceDataize.write ((((xserver).xquit)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((xis_connected)) 0)))
                          seq
                            ((((xre).xsearch)) ("(?i)KEY.TOO.SMALL") (((xssl_err).xreason))).if
                              (((unsupported)) (((((xunittest).xSkipTest)) ("Got {ssl_err} connecting to {self.NNTP_HOST!r}"))))
                            (((unsupported)) 0)
            bogusForceDataize.write ((((xNetworkedNNTPTestsMixin).xwrap_methods)) 0)
            xEOF_ERRORS.write (((unsupported)) ((xEOFError)))
            (((unsupported)) ((xssl)) ("None: is there a None literal in the EO language?")).if
              (((unsupported)) ((xEOF_ERRORS)) ((((unsupported)) (((xssl).xSSLEOFError)))))
            (((unsupported)) ((xNetworkedNNTPTestsMixin)) (((xunittest).xTestCase)))
              seq
                xNNTP_HOST.write "news.trigofacile.com"
                xGROUP_NAME.write "fr.comp.lang.python"
                xGROUP_PAT.write "fr.comp.lang.*"
                xDESC.write "Python"
                xNNTP_CLASS.write (xNNTP)
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xrequires)) ("network"))
                        (((unsupported)) (((((xsupport).xtransient_internet)) (((xcls).xNNTP_HOST)))))
                          (((unsupported)) ((xSSLError)) ((xEOF_ERRORS)))
                            (((unsupported)) (((xcls).xserver)) ((((unsupported)) (((xcls).xNNTP_CLASS)) (((xcls).xNNTP_HOST)) ((xTIMEOUT)) (FALSE))))
                            seq
                              ((((xre).xsearch)) ("(?i)KEY.TOO.SMALL") (((xssl_err).xreason))).if
                                (((unsupported)) (((((xunittest).xSkipTest)) ("{cls} got {ssl_err} connecting to {cls.NNTP_HOST!r}"))))
                              (((unsupported)) 0)
                            (((unsupported)) (((((xunittest).xSkipTest)) ("{cls} got EOF error on connecting to {cls.NNTP_HOST!r}"))))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xcls).xserver)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((((xcls).xserver).xquit)) 0)
            (((unsupported)) ((xNetworkedNNTPTests)) (((((xunittest).xskipUnless)) ((xssl)) ("requires SSL support"))))
              seq
                xNNTP_HOST.write "nntp.aioe.org"
                xGROUP_NAME.write "aioe.test"
                xGROUP_PAT.write "aioe.*"
                xDESC.write "test"
                xNNTP_CLASS.write (((xgetattr)) ((xnntplib)) ("NNTP_SSL") ("None: is there a None literal in the EO language?"))
                xtest_list.write "None: is there a None literal in the EO language?"
                xtest_starttls.write "None: is there a None literal in the EO language?"
            (((unsupported)) (((xio).xRawIOBase)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xhandler]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xio).xRawIOBase).x__init__)) ((xself)))
                        (((unsupported)) (((xself).xc2s)) (((((xio).xBytesIO)) 0)))
                        (((unsupported)) (((xself).xs2c)) (((((xio).xBytesIO)) 0)))
                        (((unsupported)) (((xself).xhandler)) ((xhandler)))
                        bogusForceDataize.write (((((xself).xhandler).xstart)) ((((xself).xc2s).xreadline)) (((xself).xpush_data)))
                xreadable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)) (TRUE))
                xpush_data.write
                  [xself xdata]
                    memory > xpos
                    seq > @
                      seq
                        unsupported
                        xpos.write (((((xself).xs2c).xtell)) 0)
                        bogusForceDataize.write (((((xself).xs2c).xseek)) (0) (2))
                        bogusForceDataize.write (((((xself).xs2c).xwrite)) ((xdata)))
                        bogusForceDataize.write (((((xself).xs2c).xseek)) ((xpos)))
                xwrite.write
                  [xself xb]
                    memory > xpos
                    seq > @
                      seq
                        unsupported
                        xpos.write (((((xself).xc2s).xtell)) 0)
                        bogusForceDataize.write (((((xself).xc2s).xwrite)) ((xb)))
                        bogusForceDataize.write (((((xself).xc2s).xseek)) ((xpos)))
                        bogusForceDataize.write (((((xself).xhandler).xprocess_pending)) 0)
                        (((unsupported)) ((((xlen)) ((xb)))))
                xreadinto.write
                  [xself xbuf]
                    memory > xn
                    memory > xb
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xself).xhandler).xprocess_pending)) 0)
                        xb.write (((((xself).xs2c).xread)) ((((xlen)) ((xbuf)))))
                        xn.write (((xlen)) ((xb)))
                        (((unsupported)) ((((unsupported)) ((xbuf)) ((((unsupported)) ((xn)))))) ((xb)))
                        (((unsupported)) ((xn)))
            xmake_mock_file.write
              [xhandler]
                memory > xfile
                memory > xsio
                seq > @
                  seq
                    xsio.write (((x_NNTPServerIO)) ((xhandler)))
                    xfile.write ((((xio).xBufferedRWPair)) ((xsio)) ((xsio)))
                    (((unsupported)) ((((unsupported)) ((xsio)) ((xfile)))))
            (((unsupported)) 0)
              seq
                xhandler_class.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        bogusForceDataize.write ((((xself).xmake_server)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtearDown)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xserver)))))
                xmake_server.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhandler)) (((((xself).xhandler_class)) 0)))
                        (((unsupported)) ((((unsupported)) (((xself).xsio)) ((xfile)))) ((((xmake_mock_file)) (((xself).xhandler)))))
                        (((unsupported)) (((xself).xserver)) (((((xnntplib).x_NNTPBase)) ((xfile)) ("test.server") ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                        (((unsupported)) (((xself).xserver)))
            (((unsupported)) ((xMockedNNTPTestsMixin)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                      (((unsupported)) (((xself).xmake_server)) (TRUE))
            (((unsupported)) 0)
              seq
                unsupported
                xwelcome.write "200 NNTP mock server"
                xstart.write
                  [xself xreadline xpush_data]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xin_body)) (FALSE))
                        (((unsupported)) (((xself).xallow_posting)) (TRUE))
                        (((unsupported)) (((xself).x_readline)) ((xreadline)))
                        (((unsupported)) (((xself).x_push_data)) ((xpush_data)))
                        (((unsupported)) (((xself).x_logged_in)) (FALSE))
                        (((unsupported)) (((xself).x_user_sent)) (FALSE))
                        bogusForceDataize.write ((((xself).xhandle_welcome)) 0)
                x_decode.write
                  [xself xdata]
                    seq > @
                      (((unsupported)) ((((xstr)) ((xdata)) ("utf-8") ("surrogateescape"))))
                xprocess_pending.write
                  [xself]
                    memory > xmeth
                    memory > xline
                    seq > @
                      seq
                        ((xself).xin_body).if
                          seq
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xline.write ((((xself).x_readline)) 0)
                                    ((xline).not).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write (((((xself).xbody).xappend)) ((xline)))
                                    ((xline).eq ".rn").if
                                      (((unsupported)) 0)
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) ((((unsupported)) ((xmeth)) ((xtokens)))) (((xself).xbody_callback)))
                                (((unsupported)) ((xmeth)) ((((unsupported)) ((xtokens)))) (((xself).xbody)))
                              seq
                                (((unsupported)) (((xself).xbody_callback)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)) (((xself).xbody)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)) (((xself).xin_body)) (FALSE))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xline.write ((((xself).x_decode)) (((((xself).x_readline)) 0)))
                                ((xline).not).if
                                  (((unsupported)) 0)
                                (((((xline).xendswith)) ("rn")).not).if
                                  (((unsupported)) ((((xValueError)) (((((((unsupported)) 0).xformat)) ((xline)))))))
                                xline.write (((unsupported)) ((xline)) ((((unsupported)) ((2.neg)))))
                                (((unsupported)) ((((unsupported)) ((xcmd)) ((((unsupported)) ((xtokens)))))) (((((xline).xsplit)) 0)))
                                xmeth.write (((xgetattr)) ((xself)) (("handle_".add ((((xcmd).xupper)) 0))) ("None: is there a None literal in the EO language?"))
                                (((unsupported)) ((xmeth)) ("None: is there a None literal in the EO language?")).if
                                  bogusForceDataize.write ((((xself).xhandle_unknown)) 0)
                                  (((unsupported)) ((xException)))
                                    bogusForceDataize.write (((xmeth)) ((((unsupported)) ((xtokens)))))
                                    (((unsupported)) ((((xValueError)) (((("command failed: {!r}".xformat)) ((xline)))))) ((xe)))
                                    ((xself).xin_body).if
                                      seq
                                        (((unsupported)) (((xself).xbody_callback)) ((((unsupported)) ((xmeth)) ((xtokens)))))
                                        (((unsupported)) (((xself).xbody)) ((((unsupported)) 0)))
                xexpect_body.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).xin_body)) (TRUE))
                xpush_data.write
                  [xself xdata]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).x_push_data)) ((xdata)))
                xpush_lit.write
                  [xself xlit]
                    seq > @
                      seq
                        unsupported
                        xlit.write ((((xtextwrap).xdedent)) ((xlit)))
                        xlit.write (((("rn".xjoin)) (((((xlit).xsplitlines)) 0))).add "rn")
                        xlit.write ((((xlit).xencode)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xpush_data)) ((xlit)))
                xhandle_unknown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ("500 What?"))
                xhandle_welcome.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) (((xself).xwelcome)))
                xhandle_QUIT.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ("205 Bye!"))
                xhandle_DATE.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ("111 20100914001155"))
                xhandle_GROUP.write
                  [xself xgroup]
                    seq > @
                      ((xgroup).eq "fr.comp.lang.python").if
                        bogusForceDataize.write ((((xself).xpush_lit)) ("211 486 761 1265 fr.comp.lang.python"))
                        bogusForceDataize.write ((((xself).xpush_lit)) (((("411 No such group {}".xformat)) ((xgroup)))))
                xhandle_HELP.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                xhandle_STAT.write
                  [xself xmessage_spec]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xmessage_spec)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ("412 No newsgroup selected"))
                          ((xmessage_spec).eq "3000234").if
                            bogusForceDataize.write ((((xself).xpush_lit)) ("223 3000234 <45223423@example.com>"))
                            ((xmessage_spec).eq "<45223423@example.com>").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ("223 0 <45223423@example.com>"))
                              bogusForceDataize.write ((((xself).xpush_lit)) ("430 No Such Article Found"))
                xhandle_NEXT.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ("223 3000237 <668929@example.org> retrieved"))
                xhandle_LAST.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush_lit)) ("223 3000234 <45223423@example.com> retrieved"))
                xhandle_LIST.write
                  [xself xaction xparam]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xaction)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                          ((xaction).eq "ACTIVE").if
                            ((xparam).eq "*distutils*").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                              bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                            ((xaction).eq "OVERVIEW.FMT").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                              ((xaction).eq "NEWSGROUPS").if
                                seq
                                  (((unsupported)) ((((unsupported)) ((xparam)) ("None: is there a None literal in the EO language?"))))
                                  ((xparam).eq "comp.lang.python").if
                                    bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                                    ((xparam).eq "comp.lang.python*").if
                                      bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                                      bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                                bogusForceDataize.write ((((xself).xpush_lit)) ("501 Unknown LIST keyword"))
                xhandle_NEWNEWS.write
                  [xself xgroup xdate_str xtime_str]
                    seq > @
                      ((((xgroup).eq "comp.lang.python").and ((xdate_str).eq "20100913")).and ((xtime_str).eq "082004")).if
                        bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                        ((((xgroup).eq "comp.lang.python").and ((xdate_str).eq "100913")).and ((xtime_str).eq "082004")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                          ((((xgroup).eq "comp.lang.python").and (((unsupported)) ((xdate_str)) ((((unsupported)) ("20100101") ("100101"))))).and ((xtime_str).eq "090000")).if
                            bogusForceDataize.write ((((xself).xpush_lit)) ((("too long line".mul 3000).add "n.")))
                            bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                xhandle_XOVER.write
                  [xself xmessage_spec]
                    seq > @
                      ((xmessage_spec).eq "57-59").if
                        bogusForceDataize.write ((((xself).xpush_lit)) ("224 Overview information for 57-58 followsn57tRe: ANN: New Plone book with strong Python (and Zope) themes throughouttDoug Hellmann <doug.hellmann-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>tSat, 19 Jun 2010 18:04:08 -0400t<4FD05F05-F98B-44DC-8111-C6009C925F0C@gmail.com>t<hvalf7$ort$1@dough.gmane.org>t7103t16tXref: news.gmane.io gmane.comp.python.authors:57n58tLooking for a few good bloggerstDoug Hellmann <doug.hellmann-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>tThu, 22 Jul 2010 09:14:14 -0400t<A29863FA-F388-40C3-AA25-0FD06B09B5BF@gmail.com>tt6683t16tn59tRe: Message d'erreur incompréhensible (par moi)tEric Brunel <eric.brunel@pragmadev.nospam.com>tWed, 15 Sep 2010 18:09:15 +0200t<eric.brunel-2B8B56.18091515092010@news.wanadoo.fr>t<4c90ec87$0$32425$ba4acef3@reader.news.orange.fr>t1641t27tXref: saria.nerim.net fr.comp.lang.python:1265n.n"))
                        bogusForceDataize.write ((((xself).xpush_lit)) ((((unsupported)) 0)))
                xhandle_POST.write
                  [xself xbody]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xbody)) ("None: is there a None literal in the EO language?")).if
                          ((xself).xallow_posting).if
                            seq
                              bogusForceDataize.write ((((xself).xpush_lit)) ("340 Input article; end with <CR-LF>.<CR-LF>"))
                              bogusForceDataize.write ((((xself).xexpect_body)) 0)
                            bogusForceDataize.write ((((xself).xpush_lit)) ("440 Posting not permitted"))
                          seq
                            (((unsupported)) (((xself).xallow_posting)))
                            bogusForceDataize.write ((((xself).xpush_lit)) ("240 Article received OK"))
                            (((unsupported)) (((xself).xposted_body)) ((xbody)))
                xhandle_IHAVE.write
                  [xself xmessage_id xbody]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xbody)) ("None: is there a None literal in the EO language?")).if
                          (((xself).xallow_posting).and ((xmessage_id).eq "<i.am.an.article.you.will.want@example.com>")).if
                            seq
                              bogusForceDataize.write ((((xself).xpush_lit)) ("335 Send it; end with <CR-LF>.<CR-LF>"))
                              bogusForceDataize.write ((((xself).xexpect_body)) 0)
                            bogusForceDataize.write ((((xself).xpush_lit)) ("435 Article not wanted"))
                          seq
                            (((unsupported)) (((xself).xallow_posting)))
                            bogusForceDataize.write ((((xself).xpush_lit)) ("235 Article transferred OK"))
                            (((unsupported)) (((xself).xposted_body)) ((xbody)))
                xsample_head.write (((unsupported)) 0)
                xsample_body.write (((unsupported)) 0)
                xsample_article.write (((xsample_head).add "nn").add (xsample_body))
                xhandle_ARTICLE.write
                  [xself xmessage_spec]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xmessage_spec)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ("220 3000237 <45223423@example.com>"))
                          ((xmessage_spec).eq "<45223423@example.com>").if
                            bogusForceDataize.write ((((xself).xpush_lit)) ("220 0 <45223423@example.com>"))
                            ((xmessage_spec).eq "3000234").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ("220 3000234 <45223423@example.com>"))
                              seq
                                bogusForceDataize.write ((((xself).xpush_lit)) ("430 No Such Article Found"))
                                (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xpush_lit)) (((xself).xsample_article)))
                        bogusForceDataize.write ((((xself).xpush_lit)) ("."))
                xhandle_HEAD.write
                  [xself xmessage_spec]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xmessage_spec)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ("221 3000237 <45223423@example.com>"))
                          ((xmessage_spec).eq "<45223423@example.com>").if
                            bogusForceDataize.write ((((xself).xpush_lit)) ("221 0 <45223423@example.com>"))
                            ((xmessage_spec).eq "3000234").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ("221 3000234 <45223423@example.com>"))
                              seq
                                bogusForceDataize.write ((((xself).xpush_lit)) ("430 No Such Article Found"))
                                (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xpush_lit)) (((xself).xsample_head)))
                        bogusForceDataize.write ((((xself).xpush_lit)) ("."))
                xhandle_BODY.write
                  [xself xmessage_spec]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xmessage_spec)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush_lit)) ("222 3000237 <45223423@example.com>"))
                          ((xmessage_spec).eq "<45223423@example.com>").if
                            bogusForceDataize.write ((((xself).xpush_lit)) ("222 0 <45223423@example.com>"))
                            ((xmessage_spec).eq "3000234").if
                              bogusForceDataize.write ((((xself).xpush_lit)) ("222 3000234 <45223423@example.com>"))
                              seq
                                bogusForceDataize.write ((((xself).xpush_lit)) ("430 No Such Article Found"))
                                (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xpush_lit)) (((xself).xsample_body)))
                        bogusForceDataize.write ((((xself).xpush_lit)) ("."))
                xhandle_AUTHINFO.write
                  [xself xcred_type xdata]
                    seq > @
                      ((xself).x_logged_in).if
                        bogusForceDataize.write ((((xself).xpush_lit)) ("502 Already Logged In"))
                        ((xcred_type).eq "user").if
                          ((xself).x_user_sent).if
                            bogusForceDataize.write ((((xself).xpush_lit)) ("482 User Credential Already Sent"))
                            seq
                              bogusForceDataize.write ((((xself).xpush_lit)) ("381 Password Required"))
                              (((unsupported)) (((xself).x_user_sent)) (TRUE))
                          ((xcred_type).eq "pass").if
                            seq
                              bogusForceDataize.write ((((xself).xpush_lit)) ("281 Login Successful"))
                              (((unsupported)) (((xself).x_logged_in)) (TRUE))
                            (((unsupported)) ((((xException)) (((("Unknown cred type {}".xformat)) ((xcred_type)))))))
            (((unsupported)) ((xNNTPv1Handler)))
              seq
                unsupported
                xhandle_CAPABILITIES.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write (((unsupported)) 0)
                        (((xself).x_logged_in).not).if
                          bogusForceDataize.write ((((xself).xpush_lit)) (((((xfmt).xformat)) ("n            AUTHINFO USER"))))
                          bogusForceDataize.write ((((xself).xpush_lit)) (((((xfmt).xformat)) (""))))
                xhandle_MODE.write
                  [xself x_]
                    seq > @
                      (((unsupported)) ((((xException)) ("MODE READER sent despite READER has been advertised"))))
                xhandle_OVER.write
                  [xself xmessage_spec]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xhandle_XOVER)) ((xmessage_spec)))))
            (((unsupported)) ((xNNTPv2Handler)))
              seq
                unsupported
                xhandle_CAPABILITIES.write
                  [xself]
                    seq > @
                      (((xself).x_logged_in).not).if
                        bogusForceDataize.write ((((xself).xpush_lit)) ("480 You must log in."))
                        bogusForceDataize.write ((((((xsuper)) 0).xhandle_CAPABILITIES)) 0)
            (((unsupported)) ((xNNTPv2Handler)))
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_switched)) (FALSE))
                xhandle_CAPABILITIES.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write (((unsupported)) 0)
                        ((xself).x_switched).if
                          bogusForceDataize.write ((((xself).xpush_lit)) (((((xfmt).xformat)) (""))))
                          bogusForceDataize.write ((((xself).xpush_lit)) (((((xfmt).xformat)) ("MODE-"))))
                xhandle_MODE.write
                  [xself xwhat]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).x_switched).not).and ((xwhat).eq "reader"))))
                        (((unsupported)) (((xself).x_switched)) (TRUE))
                        bogusForceDataize.write ((((xself).xpush_lit)) ("200 Posting allowed"))
            (((unsupported)) 0)
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                xtest_welcome.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xwelcome)) ((((xself).xhandler).xwelcome)))
                xtest_authinfo.write
                  [xself]
                    seq > @
                      seq
                        (((xself).xnntp_version).eq 2).if
                          bogusForceDataize.write ((((xself).xassertIn)) ("AUTHINFO") ((((xself).xserver).x_caps)))
                        bogusForceDataize.write (((((xself).xserver).xlogin)) ("testuser") ("testpw"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("AUTHINFO") ((((xself).xserver).x_caps)))
                xtest_date.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xdate)))) ((((((xself).xserver).xdate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("111 20100914001155"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdate)) (((((xdatetime).xdatetime)) (2010) (9) (14) (0) (11) (55))))
                xtest_quit.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xsio).xclosed)))
                        xresp.write (((((xself).xserver).xquit)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("205 Bye!"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xsio).xclosed)))
                xtest_help.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xhelp)))) ((((((xself).xserver).xhelp)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("100 Legal commands"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhelp)) ((((unsupported)) ("  authinfo user Name|pass Password|generic <prog> <args>") ("  date") ("  help") ("Report problems to <root@example.org>"))))
                xtest_list.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xlist)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xgroups)))) (6))
                        xg.write (((unsupported)) ((xgroups)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ((((xGroupInfo)) ("comp.lang.python.announce") ("0000001153") ("0000000993") ("m"))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xlist)) ("*distutils*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xgroups)))) (2))
                        xg.write (((unsupported)) ((xgroups)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ((((xGroupInfo)) ("gmane.comp.python.distutils.devel") ("0000014104") ("0000000001") ("m"))))
                xtest_stat.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xart_num)) ((xmessage_id)))) ((((((xself).xserver).xstat)) (3000234))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("223 3000234 <45223423@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xart_num)) ((xmessage_id)))) ((((((xself).xserver).xstat)) ("<45223423@example.com>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("223 0 <45223423@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xstat)) ("<non.existent.id>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("430 No Such Article Found"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xstat)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("412 No newsgroup selected"))
                xtest_next.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xart_num)) ((xmessage_id)))) ((((((xself).xserver).xnext)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("223 3000237 <668929@example.org> retrieved"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<668929@example.org>"))
                xtest_last.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xart_num)) ((xmessage_id)))) ((((((xself).xserver).xlast)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("223 3000234 <45223423@example.com> retrieved"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                xtest_description.write
                  [xself]
                    memory > xdesc
                    seq > @
                      seq
                        xdesc.write (((((xself).xserver).xdescription)) ("comp.lang.python"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdesc)) ("The Python computer language."))
                        xdesc.write (((((xself).xserver).xdescription)) ("comp.lang.pythonx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdesc)) (""))
                xtest_descriptions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xdescriptions)) ("comp.lang.python"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("215 Descriptions in form \"group description\"."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgroups)) ((((unsupported)) ("comp.lang.python") ("The Python computer language."))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xdescriptions)) ("comp.lang.python*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgroups)) ((((unsupported)) ("comp.lang.python") ("The Python computer language.") ("comp.lang.python.announce") ("Announcements about the Python language. (Moderated)"))))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xgroups)))) ((((((xself).xserver).xdescriptions)) ("comp.lang.pythonx"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgroups)) ((((unsupported)) 0)))
                xtest_group.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xcount)) ((xfirst)) ((xlast)) ((xgroup)))) ((((((xself).xserver).xgroup)) ("fr.comp.lang.python"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("211 "))) ((xresp)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfirst)) (761))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlast)) (1265))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcount)) (486))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xgroup)) ("fr.comp.lang.python"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xgroup)) ("comp.lang.python.devel"))
                        xexc.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xexc).xresponse).xstartswith)) ("411 No such group"))) (((xexc).xresponse)))
                xtest_newnews.write
                  [xself]
                    memory > xexpected
                    memory > xdt
                    seq > @
                      seq
                        xdt.write ((((xdatetime).xdatetime)) (2010) (9) (13) (8) (20) (4))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xids)))) ((((((xself).xserver).xnewnews)) ("comp.lang.python") ((xdt)))))
                        xexpected.write ((("230 list of newsarticles (NNTP v{0}) created after Mon Sep 13 08:20:04 2010 follows".xformat)) (((xself).xnntp_version)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xids)) ((((unsupported)) ("<a4929a40-6328-491a-aaaf-cb79ed7309a2@q2g2000vbk.googlegroups.com>") ("<f30c0419-f549-4218-848f-d7d0131da931@y3g2000vbm.googlegroups.com>"))))
                        xdt.write ((((xdatetime).xdatetime)) (2010) (9) (13) (8) (20) (4))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xids)))) ((((((xself).xserver).xnewnews)) ("fr.comp.lang.python") ((xdt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("230 An empty list of newsarticles follows"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xids)) ((((unsupported)) 0)))
                x_check_article_body.write
                  [xself xlines]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xlines)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) ((xlines)) ((1.neg))).xdecode)) ("utf-8"))) ("-- Signed by André."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((2.neg)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((3.neg)))) (".Here is a dot-starting line."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((4.neg)))) ("This is just a test article."))
                x_check_article_head.write
                  [xself xlines]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xlines)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) (0))) ("From: \"Demo User\" <nobody@example.net>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) (3))) ("Message-ID: <i.am.an.article.you.will.want@example.com>"))
                x_check_article_data.write
                  [xself xlines]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xlines)))) (9))
                        bogusForceDataize.write ((((xself).x_check_article_head)) ((((unsupported)) ((xlines)) ((((unsupported)) (4))))))
                        bogusForceDataize.write ((((xself).x_check_article_body)) ((((unsupported)) ((xlines)) ((((unsupported)) ((4.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) (4))) (""))
                xtest_article.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xarticle)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("220 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_data)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xarticle)) (3000234))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("220 3000234 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_data)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xarticle)) ("<45223423@example.com>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("220 0 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_data)) ((xlines)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xarticle)) ("<non-existent@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("430 No Such Article Found"))
                xtest_article_file.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) 0)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((unsupported)) ((((xself).xserver).xarticle)) ((xf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("220 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((((unsupported)) 0)))
                        xdata.write ((((xf).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdata).xstartswith)) ("From: \"Demo User\" <nobody@example.net>rnSubject: I am just a test articlern"))) ((((xascii)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdata).xendswith)) ("This is just a test article.rn.Here is a dot-starting line.rnrn-- Signed by Andrxc3xa9.rn"))) ((((xascii)) ((xdata)))))
                xtest_head.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xhead)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("221 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_head)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xhead)) (3000234))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("221 3000234 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_head)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xhead)) ("<45223423@example.com>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("221 0 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_head)) ((xlines)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xhead)) ("<non-existent@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("430 No Such Article Found"))
                xtest_head_file.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) 0)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((unsupported)) ((((xself).xserver).xhead)) ((xf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("221 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((((unsupported)) 0)))
                        xdata.write ((((xf).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdata).xstartswith)) ("From: \"Demo User\" <nobody@example.net>rnSubject: I am just a test articlern"))) ((((xascii)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xdata).xendswith)) ("This is just a test article.rn.Here is a dot-starting line.rnrn-- Signed by Andrxc3xa9.rn"))) ((((xascii)) ((xdata)))))
                xtest_body.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xbody)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("222 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_body)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xbody)) (3000234))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("222 3000234 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_body)) ((xlines)))
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((((xself).xserver).xbody)) ("<45223423@example.com>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("222 0 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).x_check_article_body)) ((xlines)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xbody)) ("<non-existent@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("430 No Such Article Found"))
                xtest_body_file.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) 0)
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xinfo)))) ((((unsupported)) ((((xself).xserver).xbody)) ((xf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ("222 3000237 <45223423@example.com>"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xmessage_id)) ((xlines)))) ((xinfo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000237))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmessage_id)) ("<45223423@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((((unsupported)) 0)))
                        xdata.write ((((xf).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xdata).xstartswith)) ("From: \"Demo User\" <nobody@example.net>rnSubject: I am just a test articlern"))) ((((xascii)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdata).xendswith)) ("This is just a test article.rn.Here is a dot-starting line.rnrn-- Signed by Andrxc3xa9.rn"))) ((((xascii)) ((xdata)))))
                xcheck_over_xover_resp.write
                  [xself xresp xoverviews]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xresp).xstartswith)) ("224 "))) ((xresp)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xoverviews)))) (3))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xover)))) ((((unsupported)) ((xoverviews)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (57))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xover)) ((((unsupported)) ("from") ("Doug Hellmann <doug.hellmann-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>") ("subject") ("Re: ANN: New Plone book with strong Python (and Zope) themes throughout") ("date") ("Sat, 19 Jun 2010 18:04:08 -0400") ("message-id") ("<4FD05F05-F98B-44DC-8111-C6009C925F0C@gmail.com>") ("references") ("<hvalf7$ort$1@dough.gmane.org>") (":bytes") ("7103") (":lines") ("16") ("xref") ("news.gmane.io gmane.comp.python.authors:57"))))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xover)))) ((((unsupported)) ((xoverviews)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xover)) ("xref"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((unsupported)) ((xart_num)) ((xover)))) ((((unsupported)) ((xoverviews)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xover)) ("subject"))) ("Re: Message d'erreur incompréhensible (par moi)"))
                xtest_xover.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xoverviews)))) ((((((xself).xserver).xxover)) (57) (59))))
                        bogusForceDataize.write ((((xself).xcheck_over_xover_resp)) ((xresp)) ((xoverviews)))
                xtest_over.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xresp)) ((xoverviews)))) ((((((xself).xserver).xover)) ((((unsupported)) (57) (59))))))
                        bogusForceDataize.write ((((xself).xcheck_over_xover_resp)) ((xresp)) ((xoverviews)))
                xsample_post.write "From: \"Demo User\" <nobody@example.net>rnSubject: I am just a test articlernContent-Type: text/plain; charset=UTF-8; format=flowedrnMessage-ID: <i.am.an.article.you.will.want@example.com>rnrnThis is just a test article.rn.Here is a dot-starting line.rnrn-- Signed by Andrxc3xa9.rn"
                x_check_posted_body.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((xself).xhandler).xposted_body)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xlines)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((1.neg)))) (".rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((2.neg)))) ("-- Signed by Andrxc3xa9.rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((3.neg)))) ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) ((4.neg)))) ("..Here is a dot-starting line.rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlines)) (0))) ("From: \"Demo User\" <nobody@example.net>rn"))
                x_check_post_ihave_sub.write
                  [xself xfunc xfile_factory]
                    memory > xfunc_args
                    memory > xpost
                    memory > xresp
                    seq > @
                      (((unsupported)) 0)
                        xpost.write ((xself).xsample_post)
                        xfunc_args.write ((xargs).add (((unsupported)) ((((xfile_factory)) ((xpost))))))
                        (((unsupported)) ((((xself).xhandler).xposted_body)) ("None: is there a None literal in the EO language?"))
                        xresp.write (((xfunc)) ((((unsupported)) ((xfunc_args)))))
                        bogusForceDataize.write ((((xself).x_check_posted_body)) 0)
                        xpost.write (((((xself).xsample_post).xreplace)) ("rn") ("n"))
                        xfunc_args.write ((xargs).add (((unsupported)) ((((xfile_factory)) ((xpost))))))
                        (((unsupported)) ((((xself).xhandler).xposted_body)) ("None: is there a None literal in the EO language?"))
                        xresp.write (((xfunc)) ((((unsupported)) ((xfunc_args)))))
                        bogusForceDataize.write ((((xself).x_check_posted_body)) 0)
                        (((unsupported)) ((xresp)))
                xcheck_post_ihave.write
                  [xself xfunc xsuccess_resp]
                    memory > xresp
                    memory > xiterlines
                    seq > @
                      (((unsupported)) 0)
                        xresp.write (((unsupported)) (((xself).x_check_post_ihave_sub)) ((xfunc)) ((((unsupported)) ((xargs)))) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xsuccess_resp)))
                        xresp.write (((unsupported)) (((xself).x_check_post_ihave_sub)) ((xfunc)) ((((unsupported)) ((xargs)))) ((xbytearray)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xsuccess_resp)))
                        xresp.write (((unsupported)) (((xself).x_check_post_ihave_sub)) ((xfunc)) ((((unsupported)) ((xargs)))) (((xio).xBytesIO)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xsuccess_resp)))
                        xiterlines.write
                          [xb]
                            seq > @
                              (((unsupported)) ((((xiter)) ((((unsupported)) (((xb).xsplitlines)) (TRUE))))))
                        xresp.write (((unsupported)) (((xself).x_check_post_ihave_sub)) ((xfunc)) ((((unsupported)) ((xargs)))) ((xiterlines)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xsuccess_resp)))
                        xiterlines.write
                          [xb]
                            seq > @
                              (((unsupported)) ((((xiter)) ((((unsupported)) (((xb).xsplitlines)) (FALSE))))))
                        xresp.write (((unsupported)) (((xself).x_check_post_ihave_sub)) ((xfunc)) ((((unsupported)) ((xargs)))) ((xiterlines)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresp)) ((xsuccess_resp)))
                xtest_post.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_post_ihave)) ((((xself).xserver).xpost)) ("240 Article received OK"))
                        (((unsupported)) ((((xself).xhandler).xallow_posting)) (FALSE))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xpost)) (((xself).xsample_post)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("440 Posting not permitted"))
                xtest_ihave.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_post_ihave)) ((((xself).xserver).xihave)) ("235 Article transferred OK") ("<i.am.an.article.you.will.want@example.com>"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xnntplib).xNNTPTemporaryError)))) ((xcm)))
                          bogusForceDataize.write (((((xself).xserver).xihave)) ("<another.message.id>") (((xself).xsample_post)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xresponse)) ("435 Article not wanted"))
                xtest_too_long_lines.write
                  [xself]
                    memory > xdt
                    seq > @
                      seq
                        xdt.write ((((xdatetime).xdatetime)) (2010) (1) (1) (9) (0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xnntplib).xNNTPDataError)) ((((xself).xserver).xnewnews)) ("comp.lang.python") ((xdt)))
            (((unsupported)) ((xNNTPv1v2TestsMixin)) ((xMockedNNTPTestsMixin)) (((xunittest).xTestCase)))
              seq
                unsupported
                xnntp_version.write 1
                xhandler_class.write (xNNTPv1Handler)
                xtest_caps.write
                  [xself]
                    memory > xcaps
                    seq > @
                      seq
                        xcaps.write (((((xself).xserver).xgetcapabilities)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcaps)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xnntp_version)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xnntp_implementation)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xNNTPv1v2TestsMixin)) ((xMockedNNTPTestsMixin)) (((xunittest).xTestCase)))
              seq
                unsupported
                xnntp_version.write 2
                xhandler_class.write (xNNTPv2Handler)
                xtest_caps.write
                  [xself]
                    memory > xcaps
                    seq > @
                      seq
                        xcaps.write (((((xself).xserver).xgetcapabilities)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcaps)) ((((unsupported)) ("VERSION") ((((unsupported)) ("2") ("3"))) ("IMPLEMENTATION") ((((unsupported)) ("INN") ("2.5.1"))) ("AUTHINFO") ((((unsupported)) ("USER"))) ("HDR") ((((unsupported)) 0)) ("LIST") ((((unsupported)) ("ACTIVE") ("ACTIVE.TIMES") ("DISTRIB.PATS") ("HEADERS") ("NEWSGROUPS") ("OVERVIEW.FMT"))) ("OVER") ((((unsupported)) 0)) ("POST") ((((unsupported)) 0)) ("READER") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xnntp_version)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).xnntp_implementation)) ("INN 2.5.1"))
            (((unsupported)) ((xMockedNNTPTestsMixin)) (((xunittest).xTestCase)))
              seq
                unsupported
                xnntp_version.write 2
                xhandler_class.write (xCapsAfterLoginNNTPv2Handler)
                xtest_caps_only_after_login.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xserver).x_caps)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((((xself).xserver).xlogin)) ("testuser") ("testpw"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("VERSION") ((((xself).xserver).x_caps)))
            (((unsupported)) ((xMockedNNTPWithReaderModeMixin)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xnntp_version.write 2
                xhandler_class.write (xModeSwitchingNNTPv2Handler)
                xtest_we_are_in_reader_mode_after_connect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)) ("READER") ((((xself).xserver).x_caps)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_decode_header.write
                  [xself]
                    memory > xgives
                    seq > @
                      seq
                        xgives.write
                          [xa xb]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).xdecode_header)) ((xa)))) ((xb)))
                        bogusForceDataize.write (((xgives)) ("") (""))
                        bogusForceDataize.write (((xgives)) ("a plain header") ("a plain header"))
                        bogusForceDataize.write (((xgives)) (" with extra  spaces ") (" with extra  spaces "))
                        bogusForceDataize.write (((xgives)) ("=?ISO-8859-15?Q?D=E9buter_en_Python?=") ("Débuter en Python"))
                        bogusForceDataize.write (((xgives)) ("=?utf-8?q?Re=3A_=5Bsqlite=5D_probl=C3=A8me_avec_ORDER_BY_sur_des_cha?= =?utf-8?q?=C3=AEnes_de_caract=C3=A8res_accentu=C3=A9es?=") ("Re: [sqlite] problème avec ORDER BY sur des chaînes de caractères accentuées"))
                        bogusForceDataize.write (((xgives)) ("Re: =?UTF-8?B?cHJvYmzDqG1lIGRlIG1hdHJpY2U=?=") ("Re: problème de matrice"))
                        bogusForceDataize.write (((xgives)) ("Re: Message d'erreur incompréhensible (par moi)") ("Re: Message d'erreur incompréhensible (par moi)"))
                xtest_parse_overview_fmt.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)) ("Subject:") ("From:") ("Date:") ("Message-ID:") ("References:") (":bytes") (":lines"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines"))))
                        xlines.write (((unsupported)) ("Subject:") ("From:") ("Date:") ("Message-ID:") ("References:") ("Bytes:") ("Lines:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines"))))
                        xlines.write (((unsupported)) ("subject:") ("FROM:") ("DaTe:") ("message-ID:") ("References:") ("BYTES:") ("Lines:"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines"))))
                        xlines.write (((unsupported)) ("Subject:") ("From:") ("Date:") ("Message-ID:") ("References:") (":bytes") (":lines") ("Xref:full") ("Distribution:full"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines") ("xref") ("distribution"))))
                        xlines.write (((unsupported)) ("Subject:") ("From:") ("Date:") ("Message-ID:") ("References:") ("Bytes:") ("Lines:") ("Xref:FULL") ("Distribution:FULL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines") ("xref") ("distribution"))))
                        xlines.write (((unsupported)) ("Subject:") ("From:") ("Date:") ("Message-ID:") ("References:") ("Bytes:") ("Lines:") ("Xref:full"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_overview_fmt)) ((xlines)))) ((((unsupported)) ("subject") ("from") ("date") ("message-id") ("references") (":bytes") (":lines") ("xref"))))
                xtest_parse_overview.write
                  [xself]
                    memory > xoverview
                    memory > xlines
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write (((xnntplib).x_DEFAULT_OVERVIEW_FMT).add (((unsupported)) ("xref")))
                        xlines.write (((unsupported)) ("3000234tI am just a test articlet\"Demo User\" <nobody@example.com>t6 Oct 1998 04:38:40 -0500t<45223423@example.com>t<45454@example.net>t1234t17tXref: news.example.com misc.test:3000363"))
                        xoverview.write ((((xnntplib).x_parse_overview)) ((xlines)) ((xfmt)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xart_num)) ((xfields)))))) ((xoverview)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xart_num)) (3000234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfields)) ((((unsupported)) ("subject") ("I am just a test article") ("from") ("\"Demo User\" <nobody@example.com>") ("date") ("6 Oct 1998 04:38:40 -0500") ("message-id") ("<45223423@example.com>") ("references") ("<45454@example.net>") (":bytes") ("1234") (":lines") ("17") ("xref") ("news.example.com misc.test:3000363"))))
                        xlines.write (((unsupported)) ("3000234tI am just a test articlet\"Demo User\" <nobody@example.com>t6 Oct 1998 04:38:40 -0500t<45223423@example.com>t<45454@example.net>t1234t17tt"))
                        xoverview.write ((((xnntplib).x_parse_overview)) ((xlines)) ((xfmt)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xart_num)) ((xfields)))))) ((xoverview)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xfields)) ("xref"))) ("None: is there a None literal in the EO language?"))
                        xlines.write (((unsupported)) ("3000234tI am just a test articlet\"Demo User\" <nobody@example.com>t6 Oct 1998 04:38:40 -0500t<45223423@example.com>t t1234t17tXref: t"))
                        xoverview.write ((((xnntplib).x_parse_overview)) ((xlines)) ((xfmt)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xart_num)) ((xfields)))))) ((xoverview)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xfields)) ("references"))) (" "))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xfields)) ("xref"))) (""))
                xtest_parse_datetime.write
                  [xself]
                    memory > xgives
                    seq > @
                      seq
                        xgives.write
                          [xa xb]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_parse_datetime)) ((xa)) ((xb)))) (((((xdatetime).xdatetime)) ((((unsupported)) ((xc)))))))
                        bogusForceDataize.write (((xgives)) ("19990623135624") ("None: is there a None literal in the EO language?") (1999) (6) (23) (13) (56) (24))
                        bogusForceDataize.write (((xgives)) ("19990623") ("135624") (1999) (6) (23) (13) (56) (24))
                        bogusForceDataize.write (((xgives)) ("990623") ("135624") (1999) (6) (23) (13) (56) (24))
                        bogusForceDataize.write (((xgives)) ("090623") ("135624") (2009) (6) (23) (13) (56) (24))
                xtest_unparse_datetime.write
                  [xself]
                    memory > xgives
                    seq > @
                      seq
                        xgives.write
                          [xy xM xd xh xm xs xdate_str xtime_str]
                            memory > xdt
                            seq > @
                              seq
                                xdt.write ((((xdatetime).xdatetime)) ((xy)) ((xM)) ((xd)) ((xh)) ((xm)) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)) (FALSE))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                        bogusForceDataize.write (((xgives)) (1999) (6) (23) (13) (56) (24) ("19990623") ("135624"))
                        bogusForceDataize.write (((xgives)) (2000) (6) (23) (13) (56) (24) ("20000623") ("135624"))
                        bogusForceDataize.write (((xgives)) (2010) (6) (5) (1) (2) (3) ("20100605") ("010203"))
                        xgives.write
                          [xy xM xd xdate_str xtime_str]
                            memory > xdt
                            seq > @
                              seq
                                xdt.write ((((xdatetime).xdate)) ((xy)) ((xM)) ((xd)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)) (FALSE))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                        bogusForceDataize.write (((xgives)) (1999) (6) (23) ("19990623") ("000000"))
                        bogusForceDataize.write (((xgives)) (2000) (6) (23) ("20000623") ("000000"))
                        bogusForceDataize.write (((xgives)) (2010) (6) (5) ("20100605") ("000000"))
                xtest_unparse_datetime_legacy.write
                  [xself]
                    memory > xgives
                    seq > @
                      seq
                        xgives.write
                          [xy xM xd xh xm xs xdate_str xtime_str]
                            memory > xdt
                            seq > @
                              seq
                                xdt.write ((((xdatetime).xdatetime)) ((xy)) ((xM)) ((xd)) ((xh)) ((xm)) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)) (TRUE))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                        bogusForceDataize.write (((xgives)) (1999) (6) (23) (13) (56) (24) ("990623") ("135624"))
                        bogusForceDataize.write (((xgives)) (2000) (6) (23) (13) (56) (24) ("000623") ("135624"))
                        bogusForceDataize.write (((xgives)) (2010) (6) (5) (1) (2) (3) ("100605") ("010203"))
                        xgives.write
                          [xy xM xd xdate_str xtime_str]
                            memory > xdt
                            seq > @
                              seq
                                xdt.write ((((xdatetime).xdate)) ((xy)) ((xM)) ((xd)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnntplib).x_unparse_datetime)) ((xdt)) (TRUE))) ((((unsupported)) ((xdate_str)) ((xtime_str)))))
                        bogusForceDataize.write (((xgives)) (1999) (6) (23) ("990623") ("000000"))
                        bogusForceDataize.write (((xgives)) (2000) (6) (23) ("000623") ("000000"))
                        bogusForceDataize.write (((xgives)) (2010) (6) (5) ("100605") ("000000"))
                xtest_ssl_support.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xnntplib)) ("NNTP_SSL"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_module_all_attribute.write
                  [xself]
                    memory > xtarget_api
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xnntplib)) ("__all__"))))
                        xtarget_api.write (((unsupported)) ("NNTP") ("NNTPError") ("NNTPReplyError") ("NNTPTemporaryError") ("NNTPPermanentError") ("NNTPProtocolError") ("NNTPDataError") ("decode_header"))
                        (((unsupported)) ((xssl)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xtarget_api).xappend)) ("NNTP_SSL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) (((xnntplib).x__all__)))) ((((xset)) ((xtarget_api)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xnntp_class.write ((xnntplib).xNNTP)
                xcheck_constructor_error_conditions.write
                  [xself xhandler_class xexpected_error_type xexpected_error_msg xlogin xpassword]
                    memory > xsocket_closed
                    memory > xclose
                    memory > xmakefile
                    memory > xfiles
                    memory > xcreate_connection
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          xcreate_connection.write
                            [xaddress xtimeout]
                              seq > @
                                (((unsupported)) ((((xMockSocket)) 0)))
                        (((unsupported)) 0)
                          seq
                            xclose.write
                              [xself]
                                memory > xsocket_closed
                                seq > @
                                  seq
                                    (((unsupported)) 0)
                                    xsocket_closed.write TRUE
                            xmakefile.write
                              [xsocket xmode]
                                memory > xhandler
                                seq > @
                                  seq
                                    xhandler.write (((xhandler_class)) 0)
                                    (((unsupported)) ((((unsupported)) ((x_)) ((xfile)))) ((((xmake_mock_file)) ((xhandler)))))
                                    bogusForceDataize.write ((((xfiles).xappend)) ((xfile)))
                                    (((unsupported)) ((xfile)))
                        xsocket_closed.write FALSE
                        xfiles.write (((unsupported)) 0)
                        (((unsupported)) ((((xpatch)) ("nntplib.socket") ((xmock_socket_module)))) (((((xself).xassertRaisesRegex)) ((xexpected_error_type)) ((xexpected_error_msg)))))
                          (((unsupported)) (((xself).xnntp_class)) ("dummy") ((xlogin)) ((xpassword)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xsocket_closed)))
                        (((unsupported)) ((xf)) ((xfiles)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((xf).xclosed)))
                xtest_bad_welcome.write
                  [xself]
                    memory > xwelcome
                    seq > @
                      seq
                        (((unsupported)) ((xNNTPv1Handler)))
                          xwelcome.write "Bad Welcome"
                        bogusForceDataize.write ((((xself).xcheck_constructor_error_conditions)) ((xHandler)) (((xnntplib).xNNTPProtocolError)) (((xHandler).xwelcome)))
                xtest_service_temporarily_unavailable.write
                  [xself]
                    memory > xwelcome
                    seq > @
                      seq
                        (((unsupported)) ((xNNTPv1Handler)))
                          xwelcome.write "400 Service temporarily unavailable"
                        bogusForceDataize.write ((((xself).xcheck_constructor_error_conditions)) ((xHandler)) (((xnntplib).xNNTPTemporaryError)) (((xHandler).xwelcome)))
                xtest_service_permanently_unavailable.write
                  [xself]
                    memory > xwelcome
                    seq > @
                      seq
                        (((unsupported)) ((xNNTPv1Handler)))
                          xwelcome.write "502 Service permanently unavailable"
                        bogusForceDataize.write ((((xself).xcheck_constructor_error_conditions)) ((xHandler)) (((xnntplib).xNNTPPermanentError)) (((xHandler).xwelcome)))
                xtest_bad_capabilities.write
                  [xself]
                    memory > xhandle_CAPABILITIES
                    memory > xcapabilities_response
                    seq > @
                      seq
                        (((unsupported)) ((xNNTPv1Handler)))
                          xhandle_CAPABILITIES.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((xself).xpush_lit)) ((xcapabilities_response)))
                        xcapabilities_response.write "201 bad capability"
                        bogusForceDataize.write ((((xself).xcheck_constructor_error_conditions)) ((xHandler)) (((xnntplib).xNNTPReplyError)) ((xcapabilities_response)))
                xtest_login_aborted.write
                  [xself]
                    memory > xhandle_AUTHINFO
                    memory > xpassword
                    memory > xauthinfo_response
                    memory > xlogin
                    seq > @
                      seq
                        xlogin.write "t@e.com"
                        xpassword.write "python"
                        (((unsupported)) ((xNNTPv1Handler)))
                          xhandle_AUTHINFO.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((xself).xpush_lit)) ((xauthinfo_response)))
                        xauthinfo_response.write "503 Mechanism not recognized"
                        bogusForceDataize.write ((((xself).xcheck_constructor_error_conditions)) ((xHandler)) (((xnntplib).xNNTPPermanentError)) ((xauthinfo_response)) ((xlogin)) ((xpassword)))
            (((unsupported)) 0)
              seq
                unsupported
                xwrap_socket.write
                  [xsock]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xsock)))
            (((unsupported)) ((xMockSocketTests)) (((((xunittest).xskipUnless)) ((xssl)) ("requires SSL support"))))
              xnntp_class.write
                []
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) (((xnntplib).xNNTP_SSL)) ((((unsupported)) ((xpos)))) ((xbypass_context)) ((((unsupported)) ((xkw)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xport
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        xport.write ((((xsupport).xbind_port)) ((xsock)))
                        bogusForceDataize.write ((((xsock).xlisten)) 0)
                        (((unsupported)) (((xself).xbackground)) ((((unsupported)) (((xthreading).xThread)) (((xself).xrun_server)) ((((unsupported)) ((xsock)))))))
                        bogusForceDataize.write (((((xself).xbackground).xstart)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xbackground).xjoin)))
                        (((unsupported)) (((xself).xnntp)) (((((((unsupported)) ((xNNTP)) (((xsupport).xHOST)) ((xport)) (FALSE)).x__enter__)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xnntp).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xrun_server.write
                  [xself xsock]
                    memory > xreader
                    memory > xcontext
                    memory > xclient
                    memory > xcmd
                    seq > @
                      seq
                        (((unsupported)) ((xsock)))
                          (((unsupported)) ((((unsupported)) ((xclient)) ((x_)))) (((((xsock).xaccept)) 0)))
                        (((unsupported)) (((((xcontextlib).xExitStack)) 0)) ((xcleanup)))
                          seq
                            bogusForceDataize.write ((((xcleanup).xenter_context)) ((xclient)))
                            xreader.write ((((xcleanup).xenter_context)) (((((xclient).xmakefile)) ("rb"))))
                            bogusForceDataize.write ((((xclient).xsendall)) ("200 Server readyrn"))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xcmd.write ((((xreader).xreadline)) 0)
                                    ((xcmd).eq "CAPABILITIESrn").if
                                      bogusForceDataize.write ((((xclient).xsendall)) ("101 Capability list:rnVERSION 2rnSTARTTLSrn.rn"))
                                      ((xcmd).eq "STARTTLSrn").if
                                        seq
                                          bogusForceDataize.write ((((xreader).xclose)) 0)
                                          bogusForceDataize.write ((((xclient).xsendall)) ("382 Begin TLS negotiation nowrn"))
                                          xcontext.write ((((xssl).xSSLContext)) 0)
                                          bogusForceDataize.write ((((xcontext).xload_cert_chain)) ((xcertfile)))
                                          xclient.write (((unsupported)) (((xcontext).xwrap_socket)) ((xclient)) (TRUE))
                                          bogusForceDataize.write ((((xcleanup).xenter_context)) ((xclient)))
                                          xreader.write ((((xcleanup).xenter_context)) (((((xclient).xmakefile)) ("rb"))))
                                        ((xcmd).eq "QUITrn").if
                                          seq
                                            bogusForceDataize.write ((((xclient).xsendall)) ("205 Bye!rn"))
                                            (((unsupported)) 0)
                                          (((unsupported)) ((((xValueError)) (((("Unexpected command {!r}".xformat)) ((xcmd)))))))
                xtest_starttls.write
                  [xself]
                    memory > xfile
                    memory > xsock
                    seq > @
                      (((unsupported)) 0)
                        xfile.write (((xself).xnntp).xfile)
                        xsock.write (((xself).xnntp).xsock)
                        bogusForceDataize.write (((((xself).xnntp).xstarttls)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xfile)) ((((xself).xnntp).xfile)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xsock)) ((((xself).xnntp).xsock)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xself).xnntp).xsock)) (((xssl).xSSLSocket)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xself).xnntp).xstarttls)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)