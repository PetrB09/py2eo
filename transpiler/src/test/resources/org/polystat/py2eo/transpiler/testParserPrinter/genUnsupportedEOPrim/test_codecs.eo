memory > xReadTest
memory > xerrors
memory > xi
memory > xd
memory > xerror_handler
memory > xarray
memory > xsrw
memory > xcm
memory > xUnicodeError
memory > xUTF8Test
memory > xWCHAR
memory > xImportError
memory > xUnicodeDecodeError
memory > xc
memory > xexpected
memory > xdata
memory > xlist
memory > xRuntimeError
memory > xmode
memory > xenumerate
memory > xValueError
memory > xo
memory > xstr
memory > xMixInCheckStateHandling
memory > xio
memory > xfile
memory > xt
memory > xMyRuntimeError
memory > xpos
memory > xCustomNew
memory > xreader
memory > xrange
memory > xsize
memory > xCustomInit
memory > xb
memory > xUINT
memory > xpartialresult
memory > xaliases
memory > xef
memory > xWinDLL
memory > xbefore
memory > xbytearray
memory > xcaught
memory > xalias
memory > xprefix
memory > x_
memory > xraw
memory > xKeyError
memory > xuni
memory > xnameprep
memory > xerr
memory > xoutput
memory > xPOINTER
memory > xopen
memory > xprint
memory > xtype
memory > xtext
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xBOOL
memory > xBYTE
memory > xException
memory > xhasattr
memory > xcodecs
memory > xsuper
memory > xchars
memory > xsupport
memory > xsys
memory > xbytes
memory > xcp
memory > xfailure
memory > xdecoder
memory > xDeprecationWarning
memory > xlocale
memory > xQueue
memory > xchr
memory > xpuny
memory > xafter
memory > xsorted
memory > xCPINFOEXW
memory > xOSError
memory > xLookupError
memory > xmock
memory > xgetattr
memory > xid
memory > xcodec_name
memory > xUnicodeEncodeError
memory > xe
memory > xord
memory > xzip
memory > xunittest
memory > xDWORD
memory > xbad_input
memory > xsuffix
memory > xlineend
memory > xexc
memory > xobject
memory > xmemoryview
memory > xisinstance
memory > xline
memory > xlen
memory > xsizehint
memory > xcp1140
memory > xencodings
memory > xfp
memory > xTypeError
memory > x__name__
memory > xWINFUNCTYPE
memory > xwriter
[] > test_codecs
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_encoding_map_type_initialized
        memory > xtest_incremental_decode
        memory > xtest_handlers
        memory > xBOM
        memory > xtest_basics_capi
        memory > xtest_stream
        memory > xcheck_state_handling_decode
        memory > xtest_raw_encode
        memory > xtest_decode_with_int2str_map
        memory > xcoding_checker
        memory > xtest_builtin_decode
        memory > xCP_UTF8
        memory > xtest_uu_invalid
        memory > xtest_binary_to_text_blacklists_text_transforms
        memory > xtest_cp1252
        memory > xSIZEOF_WCHAR_T
        memory > xset_codec
        memory > xtest_writelines
        memory > xtest_nonbmp
        memory > xtest_charmap
        memory > xtest_bad_decode_args
        memory > xtest_escape_decode
        memory > xtest_decode_strict
        memory > xtest_invalid_code_page
        memory > xtest_decode
        memory > xtest_decode_invalid
        memory > xnameprep_tests
        memory > xtest_large_utf8_input
        memory > xtest_raise_subclass_with_weakref_support
        memory > xcheck_not_wrapped
        memory > xtest_bug1098990_a
        memory > xtest_all
        memory > xtest_non_str_arg_is_not_wrapped
        memory > xtest_decode_with_int2int_map
        memory > xtest_code_page_name
        memory > xtest_getencoder
        memory > xtest_simple
        memory > xtest_getwriter
        memory > xill_formed_sequence_replace
        memory > xtest_seeking_write
        memory > xspambe
        memory > xtest_mbcs_alias
        memory > xtest_latin1
        memory > xtest_bug1175396
        memory > xtest_text_to_binary_blacklists_binary_transforms
        memory > xtest_multibyte_encoding
        memory > xtest_codec_lookup_failure_not_wrapped
        memory > xtest_encode_error
        memory > xtest_decode_errors
        memory > xtest_array
        memory > xcheck_encode
        memory > xcheck_decode_strings
        memory > xtest_encode_strict
        memory > x_testcapi
        memory > xtest_encode_unsupported_error_handler
        memory > xtest_new_override_is_not_wrapped
        memory > xtest_multiple_args_is_not_wrapped
        memory > xctypes
        memory > xtest_unicode_escape
        memory > xtest_incremental_errors
        memory > xtest_write
        memory > xtest_binary_to_text_blacklists_binary_transforms
        memory > xtest_incremental
        memory > xtest_buffer_api_usage
        memory > xtest_rot13_func
        memory > xtest_decoder_state
        memory > xsetUp
        memory > xencode
        memory > xtest_bad_encode_args
        memory > xtest_init_override_is_not_wrapped
        memory > xtest_lookup
        memory > xtest_register
        memory > xtest_raise_by_value
        memory > xtest_encode_surrogateescape
        memory > xtest_file_closes_if_lookup_error_raised
        memory > xtest_only_one_bom
        memory > xtest_open
        memory > xtest_escape_encode
        memory > xdecode
        memory > xtest_badbom
        memory > xtest_getreader
        memory > xpunycode_testcases
        memory > xtest_surrogatepass_handler
        memory > xtest_lookup_issue1813
        memory > xtest_utf8
        memory > xbroken_unicode_with_stateful
        memory > xtest_incremental_surrogatepass
        memory > xtest_raise_grandchild_subclass_exact_size
        memory > xtest_ascii
        memory > xtest_raise_by_type
        memory > xtest_stream_bom
        memory > xspamle
        memory > xtest_builtin_encode
        memory > xtest_decode_surrogatepass
        memory > xtest_issue8941
        memory > xtest_bug691291
        memory > xtest_basic
        memory > xtest_readline
        memory > xtest_streamreaderwriter
        memory > xall_unicode_encodings
        memory > xtest_seeking_read
        memory > xtest_partial
        memory > xbytes_transform_encodings
        memory > xtest_getdecoder
        memory > xtest_decode_unsupported_error_handler
        memory > xtest_cp_utf7
        memory > xtest_encodedfile
        memory > xis_code_page_present
        memory > xcheck_decode
        memory > xtest_text_to_binary_blacklists_text_transforms
        memory > xBYTES_STRINGS
        memory > xtransform_aliases
        memory > xcheck_state_handling_encode
        memory > x_TEST_CODECS
        memory > xtest_escape
        memory > xtest_bom
        memory > xill_formed_sequence
        memory > xtest_errors
        memory > xtest_readlines
        memory > x_forget_codec
        memory > xtest_raw
        memory > xSTRINGS
        memory > xtest_bad_args
        memory > xtest_custom_zlib_error_is_wrapped
        memory > xtest_basics
        memory > xencoding
        memory > xtest_undefined
        memory > x__init__
        memory > x_get_test_codec
        memory > xtest_lone_surrogates
        memory > xtest_aliases
        memory > xtest_encode_errors
        memory > xread
        memory > xENCODING
        memory > xtest_raw_decode
        memory > xtest_read
        memory > xtest_code_page_decode_flags
        memory > xtest_seek0
        memory > xtest_large_input
        memory > xassertWrapped
        memory > xwrite
        memory > xtest_decode_with_string_map
        memory > xtest_unflagged_non_text_codec_handling
        memory > xtest_quopri_stateless
        memory > xtest_stream_bare
        memory > xcheck_encode_strings
        memory > xtest_encode_surrogateescape_error
        memory > xtest_encode_surrogatepass
        memory > xcheck_wrapped
        memory > xtest_bug1098990_b
        memory > xSURROGATES
        memory > xtest_decode_unicode
        memory > xtest_empty
        memory > xtest_nameprep
        memory > xtearDown
        memory > xzlib
        memory > xtest_decode_surrogateescape
        memory > xraise_obj
        memory > xtest_readlinequeue
        memory > xtest_mixed_readline_and_read
        memory > xtest_encode
        memory > xtest_custom_hex_error_is_wrapped
        memory > xtest_cp932
        memory > xtest_decode_error
        memory > xcheck_partial
        memory > xtest_instance_attribute_is_not_wrapped
        memory > xtest_incremental_encode
        memory > xtest_bug1601501
        memory > xtest_seek
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_testcapi.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              seq
                xctypes.write "None: is there a None literal in the EO language?"
                xSIZEOF_WCHAR_T.write (1.neg)
              xSIZEOF_WCHAR_T.write ((((xctypes).xsizeof)) (((xctypes).xc_wchar)))
            xcoding_checker.write
              [xself xcoder]
                memory > xcheck
                seq > @
                  seq
                    xcheck.write
                      [xinput xexpect]
                        seq > @
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xcoder)) ((xinput)))) ((((unsupported)) ((xexpect)) ((((xlen)) ((xinput)))))))
                    (((unsupported)) ((xcheck)))
            xis_code_page_present.write
              [xcp]
                memory > xMAX_PATH
                memory > xMAX_LEADBYTES
                memory > xinfo
                memory > xMAX_DEFAULTCHAR
                memory > xGetCPInfoEx
                memory > xprototype
                memory > x_fields_
                seq > @
                  seq
                    seq
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                    seq
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                      (((unsupported)) 0)
                    xMAX_LEADBYTES.write 12
                    xMAX_DEFAULTCHAR.write 2
                    xMAX_PATH.write 260
                    (((unsupported)) (((xctypes).xStructure)))
                      x_fields_.write (((unsupported)) ((((unsupported)) ("MaxCharSize") ((xUINT)))) ((((unsupported)) ("DefaultChar") (((xBYTE).mul (xMAX_DEFAULTCHAR))))) ((((unsupported)) ("LeadByte") (((xBYTE).mul (xMAX_LEADBYTES))))) ((((unsupported)) ("UnicodeDefaultChar") ((xWCHAR)))) ((((unsupported)) ("CodePage") ((xUINT)))) ((((unsupported)) ("CodePageName") (((xWCHAR).mul (xMAX_PATH))))))
                    xprototype.write (((xWINFUNCTYPE)) ((xBOOL)) ((xUINT)) ((xDWORD)) ((((xPOINTER)) ((xCPINFOEXW)))))
                    xGetCPInfoEx.write (((xprototype)) ((((unsupported)) ("GetCPInfoExW") ((((xWinDLL)) ("kernel32"))))))
                    xinfo.write (((xCPINFOEXW)) 0)
                    (((unsupported)) ((((xGetCPInfoEx)) ((xcp)) (0) ((xinfo)))))
            (((unsupported)) ((xobject)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xbuffer]
                    seq > @
                      (((unsupported)) (((xself).x_buffer)) ((xbuffer)))
                xwrite.write
                  [xself xchars]
                    seq > @
                      (((unsupported)) (((xself).x_buffer)) ((xchars)))
                xread.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        ((xsize).less 0).if
                          seq
                            xs.write ((xself).x_buffer)
                            (((unsupported)) (((xself).x_buffer)) ((((unsupported)) (((xself).x_buffer)) ((((unsupported)) (0))))))
                            (((unsupported)) ((xs)))
                          seq
                            xs.write (((unsupported)) (((xself).x_buffer)) ((((unsupported)) ((xsize)))))
                            (((unsupported)) (((xself).x_buffer)) ((((unsupported)) (((xself).x_buffer)) ((((unsupported)) ((xsize)))))))
                            (((unsupported)) ((xs)))
            (((unsupported)) 0)
              seq
                xcheck_state_handling_decode.write
                  [xself xencoding xu xs]
                    memory > xd
                    memory > xstate
                    memory > xpart1
                    memory > xpart2
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) (((((xlen)) ((xs))).add 1)))))
                        seq
                          xd.write ((((((xcodecs).xgetincrementaldecoder)) ((xencoding)))) 0)
                          xpart1.write ((((xd).xdecode)) ((((unsupported)) ((xs)) ((((unsupported)) ((xi)))))))
                          xstate.write ((((xd).xgetstate)) 0)
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xstate)) (1))) ((xint)))
                          ((((unsupported)) ((xstate)) (1)).not).if
                            seq
                              bogusForceDataize.write ((((xd).xsetstate)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xstate)) (0))) ((((unsupported)) (0))))) (0))))
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((((xd).xdecode)) ((((unsupported)) ((xstate)) (0)))).not)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xstate)) (((((xd).xgetstate)) 0)))
                          xd.write ((((((xcodecs).xgetincrementaldecoder)) ((xencoding)))) 0)
                          bogusForceDataize.write ((((xd).xsetstate)) ((xstate)))
                          xpart2.write ((((xd).xdecode)) ((((unsupported)) ((xs)) ((((unsupported)) ((xi)))))) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xu)) (((xpart1).add (xpart2))))
                xcheck_state_handling_encode.write
                  [xself xencoding xu xs]
                    memory > xd
                    memory > xstate
                    memory > xpart1
                    memory > xpart2
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) (((((xlen)) ((xu))).add 1)))))
                        seq
                          xd.write ((((((xcodecs).xgetincrementalencoder)) ((xencoding)))) 0)
                          xpart1.write ((((xd).xencode)) ((((unsupported)) ((xu)) ((((unsupported)) ((xi)))))))
                          xstate.write ((((xd).xgetstate)) 0)
                          xd.write ((((((xcodecs).xgetincrementalencoder)) ((xencoding)))) 0)
                          bogusForceDataize.write ((((xd).xsetstate)) ((xstate)))
                          xpart2.write ((((xd).xencode)) ((((unsupported)) ((xu)) ((((unsupported)) ((xi)))))) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) (((xpart1).add (xpart2))))
            (((unsupported)) ((xMixInCheckStateHandling)))
              seq
                xcheck_partial.write
                  [xself xinput xpartialresults]
                    memory > xd
                    memory > xencoded
                    memory > xq
                    memory > xr
                    memory > xresult
                    seq > @
                      seq
                        xq.write (((xQueue)) (""))
                        xr.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xq)))
                        xresult.write ""
                        (((unsupported)) ((((unsupported)) ((xc)) ((xpartialresult)))) ((((xzip)) (((((xinput).xencode)) (((xself).xencoding)))) ((xpartialresults)))))
                          seq
                            bogusForceDataize.write ((((xq).xwrite)) ((((xbytes)) ((((unsupported)) ((xc)))))))
                            (((unsupported)) ((xresult)) (((((xr).xread)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xpartialresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xread)) 0)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xbytebuffer)) (""))
                        xd.write ((((((xcodecs).xgetincrementaldecoder)) (((xself).xencoding)))) 0)
                        xresult.write ""
                        (((unsupported)) ((((unsupported)) ((xc)) ((xpartialresult)))) ((((xzip)) (((((xinput).xencode)) (((xself).xencoding)))) ((xpartialresults)))))
                          seq
                            (((unsupported)) ((xresult)) (((((xd).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xpartialresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) ("") (TRUE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xbuffer)) (""))
                        bogusForceDataize.write ((((xd).xreset)) 0)
                        xresult.write ""
                        (((unsupported)) ((((unsupported)) ((xc)) ((xpartialresult)))) ((((xzip)) (((((xinput).xencode)) (((xself).xencoding)))) ((xpartialresults)))))
                          seq
                            (((unsupported)) ((xresult)) (((((xd).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xpartialresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) ("") (TRUE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xbuffer)) (""))
                        xencoded.write ((((xinput).xencode)) (((xself).xencoding)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xinput)) (((("".xjoin)) (((((xcodecs).xiterdecode)) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xc)))))) ((xc)) ((xencoded)))) (((xself).xencoding)))))))
                xtest_readline.write
                  [xself]
                    memory > xsexpected
                    memory > xvwo
                    memory > xreadalllines
                    memory > xvw
                    memory > xs
                    memory > xsexpectednoends
                    memory > xgetreader
                    memory > xlineends
                    memory > xreader
                    seq > @
                      seq
                        xgetreader.write
                          [xinput]
                            memory > xstream
                            seq > @
                              seq
                                xstream.write ((((xio).xBytesIO)) (((((xinput).xencode)) (((xself).xencoding)))))
                                (((unsupported)) (((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xstream)))))
                        xreadalllines.write
                          [xinput xkeepends xsize]
                            memory > xreader
                            memory > xlines
                            memory > xline
                            seq > @
                              (((unsupported)) 0)
                                xreader.write (((xgetreader)) ((xinput)))
                                xlines.write (((unsupported)) 0)
                                while.
                                  TRUE
                                  [unused]
                                    seq > @
                                      seq
                                        xline.write (((unsupported)) (((xreader).xreadline)) ((xsize)) ((xkeepends)))
                                        ((xline).not).if
                                          (((unsupported)) 0)
                                        bogusForceDataize.write ((((xlines).xappend)) ((xline)))
                                (((unsupported)) (((("|".xjoin)) ((xlines)))))
                        xs.write "foonbarrnbazrspamu2028eggs"
                        xsexpected.write "foon|barrn|bazr|spamu2028|eggs"
                        xsexpectednoends.write "foo|bar|baz|spam|eggs"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) ((xs)) (TRUE))) ((xsexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) ((xs)) (FALSE))) ((xsexpectednoends)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) ((xs)) (TRUE) (10))) ((xsexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) ((xs)) (FALSE) (10))) ((xsexpectednoends)))
                        xlineends.write (((unsupported)) ("n") ("rn") ("r") ("u2028"))
                        xvw.write (((unsupported)) 0)
                        xvwo.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xi)) ((xlineend)))) ((((xenumerate)) ((xlineends)))))
                          seq
                            bogusForceDataize.write ((((xvw).xappend)) ((((((xi).mul 200).add 200).mul "u3042").add (xlineend))))
                            bogusForceDataize.write ((((xvwo).xappend)) (((((xi).mul 200).add 200).mul "u3042")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) (((("".xjoin)) ((xvw)))) (TRUE))) (((("|".xjoin)) ((xvw)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreadalllines)) (((("".xjoin)) ((xvw)))) (FALSE))) (((("|".xjoin)) ((xvwo)))))
                        (((unsupported)) ((xsize)) ((((xrange)) (80))))
                          (((unsupported)) ((xlineend)) ((xlineends)))
                            seq
                              xs.write (10.mul ((((xsize).mul "a").add (xlineend)).add "xxxn"))
                              xreader.write (((xgetreader)) ((xs)))
                              (((unsupported)) ((xi)) ((((xrange)) (10))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ((((xsize).mul "a").add (xlineend))))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("xxxn"))
                              xreader.write (((xgetreader)) ((xs)))
                              (((unsupported)) ((xi)) ((((xrange)) (10))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) (((xsize).mul "a")))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) ("xxx"))
                xtest_mixed_readline_and_read.write
                  [xself]
                    memory > xlines
                    memory > xf
                    memory > xdata
                    memory > xgetreader
                    seq > @
                      seq
                        xlines.write (((unsupported)) ("Humpty Dumpty sat on a wall,n") ("Humpty Dumpty had a great fall.rn") ("All the king's horses and all the king's menr") ("Couldn't put Humpty together again."))
                        xdata.write ((("".xjoin)) ((xlines)))
                        xgetreader.write
                          []
                            memory > xstream
                            seq > @
                              seq
                                xstream.write ((((xio).xBytesIO)) (((((xdata).xencode)) (((xself).xencoding)))))
                                (((unsupported)) (((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xstream)))))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ((((unsupported)) ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("".xjoin)) ((((unsupported)) ((xlines)) ((((unsupported)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ((((unsupported)) ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ((((unsupported)) ((((unsupported)) ((xlines)) (1))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (100))) ((((unsupported)) ((((unsupported)) ((xdata)) ((((unsupported)) (((((xlen)) ((((unsupported)) ((xlines)) (0)))).add 1)))))) ((((unsupported)) (100))))))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadline)) 0)) ((((unsupported)) ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadlines)) 0)) ((((unsupported)) ((xlines)) ((((unsupported)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xf).xread)) (40) (5))) ((((unsupported)) ((xdata)) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ((((unsupported)) ((xdata)) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xf).xread)) (40) (5))) ((((unsupported)) ((xdata)) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (1))) ((((unsupported)) ((xdata)) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (100))) ((((unsupported)) ((xdata)) ((((unsupported)) (6) (106))))))
                        xf.write (((xgetreader)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xf).xread)) (40) (5))) ((((unsupported)) ((xdata)) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadlines)) 0)) (((((unsupported)) ((((unsupported)) ((((unsupported)) ((xlines)) (0))) ((((unsupported)) (5)))))).add (((unsupported)) ((xlines)) ((((unsupported)) (1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (""))
                xtest_bug1175396.write
                  [xself]
                    memory > xs
                    memory > xreader
                    memory > xstream
                    seq > @
                      seq
                        xs.write (((unsupported)) ("<%!--===================================================rn") ("    BLOG index page: show recent articles,rn") ("    today's articles, or articles of a specific date.rn") ("========================================================--%>rn") ("<%@inputencoding=\"ISO-8859-1\"%>rn") ("<%@pagetemplate=TEMPLATE.y%>rn") ("<%@import=import frog.util, frog%>rn") ("<%@import=import frog.objects%>rn") ("<%@import=from frog.storageerrors import StorageError%>rn") ("<%rn") ("rn") ("import loggingrn") ("log=logging.getLogger(\"Snakelets.logger\")rn") ("rn") ("rn") ("user=self.SessionCtx.userrn") ("storageEngine=self.SessionCtx.storageEnginern") ("rn") ("rn") ("def readArticlesFromDate(date, count=None):rn") ("    entryids=storageEngine.listBlogEntries(date)rn") ("    entryids.reverse() # descendingrn") ("    if count:rn") ("        entryids=entryids[:count]rn") ("    try:rn") ("        return [ frog.objects.BlogEntry.load(storageEngine, date, Id) for Id in entryids ]rn") ("    except StorageError,x:rn") ("        log.error(\"Error loading articles: \"+str(x))rn") ("        self.abort(\"cannot load articles\")rn") ("rn") ("showdate=Nonern") ("rn") ("arg=self.Request.getArg()rn") ("if arg==\"today\":rn") ("    #-------------------- TODAY'S ARTICLESrn") ("    self.write(\"<h2>Today's articles</h2>\")rn") ("    showdate = frog.util.isodatestr() rn") ("    entries = readArticlesFromDate(showdate)rn") ("elif arg==\"active\":rn") ("    #-------------------- ACTIVE ARTICLES redirectrn") ("    self.Yredirect(\"active.y\")rn") ("elif arg==\"login\":rn") ("    #-------------------- LOGIN PAGE redirectrn") ("    self.Yredirect(\"login.y\")rn") ("elif arg==\"date\":rn") ("    #-------------------- ARTICLES OF A SPECIFIC DATErn") ("    showdate = self.Request.getParameter(\"date\")rn") ("    self.write(\"<h2>Articles written on %s</h2>\"% frog.util.mediumdatestr(showdate))rn") ("    entries = readArticlesFromDate(showdate)rn") ("else:rn") ("    #-------------------- RECENT ARTICLESrn") ("    self.write(\"<h2>Recent articles</h2>\")rn") ("    dates=storageEngine.listBlogEntryDates()rn") ("    if dates:rn") ("        entries=[]rn") ("        SHOWAMOUNT=10rn") ("        for showdate in dates:rn") ("            entries.extend( readArticlesFromDate(showdate, SHOWAMOUNT-len(entries)) )rn") ("            if len(entries)>=SHOWAMOUNT:rn") ("                breakrn") ("                rn"))
                        xstream.write ((((xio).xBytesIO)) ((((((("".xjoin)) ((xs))).xencode)) (((xself).xencoding)))))
                        xreader.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xstream)))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xline)))) ((((xenumerate)) ((xreader)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) ((((unsupported)) ((xs)) ((xi)))))
                xtest_readlinequeue.write
                  [xself]
                    memory > xreader
                    memory > xq
                    memory > xwriter
                    seq > @
                      seq
                        xq.write (((xQueue)) (""))
                        xwriter.write ((((((xcodecs).xgetwriter)) (((xself).xencoding)))) ((xq)))
                        xreader.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xq)))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("foor"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) ("foo"))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("nbarr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) ("bar"))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (FALSE))) (""))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("foor"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("foor"))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("nbarr"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("barr"))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) (""))
                        bogusForceDataize.write ((((xwriter).xwrite)) ("foorn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreader).xreadline)) (TRUE))) ("foorn"))
                xtest_bug1098990_a.write
                  [xself]
                    memory > xreader
                    memory > xstream
                    memory > xs1
                    memory > xs
                    memory > xs2
                    memory > xs3
                    seq > @
                      seq
                        xs1.write "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyrn"
                        xs2.write "offending line: ladfj askldfj klasdj fskla dfzaskdj fasklfj laskd fjasklfzzzzaa%whereisthis!!!rn"
                        xs3.write "next line.rn"
                        xs.write ((((((xs1).add (xs2)).add (xs3)).xencode)) (((xself).xencoding)))
                        xstream.write ((((xio).xBytesIO)) ((xs)))
                        xreader.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) (""))
                xtest_bug1098990_b.write
                  [xself]
                    memory > xs5
                    memory > xs4
                    memory > xreader
                    memory > xstream
                    memory > xs1
                    memory > xs
                    memory > xs2
                    memory > xs3
                    seq > @
                      seq
                        xs1.write "aaaaaaaaaaaaaaaaaaaaaaaarn"
                        xs2.write "bbbbbbbbbbbbbbbbbbbbbbbbrn"
                        xs3.write "stillokay:bbbbxxrn"
                        xs4.write "broken!!!!badbadrn"
                        xs5.write "againokay.rn"
                        xs.write ((((((((xs1).add (xs2)).add (xs3)).add (xs4)).add (xs5)).xencode)) (((xself).xencoding)))
                        xstream.write ((((xio).xBytesIO)) ((xs)))
                        xreader.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) ((xs5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xreadline)) 0)) (""))
                xill_formed_sequence_replace.write "ufffd"
                xtest_lone_surrogates.write
                  [xself]
                    memory > xbom
                    memory > xbackslashreplace
                    memory > xafter_sequence
                    memory > xbefore_sequence
                    memory > xtest_sequence
                    memory > xtest_string
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (("ud800".xencode)) (((xself).xencoding)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("backslashreplace"))) (((((((unsupported)) 0).xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("namereplace"))) (((((((unsupported)) 0).xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("xmlcharrefreplace"))) (((("[&#56448;]".xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("ignore"))) (((("[]".xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("replace"))) (((("[?]".xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uD800uDC80]".xencode)) (((xself).xencoding)) ("ignore"))) (((("[]".xencode)) (((xself).xencoding)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uD800uDC80]".xencode)) (((xself).xencoding)) ("replace"))) (((("[??]".xencode)) (((xself).xencoding)))))
                        xbom.write ((("".xencode)) (((xself).xencoding)))
                        (((unsupported)) ((((unsupported)) ((xbefore)) ((xafter)))) ((((unsupported)) ((((unsupported)) ("U00010fff") ("A"))) ((((unsupported)) ("[") ("]"))) ((((unsupported)) ("A") ("U00010fff"))))))
                          seq
                            xbefore_sequence.write (((unsupported)) (((((xbefore).xencode)) (((xself).xencoding)))) ((((unsupported)) ((((xlen)) ((xbom)))))))
                            xafter_sequence.write (((unsupported)) (((((xafter).xencode)) (((xself).xencoding)))) ((((unsupported)) ((((xlen)) ((xbom)))))))
                            xtest_string.write (((xbefore).add "uDC80").add (xafter))
                            xtest_sequence.write ((((xbom).add (xbefore_sequence)).add ((xself).xill_formed_sequence)).add (xafter_sequence))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xtest_sequence).xdecode)) (((xself).xencoding)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtest_string).xencode)) (((xself).xencoding)) ("surrogatepass"))) ((xtest_sequence)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtest_sequence).xdecode)) (((xself).xencoding)) ("surrogatepass"))) ((xtest_string)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtest_sequence).xdecode)) (((xself).xencoding)) ("ignore"))) (((xbefore).add (xafter))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtest_sequence).xdecode)) (((xself).xencoding)) ("replace"))) ((((xbefore).add ((xself).xill_formed_sequence_replace)).add (xafter))))
                            xbackslashreplace.write ((("".xjoin)) ((((unsupported)) (((((unsupported)) 0).mod (xb))) ((xb)) (((xself).xill_formed_sequence)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xtest_sequence).xdecode)) (((xself).xencoding)) ("backslashreplace"))) ((((xbefore).add (xbackslashreplace)).add (xafter))))
                xtest_incremental_surrogatepass.write
                  [xself]
                    memory > xdec
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((("uD901".xencode)) (((xself).xencoding)) ("surrogatepass"))
                        (((unsupported)) ((xi)) ((((xrange)) (1) ((((xlen)) ((xdata)))))))
                          seq
                            xdec.write ((((((xcodecs).xgetincrementaldecoder)) (((xself).xencoding)))) ("surrogatepass"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)))))))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)))))) (TRUE))) ("uD901"))
                        xdata.write ((("uDC02".xencode)) (((xself).xencoding)) ("surrogatepass"))
                        (((unsupported)) ((xi)) ((((xrange)) (1) ((((xlen)) ((xdata)))))))
                          seq
                            xdec.write ((((((xcodecs).xgetincrementaldecoder)) (((xself).xencoding)))) ("surrogatepass"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)))))))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xdec).xdecode)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)))))))) ("uDC02"))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-32"
                (((xsys).xbyteorder).eq "little").if
                  xill_formed_sequence.write "x80xdcx00x00"
                  xill_formed_sequence.write "x00x00xdcx80"
                xspamle.write "xffxfex00x00sx00x00x00px00x00x00ax00x00x00mx00x00x00sx00x00x00px00x00x00ax00x00x00mx00x00x00"
                xspambe.write "x00x00xfexffx00x00x00sx00x00x00px00x00x00ax00x00x00mx00x00x00sx00x00x00px00x00x00ax00x00x00m"
                xtest_only_one_bom.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((x_)) ((x_)) ((xreader)) ((xwriter)))) (((((xcodecs).xlookup)) (((xself).xencoding)))))
                        xs.write ((((xio).xBytesIO)) 0)
                        xf.write (((xwriter)) ((xs)))
                        bogusForceDataize.write ((((xf).xwrite)) ("spam"))
                        bogusForceDataize.write ((((xf).xwrite)) ("spam"))
                        xd.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xd).eq ((xself).xspamle)).or ((xd).eq ((xself).xspambe)))))
                        xs.write ((((xio).xBytesIO)) ((xd)))
                        xf.write (((xreader)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("spamspam"))
                xtest_badbom.write
                  [xself]
                    memory > xs
                    memory > xf
                    seq > @
                      seq
                        xs.write ((((xio).xBytesIO)) ((4.mul "xff")))
                        xf.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xf).xread)))
                        xs.write ((((xio).xBytesIO)) ((8.mul "xff")))
                        xf.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xf).xread)))
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("") ("") ("") ("") ("") ("") ("x00") ("x00") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_handlers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("ufffd") (1))) (((((xcodecs).xutf_32_decode)) ("x01") ("replace") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("") (1))) (((((xcodecs).xutf_32_decode)) ("x01") ("ignore") (TRUE))))
                xtest_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_32_decode)) ("xff") ("strict") (TRUE))
                xtest_decoder_state.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) (((xself).xencoding)) ("spamspam") (((xself).xspamle)))
                        bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) (((xself).xencoding)) ("spamspam") (((xself).xspambe)))
                xtest_issue8941.write
                  [xself]
                    memory > xencoded_be
                    memory > xencoded_le
                    seq > @
                      seq
                        xencoded_le.write ("xffxfex00x00".add ("x00x00x01x00".mul 1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("U00010000".mul 1024)) ((((unsupported)) (((((xcodecs).xutf_32_decode)) ((xencoded_le)))) (0))))
                        xencoded_be.write ("x00x00xfexff".add ("x00x01x00x00".mul 1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("U00010000".mul 1024)) ((((unsupported)) (((((xcodecs).xutf_32_decode)) ((xencoded_be)))) (0))))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-32-le"
                xill_formed_sequence.write "x80xdcx00x00"
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("") ("") ("x00") ("x00") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_simple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("U00010203".xencode)) (((xself).xencoding)))) ("x03x02x01x00"))
                xtest_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_32_le_decode)) ("xff") ("strict") (TRUE))
                xtest_issue8941.write
                  [xself]
                    memory > xencoded
                    seq > @
                      seq
                        xencoded.write ("x00x00x01x00".mul 1024)
                        bogusForceDataize.write ((((xself).xassertEqual)) (("U00010000".mul 1024)) ((((unsupported)) (((((xcodecs).xutf_32_le_decode)) ((xencoded)))) (0))))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-32-be"
                xill_formed_sequence.write "x00x00xdcx80"
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("") ("") ("x00") ("x00") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_simple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("U00010203".xencode)) (((xself).xencoding)))) ("x00x01x02x03"))
                xtest_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_32_be_decode)) ("xff") ("strict") (TRUE))
                xtest_issue8941.write
                  [xself]
                    memory > xencoded
                    seq > @
                      seq
                        xencoded.write ("x00x01x00x00".mul 1024)
                        bogusForceDataize.write ((((xself).xassertEqual)) (("U00010000".mul 1024)) ((((unsupported)) (((((xcodecs).xutf_32_be_decode)) ((xencoded)))) (0))))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-16"
                (((xsys).xbyteorder).eq "little").if
                  xill_formed_sequence.write "x80xdc"
                  xill_formed_sequence.write "xdcx80"
                xspamle.write "xffxfesx00px00ax00mx00sx00px00ax00mx00"
                xspambe.write "xfexffx00sx00px00ax00mx00sx00px00ax00m"
                xtest_only_one_bom.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((x_)) ((x_)) ((xreader)) ((xwriter)))) (((((xcodecs).xlookup)) (((xself).xencoding)))))
                        xs.write ((((xio).xBytesIO)) 0)
                        xf.write (((xwriter)) ((xs)))
                        bogusForceDataize.write ((((xf).xwrite)) ("spam"))
                        bogusForceDataize.write ((((xf).xwrite)) ("spam"))
                        xd.write ((((xs).xgetvalue)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xd).eq ((xself).xspamle)).or ((xd).eq ((xself).xspambe)))))
                        xs.write ((((xio).xBytesIO)) ((xd)))
                        xf.write (((xreader)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("spamspam"))
                xtest_badbom.write
                  [xself]
                    memory > xs
                    memory > xf
                    seq > @
                      seq
                        xs.write ((((xio).xBytesIO)) ("xffxff"))
                        xf.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xf).xread)))
                        xs.write ((((xio).xBytesIO)) ("xffxffxffxff"))
                        xf.write ((((((xcodecs).xgetreader)) (((xself).xencoding)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xf).xread)))
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("") ("") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_handlers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("ufffd") (1))) (((((xcodecs).xutf_16_decode)) ("x01") ("replace") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("") (1))) (((((xcodecs).xutf_16_decode)) ("x01") ("ignore") (TRUE))))
                xtest_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_16_decode)) ("xff") ("strict") (TRUE))
                xtest_decoder_state.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) (((xself).xencoding)) ("spamspam") (((xself).xspamle)))
                        bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) (((xself).xencoding)) ("spamspam") (((xself).xspambe)))
                xtest_bug691291.write
                  [xself]
                    memory > xs
                    memory > xreader
                    memory > xs1
                    seq > @
                      seq
                        xs1.write "Hellornworldrn"
                        xs.write ((((xs1).xencode)) (((xself).xencoding)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) ((xs)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          xreader.write (((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("U") (((xself).xencoding)))
                        (((unsupported)) ((xreader)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xreader).xread)) 0)) ((xs1)))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-16-le"
                xill_formed_sequence.write "x80xdc"
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_errors.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)) ((((unsupported)) ("xff") ("ufffd"))) ((((unsupported)) ("Ax00Z") ("Aufffd"))) ((((unsupported)) ("Ax00Bx00Cx00Dx00Z") ("ABCDufffd"))) ((((unsupported)) ("x00xd8") ("ufffd"))) ((((unsupported)) ("x00xd8A") ("ufffd"))) ((((unsupported)) ("x00xd8Ax00") ("ufffdA"))) ((((unsupported)) ("x00xdcAx00") ("ufffdA"))))
                        (((unsupported)) ((((unsupported)) ((xraw)) ((xexpected)))) ((xtests)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_16_le_decode)) ((xraw)) ("strict") (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xdecode)) ("utf-16le") ("replace"))) ((xexpected)))
                xtest_nonbmp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("U00010203".xencode)) (((xself).xencoding)))) ("x00xd8x03xde"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("x00xd8x03xde".xdecode)) (((xself).xencoding)))) ("U00010203"))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-16-be"
                xill_formed_sequence.write "xdcx80"
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu0100uffffU00010000") ((((unsupported)) ("") ("x00") ("x00") ("x00xff") ("x00xff") ("x00xffu0100") ("x00xffu0100") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffff") ("x00xffu0100uffffU00010000"))))
                xtest_errors.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)) ((((unsupported)) ("xff") ("ufffd"))) ((((unsupported)) ("x00Axff") ("Aufffd"))) ((((unsupported)) ("x00Ax00Bx00Cx00DZ") ("ABCDufffd"))) ((((unsupported)) ("xd8x00") ("ufffd"))) ((((unsupported)) ("xd8x00xdc") ("ufffd"))) ((((unsupported)) ("xd8x00x00A") ("ufffdA"))) ((((unsupported)) ("xdcx00x00A") ("ufffdA"))))
                        (((unsupported)) ((((unsupported)) ((xraw)) ((xexpected)))) ((xtests)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_16_be_decode)) ((xraw)) ("strict") (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xdecode)) ("utf-16be") ("replace"))) ((xexpected)))
                xtest_nonbmp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("U00010203".xencode)) (((xself).xencoding)))) ("xd8x00xdex03"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("xd8x00xdex03".xdecode)) (((xself).xencoding)))) ("U00010203"))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-8"
                xill_formed_sequence.write "xedxb2x80"
                xill_formed_sequence_replace.write ("ufffd".mul 3)
                xBOM.write ""
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("x00xffu07ffu0800uffffU00010000") ((((unsupported)) ("x00") ("x00") ("x00xff") ("x00xff") ("x00xffu07ff") ("x00xffu07ff") ("x00xffu07ff") ("x00xffu07ffu0800") ("x00xffu07ffu0800") ("x00xffu07ffu0800") ("x00xffu07ffu0800uffff") ("x00xffu07ffu0800uffff") ("x00xffu07ffu0800uffff") ("x00xffu07ffu0800uffff") ("x00xffu07ffu0800uffffU00010000"))))
                xtest_decoder_state.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write "x00x7fx80xffu0100u07ffu0800uffffU0010ffff"
                        bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) (((xself).xencoding)) ((xu)) (((((xu).xencode)) (((xself).xencoding)))))
                xtest_decode_error.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xerror_handler)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("[x80xff]") ("ignore") ("[]"))) ((((unsupported)) ("[x80xff]") ("replace") ("[ufffdufffd]"))) ((((unsupported)) ("[x80xff]") ("surrogateescape") ("[udc80udcff]"))) ((((unsupported)) ("[x80xff]") ("backslashreplace") ((((unsupported)) 0)))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xerror_handler)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) (((xself).xencoding)) ((xerror_handler)))) ((xexpected)))
                xtest_lone_surrogates.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xtest_lone_surrogates)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uDC80]".xencode)) (((xself).xencoding)) ("surrogateescape"))) ((((xself).xBOM).add "[x80]")))
                        (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeEncodeError)))) ((xcm)))
                          bogusForceDataize.write ((("[uDC80uD800uDFFF]".xencode)) (((xself).xencoding)) ("surrogateescape"))
                        xexc.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xexc).xobject)) ((((unsupported)) (((xexc).xstart)) (((xexc).xend)))))) ("uD800uDFFF"))
                xtest_surrogatepass_handler.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("abcud800def".xencode)) (((xself).xencoding)) ("surrogatepass"))) ((((xself).xBOM).add "abcxedxa0x80def")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("U00010fffuD800".xencode)) (((xself).xencoding)) ("surrogatepass"))) ((((xself).xBOM).add "xf0x90xbfxbfxedxa0x80")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("[uD800uDC80]".xencode)) (((xself).xencoding)) ("surrogatepass"))) ((((xself).xBOM).add "[xedxa0x80xedxb2x80]")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("abcxedxa0x80def".xdecode)) (((xself).xencoding)) ("surrogatepass"))) ("abcud800def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("xf0x90xbfxbfxedxa0x80".xdecode)) (((xself).xencoding)) ("surrogatepass"))) ("U00010fffuD800"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xcodecs).xlookup_error)) ("surrogatepass"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeDecodeError)))))
                          bogusForceDataize.write ((("abcxedxa0".xdecode)) (((xself).xencoding)) ("surrogatepass"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeDecodeError)))))
                          bogusForceDataize.write ((("abcxedxa0z".xdecode)) (((xself).xencoding)) ("surrogatepass"))
                xtest_incremental_errors.write
                  [xself]
                    memory > xcases
                    memory > xdec
                    seq > @
                      seq
                        xcases.write (((unsupported)) ("x80") ("xBF") ("xC0") ("xC1") ("xF5") ("xF6") ("xFF"))
                        (((unsupported)) ((xprefix)) ((((unsupported)) ("xC2") ("xDF") ("xE0") ("xE0xA0") ("xEF") ("xEFxBF") ("xF0") ("xF0x90") ("xF0x90x80") ("xF4") ("xF4x8F") ("xF4x8FxBF"))))
                          (((unsupported)) ((xsuffix)) ((((unsupported)) ("x7F") ("xC0"))))
                            bogusForceDataize.write ((((xcases).xappend)) (((xprefix).add (xsuffix))))
                        bogusForceDataize.write ((((xcases).xextend)) ((((unsupported)) ("xE0x80") ("xE0x9F") ("xEDxA0x80") ("xEDxBFxBF") ("xF0x80") ("xF0x8F") ("xF4x90"))))
                        (((unsupported)) ((xdata)) ((xcases)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)))))
                            seq
                              xdec.write ((((((xcodecs).xgetincrementaldecoder)) (((xself).xencoding)))) 0)
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xdec).xdecode)) ((xdata)))
            (((unsupported)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-7"
                xtest_ascii.write
                  [xself]
                    memory > xother_ascii
                    memory > xws
                    memory > xset_o
                    memory > xset_d
                    seq > @
                      seq
                        xset_d.write "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xset_d).xencode)) (((xself).xencoding)))) (((((xset_d).xencode)) ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xset_d).xencode)) ("ascii")).xdecode)) (((xself).xencoding)))) ((xset_d)))
                        xset_o.write " !\"#$%&*;<=>@[]^_`{|}"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xset_o).xencode)) (((xself).xencoding)))) (((((xset_o).xencode)) ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xset_o).xencode)) ("ascii")).xdecode)) (((xself).xencoding)))) ((xset_o)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("a+b".xencode)) (((xself).xencoding)))) ("a+-b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("a+-b".xdecode)) (((xself).xencoding)))) ("a+b"))
                        xws.write " tnr"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xws).xencode)) (((xself).xencoding)))) (((((xws).xencode)) ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xws).xencode)) ("ascii")).xdecode)) (((xself).xencoding)))) ((xws)))
                        xother_ascii.write ((("".xjoin)) ((((xsorted)) (((((xset)) (((((((xbytes)) ((((xrange)) (128)))).xdecode)) 0))).sub (((xset)) (((((xset_d).add (xset_o)).add "+").add (xws)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xother_ascii).xencode)) (((xself).xencoding)))) ("+AAAAAQACAAMABAAFAAYABwAIAAsADAAOAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsAHAAdAB4AHwBcAH4Afw-"))
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("a+-bx00cx80du0100eU00010000f") ((((unsupported)) ("a") ("a") ("a+") ("a+-") ("a+-b") ("a+-b") ("a+-b") ("a+-b") ("a+-b") ("a+-bx00") ("a+-bx00c") ("a+-bx00c") ("a+-bx00c") ("a+-bx00c") ("a+-bx00c") ("a+-bx00cx80") ("a+-bx00cx80d") ("a+-bx00cx80d") ("a+-bx00cx80d") ("a+-bx00cx80d") ("a+-bx00cx80d") ("a+-bx00cx80du0100") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100e") ("a+-bx00cx80du0100eU00010000") ("a+-bx00cx80du0100eU00010000f"))))
                xtest_errors.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)) ((((unsupported)) ("xffb") ("ufffdb"))) ((((unsupported)) ("axffb") ("aufffdb"))) ((((unsupported)) ("axffxffb") ("aufffdufffdb"))) ((((unsupported)) ("a+IK") ("aufffd"))) ((((unsupported)) ("a+IK-b") ("aufffdb"))) ((((unsupported)) ("a+IK,b") ("aufffdb"))) ((((unsupported)) ("a+IKx") ("au20acufffd"))) ((((unsupported)) ("a+IKx-b") ("au20acufffdb"))) ((((unsupported)) ("a+IKwgr") ("au20acufffd"))) ((((unsupported)) ("a+IKwgr-b") ("au20acufffdb"))) ((((unsupported)) ("a+IKwgr,") ("au20acufffd"))) ((((unsupported)) ("a+IKwgr,-b") ("au20acufffd-b"))) ((((unsupported)) ("a+IKwgrB") ("au20acu20acufffd"))) ((((unsupported)) ("a+IKwgrB-b") ("au20acu20acufffdb"))) ((((unsupported)) ("a+/,+IKw-b") ("aufffdu20acb"))) ((((unsupported)) ("a+//,+IKw-b") ("aufffdu20acb"))) ((((unsupported)) ("a+///,+IKw-b") ("auffffufffdu20acb"))) ((((unsupported)) ("a+////,+IKw-b") ("auffffufffdu20acb"))) ((((unsupported)) ("a+IKw-bxff") ("au20acbufffd"))) ((((unsupported)) ("a+IKwxffb") ("au20acufffdb"))) ((((unsupported)) ("a+@b") ("aufffdb"))))
                        (((unsupported)) ((((unsupported)) ((xraw)) ((xexpected)))) ((xtests)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xraw)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_7_decode)) ((xraw)) ("strict") (TRUE))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xdecode)) ("utf-7") ("replace"))) ((xexpected)))
                xtest_nonbmp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("U000104A0".xencode)) (((xself).xencoding)))) ("+2AHcoA-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("ud801udca0".xencode)) (((xself).xencoding)))) ("+2AHcoA-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+2AHcoA-".xdecode)) (((xself).xencoding)))) ("U000104A0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+2AHcoA".xdecode)) (((xself).xencoding)))) ("U000104A0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("u20acU000104A0".xencode)) (((xself).xencoding)))) ("+IKzYAdyg-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+IKzYAdyg-".xdecode)) (((xself).xencoding)))) ("u20acU000104A0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+IKzYAdyg".xdecode)) (((xself).xencoding)))) ("u20acU000104A0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("u20acu20acU000104A0".xencode)) (((xself).xencoding)))) ("+IKwgrNgB3KA-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+IKwgrNgB3KA-".xdecode)) (((xself).xencoding)))) ("u20acu20acU000104A0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("+IKwgrNgB3KA".xdecode)) (((xself).xencoding)))) ("u20acu20acU000104A0"))
                xtest_lone_surrogates.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)) ((((unsupported)) ("a+2AE-b") ("aud801b"))) ((((unsupported)) ("a+2AExffb") ("aufffdb"))) ((((unsupported)) ("a+2AE") ("aufffd"))) ((((unsupported)) ("a+2AEA-b") ("aufffdb"))) ((((unsupported)) ("a+2AH-b") ("aufffdb"))) ((((unsupported)) ("a+IKzYAQ-b") ("au20acud801b"))) ((((unsupported)) ("a+IKzYAQxffb") ("au20acufffdb"))) ((((unsupported)) ("a+IKzYAQA-b") ("au20acufffdb"))) ((((unsupported)) ("a+IKzYAd-b") ("au20acufffdb"))) ((((unsupported)) ("a+IKwgrNgB-b") ("au20acu20acud801b"))) ((((unsupported)) ("a+IKwgrNgBxffb") ("au20acu20acufffdb"))) ((((unsupported)) ("a+IKwgrNgB") ("au20acu20acufffd"))) ((((unsupported)) ("a+IKwgrNgBA-b") ("au20acu20acufffdb"))))
                        (((unsupported)) ((((unsupported)) ((xraw)) ((xexpected)))) ((xtests)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xraw)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xdecode)) ("utf-7") ("replace"))) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xutf_16_ex_decode)) ("xff") ("strict") (0) (TRUE))
                xtest_bad_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xutf_16_ex_decode)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_array.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xreadbuffer_encode)) (((((xarray).xarray)) ("b") ("spam"))))) ((((unsupported)) ("spam") (4))))
                xtest_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xreadbuffer_encode)) (""))) ((((unsupported)) ("") (0))))
                xtest_bad_args.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xreadbuffer_encode)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xreadbuffer_encode)) (42))
            (((unsupported)) ((xUTF8Test)) (((xunittest).xTestCase)))
              seq
                xencoding.write "utf-8-sig"
                xBOM.write ((xcodecs).xBOM_UTF8)
                xtest_partial.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_partial)) ("ufeffx00xffu07ffu0800uffffU00010000") ((((unsupported)) ("") ("") ("") ("") ("") ("ufeff") ("ufeffx00") ("ufeffx00") ("ufeffx00xff") ("ufeffx00xff") ("ufeffx00xffu07ff") ("ufeffx00xffu07ff") ("ufeffx00xffu07ff") ("ufeffx00xffu07ffu0800") ("ufeffx00xffu07ffu0800") ("ufeffx00xffu07ffu0800") ("ufeffx00xffu07ffu0800uffff") ("ufeffx00xffu07ffu0800uffff") ("ufeffx00xffu07ffu0800uffff") ("ufeffx00xffu07ffu0800uffff") ("ufeffx00xffu07ffu0800uffffU00010000"))))
                xtest_bug1601501.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("xefxbbxbf") ("utf-8-sig"))) (""))
                xtest_bom.write
                  [xself]
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xd.write ((((((xcodecs).xgetincrementaldecoder)) ("utf-8-sig"))) 0)
                        xs.write "spam"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xdecode)) (((((xs).xencode)) ("utf-8-sig"))))) ((xs)))
                xtest_stream_bom.write
                  [xself]
                    memory > xbytestring
                    memory > xdata
                    memory > xgot
                    memory > xreader
                    memory > xostream
                    memory > xistream
                    memory > xunistring
                    seq > @
                      seq
                        xunistring.write "ABCu00A1u2200XYZ"
                        xbytestring.write (((xcodecs).xBOM_UTF8).add "ABCxC2xA1xE2x88x80XYZ")
                        xreader.write ((((xcodecs).xgetreader)) ("utf-8-sig"))
                        (((unsupported)) ((xsizehint)) ((((((unsupported)) ("None: is there a None literal in the EO language?")).add (((xlist)) ((((xrange)) (1) (11))))).add (((unsupported)) (64) (128) (256) (512) (1024)))))
                          seq
                            xistream.write (((xreader)) (((((xio).xBytesIO)) ((xbytestring)))))
                            xostream.write ((((xio).xStringIO)) 0)
                            while.
                              1
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)) ((xsizehint)) ("None: is there a None literal in the EO language?")).if
                                      xdata.write ((((xistream).xread)) ((xsizehint)))
                                      xdata.write ((((xistream).xread)) 0)
                                    ((xdata).not).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xostream).xwrite)) ((xdata)))
                            xgot.write ((((xostream).xgetvalue)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xunistring)))
                xtest_stream_bare.write
                  [xself]
                    memory > xbytestring
                    memory > xdata
                    memory > xgot
                    memory > xreader
                    memory > xostream
                    memory > xistream
                    memory > xunistring
                    seq > @
                      seq
                        xunistring.write "ABCu00A1u2200XYZ"
                        xbytestring.write "ABCxC2xA1xE2x88x80XYZ"
                        xreader.write ((((xcodecs).xgetreader)) ("utf-8-sig"))
                        (((unsupported)) ((xsizehint)) ((((((unsupported)) ("None: is there a None literal in the EO language?")).add (((xlist)) ((((xrange)) (1) (11))))).add (((unsupported)) (64) (128) (256) (512) (1024)))))
                          seq
                            xistream.write (((xreader)) (((((xio).xBytesIO)) ((xbytestring)))))
                            xostream.write ((((xio).xStringIO)) 0)
                            while.
                              1
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)) ((xsizehint)) ("None: is there a None literal in the EO language?")).if
                                      xdata.write ((((xistream).xread)) ((xsizehint)))
                                      xdata.write ((((xistream).xread)) 0)
                                    ((xdata).not).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xostream).xwrite)) ((xdata)))
                            xgot.write ((((xostream).xgetvalue)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xunistring)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_empty.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xescape_decode)) (""))) ((((unsupported)) ("") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xescape_decode)) ((((xbytearray)) 0)))) ((((unsupported)) ("") (0))))
                xtest_raw.write
                  [xself]
                    memory > xdecode
                    memory > xb
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xescape_decode)
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          seq
                            xb.write (((xbytes)) ((((unsupported)) ((xb)))))
                            ((xb).neq "\\").if
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) (((xb).add "0")))) ((((unsupported)) (((xb).add "0")) (2))))
                xtest_escape.write
                  [xself]
                    memory > xdecode
                    memory > xcheck
                    memory > xb
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xescape_decode)
                        xcheck.write (((xcoding_checker)) ((xself)) ((xdecode)))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ("[]"))
                        bogusForceDataize.write (((xcheck)) ("[\"]") ("[\"]"))
                        bogusForceDataize.write (((xcheck)) ("[']") ("[']"))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xcheck)) ("[a]") ("[x07]"))
                        bogusForceDataize.write (((xcheck)) ("[b]") ("[x08]"))
                        bogusForceDataize.write (((xcheck)) ("[t]") ("[x09]"))
                        bogusForceDataize.write (((xcheck)) ("[n]") ("[x0a]"))
                        bogusForceDataize.write (((xcheck)) ("[v]") ("[x0b]"))
                        bogusForceDataize.write (((xcheck)) ("[f]") ("[x0c]"))
                        bogusForceDataize.write (((xcheck)) ("[r]") ("[x0d]"))
                        bogusForceDataize.write (((xcheck)) ("[7]") ("[x07]"))
                        bogusForceDataize.write (((xcheck)) ("[78]") ("[x078]"))
                        bogusForceDataize.write (((xcheck)) ("[41]") ("[!]"))
                        bogusForceDataize.write (((xcheck)) ("[418]") ("[!8]"))
                        bogusForceDataize.write (((xcheck)) ("[101]") ("[A]"))
                        bogusForceDataize.write (((xcheck)) ("[1010]") ("[A0]"))
                        bogusForceDataize.write (((xcheck)) ("[501]") ("[A]"))
                        bogusForceDataize.write (((xcheck)) ("[x41]") ("[A]"))
                        bogusForceDataize.write (((xcheck)) ("[x410]") ("[A0]"))
                        (((unsupported)) ((xi)) ((((xrange)) (97) (123))))
                          seq
                            xb.write (((xbytes)) ((((unsupported)) ((xi)))))
                            (((unsupported)) ((xb)) ("abfnrtvx")).if
                              (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                                bogusForceDataize.write (((xcheck)) (("\\".add (xb))) (("\\".add (xb))))
                            (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                              bogusForceDataize.write (((xcheck)) (("\\".add ((((xb).xupper)) 0))) (("\\".add ((((xb).xupper)) 0))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ("8") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ("9") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_errors.write
                  [xself]
                    memory > xdecode
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xescape_decode)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xdecode)) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xdecode)) ("[x]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("[x]x") ("ignore"))) ((((unsupported)) ("[]") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("[x]x") ("replace"))) ((((unsupported)) ("[?]?") (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xdecode)) ("x0"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xdecode)) ("[x0]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("[x0]x0") ("ignore"))) ((((unsupported)) ("[]") (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("[x0]x0") ("replace"))) ((((unsupported)) ("[?]?") (8))))
            xpunycode_testcases.write (((unsupported)) ((((unsupported)) ("u0644u064Au0647u0645u0627u0628u062Au0643u0644u0645u0648u0634u0639u0631u0628u064Au061F") ("egbpdaj6bu4bxfgehfvwxn"))) ((((unsupported)) ("u4ED6u4EECu4E3Au4EC0u4E48u4E0Du8BF4u4E2Du6587") ("ihqwcrb4cv8a8dqg056pqjye"))) ((((unsupported)) ("u4ED6u5011u7232u4EC0u9EBDu4E0Du8AAAu4E2Du6587") ("ihqwctvzc91f659drss3x8bo0yb"))) ((((unsupported)) ("u0050u0072u006Fu010Du0070u0072u006Fu0073u0074u011Bu006Eu0065u006Du006Cu0075u0076u00EDu010Du0065u0073u006Bu0079") ("Proprostnemluvesky-uyb24dma41a"))) ((((unsupported)) ("u05DCu05DEu05D4u05D4u05DDu05E4u05E9u05D5u05D8u05DCu05D0u05DEu05D3u05D1u05E8u05D9u05DDu05E2u05D1u05E8u05D9u05EA") ("4dbcagdahymbxekheh6e0a7fei0b"))) ((((unsupported)) ("u092Fu0939u0932u094Bu0917u0939u093Fu0928u094Du0926u0940u0915u094Du092Fu094Bu0902u0928u0939u0940u0902u092Cu094Bu0932u0938u0915u0924u0947u0939u0948u0902") ("i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd"))) ((((unsupported)) ("u306Au305Cu307Fu3093u306Au65E5u672Cu8A9Eu3092u8A71u3057u3066u304Fu308Cu306Au3044u306Eu304B") ("n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa"))) ((((unsupported)) ("uC138uACC4uC758uBAA8uB4E0uC0ACuB78CuB4E4uC774uD55CuAD6DuC5B4uB97CuC774uD574uD55CuB2E4uBA74uC5BCuB9C8uB098uC88BuC744uAE4C") ("989aomsvi5e83db1d2a355cv1e0vak1dwrv93d5xbh15a0dt30a5jpsd879ccm6fea98c"))) ((((unsupported)) ("u043Fu043Eu0447u0435u043Cu0443u0436u0435u043Eu043Du0438u043Du0435u0433u043Eu0432u043Eu0440u044Fu0442u043Fu043Eu0440u0443u0441u0441u043Au0438") ("b1abfaaepdrnnbgefbaDotcwatmq2g4l"))) ((((unsupported)) ("u0050u006Fu0072u0071u0075u00E9u006Eu006Fu0070u0075u0065u0064u0065u006Eu0073u0069u006Du0070u006Cu0065u006Du0065u006Eu0074u0065u0068u0061u0062u006Cu0061u0072u0065u006Eu0045u0073u0070u0061u00F1u006Fu006C") ("PorqunopuedensimplementehablarenEspaol-fmd56a"))) ((((unsupported)) ("u0054u1EA1u0069u0073u0061u006Fu0068u1ECDu006Bu0068u00F4u006Eu0067u0074u0068u1EC3u0063u0068u1EC9u006Eu00F3u0069u0074u0069u1EBFu006Eu0067u0056u0069u1EC7u0074") ("TisaohkhngthchnitingVit-kjcr8268qyxafd2f1b9g"))) ((((unsupported)) ("u0033u5E74u0042u7D44u91D1u516Bu5148u751F") ("3B-ww4c5e180e575a65lsy2b"))) ((((unsupported)) ("u5B89u5BA4u5948u7F8Eu6075u002Du0077u0069u0074u0068u002Du0053u0055u0050u0045u0052u002Du004Du004Fu004Eu004Bu0045u0059u0053") ("-with-SUPER-MONKEYS-pc58ag80a8qai00g7n9n"))) ((((unsupported)) ("u0048u0065u006Cu006Cu006Fu002Du0041u006Eu006Fu0074u0068u0065u0072u002Du0057u0061u0079u002Du305Du308Cu305Eu308Cu306Eu5834u6240") ("Hello-Another-Way--fc4qua05auwb3674vfr0b"))) ((((unsupported)) ("u3072u3068u3064u5C4Bu6839u306Eu4E0Bu0032") ("2-u9tlzr9756bt3uc0v"))) ((((unsupported)) ("u004Du0061u006Au0069u3067u004Bu006Fu0069u3059u308Bu0035u79D2u524D") ("MajiKoi5-783gue6qz075azm5e"))) ((((unsupported)) ("u30D1u30D5u30A3u30FCu0064u0065u30EBu30F3u30D0") ("de-jg4avhby1noc0d"))) ((((unsupported)) ("u305Du306Eu30B9u30D4u30FCu30C9u3067") ("d9juau41awczczp"))) ((((unsupported)) ("u002Du003Eu0020u0024u0031u002Eu0030u0030u0020u003Cu002D") ("-> $1.00 <--"))))
            (((unsupported)) ((xi)) ((xpunycode_testcases)))
              ((((xlen)) ((xi))).neq 2).if
                bogusForceDataize.write (((xprint)) ((((xrepr)) ((xi)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_encode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xuni)) ((xpuny)))) ((xpunycode_testcases)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xstr)) (((((xuni).xencode)) ("punycode"))) ("ascii")).xlower)) 0)) (((((((xstr)) ((xpuny)) ("ascii")).xlower)) 0)))
                xtest_decode.write
                  [xself]
                    memory > xpuny
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xuni)) ((xpuny)))) ((xpunycode_testcases)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xuni)) (((((xpuny).xdecode)) ("punycode"))))
                          xpuny.write (((((((xpuny).xdecode)) ("ascii")).xencode)) ("ascii"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xuni)) (((((xpuny).xdecode)) ("punycode"))))
                xtest_decode_invalid.write
                  [xself]
                    memory > xtestcases
                    seq > @
                      seq
                        xtestcases.write (((unsupported)) ((((unsupported)) ("xn--w&") ("strict") ((((xUnicodeError)) 0)))) ((((unsupported)) ("xn--w&") ("ignore") ("xn-"))))
                        (((unsupported)) ((((unsupported)) ((xpuny)) ((xerrors)) ((xexpected)))) ((xtestcases)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xpuny)) ((xerrors)))))
                            (((xisinstance)) ((xexpected)) ((xException))).if
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xpuny).xdecode)) ("punycode") ((xerrors)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xpuny).xdecode)) ("punycode") ((xerrors)))) ((xexpected)))
            xnameprep_tests.write (((unsupported)) ((((unsupported)) ("fooxc2xadxcdx8fxe1xa0x86xe1xa0x8bbarxe2x80x8bxe2x81xa0bazxefxb8x80xefxb8x88xefxb8x8fxefxbbxbf") ("foobarbaz"))) ((((unsupported)) ("CAFE") ("cafe"))) ((((unsupported)) ("xc3x9f") ("ss"))) ((((unsupported)) ("xc4xb0") ("ixccx87"))) ((((unsupported)) ("xc5x83xcdxba") ("xc5x84 xcexb9"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("jxccx8cxc2xa0xc2xaa") ("xc7xb0 a"))) ((((unsupported)) ("xe1xbexb7") ("xe1xbexb6xcexb9"))) ((((unsupported)) ("xc7xb0") ("xc7xb0"))) ((((unsupported)) ("xcex90") ("xcex90"))) ((((unsupported)) ("xcexb0") ("xcexb0"))) ((((unsupported)) ("xe1xbax96") ("xe1xbax96"))) ((((unsupported)) ("xe1xbdx96") ("xe1xbdx96"))) ((((unsupported)) (" ") (" "))) ((((unsupported)) ("xc2xa0") (" "))) ((((unsupported)) ("xe1x9ax80") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xe2x80x80") (" "))) ((((unsupported)) ("xe2x80x8b") (""))) ((((unsupported)) ("xe3x80x80") (" "))) ((((unsupported)) ("x10x7f") ("x10x7f"))) ((((unsupported)) ("xc2x85") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xe1xa0x8e") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xefxbbxbf") (""))) ((((unsupported)) ("xf0x9dx85xb5") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xefx84xa3") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf3xb1x88xb4") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf4x8fx88xb4") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf2x8fxbfxbe") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf4x8fxbfxbf") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xedxbdx82") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xefxbfxbd") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xe2xbfxb5") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xcdx81") ("xccx81"))) ((((unsupported)) ("xe2x80x8e") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xe2x80xaa") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf3xa0x80x81") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xf3xa0x81x82") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("fooxd6xbebar") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("fooxefxb5x90bar") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("fooxefxb9xb6bar") ("foo xd9x8ebar"))) ((((unsupported)) ("xd8xa71") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xd8xa71xd8xa8") ("xd8xa71xd8xa8"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("Xxc2xadxc3x9fxc4xb0xe2x84xa1jxccx8cxc2xa0xc2xaaxcexb0xe2x80x80") ("xssixccx87telxc7xb0 axcexb0 "))) ((((unsupported)) ("Xxc3x9fxe3x8cx96xc4xb0xe2x84xa1xe2x92x9fxe3x8cx80") ("xssxe3x82xadxe3x83xadxe3x83xa1xe3x83xbcxe3x83x88xe3x83xabixccx87telx28dx29xe3x82xa2xe3x83x91xe3x83xbcxe3x83x88"))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_nameprep.write
                [xself]
                  memory > xprepped
                  memory > xorig
                  seq > @
                    seq
                      (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) ((xpos)) ((((unsupported)) ((xorig)) ((xprepped)))))) ((((xenumerate)) ((xnameprep_tests)))))
                        seq
                          (((unsupported)) ((xorig)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)) 0)
                          xorig.write (((xstr)) ((xorig)) ("utf-8") ("surrogatepass"))
                          (((unsupported)) ((xprepped)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xnameprep)) ((xorig)))
                            seq
                              xprepped.write (((xstr)) ((xprepped)) ("utf-8") ("surrogatepass"))
                              (((unsupported)) ((xException)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xnameprep)) ((xorig)))) ((xprepped)))
                                (((unsupported)) (((((xsupport).xTestFailed)) (("Test 3.%d: %s".mod (((unsupported)) (((xpos).add 1)) ((((xstr)) ((xe))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_builtin_decode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("python.org") ("idna"))) ("python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("python.org.") ("idna"))) ("python.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("xn--pythn-mua.org") ("idna"))) ("pythxf6n.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("xn--pythn-mua.org.") ("idna"))) ("pythxf6n.org."))
                xtest_builtin_encode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("python.org".xencode)) ("idna"))) ("python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("python.org.".xencode)) ("idna"))) ("python.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("pythxf6n.org".xencode)) ("idna"))) ("xn--pythn-mua.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("pythxf6n.org.".xencode)) ("idna"))) ("xn--pythn-mua.org."))
                xtest_stream.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((((xcodecs).xgetreader)) ("idna"))) (((((xio).xBytesIO)) ("abc"))))
                        bogusForceDataize.write ((((xr).xread)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xread)) 0)) (""))
                xtest_incremental_decode.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterdecode)) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xc)))))) ((xc)) ("python.org"))) ("idna"))))) ("python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterdecode)) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xc)))))) ((xc)) ("python.org."))) ("idna"))))) ("python.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterdecode)) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xc)))))) ((xc)) ("xn--pythn-mua.org."))) ("idna"))))) ("pythxf6n.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterdecode)) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xc)))))) ((xc)) ("xn--pythn-mua.org."))) ("idna"))))) ("pythxf6n.org."))
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("idna"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xn--xam"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("ple-9ta.o"))) ("xe4xample."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("rg"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("") (TRUE))) ("org"))
                        bogusForceDataize.write ((((xdecoder).xreset)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xn--xam"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("ple-9ta.o"))) ("xe4xample."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("rg."))) ("org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("") (TRUE))) (""))
                xtest_incremental_encode.write
                  [xself]
                    memory > xencoder
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterencode)) ("python.org") ("idna"))))) ("python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterencode)) ("python.org.") ("idna"))))) ("python.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterencode)) ("pythxf6n.org.") ("idna"))))) ("xn--pythn-mua.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xcodecs).xiterencode)) ("pythxf6n.org.") ("idna"))))) ("xn--pythn-mua.org."))
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("idna"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("xe4x"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("ample.org"))) ("xn--xample-9ta."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) ("org"))
                        bogusForceDataize.write ((((xencoder).xreset)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("xe4x"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("ample.org."))) ("xn--xample-9ta.org."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) (""))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((("python.org".xencode)) ("idna") ("strict"))
                        bogusForceDataize.write ((("python.org".xdecode)) ("idna") ("strict"))
                        (((unsupported)) ((xerrors)) ((((unsupported)) ("ignore") ("replace") ("backslashreplace") ("surrogateescape"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (("python.org".xencode)) ("idna") ((xerrors)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (("python.org".xdecode)) ("idna") ((xerrors)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_decode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xdecode)) ("xe4xf6xfc") ("latin-1"))) ("xe4xf6xfc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xdecode)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xdecode)) ("abc"))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xdecode)) ("xff") ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xcodecs).xdecode)) ("xe4xf6xfc") ("latin-1"))) ("xe4xf6xfc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xcodecs).xdecode)) ("[xff]") ("ascii") ("ignore"))) ("[]"))
                xtest_encode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xencode)) ("xe4xf6xfc") ("latin-1"))) ("xe4xf6xfc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xencode)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xencode)) ("foo") ("__spam__"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xencode)) ("abc"))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xcodecs).xencode)) ("xffff") ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xcodecs).xencode)) ("xe4xf6xfc") ("latin-1"))) ("xe4xf6xfc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xcodecs).xencode)) ("[xff]") ("ascii") ("ignore"))) ("[]"))
                xtest_register.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xregister)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xregister)) (42))
                xtest_lookup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xlookup)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xlookup)) ("__spam__"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xlookup)) (" "))
                xtest_getencoder.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xgetencoder)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xgetencoder)) ("__spam__"))
                xtest_getdecoder.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xgetdecoder)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xgetdecoder)) ("__spam__"))
                xtest_getreader.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xgetreader)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xgetreader)) ("__spam__"))
                xtest_getwriter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xgetwriter)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xcodecs).xgetwriter)) ("__spam__"))
                xtest_lookup_issue1813.write
                  [xself]
                    memory > xc
                    memory > xoldlocale
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)) (((xlocale).xError)))
                          bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("tr_TR"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("test needs Turkish locale"))
                        xc.write ((((xcodecs).xlookup)) ("ASCII"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xname)) ("ascii"))
                xtest_all.write
                  [xself]
                    memory > xapi
                    seq > @
                      seq
                        xapi.write (((unsupported)) ("encode") ("decode") ("register") ("CodecInfo") ("Codec") ("IncrementalEncoder") ("IncrementalDecoder") ("StreamReader") ("StreamWriter") ("lookup") ("getencoder") ("getdecoder") ("getincrementalencoder") ("getincrementaldecoder") ("getreader") ("getwriter") ("register_error") ("lookup_error") ("strict_errors") ("replace_errors") ("ignore_errors") ("xmlcharrefreplace_errors") ("backslashreplace_errors") ("namereplace_errors") ("open") ("EncodedFile") ("iterencode") ("iterdecode") ("BOM") ("BOM_BE") ("BOM_LE") ("BOM_UTF8") ("BOM_UTF16") ("BOM_UTF16_BE") ("BOM_UTF16_LE") ("BOM_UTF32") ("BOM_UTF32_BE") ("BOM_UTF32_LE") ("BOM32_BE") ("BOM32_LE") ("BOM64_BE") ("BOM64_LE") ("StreamReaderWriter") ("StreamRecoder"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)) ((xapi)) (((xcodecs).x__all__)))
                        (((unsupported)) ((xapi)) (((xcodecs).x__all__)))
                          bogusForceDataize.write (((xgetattr)) ((xcodecs)) ((xapi)))
                xtest_open.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)) ((xmode)) ((((unsupported)) ("w") ("r") ("r+") ("w+") ("a") ("a+"))))
                          (((unsupported)) (((((xself).xsubTest)) ((xmode)))) (((((xcodecs).xopen)) (((xsupport).xTESTFN)) ((xmode)) ("ascii"))) ((xfile)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfile)) (((xcodecs).xStreamReaderWriter)))
                xtest_undefined.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xencode)) ("abc") ("undefined"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xdecode)) ("abc") ("undefined"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xencode)) ("") ("undefined"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xdecode)) ("") ("undefined"))
                        (((unsupported)) ((xerrors)) ((((unsupported)) ("strict") ("ignore") ("replace") ("backslashreplace"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xencode)) ("abc") ("undefined") ((xerrors)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xcodecs).xdecode)) ("abc") ("undefined") ((xerrors)))
                xtest_file_closes_if_lookup_error_raised.write
                  [xself]
                    memory > xmock_open
                    seq > @
                      seq
                        xmock_open.write ((((xmock).xmock_open)) 0)
                        (((unsupported)) (((((xmock).xpatch)) ("builtins.open") ((xmock_open)))) ((xfile)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xLookupError)))))
                              bogusForceDataize.write ((((xcodecs).xopen)) (((xsupport).xTESTFN)) ("wt") ("invalid-encoding"))
                            bogusForceDataize.write (((((((xfile)) 0).xclose).xassert_called)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xreader)) (((((xcodecs).xgetreader)) ("utf-8"))))
                        (((unsupported)) (((xself).xstream)) (((((xio).xBytesIO)) ("xedx95x9cnxeaxb8x80"))))
                xtest_readlines.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xreader)) (((xself).xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xreadlines)) 0)) ((((unsupported)) ("ud55cn") ("uae00"))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_basic.write
                [xself]
                  memory > xef
                  memory > xf
                  seq > @
                    seq
                      xf.write ((((xio).xBytesIO)) ("xedx95x9cnxeaxb8x80"))
                      xef.write ((((xcodecs).xEncodedFile)) ((xf)) ("utf-16-le") ("utf-8"))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xef).xread)) 0)) ((((unsupported)) 0)))
                      xf.write ((((xio).xBytesIO)) 0)
                      xef.write ((((xcodecs).xEncodedFile)) ((xf)) ("utf-8") ("latin-1"))
                      bogusForceDataize.write ((((xef).xwrite)) ("xc3xbc"))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetvalue)) 0)) ("xfc"))
            xall_unicode_encodings.write (((unsupported)) ("ascii") ("big5") ("big5hkscs") ("charmap") ("cp037") ("cp1006") ("cp1026") ("cp1125") ("cp1140") ("cp1250") ("cp1251") ("cp1252") ("cp1253") ("cp1254") ("cp1255") ("cp1256") ("cp1257") ("cp1258") ("cp424") ("cp437") ("cp500") ("cp720") ("cp737") ("cp775") ("cp850") ("cp852") ("cp855") ("cp856") ("cp857") ("cp858") ("cp860") ("cp861") ("cp862") ("cp863") ("cp864") ("cp865") ("cp866") ("cp869") ("cp874") ("cp875") ("cp932") ("cp949") ("cp950") ("euc_jis_2004") ("euc_jisx0213") ("euc_jp") ("euc_kr") ("gb18030") ("gb2312") ("gbk") ("hp_roman8") ("hz") ("idna") ("iso2022_jp") ("iso2022_jp_1") ("iso2022_jp_2") ("iso2022_jp_2004") ("iso2022_jp_3") ("iso2022_jp_ext") ("iso2022_kr") ("iso8859_1") ("iso8859_10") ("iso8859_11") ("iso8859_13") ("iso8859_14") ("iso8859_15") ("iso8859_16") ("iso8859_2") ("iso8859_3") ("iso8859_4") ("iso8859_5") ("iso8859_6") ("iso8859_7") ("iso8859_8") ("iso8859_9") ("johab") ("koi8_r") ("koi8_t") ("koi8_u") ("kz1048") ("latin_1") ("mac_cyrillic") ("mac_greek") ("mac_iceland") ("mac_latin2") ("mac_roman") ("mac_turkish") ("palmos") ("ptcp154") ("punycode") ("raw_unicode_escape") ("shift_jis") ("shift_jis_2004") ("shift_jisx0213") ("tis_620") ("unicode_escape") ("utf_16") ("utf_16_be") ("utf_16_le") ("utf_7") ("utf_8"))
            (((xhasattr)) ((xcodecs)) ("mbcs_encode")).if
              bogusForceDataize.write ((((xall_unicode_encodings).xappend)) ("mbcs"))
            (((xhasattr)) ((xcodecs)) ("oem_encode")).if
              bogusForceDataize.write ((((xall_unicode_encodings).xappend)) ("oem"))
            xbroken_unicode_with_stateful.write (((unsupported)) ("punycode"))
            (((unsupported)) (((xunittest).xTestCase)) ((xMixInCheckStateHandling)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xdecodedresult
                    memory > xq
                    memory > xreader
                    memory > xencoder
                    memory > xencodedresult
                    memory > xs
                    memory > xdecoder
                    memory > xname
                    memory > xresult
                    memory > xchunk
                    memory > xwriter
                    seq > @
                      seq
                        xs.write "abc123"
                        (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                          seq
                            xname.write (((((xcodecs).xlookup)) ((xencoding))).xname)
                            ((((xencoding).xendswith)) ("_codec")).if
                              (((unsupported)) ((xname)) ("_codec"))
                              ((xencoding).eq "latin_1").if
                                xname.write "latin_1"
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoding).xreplace)) ("_") ("-"))) (((((xname).xreplace)) ("_") ("-"))))
                            (((unsupported)) ((((unsupported)) ((xb)) ((xsize)))) (((((((xcodecs).xgetencoder)) ((xencoding)))) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsize)) ((((xlen)) ((xs)))) (("encoding=%r".mod (xencoding))))
                            (((unsupported)) ((((unsupported)) ((xchars)) ((xsize)))) (((((((xcodecs).xgetdecoder)) ((xencoding)))) ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xchars)) ((xs)) (("encoding=%r".mod (xencoding))))
                            (((unsupported)) ((xencoding)) ((xbroken_unicode_with_stateful))).if
                              seq
                                xq.write (((xQueue)) (""))
                                xwriter.write ((((((xcodecs).xgetwriter)) ((xencoding)))) ((xq)))
                                xencodedresult.write ""
                                (((unsupported)) ((xc)) ((xs)))
                                  seq
                                    bogusForceDataize.write ((((xwriter).xwrite)) ((xc)))
                                    xchunk.write ((((xq).xread)) 0)
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xtype)) ((xchunk)))) ((xbytes)))) ((((xtype)) ((xchunk)))))
                                    (((unsupported)) ((xencodedresult)) ((xchunk)))
                                xq.write (((xQueue)) (""))
                                xreader.write ((((((xcodecs).xgetreader)) ((xencoding)))) ((xq)))
                                xdecodedresult.write ""
                                (((unsupported)) ((xc)) ((xencodedresult)))
                                  seq
                                    bogusForceDataize.write ((((xq).xwrite)) ((((xbytes)) ((((unsupported)) ((xc)))))))
                                    (((unsupported)) ((xdecodedresult)) (((((xreader).xread)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xdecodedresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                            (((unsupported)) ((xencoding)) ((xbroken_unicode_with_stateful))).if
                              seq
                                (((unsupported)) ((xLookupError)))
                                  xencoder.write ((((((xcodecs).xgetincrementalencoder)) ((xencoding)))) 0)
                                  seq
                                    xencodedresult.write ""
                                    (((unsupported)) ((xc)) ((xs)))
                                      (((unsupported)) ((xencodedresult)) (((((xencoder).xencode)) ((xc)))))
                                    (((unsupported)) ((xencodedresult)) (((((xencoder).xencode)) ("") (TRUE))))
                                    xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ((xencoding)))) 0)
                                    xdecodedresult.write ""
                                    (((unsupported)) ((xc)) ((xencodedresult)))
                                      (((unsupported)) ((xdecodedresult)) (((((xdecoder).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))))
                                    (((unsupported)) ((xdecodedresult)) (((((xdecoder).xdecode)) ("") (TRUE))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xdecodedresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                                    xresult.write ((("".xjoin)) (((((xcodecs).xiterdecode)) (((((xcodecs).xiterencode)) ((xs)) ((xencoding)))) ((xencoding)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                                    xresult.write ((("".xjoin)) (((((xcodecs).xiterdecode)) (((((xcodecs).xiterencode)) ("") ((xencoding)))) ((xencoding)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) (""))
                                (((unsupported)) ((xencoding)) ((((unsupported)) ("idna") ("mbcs")))).if
                                  (((unsupported)) ((xLookupError)))
                                    xencoder.write ((((((xcodecs).xgetincrementalencoder)) ((xencoding)))) ("ignore"))
                                    seq
                                      xencodedresult.write ((("".xjoin)) ((((unsupported)) (((((xencoder).xencode)) ((xc)))) ((xc)) ((xs)))))
                                      xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ((xencoding)))) ("ignore"))
                                      xdecodedresult.write ((("".xjoin)) ((((unsupported)) (((((xdecoder).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))) ((xc)) ((xencodedresult)))))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((xdecodedresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                xtest_basics_capi.write
                  [xself]
                    memory > xdecodedresult
                    memory > xencodedresult
                    memory > xs
                    memory > xcencoder
                    memory > xcdecoder
                    seq > @
                      (((unsupported)) 0)
                        xs.write "abc123"
                        (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                          (((unsupported)) ((xencoding)) ((xbroken_unicode_with_stateful))).if
                            seq
                              (((unsupported)) ((xLookupError)))
                                xcencoder.write ((((x_testcapi).xcodec_incrementalencoder)) ((xencoding)))
                                seq
                                  xencodedresult.write ""
                                  (((unsupported)) ((xc)) ((xs)))
                                    (((unsupported)) ((xencodedresult)) (((((xcencoder).xencode)) ((xc)))))
                                  (((unsupported)) ((xencodedresult)) (((((xcencoder).xencode)) ("") (TRUE))))
                                  xcdecoder.write ((((x_testcapi).xcodec_incrementaldecoder)) ((xencoding)))
                                  xdecodedresult.write ""
                                  (((unsupported)) ((xc)) ((xencodedresult)))
                                    (((unsupported)) ((xdecodedresult)) (((((xcdecoder).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))))
                                  (((unsupported)) ((xdecodedresult)) (((((xcdecoder).xdecode)) ("") (TRUE))))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xdecodedresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                              (((unsupported)) ((xencoding)) ((((unsupported)) ("idna") ("mbcs")))).if
                                (((unsupported)) ((xLookupError)))
                                  xcencoder.write ((((x_testcapi).xcodec_incrementalencoder)) ((xencoding)) ("ignore"))
                                  seq
                                    xencodedresult.write ((("".xjoin)) ((((unsupported)) (((((xcencoder).xencode)) ((xc)))) ((xc)) ((xs)))))
                                    xcdecoder.write ((((x_testcapi).xcodec_incrementaldecoder)) ((xencoding)) ("ignore"))
                                    xdecodedresult.write ((("".xjoin)) ((((unsupported)) (((((xcdecoder).xdecode)) ((((xbytes)) ((((unsupported)) ((xc)))))))) ((xc)) ((xencodedresult)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xdecodedresult)) ((xs)) (("encoding=%r".mod (xencoding))))
                xtest_seek.write
                  [xself]
                    memory > xs
                    memory > xreader
                    memory > xdata
                    seq > @
                      seq
                        xs.write ("%sn%sn".mod (((unsupported)) ((100.mul "abc123")) ((100.mul "def456"))))
                        (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                          seq
                            ((xencoding).eq "idna").if
                              (((unsupported)) 0)
                            (((unsupported)) ((xencoding)) ((xbroken_unicode_with_stateful))).if
                              (((unsupported)) 0)
                            xreader.write ((((((xcodecs).xgetreader)) ((xencoding)))) (((((xio).xBytesIO)) (((((xs).xencode)) ((xencoding)))))))
                            (((unsupported)) ((xt)) ((((xrange)) (5))))
                              seq
                                bogusForceDataize.write ((((xreader).xseek)) (0) (0))
                                xdata.write ((((xreader).xread)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xdata)))
                xtest_bad_decode_args.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                        seq
                          xdecoder.write ((((xcodecs).xgetdecoder)) ((xencoding)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdecoder)))
                          (((unsupported)) ((xencoding)) ((((unsupported)) ("idna") ("punycode")))).if
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdecoder)) (42))
                xtest_bad_encode_args.write
                  [xself]
                    memory > xencoder
                    seq > @
                      (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                        seq
                          xencoder.write ((((xcodecs).xgetencoder)) ((xencoding)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xencoder)))
                xtest_encoding_map_type_initialized.write
                  [xself]
                    memory > xtable_type
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtable_type.write (((xtype)) (((xcp1140).xencoding_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtable_type)) ((xtable_type)))
                xtest_decoder_state.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write "abc123"
                        (((unsupported)) ((xencoding)) ((xall_unicode_encodings)))
                          (((unsupported)) ((xencoding)) ((xbroken_unicode_with_stateful))).if
                            seq
                              bogusForceDataize.write ((((xself).xcheck_state_handling_decode)) ((xencoding)) ((xu)) (((((xu).xencode)) ((xencoding)))))
                              bogusForceDataize.write ((((xself).xcheck_state_handling_encode)) ((xencoding)) ((xu)) (((((xu).xencode)) ((xencoding)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_decode_with_string_map.write
                  [xself]
                    memory > xallbytes
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ("abc"))) ((((unsupported)) ("abc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ("U0010FFFFbc"))) ((((unsupported)) ("U0010FFFFbc") (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ("ab"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ("abufffe"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ("ab"))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ("abufffe"))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ("ab"))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ("abufffe"))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ("ab"))) ((((unsupported)) ("ab") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ("abufffe"))) ((((unsupported)) ("ab") (3))))
                        xallbytes.write (((xbytes)) ((((xrange)) (256))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ((xallbytes)) ("ignore") (""))) ((((unsupported)) ("") ((((xlen)) ((xallbytes)))))))
                xtest_decode_with_int2str_map.write
                  [xself]
                    memory > xallbytes
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("a") (1) ("b") (2) ("c"))))) ((((unsupported)) ("abc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("Aa") (1) ("Bb") (2) ("Cc"))))) ((((unsupported)) ("AaBbCc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("U0010FFFF") (1) ("b") (2) ("c"))))) ((((unsupported)) ("U0010FFFFbc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("a") (1) ("b") (2) (""))))) ((((unsupported)) ("ab") (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("a") (1) ("b"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("a") (1) ("b") (2) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("a") (1) ("b") (2) ("ufffe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ((((unsupported)) (0) ("a") (1) ("b"))))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ((((unsupported)) (0) ("a") (1) ("b") (2) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ((((unsupported)) (0) ("a") (1) ("b") (2) ("ufffe"))))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ((((unsupported)) (0) ("a") (1) ("b"))))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ((((unsupported)) (0) ("a") (1) ("b") (2) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ((((unsupported)) (0) ("a") (1) ("b") (2) ("ufffe"))))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ((((unsupported)) (0) ("a") (1) ("b"))))) ((((unsupported)) ("ab") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ((((unsupported)) (0) ("a") (1) ("b") (2) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("ab") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ((((unsupported)) (0) ("a") (1) ("b") (2) ("ufffe"))))) ((((unsupported)) ("ab") (3))))
                        xallbytes.write (((xbytes)) ((((xrange)) (256))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ((xallbytes)) ("ignore") ((((unsupported)) 0)))) ((((unsupported)) ("") ((((xlen)) ((xallbytes)))))))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xTypeError)) ((((unsupported)) 0)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("A") (1) ("Bb") (2) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xTypeError)) ((((unsupported)) 0)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ("A") (1) ("Bb") (2) (999999999))))
                xtest_decode_with_int2int_map.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((xord)) ("a"))
                        xb.write (((xord)) ("b"))
                        xc.write (((xord)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ((xa)) (1) ((xb)) (2) ((xc)))))) ((((unsupported)) ("abc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) (1114111) (1) ((xb)) (2) ((xc)))))) ((((unsupported)) ("U0010FFFFbc") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) (((xsys).xmaxunicode)) (1) ((xb)) (2) ((xc)))))) ((((unsupported)) (((((xchr)) (((xsys).xmaxunicode))).add "bc")) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ((((xsys).xmaxunicode).add 1)) (1) ((xb)) (2) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ((xa)) (1) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcharmap_decode)) ("x00x01x02") ("strict") ((((unsupported)) (0) ((xa)) (1) ((xb)) (2) (65534))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ((((unsupported)) (0) ((xa)) (1) ((xb)))))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("replace") ((((unsupported)) (0) ((xa)) (1) ((xb)) (2) (65534))))) ((((unsupported)) ("abufffd") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ((((unsupported)) (0) ((xa)) (1) ((xb)))))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("backslashreplace") ((((unsupported)) (0) ((xa)) (1) ((xb)) (2) (65534))))) ((((unsupported)) ((((unsupported)) 0)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ((((unsupported)) (0) ((xa)) (1) ((xb)))))) ((((unsupported)) ("ab") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcharmap_decode)) ("x00x01x02") ("ignore") ((((unsupported)) (0) ((xa)) (1) ((xb)) (2) (65534))))) ((((unsupported)) ("ab") (3))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_encodedfile.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) ("xc3xbc"))
                        (((unsupported)) (((((xcodecs).xEncodedFile)) ((xf)) ("latin-1") ("utf-8"))) ((xef)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xef).xread)) 0)) ("xfc"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xf).xclosed)))
                xtest_streamreaderwriter.write
                  [xself]
                    memory > xinfo
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) ("xc3xbc"))
                        xinfo.write ((((xcodecs).xlookup)) ("utf-8"))
                        (((unsupported)) (((((xcodecs).xStreamReaderWriter)) ((xf)) (((xinfo).xstreamreader)) (((xinfo).xstreamwriter)) ("strict"))) ((xsrw)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xsrw).xread)) 0)) ("xfc"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_decode_unicode.write
                  [xself]
                    memory > xdecoders
                    seq > @
                      seq
                        xdecoders.write (((unsupported)) (((xcodecs).xutf_7_decode)) (((xcodecs).xutf_8_decode)) (((xcodecs).xutf_16_le_decode)) (((xcodecs).xutf_16_be_decode)) (((xcodecs).xutf_16_ex_decode)) (((xcodecs).xutf_32_decode)) (((xcodecs).xutf_32_le_decode)) (((xcodecs).xutf_32_be_decode)) (((xcodecs).xutf_32_ex_decode)) (((xcodecs).xlatin_1_decode)) (((xcodecs).xascii_decode)) (((xcodecs).xcharmap_decode)))
                        (((xhasattr)) ((xcodecs)) ("mbcs_decode")).if
                          bogusForceDataize.write ((((xdecoders).xappend)) (((xcodecs).xmbcs_decode)))
                        (((unsupported)) ((xdecoder)) ((xdecoders)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdecoder)) ("xxx"))
                xtest_unicode_escape.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_decode)) ("u1234"))) ((((unsupported)) ("u1234") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_decode)) ("u1234"))) ((((unsupported)) ("u1234") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_decode)) ("u1234"))) ((((unsupported)) ("u1234") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_decode)) ("u1234"))) ((((unsupported)) ("u1234") (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xunicode_escape_decode)) ("U00110000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_decode)) ("U00110000") ("replace"))) ((((unsupported)) ("ufffd") (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_decode)) ("U00110000") ("backslashreplace"))) ((((unsupported)) ("x5cx55x30x30x31x31x30x30x30x30") (10))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xraw_unicode_escape_decode)) ("U00110000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_decode)) ("U00110000") ("replace"))) ((((unsupported)) ("ufffd") (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_decode)) ("U00110000") ("backslashreplace"))) ((((unsupported)) ("x5cx55x30x30x31x31x30x30x30x30") (10))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_empty.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_encode)) (""))) ((((unsupported)) ("") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xunicode_escape_decode)) (""))) ((((unsupported)) ("") (0))))
                xtest_raw_encode.write
                  [xself]
                    memory > xencode
                    seq > @
                      seq
                        xencode.write ((xcodecs).xunicode_escape_encode)
                        (((unsupported)) ((xb)) ((((xrange)) (32) (127))))
                          ((xb).neq (((unsupported)) ("\\") (0))).if
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xencode)) ((((xchr)) ((xb)))))) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xb)))))) (1))))
                xtest_raw_decode.write
                  [xself]
                    memory > xdecode
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xunicode_escape_decode)
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          ((xb).neq (((unsupported)) ("\\") (0))).if
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) (((((xbytes)) ((((unsupported)) ((xb))))).add "0")))) ((((unsupported)) (((((xchr)) ((xb))).add "0")) (2))))
                xtest_escape_encode.write
                  [xself]
                    memory > xencode
                    memory > xcheck
                    seq > @
                      seq
                        xencode.write ((xcodecs).xunicode_escape_encode)
                        xcheck.write (((xcoding_checker)) ((xself)) ((xencode)))
                        bogusForceDataize.write (((xcheck)) ("t") ("t"))
                        bogusForceDataize.write (((xcheck)) ("n") ("n"))
                        bogusForceDataize.write (((xcheck)) ("r") ("r"))
                        bogusForceDataize.write (((xcheck)) ("\\") ("\\"))
                        (((unsupported)) ((xb)) ((((xrange)) (32))))
                          (((unsupported)) ((((xchr)) ((xb)))) ("tnr")).if
                            bogusForceDataize.write (((xcheck)) ((((xchr)) ((xb)))) ((((((((unsupported)) 0).mod (xb)).xencode)) 0)))
                        (((unsupported)) ((xb)) ((((xrange)) (127) (256))))
                          bogusForceDataize.write (((xcheck)) ((((xchr)) ((xb)))) ((((((((unsupported)) 0).mod (xb)).xencode)) 0)))
                        bogusForceDataize.write (((xcheck)) ("u20ac") ("u20ac"))
                        bogusForceDataize.write (((xcheck)) ("U0001d120") ("U0001d120"))
                xtest_escape_decode.write
                  [xself]
                    memory > xdecode
                    memory > xcheck
                    memory > xb
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xunicode_escape_decode)
                        xcheck.write (((xcoding_checker)) ((xself)) ((xdecode)))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ("[]"))
                        bogusForceDataize.write (((xcheck)) ("[\"]") ("[\"]"))
                        bogusForceDataize.write (((xcheck)) ("[']") ("[']"))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ("[]"))
                        bogusForceDataize.write (((xcheck)) ("[a]") ("[x07]"))
                        bogusForceDataize.write (((xcheck)) ("[b]") ("[x08]"))
                        bogusForceDataize.write (((xcheck)) ("[t]") ("[x09]"))
                        bogusForceDataize.write (((xcheck)) ("[n]") ("[x0a]"))
                        bogusForceDataize.write (((xcheck)) ("[v]") ("[x0b]"))
                        bogusForceDataize.write (((xcheck)) ("[f]") ("[x0c]"))
                        bogusForceDataize.write (((xcheck)) ("[r]") ("[x0d]"))
                        bogusForceDataize.write (((xcheck)) ("[7]") ("[x07]"))
                        bogusForceDataize.write (((xcheck)) ("[78]") ("[x078]"))
                        bogusForceDataize.write (((xcheck)) ("[41]") ("[!]"))
                        bogusForceDataize.write (((xcheck)) ("[418]") ("[!8]"))
                        bogusForceDataize.write (((xcheck)) ("[101]") ("[A]"))
                        bogusForceDataize.write (((xcheck)) ("[1010]") ("[A0]"))
                        bogusForceDataize.write (((xcheck)) ("[x41]") ("[A]"))
                        bogusForceDataize.write (((xcheck)) ("[x410]") ("[A0]"))
                        bogusForceDataize.write (((xcheck)) ("u20ac") ("u20ac"))
                        bogusForceDataize.write (((xcheck)) ("U0001d120") ("U0001d120"))
                        (((unsupported)) ((xi)) ((((xrange)) (97) (123))))
                          seq
                            xb.write (((xbytes)) ((((unsupported)) ((xi)))))
                            (((unsupported)) ((xb)) ("abfnrtuvx")).if
                              (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                                bogusForceDataize.write (((xcheck)) (("\\".add (xb))) (("\\".add (((xchr)) ((xi))))))
                            (((unsupported)) (((((xb).xupper)) 0)) ("UN")).if
                              (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                                bogusForceDataize.write (((xcheck)) (("\\".add ((((xb).xupper)) 0))) (("\\".add (((xchr)) (((xi).sub 32))))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ("8") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ("9") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_decode_errors.write
                  [xself]
                    memory > xdecode
                    memory > xdata
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xunicode_escape_decode)
                        (((unsupported)) ((((unsupported)) ((xc)) ((xd)))) ((((unsupported)) ((((unsupported)) ("x") (2))) ((((unsupported)) ("u") (4))) ((((unsupported)) ("U") (4))))))
                          (((unsupported)) ((xi)) ((((xrange)) ((xd)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) ((("\\".add (xc)).add ("0".mul (xi)))))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) (((("[\\".add (xc)).add ("0".mul (xi))).add "]")))
                              xdata.write ((((("[\\".add (xc)).add ("0".mul (xi))).add "]\\").add (xc)).add ("0".mul (xi)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ((xdata)) ("ignore"))) ((((unsupported)) ("[]") ((((xlen)) ((xdata)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ((xdata)) ("replace"))) ((((unsupported)) ("[ufffd]ufffd") ((((xlen)) ((xdata)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) ("U00110000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("U00110000") ("ignore"))) ((((unsupported)) ("") (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("U00110000") ("replace"))) ((((unsupported)) ("ufffd") (10))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_empty.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_encode)) (""))) ((((unsupported)) ("") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xraw_unicode_escape_decode)) (""))) ((((unsupported)) ("") (0))))
                xtest_raw_encode.write
                  [xself]
                    memory > xencode
                    seq > @
                      seq
                        xencode.write ((xcodecs).xraw_unicode_escape_encode)
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xencode)) ((((xchr)) ((xb)))))) ((((unsupported)) ((((xbytes)) ((((unsupported)) ((xb)))))) (1))))
                xtest_raw_decode.write
                  [xself]
                    memory > xdecode
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xraw_unicode_escape_decode)
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) (((((xbytes)) ((((unsupported)) ((xb))))).add "0")))) ((((unsupported)) (((((xchr)) ((xb))).add "0")) (2))))
                xtest_escape_encode.write
                  [xself]
                    memory > xencode
                    memory > xcheck
                    seq > @
                      seq
                        xencode.write ((xcodecs).xraw_unicode_escape_encode)
                        xcheck.write (((xcoding_checker)) ((xself)) ((xencode)))
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          (((unsupported)) ((xb)) ("uU")).if
                            bogusForceDataize.write (((xcheck)) (("\\".add (((xchr)) ((xb))))) (("\\".add (((xbytes)) ((((unsupported)) ((xb))))))))
                        bogusForceDataize.write (((xcheck)) ("u20ac") ("u20ac"))
                        bogusForceDataize.write (((xcheck)) ("U0001d120") ("U0001d120"))
                xtest_escape_decode.write
                  [xself]
                    memory > xdecode
                    memory > xcheck
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xraw_unicode_escape_decode)
                        xcheck.write (((xcoding_checker)) ((xself)) ((xdecode)))
                        (((unsupported)) ((xb)) ((((xrange)) (256))))
                          (((unsupported)) ((xb)) ("uU")).if
                            bogusForceDataize.write (((xcheck)) (("\\".add (((xbytes)) ((((unsupported)) ((xb))))))) (("\\".add (((xchr)) ((xb))))))
                        bogusForceDataize.write (((xcheck)) ("u20ac") ("u20ac"))
                        bogusForceDataize.write (((xcheck)) ("U0001d120") ("U0001d120"))
                xtest_decode_errors.write
                  [xself]
                    memory > xdecode
                    memory > xdata
                    seq > @
                      seq
                        xdecode.write ((xcodecs).xraw_unicode_escape_decode)
                        (((unsupported)) ((((unsupported)) ((xc)) ((xd)))) ((((unsupported)) ((((unsupported)) ("u") (4))) ((((unsupported)) ("U") (4))))))
                          (((unsupported)) ((xi)) ((((xrange)) ((xd)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) ((("\\".add (xc)).add ("0".mul (xi)))))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) (((("[\\".add (xc)).add ("0".mul (xi))).add "]")))
                              xdata.write ((((("[\\".add (xc)).add ("0".mul (xi))).add "]\\").add (xc)).add ("0".mul (xi)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ((xdata)) ("ignore"))) ((((unsupported)) ("[]") ((((xlen)) ((xdata)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ((xdata)) ("replace"))) ((((unsupported)) ("[ufffd]ufffd") ((((xlen)) ((xdata)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) ((xdecode)) ("U00110000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("U00110000") ("ignore"))) ((((unsupported)) ("") (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdecode)) ("U00110000") ("replace"))) ((((unsupported)) ("ufffd") (10))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_escape_encode.write
                [xself]
                  memory > xtests
                  seq > @
                    seq
                      xtests.write (((unsupported)) ((((unsupported)) ("") ((((unsupported)) ("") (0))))) ((((unsupported)) ("foobar") ((((unsupported)) ("foobar") (6))))) ((((unsupported)) ("spam0eggs") ((((unsupported)) ((((unsupported)) 0)) (9))))) ((((unsupported)) ("a'b") ((((unsupported)) ("a\\'b") (3))))) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) 0)) (3))))) ((((unsupported)) ("cnd") ((((unsupported)) ((((unsupported)) 0)) (3))))) ((((unsupported)) ("dre") ((((unsupported)) ((((unsupported)) 0)) (3))))) ((((unsupported)) ("fx7fg") ((((unsupported)) ((((unsupported)) 0)) (3))))))
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xoutput)))) ((xtests)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xescape_encode)) ((xdata)))) ((xoutput)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xescape_encode)) ("spam"))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcodecs).xescape_encode)) ((((xbytearray)) ("spam"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_utf8.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("foox80bar".xdecode)) ("utf-8") ("surrogateescape"))) ("fooudc80bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("fooudc80bar".xencode)) ("utf-8") ("surrogateescape"))) ("foox80bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("xedxb0x80".xdecode)) ("utf-8") ("surrogateescape"))) ("udcedudcb0udc80"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("udcedudcb0udc80".xencode)) ("utf-8") ("surrogateescape"))) ("xedxb0x80"))
                xtest_ascii.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("foox80bar".xdecode)) ("ascii") ("surrogateescape"))) ("fooudc80bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("fooudc80bar".xencode)) ("ascii") ("surrogateescape"))) ("foox80bar"))
                xtest_charmap.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("fooxa5bar".xdecode)) ("iso-8859-3") ("surrogateescape"))) ("fooudca5bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("fooudca5bar".xencode)) ("iso-8859-3") ("surrogateescape"))) ("fooxa5bar"))
                xtest_latin1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("udce4udcebudcefudcf6udcfc".xencode)) ("latin-1") ("surrogateescape"))) ("xe4xebxefxf6xfc"))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_seek0.write
                [xself]
                  memory > xtests
                  memory > xdata
                  seq > @
                    seq
                      xdata.write "1234567890"
                      xtests.write (((unsupported)) ("utf-16") ("utf-16-le") ("utf-16-be") ("utf-32") ("utf-32-le") ("utf-32-be"))
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                      (((unsupported)) ((xencoding)) ((xtests)))
                        seq
                          (((unsupported)) ((((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("w+") ((xencoding)))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
                          (((unsupported)) ((((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("w+") ((xencoding)))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)) ((((unsupported)) ((xdata)) (0))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xf).xtell)) 0)) (0))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ((xdata)))
                          (((unsupported)) ((((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("w+") ((xencoding)))) ((xf)))
                            seq
                              bogusForceDataize.write (((((xf).xwriter).xwrite)) ((((unsupported)) ((xdata)) (0))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)) ((((((xf).xwriter).xtell)) 0)) (0))
                              bogusForceDataize.write (((((xf).xwriter).xseek)) (0))
                              bogusForceDataize.write (((((xf).xwriter).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ((xdata)))
                          (((unsupported)) ((((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("w+") ((xencoding)))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (((((xf).xtell)) 0)))
                              bogusForceDataize.write ((((xf).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
                          (((unsupported)) ((((unsupported)) (((xcodecs).xopen)) (((xsupport).xTESTFN)) ("w+") ((xencoding)))) ((xf)))
                            seq
                              bogusForceDataize.write (((((xf).xwriter).xwrite)) ((xdata)))
                              bogusForceDataize.write (((((xf).xwriter).xseek)) ((((((xf).xwriter).xtell)) 0)))
                              bogusForceDataize.write (((((xf).xwriter).xwrite)) ((xdata)))
                              bogusForceDataize.write ((((xf).xseek)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((xdata).mul 2)))
            xbytes_transform_encodings.write (((unsupported)) ("base64_codec") ("uu_codec") ("quopri_codec") ("hex_codec"))
            xtransform_aliases.write (((unsupported)) ("base64_codec") ((((unsupported)) ("base64") ("base_64"))) ("uu_codec") ((((unsupported)) ("uu"))) ("quopri_codec") ((((unsupported)) ("quopri") ("quoted_printable") ("quotedprintable"))) ("hex_codec") ((((unsupported)) ("hex"))) ("rot_13") ((((unsupported)) ("rot13"))))
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xzlib.write "None: is there a None literal in the EO language?"
              seq
                bogusForceDataize.write ((((xbytes_transform_encodings).xappend)) ("zlib_codec"))
                (((unsupported)) ((((unsupported)) ((xtransform_aliases)) ("zlib_codec"))) ((((unsupported)) ("zip") ("zlib"))))
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              seq
                bogusForceDataize.write ((((xbytes_transform_encodings).xappend)) ("bz2_codec"))
                (((unsupported)) ((((unsupported)) ((xtransform_aliases)) ("bz2_codec"))) ((((unsupported)) ("bz2"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xbinput
                    seq > @
                      seq
                        xbinput.write (((xbytes)) ((((xrange)) (256))))
                        (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                            seq
                              (((unsupported)) ((((unsupported)) ((xo)) ((xsize)))) (((((((xcodecs).xgetencoder)) ((xencoding)))) ((xbinput)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xsize)) ((((xlen)) ((xbinput)))))
                              (((unsupported)) ((((unsupported)) ((xi)) ((xsize)))) (((((((xcodecs).xgetdecoder)) ((xencoding)))) ((xo)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xsize)) ((((xlen)) ((xo)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xi)) ((xbinput)))
                xtest_read.write
                  [xself]
                    memory > xreader
                    memory > xsin
                    memory > xsout
                    seq > @
                      (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                          seq
                            xsin.write ((((xcodecs).xencode)) ("x80") ((xencoding)))
                            xreader.write ((((((xcodecs).xgetreader)) ((xencoding)))) (((((xio).xBytesIO)) ((xsin)))))
                            xsout.write ((((xreader).xread)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsout)) ("x80"))
                xtest_readline.write
                  [xself]
                    memory > xreader
                    memory > xsin
                    memory > xsout
                    seq > @
                      (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                          seq
                            xsin.write ((((xcodecs).xencode)) ("x80") ((xencoding)))
                            xreader.write ((((((xcodecs).xgetreader)) ((xencoding)))) (((((xio).xBytesIO)) ((xsin)))))
                            xsout.write ((((xreader).xreadline)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsout)) ("x80"))
                xtest_buffer_api_usage.write
                  [xself]
                    memory > xdata
                    memory > xview_encoded
                    memory > xview
                    memory > xoriginal
                    memory > xview_decoded
                    seq > @
                      seq
                        xoriginal.write "12345x80"
                        (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                            seq
                              xdata.write (xoriginal)
                              xview.write (((xmemoryview)) ((xdata)))
                              xdata.write ((((xcodecs).xencode)) ((xdata)) ((xencoding)))
                              xview_encoded.write ((((xcodecs).xencode)) ((xview)) ((xencoding)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xview_encoded)) ((xdata)))
                              xview.write (((xmemoryview)) ((xdata)))
                              xdata.write ((((xcodecs).xdecode)) ((xdata)) ((xencoding)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xoriginal)))
                              xview_decoded.write ((((xcodecs).xdecode)) ((xview)) ((xencoding)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xview_decoded)) ((xdata)))
                xtest_text_to_binary_blacklists_binary_transforms.write
                  [xself]
                    memory > xbad_input
                    memory > xmsg
                    memory > xfmt
                    seq > @
                      seq
                        xbad_input.write "bad input type"
                        (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                            seq
                              xfmt.write "{!r} is not a text encoding; use codecs.encode() to handle arbitrary codecs"
                              xmsg.write ((((xfmt).xformat)) ((xencoding)))
                              (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))) ((xfailure)))
                                bogusForceDataize.write ((((xbad_input).xencode)) ((xencoding)))
                              bogusForceDataize.write ((((xself).xassertIsNone)) ((((xfailure).xexception).x__cause__)))
                xtest_text_to_binary_blacklists_text_transforms.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^'rot_13' is not a text encoding; use codecs.encode() to handle arbitrary codecs"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                          bogusForceDataize.write ((("just an example message".xencode)) ("rot_13"))
                xtest_binary_to_text_blacklists_binary_transforms.write
                  [xself]
                    memory > xdata
                    memory > xencoded_data
                    memory > xmsg
                    memory > xfmt
                    seq > @
                      seq
                        xdata.write "encode first to ensure we meet any format restrictions"
                        (((unsupported)) ((xencoding)) ((xbytes_transform_encodings)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoding)))))
                            seq
                              xencoded_data.write ((((xcodecs).xencode)) ((xdata)) ((xencoding)))
                              xfmt.write "{!r} is not a text encoding; use codecs.decode() to handle arbitrary codecs"
                              xmsg.write ((((xfmt).xformat)) ((xencoding)))
                              (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                                bogusForceDataize.write ((((xencoded_data).xdecode)) ((xencoding)))
                              (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                                bogusForceDataize.write ((((((xbytearray)) ((xencoded_data))).xdecode)) ((xencoding)))
                xtest_binary_to_text_blacklists_text_transforms.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)) ((xbad_input)) ((((unsupported)) ("immutable") ((((xbytearray)) ("mutable"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xbad_input)))))
                          seq
                            xmsg.write "^'rot_13' is not a text encoding; use codecs.decode() to handle arbitrary codecs"
                            (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))) ((xfailure)))
                              bogusForceDataize.write ((((xbad_input).xdecode)) ("rot_13"))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((((xfailure).xexception).x__cause__)))
                xtest_custom_zlib_error_is_wrapped.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)) 0)
                        xmsg.write "^decoding with 'zlib_codec' codec failed"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xException)) ((xmsg)))) ((xfailure)))
                          bogusForceDataize.write ((((xcodecs).xdecode)) ("hello") ("zlib_codec"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xfailure).xexception).x__cause__)) ((((xtype)) (((xfailure).xexception)))))
                xtest_custom_hex_error_is_wrapped.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^decoding with 'hex_codec' codec failed"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xException)) ((xmsg)))) ((xfailure)))
                          bogusForceDataize.write ((((xcodecs).xdecode)) ("hello") ("hex_codec"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xfailure).xexception).x__cause__)) ((((xtype)) (((xfailure).xexception)))))
                xtest_aliases.write
                  [xself]
                    memory > xinfo
                    memory > xexpected_name
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xcodec_name)) ((xaliases)))) (((((xtransform_aliases).xitems)) 0)))
                        seq
                          xexpected_name.write (((((xcodecs).xlookup)) ((xcodec_name))).xname)
                          (((unsupported)) ((xalias)) ((xaliases)))
                            (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xalias)))))
                              seq
                                xinfo.write ((((xcodecs).xlookup)) ((xalias)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xinfo).xname)) ((xexpected_name)))
                xtest_quopri_stateless.write
                  [xself]
                    memory > xencoded
                    memory > xunescaped
                    seq > @
                      seq
                        xencoded.write ((((xcodecs).xencode)) ("space tabteol n") ("quopri-codec"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xencoded)) ("space=20tab=09eol=20n"))
                        xunescaped.write "space tab eoln"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xdecode)) ((xunescaped)) ("quopri-codec"))) ((xunescaped)))
                xtest_uu_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xcodecs).xdecode)) ("") ("uu-codec"))
            x_TEST_CODECS.write (((unsupported)) 0)
            x_get_test_codec.write
              [xcodec_name]
                seq > @
                  (((unsupported)) (((((x_TEST_CODECS).xget)) ((xcodec_name)))))
            bogusForceDataize.write ((((xcodecs).xregister)) ((x_get_test_codec)))
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_forget_codec.write
                [xcodec_name]
                  seq > @
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xunique_id
                    seq > @
                      seq
                        xunique_id.write ((((xrepr)) ((xself))).add (((xstr)) ((((xid)) ((xself))))))
                        (((unsupported)) (((xself).xcodec_name)) ((((((((xencodings).xnormalize_encoding)) ((xunique_id))).xlower)) 0)))
                        (((unsupported)) (((xself).xobj_to_raise)) ((xRuntimeError)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((x_TEST_CODECS).xpop)) (((xself).xcodec_name)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xencodings).x_cache).xpop)) (((xself).xcodec_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xKeyError)))
                          bogusForceDataize.write (((x_forget_codec)) (((xself).xcodec_name)))
                xset_codec.write
                  [xself xencode xdecode]
                    memory > xcodec_info
                    seq > @
                      seq
                        xcodec_info.write (((unsupported)) (((xcodecs).xCodecInfo)) ((xencode)) ((xdecode)) (((xself).xcodec_name)))
                        (((unsupported)) ((((unsupported)) ((x_TEST_CODECS)) (((xself).xcodec_name)))) ((xcodec_info)))
                xassertWrapped.write
                  [xself xoperation xexc_type xmsg]
                    memory > xfull_msg
                    seq > @
                      (((unsupported)) 0)
                        xfull_msg.write ((("{} with {!r} codec failed ({}: {})".xformat)) ((xoperation)) (((xself).xcodec_name)) (((xexc_type).x__name__)) ((xmsg)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xexc_type)) ((xfull_msg)))) ((xcaught)))
                          (((unsupported)) ((xcaught)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xcaught).xexception).x__cause__)) ((xexc_type)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xcaught).xexception).x__cause__).x__traceback__)))
                xraise_obj.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xobj_to_raise)))
                xcheck_wrapped.write
                  [xself xobj_to_raise xmsg xexc_type]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xobj_to_raise)) ((xobj_to_raise)))
                        bogusForceDataize.write ((((xself).xset_codec)) (((xself).xraise_obj)) (((xself).xraise_obj)))
                        (((unsupported)) (((((xself).xassertWrapped)) ("encoding") ((xexc_type)) ((xmsg)))))
                          bogusForceDataize.write ((("str_input".xencode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertWrapped)) ("encoding") ((xexc_type)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xencode)) ("str_input") (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertWrapped)) ("decoding") ((xexc_type)) ((xmsg)))))
                          bogusForceDataize.write ((("bytes input".xdecode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertWrapped)) ("decoding") ((xexc_type)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xdecode)) ("bytes input") (((xself).xcodec_name)))
                xtest_raise_by_type.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_wrapped)) ((xRuntimeError)) (""))
                xtest_raise_by_value.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "This should be wrapped"
                        bogusForceDataize.write ((((xself).xcheck_wrapped)) ((((xRuntimeError)) ((xmsg)))) ((xmsg)))
                xtest_raise_grandchild_subclass_exact_size.write
                  [xself]
                    memory > x__slots__
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "This should be wrapped"
                        (((unsupported)) ((xRuntimeError)))
                          x__slots__.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_wrapped)) ((((xMyRuntimeError)) ((xmsg)))) ((xmsg)) ((xMyRuntimeError)))
                xtest_raise_subclass_with_weakref_support.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "This should be wrapped"
                        (((unsupported)) ((xRuntimeError)))
                        bogusForceDataize.write ((((xself).xcheck_wrapped)) ((((xMyRuntimeError)) ((xmsg)))) ((xmsg)) ((xMyRuntimeError)))
                xcheck_not_wrapped.write
                  [xself xobj_to_raise xmsg]
                    memory > xraise_obj
                    seq > @
                      seq
                        xraise_obj.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xobj_to_raise)))
                        bogusForceDataize.write ((((xself).xset_codec)) ((xraise_obj)) ((xraise_obj)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ((xmsg)))))
                          bogusForceDataize.write ((("str input".xencode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xencode)) ("str input") (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ((xmsg)))))
                          bogusForceDataize.write ((("bytes input".xdecode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xdecode)) ("bytes input") (((xself).xcodec_name)))
                xtest_init_override_is_not_wrapped.write
                  [xself]
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) ((xRuntimeError)))
                          x__init__.write
                            [xself]
                              seq > @
                        bogusForceDataize.write ((((xself).xcheck_not_wrapped)) ((xCustomInit)) (""))
                xtest_new_override_is_not_wrapped.write
                  [xself]
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)) ((xRuntimeError)))
                          x__new__.write
                            [xcls]
                              seq > @
                                (((unsupported)) (((((((xsuper)) 0).x__new__)) ((xcls)))))
                        bogusForceDataize.write ((((xself).xcheck_not_wrapped)) ((xCustomNew)) (""))
                xtest_instance_attribute_is_not_wrapped.write
                  [xself]
                    memory > xmsg
                    memory > xexc
                    seq > @
                      seq
                        xmsg.write "This should NOT be wrapped"
                        xexc.write (((xRuntimeError)) ((xmsg)))
                        (((unsupported)) (((xexc).xattr)) (1))
                        bogusForceDataize.write ((((xself).xcheck_not_wrapped)) ((xexc)) (((("^{}$".xformat)) ((xmsg)))))
                xtest_non_str_arg_is_not_wrapped.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_not_wrapped)) ((((xRuntimeError)) (1))) ("1"))
                xtest_multiple_args_is_not_wrapped.write
                  [xself]
                    memory > xmsg_re
                    seq > @
                      seq
                        xmsg_re.write "^('a', 'b', 'c')$"
                        bogusForceDataize.write ((((xself).xcheck_not_wrapped)) ((((xRuntimeError)) ("a") ("b") ("c"))) ((xmsg_re)))
                xtest_codec_lookup_failure_not_wrapped.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((("^unknown encoding: {}$".xformat)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                          bogusForceDataize.write ((("str input".xencode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xencode)) ("str input") (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                          bogusForceDataize.write ((("bytes input".xdecode)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xLookupError)) ((xmsg)))))
                          bogusForceDataize.write ((((xcodecs).xdecode)) ("bytes input") (((xself).xcodec_name)))
                xtest_unflagged_non_text_codec_handling.write
                  [xself]
                    memory > xencoded
                    memory > xfmt
                    memory > xmsg
                    memory > xencode_to_str
                    memory > xdecoded
                    memory > xdecode_to_bytes
                    seq > @
                      seq
                        xencode_to_str.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ("not bytes!") (0))))
                        xdecode_to_bytes.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ("not str!") (0))))
                        bogusForceDataize.write ((((xself).xset_codec)) ((xencode_to_str)) ((xdecode_to_bytes)))
                        xencoded.write ((((xcodecs).xencode)) ("None: is there a None literal in the EO language?") (((xself).xcodec_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xencoded)) ("not bytes!"))
                        xdecoded.write ((((xcodecs).xdecode)) ("None: is there a None literal in the EO language?") (((xself).xcodec_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ("not str!"))
                        xfmt.write "^{!r} encoder returned 'str' instead of 'bytes'; use codecs.encode() to encode to arbitrary types$"
                        xmsg.write ((((xfmt).xformat)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write ((("str_input".xencode)) (((xself).xcodec_name)))
                        xfmt.write "^{!r} decoder returned 'bytes' instead of 'str'; use codecs.decode() to decode to arbitrary types$"
                        xmsg.write ((((xfmt).xformat)) (((xself).xcodec_name)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write ((("bytes input".xdecode)) (((xself).xcodec_name)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("code pages are specific to Windows"))))
              seq
                xCP_UTF8.write 65001
                xtest_invalid_code_page.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xcodecs).xcode_page_encode)) ((1.neg)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xcodecs).xcode_page_decode)) ((1.neg)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xcodecs).xcode_page_encode)) (123) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xcodecs).xcode_page_decode)) (123) ("a"))
                xtest_code_page_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xUnicodeEncodeError)) ("cp932") (((xcodecs).xcode_page_encode)) (932) ("xff"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xUnicodeDecodeError)) ("cp932") (((xcodecs).xcode_page_decode)) (932) ("x81x00") ("strict") (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xUnicodeDecodeError)) ("CP_UTF8") (((xcodecs).xcode_page_decode)) (((xself).xCP_UTF8)) ("xff") ("strict") (TRUE))
                xcheck_decode.write
                  [xself xcp xtests]
                    memory > xdecoded
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xraw)) ((xerrors)) ((xexpected)))) ((xtests)))
                        (((unsupported)) ((xexpected)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)) ((xUnicodeDecodeError)))
                              xdecoded.write ((((xcodecs).xcode_page_decode)) ((xcp)) ((xraw)) ((xerrors)) (TRUE))
                              bogusForceDataize.write ((((xself).xfail)) (("Unable to decode %a from \"cp%s\" with errors=%r: %s".mod (((unsupported)) ((xraw)) ((xcp)) ((xerrors)) ((xerr))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdecoded)) (0))) ((xexpected)) (("%a.decode(\"cp%s\", %r)=%a != %a".mod (((unsupported)) ((xraw)) ((xcp)) ((xerrors)) ((((unsupported)) ((xdecoded)) (0))) ((xexpected))))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((unsupported)) ((xdecoded)) (1))) (0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)) ((((unsupported)) ((xdecoded)) (1))) ((((xlen)) ((xraw)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xcodecs).xcode_page_decode)) ((xcp)) ((xraw)) ((xerrors)) (TRUE))
                xcheck_encode.write
                  [xself xcp xtests]
                    memory > xencoded
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xtext)) ((xerrors)) ((xexpected)))) ((xtests)))
                        (((unsupported)) ((xexpected)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)) ((xUnicodeEncodeError)))
                              xencoded.write ((((xcodecs).xcode_page_encode)) ((xcp)) ((xtext)) ((xerrors)))
                              bogusForceDataize.write ((((xself).xfail)) (("Unable to encode %a to \"cp%s\" with errors=%r: %s".mod (((unsupported)) ((xtext)) ((xcp)) ((xerrors)) ((xerr))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xencoded)) (0))) ((xexpected)) (("%a.encode(\"cp%s\", %r)=%a != %a".mod (((unsupported)) ((xtext)) ((xcp)) ((xerrors)) ((((unsupported)) ((xencoded)) (0))) ((xexpected))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xencoded)) (1))) ((((xlen)) ((xtext)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xcodecs).xcode_page_encode)) ((xcp)) ((xtext)) ((xerrors)))
                xtest_cp932.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_encode)) (932) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("uff44u9a3e") ("strict") ("x82x84xe9x80"))) ((((unsupported)) ("xff") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("[xff]") ("ignore") ("[]"))) ((((unsupported)) ("[xff]") ("replace") ("[y]"))) ((((unsupported)) ("[u20ac]") ("replace") ("[?]"))) ((((unsupported)) ("[xff]") ("backslashreplace") ((((unsupported)) 0)))) ((((unsupported)) ("[xff]") ("namereplace") ((((unsupported)) 0)))) ((((unsupported)) ("[xff]") ("xmlcharrefreplace") ("[&#255;]"))) ((((unsupported)) ("udcff") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("[udcff]") ("surrogateescape") ("[xff]"))) ((((unsupported)) ("[udcff]") ("surrogatepass") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xcheck_decode)) (932) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("x82x84xe9x80") ("strict") ("uff44u9a3e"))) ((((unsupported)) ("[xff]") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("[xff]") ("ignore") ("[]"))) ((((unsupported)) ("[xff]") ("replace") ("[ufffd]"))) ((((unsupported)) ("[xff]") ("backslashreplace") ((((unsupported)) 0)))) ((((unsupported)) ("[xff]") ("surrogateescape") ("[udcff]"))) ((((unsupported)) ("[xff]") ("surrogatepass") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("x81x00abc") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("x81x00abc") ("ignore") ("x00abc"))) ((((unsupported)) ("x81x00abc") ("replace") ("ufffdx00abc"))) ((((unsupported)) ("x81x00abc") ("backslashreplace") ((((unsupported)) 0)))))))
                xtest_cp1252.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_encode)) (1252) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("xe9u20ac") ("strict") ("xe9x80"))) ((((unsupported)) ("xff") ("strict") ("xff"))) ((((unsupported)) ("u0141") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("u0141") ("ignore") (""))) ((((unsupported)) ("u0141") ("replace") ("L"))) ((((unsupported)) ("udc98") ("surrogateescape") ("x98"))) ((((unsupported)) ("udc98") ("surrogatepass") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xcheck_decode)) (1252) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("xe9x80") ("strict") ("xe9u20ac"))) ((((unsupported)) ("xff") ("strict") ("xff"))))))
                xtest_cp_utf7.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write 65000
                        bogusForceDataize.write ((((xself).xcheck_encode)) ((xcp)) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("xe9u20ac") ("strict") ("+AOkgrA-"))) ((((unsupported)) ("U0010ffff") ("strict") ("+2//f/w-"))) ((((unsupported)) ("udc80") ("strict") ("+3IA-"))) ((((unsupported)) ("ufffd") ("strict") ("+//0-"))))))
                        bogusForceDataize.write ((((xself).xcheck_decode)) ((xcp)) ((((unsupported)) ((((unsupported)) ("abc") ("strict") ("abc"))) ((((unsupported)) ("+AOkgrA-") ("strict") ("xe9u20ac"))) ((((unsupported)) ("+2//f/w-") ("strict") ("U0010ffff"))) ((((unsupported)) ("+3IA-") ("strict") ("udc80"))) ((((unsupported)) ("+//0-") ("strict") ("ufffd"))) ((((unsupported)) ("[+/]") ("strict") ("[]"))) ((((unsupported)) ("[xff]") ("strict") ("[xff]"))))))
                xtest_multibyte_encoding.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_decode)) (932) ((((unsupported)) ((((unsupported)) ("x84xe9x80") ("ignore") ("u9a3e"))) ((((unsupported)) ("x84xe9x80") ("replace") ("ufffdu9a3e"))))))
                        bogusForceDataize.write ((((xself).xcheck_decode)) (((xself).xCP_UTF8)) ((((unsupported)) ((((unsupported)) ("xffxf4x8fxbfxbf") ("ignore") ("U0010ffff"))) ((((unsupported)) ("xffxf4x8fxbfxbf") ("replace") ("ufffdU0010ffff"))))))
                        bogusForceDataize.write ((((xself).xcheck_encode)) (((xself).xCP_UTF8)) ((((unsupported)) ((((unsupported)) ("[U0010ffffuDC80]") ("ignore") ("[xf4x8fxbfxbf]"))) ((((unsupported)) ("[U0010ffffuDC80]") ("replace") ("[xf4x8fxbfxbf?]"))))))
                xtest_code_page_decode_flags.write
                  [xself]
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)) ("n"))
                        (((unsupported)) ((xcp)) ((((unsupported)) (50220) (50221) (50222) (50225) (50227) (50229) ((((unsupported)) ((((xrange)) (57002) ((57011.add 1)))))) (65000))))
                          (((xis_code_page_present)) ((xcp))).if
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcode_page_decode)) ((xcp)) ("abc"))) ((((unsupported)) ("abc") (3))) ("cp{cp}"))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((xprint)) ("  skipping cp={cp}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcodecs).xcode_page_decode)) (42) ("abc"))) ((((unsupported)) ("uf061uf062uf063") (3))))
                xtest_incremental.write
                  [xself]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (932) ("x82") ("strict") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ((((unsupported)) ("") (0))))
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (932) ("xe9x80xe9") ("strict") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ((((unsupported)) ("u9a3e") (2))))
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (932) ("xe9x80xe9x80") ("strict") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ((((unsupported)) ("u9a3eu9a3e") (4))))
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (932) ("abc") ("strict") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ((((unsupported)) ("abc") (3))))
                xtest_mbcs_alias.write
                  [xself]
                    memory > xcodec
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xmock).xpatch)) ("_winapi.GetACP") (123))))
                        seq
                          xcodec.write ((((xcodecs).xlookup)) ("cp123"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xcodec).xname)) ("mbcs"))
                xtest_large_input.write
                  [xself xsize]
                    memory > xencoded
                    memory > xdecoded
                    seq > @
                      (((unsupported)) 0)
                        xencoded.write (("01234567".mul ((((unsupported)) ((xsize)) (8)).sub 1)).add "x85x86xeaxebxecxefxfcxfdxfexff")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xencoded)))) (((xsize).add 2)))
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (932) ((xencoded)) ("surrogateescape") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdecoded)) (1))) ((((xlen)) ((xencoded)))))
                        (((unsupported)) ((((unsupported)) ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xdecoded)) (0))))) ((((unsupported)) ((xdecoded)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xdecoded)) (0))) ((((unsupported)) (10))))) ("0123456701"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xdecoded)) (0))) ((((unsupported)) ((20.neg)))))) ("6701234567udc85udc86udceaudcebudcecudcefudcfcudcfdudcfeudcff"))
                xtest_large_utf8_input.write
                  [xself xsize]
                    memory > xencoded
                    memory > xdecoded
                    seq > @
                      (((unsupported)) 0)
                        xencoded.write ("0123456xedx84x80".mul (((unsupported)) ((xsize)) (8)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xencoded)))) (((((unsupported)) ((xsize)) (8)).mul 10)))
                        xdecoded.write ((((xcodecs).xcode_page_decode)) (65001) ((xencoded)) ("ignore") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdecoded)) (1))) ((((xlen)) ((xencoded)))))
                        (((unsupported)) ((((unsupported)) ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xdecoded)) (0))))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xdecoded)) (0))) ((((unsupported)) (10))))) ("0123456ud10001"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xdecoded)) (0))) ((((unsupported)) ((11.neg)))))) ("56ud1000123456ud100"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_encode.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("abc123".xencode)) ("ascii"))) ("abc123"))
                xtest_encode_error.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xerror_handler)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("[x80xffu20ac]") ("ignore") ("[]"))) ((((unsupported)) ("[x80xffu20ac]") ("replace") ("[???]"))) ((((unsupported)) ("[x80xffu20ac]") ("xmlcharrefreplace") ("[&#128;&#255;&#8364;]"))) ((((unsupported)) ("[x80xffu20acU000abcde]") ("backslashreplace") ((((unsupported)) 0)))) ((((unsupported)) ("[udc80udcff]") ("surrogateescape") ("[x80xff]"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xerror_handler)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xencode)) ("ascii") ((xerror_handler)))) ((xexpected)))
                xtest_encode_surrogateescape_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeEncodeError)))))
                        bogusForceDataize.write ((("udc80xff".xencode)) ("ascii") ("surrogateescape"))
                xtest_decode.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("abc".xdecode)) ("ascii"))) ("abc"))
                xtest_decode_error.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xerror_handler)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("[x80xff]") ("ignore") ("[]"))) ((((unsupported)) ("[x80xff]") ("replace") ("[ufffdufffd]"))) ((((unsupported)) ("[x80xff]") ("surrogateescape") ("[udc80udcff]"))) ((((unsupported)) ("[x80xff]") ("backslashreplace") ((((unsupported)) 0)))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xerror_handler)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) ("ascii") ((xerror_handler)))) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_encode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("abc") ("abc"))) ((((unsupported)) ("x80xe9xff") ("x80xe9xff"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xencode)) ("latin1"))) ((xexpected)))
                xtest_encode_errors.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xerror_handler)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("[u20acudc80]") ("ignore") ("[]"))) ((((unsupported)) ("[u20acudc80]") ("replace") ("[??]"))) ((((unsupported)) ("[u20acU000abcde]") ("backslashreplace") ((((unsupported)) 0)))) ((((unsupported)) ("[u20acudc80]") ("xmlcharrefreplace") ("[&#8364;&#56448;]"))) ((((unsupported)) ("[udc80udcff]") ("surrogateescape") ("[x80xff]"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xerror_handler)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xencode)) ("latin1") ((xerror_handler)))) ((xexpected)))
                xtest_encode_surrogateescape_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeEncodeError)))))
                        bogusForceDataize.write ((("udc80u20ac".xencode)) ("latin1") ("surrogateescape"))
                xtest_decode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xdata)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("abc") ("abc"))) ((((unsupported)) ("[x80xff]") ("[x80xff]"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xdata)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xdecode)) ("latin1"))) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_writelines.write
                  [xself]
                    memory > xbio
                    memory > xsr
                    memory > xcodec
                    seq > @
                      seq
                        xbio.write ((((xio).xBytesIO)) 0)
                        xcodec.write ((((xcodecs).xlookup)) ("ascii"))
                        xsr.write ((((xcodecs).xStreamRecoder)) ((xbio)) (((xcodec).xencode)) (((xcodec).xdecode)) ((((xencodings).xascii).xStreamReader)) ((((xencodings).xascii).xStreamWriter)))
                        bogusForceDataize.write ((((xsr).xwritelines)) ((((unsupported)) ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbio).xgetvalue)) 0)) ("ab"))
                xtest_write.write
                  [xself]
                    memory > xbio
                    memory > xsr
                    memory > xcodec
                    memory > xtext
                    seq > @
                      seq
                        xbio.write ((((xio).xBytesIO)) 0)
                        xcodec.write ((((xcodecs).xlookup)) ("latin1"))
                        xsr.write ((((xcodecs).xStreamRecoder)) ((xbio)) (((xcodec).xencode)) (((xcodec).xdecode)) ((((xencodings).xutf_8).xStreamReader)) ((((xencodings).xutf_8).xStreamWriter)))
                        xtext.write "àñé"
                        bogusForceDataize.write ((((xsr).xwrite)) (((((xtext).xencode)) ("latin1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbio).xgetvalue)) 0)) (((((xtext).xencode)) ("utf-8"))))
                xtest_seeking_read.write
                  [xself]
                    memory > xbio
                    memory > xsr
                    seq > @
                      seq
                        xbio.write ((((xio).xBytesIO)) (((("line1nline2nline3n".xencode)) ("utf-16-le"))))
                        xsr.write ((((xcodecs).xEncodedFile)) ((xbio)) ("utf-8") ("utf-16-le"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("line1n"))
                        bogusForceDataize.write ((((xsr).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("line1n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("line2n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("line3n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) (""))
                xtest_seeking_write.write
                  [xself]
                    memory > xbio
                    memory > xsr
                    seq > @
                      seq
                        xbio.write ((((xio).xBytesIO)) (((("123456789n".xencode)) ("utf-16-le"))))
                        xsr.write ((((xcodecs).xEncodedFile)) ((xbio)) ("utf-8") ("utf-16-le"))
                        bogusForceDataize.write ((((xsr).xseek)) (2))
                        bogusForceDataize.write ((((xsr).xwrite)) ("nabcn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("789n"))
                        bogusForceDataize.write ((((xsr).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("1n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("abcn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsr).xreadline)) 0)) ("789n"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((unsupported)) ((x_testcapi)) ("None: is there a None literal in the EO language?"))) ("need _testcapi module"))))
              seq
                (((unsupported)) 0)
                xENCODING.write ((((xsys).xgetfilesystemencoding)) 0)
                xSTRINGS.write (((unsupported)) ("ascii") ("ulatin1:xa7xe9") ("u255:xff") ("UCS:xe9u20acU0010ffff") ("surrogates:uDC80uDCFF"))
                xBYTES_STRINGS.write (((unsupported)) ("blatin1:xa7xe9") ("b255:xff"))
                xSURROGATES.write "uDC80uDCFF"
                xencode.write
                  [xself xtext xerrors]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((x_testcapi).xEncodeLocaleEx)) ((xtext)) (0) ((xerrors)))))
                xcheck_encode_strings.write
                  [xself xerrors]
                    memory > xencoded
                    memory > xexpected
                    memory > xerrmsg
                    seq > @
                      (((unsupported)) ((xtext)) (((xself).xSTRINGS)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xtext)))))
                          (((unsupported)) ((xUnicodeEncodeError)))
                            xexpected.write ((((xtext).xencode)) (((xself).xENCODING)) ((xerrors)))
                            seq
                              (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))) ((xcm)))
                                bogusForceDataize.write ((((xself).xencode)) ((xtext)) ((xerrors)))
                              xerrmsg.write (((xstr)) (((xcm).xexception)))
                              bogusForceDataize.write ((((xself).xassertRegex)) ((xerrmsg)) ("encode error: pos=[0-9]+, reason="))
                            seq
                              xencoded.write ((((xself).xencode)) ((xtext)) ((xerrors)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xencoded)) ((xexpected)))
                xtest_encode_strict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_encode_strings)) ("strict"))
                xtest_encode_surrogateescape.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_encode_strings)) ("surrogateescape"))
                xtest_encode_surrogatepass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xValueError)))
                          bogusForceDataize.write ((((xself).xencode)) ("") ("surrogatepass"))
                          ((((xstr)) ((xexc))).eq "unsupported error handler").if
                            bogusForceDataize.write ((((xself).xskipTest)) ("{self.ENCODING!r} encoder doesn't support surrogatepass error handler"))
                            (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_encode_strings)) ("surrogatepass"))
                xtest_encode_unsupported_error_handler.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xself).xencode)) ("") ("backslashreplace"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("unsupported error handler"))
                xdecode.write
                  [xself xencoded xerrors]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((x_testcapi).xDecodeLocaleEx)) ((xencoded)) (0) ((xerrors)))))
                xcheck_decode_strings.write
                  [xself xerrors]
                    memory > xerrmsg
                    memory > xexpected
                    memory > xencoded
                    memory > xis_utf8
                    memory > xencode_errors
                    memory > xdecoded
                    memory > xencoded2
                    memory > xstrings
                    seq > @
                      seq
                        xis_utf8.write (((xself).xENCODING).eq "utf-8")
                        (xis_utf8).if
                          xencode_errors.write "surrogateescape"
                          xencode_errors.write "strict"
                        xstrings.write (((xlist)) (((xself).xBYTES_STRINGS)))
                        (((unsupported)) ((xtext)) (((xself).xSTRINGS)))
                          seq
                            (((unsupported)) ((xUnicodeEncodeError)))
                              seq
                                xencoded.write ((((xtext).xencode)) (((xself).xENCODING)) ((xencode_errors)))
                                (((unsupported)) ((xencoded)) ((xstrings))).if
                                  bogusForceDataize.write ((((xstrings).xappend)) ((xencoded)))
                              xencoded.write "None: is there a None literal in the EO language?"
                            (xis_utf8).if
                              seq
                                xencoded2.write ((((xtext).xencode)) (((xself).xENCODING)) ("surrogatepass"))
                                ((xencoded2).neq (xencoded)).if
                                  bogusForceDataize.write ((((xstrings).xappend)) ((xencoded2)))
                        (((unsupported)) ((xencoded)) ((xstrings)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xencoded)))))
                            (((unsupported)) ((xUnicodeDecodeError)))
                              xexpected.write ((((xencoded).xdecode)) (((xself).xENCODING)) ((xerrors)))
                              seq
                                (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))) ((xcm)))
                                  bogusForceDataize.write ((((xself).xdecode)) ((xencoded)) ((xerrors)))
                                xerrmsg.write (((xstr)) (((xcm).xexception)))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xerrmsg).xstartswith)) ("decode error: "))) ((xerrmsg)))
                              seq
                                xdecoded.write ((((xself).xdecode)) ((xencoded)) ((xerrors)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xdecoded)) ((xexpected)))
                xtest_decode_strict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_decode_strings)) ("strict"))
                xtest_decode_surrogateescape.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_decode_strings)) ("surrogateescape"))
                xtest_decode_surrogatepass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xValueError)))
                          bogusForceDataize.write ((((xself).xdecode)) ("") ("surrogatepass"))
                          ((((xstr)) ((xexc))).eq "unsupported error handler").if
                            bogusForceDataize.write ((((xself).xskipTest)) ("{self.ENCODING!r} decoder doesn't support surrogatepass error handler"))
                            (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_decode_strings)) ("surrogatepass"))
                xtest_decode_unsupported_error_handler.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xself).xdecode)) ("") ("backslashreplace"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("unsupported error handler"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_encode.write
                  [xself]
                    memory > xciphertext
                    seq > @
                      seq
                        xciphertext.write ((((xcodecs).xencode)) ("Caesar liked ciphers") ("rot-13"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xciphertext)) ("Pnrfne yvxrq pvcuref"))
                xtest_decode.write
                  [xself]
                    memory > xplaintext
                    seq > @
                      seq
                        xplaintext.write ((((xcodecs).xdecode)) ("Rg gh, Oehgr?") ("rot-13"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xplaintext)) ("Et tu, Brute?"))
                xtest_incremental_encode.write
                  [xself]
                    memory > xciphertext
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("rot-13"))) 0)
                        xciphertext.write ((((xencoder).xencode)) ("ABBA nag Cheryl Baker"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xciphertext)) ("NOON ant Purely Onxre"))
                xtest_incremental_decode.write
                  [xself]
                    memory > xdecoder
                    memory > xplaintext
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("rot-13"))) 0)
                        xplaintext.write ((((xdecoder).xdecode)) ("terra Ares envy tha"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xplaintext)) ("green Nerf rail gun"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_rot13_func.write
                  [xself]
                    memory > xplain_text
                    memory > xoutfile
                    memory > xinfile
                    seq > @
                      seq
                        xinfile.write ((((xio).xStringIO)) ("Gb or, be abg gb or, gung vf gur dhrfgvba"))
                        xoutfile.write ((((xio).xStringIO)) 0)
                        bogusForceDataize.write (((((xencodings).xrot_13).xrot13)) ((xinfile)) ((xoutfile)))
                        bogusForceDataize.write ((((xoutfile).xseek)) (0))
                        xplain_text.write ((((xoutfile).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xplain_text)) ("To be, or not to be, that is the question"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)