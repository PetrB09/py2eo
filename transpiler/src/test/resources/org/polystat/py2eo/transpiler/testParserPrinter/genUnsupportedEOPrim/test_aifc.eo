memory > xcm
memory > xAifcTest
memory > xRuntimeError
memory > xValueError
memory > xfindfile
memory > xbyteswap
memory > xx
memory > xbytes
memory > xgetattr
memory > xunittest
memory > xEOFError
memory > xaudiotests
memory > xstr
memory > xUserWarning
memory > xio
memory > xstruct
memory > xsys
memory > xaifc
memory > xfloat
memory > xunlink
memory > xTESTFN
memory > xmock
memory > x__name__
memory > xcheck_no_resource_warning
[] > test_aifc
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_read_wrong_sample_width
        memory > xtest_write_params_raises
        memory > xtest_write_long_string_raises
        memory > xtest_params_added
        memory > xnframes
        memory > xtest_read_wrong_number_of_channels
        memory > xtest_read_wrong_form
        memory > xtest_write_aiff_by_extension
        memory > xtest_close_opened_files_on_error
        memory > xtest_read_comm_kludge_compname_even
        memory > xtest_read_no_ssnd_chunk
        memory > xtest_read_markers
        memory > xtest_write_markers_raises
        memory > xtest_write_markers_values
        memory > xclose_fd
        memory > xframerate
        memory > xtest_read_no_comm_chunk
        memory > xtest_wrong_open_mode
        memory > xsndfilename
        memory > xtest_skipunknown
        memory > xtest_write_params_bunch
        memory > xtest_read_written
        memory > xmodule
        memory > xsndfilenframes
        memory > xtest_write_params_singles
        memory > xtest_read_raises
        memory > xtest_read_wrong_marks
        memory > xtest_write_header_raises
        memory > xsampwidth
        memory > xtest_read_wrong_compression_type
        memory > xcompname
        memory > xframes
        memory > xtest_write_header_comptype_raises
        memory > xtest_read_comm_kludge_compname_odd
        memory > xtest_unseekable_read
        memory > xtest_write_header_comptype_sampwidth
        memory > xcomptype
        memory > xnchannels
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xaudiotests).xAudioWriteTests)) (((xaudiotests).xAudioTestsWithSourceFile)))
              seq
                xmodule.write (xaifc)
                xclose_fd.write TRUE
                xtest_unseekable_read.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm8.aiff"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 1
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm16.aiff"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 2
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm24.aiff"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 3
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-pcm32.aiff"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 4
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "NONE"
                xcompname.write "not compressed"
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-ulaw.aifc"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 2
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "ulaw"
                xcompname.write ""
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
                (((xsys).xbyteorder).neq "big").if
                  xframes.write (((xbyteswap)) ((xframes)) (2))
            (((unsupported)) ((xAifcTest)) (((xunittest).xTestCase)))
              seq
                xsndfilename.write "pluck-alaw.aifc"
                xsndfilenframes.write 3307
                xnchannels.write 2
                xsampwidth.write 2
                xframerate.write 11025
                xnframes.write 48
                xcomptype.write "alaw"
                xcompname.write ""
                xframes.write ((((xbytes).xfromhex)) ((((unsupported)) 0)))
                (((xsys).xbyteorder).neq "big").if
                  xframes.write (((xbyteswap)) ((xframes)) (2))
            (((unsupported)) (((xaudiotests).xAudioMiscTests)) (((xunittest).xTestCase)))
              seq
                xmodule.write (xaifc)
                xtest_skipunknown.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xf)) (((((xaifc).xopen)) ((((xfindfile)) ("Sine-1000Hz-300ms.aif"))))))
                xtest_close_opened_files_on_error.write
                  [xself]
                    memory > xnon_aifc_file
                    seq > @
                      seq
                        xnon_aifc_file.write (((unsupported)) ((xfindfile)) ("pluck-pcm8.wav") ("audiodata"))
                        (((unsupported)) ((((xcheck_no_resource_warning)) ((xself)))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) (((xaifc).xError)))))
                              (((unsupported)) (((xself).xf)) (((((xaifc).xopen)) ((xnon_aifc_file)) ("rb"))))
                            (((unsupported)) ((((unsupported)) ((((xmock).xpatch).xobject)) (((xaifc).xAifc_write)) ("initfp") ((xRuntimeError)))))
                              (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))))
                                (((unsupported)) (((xself).xfout)) (((((xaifc).xopen)) ((xTESTFN)) ("wb"))))
                xtest_params_added.write
                  [xself]
                    memory > xparams
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((xf)) (((xself).xf)) (((((xaifc).xopen)) ((xTESTFN)) ("wb"))))
                        bogusForceDataize.write ((((xf).xaiff)) 0)
                        bogusForceDataize.write ((((xf).xsetparams)) ((((unsupported)) (1) (1) (1) (1) ("NONE") (""))))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) ((xf)) (((xself).xf)) (((((xaifc).xopen)) ((xTESTFN)) ("rb"))))
                        xparams.write ((((xf).xgetparams)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xnchannels)) (((((xf).xgetnchannels)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xsampwidth)) (((((xf).xgetsampwidth)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xframerate)) (((((xf).xgetframerate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xnframes)) (((((xf).xgetnframes)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xcomptype)) (((((xf).xgetcomptype)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparams).xcompname)) (((((xf).xgetcompname)) 0)))
                xtest_write_header_comptype_sampwidth.write
                  [xself]
                    memory > xfout
                    seq > @
                      (((unsupported)) ((xcomptype)) ((((unsupported)) ("ULAW") ("ulaw") ("ALAW") ("alaw") ("G722"))))
                        seq
                          xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                          bogusForceDataize.write ((((xfout).xsetnchannels)) (1))
                          bogusForceDataize.write ((((xfout).xsetframerate)) (1))
                          bogusForceDataize.write ((((xfout).xsetcomptype)) ((xcomptype)) (""))
                          bogusForceDataize.write ((((xfout).xclose)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetsampwidth)) 0)) (2))
                          bogusForceDataize.write ((((xfout).xinitfp)) ("None: is there a None literal in the EO language?"))
                xtest_write_markers_values.write
                  [xself]
                    memory > xfout
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetmarkers)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xfout).xsetmark)) (1) (0) ("foo1"))
                        bogusForceDataize.write ((((xfout).xsetmark)) (1) (1) ("foo2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetmark)) (1))) ((((unsupported)) (1) (1) ("foo2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetmarkers)) 0)) ((((unsupported)) ((((unsupported)) (1) (1) ("foo2"))))))
                        bogusForceDataize.write ((((xfout).xinitfp)) ("None: is there a None literal in the EO language?"))
                xtest_read_markers.write
                  [xself]
                    memory > xfout
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) ((xfout)) (((xself).xfout)) (((((xaifc).xopen)) ((xTESTFN)) ("wb"))))
                        bogusForceDataize.write ((((xfout).xaiff)) 0)
                        bogusForceDataize.write ((((xfout).xsetparams)) ((((unsupported)) (1) (1) (1) (1) ("NONE") (""))))
                        bogusForceDataize.write ((((xfout).xsetmark)) (1) (0) ("odd"))
                        bogusForceDataize.write ((((xfout).xsetmark)) (2) (0) ("even"))
                        bogusForceDataize.write ((((xfout).xwriteframes)) ("x00"))
                        bogusForceDataize.write ((((xfout).xclose)) 0)
                        (((unsupported)) ((xf)) (((xself).xf)) (((((xaifc).xopen)) ((xTESTFN)) ("rb"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetmarkers)) 0)) ((((unsupported)) ((((unsupported)) (1) (0) ("odd"))) ((((unsupported)) (2) (0) ("even"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetmark)) (1))) ((((unsupported)) (1) (0) ("odd"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetmark)) (2))) ((((unsupported)) (2) (0) ("even"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xf).xgetmark)) (3))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_read_written.write
                  [xself]
                    memory > xread_written
                    seq > @
                      seq
                        xread_written.write
                          [xself xwhat]
                            memory > xf
                            seq > @
                              seq
                                xf.write ((((xio).xBytesIO)) 0)
                                bogusForceDataize.write (((((xgetattr)) ((xaifc)) (("_write_".add (xwhat))))) ((xf)) ((xx)))
                                bogusForceDataize.write ((((xf).xseek)) (0))
                                (((unsupported)) ((((((xgetattr)) ((xaifc)) (("_read_".add (xwhat))))) ((xf)))))
                        (((unsupported)) ((xx)) ((((unsupported)) ((1.neg)) (0) (0.1) (1))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("float"))) ((xx)))
                        (((unsupported)) ((xx)) ((((unsupported)) ((((xfloat)) ("NaN"))) ((((xfloat)) ("Inf"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("float"))) (((xaifc).x_HUGE_VAL)))
                        (((unsupported)) ((xx)) ((((unsupported)) ("") ("foo") (("a".mul 255)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("string"))) ((xx)))
                        (((unsupported)) ((xx)) ((((unsupported)) ((2147483647.neg)) ((1.neg)) (0) (1) (2147483647))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("long"))) ((xx)))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) ((((unsupported)) 0)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("ulong"))) ((xx)))
                        (((unsupported)) ((xx)) ((((unsupported)) ((32767.neg)) ((1.neg)) (0) (1) (32767))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("short"))) ((xx)))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) (65535))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xread_written)) ((xx)) ("ushort"))) ((xx)))
                xtest_read_raises.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) ("x00"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) (((xaifc).x_read_ulong)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) (((xaifc).x_read_long)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) (((xaifc).x_read_ushort)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) (((xaifc).x_read_short)) ((xf)))
                xtest_write_long_string_raises.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xaifc).x_write_string)) ((xf)) (("too long".mul 255)))
                xtest_wrong_open_mode.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) (((xaifc).xError)))))
                        bogusForceDataize.write ((((xaifc).xopen)) ((xTESTFN)) ("wrong_mode"))
                xtest_read_wrong_form.write
                  [xself]
                    memory > xb1
                    memory > xb2
                    seq > @
                      seq
                        xb1.write ((((xio).xBytesIO)) (("WRNG".add ((((xstruct).xpack)) (">L") (0)))))
                        xb2.write ((((xio).xBytesIO)) ((("FORM".add ((((xstruct).xpack)) (">L") (4))).add "WRNG")))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xaifc).xopen)) ((xb1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xaifc).xopen)) ((xb2)))
                xtest_read_no_comm_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xio).xBytesIO)) ((("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFF")))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xaifc).xopen)) ((xb)))
                xtest_read_no_ssnd_chunk.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                        (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (38) (1) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                        (((unsupported)) ((xb)) (((("NONE".add ((((xstruct).xpack)) ("B") (14))).add "not compressed").add "x00")))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xaifc).xError)) ("COMM chunk and/or SSND chunk missing"))))
                          bogusForceDataize.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_compression_type.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                        (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (23) (1) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                        (((unsupported)) ((xb)) (("WRNG".add ((((xstruct).xpack)) ("B") (0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_number_of_channels.write
                  [xself]
                    memory > xb
                    seq > @
                      (((unsupported)) ((xnchannels)) ((((unsupported)) (0) ((1.neg)))))
                        seq
                          xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                          (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (38) ((xnchannels)) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                          (((unsupported)) ((xb)) (((("NONE".add ((((xstruct).xpack)) ("B") (14))).add "not compressed").add "x00")))
                          (((unsupported)) ((xb)) ((("SSND".add ((((xstruct).xpack)) (">L") (8))).add ("x00".mul 8))))
                          (((unsupported)) (((((xself).xassertRaisesRegex)) (((xaifc).xError)) ("bad # of channels"))))
                            bogusForceDataize.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_sample_width.write
                  [xself]
                    memory > xb
                    seq > @
                      (((unsupported)) ((xsampwidth)) ((((unsupported)) (0) ((1.neg)))))
                        seq
                          xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                          (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (38) (1) (0) ((xsampwidth)) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                          (((unsupported)) ((xb)) (((("NONE".add ((((xstruct).xpack)) ("B") (14))).add "not compressed").add "x00")))
                          (((unsupported)) ((xb)) ((("SSND".add ((((xstruct).xpack)) (">L") (8))).add ("x00".mul 8))))
                          (((unsupported)) (((((xself).xassertRaisesRegex)) (((xaifc).xError)) ("bad sample width"))))
                            bogusForceDataize.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                xtest_read_wrong_marks.write
                  [xself]
                    memory > xb
                    memory > xf
                    seq > @
                      seq
                        xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFF")
                        (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (18) (1) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                        (((unsupported)) ((xb)) ((("SSND".add ((((xstruct).xpack)) (">L") (8))).add ("x00".mul 8))))
                        (((unsupported)) ((xb)) (("MARK".add ((((xstruct).xpack)) (">LhB") (3) (1) (1)))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xUserWarning)))) ((xcm)))
                          xf.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xwarning)))) ("Warning: MARK chunk contains only 0 markers instead of 1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetmarkers)) 0)) ("None: is there a None literal in the EO language?"))
                xtest_read_comm_kludge_compname_even.write
                  [xself]
                    memory > xb
                    memory > xf
                    seq > @
                      seq
                        xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                        (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (18) (1) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                        (((unsupported)) ((xb)) (((("NONE".add ((((xstruct).xpack)) ("B") (4))).add "even").add "x00")))
                        (((unsupported)) ((xb)) ((("SSND".add ((((xstruct).xpack)) (">L") (8))).add ("x00".mul 8))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xUserWarning)))) ((xcm)))
                          xf.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xwarning)))) ("Warning: bad COMM chunk size"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetcompname)) 0)) ("even"))
                xtest_read_comm_kludge_compname_odd.write
                  [xself]
                    memory > xb
                    memory > xf
                    seq > @
                      seq
                        xb.write (("FORM".add ((((xstruct).xpack)) (">L") (4))).add "AIFC")
                        (((unsupported)) ((xb)) (("COMM".add ((((xstruct).xpack)) (">LhlhhLL") (18) (1) (0) (8) ((16384.or 12)) ((((unsupported)) (11025) (18))) (0)))))
                        (((unsupported)) ((xb)) ((("NONE".add ((((xstruct).xpack)) ("B") (3))).add "odd")))
                        (((unsupported)) ((xb)) ((("SSND".add ((((xstruct).xpack)) (">L") (8))).add ("x00".mul 8))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xUserWarning)))) ((xcm)))
                          xf.write ((((xaifc).xopen)) (((((xio).xBytesIO)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xwarning)))) ("Warning: bad COMM chunk size"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetcompname)) 0)) ("odd"))
                xtest_write_params_raises.write
                  [xself]
                    memory > xwrong_params
                    memory > xfout
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        xwrong_params.write (((unsupported)) (0) (0) (0) (0) ("WRNG") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetparams)) ((xwrong_params)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xgetparams)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetnchannels)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xgetnchannels)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetsampwidth)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xgetsampwidth)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetframerate)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xgetframerate)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetcomptype)) ("WRNG") (""))
                        bogusForceDataize.write ((((xfout).xaiff)) 0)
                        bogusForceDataize.write ((((xfout).xsetnchannels)) (1))
                        bogusForceDataize.write ((((xfout).xsetsampwidth)) (1))
                        bogusForceDataize.write ((((xfout).xsetframerate)) (1))
                        bogusForceDataize.write ((((xfout).xsetnframes)) (1))
                        bogusForceDataize.write ((((xfout).xwriteframes)) ("x00"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetparams)) ((((unsupported)) (1) (1) (1) (1) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetnchannels)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetsampwidth)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetframerate)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetnframes)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetcomptype)) ("NONE") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xaiff)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xaifc)))
                xtest_write_params_singles.write
                  [xself]
                    memory > xfout
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xfout).xaifc)) 0)
                        bogusForceDataize.write ((((xfout).xsetnchannels)) (1))
                        bogusForceDataize.write ((((xfout).xsetsampwidth)) (2))
                        bogusForceDataize.write ((((xfout).xsetframerate)) (3))
                        bogusForceDataize.write ((((xfout).xsetnframes)) (4))
                        bogusForceDataize.write ((((xfout).xsetcomptype)) ("NONE") ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetnchannels)) 0)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetsampwidth)) 0)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetframerate)) 0)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetnframes)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xtell)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetcomptype)) 0)) ("NONE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetcompname)) 0)) ("name"))
                        bogusForceDataize.write ((((xfout).xwriteframes)) (((("x00".mul 4).mul ((((xfout).xgetsampwidth)) 0)).mul ((((xfout).xgetnchannels)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetnframes)) 0)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xtell)) 0)) (4))
                xtest_write_params_bunch.write
                  [xself]
                    memory > xfout
                    memory > xp
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xfout).xaifc)) 0)
                        xp.write (((unsupported)) (1) (2) (3) (4) ("NONE") ("name"))
                        bogusForceDataize.write ((((xfout).xsetparams)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfout).xgetparams)) 0)) ((xp)))
                        bogusForceDataize.write ((((xfout).xinitfp)) ("None: is there a None literal in the EO language?"))
                xtest_write_header_raises.write
                  [xself]
                    memory > xfout
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xclose)))
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xfout).xsetnchannels)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xclose)))
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xfout).xsetnchannels)) (1))
                        bogusForceDataize.write ((((xfout).xsetsampwidth)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xclose)))
                xtest_write_header_comptype_raises.write
                  [xself]
                    memory > xfout
                    seq > @
                      (((unsupported)) ((xcomptype)) ((((unsupported)) ("ULAW") ("ulaw") ("ALAW") ("alaw") ("G722"))))
                        seq
                          xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                          bogusForceDataize.write ((((xfout).xsetsampwidth)) (1))
                          bogusForceDataize.write ((((xfout).xsetcomptype)) ((xcomptype)) (""))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xclose)))
                          bogusForceDataize.write ((((xfout).xinitfp)) ("None: is there a None literal in the EO language?"))
                xtest_write_markers_raises.write
                  [xself]
                    memory > xfout
                    seq > @
                      seq
                        xfout.write ((((xaifc).xopen)) (((((xio).xBytesIO)) 0)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetmark)) (0) (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetmark)) (1) ((1.neg)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xsetmark)) (1) (0) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xaifc).xError)) (((xfout).xgetmark)) (1))
                        bogusForceDataize.write ((((xfout).xinitfp)) ("None: is there a None literal in the EO language?"))
                xtest_write_aiff_by_extension.write
                  [xself]
                    memory > xfilename
                    memory > xf
                    memory > xfout
                    memory > xsampwidth
                    memory > xframes
                    seq > @
                      seq
                        xsampwidth.write 2
                        xfilename.write ((xTESTFN).add ".aiff")
                        (((unsupported)) ((xfout)) (((xself).xfout)) (((((xaifc).xopen)) ((xfilename)) ("wb"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xunlink)) ((xfilename)))
                        bogusForceDataize.write ((((xfout).xsetparams)) ((((unsupported)) (1) ((xsampwidth)) (1) (1) ("ULAW") (""))))
                        xframes.write (("x00".mul ((((xfout).xgetnchannels)) 0)).mul (xsampwidth))
                        bogusForceDataize.write ((((xfout).xwriteframes)) ((xframes)))
                        bogusForceDataize.write ((((xfout).xclose)) 0)
                        (((unsupported)) ((xf)) (((xself).xf)) (((((xaifc).xopen)) ((xfilename)) ("rb"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xgetcomptype)) 0)) ("NONE"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)