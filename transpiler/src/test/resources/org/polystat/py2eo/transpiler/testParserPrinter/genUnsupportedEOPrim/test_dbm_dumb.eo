memory > xmeth
memory > xValueError
memory > xrange
memory > xKeyError
memory > xf
memory > xoperator
memory > xsupport
memory > xsorted
memory > xpartial
memory > xunittest
memory > xlen
memory > xcm
memory > xk
memory > xstdout
memory > xdb
memory > xlist
memory > xcontextlib
memory > xstr
memory > xio
memory > xdummy
memory > xstat
memory > xfile
memory > xFileNotFoundError
memory > xflag
memory > xstream
memory > xvalue
memory > xrandom
memory > xopen
memory > xOSError
memory > xos
memory > xdir
memory > xsuffix
memory > xext
memory > x__name__
memory > xkey
[] > test_dbm_dumb
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_missing_index
        memory > xtest_invalid_flag
        memory > xtest_write_write_read
        memory > x_fname
        memory > xtest_random
        memory > xtest_close_twice
        memory > xsetUp
        memory > xdumbdbm
        memory > xkeys_helper
        memory > xtest_write_contains
        memory > x_dict
        memory > xtest_str_read
        memory > x_delete_files
        memory > xtest_nonascii_filename
        memory > xtest_dumbdbm_keys
        memory > xtest_missing_data
        memory > xread_helper
        memory > xtest_line_endings
        memory > xtest_eval
        memory > xtest_dumbdbm_modification
        memory > xtest_check_closed
        memory > xtest_str_write_contains
        memory > xtest_dumbdbm_read
        memory > xtest_create_new
        memory > xtest_dumbdbm_creation_mode
        memory > xtest_context_manager
        memory > xtearDown
        memory > xinit_db
        memory > xtest_readonly_files
        memory > xtest_dumbdbm_creation
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            x_fname.write ((xsupport).xTESTFN)
            x_delete_files.write
              []
                seq > @
                  (((unsupported)) ((xext)) ((((unsupported)) (".dir") (".dat") (".bak"))))
                    (((unsupported)) ((xOSError)))
                      bogusForceDataize.write ((((xos).xunlink)) (((x_fname).add (xext))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_dict.write (((unsupported)) ("0") ("") ("a") ("Python:") ("b") ("Programming") ("c") ("the") ("d") ("way") ("f") ("Guido") ("g") ("intended") (((("u00fc".xencode)) ("utf-8"))) ("!"))
                xtest_dumbdbm_creation.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("c"))))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xf).xkeys)) 0)))) ((((unsupported)) 0)))
                          (((unsupported)) ((xkey)) (((xself).x_dict)))
                            (((unsupported)) ((((unsupported)) ((xf)) ((xkey)))) ((((unsupported)) (((xself).x_dict)) ((xkey)))))
                          bogusForceDataize.write ((((xself).xread_helper)) ((xf)))
                xtest_dumbdbm_creation_mode.write
                  [xself]
                    memory > xst
                    memory > xexpected_mode
                    memory > xold_umask
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            xold_umask.write ((((xos).xumask)) (2))
                            xf.write ((((xdumbdbm).xopen)) ((x_fname)) ("c") (415))
                            bogusForceDataize.write ((((xf).xclose)) 0)
                          bogusForceDataize.write ((((xos).xumask)) ((xold_umask)))
                        xexpected_mode.write 413
                        (((xos).xname).neq "posix").if
                          xexpected_mode.write 438
                        (((unsupported)) 0)
                        xst.write ((((xos).xstat)) (((x_fname).add ".dat")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) ((xexpected_mode)))
                        xst.write ((((xos).xstat)) (((x_fname).add ".dir")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstat).xS_IMODE)) (((xst).xst_mode)))) ((xexpected_mode)))
                xtest_close_twice.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xdumbdbm).xopen)) ((x_fname)))
                        (((unsupported)) ((((unsupported)) ((xf)) ("a"))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("a"))) ("b"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_dumbdbm_modification.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xinit_db)) 0)
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("w"))))) ((xf)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xself).x_dict)) ("g"))) ((((unsupported)) ((xf)) ("g"))) ("indented"))
                            bogusForceDataize.write ((((xself).xread_helper)) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xsetdefault)) ("xxx") ("foo"))) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("xxx"))) ("foo"))
                xtest_dumbdbm_read.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xinit_db)) 0)
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("r"))))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xread_helper)) ((xf)))
                            (((unsupported)) (((((xself).xassertRaisesRegex)) (((xdumbdbm).xerror)) ("The database is opened for reading only"))))
                              (((unsupported)) ((((unsupported)) ((xf)) ("g"))) ("x"))
                            (((unsupported)) (((((xself).xassertRaisesRegex)) (((xdumbdbm).xerror)) ("The database is opened for reading only"))))
                              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xf)) ("a"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xget)) ("a"))) ((((unsupported)) (((xself).x_dict)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xget)) ("xxx") ("foo"))) ("foo"))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xf).xget)) ("xxx"))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                              (((unsupported)) ((xf)) ("xxx"))
                xtest_dumbdbm_keys.write
                  [xself]
                    memory > xkeys
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xinit_db)) 0)
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                          xkeys.write ((((xself).xkeys_helper)) ((xf)))
                xtest_write_contains.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                        seq
                          (((unsupported)) ((((unsupported)) ((xf)) ("1"))) ("hello"))
                          bogusForceDataize.write ((((xself).xassertIn)) ("1") ((xf)))
                xtest_write_write_read.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xf)) ("1"))) ("hello"))
                            (((unsupported)) ((((unsupported)) ((xf)) ("1"))) ("hello2"))
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("1"))) ("hello2"))
                xtest_str_read.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xinit_db)) 0)
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("r"))))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("u00fc"))) ((((unsupported)) (((xself).x_dict)) (((("u00fc".xencode)) ("utf-8"))))))
                xtest_str_write_contains.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xinit_db)) 0)
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xf)) ("u00fc"))) ("!"))
                            (((unsupported)) ((((unsupported)) ((xf)) ("1"))) ("a"))
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("r"))))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)) ("u00fc") ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (((("u00fc".xencode)) ("utf-8"))))) ((((unsupported)) (((xself).x_dict)) (((("u00fc".xencode)) ("utf-8"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("1"))) ("a"))
                xtest_line_endings.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xf)) ("1"))) ("hello"))
                            (((unsupported)) ((((unsupported)) ((xf)) ("2"))) ("hello2"))
                        (((unsupported)) (((((xio).xopen)) (((x_fname).add ".dir")) ("rb"))) ((xfile)))
                          xdata.write ((((xfile).xread)) 0)
                        (((xos).xlinesep).eq "n").if
                          xdata.write ((((xdata).xreplace)) ("n") ("rn"))
                          xdata.write ((((xdata).xreplace)) ("rn") ("n"))
                        (((unsupported)) (((((xio).xopen)) (((x_fname).add ".dir")) ("wb"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) ((xdata)))
                        xf.write ((((xdumbdbm).xopen)) ((x_fname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("1"))) ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ("2"))) ("hello2"))
                xread_helper.write
                  [xself xf]
                    memory > xkeys
                    seq > @
                      seq
                        xkeys.write ((((xself).xkeys_helper)) ((xf)))
                        (((unsupported)) ((xkey)) (((xself).x_dict)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).x_dict)) ((xkey)))) ((((unsupported)) ((xf)) ((xkey)))))
                xinit_db.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)) ("n"))))) ((xf)))
                        (((unsupported)) ((xk)) (((xself).x_dict)))
                          (((unsupported)) ((((unsupported)) ((xf)) ((xk)))) ((((unsupported)) (((xself).x_dict)) ((xk)))))
                xkeys_helper.write
                  [xself xf]
                    memory > xkeys
                    memory > xdkeys
                    seq > @
                      seq
                        xkeys.write (((xsorted)) (((((xf).xkeys)) 0)))
                        xdkeys.write (((xsorted)) ((((((xself).x_dict).xkeys)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkeys)) ((xdkeys)))
                        (((unsupported)) ((xkeys)))
                xtest_random.write
                  [xself]
                    memory > xexpected
                    memory > xgot
                    memory > xv
                    memory > xd
                    memory > xk
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xd.write (((unsupported)) 0)
                        (((unsupported)) ((xdummy)) ((((xrange)) (5))))
                          seq
                            (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                              (((unsupported)) ((xdummy)) ((((xrange)) (100))))
                                seq
                                  xk.write ((((xrandom).xchoice)) ("abcdefghijklm"))
                                  (((((xrandom).xrandom)) 0).less 0.2).if
                                    (((unsupported)) ((xk)) ((xd))).if
                                      seq
                                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xd)) ((xk)))))))
                                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xf)) ((xk)))))))
                                    seq
                                      xv.write (((((xrandom).xchoice)) ((((unsupported)) ("a") ("b") ("c")))).mul ((((xrandom).xrandrange)) (10000)))
                                      (((unsupported)) ((((unsupported)) ((xd)) ((xk)))) ((xv)))
                                      (((unsupported)) ((((unsupported)) ((xf)) ((xk)))) ((xv)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) ((xk)))) ((xv)))
                            (((unsupported)) (((((xcontextlib).xclosing)) (((((xdumbdbm).xopen)) ((x_fname)))))) ((xf)))
                              seq
                                xexpected.write (((xsorted)) ((((unsupported)) ((((unsupported)) (((((xk).xencode)) ("latin-1"))) ((xv)))) ((((unsupported)) ((xk)) ((xv)))) (((((xd).xitems)) 0)))))
                                xgot.write (((xsorted)) (((((xf).xitems)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xgot)))
                xtest_context_manager.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)) ("c"))) ((xdb)))
                          (((unsupported)) ((((unsupported)) ((xdb)) ("dumbdbm context manager"))) ("context manager"))
                        (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)) ("r"))) ((xdb)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xdb).xkeys)) 0)))) ((((unsupported)) ("dumbdbm context manager"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xdumbdbm).xerror)))))
                          bogusForceDataize.write ((((xdb).xkeys)) 0)
                xtest_check_closed.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xdumbdbm).xopen)) ((x_fname)) ("c"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) ((xmeth)) ((((unsupported)) ((((xpartial)) (((xoperator).xdelitem)) ((xf)))) ((((xpartial)) (((xoperator).xsetitem)) ((xf)) ("b"))) ((((xpartial)) (((xoperator).xgetitem)) ((xf)))) ((((xpartial)) (((xoperator).xcontains)) ((xf)))))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) (((xdumbdbm).xerror)))) ((xcm)))
                              bogusForceDataize.write (((xmeth)) ("test"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("DBM object has already been closed"))
                        (((unsupported)) ((xmeth)) ((((unsupported)) (((((xoperator).xmethodcaller)) ("keys"))) (((((xoperator).xmethodcaller)) ("iterkeys"))) (((((xoperator).xmethodcaller)) ("items"))) ((xlen)))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) (((xdumbdbm).xerror)))) ((xcm)))
                              bogusForceDataize.write (((xmeth)) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("DBM object has already been closed"))
                xtest_create_new.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)) ("n"))) ((xf)))
                          (((unsupported)) ((xk)) (((xself).x_dict)))
                            (((unsupported)) ((((unsupported)) ((xf)) ((xk)))) ((((unsupported)) (((xself).x_dict)) ((xk)))))
                        (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)) ("n"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xkeys)) 0)) ((((unsupported)) 0)))
                xtest_eval.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) (((x_fname).add ".dir")) ("w"))) ((xstream)))
                          bogusForceDataize.write ((((xstream).xwrite)) ("str(print('Hacked!')), 0n"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                              (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xgetvalue)) 0)) (""))
                xtest_missing_data.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xvalue)) ((((unsupported)) ("r") ("w"))))
                        seq
                          bogusForceDataize.write (((x_delete_files)) 0)
                          (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))))
                            bogusForceDataize.write ((((xdumbdbm).xopen)) ((x_fname)) ((xvalue)))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((x_fname).add ".dir")))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((x_fname).add ".bak")))))
                xtest_missing_index.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xdumbdbm).xopen)) ((x_fname)) ("n"))) ((xf)))
                        bogusForceDataize.write ((((xos).xunlink)) (((x_fname).add ".dir")))
                        (((unsupported)) ((xvalue)) ((((unsupported)) ("r") ("w"))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))))
                              bogusForceDataize.write ((((xdumbdbm).xopen)) ((x_fname)) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((x_fname).add ".dir")))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((x_fname).add ".bak")))))
                xtest_invalid_flag.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xflag)) ((((unsupported)) ("x") ("rf") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("Flag must be one of 'r', 'w', 'c', or 'n'"))))
                          bogusForceDataize.write ((((xdumbdbm).xopen)) ((x_fname)) ((xflag)))
                xtest_readonly_files.write
                  [xself]
                    memory > xfname
                    seq > @
                      (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xdir)))
                        seq
                          xfname.write (((((xos).xpath).xjoin)) ((xdir)) ("db"))
                          (((unsupported)) (((((xdumbdbm).xopen)) ((xfname)) ("n"))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xf).xkeys)) 0)))) ((((unsupported)) 0)))
                              (((unsupported)) ((xkey)) (((xself).x_dict)))
                                (((unsupported)) ((((unsupported)) ((xf)) ((xkey)))) ((((unsupported)) (((xself).x_dict)) ((xkey)))))
                          bogusForceDataize.write ((((xos).xchmod)) (((xfname).add ".dir")) (((xstat).xS_IRUSR)))
                          bogusForceDataize.write ((((xos).xchmod)) (((xfname).add ".dat")) (((xstat).xS_IRUSR)))
                          bogusForceDataize.write ((((xos).xchmod)) ((xdir)) ((((xstat).xS_IRUSR).or ((xstat).xS_IXUSR))))
                          (((unsupported)) (((((xdumbdbm).xopen)) ((xfname)) ("r"))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xf).xkeys)) 0)))) ((((xsorted)) (((xself).x_dict)))))
                              bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_nonascii_filename.write
                  [xself]
                    memory > xfilename
                    seq > @
                      (((unsupported)) 0)
                        xfilename.write ((xsupport).xTESTFN_NONASCII)
                        (((unsupported)) ((xsuffix)) ((((unsupported)) (".dir") (".dat") (".bak"))))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) (((xfilename).add (xsuffix))))
                        (((unsupported)) (((((xdumbdbm).xopen)) ((xfilename)) ("c"))) ((xdb)))
                          (((unsupported)) ((((unsupported)) ((xdb)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xfilename).add ".dat")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xexists)) (((xfilename).add ".dir")))))
                        (((unsupported)) (((((xdumbdbm).xopen)) ((xfilename)) ("r"))) ((xdb)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xdb).xkeys)) 0)))) ((((unsupported)) ("key"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("key") ((xdb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdb)) ("key"))) ("value"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((x_delete_files)) 0)
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((x_delete_files)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)