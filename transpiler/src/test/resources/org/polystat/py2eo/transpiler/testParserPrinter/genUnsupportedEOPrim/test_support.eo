memory > xTest
memory > xTestSupport
memory > ximportlib
memory > xvalue
memory > xtempfile
memory > xopen
memory > xx
memory > xbool
memory > xstderr
memory > xparent_dir
memory > xinput
memory > xy
memory > xlen
memory > xcm
memory > xscript_helper
memory > xObj
memory > xstdout
memory > xerrno
memory > xstr
memory > xio
memory > xopts
memory > xstat
memory > xAssertionError
memory > xFileNotFoundError
memory > xsocket
memory > xtextwrap
memory > xprint
memory > xw
memory > xset
memory > xrepr
memory > xf
memory > xnew_cwd
memory > xException
memory > xhasattr
memory > xtime
memory > xsupport
memory > xsys
memory > xtemp_path
memory > xOSError
memory > xsubprocess
memory > xos
memory > xstdin
memory > x__file__
memory > xshutil
memory > xunittest
memory > xrecorder
memory > x__import__
memory > xFileExistsError
memory > x__name__
memory > xkey
[] > test_support
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_swap_item
        memory > xtest_import_fresh_module
        memory > xtest_optim_args_from_interpreter_flags
        memory > xtest_swap_attr
        memory > xtest_change_cwd__non_existent_dir
        memory > xtest_CleanImport
        memory > xtest_check__all__
        memory > xattribute2
        memory > xTESTFN
        memory > xtest_import_module
        memory > xtest_change_cwd__non_existent_dir__quiet_true
        memory > xtest_DirsOnSysPath
        memory > xtest_temp_dir__path_none
        memory > xtest_temp_dir__existing_dir__quiet_true
        memory > xtest_unlink
        memory > xtest_detect_api_mismatch
        memory > xtest_rmtree
        memory > xtest_main
        memory > xtest_HOST
        memory > xattribute3
        memory > xtest_captured_stdout
        memory > x__magic_2__
        memory > xtest_fd_count
        memory > xtest_find_unused_port
        memory > xtest_reap_children
        memory > xtest_change_cwd
        memory > x_hidden_attribute1
        memory > xtest_args_from_interpreter_flags
        memory > xtest_captured_stderr
        memory > xtest_bind_port
        memory > xtest_get_attribute
        memory > xtest_check_syntax_error
        memory > xtest_temp_dir__existing_dir__quiet_default
        memory > xtest_sortdict
        memory > xtest_temp_dir
        memory > xtest_python_is_optimized
        memory > xtest_detect_api_mismatch__ignore
        memory > xtest_gc_collect
        memory > xattribute1
        memory > xtest_temp_cwd
        memory > xtest_make_bad_fd
        memory > xtest_forget
        memory > x__magic_1__
        memory > xcheck_print_warning
        memory > xtest_captured_stdin
        memory > xtest_get_original_stdout
        memory > xtest_match_test
        memory > xtest_temp_cwd__name_none
        memory > xcheck_options
        memory > xtest_unload
        memory > xtest_print_warning
        memory > xtest_temp_dir__forked_child
        memory > xtest_change_cwd__chdir_warning
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xTESTFN.write ((xsupport).xTESTFN)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_import_module.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).ximport_module)) ("ftplib"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xunittest).xSkipTest)) (((xsupport).ximport_module)) ("foo"))
                xtest_import_fresh_module.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).ximport_fresh_module)) ("ftplib"))
                xtest_get_attribute.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsupport).xget_attribute)) ((xself)) ("test_get_attribute"))) (((xself).xtest_get_attribute)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xunittest).xSkipTest)) (((xsupport).xget_attribute)) ((xself)) ("foo"))
                xtest_get_original_stdout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsupport).xget_original_stdout)) 0)) (((xsys).xstdout)))
                xtest_unload.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("sched") (((xsys).xmodules)))
                        bogusForceDataize.write ((((xsupport).xunload)) ("sched"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("sched") (((xsys).xmodules)))
                xtest_unlink.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("w"))) ((xf)))
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xTESTFN)))))
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
                xtest_rmtree.write
                  [xself]
                    memory > xsubdirpath
                    memory > xdirpath
                    seq > @
                      seq
                        xdirpath.write (((xsupport).xTESTFN).add "d")
                        xsubdirpath.write (((((xos).xpath).xjoin)) ((xdirpath)) ("subdir"))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirpath)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xsubdirpath)))
                        bogusForceDataize.write ((((xsupport).xrmtree)) ((xdirpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdirpath)))))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xsupport)) ("verbose") (0))))
                          bogusForceDataize.write ((((xsupport).xrmtree)) ((xdirpath)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirpath)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xsubdirpath)))
                        bogusForceDataize.write ((((xos).xchmod)) ((xdirpath)) ((((xstat).xS_IRUSR).or ((xstat).xS_IXUSR))))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xsupport)) ("verbose") (0))))
                          bogusForceDataize.write ((((xsupport).xrmtree)) ((xdirpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdirpath)))))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xdirpath)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xsubdirpath)))
                        bogusForceDataize.write ((((xos).xchmod)) ((xdirpath)) (0))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xsupport)) ("verbose") (0))))
                          bogusForceDataize.write ((((xsupport).xrmtree)) ((xdirpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xdirpath)))))
                xtest_forget.write
                  [xself]
                    memory > xmod
                    memory > xmod_filename
                    seq > @
                      seq
                        xmod_filename.write ((xTESTFN).add ".py")
                        (((unsupported)) ((((xopen)) ((xmod_filename)) ("w"))) ((xf)))
                          (((unsupported)) ((xprint)) ("foo = 1") ((xf)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) (((xos).xcurdir)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)) 0)
                        (((unsupported)) 0)
                          seq
                            xmod.write (((x__import__)) ((xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertIn)) ((xTESTFN)) (((xsys).xmodules)))
                            bogusForceDataize.write ((((xsupport).xforget)) ((xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xTESTFN)) (((xsys).xmodules)))
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                            bogusForceDataize.write ((((xsupport).xunlink)) ((xmod_filename)))
                            bogusForceDataize.write ((((xsupport).xrmtree)) ("__pycache__"))
                xtest_HOST.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsocket).xcreate_server)) ((((unsupported)) (((xsupport).xHOST)) (0))))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_find_unused_port.write
                  [xself]
                    memory > xs
                    memory > xport
                    seq > @
                      seq
                        xport.write ((((xsupport).xfind_unused_port)) 0)
                        xs.write ((((xsocket).xcreate_server)) ((((unsupported)) (((xsupport).xHOST)) ((xport)))))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_bind_port.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xsupport).xbind_port)) ((xs)))
                        bogusForceDataize.write ((((xs).xlisten)) 0)
                        bogusForceDataize.write ((((xs).xclose)) 0)
                xtest_temp_dir.write
                  [xself]
                    memory > xpath
                    memory > xparent_dir
                    seq > @
                      seq
                        unsupported
                        xparent_dir.write ((((xtempfile).xmkdtemp)) 0)
                        xparent_dir.write (((((xos).xpath).xrealpath)) ((xparent_dir)))
                        (((unsupported)) 0)
                          seq
                            xpath.write (((((xos).xpath).xjoin)) ((xparent_dir)) ("temp"))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xisdir)) ((xpath)))))
                            (((unsupported)) (((((xsupport).xtemp_dir)) ((xpath)))) ((xtemp_path)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xtemp_path)) ((xpath)))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xpath)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xisdir)) ((xpath)))))
                          bogusForceDataize.write ((((xsupport).xrmtree)) ((xparent_dir)))
                xtest_temp_dir__path_none.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xtemp_path)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xtemp_path)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xisdir)) ((xtemp_path)))))
                xtest_temp_dir__existing_dir__quiet_default.write
                  [xself]
                    memory > xcall_temp_dir
                    memory > xpath
                    seq > @
                      seq
                        unsupported
                        xcall_temp_dir.write
                          [xpath]
                            seq > @
                              (((unsupported)) (((((xsupport).xtemp_dir)) ((xpath)))) ((xtemp_path)))
                                (((unsupported)) ((((xException)) ("should not get here"))))
                        xpath.write ((((xtempfile).xmkdtemp)) 0)
                        xpath.write (((((xos).xpath).xrealpath)) ((xpath)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xpath)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileExistsError)) ((xcall_temp_dir)) ((xpath)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xpath)))))
                          bogusForceDataize.write ((((xshutil).xrmtree)) ((xpath)))
                xtest_temp_dir__existing_dir__quiet_true.write
                  [xself]
                    memory > xwarn
                    memory > xwarnings
                    memory > xpath
                    seq > @
                      seq
                        unsupported
                        xpath.write ((((xtempfile).xmkdtemp)) 0)
                        xpath.write (((((xos).xpath).xrealpath)) ((xpath)))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((((xsupport).xcheck_warnings)) 0)) ((xrecorder)))
                              seq
                                (((unsupported)) ((((unsupported)) (((xsupport).xtemp_dir)) ((xpath)) (TRUE))) ((xtemp_path)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xpath)) ((xtemp_path)))
                                xwarnings.write (((unsupported)) ((((xstr)) (((xw).xmessage)))) ((xw)) (((xrecorder).xwarnings)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xpath)))))
                          bogusForceDataize.write ((((xshutil).xrmtree)) ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xwarnings)))) (1) ((xwarnings)))
                        xwarn.write (((unsupported)) ((xwarnings)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xwarn).xstartswith)) ("tests may fail, unable to create temporary directory {path!r}: "))) ((xwarn)))
                xtest_temp_dir__forked_child.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        bogusForceDataize.write ((((xscript_helper).xassert_python_ok)) ("-c") (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                xtest_change_cwd.write
                  [xself]
                    memory > xoriginal_cwd
                    seq > @
                      seq
                        xoriginal_cwd.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xtemp_path)))
                          (((unsupported)) (((((xsupport).xchange_cwd)) ((xtemp_path)))) ((xnew_cwd)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_cwd)) ((xtemp_path)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xnew_cwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xoriginal_cwd)))
                xtest_change_cwd__non_existent_dir.write
                  [xself]
                    memory > xcall_change_cwd
                    memory > xoriginal_cwd
                    memory > xnon_existent_dir
                    seq > @
                      seq
                        unsupported
                        xoriginal_cwd.write ((((xos).xgetcwd)) 0)
                        xcall_change_cwd.write
                          [xpath]
                            seq > @
                              (((unsupported)) (((((xsupport).xchange_cwd)) ((xpath)))) ((xnew_cwd)))
                                (((unsupported)) ((((xException)) ("should not get here"))))
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xparent_dir)))
                          seq
                            xnon_existent_dir.write (((((xos).xpath).xjoin)) ((xparent_dir)) ("does_not_exist"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) ((xcall_change_cwd)) ((xnon_existent_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xoriginal_cwd)))
                xtest_change_cwd__non_existent_dir__quiet_true.write
                  [xself]
                    memory > xwarn
                    memory > xwarnings
                    memory > xoriginal_cwd
                    memory > xbad_dir
                    seq > @
                      seq
                        unsupported
                        xoriginal_cwd.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xparent_dir)))
                          seq
                            xbad_dir.write (((((xos).xpath).xjoin)) ((xparent_dir)) ("does_not_exist"))
                            (((unsupported)) (((((xsupport).xcheck_warnings)) 0)) ((xrecorder)))
                              seq
                                (((unsupported)) ((((unsupported)) (((xsupport).xchange_cwd)) ((xbad_dir)) (TRUE))) ((xnew_cwd)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_cwd)) ((xoriginal_cwd)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xnew_cwd)))
                                xwarnings.write (((unsupported)) ((((xstr)) (((xw).xmessage)))) ((xw)) (((xrecorder).xwarnings)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xwarnings)))) (1) ((xwarnings)))
                        xwarn.write (((unsupported)) ((xwarnings)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xwarn).xstartswith)) ("tests may fail, unable to change the current working directory to {bad_dir!r}: "))) ((xwarn)))
                xtest_change_cwd__chdir_warning.write
                  [xself]
                    memory > xmsg
                    memory > xpath
                    memory > xmessages
                    seq > @
                      seq
                        unsupported
                        xpath.write ((xTESTFN).add "_does_not_exist")
                        (((unsupported)) (((((xsupport).xcheck_warnings)) 0)) ((xrecorder)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xsupport).xchange_cwd)) ((xpath)) (TRUE))))
                            xmessages.write (((unsupported)) ((((xstr)) (((xw).xmessage)))) ((xw)) (((xrecorder).xwarnings)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xmessages)))) (1) ((xmessages)))
                        xmsg.write (((unsupported)) ((xmessages)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmsg).xstartswith)) ("tests may fail, unable to change the current working directory to {path!r}: "))) ((xmsg)))
                xtest_temp_cwd.write
                  [xself]
                    memory > xhere
                    seq > @
                      seq
                        xhere.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) ((((unsupported)) (((xsupport).xtemp_cwd)) ((xTESTFN)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) (((((xos).xgetcwd)) 0)))) ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xhere)))
                xtest_temp_cwd__name_none.write
                  [xself]
                    memory > xoriginal_cwd
                    seq > @
                      seq
                        unsupported
                        xoriginal_cwd.write ((((xos).xgetcwd)) 0)
                        (((unsupported)) ((((unsupported)) (((xsupport).xtemp_cwd)) ("None: is there a None literal in the EO language?"))) ((xnew_cwd)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnew_cwd)) ((xoriginal_cwd)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xos).xpath).xisdir)) ((xnew_cwd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xnew_cwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xgetcwd)) 0)) ((xoriginal_cwd)))
                xtest_sortdict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xsupport).xsortdict)) ((((unsupported)) (3) (3) (2) (2) (1) (1))))) ("{1: 1, 2: 2, 3: 3}"))
                xtest_make_bad_fd.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xsupport).xmake_bad_fd)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xos).xwrite)) ((xfd)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEBADF)))
                xtest_check_syntax_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsupport).xcheck_syntax_error)) ((xself)) ("def class") (1) (5))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAssertionError)))))
                          bogusForceDataize.write ((((xsupport).xcheck_syntax_error)) ((xself)) ("x=1"))
                xtest_CleanImport.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xCleanImport)) ("asyncore"))))
                          bogusForceDataize.write ((((ximportlib).ximport_module)) ("asyncore"))
                xtest_DirsOnSysPath.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xDirsOnSysPath)) ("foo") ("bar"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)) ("foo") (((xsys).xpath)))
                            bogusForceDataize.write ((((xself).xassertIn)) ("bar") (((xsys).xpath)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("foo") (((xsys).xpath)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("bar") (((xsys).xpath)))
                xtest_captured_stdout.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          bogusForceDataize.write (((xprint)) ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xgetvalue)) 0)) ("hellon"))
                xtest_captured_stderr.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                          (((unsupported)) ((xprint)) ("hello") (((xsys).xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) ("hellon"))
                xtest_captured_stdin.write
                  [xself]
                    memory > xcaptured
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdin)) 0)) ((xstdin)))
                          seq
                            bogusForceDataize.write ((((xstdin).xwrite)) ("hellon"))
                            bogusForceDataize.write ((((xstdin).xseek)) (0))
                            xcaptured.write (((xinput)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcaptured)) ("hello"))
                xtest_gc_collect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_python_is_optimized.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)) (((((xsupport).xpython_is_optimized)) 0)) ((xbool)))
                xtest_swap_attr.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xobj.write (((xObj)) 0)
                        (((unsupported)) (((xobj).xx)) (1))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xobj)) ("x") (5))) ((xx)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xx)) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xx)) (1))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xobj)) ("y") (5))) ((xy)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xobj).xy)) (5))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((xy)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xobj)) ("y"))))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xobj)) ("y") (5))))
                          (((unsupported)) ((((unsupported)) (((xobj).xy)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xobj)) ("y"))))
                xtest_swap_item.write
                  [xself]
                    memory > xD
                    seq > @
                      seq
                        xD.write (((unsupported)) ("x") (1))
                        (((unsupported)) (((((xsupport).xswap_item)) ((xD)) ("x") (5))) ((xx)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) ("x"))) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) ("x"))) (1))
                        (((unsupported)) (((((xsupport).xswap_item)) ((xD)) ("y") (5))) ((xy)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) ("y"))) (5))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((xy)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("y") ((xD)))
                        (((unsupported)) (((((xsupport).xswap_item)) ((xD)) ("y") (5))))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xD)) ("y"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("y") ((xD)))
                (((unsupported)) 0)
                  seq
                    xattribute1.write "None: is there a None literal in the EO language?"
                    xattribute2.write "None: is there a None literal in the EO language?"
                    x_hidden_attribute1.write "None: is there a None literal in the EO language?"
                    x__magic_1__.write "None: is there a None literal in the EO language?"
                (((unsupported)) 0)
                  seq
                    xattribute2.write "None: is there a None literal in the EO language?"
                    xattribute3.write "None: is there a None literal in the EO language?"
                    x__magic_1__.write "None: is there a None literal in the EO language?"
                    x__magic_2__.write "None: is there a None literal in the EO language?"
                xtest_detect_api_mismatch.write
                  [xself]
                    memory > xmissing_items
                    seq > @
                      seq
                        xmissing_items.write ((((xsupport).xdetect_api_mismatch)) (((xself).xRefClass)) (((xself).xOtherClass)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("attribute1"))) ((xmissing_items)))
                        xmissing_items.write ((((xsupport).xdetect_api_mismatch)) (((xself).xOtherClass)) (((xself).xRefClass)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("attribute3") ("__magic_2__"))) ((xmissing_items)))
                xtest_detect_api_mismatch__ignore.write
                  [xself]
                    memory > xmissing_items
                    memory > xignore
                    seq > @
                      seq
                        xignore.write (((unsupported)) ("attribute1") ("attribute3") ("__magic_2__") ("not_in_either"))
                        xmissing_items.write (((unsupported)) (((xsupport).xdetect_api_mismatch)) (((xself).xRefClass)) (((xself).xOtherClass)) ((xignore)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) 0)) ((xmissing_items)))
                        xmissing_items.write (((unsupported)) (((xsupport).xdetect_api_mismatch)) (((xself).xOtherClass)) (((xself).xRefClass)) ((xignore)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) 0)) ((xmissing_items)))
                xtest_check__all__.write
                  [xself]
                    memory > xextra
                    memory > xblacklist
                    seq > @
                      seq
                        xextra.write (((unsupported)) ("tempdir"))
                        xblacklist.write (((unsupported)) ("template"))
                        (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xtempfile)) ((xextra)) ((xblacklist)))
                        xextra.write (((unsupported)) ("TextTestResult") ("installHandler"))
                        xblacklist.write (((unsupported)) ("load_tests") ("TestProgram") ("BaseTestSuite"))
                        (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xunittest)) ((((unsupported)) ("unittest.result") ("unittest.case") ("unittest.suite") ("unittest.loader") ("unittest.main") ("unittest.runner") ("unittest.signals") ("unittest.async_case"))) ((xextra)) ((xblacklist)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) (((xsupport).xcheck__all__)) ((xself)) ((xunittest)))
                xtest_reap_children.write
                  [xself]
                    memory > xpid
                    memory > xmsg
                    memory > xwas_altered
                    memory > xt0
                    memory > xstderr
                    memory > xdeadline
                    memory > xold_stderr
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                        xpid.write ((((xos).xfork)) 0)
                        ((xpid).eq 0).if
                          bogusForceDataize.write ((((xos).x_exit)) (0))
                        xt0.write ((((xtime).xmonotonic)) 0)
                        xdeadline.write (((((xtime).xmonotonic)) 0).add 60.0)
                        xwas_altered.write ((xsupport).xenvironment_altered)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xsupport).xenvironment_altered)) (FALSE))
                            xstderr.write ((((xio).xStringIO)) 0)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    (((((xtime).xmonotonic)) 0).greater (xdeadline)).if
                                      bogusForceDataize.write ((((xself).xfail)) ("timeout"))
                                    xold_stderr.write ((xsys).x__stderr__)
                                    (((unsupported)) 0)
                                      seq
                                        (((unsupported)) (((xsys).x__stderr__)) ((xstderr)))
                                        bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                                      (((unsupported)) (((xsys).x__stderr__)) ((xold_stderr)))
                                    ((xsupport).xenvironment_altered).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xtime).xsleep)) (0.100))
                            xmsg.write ("Warning -- reap_children() reaped child process %s".mod (xpid))
                            bogusForceDataize.write ((((xself).xassertIn)) ((xmsg)) (((((xstderr).xgetvalue)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xsupport).xenvironment_altered)))
                          (((unsupported)) (((xsupport).xenvironment_altered)) ((xwas_altered)))
                        bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                xcheck_options.write
                  [xself xargs xfunc xexpected]
                    memory > xproc
                    memory > xcode
                    memory > xenv
                    memory > xcmd
                    seq > @
                      (((unsupported)) 0)
                        xcode.write "from test.support import {func}; print(repr({func}()))"
                        xcmd.write (((unsupported)) (((xsys).xexecutable)) ((((unsupported)) ((xargs)))) ("-c") ((xcode)))
                        xenv.write (((unsupported)) ((xkey)) ((xvalue)) ((((unsupported)) ((xkey)) ((xvalue)))) ((((((xos).xenviron).xitems)) 0)) ((((((xkey).xstartswith)) ("PYTHON")).not)))
                        xproc.write (((unsupported)) (((xsubprocess).xrun)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xDEVNULL)) (TRUE) ((xenv)))
                        (((unsupported)) ((xexpected)) ("None: is there a None literal in the EO language?")).if
                          xexpected.write (xargs)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xproc).xstdout).xrstrip)) 0)) ((((xrepr)) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (0))
                xtest_args_from_interpreter_flags.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xopts)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("-B"))) ((((unsupported)) ("-s"))) ((((unsupported)) ("-S"))) ((((unsupported)) ("-E"))) ((((unsupported)) ("-v"))) ((((unsupported)) ("-b"))) ((((unsupported)) ("-q"))) ((((unsupported)) ("-I"))) ((((unsupported)) ("-bb"))) ((((unsupported)) ("-vvv"))) ((((unsupported)) ("-Wignore"))) ((((unsupported)) ("-X") ("dev"))) ((((unsupported)) ("-Wignore") ("-X") ("dev"))) ((((unsupported)) ("-X") ("faulthandler"))) ((((unsupported)) ("-X") ("importtime"))) ((((unsupported)) ("-X") ("showalloccount"))) ((((unsupported)) ("-X") ("showrefcount"))) ((((unsupported)) ("-X") ("tracemalloc"))) ((((unsupported)) ("-X") ("tracemalloc=3"))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xopts)))))
                            bogusForceDataize.write ((((xself).xcheck_options)) ((xopts)) ("args_from_interpreter_flags"))
                        bogusForceDataize.write ((((xself).xcheck_options)) ((((unsupported)) ("-I") ("-E") ("-s"))) ("args_from_interpreter_flags") ((((unsupported)) ("-I"))))
                xtest_optim_args_from_interpreter_flags.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xopts)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("-O"))) ((((unsupported)) ("-OO"))) ((((unsupported)) ("-OOOO"))))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xopts)))))
                          bogusForceDataize.write ((((xself).xcheck_options)) ((xopts)) ("optim_args_from_interpreter_flags"))
                xtest_match_test.write
                  [xself]
                    memory > xtest_chdir
                    memory > xid
                    memory > x__init__
                    memory > xtest_access
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xtest_id]
                                seq > @
                                  (((unsupported)) (((xself).xtest_id)) ((xtest_id)))
                            xid.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xtest_id)))
                        xtest_access.write (((xTest)) ("test.test_os.FileTests.test_access"))
                        xtest_chdir.write (((xTest)) ("test.test_os.Win32ErrorTests.test_chdir"))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xsupport)) ("_match_test_func") ("None: is there a None literal in the EO language?"))))
                          seq
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) (((((xtest_access).xid)) 0)))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("test_os"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("test_*"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("filetests"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("FileTests"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("*test_os.*.test_*"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) (((((xtest_access).xid)) 0)) (((((xtest_chdir).xid)) 0)))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ((((unsupported)) ("test_access") ("DONTMATCH"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                        (((unsupported)) (((((xsupport).xswap_attr)) ((xsupport)) ("_match_test_func") ("None: is there a None literal in the EO language?"))))
                          seq
                            (((unsupported)) (((xsupport).xset_match_tests)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) (((((xtest_access).xid)) 0)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("test_os"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("test_*"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("filetests"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("FileTests"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("*test_os.*.test_*"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) (((((xtest_access).xid)) 0)) (((((xtest_chdir).xid)) 0)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                            bogusForceDataize.write ((((xsupport).xset_match_tests)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("test_access") ("DONTMATCH"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xsupport).xmatch_test)) ((xtest_access)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xsupport).xmatch_test)) ((xtest_chdir)))))
                xtest_fd_count.write
                  [xself]
                    memory > xmore
                    memory > xstart
                    memory > xfd
                    seq > @
                      seq
                        xstart.write ((((xsupport).xfd_count)) 0)
                        xfd.write ((((xos).xopen)) ((x__file__)) (((xos).xO_RDONLY)))
                        (((unsupported)) 0)
                          xmore.write ((((xsupport).xfd_count)) 0)
                          bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmore).sub (xstart))) (1))
                xcheck_print_warning.write
                  [xself xmsg xexpected]
                    memory > xstderr
                    memory > xold_stderr
                    seq > @
                      seq
                        xstderr.write ((((xio).xStringIO)) 0)
                        xold_stderr.write ((xsys).x__stderr__)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xsys).x__stderr__)) ((xstderr)))
                            bogusForceDataize.write ((((xsupport).xprint_warning)) ((xmsg)))
                          (((unsupported)) (((xsys).x__stderr__)) ((xold_stderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstderr).xgetvalue)) 0)) ((xexpected)))
                xtest_print_warning.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_print_warning)) ("msg") ("Warning -- msgn"))
                        bogusForceDataize.write ((((xself).xcheck_print_warning)) ("anb") ("Warning -- anWarning -- bn"))
            xtest_main.write
              []
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)) ((xTestSupport)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtests)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)