memory > xevent
memory > xp
memory > xprint
memory > xhasattr
memory > xunittest
memory > xevents
memory > xline
memory > x__name__
memory > xsupport
memory > xsys
memory > xstderr
memory > xreturncode
memory > xargs
memory > xsubprocess
[] > test_audit
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_unraisablehook
        memory > xAUDIT_TESTS_PY
        memory > xrun_python
        memory > xdo_test
        memory > xtest_block_add_hook_baseexception
        memory > xtest_cantrace
        memory > xtest_open
        memory > xtest_excepthook
        memory > xtest_basic
        memory > xtest_mmap
        memory > xtest_pickle
        memory > xtest_gc
        memory > xtest_monkeypatch
        memory > xtest_winreg
        memory > xtest_block_add_hook
        memory > xtest_socket
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((((xhasattr)) ((xsys)) ("addaudithook")).not).or ((((xhasattr)) ((xsys)) ("audit")).not)).if
              (((unsupported)) (((((xunittest).xSkipTest)) ("test only relevant when sys.audit is available"))))
            xAUDIT_TESTS_PY.write ((((xsupport).xfindfile)) ("audit-tests.py"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdo_test.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-X utf8") ((xAUDIT_TESTS_PY)) ((((unsupported)) ((xargs)))))) ("utf-8") (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))) ((xp)))
                          seq
                            bogusForceDataize.write ((((xp).xwait)) 0)
                            bogusForceDataize.write (((((xsys).xstdout).xwritelines)) (((xp).xstdout)))
                            bogusForceDataize.write (((((xsys).xstderr).xwritelines)) (((xp).xstderr)))
                            ((xp).xreturncode).if
                              bogusForceDataize.write ((((xself).xfail)) (((("".xjoin)) (((xp).xstderr)))))
                xrun_python.write
                  [xself]
                    memory > xevents
                    seq > @
                      (((unsupported)) 0)
                        xevents.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-X utf8") ((xAUDIT_TESTS_PY)) ((((unsupported)) ((xargs)))))) ("utf-8") (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))) ((xp)))
                          seq
                            bogusForceDataize.write ((((xp).xwait)) 0)
                            bogusForceDataize.write (((((xsys).xstderr).xwritelines)) (((xp).xstderr)))
                            (((unsupported)) ((((unsupported)) (((xp).xreturncode)) ((((unsupported)) ((((((((xline).xstrip)) 0).xpartition)) (" "))) ((xline)) (((xp).xstdout)))) (((("".xjoin)) (((xp).xstderr)))))))
                xtest_basic.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_basic"))
                xtest_block_add_hook.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_block_add_hook"))
                xtest_block_add_hook_baseexception.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_block_add_hook_baseexception"))
                xtest_pickle.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).ximport_module)) ("pickle"))
                        bogusForceDataize.write ((((xself).xdo_test)) ("test_pickle"))
                xtest_monkeypatch.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_monkeypatch"))
                xtest_open.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_open") (((xsupport).xTESTFN)))
                xtest_cantrace.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_cantrace"))
                xtest_mmap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test)) ("test_mmap"))
                xtest_excepthook.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xreturncode)) ((xevents)) ((xstderr)))) (((((xself).xrun_python)) ("test_excepthook"))))
                        ((xreturncode).not).if
                          bogusForceDataize.write ((((xself).xfail)) ("Expected fatal exceptionn{stderr}"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ((((unsupported)) ("sys.excepthook") (" ") ("RuntimeError('fatal-error')"))))) ((xevents)))
                xtest_unraisablehook.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xreturncode)) ((xevents)) ((xstderr)))) (((((xself).xrun_python)) ("test_unraisablehook"))))
                        (xreturncode).if
                          bogusForceDataize.write ((((xself).xfail)) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (0))) (0))) ("sys.unraisablehook"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (0))) (2))) ("RuntimeError('nonfatal-error') Exception ignored for audit hook test"))
                xtest_winreg.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).ximport_module)) ("winreg"))
                        (((unsupported)) ((((unsupported)) ((xreturncode)) ((xevents)) ((xstderr)))) (((((xself).xrun_python)) ("test_winreg"))))
                        (xreturncode).if
                          bogusForceDataize.write ((((xself).xfail)) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (0))) (0))) ("winreg.OpenKey"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (1))) (0))) ("winreg.OpenKey/result"))
                        xexpected.write (((unsupported)) ((((unsupported)) ((xevents)) (1))) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ("winreg.EnumKey") (" ") ("{expected} 0"))) ((((unsupported)) ((xevents)) (2))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ("winreg.EnumKey") (" ") ("{expected} 10000"))) ((((unsupported)) ((xevents)) (3))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((((unsupported)) ("winreg.PyHKEY.Detach") (" ") ((xexpected)))) ((((unsupported)) ((xevents)) (4))))
                xtest_socket.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).ximport_module)) ("socket"))
                        (((unsupported)) ((((unsupported)) ((xreturncode)) ((xevents)) ((xstderr)))) (((((xself).xrun_python)) ("test_socket"))))
                        (xreturncode).if
                          bogusForceDataize.write ((((xself).xfail)) ((xstderr)))
                        ((xsupport).xverbose).if
                          (((unsupported)) ((xprint)) ((((unsupported)) ((xevents)))) ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (0))) (0))) ("socket.gethostname"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (1))) (0))) ("socket.__new__"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevents)) (2))) (0))) ("socket.bind"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((unsupported)) ((((unsupported)) ((xevents)) (2))) (2)).xendswith)) ("('127.0.0.1', 8080)"))))
                xtest_gc.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xreturncode)) ((xevents)) ((xstderr)))) (((((xself).xrun_python)) ("test_gc"))))
                        (xreturncode).if
                          bogusForceDataize.write ((((xself).xfail)) ((xstderr)))
                        ((xsupport).xverbose).if
                          (((unsupported)) ((xprint)) ((((unsupported)) ((xevents)))) ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevent)) (0))) ((xevent)) ((xevents)))) ((((unsupported)) ("gc.get_objects") ("gc.get_referrers") ("gc.get_referents"))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)