memory > xk
memory > xcheck_warnings
memory > xBaseDelocalizeTest
memory > xFrFRCookedTest
memory > xValueError
memory > xBaseFormattingTest
memory > xformat_opts
memory > xverbose
memory > xalias
memory > xprint
memory > xtloc
memory > xsys
memory > xEnUSNumberFormatting
memory > xCCookedTest
memory > xunittest
memory > xTestCollation
memory > xobject
memory > xBaseCookedTest
memory > xEnUSCookedTest
memory > xlocalename
memory > xBaseLocalizedTest
memory > x_locale
memory > xint
memory > xhasattr
memory > xcodecs
memory > xDeprecationWarning
memory > xlocale
memory > xos
memory > xis_android
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_locale
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_hyphenated_encoding
        memory > xtest_c
        memory > xtest_strcoll
        memory > xtest_devanagari_modifier
        memory > xtest_defaults_UTF8
        memory > xtest_strcoll_3303
        memory > xtest_percent_escape
        memory > x_test_format
        memory > x_test_format_string
        memory > xtest_mapping
        memory > xtest_atoi
        memory > xtest_grouping_and_padding
        memory > xtest_setlocale_category
        memory > xtest_delocalize
        memory > xtest_integer_grouping
        memory > xtest_decimal_point
        memory > xtest_currency
        memory > xtest_complex_formatting
        memory > xtest_simple
        memory > xcheck
        memory > xtest_latin_modifier
        memory > xtest_strxfrm_with_diacritic
        memory > xlocale_type
        memory > xtest_locale_alias
        memory > xtest_valencia_modifier
        memory > xsetUp
        memory > xsetUpClass
        memory > xtest_euc_encoding
        memory > xtest_onlyOnePattern
        memory > xtest_format_deprecation
        memory > xtest_padding
        memory > x_test_formatfunc
        memory > xtest_invalid_iterable_in_localetuple
        memory > xtest_integer_grouping_and_padding
        memory > xtest_japanese
        memory > xtest_getpreferredencoding
        memory > x_test_currency
        memory > xtest_getsetlocale_issue1813
        memory > xtest_english
        memory > xtest_euro_modifier
        memory > xtest_strcoll_with_diacritic
        memory > xtest_atof
        memory > xtest_grouping
        memory > xtest_strxfrm
        memory > x_test_atof
        memory > xtest_empty
        memory > xtearDown
        memory > xtest_invalid_locale_format_in_localetuple
        memory > x_test_delocalize
        memory > x_test_atoi
        memory > xcooked_values
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    memory > xtlocs
                    memory > xoldlocale
                    seq > @
                      (((unsupported)) 0)
                        (((xsys).xplatform).eq "darwin").if
                          seq
                            (((unsupported)) 0)
                            xtlocs.write (((unsupported)) ("en_US.UTF-8") ("en_US.ISO8859-1") ("en_US"))
                            ((((xint)) ((((unsupported)) (((((((((xos).xuname)) 0).xrelease).xsplit)) ("."))) (0)))).less 10).if
                              (((unsupported)) (((((xunittest).xSkipTest)) ("Locale support on MacOSX is minimal"))))
                          (((((xsys).xplatform).xstartswith)) ("win")).if
                            xtlocs.write (((unsupported)) ("En") ("English"))
                            xtlocs.write (((unsupported)) ("en_US.UTF-8") ("en_US.ISO8859-1") ("en_US.US-ASCII") ("en_US"))
                        (((unsupported)) 0)
                          seq
                            xoldlocale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_NUMERIC)))
                            (((unsupported)) ((xtloc)) ((xtlocs)))
                              seq
                                (((unsupported)) (((xlocale).xError)))
                                  bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_NUMERIC)) ((xtloc)))
                                  (((unsupported)) 0)
                                (((unsupported)) 0)
                              (((unsupported)) (((((xunittest).xSkipTest)) (("Test locale not supported (tried %s)".mod (((", ".xjoin)) ((xtlocs))))))))
                            (((unsupported)) (((xcls).xenUS_locale)) ((xtloc)))
                          bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_NUMERIC)) ((xoldlocale)))
                xsetUp.write
                  [xself]
                    memory > xoldlocale
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)) (((xself).xlocale_type)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xself).xlocale_type)) ((xoldlocale)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xself).xlocale_type)) (((xself).xenUS_locale)))
                        (xverbose).if
                          (((unsupported)) ((xprint)) (("testing with %r...".mod ((xself).xenUS_locale))) (" ") (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xlocale).x_override_localeconv)) (((xself).xcooked_values)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xlocale).x_override_localeconv)) ((((unsupported)) 0)))
            (((unsupported)) ((xBaseCookedTest)))
              xcooked_values.write (((unsupported)) ("currency_symbol") ("") ("decimal_point") (".") ("frac_digits") (127) ("grouping") ((((unsupported)) 0)) ("int_curr_symbol") ("") ("int_frac_digits") (127) ("mon_decimal_point") ("") ("mon_grouping") ((((unsupported)) 0)) ("mon_thousands_sep") ("") ("n_cs_precedes") (127) ("n_sep_by_space") (127) ("n_sign_posn") (127) ("negative_sign") ("") ("p_cs_precedes") (127) ("p_sep_by_space") (127) ("p_sign_posn") (127) ("positive_sign") ("") ("thousands_sep") (""))
            (((unsupported)) ((xBaseCookedTest)))
              xcooked_values.write (((unsupported)) ("currency_symbol") ("$") ("decimal_point") (".") ("frac_digits") (2) ("grouping") ((((unsupported)) (3) (3) (0))) ("int_curr_symbol") ("USD ") ("int_frac_digits") (2) ("mon_decimal_point") (".") ("mon_grouping") ((((unsupported)) (3) (3) (0))) ("mon_thousands_sep") (",") ("n_cs_precedes") (1) ("n_sep_by_space") (0) ("n_sign_posn") (1) ("negative_sign") ("-") ("p_cs_precedes") (1) ("p_sep_by_space") (0) ("p_sign_posn") (1) ("positive_sign") ("") ("thousands_sep") (","))
            (((unsupported)) ((xBaseCookedTest)))
              xcooked_values.write (((unsupported)) ("currency_symbol") ("u20ac") ("decimal_point") (",") ("frac_digits") (2) ("grouping") ((((unsupported)) (3) (3) (0))) ("int_curr_symbol") ("EUR ") ("int_frac_digits") (2) ("mon_decimal_point") (",") ("mon_grouping") ((((unsupported)) (3) (3) (0))) ("mon_thousands_sep") (" ") ("n_cs_precedes") (0) ("n_sep_by_space") (1) ("n_sign_posn") (1) ("negative_sign") ("-") ("p_cs_precedes") (0) ("p_sep_by_space") (1) ("p_sign_posn") (1) ("positive_sign") ("") ("thousands_sep") (" "))
            (((unsupported)) ((xobject)))
              seq
                x_test_formatfunc.write
                  [xself xformat xvalue xout xfunc]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfunc)) ((xformat)) ((xvalue)) ((((unsupported)) ((xformat_opts)))))) ((xout)))
                x_test_format.write
                  [xself xformat xvalue xout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) (((xself).x_test_formatfunc)) ((xformat)) ((xvalue)) ((xout)) (((xlocale).xformat)) ((((unsupported)) ((xformat_opts)))))
                x_test_format_string.write
                  [xself xformat xvalue xout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_test_formatfunc)) ((xformat)) ((xvalue)) ((xout)) (((xlocale).xformat_string)) ((((unsupported)) ((xformat_opts)))))
                x_test_currency.write
                  [xself xvalue xout]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xcurrency)) ((xvalue)) ((((unsupported)) ((xformat_opts)))))) ((xout)))
            (((unsupported)) ((xBaseFormattingTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xsep)) ((((unsupported)) (((((xlocale).xlocaleconv)) 0)) ("thousands_sep"))))
                xtest_grouping.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%f") (1024) (1) (("1%s024.000000".mod ((xself).xsep))))
                        (((unsupported)) (((xself).x_test_format)) ("%f") (102) (1) ("102.000000"))
                        (((unsupported)) (((xself).x_test_format)) ("%f") ((42.neg)) (1) ("-42.000000"))
                        (((unsupported)) (((xself).x_test_format)) ("%+f") ((42.neg)) (1) ("-42.000000"))
                xtest_grouping_and_padding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%20.f") ((42.neg)) (1) (((("-42".xrjust)) (20))))
                        ((xself).xsep).if
                          seq
                            (((unsupported)) (((xself).x_test_format)) ("%+10.f") ((4200.neg)) (1) ((((("-4%s200".mod ((xself).xsep)).xrjust)) (10))))
                            (((unsupported)) (((xself).x_test_format)) ("%-10.f") ((4200.neg)) (1) ((((("-4%s200".mod ((xself).xsep)).xljust)) (10))))
                xtest_integer_grouping.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%d") (4200) (TRUE) (("4%s200".mod ((xself).xsep))))
                        (((unsupported)) (((xself).x_test_format)) ("%+d") (4200) (TRUE) (("+4%s200".mod ((xself).xsep))))
                        (((unsupported)) (((xself).x_test_format)) ("%+d") ((4200.neg)) (TRUE) (("-4%s200".mod ((xself).xsep))))
                xtest_integer_grouping_and_padding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%10d") (4200) (TRUE) ((((("4%s200".mod ((xself).xsep)).xrjust)) (10))))
                        (((unsupported)) (((xself).x_test_format)) ("%-10d") ((4200.neg)) (TRUE) ((((("-4%s200".mod ((xself).xsep)).xljust)) (10))))
                xtest_simple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%f") (1024) (0) ("1024.000000"))
                        (((unsupported)) (((xself).x_test_format)) ("%f") (102) (0) ("102.000000"))
                        (((unsupported)) (((xself).x_test_format)) ("%f") ((42.neg)) (0) ("-42.000000"))
                        (((unsupported)) (((xself).x_test_format)) ("%+f") ((42.neg)) (0) ("-42.000000"))
                xtest_padding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%20.f") ((42.neg)) (0) (((("-42".xrjust)) (20))))
                        (((unsupported)) (((xself).x_test_format)) ("%+10.f") ((4200.neg)) (0) (((("-4200".xrjust)) (10))))
                        (((unsupported)) (((xself).x_test_format)) ("%-10.f") (4200) (0) (((("4200".xljust)) (10))))
                xtest_format_deprecation.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                        (((unsupported)) (((xlocale).xformat)) ("%-10.f") (4200) (TRUE))
                xtest_complex_formatting.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format_string)) ("One million is %i") (1000000) (1) (("One million is 1%s000%s000".mod (((unsupported)) (((xself).xsep)) (((xself).xsep))))))
                        (((unsupported)) (((xself).x_test_format_string)) ("One  million is %i") (1000000) (1) (("One  million is 1%s000%s000".mod (((unsupported)) (((xself).xsep)) (((xself).xsep))))))
                        (((unsupported)) (((xself).x_test_format_string)) (".%f.") (1000.0) (".1000.000000."))
                        ((xself).xsep).if
                          (((unsupported)) (((xself).x_test_format_string)) ("-->  %10.2f") (4200) (1) (("-->  ".add (((("4%s200.00".mod ((xself).xsep)).xrjust)) (10)))))
                        (((unsupported)) (((xself).x_test_format_string)) ("%10.*f") ((((unsupported)) (2) (1000))) (0) (((("1000.00".xrjust)) (10))))
                        ((xself).xsep).if
                          (((unsupported)) (((xself).x_test_format_string)) ("%*.*f") ((((unsupported)) (10) (2) (1000))) (1) ((((("1%s000.00".mod ((xself).xsep)).xrjust)) (10))))
                        ((xself).xsep).if
                          (((unsupported)) (((xself).x_test_format_string)) ("int %i float %.2f str %s") ((((unsupported)) (1000) (1000.0) ("str"))) (1) (("int 1%s000 float 1%s000.00 str str".mod (((unsupported)) (((xself).xsep)) (((xself).xsep))))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_onlyOnePattern.write
                [xself]
                  seq > @
                    (((unsupported)) ((((xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%fn") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%fr") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%frn") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) (" %f") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%fg") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%^g") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xformat)) ("%f%%") ("foo"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_percent_escape.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xformat_string)) ("%f%%") (1.0))) (("%f%%".mod 1.0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xformat_string)) ("%d %f%%d") ((((unsupported)) (1) (1.0))))) (("%d %f%%d".mod (((unsupported)) (1) (1.0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xformat_string)) ("%(foo)s %%d") ((((unsupported)) ("foo") ("bar"))))) (("%(foo)s %%d".mod (((unsupported)) ("foo") ("bar")))))
                xtest_mapping.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xformat_string)) ("%(foo)s bing.") ((((unsupported)) ("foo") ("bar"))))) (("%(foo)s bing.".mod (((unsupported)) ("foo") ("bar")))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xformat_string)) ("%(foo)s") ((((unsupported)) ("foo") ("bar"))))) (("%(foo)s".mod (((unsupported)) ("foo") ("bar")))))
            (((unsupported)) ((xBaseLocalizedTest)) ((xEnUSNumberFormatting)))
              seq
                xlocale_type.write ((xlocale).xLC_NUMERIC)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseLocalizedTest).xsetUp)) ((xself)))
                        bogusForceDataize.write ((((xEnUSNumberFormatting).xsetUp)) ((xself)))
            (((unsupported)) ((xEnUSCookedTest)) ((xEnUSNumberFormatting)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xEnUSCookedTest).xsetUp)) ((xself)))
                        bogusForceDataize.write ((((xEnUSNumberFormatting).xsetUp)) ((xself)))
                xtest_currency.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_currency)) (50000) ("$50000.00"))
                        (((unsupported)) (((xself).x_test_currency)) (50000) ("$50,000.00") (TRUE))
                        (((unsupported)) (((xself).x_test_currency)) (50000) ("USD 50,000.00") (TRUE) (TRUE))
            (((unsupported)) ((xCCookedTest)) ((xBaseFormattingTest)))
              seq
                xtest_grouping.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test_format)) ("%.2f") (12345.67) (TRUE) ("12345.67"))
                xtest_grouping_and_padding.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test_format)) ("%9.2f") (12345.67) (TRUE) (" 12345.67"))
            (((unsupported)) ((xFrFRCookedTest)) ((xBaseFormattingTest)))
              seq
                xtest_decimal_point.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test_format)) ("%.2f") (12345.67) ("12345,67"))
                xtest_grouping.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%.2f") (345.67) (TRUE) ("345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%.2f") (12345.67) (TRUE) ("12 345,67"))
                xtest_grouping_and_padding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%6.2f") (345.67) (TRUE) ("345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%7.2f") (345.67) (TRUE) (" 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%8.2f") (12345.67) (TRUE) ("12 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%9.2f") (12345.67) (TRUE) ("12 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%10.2f") (12345.67) (TRUE) (" 12 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%-6.2f") (345.67) (TRUE) ("345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%-7.2f") (345.67) (TRUE) ("345,67 "))
                        (((unsupported)) (((xself).x_test_format)) ("%-8.2f") (12345.67) (TRUE) ("12 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%-9.2f") (12345.67) (TRUE) ("12 345,67"))
                        (((unsupported)) (((xself).x_test_format)) ("%-10.2f") (12345.67) (TRUE) ("12 345,67 "))
                xtest_integer_grouping.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%d") (200) (TRUE) ("200"))
                        (((unsupported)) (((xself).x_test_format)) ("%d") (4200) (TRUE) ("4 200"))
                xtest_integer_grouping_and_padding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_test_format)) ("%4d") (4200) (TRUE) ("4 200"))
                        (((unsupported)) (((xself).x_test_format)) ("%5d") (4200) (TRUE) ("4 200"))
                        (((unsupported)) (((xself).x_test_format)) ("%10d") (4200) (TRUE) (((("4 200".xrjust)) (10))))
                        (((unsupported)) (((xself).x_test_format)) ("%-4d") (4200) (TRUE) ("4 200"))
                        (((unsupported)) (((xself).x_test_format)) ("%-5d") (4200) (TRUE) ("4 200"))
                        (((unsupported)) (((xself).x_test_format)) ("%-10d") (4200) (TRUE) (((("4 200".xljust)) (10))))
                xtest_currency.write
                  [xself]
                    memory > xeuro
                    seq > @
                      seq
                        xeuro.write "u20ac"
                        bogusForceDataize.write ((((xself).x_test_currency)) (50000) (("50000,00 ".add (xeuro))))
                        (((unsupported)) (((xself).x_test_currency)) (50000) (("50 000,00 ".add (xeuro))) (TRUE))
                        (((unsupported)) (((xself).x_test_currency)) (50000) ("50 000,00 EUR ") (TRUE) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_strcoll.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xlocale).xstrcoll)) ("a") ("b"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xstrcoll)) ("a") ("a"))) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((xlocale).xstrcoll)) ("b") ("a"))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xstrcoll)) ("a0") ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xstrcoll)) ("a") ("a0"))
                xtest_strxfrm.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xlocale).xstrxfrm)) ("a"))) (((((xlocale).xstrxfrm)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xlocale).xstrxfrm)) ("a0"))
            (((unsupported)) ((xBaseLocalizedTest)) ((xTestCollation)))
              seq
                xlocale_type.write ((xlocale).xLC_ALL)
                xsetUp.write
                  [xself]
                    memory > xenc
                    seq > @
                      seq
                        xenc.write (((((xcodecs).xlookup)) ((((((xlocale).xgetpreferredencoding)) (FALSE)).or "ascii"))).xname)
                        (((unsupported)) ((xenc)) ((((unsupported)) ("utf-8") ("iso8859-1") ("cp1252")))).if
                          (((unsupported)) (((((xunittest).xSkipTest)) ("encoding not suitable"))))
                        (((xenc).neq "iso8859-1").and (((((xsys).xplatform).eq "darwin").or (xis_android)).or (((((xsys).xplatform).xstartswith)) ("freebsd")))).if
                          (((unsupported)) (((((xunittest).xSkipTest)) ("wcscoll/wcsxfrm have known bugs"))))
                        bogusForceDataize.write ((((xBaseLocalizedTest).xsetUp)) ((xself)))
                xtest_strcoll_with_diacritic.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xlocale).xstrcoll)) ("à") ("b"))) (0))
                xtest_strxfrm_with_diacritic.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xlocale).xstrxfrm)) ("à"))) (((((xlocale).xstrxfrm)) ("b"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck.write
                  [xself xlocalename xexpected]
                    seq > @
                      (((unsupported)) (((xself).xassertEqual)) (((((xlocale).xnormalize)) ((xlocalename)))) ((xexpected)) ((xlocalename)))
                xtest_locale_alias.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xlocalename)) ((xalias)))) ((((((xlocale).xlocale_alias).xitems)) 0)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((((unsupported)) ((xlocalename)) ((xalias)))))))
                          bogusForceDataize.write ((((xself).xcheck)) ((xlocalename)) ((xalias)))
                xtest_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)) ("") (""))
                xtest_c.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("c") ("C"))
                        bogusForceDataize.write ((((xself).xcheck)) ("posix") ("C"))
                xtest_english.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("en") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("EN") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en.iso88591") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_us") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_GB") ("en_GB.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.UTF-8") ("en_US.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.utf8") ("en_US.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US:UTF-8") ("en_US.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.ISO8859-1") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.US-ASCII") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.88591") ("en_US.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.885915") ("en_US.ISO8859-15"))
                        bogusForceDataize.write ((((xself).xcheck)) ("english") ("en_EN.ISO8859-1"))
                        bogusForceDataize.write ((((xself).xcheck)) ("english_uk.ascii") ("en_GB.ISO8859-1"))
                xtest_hyphenated_encoding.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("az_AZ.iso88599e") ("az_AZ.ISO8859-9E"))
                        bogusForceDataize.write ((((xself).xcheck)) ("az_AZ.ISO8859-9E") ("az_AZ.ISO8859-9E"))
                        bogusForceDataize.write ((((xself).xcheck)) ("tt_RU.koi8c") ("tt_RU.KOI8-C"))
                        bogusForceDataize.write ((((xself).xcheck)) ("tt_RU.KOI8-C") ("tt_RU.KOI8-C"))
                        bogusForceDataize.write ((((xself).xcheck)) ("lo_LA.cp1133") ("lo_LA.IBM-CP1133"))
                        bogusForceDataize.write ((((xself).xcheck)) ("lo_LA.ibmcp1133") ("lo_LA.IBM-CP1133"))
                        bogusForceDataize.write ((((xself).xcheck)) ("lo_LA.IBM-CP1133") ("lo_LA.IBM-CP1133"))
                        bogusForceDataize.write ((((xself).xcheck)) ("uk_ua.microsoftcp1251") ("uk_UA.CP1251"))
                        bogusForceDataize.write ((((xself).xcheck)) ("uk_ua.microsoft-cp1251") ("uk_UA.CP1251"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ka_ge.georgianacademy") ("ka_GE.GEORGIAN-ACADEMY"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ka_GE.GEORGIAN-ACADEMY") ("ka_GE.GEORGIAN-ACADEMY"))
                        bogusForceDataize.write ((((xself).xcheck)) ("cs_CZ.iso88592") ("cs_CZ.ISO8859-2"))
                        bogusForceDataize.write ((((xself).xcheck)) ("cs_CZ.ISO8859-2") ("cs_CZ.ISO8859-2"))
                xtest_euro_modifier.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("de_DE@euro") ("de_DE.ISO8859-15"))
                        bogusForceDataize.write ((((xself).xcheck)) ("en_US.ISO8859-15@euro") ("en_US.ISO8859-15"))
                        bogusForceDataize.write ((((xself).xcheck)) ("de_DE.utf8@euro") ("de_DE.UTF-8"))
                xtest_latin_modifier.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("be_BY.UTF-8@latin") ("be_BY.UTF-8@latin"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sr_RS.UTF-8@latin") ("sr_RS.UTF-8@latin"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sr_RS.UTF-8@latn") ("sr_RS.UTF-8@latin"))
                xtest_valencia_modifier.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("ca_ES.UTF-8@valencia") ("ca_ES.UTF-8@valencia"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ca_ES@valencia") ("ca_ES.UTF-8@valencia"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ca@valencia") ("ca_ES.ISO8859-1@valencia"))
                xtest_devanagari_modifier.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("ks_IN.UTF-8@devanagari") ("ks_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ks_IN@devanagari") ("ks_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ks@devanagari") ("ks_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ks_IN.UTF-8") ("ks_IN.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ks_IN") ("ks_IN.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ks") ("ks_IN.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd_IN.UTF-8@devanagari") ("sd_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd_IN@devanagari") ("sd_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd@devanagari") ("sd_IN.UTF-8@devanagari"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd_IN.UTF-8") ("sd_IN.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd_IN") ("sd_IN.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("sd") ("sd_IN.UTF-8"))
                xtest_euc_encoding.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.euc") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.eucjp") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ko_kr.euc") ("ko_KR.eucKR"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ko_kr.euckr") ("ko_KR.eucKR"))
                        bogusForceDataize.write ((((xself).xcheck)) ("zh_cn.euc") ("zh_CN.eucCN"))
                        bogusForceDataize.write ((((xself).xcheck)) ("zh_tw.euc") ("zh_TW.eucTW"))
                        bogusForceDataize.write ((((xself).xcheck)) ("zh_tw.euctw") ("zh_TW.eucTW"))
                xtest_japanese.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("ja") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja.jis") ("ja_JP.JIS7"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja.sjis") ("ja_JP.SJIS"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.ajec") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.euc") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.eucjp") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.iso-2022-jp") ("ja_JP.JIS7"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.iso2022jp") ("ja_JP.JIS7"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.jis") ("ja_JP.JIS7"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.jis7") ("ja_JP.JIS7"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.mscode") ("ja_JP.SJIS"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.pck") ("ja_JP.SJIS"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.sjis") ("ja_JP.SJIS"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.ujis") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("ja_jp.utf8") ("ja_JP.UTF-8"))
                        bogusForceDataize.write ((((xself).xcheck)) ("japan") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("japanese") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("japanese-euc") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("japanese.euc") ("ja_JP.eucJP"))
                        bogusForceDataize.write ((((xself).xcheck)) ("japanese.sjis") ("ja_JP.SJIS"))
                        bogusForceDataize.write ((((xself).xcheck)) ("jp_jp") ("ja_JP.eucJP"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_defaults_UTF8.write
                  [xself]
                    memory > xorig_getlocale
                    memory > xorig_env
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).x_parse_localename)) ("UTF-8"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("UTF-8"))))
                        (((xhasattr)) ((x_locale)) ("_getdefaultlocale")).if
                          seq
                            xorig_getlocale.write ((x_locale).x_getdefaultlocale)
                            (((unsupported)) ((((unsupported)) (((x_locale).x_getdefaultlocale)))))
                          xorig_getlocale.write "None: is there a None literal in the EO language?"
                        xorig_env.write (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xkey)) ((((unsupported)) ("LC_ALL") ("LC_CTYPE") ("LANG") ("LANGUAGE"))))
                              (((unsupported)) ((xkey)) (((xos).xenviron))).if
                                seq
                                  (((unsupported)) ((((unsupported)) ((xorig_env)) ((xkey)))) ((((unsupported)) (((xos).xenviron)) ((xkey)))))
                                  (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xkey)))))))
                            (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("LC_CTYPE"))) ("UTF-8"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xgetdefaultlocale)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("UTF-8"))))
                          seq
                            (((unsupported)) ((xk)) ((xorig_env)))
                              (((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xk)))) ((((unsupported)) ((xorig_env)) ((xk)))))
                            (((unsupported)) ("LC_CTYPE") ((xorig_env))).if
                              (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ("LC_CTYPE"))))))
                            (((unsupported)) ((xorig_getlocale)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)) (((x_locale).x_getdefaultlocale)) ((xorig_getlocale)))
                xtest_getpreferredencoding.write
                  [xself]
                    memory > xenc
                    seq > @
                      seq
                        xenc.write ((((xlocale).xgetpreferredencoding)) 0)
                        (xenc).if
                          bogusForceDataize.write ((((xcodecs).xlookup)) ((xenc)))
                xtest_strcoll_3303.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlocale).xstrcoll)) ("a") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xlocale).xstrcoll)) ("a") ("None: is there a None literal in the EO language?"))
                xtest_setlocale_category.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_TIME)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_COLLATE)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_MONETARY)))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_NUMERIC)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xlocale).xError)) (((xlocale).xsetlocale)) (12345))
                xtest_getsetlocale_issue1813.write
                  [xself]
                    memory > xoldlocale
                    memory > xloc
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)) (((xlocale).xError)))
                          bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("tr_TR"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("test needs Turkish locale"))
                        xloc.write ((((xlocale).xgetlocale)) (((xlocale).xLC_CTYPE)))
                        (xverbose).if
                          (((unsupported)) ((xprint)) (("testing with %a".mod (((unsupported)) ((xloc))))) (" ") (TRUE))
                        (((unsupported)) (((xlocale).xError)))
                          bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xloc)))
                          bogusForceDataize.write ((((xself).xskipTest)) ("setlocale(LC_CTYPE, {loc!r}) failed: {exc!r}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xloc)) (((((xlocale).xgetlocale)) (((xlocale).xLC_CTYPE)))))
                xtest_invalid_locale_format_in_localetuple.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)) ("fi_FI"))
                xtest_invalid_iterable_in_localetuple.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_ALL)) ((((unsupported)) ("not") ("valid"))))
            (((unsupported)) ((xBaseLocalizedTest)))
              seq
                x_test_delocalize.write
                  [xself xvalue xout]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xdelocalize)) ((xvalue)))) ((xout)))
                x_test_atof.write
                  [xself xvalue xout]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xatof)) ((xvalue)))) ((xout)))
                x_test_atoi.write
                  [xself xvalue xout]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xlocale).xatoi)) ((xvalue)))) ((xout)))
            (((unsupported)) ((xEnUSCookedTest)) ((xBaseDelocalizeTest)))
              seq
                xtest_delocalize.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_delocalize)) ("50000.00") ("50000.00"))
                        bogusForceDataize.write ((((xself).x_test_delocalize)) ("50,000.00") ("50000.00"))
                xtest_atof.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_atof)) ("50000.00") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_test_atof)) ("50,000.00") ((((unsupported)) 0)))
                xtest_atoi.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_atoi)) ("50000") (50000))
                        bogusForceDataize.write ((((xself).x_test_atoi)) ("50,000") (50000))
            (((unsupported)) ((xCCookedTest)) ((xBaseDelocalizeTest)))
              seq
                xtest_delocalize.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_delocalize)) ("50000.00") ("50000.00"))
                xtest_atof.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_atof)) ("50000.00") ((((unsupported)) 0)))
                xtest_atoi.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_atoi)) ("50000") (50000))
            (((unsupported)) ((xFrFRCookedTest)) ((xBaseDelocalizeTest)))
              seq
                xtest_delocalize.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_delocalize)) ("50000,00") ("50000.00"))
                        bogusForceDataize.write ((((xself).x_test_delocalize)) ("50 000,00") ("50000.00"))
                xtest_atof.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_atof)) ("50000,00") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_test_atof)) ("50 000,00") ((((unsupported)) 0)))
                xtest_atoi.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_atoi)) ("50000") (50000))
                        bogusForceDataize.write ((((xself).x_test_atoi)) ("50 000") (50000))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)