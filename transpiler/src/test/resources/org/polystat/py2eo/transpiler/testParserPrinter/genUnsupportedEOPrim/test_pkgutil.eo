memory > xlist
memory > xValueError
memory > xImportlibMigrationTests
memory > xt
memory > xfinal
memory > xzipimport
memory > xtempfile
memory > xopen
memory > xos
memory > xe
memory > xobject
memory > xmoduleinfo
memory > xd
memory > xrun_unittest
memory > xcheck_warnings
memory > xCleanImport
memory > xImportError
memory > xAttributeError
memory > xpkg
memory > xc
memory > ximportlib
memory > xExtendPathTests
memory > xKeyError
memory > xPkgutilPEP302Tests
memory > xbase
memory > xprint
memory > xtype
memory > xf
memory > xw
memory > xPkgutilTests
memory > xspec_from_file_location
memory > xpkgutil
memory > ximporter
memory > xNestedNamespacePackageTest
memory > xfinder
memory > xsys
memory > xsorted
memory > xDeprecationWarning
memory > xshutil
memory > xunittest
memory > xfoo
memory > xlen
memory > xfl
memory > xunload
memory > xzipfile
memory > xTypeError
memory > x__name__
[] > test_pkgutil
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_loader_deprecated
        memory > xtest_find_loader_avoids_emulation
        memory > xtest_iter_importers
        memory > xtest_importer_deprecated
        memory > xtest_walk_packages_raises_on_string_or_bytes_input
        memory > xcreate_init
        memory > xtest_alreadyloaded
        memory > xexec_module
        memory > xtest_get_loader_handles_spec_attribute_none
        memory > xget_data
        memory > xtest_iter_importers_avoids_emulation
        memory > xtest_getdata_filesys
        memory > xtest_get_loader_None_in_sys_modules
        memory > xtest_unreadable_dir_on_syspath
        memory > xtest_getdata_zipfile
        memory > xtest_getdata_pep302
        memory > xtest_simple
        memory > xtest_walkpackages_zipfile
        memory > xtest_main
        memory > xsetUp
        memory > xtest_walkpackages_filesys
        memory > xtest_nested
        memory > xtest_get_loader_avoids_emulation
        memory > xcreate_module
        memory > xtest_mixed_namespace
        memory > xcheck_deprecated
        memory > xtest_get_importer_avoids_emulation
        memory > xtest_get_loader_handles_missing_loader_attribute
        memory > xtest_find_loader_missing_module
        memory > xtearDown
        memory > xfind_spec
        memory > xtest_get_loader_handles_missing_spec_attribute
        memory > xcreate_submodule
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xdirname)) (((((xtempfile).xmkdtemp)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xshutil).xrmtree)) (((xself).xdirname)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) (((xself).xdirname)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                xtest_getdata_filesys.write
                  [xself]
                    memory > xpkg
                    memory > xres1
                    memory > xres2
                    memory > xpackage_dir
                    memory > xf
                    memory > xRESOURCE_DATA
                    seq > @
                      seq
                        xpkg.write "test_getdata_filesys"
                        xRESOURCE_DATA.write "Hello, world!nSecond linernThird line"
                        xpackage_dir.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xpkg)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xpackage_dir)))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpackage_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpackage_dir)) ("res.txt"))) ("wb"))
                        bogusForceDataize.write ((((xf).xwrite)) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xos).xmkdir)) ((((((xos).xpath).xjoin)) ((xpackage_dir)) ("sub"))))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpackage_dir)) ("sub") ("res.txt"))) ("wb"))
                        bogusForceDataize.write ((((xf).xwrite)) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xres1.write ((((xpkgutil).xget_data)) ((xpkg)) ("res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres1)) ((xRESOURCE_DATA)))
                        xres2.write ((((xpkgutil).xget_data)) ((xpkg)) ("sub/res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres2)) ((xRESOURCE_DATA)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xpkg)))))))
                xtest_getdata_zipfile.write
                  [xself]
                    memory > xpkg
                    memory > xres2
                    memory > xRESOURCE_DATA
                    memory > xnames
                    memory > xzip
                    memory > xzip_file
                    memory > xz
                    memory > xres1
                    seq > @
                      seq
                        xzip.write "test_getdata_zipfile.zip"
                        xpkg.write "test_getdata_zipfile"
                        xRESOURCE_DATA.write "Hello, world!nSecond linernThird line"
                        xzip_file.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xzip)))
                        xz.write ((((xzipfile).xZipFile)) ((xzip_file)) ("w"))
                        bogusForceDataize.write ((((xz).xwritestr)) (((xpkg).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((xpkg).add "/res.txt")) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xz).xwritestr)) (((xpkg).add "/sub/res.txt")) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xz).xclose)) 0)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip_file)))
                        xres1.write ((((xpkgutil).xget_data)) ((xpkg)) ("res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres1)) ((xRESOURCE_DATA)))
                        xres2.write ((((xpkgutil).xget_data)) ((xpkg)) ("sub/res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres2)) ((xRESOURCE_DATA)))
                        xnames.write (((unsupported)) 0)
                        (((unsupported)) ((xmoduleinfo)) (((((xpkgutil).xiter_modules)) ((((unsupported)) ((xzip_file)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmoduleinfo)) (((xpkgutil).xModuleInfo)))
                            bogusForceDataize.write ((((xnames).xappend)) (((xmoduleinfo).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnames)) ((((unsupported)) ("test_getdata_zipfile"))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xpkg)))))))
                xtest_unreadable_dir_on_syspath.write
                  [xself]
                    memory > xd
                    memory > xpackage_name
                    seq > @
                      seq
                        xpackage_name.write "unreadable_package"
                        xd.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xpackage_name)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xd)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xrmdir)) ((xd)))
                        (((unsupported)) ((xt)) ((((unsupported)) (((xpkgutil).xwalk_packages)) ((((unsupported)) (((xself).xdirname)))))))
                          bogusForceDataize.write ((((xself).xfail)) ("unexpected package found"))
                xtest_walkpackages_filesys.write
                  [xself]
                    memory > xexpected
                    memory > xpkg1_dir
                    memory > xpkg1
                    memory > xf
                    memory > xpkg2_dir
                    memory > xpkg2
                    memory > xactual
                    seq > @
                      seq
                        xpkg1.write "test_walkpackages_filesys"
                        xpkg1_dir.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xpkg1)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xpkg1_dir)))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg1_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xos).xmkdir)) ((((((xos).xpath).xjoin)) ((xpkg1_dir)) ("sub"))))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg1_dir)) ("sub") ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg1_dir)) ("sub") ("mod.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xpkg2.write "sub"
                        xpkg2_dir.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xpkg2)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xpkg2_dir)))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg2_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xos).xmkdir)) ((((((xos).xpath).xjoin)) ((xpkg2_dir)) ("test_walkpackages_filesys"))))
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg2_dir)) ("test_walkpackages_filesys") ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((xopen)) ((((((xos).xpath).xjoin)) ((xpkg2_dir)) ("test_walkpackages_filesys") ("mod.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                        xexpected.write (((unsupported)) ("sub") ("sub.test_walkpackages_filesys") ("sub.test_walkpackages_filesys.mod") ("test_walkpackages_filesys") ("test_walkpackages_filesys.sub") ("test_walkpackages_filesys.sub.mod"))
                        xactual.write (((unsupported)) ((((unsupported)) ((xe)) (1))) ((xe)) (((((xpkgutil).xwalk_packages)) ((((unsupported)) (((xself).xdirname)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        (((unsupported)) ((xpkg)) ((xexpected)))
                          seq
                            ((((xpkg).xendswith)) ("mod")).if
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xpkg)))))))
                xtest_walkpackages_zipfile.write
                  [xself]
                    memory > xexpected
                    memory > xpkg1
                    memory > xzip
                    memory > xz
                    memory > xzip_file
                    memory > xpkg2
                    memory > xactual
                    seq > @
                      seq
                        unsupported
                        xzip.write "test_walkpackages_zipfile.zip"
                        xpkg1.write "test_walkpackages_zipfile"
                        xpkg2.write "sub"
                        xzip_file.write (((((xos).xpath).xjoin)) (((xself).xdirname)) ((xzip)))
                        xz.write ((((xzipfile).xZipFile)) ((xzip_file)) ("w"))
                        bogusForceDataize.write ((((xz).xwritestr)) (((xpkg2).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((((xpkg2).add "/").add (xpkg1)).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((((xpkg2).add "/").add (xpkg1)).add "/mod.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((xpkg1).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((((xpkg1).add "/").add (xpkg2)).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)) (((((xpkg1).add "/").add (xpkg2)).add "/mod.py")) (""))
                        bogusForceDataize.write ((((xz).xclose)) 0)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xzip_file)))
                        xexpected.write (((unsupported)) ("sub") ("sub.test_walkpackages_zipfile") ("sub.test_walkpackages_zipfile.mod") ("test_walkpackages_zipfile") ("test_walkpackages_zipfile.sub") ("test_walkpackages_zipfile.sub.mod"))
                        xactual.write (((unsupported)) ((((unsupported)) ((xe)) (1))) ((xe)) (((((xpkgutil).xwalk_packages)) ((((unsupported)) ((xzip_file)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((xpkg)) ((xexpected)))
                          seq
                            ((((xpkg).xendswith)) ("mod")).if
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xpkg)))))))
                xtest_walk_packages_raises_on_string_or_bytes_input.write
                  [xself]
                    memory > xbytes_input
                    memory > xstr_input
                    seq > @
                      seq
                        xstr_input.write "test_dir"
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xTypeError)) ((xValueError)))))))
                          bogusForceDataize.write (((xlist)) (((((xpkgutil).xwalk_packages)) ((xstr_input)))))
                        xbytes_input.write "test_dir"
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xTypeError)) ((xValueError)))))))
                          bogusForceDataize.write (((xlist)) (((((xpkgutil).xwalk_packages)) ((xbytes_input)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) ((xobject)))
                  seq
                    xcreate_module.write
                      [xself xspec]
                        seq > @
                          (((unsupported)) ("None: is there a None literal in the EO language?"))
                    xexec_module.write
                      [xself xmod]
                        seq > @
                          (((unsupported)) ((((unsupported)) (((xmod).x__dict__)) ("loads"))) (((((((xmod).x__dict__).xget)) ("loads") (0)).add 1)))
                    xget_data.write
                      [xself xpath]
                        seq > @
                          (((unsupported)) ("Hello, world!"))
                (((unsupported)) ((xobject)))
                  xfind_spec.write
                    [xself xfullname xpath xtarget]
                      memory > xloader
                      seq > @
                        (((unsupported)) 0)
                          xloader.write ((((xPkgutilPEP302Tests).xMyTestLoader)) 0)
                          (((unsupported)) ((((unsupported)) ((xspec_from_file_location)) ((xfullname)) (("<%s>".mod (((xloader).x__class__).x__name__))) ((xloader)) ((((unsupported)) 0)))))
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xsys).xmeta_path).xinsert)) (0) (((((xself).xMyTestImporter)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmeta_path)) (0))))))
                xtest_getdata_pep302.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpkgutil).xget_data)) ("foo") ("dummy"))) ("Hello, world!"))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo"))))))
                xtest_alreadyloaded.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xfoo).xloads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpkgutil).xget_data)) ("foo") ("dummy"))) ("Hello, world!"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xfoo).xloads)) (1))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo"))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcreate_init.write
                  [xself xpkgname]
                    memory > xdirname
                    memory > xpkgdir
                    seq > @
                      seq
                        xdirname.write ((((xtempfile).xmkdtemp)) 0)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((xdirname)))
                        xpkgdir.write (((((xos).xpath).xjoin)) ((xdirname)) ((xpkgname)))
                        bogusForceDataize.write ((((xos).xmkdir)) ((xpkgdir)))
                        (((unsupported)) ((((xopen)) ((((((xos).xpath).xjoin)) ((xpkgdir)) ("__init__.py"))) ("w"))) ((xfl)))
                          bogusForceDataize.write ((((xfl).xwrite)) ("from pkgutil import extend_pathn__path__ = extend_path(__path__, __name__)n"))
                        (((unsupported)) ((xdirname)))
                xcreate_submodule.write
                  [xself xdirname xpkgname xsubmodule_name xvalue]
                    memory > xmodule_name
                    seq > @
                      seq
                        xmodule_name.write (((((xos).xpath).xjoin)) ((xdirname)) ((xpkgname)) (((xsubmodule_name).add ".py")))
                        (((unsupported)) ((((xopen)) ((xmodule_name)) ("w"))) ((xfl)))
                          (((unsupported)) ((xprint)) (((("value={}".xformat)) ((xvalue)))) ((xfl)))
                xtest_simple.write
                  [xself]
                    memory > xpkgname
                    memory > xdirname_0
                    memory > xdirname_1
                    seq > @
                      seq
                        xpkgname.write "foo"
                        xdirname_0.write ((((xself).xcreate_init)) ((xpkgname)))
                        xdirname_1.write ((((xself).xcreate_init)) ((xpkgname)))
                        bogusForceDataize.write ((((xself).xcreate_submodule)) ((xdirname_0)) ((xpkgname)) ("bar") (0))
                        bogusForceDataize.write ((((xself).xcreate_submodule)) ((xdirname_1)) ((xpkgname)) ("baz") (1))
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo).xbar).xvalue)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo).xbaz).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((xfoo).x__path__)))) ((((xsorted)) ((((unsupported)) ((((((xos).xpath).xjoin)) ((xdirname_0)) ((xpkgname)))) ((((((xos).xpath).xjoin)) ((xdirname_1)) ((xpkgname)))))))))
                        bogusForceDataize.write ((((xshutil).xrmtree)) ((xdirname_0)))
                        bogusForceDataize.write ((((xshutil).xrmtree)) ((xdirname_1)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo"))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo.bar"))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo.baz"))))))
                xtest_iter_importers.write
                  [xself]
                    memory > xpkgname
                    memory > xloader
                    memory > xpathitem
                    memory > xspec
                    memory > xdirname
                    memory > xmodname
                    memory > xexpected_importer
                    memory > xget_importer
                    memory > ximporters
                    memory > xfullname
                    memory > xiter_importers
                    seq > @
                      seq
                        xiter_importers.write ((xpkgutil).xiter_importers)
                        xget_importer.write ((xpkgutil).xget_importer)
                        xpkgname.write "spam"
                        xmodname.write "eggs"
                        xdirname.write ((((xself).xcreate_init)) ((xpkgname)))
                        xpathitem.write (((((xos).xpath).xjoin)) ((xdirname)) ((xpkgname)))
                        xfullname.write ((("{}.{}".xformat)) ((xpkgname)) ((xmodname)))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)) ((xfullname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)) ((xpkgname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xcreate_submodule)) ((xdirname)) ((xpkgname)) ((xmodname)) (0))
                            bogusForceDataize.write ((((ximportlib).ximport_module)) ((xfullname)))
                            ximporters.write (((xlist)) ((((xiter_importers)) ((xfullname)))))
                            xexpected_importer.write (((xget_importer)) ((xpathitem)))
                            (((unsupported)) ((xfinder)) ((ximporters)))
                              seq
                                xspec.write ((((xpkgutil).x_get_spec)) ((xfinder)) ((xfullname)))
                                xloader.write ((xspec).xloader)
                                (((unsupported)) ((xAttributeError)))
                                  xloader.write ((xloader).xloader)
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xfinder)) ((((ximportlib).xmachinery).xFileFinder)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xfinder)) ((xexpected_importer)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xloader)) ((((ximportlib).xmachinery).xSourceFileLoader)))
                                bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpkgutil).x_get_spec)) ((xfinder)) ((xpkgname)))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xImportError)))))
                              bogusForceDataize.write (((xlist)) ((((xiter_importers)) ("invalid.module"))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xImportError)))))
                              bogusForceDataize.write (((xlist)) ((((xiter_importers)) (".spam"))))
                          seq
                            bogusForceDataize.write ((((xshutil).xrmtree)) ((xdirname)))
                            (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                            (((unsupported)) ((xKeyError)))
                              seq
                                (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("spam"))))))
                                (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("spam.eggs"))))))
                xtest_mixed_namespace.write
                  [xself]
                    memory > xpkgname
                    memory > xdirname_0
                    memory > xdirname_1
                    seq > @
                      seq
                        xpkgname.write "foo"
                        xdirname_0.write ((((xself).xcreate_init)) ((xpkgname)))
                        xdirname_1.write ((((xself).xcreate_init)) ((xpkgname)))
                        bogusForceDataize.write ((((xself).xcreate_submodule)) ((xdirname_0)) ((xpkgname)) ("bar") (0))
                        bogusForceDataize.write ((((xos).xunlink)) ((((((xos).xpath).xjoin)) ((xdirname_0)) ((xpkgname)) ("__init__.py"))))
                        bogusForceDataize.write ((((xself).xcreate_submodule)) ((xdirname_1)) ((xpkgname)) ("baz") (1))
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo).xbar).xvalue)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfoo).xbaz).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((xfoo).x__path__)))) ((((xsorted)) ((((unsupported)) ((((((xos).xpath).xjoin)) ((xdirname_0)) ((xpkgname)))) ((((((xos).xpath).xjoin)) ((xdirname_1)) ((xpkgname)))))))))
                        bogusForceDataize.write ((((xshutil).xrmtree)) ((xdirname_0)))
                        bogusForceDataize.write ((((xshutil).xrmtree)) ((xdirname_1)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) (0))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo"))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo.bar"))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("foo.baz"))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xbasedir)) (((((xtempfile).xmkdtemp)) 0)))
                        (((unsupported)) (((xself).xold_path)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))) (((xself).xold_path)))
                        bogusForceDataize.write ((((xshutil).xrmtree)) (((xself).xbasedir)))
                xcreate_module.write
                  [xself xname xcontents]
                    memory > xbase_path
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xbase)) ((xfinal)))) (((((xname).xrsplit)) (".") (1))))
                        xbase_path.write (((((xos).xpath).xjoin)) (((xself).xbasedir)) (((((xbase).xreplace)) (".") ((((xos).xpath).xsep)))))
                        (((unsupported)) (((xos).xmakedirs)) ((xbase_path)) (TRUE))
                        (((unsupported)) ((((xopen)) ((((((xos).xpath).xjoin)) ((xbase_path)) (((xfinal).add ".py")))) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ((xcontents)))
                xtest_nested.write
                  [xself]
                    memory > xpkgutil_boilerplate
                    seq > @
                      seq
                        xpkgutil_boilerplate.write "import pkgutil; __path__ = pkgutil.extend_path(__path__, __name__)"
                        bogusForceDataize.write ((((xself).xcreate_module)) ("a.pkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)) ("b.pkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)) ("a.pkg.subpkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)) ("b.pkg.subpkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)) ("a.pkg.subpkg.c") ("c = 1"))
                        bogusForceDataize.write ((((xself).xcreate_module)) ("b.pkg.subpkg.d") ("d = 2"))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((((((xos).xpath).xjoin)) (((xself).xbasedir)) ("a"))))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)) (0) ((((((xos).xpath).xjoin)) (((xself).xbasedir)) ("b"))))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xunload)) ("pkg"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xpkg).x__path__)))) (2))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xunload)) ("pkg.subpkg"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xpkg).xsubpkg).x__path__)))) (2))
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) (2))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xcheck_warnings)) ((((unsupported)) ("This emulation is deprecated, use 'importlib' instead") ((xDeprecationWarning)))))))
                xtest_importer_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xcheck_deprecated)) 0)))
                        bogusForceDataize.write ((((xpkgutil).xImpImporter)) (""))
                xtest_loader_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xcheck_deprecated)) 0)))
                        bogusForceDataize.write ((((xpkgutil).xImpLoader)) ("") ("") ("") (""))
                xtest_get_loader_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xcheck_warnings)) 0)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xget_loader)) ("sys"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xget_loader)) ("os"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xget_loader)) ("test.support"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (0))
                xtest_get_loader_handles_missing_loader_attribute.write
                  [xself]
                    memory > xthis_loader
                    memory > x__loader__
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xthis_loader.write (x__loader__)
                        (((unsupported)) ((((unsupported)) ((x__loader__)))))
                        (((unsupported)) 0)
                          (((unsupported)) ((((xcheck_warnings)) 0)) ((xw)))
                            seq
                              bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xget_loader)) ((x__name__)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (0))
                          x__loader__.write (xthis_loader)
                xtest_get_loader_handles_missing_spec_attribute.write
                  [xself]
                    memory > xname
                    memory > xloader
                    memory > xmod
                    seq > @
                      seq
                        xname.write "spam"
                        xmod.write (((((xtype)) ((xsys)))) ((xname)))
                        (((unsupported)) ((((unsupported)) (((xmod).x__spec__)))))
                        (((unsupported)) ((((xCleanImport)) ((xname)))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xmod)))
                            xloader.write ((((xpkgutil).xget_loader)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xloader)))
                xtest_get_loader_handles_spec_attribute_none.write
                  [xself]
                    memory > xname
                    memory > xloader
                    memory > xmod
                    seq > @
                      seq
                        xname.write "spam"
                        xmod.write (((((xtype)) ((xsys)))) ((xname)))
                        (((unsupported)) (((xmod).x__spec__)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((xCleanImport)) ((xname)))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xmod)))
                            xloader.write ((((xpkgutil).xget_loader)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xloader)))
                xtest_get_loader_None_in_sys_modules.write
                  [xself]
                    memory > xname
                    memory > xloader
                    seq > @
                      seq
                        xname.write "totally bogus"
                        (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          xloader.write ((((xpkgutil).xget_loader)) ((xname)))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xloader)))
                xtest_find_loader_missing_module.write
                  [xself]
                    memory > xname
                    memory > xloader
                    seq > @
                      seq
                        xname.write "totally bogus"
                        xloader.write ((((xpkgutil).xfind_loader)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((xloader)))
                xtest_find_loader_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xcheck_warnings)) 0)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xfind_loader)) ("sys"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xfind_loader)) ("os"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)) (((((xpkgutil).xfind_loader)) ("test.support"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (0))
                xtest_get_importer_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xcheck_warnings)) 0)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpkgutil).xget_importer)) ("*??"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (0))
                xtest_iter_importers_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xcheck_warnings)) 0)) ((xw)))
                        seq
                          (((unsupported)) ((ximporter)) (((((xpkgutil).xiter_importers)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (0))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write (((xrun_unittest)) ((xPkgutilTests)) ((xPkgutilPEP302Tests)) ((xExtendPathTests)) ((xNestedNamespacePackageTest)) ((xImportlibMigrationTests)))
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    bogusForceDataize.write (((((xzipimport).x_zip_directory_cache).xclear)) 0)
                    bogusForceDataize.write ((((ximportlib).xinvalidate_caches)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)