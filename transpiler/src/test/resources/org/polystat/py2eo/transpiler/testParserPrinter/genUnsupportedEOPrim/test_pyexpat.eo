memory > xAttributeError
memory > xentityName
memory > xrange
memory > xsystemId
memory > xsys
memory > xbool
memory > xgetattr
memory > xmap
memory > xcm
memory > xpublicId
memory > xRuntimeError
memory > xBytesIO
memory > xsysId
memory > xValueError
memory > xExternalOutputter
memory > xstr
memory > xcontext
memory > xerrors
memory > xentry
memory > xbase
memory > xpubid
memory > xrepr
memory > xException
memory > xOverflowError
memory > xx
memory > xi
memory > xSpecificException
memory > xargs
memory > xos
memory > xtraceback
memory > xoperation
memory > xexpected_operation
memory > xsortdict
memory > xe
memory > xsetattr
memory > xname
memory > xzip
memory > xunittest
memory > xsysid
memory > xsysconfig
memory > xpubId
memory > xlen
memory > xnotationName
memory > xTypeError
memory > xexpat
memory > x__name__
[] > test_pyexpat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xCharacterDataHandler
        memory > xtest
        memory > xsetUp
        memory > xStartElementHandler
        memory > xtest_buffer_text
        memory > xtest_specified_attributes
        memory > xtest_issue9402
        memory > xUnparsedEntityDeclHandler
        memory > xtest_change_size_1
        memory > xtest_1025_bytes
        memory > xEndNamespaceDeclHandler
        memory > xNotStandaloneHandler
        memory > xhandler_names
        memory > xtest2
        memory > xdata
        memory > xStartNamespaceDeclHandler
        memory > xProcessingInstructionHandler
        memory > xtest1
        memory > xtest_ignore_use_foreign_dtd
        memory > xCommentHandler
        memory > xtest_parse_str
        memory > xDefaultHandler
        memory > xtest3
        memory > xtest_parse_file
        memory > xStartCdataSectionHandler
        memory > xtest_disabling_buffer
        memory > xtest_unchanged_size
        memory > xcheck
        memory > xtest6
        memory > x_verify_parse_output
        memory > xtest_expaterror
        memory > xcheck_traceback_entry
        memory > xDefaultHandlerExpand
        memory > xSkippedEntityHandler
        memory > xStartDoctypeDeclHandler
        memory > xNotationDeclHandler
        memory > xcheck_pos
        memory > xtest_parse_again
        memory > xtest_invalid_attributes
        memory > xtest_wrong_size
        memory > xExternalEntityRefHandler
        memory > xtest_ordered_attributes
        memory > xtest_use_foreign_dtd
        memory > xtest_codes
        memory > xtest5
        memory > xEndElementHandler
        memory > xElementDeclHandler
        memory > xtest_legal
        memory > xtest_exception
        memory > xtest_buffering_enabled
        memory > xsmall_buffer_test
        memory > xtest_zero_length
        memory > x__init__
        memory > xtest_1000_bytes
        memory > x_hookup_callbacks
        memory > xtest_illegal
        memory > xEntityDeclHandler
        memory > xtest_default_to_disabled
        memory > xtest7
        memory > xEndCdataSectionHandler
        memory > xEndDoctypeDeclHandler
        memory > xtest_parse_only_xml_data
        memory > xtest4
        memory > xsetHandlers
        memory > xAttlistDeclHandler
        memory > xXmlDeclHandler
        memory > xtest_namespace_prefixes
        memory > xtest_change_size_2
        memory > xtest_parse_bytes
        memory > xcounting_handler
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xparser)) ((((unsupported)) (((xexpat).xParserCreate)) ("!"))))
                xtest_buffer_text.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xbuffer_text)) (FALSE))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) (2) (0))))
                          seq
                            (((unsupported)) ((((xself).xparser).xbuffer_text)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xbuffer_text)) ((((xbool)) ((xx)))))
                xtest_namespace_prefixes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xnamespace_prefixes)) (FALSE))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) (2) (0))))
                          seq
                            (((unsupported)) ((((xself).xparser).xnamespace_prefixes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xnamespace_prefixes)) ((((xbool)) ((xx)))))
                xtest_ordered_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xordered_attributes)) (FALSE))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) (2) (0))))
                          seq
                            (((unsupported)) ((((xself).xparser).xordered_attributes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xordered_attributes)) ((((xbool)) ((xx)))))
                xtest_specified_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xspecified_attributes)) (FALSE))
                        (((unsupported)) ((xx)) ((((unsupported)) (0) (1) (2) (0))))
                          seq
                            (((unsupported)) ((((xself).xparser).xspecified_attributes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xself).xparser).xspecified_attributes)) ((((xbool)) ((xx)))))
                xtest_invalid_attributes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((xself).xparser).xreturns_unicode)) (1))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) (((xself).xparser)) ((((xrange)) (15))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xparser).x__setattr__)) ((((xrange)) (15))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgetattr)) (((xself).xparser)) ((((xrange)) (15))))
            xdata.write (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)) (((xself).xout)) ((((unsupported)) 0)))
                    xStartElementHandler.write
                      [xself xname xattrs]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (((("Start element: ".add (((xrepr)) ((xname)))).add " ").add (((xsortdict)) ((xattrs))))))
                    xEndElementHandler.write
                      [xself xname]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (("End element: ".add (((xrepr)) ((xname))))))
                    xCharacterDataHandler.write
                      [xself xdata]
                        seq > @
                          seq
                            xdata.write ((((xdata).xstrip)) 0)
                            (xdata).if
                              bogusForceDataize.write (((((xself).xout).xappend)) (("Character data: ".add (((xrepr)) ((xdata))))))
                    xProcessingInstructionHandler.write
                      [xself xtarget xdata]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (((("PI: ".add (((xrepr)) ((xtarget)))).add " ").add (((xrepr)) ((xdata))))))
                    xStartNamespaceDeclHandler.write
                      [xself xprefix xuri]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (((("NS decl: ".add (((xrepr)) ((xprefix)))).add " ").add (((xrepr)) ((xuri))))))
                    xEndNamespaceDeclHandler.write
                      [xself xprefix]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (("End of NS decl: ".add (((xrepr)) ((xprefix))))))
                    xStartCdataSectionHandler.write
                      [xself]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) ("Start of CDATA section"))
                    xEndCdataSectionHandler.write
                      [xself]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) ("End of CDATA section"))
                    xCommentHandler.write
                      [xself xtext]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)) (("Comment: ".add (((xrepr)) ((xtext))))))
                    xNotationDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xname)) ((xbase)) ((xsysid)) ((xpubid)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)) (("Notation declared: %s".mod (((unsupported)) ((xargs))))))
                    xUnparsedEntityDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xentityName)) ((xbase)) ((xsystemId)) ((xpublicId)) ((xnotationName)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)) (("Unparsed entity decl: %s".mod (((unsupported)) ((xargs))))))
                    xNotStandaloneHandler.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write (((((xself).xout).xappend)) ("Not standalone"))
                            (((unsupported)) (1))
                    xExternalEntityRefHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xcontext)) ((xbase)) ((xsysId)) ((xpubId)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)) (("External entity ref: %s".mod (((unsupported)) ((((unsupported)) ((xargs)) ((((unsupported)) (1)))))))))
                            (((unsupported)) (1))
                    xStartDoctypeDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("Start doctype") ((xargs)))))
                            (((unsupported)) (1))
                    xEndDoctypeDeclHandler.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write (((((xself).xout).xappend)) ("End doctype"))
                            (((unsupported)) (1))
                    xEntityDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("Entity declaration") ((xargs)))))
                            (((unsupported)) (1))
                    xXmlDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("XML declaration") ((xargs)))))
                            (((unsupported)) (1))
                    xElementDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("Element declaration") ((xargs)))))
                            (((unsupported)) (1))
                    xAttlistDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("Attribute list declaration") ((xargs)))))
                            (((unsupported)) (1))
                    xSkippedEntityHandler.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xself).xout).xappend)) ((((unsupported)) ("Skipped entity") ((xargs)))))
                            (((unsupported)) (1))
                    xDefaultHandler.write
                      [xself xuserData]
                        seq > @
                    xDefaultHandlerExpand.write
                      [xself xuserData]
                        seq > @
                xhandler_names.write (((unsupported)) ("StartElementHandler") ("EndElementHandler") ("CharacterDataHandler") ("ProcessingInstructionHandler") ("UnparsedEntityDeclHandler") ("NotationDeclHandler") ("StartNamespaceDeclHandler") ("EndNamespaceDeclHandler") ("CommentHandler") ("StartCdataSectionHandler") ("EndCdataSectionHandler") ("DefaultHandler") ("DefaultHandlerExpand") ("NotStandaloneHandler") ("ExternalEntityRefHandler") ("StartDoctypeDeclHandler") ("EndDoctypeDeclHandler") ("EntityDeclHandler") ("XmlDeclHandler") ("ElementDeclHandler") ("AttlistDeclHandler") ("SkippedEntityHandler"))
                x_hookup_callbacks.write
                  [xself xparser xhandler]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xname)) (((xself).xhandler_names)))
                          bogusForceDataize.write (((xsetattr)) ((xparser)) ((xname)) ((((xgetattr)) ((xhandler)) ((xname)))))
                x_verify_parse_output.write
                  [xself xoperations]
                    memory > xexpected_operations
                    seq > @
                      seq
                        xexpected_operations.write (((unsupported)) ((((unsupported)) ("XML declaration") ((((unsupported)) ("1.0") ("iso-8859-1") (0))))) ("PI: 'xml-stylesheet' 'href=\"stylesheet.css\"'") ("Comment: ' comment data '") ("Not standalone") ((((unsupported)) ("Start doctype") ((((unsupported)) ("quotations") ("quotations.dtd") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)) ("Element declaration") ((((unsupported)) ("root") ((((unsupported)) (2) (0) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))))) ((((unsupported)) ("Attribute list declaration") ((((unsupported)) ("root") ("attr1") ("CDATA") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)) ("Attribute list declaration") ((((unsupported)) ("root") ("attr2") ("CDATA") ("None: is there a None literal in the EO language?") (0))))) ("Notation declared: ('notation', None, 'notation.jpeg', None)") ((((unsupported)) ("Entity declaration") ((((unsupported)) ("acirc") (0) ("xe2") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)) ("Entity declaration") ((((unsupported)) ("external_entity") (0) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("entity.file") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("Unparsed entity decl: ('unparsed_entity', None, 'entity.file', None, 'notation')") ("Not standalone") ("End doctype") ("Start element: 'root' {'attr1': 'value1', 'attr2': 'value2u1f40'}") ("NS decl: 'myns' 'http://www.python.org/namespace'") ("Start element: 'http://www.python.org/namespace!subelement' {}") ("Character data: 'Contents of subelements'") ("End element: 'http://www.python.org/namespace!subelement'") ("End of NS decl: 'myns'") ("Start element: 'sub2' {}") ("Start of CDATA section") ("Character data: 'contents of CDATA section'") ("End of CDATA section") ("End element: 'sub2'") ("External entity ref: (None, 'entity.file', None)") ((((unsupported)) ("Skipped entity") ((((unsupported)) ("skipped_entity") (0))))) ("Character data: 'xb5'") ("End element: 'root'"))
                        (((unsupported)) ((((unsupported)) ((xoperation)) ((xexpected_operation)))) ((((xzip)) ((xoperations)) ((xexpected_operations)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xoperation)) ((xexpected_operation)))
                xtest_parse_bytes.write
                  [xself]
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)) 0)
                        xparser.write (((unsupported)) (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)) ((xparser)) ((xout)))
                        bogusForceDataize.write ((((xparser).xParse)) ((xdata)) (1))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)) ((xoperations)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xparser)) ("uD800"))
                xtest_parse_str.write
                  [xself]
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)) 0)
                        xparser.write (((unsupported)) (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)) ((xparser)) ((xout)))
                        bogusForceDataize.write ((((xparser).xParse)) (((((xdata).xdecode)) ("iso-8859-1"))) (1))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)) ((xoperations)))
                xtest_parse_file.write
                  [xself]
                    memory > xfile
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)) 0)
                        xparser.write (((unsupported)) (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)) ((xparser)) ((xout)))
                        xfile.write (((xBytesIO)) ((xdata)))
                        bogusForceDataize.write ((((xparser).xParseFile)) ((xfile)))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)) ((xoperations)))
                xtest_parse_again.write
                  [xself]
                    memory > xfile
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        xfile.write (((xBytesIO)) ((xdata)))
                        bogusForceDataize.write ((((xparser).xParseFile)) ((xfile)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xexpat).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xParseFile)) ((xfile)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xexpat).xErrorString)) ((((xcm).xexception).xcode)))) ((((xexpat).xerrors).xXML_ERROR_FINISHED)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_legal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xexpat).xParserCreate)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xexpat).xParserCreate)) (" "))
                xtest_illegal.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xTypeError)))
                          seq
                            (((unsupported)) (((xexpat).xParserCreate)) (42))
                            bogusForceDataize.write ((((xself).xfail)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("ParserCreate() argument 'namespace_separator' must be str or None, not int"))
                        (((unsupported)) ((xValueError)))
                          seq
                            (((unsupported)) (((xexpat).xParserCreate)) ("too long"))
                            bogusForceDataize.write ((((xself).xfail)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("namespace_separator must be at most one character, omitted, or None"))
                xtest_zero_length.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xexpat).xParserCreate)) (""))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest.write
                  [xself]
                    memory > xcollector
                    memory > xtag
                    memory > xL
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xexpat).xParserCreate)) 0)
                        xL.write (((unsupported)) 0)
                        xcollector.write
                          [xname]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xL).xappend)) ((xname)))
                        (((unsupported)) (((xp).xStartElementHandler)) ((xcollector)))
                        (((unsupported)) (((xp).xEndElementHandler)) ((xcollector)))
                        bogusForceDataize.write ((((xp).xParse)) ("<e> <e/> <e></e> </e>") (1))
                        xtag.write (((unsupported)) ((xL)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xL)))) (6))
                        (((unsupported)) ((xentry)) ((xL)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xtag)) ((xentry)))))
                xtest_issue9402.write
                  [xself]
                    memory > xout
                    memory > xparser
                    memory > x__init__
                    memory > xExternalEntityRefHandler
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xparser]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xparser)) ((xparser)))
                                    (((unsupported)) (((xself).xparser_result)) ("None: is there a None literal in the EO language?"))
                            xExternalEntityRefHandler.write
                              [xself xcontext xbase xsysId xpubId]
                                memory > xexternal_parser
                                seq > @
                                  seq
                                    xexternal_parser.write (((((xself).xparser).xExternalEntityParserCreate)) (""))
                                    (((unsupported)) (((xself).xparser_result)) (((((xexternal_parser).xParse)) ("") (1))))
                                    (((unsupported)) (1))
                        xparser.write (((unsupported)) (((xexpat).xParserCreate)) ("!"))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        xout.write (((xExternalOutputter)) ((xparser)))
                        (((unsupported)) (((xparser).xExternalEntityRefHandler)) (((xout).xExternalEntityRefHandler)))
                        bogusForceDataize.write ((((xparser).xParse)) ((xdata)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xout).xparser_result)) (1))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xstuff)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xparser)) (((((xexpat).xParserCreate)) 0)))
                        (((unsupported)) ((((xself).xparser).xbuffer_text)) (1))
                        (((unsupported)) ((((xself).xparser).xCharacterDataHandler)) (((xself).xCharacterDataHandler)))
                xcheck.write
                  [xself xexpected xlabel]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((xexpected)) (("%snstuff    = %rnexpected = %r".mod (((unsupported)) ((xlabel)) (((xself).xstuff)) ((((xmap)) ((xstr)) ((xexpected))))))))
                xCharacterDataHandler.write
                  [xself xtext]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)) ((xtext)))
                xStartElementHandler.write
                  [xself xname xattrs]
                    memory > xbt
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xstuff).xappend)) (("<%s>".mod (xname))))
                        xbt.write ((((xattrs).xget)) ("buffer-text"))
                        ((xbt).eq "yes").if
                          (((unsupported)) ((((xself).xparser).xbuffer_text)) (1))
                          ((xbt).eq "no").if
                            (((unsupported)) ((((xself).xparser).xbuffer_text)) (0))
                xEndElementHandler.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)) (("</%s>".mod (xname))))
                xCommentHandler.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)) (("<!--%s-->".mod (xdata))))
                xsetHandlers.write
                  [xself xhandlers]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xname)) ((xhandlers)))
                          bogusForceDataize.write (((xsetattr)) (((xself).xparser)) ((xname)) ((((xgetattr)) ((xself)) ((xname)))))
                xtest_default_to_disabled.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xparser).xbuffer_text)))
                xtest_buffering_enabled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xparser).xbuffer_text)))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("123"))) ("buffered text not properly collapsed"))
                xtest1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b buffer-text='no'/>2n3<c buffer-text='yes'/>4n5</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("1") ("<b>") ("2") ("n") ("3") ("<c>") ("4n5"))) ("buffering control not reacting as expected"))
                xtest2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>&lt;2&gt;<c/>&#32;n&#x20;3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("1<2> n 3"))) ("buffered text not properly collapsed"))
                xtest3.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("1") ("<b>") ("2") ("<c>") ("3"))) ("buffered text not properly split"))
                xtest4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("StartElementHandler") ("EndElementHandler"))))
                        (((unsupported)) ((((xself).xparser).xCharacterDataHandler)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("<b>") ("</b>") ("<c>") ("</c>") ("</a>"))))
                xtest5.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("StartElementHandler") ("EndElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b></b>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("3") ("</a>"))))
                xtest6.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("CommentHandler") ("EndElementHandler") ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>2<c></c>345</a> ") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("345") ("</a>"))) ("buffered text not properly split"))
                xtest7.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)) ((((unsupported)) ("CommentHandler") ("EndElementHandler") ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)) ("<a>1<b/>2<c></c>3<!--abc-->4<!--def-->5</a> ") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xstuff)) ((((unsupported)) ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("3") ("<!--abc-->") ("4") ("<!--def-->") ("5") ("</a>"))) ("buffered text not properly split"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xStartElementHandler.write
                  [xself xname xattrs]
                    seq > @
                      (((unsupported)) ((((xRuntimeError)) ((xname)))))
                xcheck_traceback_entry.write
                  [xself xentry xfilename xfuncname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) ((((unsupported)) ((xentry)) (0))))) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xentry)) (2))) ((xfuncname)))
                xtest_exception.write
                  [xself]
                    memory > xentries
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xStartElementHandler)) (((xself).xStartElementHandler)))
                        (((unsupported)) ((xRuntimeError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)) ("<a><b><c/></b></a>") (1))
                            bogusForceDataize.write ((((xself).xfail)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("a") (("Expected RuntimeError for element 'a', but".add (" found %r".mod (((unsupported)) (((xe).xargs)) (0))))))
                            xentries.write ((((xtraceback).xextract_tb)) (((xe).x__traceback__)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xentries)))) (3))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)) ((((unsupported)) ((xentries)) (0))) ("test_pyexpat.py") ("test_exception"))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)) ((((unsupported)) ((xentries)) (1))) ("pyexpat.c") ("StartElement"))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)) ((((unsupported)) ((xentries)) (2))) ("test_pyexpat.py") ("StartElementHandler"))
                            ((((xsysconfig).xis_python_build)) 0).if
                              bogusForceDataize.write ((((xself).xassertIn)) ("call_with_frame(\"StartElement\"") ((((unsupported)) ((((unsupported)) ((xentries)) (1))) (3))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xStartElementHandler.write
                  [xself xname xattrs]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pos)) ("s"))
                xEndElementHandler.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pos)) ("e"))
                xcheck_pos.write
                  [xself xevent]
                    memory > xexpected
                    memory > xpos
                    seq > @
                      seq
                        xpos.write (((unsupported)) ((xevent)) ((((xself).xparser).xCurrentByteIndex)) ((((xself).xparser).xCurrentLineNumber)) ((((xself).xparser).xCurrentColumnNumber)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xupto).less (((xlen)) (((xself).xexpected_list))))) ("too many parser events"))
                        xexpected.write (((unsupported)) (((xself).xexpected_list)) (((xself).xupto)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpos)) ((xexpected)) (("Expected position %s, got position %s".mod (((unsupported)) ((xpos)) ((xexpected))))))
                        (((unsupported)) (((xself).xupto)) (1))
                xtest.write
                  [xself]
                    memory > xxml
                    seq > @
                      seq
                        (((unsupported)) (((xself).xparser)) (((((xexpat).xParserCreate)) 0)))
                        (((unsupported)) ((((xself).xparser).xStartElementHandler)) (((xself).xStartElementHandler)))
                        (((unsupported)) ((((xself).xparser).xEndElementHandler)) (((xself).xEndElementHandler)))
                        (((unsupported)) (((xself).xupto)) (0))
                        (((unsupported)) (((xself).xexpected_list)) ((((unsupported)) ((((unsupported)) ("s") (0) (1) (0))) ((((unsupported)) ("s") (5) (2) (1))) ((((unsupported)) ("s") (11) (3) (2))) ((((unsupported)) ("e") (15) (3) (6))) ((((unsupported)) ("e") (17) (4) (1))) ((((unsupported)) ("e") (22) (5) (0))))))
                        xxml.write "<a>n <b>n  <c/>n </b>n</a>"
                        bogusForceDataize.write (((((xself).xparser).xParse)) ((xxml)) (1))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_parse_only_xml_data.write
                [xself]
                  memory > xhandler
                  memory > xparser
                  memory > xxml
                  seq > @
                    seq
                      xxml.write ("<?xml version='1.0' encoding='iso8859'?><s>%s</s>".mod ("a".mul 1025))
                      (((unsupported)) ((xException)))
                      xhandler.write
                        [xtext]
                          seq > @
                            (((unsupported)) ((xSpecificException)))
                      xparser.write ((((xexpat).xParserCreate)) 0)
                      (((unsupported)) (((xparser).xCharacterDataHandler)) ((xhandler)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xException)) (((xparser).xParse)) (((((xxml).xencode)) ("iso8859"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_1025_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsmall_buffer_test)) (1025))) (2))
                xtest_1000_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xsmall_buffer_test)) (1000))) (1))
                xtest_wrong_size.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xparser).xbuffer_size)) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xparser).xbuffer_size)) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xValueError)) ((xOverflowError)))))))
                          (((unsupported)) (((xparser).xbuffer_size)) ((((xsys).xmaxsize).add 1)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xparser).xbuffer_size)) (512.0))
                xtest_unchanged_size.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><s>".add ("a".mul 512))
                        xxml2.write (("a".mul 512).add "</s>")
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)) (((xparser).xbuffer_size)) (512))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (1))
                        (((unsupported)) (((xparser).xbuffer_size)) (((xparser).xbuffer_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (1))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (2))
                xtest_disabling_buffer.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xxml3
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a>".add ("a".mul 512))
                        xxml2.write ("b".mul 1024)
                        xxml3.write (("c".mul 1024).add "</a>")
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        (((unsupported)) (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml1)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (1))
                        (((unsupported)) (((xparser).xbuffer_text)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xparser).xbuffer_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          bogusForceDataize.write ((((xparser).xParse)) ((xxml2)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (11))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xparser).xbuffer_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml3)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (12))
                xcounting_handler.write
                  [xself xtext]
                    seq > @
                      (((unsupported)) (((xself).xn)) (1))
                xsmall_buffer_test.write
                  [xself xbuffer_len]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write (("<?xml version='1.0' encoding='iso8859'?><s>".add ("a".mul (xbuffer_len))).add "</s>")
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)) (((xparser).xbuffer_size)) (1024))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml)))
                        (((unsupported)) (((xself).xn)))
                xtest_change_size_1.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a><s>".add ("a".mul 1024))
                        xxml2.write (("aaa</s><s>".add ("a".mul 1025)).add "</s></a>")
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        (((unsupported)) (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml1)) (0))
                        (((unsupported)) (((xparser).xbuffer_size)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (2048))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml2)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (2))
                xtest_change_size_2.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a>a<s>".add ("a".mul 1023))
                        xxml2.write (("aaa</s><s>".add ("a".mul 1025)).add "</s></a>")
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)) (((xparser).xbuffer_text)) (1))
                        (((unsupported)) (((xparser).xbuffer_size)) (2048))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (2048))
                        (((unsupported)) (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml1)) (0))
                        (((unsupported)) (((xparser).xbuffer_size)) ((((unsupported)) (((xparser).xbuffer_size)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xparser).xParse)) ((xxml2)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xn)) (4))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest1.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write "0rn"
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xexpat).xExpatError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)) ((xxml)) (TRUE))
                            bogusForceDataize.write ((((xself).xfail)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("unclosed token: line 2, column 0"))
                xtest2.write
                  [xself]
                    memory > xxml
                    memory > xerr_pattern
                    memory > xparser
                    seq > @
                      seq
                        xxml.write "<?xml versionxc2x85='1.0'?>rn"
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        xerr_pattern.write "XML declaration not well-formed: line 1, column d+"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) (((xexpat).xExpatError)) ((xerr_pattern)))))
                          bogusForceDataize.write ((((xparser).xParse)) ((xxml)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_codes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xerrors).xXML_ERROR_SYNTAX)) ((((unsupported)) (((xerrors).xmessages)) ((((unsupported)) (((xerrors).xcodes)) (((xerrors).xXML_ERROR_SYNTAX)))))))
                xtest_expaterror.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write "<"
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        (((unsupported)) (((xexpat).xExpatError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)) ((xxml)) (TRUE))
                            bogusForceDataize.write ((((xself).xfail)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xcode)) ((((unsupported)) (((xerrors).xcodes)) (((xerrors).xXML_ERROR_UNCLOSED_TOKEN)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_use_foreign_dtd.write
                  [xself]
                    memory > xhandler_call_args
                    memory > xparser
                    memory > xresolve_entity
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xhandler_call_args.write (((unsupported)) 0)
                        xresolve_entity.write
                          [xcontext xbase xsystem_id xpublic_id]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhandler_call_args).xappend)) ((((unsupported)) ((xpublic_id)) ((xsystem_id)))))
                                (((unsupported)) (1))
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)) (TRUE))
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)) (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)) (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)) ("<?xml version='1.0'?><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhandler_call_args)) ((((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)) ((((unsupported)) ((xhandler_call_args)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)) 0)
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)) (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)) (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)) ("<?xml version='1.0'?><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhandler_call_args)) ((((unsupported)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                xtest_ignore_use_foreign_dtd.write
                  [xself]
                    memory > xhandler_call_args
                    memory > xparser
                    memory > xresolve_entity
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xhandler_call_args.write (((unsupported)) 0)
                        xresolve_entity.write
                          [xcontext xbase xsystem_id xpublic_id]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhandler_call_args).xappend)) ((((unsupported)) ((xpublic_id)) ((xsystem_id)))))
                                (((unsupported)) (1))
                        xparser.write ((((xexpat).xParserCreate)) 0)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)) (TRUE))
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)) (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)) (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)) ("<?xml version='1.0'?><!DOCTYPE foo PUBLIC 'bar' 'baz'><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhandler_call_args)) ((((unsupported)) ((((unsupported)) ("bar") ("baz"))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)