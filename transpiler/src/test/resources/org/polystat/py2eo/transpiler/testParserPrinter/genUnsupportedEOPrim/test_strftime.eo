memory > xValueError
memory > xrange
memory > xcalendar
memory > xjava
memory > xprint
memory > xtime
memory > xi
memory > xLC_TIME
memory > xunittest
memory > xj
memory > x__name__
memory > xImportError
memory > xAttributeError
memory > xstr
memory > xerror
memory > xint
memory > xre
memory > xsupport
memory > xsys
memory > xsetlocale
memory > xe
[] > test_strftime
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_strftime
        memory > xtest_y_after_1900
        memory > xsetUp
        memory > xtest_y_before_1900
        memory > xtest_y_1900
        memory > xstrftest1
        memory > x_update_variables
        memory > xescapestr
        memory > xfixasctime
        memory > xstrftest2
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xfixasctime.write
              [xs]
                seq > @
                  seq
                    ((((unsupported)) ((xs)) (8)).eq " ").if
                      xs.write (((((unsupported)) ((xs)) ((((unsupported)) (8)))).add "0").add (((unsupported)) ((xs)) ((((unsupported)) (9)))))
                    (((unsupported)) ((xs)))
            xescapestr.write
              [xtext xampm]
                memory > xnew_text
                seq > @
                  seq
                    (((unsupported)) 0)
                    xnew_text.write ((((xre).xescape)) ((xtext)))
                    xnew_text.write ((((xnew_text).xreplace)) (((((xre).xescape)) ((xampm)))) ((xampm)))
                    xnew_text.write ((((xnew_text).xreplace)) ("%") ("%"))
                    xnew_text.write ((((xnew_text).xreplace)) (":") (":"))
                    xnew_text.write ((((xnew_text).xreplace)) ("?") ("?"))
                    (((unsupported)) ((xnew_text)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_update_variables.write
                  [xself xnow]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xgmt)) (((((xtime).xgmtime)) ((xnow)))))
                        xnow.write ((((xtime).xlocaltime)) ((xnow)))
                        ((((unsupported)) ((xnow)) (3)).less 12).if
                          (((unsupported)) (((xself).xampm)) ("(AM|am)"))
                          (((unsupported)) (((xself).xampm)) ("(PM|pm)"))
                        (((unsupported)) (((xself).xjan1)) (((((xtime).xlocaltime)) (((((xtime).xmktime)) ((((unsupported)) ((((unsupported)) ((xnow)) (0))) (1) (1) (0) (0) (0) (0) (1) (0))))))))
                        (((unsupported)) ((xAttributeError)))
                          (((unsupported)) ((xnow)) (8)).if
                            (((unsupported)) (((xself).xtz)) ((((unsupported)) (((xtime).xtzname)) (1))))
                            (((unsupported)) (((xself).xtz)) ((((unsupported)) (((xtime).xtzname)) (0))))
                          (((unsupported)) (((xself).xtz)) (""))
                        ((((unsupported)) ((xnow)) (3)).greater 12).if
                          (((unsupported)) (((xself).xclock12)) (((((unsupported)) ((xnow)) (3)).sub 12)))
                          ((((unsupported)) ((xnow)) (3)).greater 0).if
                            (((unsupported)) (((xself).xclock12)) ((((unsupported)) ((xnow)) (3))))
                            (((unsupported)) (((xself).xclock12)) (12))
                        (((unsupported)) (((xself).xnow)) ((xnow)))
                xsetUp.write
                  [xself]
                    memory > xsaved_locale
                    seq > @
                      (((unsupported)) ((xImportError)))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((((xjava).xutil).xLocale).xsetDefault)) (((((xjava).xutil).xLocale).xUS)))
                        seq
                          seq
                            (((unsupported)) 0)
                            (((unsupported)) 0)
                          xsaved_locale.write (((xsetlocale)) ((xLC_TIME)))
                          bogusForceDataize.write (((xsetlocale)) ((xLC_TIME)) ("C"))
                          bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetlocale)) ((xLC_TIME)) ((xsaved_locale)))
                xtest_strftime.write
                  [xself]
                    memory > xarg
                    memory > xnow
                    seq > @
                      seq
                        xnow.write ((((xtime).xtime)) 0)
                        bogusForceDataize.write ((((xself).x_update_variables)) ((xnow)))
                        bogusForceDataize.write ((((xself).xstrftest1)) ((xnow)))
                        bogusForceDataize.write ((((xself).xstrftest2)) ((xnow)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)) (("Strftime test, platform: %s, Python version: %s".mod (((unsupported)) (((xsys).xplatform)) ((((unsupported)) ((((((xsys).xversion).xsplit)) 0)) (0)))))))
                        (((unsupported)) ((xj)) ((((xrange)) ((5.neg)) (5))))
                          (((unsupported)) ((xi)) ((((xrange)) (25))))
                            seq
                              xarg.write ((xnow).add ((((xi).add ((xj).mul 100)).mul 23).mul 3603))
                              bogusForceDataize.write ((((xself).x_update_variables)) ((xarg)))
                              bogusForceDataize.write ((((xself).xstrftest1)) ((xarg)))
                              bogusForceDataize.write ((((xself).xstrftest2)) ((xarg)))
                xstrftest1.write
                  [xself xnow]
                    memory > xexpectations
                    memory > xresult
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)) ("strftime test for") (((((xtime).xctime)) ((xnow)))))
                        xnow.write ((xself).xnow)
                        xexpectations.write (((unsupported)) ((((unsupported)) ("%a") ((((unsupported)) (((xcalendar).xday_abbr)) ((((unsupported)) ((xnow)) (6))))) ("abbreviated weekday name"))) ((((unsupported)) ("%A") ((((unsupported)) (((xcalendar).xday_name)) ((((unsupported)) ((xnow)) (6))))) ("full weekday name"))) ((((unsupported)) ("%b") ((((unsupported)) (((xcalendar).xmonth_abbr)) ((((unsupported)) ((xnow)) (1))))) ("abbreviated month name"))) ((((unsupported)) ("%B") ((((unsupported)) (((xcalendar).xmonth_name)) ((((unsupported)) ((xnow)) (1))))) ("full month name"))) ((((unsupported)) ("%d") (("%02d".mod (((unsupported)) ((xnow)) (2)))) ("day of month as number (00-31)"))) ((((unsupported)) ("%H") (("%02d".mod (((unsupported)) ((xnow)) (3)))) ("hour (00-23)"))) ((((unsupported)) ("%I") (("%02d".mod ((xself).xclock12))) ("hour (01-12)"))) ((((unsupported)) ("%j") (("%03d".mod (((unsupported)) ((xnow)) (7)))) ("julian day (001-366)"))) ((((unsupported)) ("%m") (("%02d".mod (((unsupported)) ((xnow)) (1)))) ("month as number (01-12)"))) ((((unsupported)) ("%M") (("%02d".mod (((unsupported)) ((xnow)) (4)))) ("minute, (00-59)"))) ((((unsupported)) ("%p") (((xself).xampm)) ("AM or PM as appropriate"))) ((((unsupported)) ("%S") (("%02d".mod (((unsupported)) ((xnow)) (5)))) ("seconds of current time (00-60)"))) ((((unsupported)) ("%U") (("%02d".mod (((unsupported)) (((((unsupported)) ((xnow)) (7)).add (((unsupported)) (((xself).xjan1)) (6)))) (7)))) ("week number of the year (Sun 1st)"))) ((((unsupported)) ("%w") (("0?%d".mod ((1.add (((unsupported)) ((xnow)) (6))).mod 7))) ("weekday as a number (Sun 1st)"))) ((((unsupported)) ("%W") (("%02d".mod (((unsupported)) (((((unsupported)) ((xnow)) (7)).add (((((unsupported)) (((xself).xjan1)) (6)).sub 1).mod 7))) (7)))) ("week number of the year (Mon 1st)"))) ((((unsupported)) ("%X") (("%02d:%02d:%02d".mod (((unsupported)) ((((unsupported)) ((xnow)) (3))) ((((unsupported)) ((xnow)) (4))) ((((unsupported)) ((xnow)) (5)))))) ("%H:%M:%S"))) ((((unsupported)) ("%y") (("%02d".mod ((((unsupported)) ((xnow)) (0)).mod 100))) ("year without century"))) ((((unsupported)) ("%Y") (("%d".mod (((unsupported)) ((xnow)) (0)))) ("year with century"))) ((((unsupported)) ("%%") ("%") ("single percent sign"))))
                        (((unsupported)) ((xe)) ((xexpectations)))
                          seq
                            (((unsupported)) ((xValueError)))
                              xresult.write ((((xtime).xstrftime)) ((((unsupported)) ((xe)) (0))) ((xnow)))
                              bogusForceDataize.write ((((xself).xfail)) (("strftime '%s' format gave error: %s".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((xerror))))))
                            ((((xre).xmatch)) ((((xescapestr)) ((((unsupported)) ((xe)) (1))) (((xself).xampm)))) ((xresult))).if
                              (((unsupported)) 0)
                            (((xresult).not).or ((((unsupported)) ((xresult)) (0)).eq "%")).if
                              bogusForceDataize.write ((((xself).xfail)) (("strftime does not support standard '%s' format (%s)".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2)))))))
                              bogusForceDataize.write ((((xself).xfail)) (("Conflict for %s (%s): expected %s, but got %s".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2))) ((((unsupported)) ((xe)) (1))) ((xresult))))))
                xstrftest2.write
                  [xself xnow]
                    memory > xnowsecs
                    memory > xnonstandard_expectations
                    memory > xresult
                    memory > xmsg
                    seq > @
                      seq
                        xnowsecs.write (((unsupported)) ((((xstr)) ((((xint)) ((xnow)))))) ((((unsupported)) ((1.neg)))))
                        xnow.write ((xself).xnow)
                        xnonstandard_expectations.write (((unsupported)) ((((unsupported)) ("%c") ((((xfixasctime)) (((((xtime).xasctime)) ((xnow)))))) ("near-asctime() format"))) ((((unsupported)) ("%x") (("%02d/%02d/%02d".mod (((unsupported)) ((((unsupported)) ((xnow)) (1))) ((((unsupported)) ((xnow)) (2))) (((((unsupported)) ((xnow)) (0)).mod 100))))) ("%m/%d/%y %H:%M:%S"))) ((((unsupported)) ("%Z") (("%s".mod ((xself).xtz))) ("time zone name"))) ((((unsupported)) ("%D") (("%02d/%02d/%02d".mod (((unsupported)) ((((unsupported)) ((xnow)) (1))) ((((unsupported)) ((xnow)) (2))) (((((unsupported)) ((xnow)) (0)).mod 100))))) ("mm/dd/yy"))) ((((unsupported)) ("%e") (("%2d".mod (((unsupported)) ((xnow)) (2)))) ("day of month as number, blank padded ( 0-31)"))) ((((unsupported)) ("%h") ((((unsupported)) (((xcalendar).xmonth_abbr)) ((((unsupported)) ((xnow)) (1))))) ("abbreviated month name"))) ((((unsupported)) ("%k") (("%2d".mod (((unsupported)) ((xnow)) (3)))) ("hour, blank padded ( 0-23)"))) ((((unsupported)) ("%n") ("n") ("newline character"))) ((((unsupported)) ("%r") (("%02d:%02d:%02d %s".mod (((unsupported)) (((xself).xclock12)) ((((unsupported)) ((xnow)) (4))) ((((unsupported)) ((xnow)) (5))) (((xself).xampm))))) ("%I:%M:%S %p"))) ((((unsupported)) ("%R") (("%02d:%02d".mod (((unsupported)) ((((unsupported)) ((xnow)) (3))) ((((unsupported)) ((xnow)) (4)))))) ("%H:%M"))) ((((unsupported)) ("%s") ((xnowsecs)) ("seconds since the Epoch in UCT"))) ((((unsupported)) ("%t") ("t") ("tab character"))) ((((unsupported)) ("%T") (("%02d:%02d:%02d".mod (((unsupported)) ((((unsupported)) ((xnow)) (3))) ((((unsupported)) ((xnow)) (4))) ((((unsupported)) ((xnow)) (5)))))) ("%H:%M:%S"))) ((((unsupported)) ("%3y") (("%03d".mod ((((unsupported)) ((xnow)) (0)).mod 100))) ("year without century rendered using fieldwidth"))))
                        (((unsupported)) ((xe)) ((xnonstandard_expectations)))
                          seq
                            (((unsupported)) ((xValueError)))
                              xresult.write ((((xtime).xstrftime)) ((((unsupported)) ((xe)) (0))) ((xnow)))
                              seq
                                xmsg.write ("Error for nonstandard '%s' format (%s): %s".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2))) ((((xstr)) ((xresult))))))
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((xprint)) ((xmsg)))
                                (((unsupported)) 0)
                            ((((xre).xmatch)) ((((xescapestr)) ((((unsupported)) ((xe)) (1))) (((xself).xampm)))) ((xresult))).if
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((xprint)) (("Supports nonstandard '%s' format (%s)".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2)))))))
                              (((xresult).not).or ((((unsupported)) ((xresult)) (0)).eq "%")).if
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((xprint)) (("Does not appear to support '%s' format (%s)".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2)))))))
                                ((xsupport).xverbose).if
                                  seq
                                    bogusForceDataize.write (((xprint)) (("Conflict for nonstandard '%s' format (%s):".mod (((unsupported)) ((((unsupported)) ((xe)) (0))) ((((unsupported)) ((xe)) (2)))))))
                                    bogusForceDataize.write (((xprint)) (("  Expected %s, but got %s".mod (((unsupported)) ((((unsupported)) ((xe)) (1))) ((xresult))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_y_before_1900.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((unsupported)) (1899) (1) (1) (0) (0) (0) (0) (0) (0))
                        ((((xsys).xplatform).eq "win32").or (((((xsys).xplatform).xstartswith)) ((((unsupported)) ("aix") ("sunos") ("solaris"))))).if
                          (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                            bogusForceDataize.write ((((xtime).xstrftime)) ("%y") ((xt)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xtime).xstrftime)) ("%y") ((xt)))) ("99"))
                xtest_y_1900.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xtime).xstrftime)) ("%y") ((((unsupported)) (1900) (1) (1) (0) (0) (0) (0) (0) (0))))) ("00"))
                xtest_y_after_1900.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xtime).xstrftime)) ("%y") ((((unsupported)) (2013) (1) (1) (0) (0) (0) (0) (0) (0))))) ("13"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)