memory > xrun_unittest
memory > xlist
memory > xdifflib
memory > xstr
memory > xrange
memory > xchar
memory > xStopIteration
memory > xopen
memory > xTestAutojunk
memory > xdoctest
memory > xsys
memory > xbytes
memory > xTestBytes
memory > xargs
memory > xnext
memory > xTestJunkAPIs
memory > xTestWithAscii
memory > xfindfile
memory > xset
memory > xrepr
memory > xTestSFbugs
memory > xx
memory > xi
memory > xctx
memory > xe
memory > xTestSFpatches
memory > xTestOutputFormat
memory > xzip
memory > xunittest
memory > xline
memory > xlen
memory > xfp
memory > xTypeError
memory > x__name__
[] > test_difflib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_assert_type_error
        memory > xpatch914575_to2
        memory > xtest_range_format_unified
        memory > xtest_bjunk
        memory > xtest_is_line_junk_REDOS
        memory > xtest_one_insert
        memory > xtest_byte_filenames
        memory > xtest_mdiff_catch_stop_iteration
        memory > xtest_comparing_empty_lists
        memory > xpatch914575_to3
        memory > xtest_is_line_junk_true
        memory > xtest_one_insert_homogenous_sequence
        memory > xtest_hint_indented_properly_with_tabs
        memory > xtest_is_line_junk_false
        memory > xtest_html_diff
        memory > xtest_mixed_types_content
        memory > xpatch914575_nonascii_to1
        memory > xtest_is_character_junk_true
        memory > xtest_make_file_iso88591_charset
        memory > xtest_one_delete
        memory > xtest_no_trailing_tab_on_empty_filedate
        memory > xcheck
        memory > xtest_make_file_usascii_charset_with_nonascii_input
        memory > xtest_mixed_types_dates
        memory > xtest_main
        memory > xtest_byte_content
        memory > xtest_matching_blocks_cache
        memory > xpatch914575_from2
        memory > xpatch914575_from3
        memory > xtest_tab_delimiter
        memory > xtest_is_character_junk_false
        memory > xtest_mixed_types_filenames
        memory > xtest_range_format_context
        memory > xpatch914575_to1
        memory > xpatch914575_from1
        memory > xpatch914575_nonascii_from1
        memory > xtest_added_tab_hint
        memory > xtest_make_file_default_charset
        memory > xtest_ratio_for_null_seqn
        memory > xtest_recursion_limit
        seq > @
          seq
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_one_insert.write
                  [xself]
                    memory > xsm
                    seq > @
                      seq
                        xsm.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") (("b".mul 100)) (("a".add ("b".mul 100))))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((((xsm).xratio)) 0)) (0.995) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xsm).xget_opcodes)) 0)))) ((((unsupported)) ((((unsupported)) ("insert") (0) (0) (0) (1))) ((((unsupported)) ("equal") (0) (100) (1) (101))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbpopular)) ((((xset)) 0)))
                        xsm.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") (("b".mul 100)) (((("b".mul 50).add "a").add ("b".mul 50))))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((((xsm).xratio)) 0)) (0.995) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xsm).xget_opcodes)) 0)))) ((((unsupported)) ((((unsupported)) ("equal") (0) (50) (0) (50))) ((((unsupported)) ("insert") (50) (50) (50) (51))) ((((unsupported)) ("equal") (50) (100) (51) (101))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbpopular)) ((((xset)) 0)))
                xtest_one_delete.write
                  [xself]
                    memory > xsm
                    seq > @
                      seq
                        xsm.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") (((("a".mul 40).add "c").add ("b".mul 40))) ((("a".mul 40).add ("b".mul 40))))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((((xsm).xratio)) 0)) (0.994) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xsm).xget_opcodes)) 0)))) ((((unsupported)) ((((unsupported)) ("equal") (0) (40) (0) (40))) ((((unsupported)) ("delete") (40) (41) (40) (40))) ((((unsupported)) ("equal") (41) (81) (40) (80))))))
                xtest_bjunk.write
                  [xself]
                    memory > xsm
                    seq > @
                      seq
                        xsm.write (((unsupported)) (((xdifflib).xSequenceMatcher)) ((((unsupported)) (((xx).eq " ")))) ((("a".mul 40).add ("b".mul 40))) ((("a".mul 44).add ("b".mul 40))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbjunk)) ((((xset)) 0)))
                        xsm.write (((unsupported)) (((xdifflib).xSequenceMatcher)) ((((unsupported)) (((xx).eq " ")))) ((("a".mul 40).add ("b".mul 40))) (((("a".mul 44).add ("b".mul 40)).add (" ".mul 20))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbjunk)) ((((unsupported)) (" "))))
                        xsm.write (((unsupported)) (((xdifflib).xSequenceMatcher)) ((((unsupported)) ((((unsupported)) ((xx)) ((((unsupported)) (" ") ("b"))))))) ((("a".mul 40).add ("b".mul 40))) (((("a".mul 44).add ("b".mul 40)).add (" ".mul 20))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbjunk)) ((((unsupported)) (" ") ("b"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_one_insert_homogenous_sequence.write
                  [xself]
                    memory > xseq1
                    memory > xsm
                    memory > xseq2
                    seq > @
                      seq
                        xseq1.write ("b".mul 200)
                        xseq2.write ("a".add ("b".mul 200))
                        xsm.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ((xseq1)) ((xseq2)))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((((xsm).xratio)) 0)) (0) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbpopular)) ((((unsupported)) ("b"))))
                        xsm.write (((unsupported)) (((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ((xseq1)) ((xseq2)) (FALSE))
                        (((unsupported)) (((xself).xassertAlmostEqual)) (((((xsm).xratio)) 0)) (0.9975) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsm).xbpopular)) ((((xset)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_ratio_for_null_seqn.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xratio)) 0)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xquick_ratio)) 0)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xreal_quick_ratio)) 0)) (1))
                xtest_comparing_empty_lists.write
                  [xself]
                    memory > xgroup_gen
                    memory > xdiff_gen
                    seq > @
                      seq
                        xgroup_gen.write (((((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)) ((((unsupported)) 0))).xget_grouped_opcodes)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xgroup_gen)))
                        xdiff_gen.write ((((xdifflib).xunified_diff)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xdiff_gen)))
                xtest_matching_blocks_cache.write
                  [xself]
                    memory > xs
                    memory > xfirst
                    memory > xsecond
                    seq > @
                      seq
                        xs.write ((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ("abxcd") ("abcd"))
                        xfirst.write ((((xs).xget_matching_blocks)) 0)
                        xsecond.write ((((xs).xget_matching_blocks)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xsecond)) (0)).xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xsecond)) (1)).xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xsecond)) (2)).xsize)) (0))
                xtest_added_tab_hint.write
                  [xself]
                    memory > xdiff
                    seq > @
                      seq
                        xdiff.write (((xlist)) ((((((((xdifflib).xDiffer)) 0).xcompare)) ((((unsupported)) ("tI am a buggy"))) ((((unsupported)) ("ttI am a bug"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("- tI am a buggy") ((((unsupported)) ((xdiff)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("? t          --n") ((((unsupported)) ((xdiff)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("+ ttI am a bug") ((((unsupported)) ((xdiff)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("? +n") ((((unsupported)) ((xdiff)) (3))))
                xtest_hint_indented_properly_with_tabs.write
                  [xself]
                    memory > xdiff
                    seq > @
                      seq
                        xdiff.write (((xlist)) ((((((((xdifflib).xDiffer)) 0).xcompare)) ((((unsupported)) ("t t t^"))) ((((unsupported)) ("t t t^n"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("- t t t^") ((((unsupported)) ((xdiff)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("+ t t t^n") ((((unsupported)) ((xdiff)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("? t t t +n") ((((unsupported)) ((xdiff)) (2))))
                xtest_mdiff_catch_stop_iteration.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xdifflib).x_mdiff)) ((((unsupported)) ("2"))) ((((unsupported)) ("3"))) (1))))) ((((unsupported)) ((((unsupported)) ((((unsupported)) (1) ("x00-2x01"))) ((((unsupported)) (1) ("x00+3x01"))) (TRUE))))))
            xpatch914575_from1.write (((unsupported)) 0)
            xpatch914575_to1.write (((unsupported)) 0)
            xpatch914575_nonascii_from1.write (((unsupported)) 0)
            xpatch914575_nonascii_to1.write (((unsupported)) 0)
            xpatch914575_from2.write (((unsupported)) 0)
            xpatch914575_to2.write (((unsupported)) 0)
            xpatch914575_from3.write (((unsupported)) 0)
            xpatch914575_to3.write (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_html_diff.write
                  [xself]
                    memory > xf3
                    memory > xt1b
                    memory > xf1b
                    memory > xt2
                    memory > xf2
                    memory > xi
                    memory > xt3
                    memory > xtables
                    memory > xfull
                    memory > xj
                    memory > xt1a
                    memory > xk
                    memory > xf1a
                    memory > xactual
                    seq > @
                      seq
                        xf1a.write (((xpatch914575_from1).add ("123n".mul 10)).mul 3)
                        xt1a.write (((xpatch914575_to1).add ("123n".mul 10)).mul 3)
                        xf1b.write (("456n".mul 10).add (xf1a))
                        xt1b.write (("456n".mul 10).add (xt1a))
                        xf1a.write ((((xf1a).xsplitlines)) 0)
                        xt1a.write ((((xt1a).xsplitlines)) 0)
                        xf1b.write ((((xf1b).xsplitlines)) 0)
                        xt1b.write ((((xt1b).xsplitlines)) 0)
                        xf2.write ((((xpatch914575_from2).xsplitlines)) 0)
                        xt2.write ((((xpatch914575_to2).xsplitlines)) 0)
                        xf3.write (xpatch914575_from3)
                        xt3.write (xpatch914575_to3)
                        xi.write ((((xdifflib).xHtmlDiff)) 0)
                        xj.write (((unsupported)) (((xdifflib).xHtmlDiff)) (2))
                        xk.write (((unsupported)) (((xdifflib).xHtmlDiff)) (14))
                        xfull.write (((unsupported)) (((xi).xmake_file)) ((xf1a)) ((xt1a)) ("from") ("to") (FALSE) (5))
                        xtables.write ((("n".xjoin)) ((((unsupported)) ("<h2>Context (first diff within numlines=5(default))</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1a)) ((xt1a)) ("from") ("to") (TRUE))) ("<h2>Context (first diff after numlines=5(default))</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1b)) ((xt1b)) ("from") ("to") (TRUE))) ("<h2>Context (numlines=6)</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1a)) ((xt1a)) ("from") ("to") (TRUE) (6))) ("<h2>Context (numlines=0)</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1a)) ((xt1a)) ("from") ("to") (TRUE) (0))) ("<h2>Same Context</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1a)) ((xf1a)) ("from") ("to") (TRUE))) ("<h2>Same Full</h2>") ((((unsupported)) (((xi).xmake_table)) ((xf1a)) ((xf1a)) ("from") ("to") (FALSE))) ("<h2>Empty Context</h2>") ((((unsupported)) (((xi).xmake_table)) ((((unsupported)) 0)) ((((unsupported)) 0)) ("from") ("to") (TRUE))) ("<h2>Empty Full</h2>") ((((unsupported)) (((xi).xmake_table)) ((((unsupported)) 0)) ((((unsupported)) 0)) ("from") ("to") (FALSE))) ("<h2>tabsize=2</h2>") (((((xj).xmake_table)) ((xf2)) ((xt2)))) ("<h2>tabsize=default</h2>") (((((xi).xmake_table)) ((xf2)) ((xt2)))) ("<h2>Context (wrapcolumn=14,numlines=0)</h2>") ((((unsupported)) (((xk).xmake_table)) (((((xf3).xsplitlines)) 0)) (((((xt3).xsplitlines)) 0)) (TRUE) (0))) ("<h2>wrapcolumn=14,splitlines()</h2>") (((((xk).xmake_table)) (((((xf3).xsplitlines)) 0)) (((((xt3).xsplitlines)) 0)))) ("<h2>wrapcolumn=14,splitlines(True)</h2>") (((((xk).xmake_table)) (((((xf3).xsplitlines)) (TRUE))) (((((xt3).xsplitlines)) (TRUE))))))))
                        xactual.write ((((xfull).xreplace)) ("</body>") (("n%sn</body>".mod (xtables))))
                        (((unsupported)) ((((xopen)) ((((xfindfile)) ("test_difflib_expect.html"))))) ((xfp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) (((((xfp).xread)) 0)))
                xtest_recursion_limit.write
                  [xself]
                    memory > xlimit
                    memory > xnew
                    memory > xold
                    seq > @
                      seq
                        xlimit.write ((((xsys).xgetrecursionlimit)) 0)
                        xold.write (((unsupported)) ((((((xi).mod 2).and "K:%d").or "V:A:%d").mod (xi))) ((xi)) ((((xrange)) (((xlimit).mul 2)))))
                        xnew.write (((unsupported)) ((((((xi).mod 2).and "K:%d").or "V:B:%d").mod (xi))) ((xi)) ((((xrange)) (((xlimit).mul 2)))))
                        bogusForceDataize.write (((((((xdifflib).xSequenceMatcher)) ("None: is there a None literal in the EO language?") ((xold)) ((xnew))).xget_opcodes)) 0)
                xtest_make_file_default_charset.write
                  [xself]
                    memory > xhtml_diff
                    memory > xoutput
                    seq > @
                      seq
                        xhtml_diff.write ((((xdifflib).xHtmlDiff)) 0)
                        xoutput.write ((((xhtml_diff).xmake_file)) (((((xpatch914575_from1).xsplitlines)) 0)) (((((xpatch914575_to1).xsplitlines)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("content=\"text/html; charset=utf-8\"") ((xoutput)))
                xtest_make_file_iso88591_charset.write
                  [xself]
                    memory > xhtml_diff
                    memory > xoutput
                    seq > @
                      seq
                        xhtml_diff.write ((((xdifflib).xHtmlDiff)) 0)
                        xoutput.write (((unsupported)) (((xhtml_diff).xmake_file)) (((((xpatch914575_from1).xsplitlines)) 0)) (((((xpatch914575_to1).xsplitlines)) 0)) ("iso-8859-1"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("content=\"text/html; charset=iso-8859-1\"") ((xoutput)))
                xtest_make_file_usascii_charset_with_nonascii_input.write
                  [xself]
                    memory > xhtml_diff
                    memory > xoutput
                    seq > @
                      seq
                        xhtml_diff.write ((((xdifflib).xHtmlDiff)) 0)
                        xoutput.write (((unsupported)) (((xhtml_diff).xmake_file)) (((((xpatch914575_nonascii_from1).xsplitlines)) 0)) (((((xpatch914575_nonascii_to1).xsplitlines)) 0)) ("us-ascii"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("content=\"text/html; charset=us-ascii\"") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("&#305;mpl&#305;c&#305;t") ((xoutput)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_tab_delimiter.write
                  [xself]
                    memory > xargs
                    memory > xcd
                    memory > xud
                    seq > @
                      seq
                        xargs.write (((unsupported)) ("one") ("two") ("Original") ("Current") ("2005-01-26 23:30:50") ("2010-04-02 10:20:52"))
                        xud.write (((unsupported)) (((xdifflib).xunified_diff)) ((((unsupported)) ((xargs)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xud)))) ((((unsupported)) (0) (2))))) ((((unsupported)) ("--- Originalt2005-01-26 23:30:50") ("+++ Currentt2010-04-02 10:20:52"))))
                        xcd.write (((unsupported)) (((xdifflib).xcontext_diff)) ((((unsupported)) ((xargs)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xcd)))) ((((unsupported)) (0) (2))))) ((((unsupported)) ("*** Originalt2005-01-26 23:30:50") ("--- Currentt2010-04-02 10:20:52"))))
                xtest_no_trailing_tab_on_empty_filedate.write
                  [xself]
                    memory > xargs
                    memory > xcd
                    memory > xud
                    seq > @
                      seq
                        xargs.write (((unsupported)) ("one") ("two") ("Original") ("Current"))
                        xud.write (((unsupported)) (((xdifflib).xunified_diff)) ((((unsupported)) ((xargs)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xud)))) ((((unsupported)) (0) (2))))) ((((unsupported)) ("--- Original") ("+++ Current"))))
                        xcd.write (((unsupported)) (((xdifflib).xcontext_diff)) ((((unsupported)) ((xargs)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xcd)))) ((((unsupported)) (0) (2))))) ((((unsupported)) ("*** Original") ("--- Current"))))
                xtest_range_format_unified.write
                  [xself]
                    memory > xspec
                    memory > xfmt
                    seq > @
                      seq
                        xspec.write (((unsupported)) 0)
                        xfmt.write ((xdifflib).x_format_range_unified)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (3))) ("3,0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (4))) ("4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (5))) ("4,2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (6))) ("4,3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (0) (0))) ("0,0"))
                xtest_range_format_context.write
                  [xself]
                    memory > xspec
                    memory > xfmt
                    seq > @
                      seq
                        xspec.write (((unsupported)) 0)
                        xfmt.write ((xdifflib).x_format_range_context)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (3))) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (4))) ("4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (5))) ("4,5"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (3) (6))) ("4,6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfmt)) (0) (0))) ("0"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck.write
                  [xself xdiff]
                    seq > @
                      seq
                        xdiff.write (((xlist)) ((xdiff)))
                        (((unsupported)) ((xline)) ((xdiff)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xline)) ((xbytes)) (("all lines of diff should be bytes, but got: %r".mod (xline))))
                xtest_byte_content.write
                  [xself]
                    memory > xb
                    memory > xunified
                    memory > xa
                    memory > xcontext
                    memory > xcheck
                    seq > @
                      seq
                        xa.write (((unsupported)) ("hello") ("andrxe9"))
                        xb.write (((unsupported)) ("hello") ("andrxc3xa9"))
                        xunified.write ((xdifflib).xunified_diff)
                        xcontext.write ((xdifflib).xcontext_diff)
                        xcheck.write ((xself).xcheck)
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xa)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xa)) ("a") ("a"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ("a") ("b"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xa)) ("a") ("a") ("2005") ("2013"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ("a") ("b") ("2005") ("2013"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xa)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xa)) ("a") ("a"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)) ("a") ("b"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xa)) ("a") ("a") ("2005") ("2013"))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)) ("a") ("b") ("2005") ("2013"))))
                xtest_byte_filenames.write
                  [xself]
                    memory > xassertDiff
                    memory > xb
                    memory > xdateb
                    memory > xunified
                    memory > xfna
                    memory > xexpect
                    memory > xa
                    memory > xcontext
                    memory > xcheck
                    memory > xfnb
                    memory > xdatea
                    memory > xactual
                    seq > @
                      seq
                        xfna.write "xb3odz.txt"
                        xfnb.write "xc5x82odz.txt"
                        xa.write (((unsupported)) ("xa3odz is a city in Poland."))
                        xb.write (((unsupported)) ("xc5x81odz is a city in Poland."))
                        xcheck.write ((xself).xcheck)
                        xunified.write ((xdifflib).xunified_diff)
                        xcontext.write ((xdifflib).xcontext_diff)
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ((xfna)) ((xfnb)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)) ((xfna)) ((xfnb)))))
                        xassertDiff.write
                          [xexpect xactual]
                            seq > @
                              seq
                                xactual.write (((xlist)) ((xactual)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xexpect)))) ((((xlen)) ((xactual)))))
                                (((unsupported)) ((((unsupported)) ((xe)) ((xa)))) ((((xzip)) ((xexpect)) ((xactual)))))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xe)) ((xa)))
                        xexpect.write (((unsupported)) ("--- xb3odz.txt") ("+++ xc5x82odz.txt") ("@@ -1 +1 @@") ("-xa3odz is a city in Poland.") ("+xc5x81odz is a city in Poland."))
                        xactual.write (((unsupported)) (((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ((xfna)) ((xfnb)) (""))
                        bogusForceDataize.write (((xassertDiff)) ((xexpect)) ((xactual)))
                        xdatea.write "2005-03-18"
                        xdateb.write "2005-03-19"
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ((xfna)) ((xfnb)) ((xdatea)) ((xdateb)))))
                        bogusForceDataize.write (((xcheck)) (((((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)) ((xfna)) ((xfnb)) ((xdatea)) ((xdateb)))))
                        xexpect.write (((unsupported)) ("--- xb3odz.txtt2005-03-18") ("+++ xc5x82odz.txtt2005-03-19") ("@@ -1 +1 @@") ("-xa3odz is a city in Poland.") ("+xc5x81odz is a city in Poland."))
                        xactual.write (((unsupported)) (((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)) ((xfna)) ((xfnb)) ((xdatea)) ((xdateb)) (""))
                        bogusForceDataize.write (((xassertDiff)) ((xexpect)) ((xactual)))
                xtest_mixed_types_content.write
                  [xself]
                    memory > xcontext
                    memory > xb
                    memory > xunified
                    memory > xexpect
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) ("hello"))
                        xb.write (((unsupported)) ("hello"))
                        xunified.write ((xdifflib).xunified_diff)
                        xcontext.write ((xdifflib).xcontext_diff)
                        xexpect.write "lines to compare must be str, not bytes (b'hello')"
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) ((xunified)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) ((xunified)) ((xb)) ((xa)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) ((xcontext)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) ((xcontext)) ((xb)) ((xa)))
                        xexpect.write "all arguments must be bytes, not str ('hello')"
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) (((xdifflib).xdiff_bytes)) ((xunified)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) (((xdifflib).xdiff_bytes)) ((xunified)) ((xb)) ((xa)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) (((xdifflib).xdiff_bytes)) ((xcontext)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((xexpect)) (((xdifflib).xdiff_bytes)) ((xcontext)) ((xb)) ((xa)))
                xtest_mixed_types_filenames.write
                  [xself]
                    memory > xfna
                    memory > xfnb
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) ("hellon"))
                        xb.write (((unsupported)) ("ohelln"))
                        xfna.write "olxe9.txt"
                        xfnb.write "olxc3a9.txt"
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ((((unsupported)) 0)) (((xdifflib).xunified_diff)) ((xa)) ((xb)) ((xfna)) ((xfnb)))
                xtest_mixed_types_dates.write
                  [xself]
                    memory > xdateb
                    memory > xb
                    memory > xa
                    memory > xdatea
                    seq > @
                      seq
                        xa.write (((unsupported)) ("foon"))
                        xb.write (((unsupported)) ("barn"))
                        xdatea.write "1 fév"
                        xdateb.write "3 fév"
                        bogusForceDataize.write ((((xself).x_assert_type_error)) ("all arguments must be bytes, not str ('1 fév')") (((xdifflib).xdiff_bytes)) (((xdifflib).xunified_diff)) ((xa)) ((xb)) ("a") ("b") ((xdatea)) ((xdateb)))
                        xa.write (((unsupported)) ("foon"))
                        xb.write (((unsupported)) ("barn"))
                        bogusForceDataize.write (((xlist)) (((((xdifflib).xunified_diff)) ((xa)) ((xb)) ("a") ("b") ((xdatea)) ((xdateb)))))
                x_assert_type_error.write
                  [xself xmsg xgenerator]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xctx)))
                          bogusForceDataize.write (((xlist)) ((((xgenerator)) ((((unsupported)) ((xargs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmsg)) ((((xstr)) (((xctx).xexception)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_is_line_junk_true.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xline)) ((((unsupported)) ("#") ("  ") (" #") ("# ") (" # ") (""))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdifflib).xIS_LINE_JUNK)) ((xline)))) ((((xrepr)) ((xline)))))
                xtest_is_line_junk_false.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xline)) ((((unsupported)) ("##") (" ##") ("## ") ("abc ") ("abc #") ("Mr. Moose is up!"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xdifflib).xIS_LINE_JUNK)) ((xline)))) ((((xrepr)) ((xline)))))
                xtest_is_line_junk_REDOS.write
                  [xself]
                    memory > xevil_input
                    seq > @
                      seq
                        xevil_input.write (("t".mul 1000000).add "##")
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xdifflib).xIS_LINE_JUNK)) ((xevil_input)))))
                xtest_is_character_junk_true.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xchar)) ((((unsupported)) (" ") ("t"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdifflib).xIS_CHARACTER_JUNK)) ((xchar)))) ((((xrepr)) ((xchar)))))
                xtest_is_character_junk_false.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xchar)) ((((unsupported)) ("a") ("#") ("n") ("f") ("r") ("v"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xdifflib).xIS_CHARACTER_JUNK)) ((xchar)))) ((((xrepr)) ((xchar)))))
            xtest_main.write
              []
                memory > xDoctests
                seq > @
                  seq
                    (((unsupported)) ((((xdifflib).xHtmlDiff).x_default_prefix)) (0))
                    xDoctests.write ((((xdoctest).xDocTestSuite)) ((xdifflib)))
                    bogusForceDataize.write (((xrun_unittest)) ((xTestWithAscii)) ((xTestAutojunk)) ((xTestSFpatches)) ((xTestSFbugs)) ((xTestOutputFormat)) ((xTestBytes)) ((xTestJunkAPIs)) ((xDoctests)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)