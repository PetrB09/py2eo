memory > xprint
memory > xhasattr
memory > xi
memory > xgc
memory > xlen
memory > x__name__
memory > xtest_listcomps
memory > xrange
memory > xsupport
memory > xsys
[] > test_listcomps
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdoctests
        memory > x__test__
        memory > xtest_main
        seq > @
          seq
            xdoctests.write (((unsupported)) 0)
            x__test__.write (((unsupported)) ("doctests") ((xdoctests)))
            xtest_main.write
              [xverbose]
                memory > xcounts
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    bogusForceDataize.write ((((xsupport).xrun_doctest)) ((xtest_listcomps)) ((xverbose)))
                    ((xverbose).and (((xhasattr)) ((xsys)) ("gettotalrefcount"))).if
                      seq
                        (((unsupported)) 0)
                        xcounts.write ((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xcounts)))))))
                          seq
                            bogusForceDataize.write ((((xsupport).xrun_doctest)) ((xtest_listcomps)) ((xverbose)))
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            (((unsupported)) ((((unsupported)) ((xcounts)) ((xi)))) (((((xsys).xgettotalrefcount)) 0)))
                        bogusForceDataize.write (((xprint)) ((xcounts)))
            ((x__name__).eq "__main__").if
              (((unsupported)) ((xtest_main)) (TRUE))