memory > xRuntimeError
memory > xdisable_gc
memory > xMyIt
memory > xStopIteration
memory > xoutput
memory > xsupport
memory > xgc_collect
memory > xe
memory > xunittest
memory > xobject
memory > xcaptured_stderr
memory > x__name__
memory > xcm
memory > xinspect
memory > xAttributeError
memory > xstack
memory > xGeneratorExit
memory > xlist
memory > xValueError
memory > xBroken
memory > xMyIter
memory > xrange
memory > xvalue
memory > xZeroDivisionError
memory > xf
memory > xMyErr
memory > xrepr
memory > xException
memory > xLunchError
memory > xx
memory > xi
memory > xv
memory > xMyGen
memory > xy
memory > xnext
[] > test_yield_from
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_delegation_of_send
        memory > xtest_exception_value_crash
        memory > xtest_throwing_GeneratorExit_into_subgenerator_that_yields
        memory > xtest_catching_exception_from_subgen_and_returning
        memory > xtest_delegating_throw_to_non_generator
        memory > xtest_delegation_of_next_to_non_generator
        memory > xtest_delegating_generators_claim_to_be_running
        memory > xtest_delegation_of_next_call_to_subgenerator
        memory > xtest_delegating_throw
        memory > xtest_throwing_GeneratorExit_into_subgen_that_returns
        memory > xtest_broken_getattr_handling
        memory > xtest_raising_exception_in_delegated_next_call
        memory > xtest_delegation_of_initial_next_to_subgenerator
        memory > xtest_attempting_to_send_to_non_generator
        memory > xtest_next_and_return_with_value
        memory > xtest_delegation_of_close_to_non_generator
        memory > xtest_send_tuple_with_custom_generator
        memory > xtest_generator_return_value
        memory > xtest_yield_from_empty
        memory > xtest_handing_exception_while_delegating_close
        memory > xtest_exception_in_initial_next_call
        memory > xtest_custom_iterator_return
        memory > xtest_value_attribute_of_StopIteration_exception
        memory > xtest_delegator_is_visible_to_debugger
        memory > xtest_close_with_cleared_frame
        memory > xtest_delegating_close
        memory > xtest_send_and_return_with_value
        memory > xtest_throwing_GeneratorExit_into_subgen_that_raises
        memory > xtest_returning_value_from_delegated_throw
        memory > xtest_attempted_yield_from_loop
        memory > xtest_conversion_of_sendNone_to_next
        memory > xtest_raising_exception_in_initial_next_call
        memory > xtest_handling_exception_while_delegating_send
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_delegation_of_initial_next_to_subgenerator.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                (((unsupported)) ((((xg2)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                (((unsupported)) (42))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        (((unsupported)) ((xx)) ((((xg1)) 0)))
                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Starting g2") ("Yielded 42") ("Finishing g2") ("Finishing g1"))))
                xtest_raising_exception_in_initial_next_call.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ((((xg2)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ((((xValueError)) ("spanish inquisition occurred"))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((xx)) ((((xg1)) 0)))
                            bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("spanish inquisition occurred"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Starting g2") ("Finishing g2") ("Finishing g1"))))
                xtest_delegation_of_next_call_to_subgenerator.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                (((unsupported)) ("g1 ham"))
                                (((unsupported)) ((((xg2)) 0)))
                                (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                (((unsupported)) ("g2 spam"))
                                (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        (((unsupported)) ((xx)) ((((xg1)) 0)))
                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Yielded g2 more spam") ("Finishing g2") ("Yielded g1 eggs") ("Finishing g1"))))
                xtest_raising_exception_in_delegated_next_call.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ("g1 ham"))
                                  (((unsupported)) ((((xg2)) 0)))
                                  (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ("g2 spam"))
                                  (((unsupported)) ((((xValueError)) ("hovercraft is full of eels"))))
                                  (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        (((unsupported)) ((xValueError)))
                          (((unsupported)) ((xx)) ((((xg1)) 0)))
                            bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("hovercraft is full of eels"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Finishing g2") ("Finishing g1"))))
                xtest_delegation_of_send.write
                  [xself]
                    memory > xg
                    memory > xtrace
                    memory > xx
                    memory > xg2
                    memory > xy
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            memory > xx
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                xx.write (((unsupported)) ("g1 ham"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g1 received %s".mod (((unsupported)) ((xx))))))
                                (((unsupported)) ((((xg2)) 0)))
                                xx.write (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g1 received %s".mod (((unsupported)) ((xx))))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            memory > xx
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                xx.write (((unsupported)) ("g2 spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g2 received %s".mod (((unsupported)) ((xx))))))
                                xx.write (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g2 received %s".mod (((unsupported)) ((xx))))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        xg.write (((xg1)) 0)
                        xy.write (((xnext)) ((xg)))
                        xx.write 1
                        (((unsupported)) ((xStopIteration)))
                          while.
                            1
                            [unused]
                              seq > @
                                seq
                                  xy.write ((((xg).xsend)) ((xx)))
                                  bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xy))))))
                                  (((unsupported)) ((xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("g1 received 1") ("Starting g2") ("Yielded g2 spam") ("g2 received 2") ("Yielded g2 more spam") ("g2 received 3") ("Finishing g2") ("Yielded g1 eggs") ("g1 received 4") ("Finishing g1"))))
                xtest_handling_exception_while_delegating_send.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    memory > xrun
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            memory > xx
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                xx.write (((unsupported)) ("g1 ham"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g1 received %s".mod (((unsupported)) ((xx))))))
                                (((unsupported)) ((((xg2)) 0)))
                                xx.write (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g1 received %s".mod (((unsupported)) ((xx))))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            memory > xx
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                xx.write (((unsupported)) ("g2 spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g2 received %s".mod (((unsupported)) ((xx))))))
                                (((unsupported)) ((((xValueError)) ("hovercraft is full of eels"))))
                                xx.write (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g2 received %s".mod (((unsupported)) ((xx))))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        xrun.write
                          []
                            memory > xx
                            memory > xy
                            memory > xg
                            seq > @
                              seq
                                xg.write (((xg1)) 0)
                                xy.write (((xnext)) ((xg)))
                                xx.write 1
                                (((unsupported)) ((xStopIteration)))
                                  while.
                                    1
                                    [unused]
                                      seq > @
                                        seq
                                          xy.write ((((xg).xsend)) ((xx)))
                                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xy))))))
                                          (((unsupported)) ((xx)) (1))
                                  bogusForceDataize.write ((((xtrace).xappend)) ("StopIteration"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xrun)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("g1 received 1") ("Starting g2") ("Yielded g2 spam") ("g2 received 2"))))
                xtest_delegating_close.write
                  [xself]
                    memory > xg
                    memory > xtrace
                    memory > xx
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ("g1 ham"))
                                  (((unsupported)) ((((xg2)) 0)))
                                  (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ("g2 spam"))
                                  (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        xg.write (((xg1)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (2))))
                          seq
                            xx.write (((xnext)) ((xg)))
                            bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xg).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Finishing g2") ("Finishing g1"))))
                xtest_handing_exception_while_delegating_close.write
                  [xself]
                    memory > xg
                    memory > xtrace
                    memory > xx
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ("g1 ham"))
                                  (((unsupported)) ((((xg2)) 0)))
                                  (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ("g2 spam"))
                                  (((unsupported)) ("g2 more spam"))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                                  (((unsupported)) ((((xValueError)) ("nybbles have exploded with delight"))))
                        (((unsupported)) ((xValueError)))
                          seq
                            xg.write (((xg1)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (2))))
                              seq
                                xx.write (((xnext)) ((xg)))
                                bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                            bogusForceDataize.write ((((xg).xclose)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("nybbles have exploded with delight"))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xe).x__context__)) ((xGeneratorExit)))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Finishing g2") ("Finishing g1"))))
                xtest_delegating_throw.write
                  [xself]
                    memory > xg
                    memory > xtrace
                    memory > xx
                    memory > xg2
                    memory > xe
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ("g1 ham"))
                                  (((unsupported)) ((((xg2)) 0)))
                                  (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ("g2 spam"))
                                  (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                        (((unsupported)) ((xValueError)))
                          seq
                            xg.write (((xg1)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (2))))
                              seq
                                xx.write (((xnext)) ((xg)))
                                bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                            xe.write (((xValueError)) ("tomato ejected"))
                            bogusForceDataize.write ((((xg).xthrow)) ((xe)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("tomato ejected"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Finishing g2") ("Finishing g1"))))
                xtest_value_attribute_of_StopIteration_exception.write
                  [xself]
                    memory > xe
                    memory > xtrace
                    memory > xpex
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xpex.write
                          [xe]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) (("%s: %s".mod (((unsupported)) ((((xe).x__class__).x__name__)) ((xe))))))
                                bogusForceDataize.write ((((xtrace).xappend)) (("value = %s".mod (((unsupported)) (((xe).xvalue))))))
                        xe.write (((xStopIteration)) 0)
                        bogusForceDataize.write (((xpex)) ((xe)))
                        xe.write (((xStopIteration)) ("spam"))
                        bogusForceDataize.write (((xpex)) ((xe)))
                        (((unsupported)) (((xe).xvalue)) ("eggs"))
                        bogusForceDataize.write (((xpex)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("StopIteration: ") ("value = None") ("StopIteration: spam") ("value = spam") ("StopIteration: spam") ("value = eggs"))))
                xtest_exception_value_crash.write
                  [xself]
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) ((((xg2)) 0)))
                        xg2.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ("g2"))
                                (((unsupported)) ((((unsupported)) (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xg1)) 0)))) ((((unsupported)) ("g2"))))
                xtest_generator_return_value.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            memory > xret
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                (((unsupported)) ("g1 ham"))
                                xret.write (((unsupported)) ((((xg2)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g2 returned %r".mod (((unsupported)) ((xret))))))
                                (((unsupported)) ((xv)) ((((unsupported)) (1) ((((unsupported)) (2))) ((((xStopIteration)) (3))))))
                                  seq
                                    xret.write (((unsupported)) ((((xg2)) ((xv)))))
                                    bogusForceDataize.write ((((xtrace).xappend)) (("g2 returned %r".mod (((unsupported)) ((xret))))))
                                (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          [xv]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                (((unsupported)) ("g2 spam"))
                                (((unsupported)) ("g2 more spam"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g2"))
                                (xv).if
                                  (((unsupported)) ((xv)))
                        (((unsupported)) ((xx)) ((((xg1)) 0)))
                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Yielded g2 more spam") ("Finishing g2") ("g2 returned None") ("Starting g2") ("Yielded g2 spam") ("Yielded g2 more spam") ("Finishing g2") ("g2 returned 1") ("Starting g2") ("Yielded g2 spam") ("Yielded g2 more spam") ("Finishing g2") ("g2 returned (2,)") ("Starting g2") ("Yielded g2 spam") ("Yielded g2 more spam") ("Finishing g2") ("g2 returned StopIteration(3)") ("Yielded g1 eggs") ("Finishing g1"))))
                xtest_delegation_of_next_to_non_generator.write
                  [xself]
                    memory > xtrace
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              (((unsupported)) ((((xrange)) (3))))
                        (((unsupported)) ((xx)) ((((xg)) 0)))
                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Yielded 0") ("Yielded 1") ("Yielded 2"))))
                xtest_conversion_of_sendNone_to_next.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xy
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              (((unsupported)) ((((xrange)) (3))))
                        xgi.write (((xg)) 0)
                        (((unsupported)) ((xx)) ((((xrange)) (3))))
                          seq
                            xy.write ((((xgi).xsend)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xtrace).xappend)) (("Yielded: %s".mod (((unsupported)) ((xy))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Yielded: 0") ("Yielded: 1") ("Yielded: 2"))))
                xtest_delegation_of_close_to_non_generator.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("starting g"))
                                  (((unsupported)) ((((xrange)) (3))))
                                  bogusForceDataize.write ((((xtrace).xappend)) ("g should not be here"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("finishing g"))
                        xgi.write (((xg)) 0)
                        bogusForceDataize.write (((xnext)) ((xgi)))
                        (((unsupported)) ((((xcaptured_stderr)) 0)) ((xoutput)))
                          bogusForceDataize.write ((((xgi).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xgetvalue)) 0)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("starting g") ("finishing g"))))
                xtest_delegating_throw_to_non_generator.write
                  [xself]
                    memory > xg
                    memory > xx
                    memory > xe
                    memory > xtrace
                    memory > xgi
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g"))
                                  (((unsupported)) ((((xrange)) (10))))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g"))
                        (((unsupported)) ((xValueError)))
                          seq
                            xgi.write (((xg)) 0)
                            (((unsupported)) ((xi)) ((((xrange)) (5))))
                              seq
                                xx.write (((xnext)) ((xgi)))
                                bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                            xe.write (((xValueError)) ("tomato ejected"))
                            bogusForceDataize.write ((((xgi).xthrow)) ((xe)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("tomato ejected"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g") ("Yielded 0") ("Yielded 1") ("Yielded 2") ("Yielded 3") ("Yielded 4") ("Finishing g"))))
                xtest_attempting_to_send_to_non_generator.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xy
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("starting g"))
                                  (((unsupported)) ((((xrange)) (3))))
                                  bogusForceDataize.write ((((xtrace).xappend)) ("g should not be here"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("finishing g"))
                        (((unsupported)) ((xAttributeError)))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write (((xnext)) ((xgi)))
                            (((unsupported)) ((xx)) ((((xrange)) (3))))
                              seq
                                xy.write ((((xgi).xsend)) (42))
                                bogusForceDataize.write ((((xtrace).xappend)) (("Should not have yielded: %s".mod (((unsupported)) ((xy))))))
                          bogusForceDataize.write ((((xself).xassertIn)) ("send") ((((unsupported)) (((xe).xargs)) (0))))
                          bogusForceDataize.write ((((xself).xfail)) ("was able to send into non-generator"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("starting g") ("finishing g"))))
                xtest_broken_getattr_handling.write
                  [xself]
                    memory > x__getattr__
                    memory > xgi
                    memory > x__next__
                    memory > xg
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (1))
                            x__getattr__.write
                              [xself xattr]
                                seq > @
                                  unsupported
                        xg.write
                          []
                            seq > @
                              (((unsupported)) ((((xBroken)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgi)))) (1))
                            bogusForceDataize.write ((((xgi).xsend)) (1))
                        (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgi)))) (1))
                            bogusForceDataize.write ((((xgi).xthrow)) ((xAttributeError)))
                        (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)) ((xcm)))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgi)))) (1))
                            bogusForceDataize.write ((((xgi).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xZeroDivisionError)) ((((xcm).xunraisable).xexc_type)))
                xtest_exception_in_initial_next_call.write
                  [xself]
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    memory > xrun
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("g1 about to yield from g2"))
                                (((unsupported)) ((((xg2)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("g1 should not be here"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) ((1.div 0)))
                        xrun.write
                          []
                            memory > xgi
                            seq > @
                              seq
                                xgi.write (((xg1)) 0)
                                bogusForceDataize.write (((xnext)) ((xgi)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xrun)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("g1 about to yield from g2"))))
                xtest_attempted_yield_from_loop.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("g1: starting"))
                                (((unsupported)) ("y1"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("g1: about to yield from g2"))
                                (((unsupported)) ((((xg2)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("g1 should not be here"))
                        xg2.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("g2: starting"))
                                (((unsupported)) ("y2"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("g2: about to yield from g1"))
                                (((unsupported)) ((xgi)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("g2 should not be here"))
                        (((unsupported)) ((xValueError)))
                          seq
                            xgi.write (((xg1)) 0)
                            (((unsupported)) ((xy)) ((xgi)))
                              bogusForceDataize.write ((((xtrace).xappend)) (("Yielded: %s".mod (((unsupported)) ((xy))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("generator already executing"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator didn't raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("g1: starting") ("Yielded: y1") ("g1: about to yield from g2") ("g2: starting") ("Yielded: y2") ("g2: about to yield from g1"))))
                xtest_returning_value_from_delegated_throw.write
                  [xself]
                    memory > xg
                    memory > xtrace
                    memory > xx
                    memory > xg2
                    memory > xe
                    memory > xg1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xg1.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g1"))
                                  (((unsupported)) ("g1 ham"))
                                  (((unsupported)) ((((xg2)) 0)))
                                  (((unsupported)) ("g1 eggs"))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Finishing g1"))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)) ((xLunchError)))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Starting g2"))
                                  (((unsupported)) ("g2 spam"))
                                  (((unsupported)) ("g2 more spam"))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Caught LunchError in g2"))
                                  (((unsupported)) ("g2 lunch saved"))
                                  (((unsupported)) ("g2 yet more spam"))
                        (((unsupported)) ((xException)))
                        xg.write (((xg1)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (2))))
                          seq
                            xx.write (((xnext)) ((xg)))
                            bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        xe.write (((xLunchError)) ("tomato ejected"))
                        bogusForceDataize.write ((((xg).xthrow)) ((xe)))
                        (((unsupported)) ((xx)) ((xg)))
                          bogusForceDataize.write ((((xtrace).xappend)) (("Yielded %s".mod (((unsupported)) ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Starting g1") ("Yielded g1 ham") ("Starting g2") ("Yielded g2 spam") ("Caught LunchError in g2") ("Yielded g2 yet more spam") ("Yielded g1 eggs") ("Finishing g1"))))
                xtest_next_and_return_with_value.write
                  [xself]
                    memory > xtrace
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xf.write
                          [xr]
                            memory > xgi
                            seq > @
                              seq
                                xgi.write (((xg)) ((xr)))
                                bogusForceDataize.write (((xnext)) ((xgi)))
                                (((unsupported)) ((xStopIteration)))
                                  seq
                                    bogusForceDataize.write ((((xtrace).xappend)) ("f resuming g"))
                                    bogusForceDataize.write (((xnext)) ((xgi)))
                                    bogusForceDataize.write ((((xtrace).xappend)) ("f SHOULD NOT BE HERE"))
                                  bogusForceDataize.write ((((xtrace).xappend)) (("f caught %r".mod (((unsupported)) ((xe))))))
                        xg.write
                          [xr]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("g starting"))
                                (((unsupported)) 0)
                                bogusForceDataize.write ((((xtrace).xappend)) (("g returning %r".mod (((unsupported)) ((xr))))))
                                (((unsupported)) ((xr)))
                        bogusForceDataize.write (((xf)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xf)) (1))
                        bogusForceDataize.write (((xf)) ((((unsupported)) (2))))
                        bogusForceDataize.write (((xf)) ((((xStopIteration)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("g starting") ("f resuming g") ("g returning None") ("f caught StopIteration()") ("g starting") ("f resuming g") ("g returning 1") ("f caught StopIteration(1)") ("g starting") ("f resuming g") ("g returning (2,)") ("f caught StopIteration((2,))") ("g starting") ("f resuming g") ("g returning StopIteration(3)") ("f caught StopIteration(StopIteration(3))"))))
                xtest_send_and_return_with_value.write
                  [xself]
                    memory > xtrace
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xf.write
                          [xr]
                            memory > xgi
                            seq > @
                              seq
                                xgi.write (((xg)) ((xr)))
                                bogusForceDataize.write (((xnext)) ((xgi)))
                                (((unsupported)) ((xStopIteration)))
                                  seq
                                    bogusForceDataize.write ((((xtrace).xappend)) ("f sending spam to g"))
                                    bogusForceDataize.write ((((xgi).xsend)) ("spam"))
                                    bogusForceDataize.write ((((xtrace).xappend)) ("f SHOULD NOT BE HERE"))
                                  bogusForceDataize.write ((((xtrace).xappend)) (("f caught %r".mod (((unsupported)) ((xe))))))
                        xg.write
                          [xr]
                            memory > xx
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("g starting"))
                                xx.write (((unsupported)) 0)
                                bogusForceDataize.write ((((xtrace).xappend)) (("g received %r".mod (((unsupported)) ((xx))))))
                                bogusForceDataize.write ((((xtrace).xappend)) (("g returning %r".mod (((unsupported)) ((xr))))))
                                (((unsupported)) ((xr)))
                        bogusForceDataize.write (((xf)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xf)) (1))
                        bogusForceDataize.write (((xf)) ((((unsupported)) (2))))
                        bogusForceDataize.write (((xf)) ((((xStopIteration)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("g starting") ("f sending spam to g") ("g received 'spam'") ("g returning None") ("f caught StopIteration()") ("g starting") ("f sending spam to g") ("g received 'spam'") ("g returning 1") ("f caught StopIteration(1)") ("g starting") ("f sending spam to g") ("g received 'spam'") ("g returning (2,)") ("f caught StopIteration((2,))") ("g starting") ("f sending spam to g") ("g received 'spam'") ("g returning StopIteration(3)") ("f caught StopIteration(StopIteration(3))"))))
                xtest_catching_exception_from_subgen_and_returning.write
                  [xself]
                    memory > xinner
                    memory > xtrace
                    memory > xg
                    memory > xouter
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xinner.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((xValueError)))
                                  (((unsupported)) (1))
                                  bogusForceDataize.write ((((xtrace).xappend)) ("inner caught ValueError"))
                                (((unsupported)) ((xvalue)))
                        xouter.write
                          []
                            memory > xv
                            seq > @
                              seq
                                xv.write (((unsupported)) ((((xinner)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) (("inner returned %r to outer".mod (((unsupported)) ((xv))))))
                                (((unsupported)) ((xv)))
                        (((unsupported)) ((xvalue)) ((((unsupported)) (2) ((((unsupported)) (2))) ((((xStopIteration)) (2))))))
                          seq
                            xtrace.write (((unsupported)) 0)
                            xg.write (((xouter)) 0)
                            bogusForceDataize.write ((((xtrace).xappend)) ((((xnext)) ((xg)))))
                            bogusForceDataize.write ((((xtrace).xappend)) ((((xrepr)) (((((xg).xthrow)) ((xValueError)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) (1) ("inner caught ValueError") (("inner returned %r to outer".mod (((unsupported)) ((xvalue))))) ((((xrepr)) ((xvalue)))))))
                xtest_throwing_GeneratorExit_into_subgen_that_returns.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xf.write
                          []
                            seq > @
                              (((unsupported)) ((xGeneratorExit)))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Enter f"))
                                  (((unsupported)) 0)
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Exit f"))
                                (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Enter g"))
                                (((unsupported)) ((((xf)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Exit g"))
                        (((unsupported)) ((xGeneratorExit)))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write (((xnext)) ((xgi)))
                            bogusForceDataize.write ((((xgi).xthrow)) ((xGeneratorExit)))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise GeneratorExit"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Enter g") ("Enter f"))))
                xtest_throwing_GeneratorExit_into_subgenerator_that_yields.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xf.write
                          []
                            seq > @
                              (((unsupported)) ((xGeneratorExit)))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Enter f"))
                                  (((unsupported)) 0)
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Exit f"))
                                (((unsupported)) 0)
                        xg.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Enter g"))
                                (((unsupported)) ((((xf)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Exit g"))
                        (((unsupported)) ((xRuntimeError)))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write (((xnext)) ((xgi)))
                            bogusForceDataize.write ((((xgi).xthrow)) ((xGeneratorExit)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("generator ignored GeneratorExit"))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise GeneratorExit"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Enter g") ("Enter f"))))
                xtest_throwing_GeneratorExit_into_subgen_that_raises.write
                  [xself]
                    memory > xgi
                    memory > xtrace
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtrace.write (((unsupported)) 0)
                        xf.write
                          []
                            seq > @
                              (((unsupported)) ((xGeneratorExit)))
                                seq
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Enter f"))
                                  (((unsupported)) 0)
                                  bogusForceDataize.write ((((xtrace).xappend)) ("Exit f"))
                                (((unsupported)) ((((xValueError)) ("Vorpal bunny encountered"))))
                        xg.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtrace).xappend)) ("Enter g"))
                                (((unsupported)) ((((xf)) 0)))
                                bogusForceDataize.write ((((xtrace).xappend)) ("Exit g"))
                        (((unsupported)) ((xValueError)))
                          seq
                            xgi.write (((xg)) 0)
                            bogusForceDataize.write (((xnext)) ((xgi)))
                            bogusForceDataize.write ((((xgi).xthrow)) ((xGeneratorExit)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ("Vorpal bunny encountered"))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xe).x__context__)) ((xGeneratorExit)))
                          bogusForceDataize.write ((((xself).xfail)) ("subgenerator failed to raise ValueError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((((unsupported)) ("Enter g") ("Enter f"))))
                xtest_yield_from_empty.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xg)) 0)))
                xtest_delegating_generators_claim_to_be_running.write
                  [xself]
                    memory > x__iter__
                    memory > xclose
                    memory > x__next__
                    memory > xres
                    memory > xtwo
                    memory > xone
                    memory > xg1
                    seq > @
                      seq
                        xone.write
                          []
                            seq > @
                              seq
                                (((unsupported)) (0))
                                (((unsupported)) ((((xtwo)) 0)))
                                (((unsupported)) (3))
                        xtwo.write
                          []
                            seq > @
                              seq
                                (((unsupported)) (1))
                                (((unsupported)) ((xValueError)))
                                  (((unsupported)) ((xg1)))
                                (((unsupported)) (2))
                        xg1.write (((xone)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xg1)))) ((((unsupported)) (0) (1) (2) (3))))
                        xg1.write (((xone)) 0)
                        xres.write (((unsupported)) ((((xnext)) ((xg1)))))
                        (((unsupported)) ((xStopIteration)))
                          while.
                            TRUE
                            [unused]
                              seq > @
                                bogusForceDataize.write ((((xres).xappend)) (((((xg1).xsend)) (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres)) ((((unsupported)) (0) (1) (2) (3))))
                        (((unsupported)) ((xException)))
                        xone.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((xMyErr)))
                                  (((unsupported)) (0))
                                (((unsupported)) ((((xtwo)) 0)))
                                (((unsupported)) ((xMyErr)))
                                  (((unsupported)) (3))
                        xtwo.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((xMyErr)))
                                  (((unsupported)) (1))
                                (((unsupported)) ((xValueError)))
                                  (((unsupported)) ((xg1)))
                                (((unsupported)) ((xMyErr)))
                                  (((unsupported)) (2))
                        xg1.write (((xone)) 0)
                        xres.write (((unsupported)) ((((xnext)) ((xg1)))))
                        (((unsupported)) ((xStopIteration)))
                          while.
                            TRUE
                            [unused]
                              seq > @
                                bogusForceDataize.write ((((xres).xappend)) (((((xg1).xthrow)) ((xMyErr)))))
                        (((unsupported)) ((xobject)))
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (42))
                            xclose.write
                              [xself_]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).xassertTrue)) (((xg1).xgi_running)))
                                    bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((xg1)))
                        xone.write
                          []
                            seq > @
                              (((unsupported)) ((((xMyIt)) 0)))
                        xg1.write (((xone)) 0)
                        bogusForceDataize.write (((xnext)) ((xg1)))
                        bogusForceDataize.write ((((xg1).xclose)) 0)
                xtest_delegator_is_visible_to_debugger.write
                  [xself]
                    memory > xgen
                    memory > xcall_stack
                    memory > xeggs
                    memory > xspam
                    seq > @
                      seq
                        xcall_stack.write
                          []
                            seq > @
                              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xf)) (3))) ((xf)) (((((xinspect).xstack)) 0)))))
                        xgen.write
                          []
                            seq > @
                              seq
                                (((unsupported)) ((((xcall_stack)) 0)))
                                (((unsupported)) ((((xcall_stack)) 0)))
                                (((unsupported)) ((((xcall_stack)) 0)))
                        xspam.write
                          [xg]
                            seq > @
                              (((unsupported)) ((xg)))
                        xeggs.write
                          [xg]
                            seq > @
                              (((unsupported)) ((xg)))
                        (((unsupported)) ((xstack)) ((((xspam)) ((((xgen)) 0)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ("spam") ((xstack)))))
                        (((unsupported)) ((xstack)) ((((xspam)) ((((xeggs)) ((((xgen)) 0)))))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) ("spam") ((xstack))).and (((unsupported)) ("eggs") ((xstack))))))
                xtest_custom_iterator_return.write
                  [xself]
                    memory > xgen
                    memory > x__iter__
                    memory > xret
                    memory > x__next__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xStopIteration)) (42))))
                        xgen.write
                          []
                            memory > xret
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xret.write (((unsupported)) ((((xMyIter)) 0)))
                        xret.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write (((xlist)) ((((xgen)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xret)) (42))
                xtest_close_with_cleared_frame.write
                  [xself]
                    memory > xouter
                    memory > xinner
                    memory > xouter_gen
                    memory > xinner_gen
                    memory > xinnermost
                    seq > @
                      seq
                        xinnermost.write
                          []
                            seq > @
                              (((unsupported)) 0)
                        xinner.write
                          []
                            memory > xouter_gen
                            seq > @
                              seq
                                xouter_gen.write (((unsupported)) 0)
                                (((unsupported)) ((((xinnermost)) 0)))
                        xouter.write
                          []
                            memory > xinner_gen
                            seq > @
                              seq
                                xinner_gen.write (((unsupported)) 0)
                                (((unsupported)) ((xinner_gen)))
                        (((unsupported)) ((((xdisable_gc)) 0)))
                          seq
                            xinner_gen.write (((xinner)) 0)
                            xouter_gen.write (((xouter)) 0)
                            bogusForceDataize.write ((((xouter_gen).xsend)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xouter_gen).xsend)) ((xinner_gen)))
                            bogusForceDataize.write ((((xouter_gen).xsend)) ((xouter_gen)))
                            (((unsupported)) ((((unsupported)) ((xouter_gen)))))
                            (((unsupported)) ((((unsupported)) ((xinner_gen)))))
                            bogusForceDataize.write (((xgc_collect)) 0)
                xtest_send_tuple_with_custom_generator.write
                  [xself]
                    memory > xouter
                    memory > x__next__
                    memory > xsend
                    memory > xv
                    memory > xg
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (42))
                            xsend.write
                              [xself xwhat]
                                memory > xv
                                seq > @
                                  seq
                                    (((unsupported)) 0)
                                    xv.write (xwhat)
                                    (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xouter.write
                          []
                            memory > xv
                            seq > @
                              xv.write (((unsupported)) ((((xMyGen)) 0)))
                        xg.write (((xouter)) 0)
                        bogusForceDataize.write (((xnext)) ((xg)))
                        xv.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xg).xsend)) ((((unsupported)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((((unsupported)) (1) (2) (3) (4))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)