memory > xFileNotFoundError
memory > xlogin
memory > xtempfile
memory > xopen
memory > xf
memory > xos
memory > xunittest
memory > xnetrc
memory > xtemp_fd
memory > xpassword
memory > xaccount
memory > xtextwrap
memory > xenviron
memory > xsupport
memory > xsys
memory > xfp
memory > xtemp_filename
memory > x__name__
[] > test_netrc
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_security
        memory > xtest_comment_at_end_of_machine_line_no_space
        memory > xtest_comment_before_machine_line
        memory > x_test_comment
        memory > xtest_password_with_internal_hash
        memory > xtest_comment_before_machine_line_hash_only
        memory > xtest_comment_before_machine_line_no_space
        memory > x_test_passwords
        memory > xtest_file_not_found_in_home
        memory > xtest_home_not_set
        memory > xtest_comment_at_end_of_machine_line
        memory > xtest_macros
        memory > xtest_password_with_trailing_hash
        memory > xtest_default
        memory > xtest_file_not_found_explicit
        memory > xmake_nrc
        memory > xtest_password_with_leading_hash
        memory > xtest_comment_at_end_of_machine_line_pass_has_hash
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmake_nrc.write
                  [xself xtest_data]
                    memory > xmode
                    seq > @
                      seq
                        xtest_data.write ((((xtextwrap).xdedent)) ((xtest_data)))
                        xmode.write "w"
                        (((xsys).xplatform).neq "cygwin").if
                          (((unsupported)) ((xmode)) ("t"))
                        (((unsupported)) ((((unsupported)) ((xtemp_fd)) ((xtemp_filename)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((((unsupported)) (((xos).xfdopen)) ((xtemp_fd)) ((xmode)))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)) ((xtest_data)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xunlink)) ((xtemp_filename)))
                        (((unsupported)) (((((xnetrc).xnetrc)) ((xtemp_filename)))))
                xtest_default.write
                  [xself]
                    memory > xnrc2
                    memory > xnrc
                    seq > @
                      seq
                        xnrc.write ((((xself).xmake_nrc)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("host1.domain.com"))) ((((unsupported)) ("log1") ("acct1") ("pass1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("default"))) ((((unsupported)) ("log2") ("None: is there a None literal in the EO language?") ("pass2"))))
                        xnrc2.write ((((xself).xmake_nrc)) (((((xnrc).x__repr__)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnrc).xhosts)) (((xnrc2).xhosts)))
                xtest_macros.write
                  [xself]
                    memory > xnrc
                    seq > @
                      seq
                        xnrc.write ((((xself).xmake_nrc)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnrc).xmacros)) ((((unsupported)) ("macro1") ((((unsupported)) ("line1n") ("line2n"))) ("macro2") ((((unsupported)) ("line3n") ("line4n"))))))
                x_test_passwords.write
                  [xself xnrc xpasswd]
                    seq > @
                      seq
                        xnrc.write ((((xself).xmake_nrc)) ((xnrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("host.domain.com"))) ((((unsupported)) ("log") ("acct") ((xpasswd)))))
                xtest_password_with_leading_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_passwords)) ((((unsupported)) 0)) ("#pass"))
                xtest_password_with_trailing_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_passwords)) ((((unsupported)) 0)) ("pass#"))
                xtest_password_with_internal_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_passwords)) ((((unsupported)) 0)) ("pa#ss"))
                x_test_comment.write
                  [xself xnrc xpasswd]
                    seq > @
                      (((unsupported)) 0)
                        xnrc.write ((((xself).xmake_nrc)) ((xnrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("foo.domain.com"))) ((((unsupported)) ("bar") ("None: is there a None literal in the EO language?") ((xpasswd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("bar.domain.com"))) ((((unsupported)) ("foo") ("None: is there a None literal in the EO language?") ("pass"))))
                xtest_comment_before_machine_line.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)))
                xtest_comment_before_machine_line_no_space.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)))
                xtest_comment_before_machine_line_hash_only.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)))
                xtest_comment_at_end_of_machine_line.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)))
                xtest_comment_at_end_of_machine_line_no_space.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)))
                xtest_comment_at_end_of_machine_line_pass_has_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_comment)) ((((unsupported)) 0)) ("#pass"))
                xtest_security.write
                  [xself]
                    memory > xd
                    memory > xfn
                    memory > xnrc
                    seq > @
                      (((unsupported)) 0)
                        xd.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xos).xmkdir)) ((xd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xd)))
                        xfn.write (((((xos).xpath).xjoin)) ((xd)) (".netrc"))
                        (((unsupported)) ((((xopen)) ((xfn)) ("wt"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenviron)))
                          seq
                            bogusForceDataize.write ((((xenviron).xset)) ("HOME") ((xd)))
                            bogusForceDataize.write ((((xos).xchmod)) ((xfn)) (384))
                            xnrc.write ((((xnetrc).xnetrc)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnrc).xhosts)) ("foo.domain.com"))) ((((unsupported)) ("bar") ("None: is there a None literal in the EO language?") ("pass"))))
                            bogusForceDataize.write ((((xos).xchmod)) ((xfn)) (402))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xnetrc).xNetrcParseError)) (((xnetrc).xnetrc)))
                xtest_file_not_found_in_home.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xos).xmkdir)) ((xd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xd)))
                        (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenviron)))
                          seq
                            bogusForceDataize.write ((((xenviron).xset)) ("HOME") ((xd)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xnetrc).xnetrc)))
                xtest_file_not_found_explicit.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xnetrc).xnetrc)) ("unlikely_netrc"))
                xtest_home_not_set.write
                  [xself]
                    memory > xfake_netrc_path
                    memory > xcalled
                    memory > xfake_expanduser
                    memory > xnrc
                    memory > xfake_home
                    memory > xorig_expanduser
                    seq > @
                      seq
                        xfake_home.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xos).xmkdir)) ((xfake_home)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xrmtree)) ((xfake_home)))
                        xfake_netrc_path.write (((((xos).xpath).xjoin)) ((xfake_home)) (".netrc"))
                        (((unsupported)) ((((xopen)) ((xfake_netrc_path)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("machine foo.domain.com login bar password pass"))
                        bogusForceDataize.write ((((xos).xchmod)) ((xfake_netrc_path)) (384))
                        xorig_expanduser.write (((xos).xpath).xexpanduser)
                        xcalled.write (((unsupported)) 0)
                        xfake_expanduser.write
                          [xs]
                            memory > xresult
                            seq > @
                              seq
                                bogusForceDataize.write ((((xcalled).xappend)) ((xs)))
                                (((unsupported)) (((((xsupport).xEnvironmentVarGuard)) 0)) ((xenviron)))
                                  seq
                                    bogusForceDataize.write ((((xenviron).xset)) ("HOME") ((xfake_home)))
                                    bogusForceDataize.write ((((xenviron).xset)) ("USERPROFILE") ((xfake_home)))
                                    xresult.write (((xorig_expanduser)) ((xs)))
                                    (((unsupported)) ((xresult)))
                        (((unsupported)) (((((xsupport).xswap_attr)) (((xos).xpath)) ("expanduser") ((xfake_expanduser)))))
                          seq
                            xnrc.write ((((xnetrc).xnetrc)) 0)
                            (((unsupported)) ((((unsupported)) ((xlogin)) ((xaccount)) ((xpassword)))) (((((xnrc).xauthenticators)) ("foo.domain.com"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xlogin)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xcalled)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)