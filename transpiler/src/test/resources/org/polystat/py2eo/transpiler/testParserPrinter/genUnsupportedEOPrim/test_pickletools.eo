memory > xpickle
memory > xrange
memory > xproto
memory > xOptimizedPickleTests
memory > xi
memory > xkwds
memory > xAbstractPickleTests
memory > xunittest
memory > xkwargs
memory > x__name__
memory > xMiscTestCase
memory > xstr
memory > xpickletools
memory > xsupport
[] > test_pickletools
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest__all__
        memory > xtest_optimize_binput_and_memoize
        memory > xtest_main
        memory > xloads
        memory > xtest_optimize_long_binget
        memory > xtest_pickle_to_2x
        memory > xtest_framed_write_sizes_with_delayed_writer
        memory > xdumps
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xAbstractPickleTests)))
              seq
                xdumps.write
                  [xself xarg xproto]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xpickletools).xoptimize)) (((((xpickle).xdumps)) ((xarg)) ((xproto)) ((((unsupported)) ((xkwargs)))))))))
                xloads.write
                  [xself xbuf]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xpickle).xloads)) ((xbuf)) ((((unsupported)) ((xkwds)))))))
                xtest_pickle_to_2x.write "None: is there a None literal in the EO language?"
                xtest_framed_write_sizes_with_delayed_writer.write "None: is there a None literal in the EO language?"
                xtest_optimize_long_binget.write
                  [xself]
                    memory > xdata
                    memory > xunpickled
                    memory > xpickled
                    memory > xunpickled2
                    memory > xpickled2
                    seq > @
                      seq
                        xdata.write (((unsupported)) ((((xstr)) ((xi)))) ((xi)) ((((xrange)) (257))))
                        bogusForceDataize.write ((((xdata).xappend)) ((((unsupported)) ((xdata)) ((1.neg)))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)) ((xdata)) ((xproto)))
                            xunpickled.write ((((xpickle).xloads)) ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xunpickled)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xunpickled)) ((1.neg)))) ((((unsupported)) ((xunpickled)) ((2.neg)))))
                            xpickled2.write ((((xpickletools).xoptimize)) ((xpickled)))
                            xunpickled2.write ((((xpickle).xloads)) ((xpickled2)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xunpickled2)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xunpickled2)) ((1.neg)))) ((((unsupported)) ((xunpickled2)) ((2.neg)))))
                            bogusForceDataize.write ((((xself).xassertNotIn)) (((xpickle).xLONG_BINGET)) ((xpickled2)))
                            bogusForceDataize.write ((((xself).xassertNotIn)) (((xpickle).xLONG_BINPUT)) ((xpickled2)))
                xtest_optimize_binput_and_memoize.write
                  [xself]
                    memory > xpickled2
                    memory > xunpickled2
                    memory > xunpickled
                    memory > xpickled
                    seq > @
                      seq
                        xpickled.write "x80x04x95x15x00x00x00x00x00x00x00]x94(x8cx04spamqx01x8cx03hamx94hx02e."
                        bogusForceDataize.write ((((xself).xassertIn)) (((xpickle).xBINPUT)) ((xpickled)))
                        xunpickled.write ((((xpickle).xloads)) ((xpickled)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xunpickled)) ((((unsupported)) ("spam") ("ham") ("ham"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xunpickled)) (1))) ((((unsupported)) ((xunpickled)) (2))))
                        xpickled2.write ((((xpickletools).xoptimize)) ((xpickled)))
                        xunpickled2.write ((((xpickle).xloads)) ((xpickled2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xunpickled2)) ((((unsupported)) ("spam") ("ham") ("ham"))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xunpickled2)) (1))) ((((unsupported)) ((xunpickled2)) (2))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((xpickle).xBINPUT)) ((xpickled2)))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)) ("bytes_types") ("UP_TO_NEWLINE") ("TAKEN_FROM_ARGUMENT1") ("TAKEN_FROM_ARGUMENT4") ("TAKEN_FROM_ARGUMENT4U") ("TAKEN_FROM_ARGUMENT8U") ("ArgumentDescriptor") ("read_uint1") ("read_uint2") ("read_int4") ("read_uint4") ("read_uint8") ("read_stringnl") ("read_stringnl_noescape") ("read_stringnl_noescape_pair") ("read_string1") ("read_string4") ("read_bytes1") ("read_bytes4") ("read_bytes8") ("read_bytearray8") ("read_unicodestringnl") ("read_unicodestring1") ("read_unicodestring4") ("read_unicodestring8") ("read_decimalnl_short") ("read_decimalnl_long") ("read_floatnl") ("read_float8") ("read_long1") ("read_long4") ("uint1") ("uint2") ("int4") ("uint4") ("uint8") ("stringnl") ("stringnl_noescape") ("stringnl_noescape_pair") ("string1") ("string4") ("bytes1") ("bytes4") ("bytes8") ("bytearray8") ("unicodestringnl") ("unicodestring1") ("unicodestring4") ("unicodestring8") ("decimalnl_short") ("decimalnl_long") ("floatnl") ("float8") ("long1") ("long4") ("StackObject") ("pyint") ("pylong") ("pyinteger_or_bool") ("pybool") ("pyfloat") ("pybytes_or_str") ("pystring") ("pybytes") ("pybytearray") ("pyunicode") ("pynone") ("pytuple") ("pylist") ("pydict") ("pyset") ("pyfrozenset") ("pybuffer") ("anyobject") ("markobject") ("stackslice") ("OpcodeInfo") ("opcodes") ("code2op"))
                      (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xpickletools)) ((xblacklist)))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xOptimizedPickleTests)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xMiscTestCase)))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)) ((xpickletools)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)