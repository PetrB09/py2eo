memory > xk
memory > xlist
memory > xBytesIO
memory > xorig
memory > xValueError
memory > xTestReadlineFile
memory > xrange
memory > xComparableException
memory > xp
memory > xException
memory > xx
memory > xsorted
memory > xos
memory > xexpect
memory > xstr
memory > xfs
memory > xtempfile
memory > xerr
memory > xnamedtuple
memory > xrepr
memory > xint
memory > xHackedSysModule
memory > xsupport
memory > xsys
memory > xbool
memory > xexp
memory > xNotImplemented
memory > xencoding
memory > xgetattr
memory > xv
memory > xStringIO
memory > xsetattr
memory > xunittest
memory > xisinstance
memory > xcgi
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_cgi
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestQSAndFormData
        memory > xfirst_elts
        memory > xtest_separator
        memory > xtest_parse_multipart_invalid_encoding
        memory > xparse_strict_test_cases
        memory > xtest_max_num_fields
        memory > xtest_fieldstorage_multipart_leading_whitespace
        memory > xtest_fieldstorage_readline
        memory > xnorm
        memory > x__str__
        memory > xPOSTDATA_W3
        memory > xtest_parse_multipart
        memory > xBOUNDARY_W3
        memory > xtest_fieldstorage_multipart_w3c
        memory > xPOSTDATA
        memory > x__eq__
        memory > xtest_strict
        memory > xdo_test
        memory > xargv
        memory > xtestQSAndFormDataFile
        memory > xtest_field_storage_multipart_no_content_length
        memory > x__getattr__
        memory > x_qs_result
        memory > xPOSTDATA_NON_ASCII
        memory > xtest_all
        memory > xtest_fieldstorage_invalid
        memory > xtest_fieldstorage_multipart_maxline
        memory > xtest_fieldstorage_multipart_non_ascii
        memory > xtest_parse_header
        memory > xtest_fieldstorage_multipart
        memory > xfirst_second_elts
        memory > xgen_result
        memory > xtest_fieldstorage_part_content_length
        memory > x__init__
        memory > xtest_log
        memory > xstdin
        memory > xtest_fieldstorage_as_context_manager
        memory > xtest_parse_multipart_without_content_length
        memory > xtestQSAndUrlEncode
        memory > xBOUNDARY
        memory > xtest_fieldstorage_properties
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
              seq
                xargv.write (((unsupported)) 0)
                xstdin.write ((xsys).xstdin)
            (((unsupported)) (((xcgi).xsys)) ((((xHackedSysModule)) 0)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xerr]
                    seq > @
                      (((unsupported)) (((xself).xerr)) ((xerr)))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xstr)) (((xself).xerr)))))
                x__eq__.write
                  [xself xanExc]
                    seq > @
                      seq
                        ((((xisinstance)) ((xanExc)) ((xException))).not).if
                          (((unsupported)) ((xNotImplemented)))
                        (((unsupported)) ((((((xself).xerr).x__class__).eq ((xanExc).x__class__)).and ((((xself).xerr).xargs).eq ((xanExc).xargs)))))
                x__getattr__.write
                  [xself xattr]
                    seq > @
                      (((unsupported)) ((((xgetattr)) (((xself).xerr)) ((xattr)))))
            xdo_test.write
              [xbuf xmethod]
                memory > xenv
                memory > xfp
                seq > @
                  seq
                    xenv.write (((unsupported)) 0)
                    ((xmethod).eq "GET").if
                      seq
                        xfp.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((((unsupported)) ((xenv)) ("REQUEST_METHOD"))) ("GET"))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("QUERY_STRING"))) ((xbuf)))
                      ((xmethod).eq "POST").if
                        seq
                          xfp.write (((xBytesIO)) (((((xbuf).xencode)) ("latin-1"))))
                          (((unsupported)) ((((unsupported)) ((xenv)) ("REQUEST_METHOD"))) ("POST"))
                          (((unsupported)) ((((unsupported)) ((xenv)) ("CONTENT_TYPE"))) ("application/x-www-form-urlencoded"))
                          (((unsupported)) ((((unsupported)) ((xenv)) ("CONTENT_LENGTH"))) ((((xstr)) ((((xlen)) ((xbuf)))))))
                        (((unsupported)) ((((xValueError)) (("unknown method: %s".mod (xmethod))))))
                    (((unsupported)) ((xException)))
                      (((unsupported)) ((((unsupported)) (((xcgi).xparse)) ((xfp)) ((xenv)) (1))))
                      (((unsupported)) ((((xComparableException)) ((xerr)))))
            xparse_strict_test_cases.write (((unsupported)) ((((unsupported)) ("") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("&") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("&&") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("=") ((((unsupported)) 0)))) ((((unsupported)) ("=&=") ((((unsupported)) 0)))) ((((unsupported)) ("=a") ((((unsupported)) ("") ((((unsupported)) ("a"))))))) ((((unsupported)) ("&=a") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("=a&") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("=&a") ((((xValueError)) ("bad query field: 'a'"))))) ((((unsupported)) ("b=a") ((((unsupported)) ("b") ((((unsupported)) ("a"))))))) ((((unsupported)) ("b+=a") ((((unsupported)) ("b ") ((((unsupported)) ("a"))))))) ((((unsupported)) ("a=b=a") ((((unsupported)) ("a") ((((unsupported)) ("b=a"))))))) ((((unsupported)) ("a=+b=a") ((((unsupported)) ("a") ((((unsupported)) (" b=a"))))))) ((((unsupported)) ("&b=a") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("b&=a") ((((xValueError)) ("bad query field: 'b'"))))) ((((unsupported)) ("a=a+b&b=b+c") ((((unsupported)) ("a") ((((unsupported)) ("a b"))) ("b") ((((unsupported)) ("b c"))))))) ((((unsupported)) ("a=a+b&a=b+a") ((((unsupported)) ("a") ((((unsupported)) ("a b") ("b a"))))))) ((((unsupported)) ("x=1&y=2.0&z=2-3.%2b0") ((((unsupported)) ("x") ((((unsupported)) ("1"))) ("y") ((((unsupported)) ("2.0"))) ("z") ((((unsupported)) ("2-3.+0"))))))) ((((unsupported)) ("Hbc5161168c542333633315dee1182227:key_store_seqid=400006&cuyer=r&view=bustomer&order_id=0bb2e248638833d48cb7fed300000f1b&expire=964546263&lobale=en-US&kid=130003.300038&ss=env") ((((unsupported)) ("Hbc5161168c542333633315dee1182227:key_store_seqid") ((((unsupported)) ("400006"))) ("cuyer") ((((unsupported)) ("r"))) ("expire") ((((unsupported)) ("964546263"))) ("kid") ((((unsupported)) ("130003.300038"))) ("lobale") ((((unsupported)) ("en-US"))) ("order_id") ((((unsupported)) ("0bb2e248638833d48cb7fed300000f1b"))) ("ss") ((((unsupported)) ("env"))) ("view") ((((unsupported)) ("bustomer"))))))) ((((unsupported)) ("group_id=5470&set=custom&_assigned_to=31392&_status=1&_category=100&SUBMIT=Browse") ((((unsupported)) ("SUBMIT") ((((unsupported)) ("Browse"))) ("_assigned_to") ((((unsupported)) ("31392"))) ("_category") ((((unsupported)) ("100"))) ("_status") ((((unsupported)) ("1"))) ("group_id") ((((unsupported)) ("5470"))) ("set") ((((unsupported)) ("custom"))))))))
            xnorm.write
              [xseq]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xsorted)) ((xseq)) ((xrepr)))))
            xfirst_elts.write
              [xlist]
                seq > @
                  (((unsupported)) ((((unsupported)) ((((unsupported)) ((xp)) (0))) ((xp)) ((xlist)))))
            xfirst_second_elts.write
              [xlist]
                seq > @
                  (((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xp)) (0))) ((((unsupported)) ((((unsupported)) ((xp)) (1))) (0))))) ((xp)) ((xlist)))))
            xgen_result.write
              [xdata xenviron]
                memory > xform
                memory > xresult
                memory > xencoding
                memory > xfake_stdin
                seq > @
                  seq
                    xencoding.write "latin-1"
                    xfake_stdin.write (((xBytesIO)) (((((xdata).xencode)) ((xencoding)))))
                    bogusForceDataize.write ((((xfake_stdin).xseek)) (0))
                    xform.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfake_stdin)) ((xenviron)) ((xencoding)))
                    xresult.write (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) (((((((xdict)) ((xform))).xitems)) 0)))
                      (((unsupported)) ((((unsupported)) ((xresult)) ((xk)))) ((((((xisinstance)) ((xv)) ((xlist))).and ((((xform).xgetlist)) ((xk)))).or ((xv).xvalue))))
                    (((unsupported)) ((xresult)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_parse_multipart.write
                  [xself]
                    memory > xresult
                    memory > xfp
                    memory > xexpected
                    memory > xenv
                    seq > @
                      seq
                        xfp.write (((xBytesIO)) (((((xPOSTDATA).xencode)) ("latin1"))))
                        xenv.write (((unsupported)) ("boundary") (((((xBOUNDARY).xencode)) ("latin1"))) ("CONTENT-LENGTH") ("558"))
                        xresult.write ((((xcgi).xparse_multipart)) ((xfp)) ((xenv)))
                        xexpected.write (((unsupported)) ("submit") ((((unsupported)) (" Add "))) ("id") ((((unsupported)) ("1234"))) ("file") ((((unsupported)) ("Testing 123.n"))) ("title") ((((unsupported)) (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_parse_multipart_without_content_length.write
                  [xself]
                    memory > xPOSTDATA
                    memory > xexpected
                    memory > xresult
                    memory > xenv
                    memory > xfp
                    seq > @
                      seq
                        xPOSTDATA.write (((unsupported)) 0)
                        xfp.write (((xBytesIO)) (((((xPOSTDATA).xencode)) ("latin1"))))
                        xenv.write (((unsupported)) ("boundary") (((("JfISa01".xencode)) ("latin1"))))
                        xresult.write ((((xcgi).xparse_multipart)) ((xfp)) ((xenv)))
                        xexpected.write (((unsupported)) ("submit-name") ((((unsupported)) ("just a stringn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_parse_multipart_invalid_encoding.write
                  [xself]
                    memory > xPOSTDATA
                    memory > xexpected
                    memory > xresult
                    memory > xenv
                    memory > xBOUNDARY
                    memory > xfp
                    seq > @
                      seq
                        xBOUNDARY.write "JfISa01"
                        xPOSTDATA.write (((unsupported)) 0)
                        xfp.write (((xBytesIO)) (((((xPOSTDATA).xencode)) ("utf8"))))
                        xenv.write (((unsupported)) ("boundary") (((((xBOUNDARY).xencode)) ("latin1"))) ("CONTENT-LENGTH") ((((xstr)) ((((xlen)) (((((xPOSTDATA).xencode)) ("utf8"))))))))
                        xresult.write (((unsupported)) (((xcgi).xparse_multipart)) ((xfp)) ((xenv)) ("ascii") ("surrogateescape"))
                        xexpected.write (((unsupported)) ("submit-name") ((((unsupported)) ("udce2udc98udc83"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("u2603".xencode)) ("utf8"))) (((((((unsupported)) ((((unsupported)) ((xresult)) ("submit-name"))) (0)).xencode)) ("utf8") ("surrogateescape"))))
                xtest_fieldstorage_properties.write
                  [xself]
                    memory > xfs
                    seq > @
                      seq
                        xfs.write ((((xcgi).xFieldStorage)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xfs)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("FieldStorage") ((((xrepr)) ((xfs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xfs)))) ((((xlist)) (((((xfs).xkeys)) 0)))))
                        bogusForceDataize.write (((((xfs).xlist).xappend)) ((((((xnamedtuple)) ("MockFieldStorage") ("name"))) ("fieldvalue"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xfs)))
                xtest_fieldstorage_invalid.write
                  [xself]
                    memory > xfs
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xcgi).xFieldStorage)) ("not-a-file-obj") ((((unsupported)) ("REQUEST_METHOD") ("PUT"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcgi).xFieldStorage)) ("foo") ("bar"))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((((unsupported)) ("content-type") ("text/plain"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xbool)) ((xfs)))
                xtest_strict.write
                  [xself]
                    memory > xexpect_val
                    memory > xd
                    memory > xenv
                    memory > xfs
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xorig)) ((xexpect)))) ((xparse_strict_test_cases)))
                        seq
                          xd.write (((xdo_test)) ((xorig)) ("GET"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xexpect)) (("Error parsing %s method GET".mod (((xrepr)) ((xorig))))))
                          xd.write (((xdo_test)) ((xorig)) ("POST"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xexpect)) (("Error parsing %s method POST".mod (((xrepr)) ((xorig))))))
                          xenv.write (((unsupported)) ("QUERY_STRING") ((xorig)))
                          xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xenv)))
                          (((xisinstance)) ((xexpect)) ((xdict))).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xexpect)))) ((((xlen)) ((xfs)))))
                              bogusForceDataize.write ((((xself).xassertCountEqual)) (((((xexpect).xkeys)) 0)) (((((xfs).xkeys)) 0)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xfs).xgetvalue)) ("nonexistent field") ("default"))) ("default"))
                              (((unsupported)) ((xkey)) (((((xexpect).xkeys)) 0)))
                                seq
                                  xexpect_val.write (((unsupported)) ((xexpect)) ((xkey)))
                                  bogusForceDataize.write ((((xself).xassertIn)) ((xkey)) ((xfs)))
                                  ((((xlen)) ((xexpect_val))).greater 1).if
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xfs).xgetvalue)) ((xkey)))) ((xexpect_val)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xfs).xgetvalue)) ((xkey)))) ((((unsupported)) ((xexpect_val)) (0))))
                xtest_separator.write
                  [xself]
                    memory > xexpect_val
                    memory > xenv
                    memory > xparse_semicolon
                    memory > xfs
                    seq > @
                      seq
                        xparse_semicolon.write (((unsupported)) ((((unsupported)) ("x=1;y=2.0") ((((unsupported)) ("x") ((((unsupported)) ("1"))) ("y") ((((unsupported)) ("2.0"))))))) ((((unsupported)) ("x=1;y=2.0;z=2-3.%2b0") ((((unsupported)) ("x") ((((unsupported)) ("1"))) ("y") ((((unsupported)) ("2.0"))) ("z") ((((unsupported)) ("2-3.+0"))))))) ((((unsupported)) (";") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) (";;") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("=;a") ((((xValueError)) ("bad query field: 'a'"))))) ((((unsupported)) (";b=a") ((((xValueError)) ("bad query field: ''"))))) ((((unsupported)) ("b;=a") ((((xValueError)) ("bad query field: 'b'"))))) ((((unsupported)) ("a=a+b;b=b+c") ((((unsupported)) ("a") ((((unsupported)) ("a b"))) ("b") ((((unsupported)) ("b c"))))))) ((((unsupported)) ("a=a+b;a=b+a") ((((unsupported)) ("a") ((((unsupported)) ("a b") ("b a"))))))))
                        (((unsupported)) ((((unsupported)) ((xorig)) ((xexpect)))) ((xparse_semicolon)))
                          seq
                            xenv.write (((unsupported)) ("QUERY_STRING") ((xorig)))
                            xfs.write (((unsupported)) (((xcgi).xFieldStorage)) (";") ((xenv)))
                            (((xisinstance)) ((xexpect)) ((xdict))).if
                              (((unsupported)) ((xkey)) (((((xexpect).xkeys)) 0)))
                                seq
                                  xexpect_val.write (((unsupported)) ((xexpect)) ((xkey)))
                                  bogusForceDataize.write ((((xself).xassertIn)) ((xkey)) ((xfs)))
                                  ((((xlen)) ((xexpect_val))).greater 1).if
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xfs).xgetvalue)) ((xkey)))) ((xexpect_val)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xfs).xgetvalue)) ((xkey)))) ((((unsupported)) ((xexpect_val)) (0))))
                xtest_log.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xcgi).xlog)) ("Testing"))
                        (((unsupported)) (((xcgi).xlogfp)) ((((xStringIO)) 0)))
                        bogusForceDataize.write ((((xcgi).xinitlog)) ("%s") ("Testing initlog 1"))
                        bogusForceDataize.write ((((xcgi).xlog)) ("%s") ("Testing log 2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xcgi).xlogfp).xgetvalue)) 0)) ("Testing initlog 1nTesting log 2n"))
                        (((((xos).xpath).xexists)) (((xos).xdevnull))).if
                          seq
                            (((unsupported)) (((xcgi).xlogfp)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((xcgi).xlogfile)) (((xos).xdevnull)))
                            bogusForceDataize.write ((((xcgi).xinitlog)) ("%s") ("Testing log 3"))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xcgi).xcloselog)))
                            bogusForceDataize.write ((((xcgi).xlog)) ("Testing log 4"))
                xtest_fieldstorage_readline.write
                  [xself]
                    memory > x__getattr__
                    memory > xfs
                    memory > xf
                    memory > x__init__
                    memory > xenv
                    memory > xreadline
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xfile]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xfile)) ((xfile)))
                                    (((unsupported)) (((xself).xnumcalls)) (0))
                            xreadline.write
                              [xself xsize]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((xself).xnumcalls)) (1))
                                    (xsize).if
                                      (((unsupported)) ((((((xself).xfile).xreadline)) ((xsize)))))
                                      (((unsupported)) ((((((xself).xfile).xreadline)) 0)))
                            x__getattr__.write
                              [xself xname]
                                memory > xfile
                                memory > xa
                                seq > @
                                  seq
                                    xfile.write (((unsupported)) (((xself).x__dict__)) ("file"))
                                    xa.write (((xgetattr)) ((xfile)) ((xname)))
                                    ((((xisinstance)) ((xa)) ((xint))).not).if
                                      bogusForceDataize.write (((xsetattr)) ((xself)) ((xname)) ((xa)))
                                    (((unsupported)) ((xa)))
                        xf.write (((xTestReadlineFile)) (((((xtempfile).xTemporaryFile)) ("wb+"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xf).xclose)))
                        bogusForceDataize.write ((((xf).xwrite)) ((("x".mul 256).mul 1024)))
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("PUT"))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xf)) ((xenv)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xfs).xfile).xclose)))
                        bogusForceDataize.write ((((xself).xassertGreater)) (((xf).xnumcalls)) (2))
                        bogusForceDataize.write ((((xf).xclose)) 0)
                xtest_fieldstorage_multipart.write
                  [xself]
                    memory > xgot
                    memory > xfs
                    memory > xfp
                    memory > xexpect
                    memory > xenv
                    seq > @
                      seq
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") (((("multipart/form-data; boundary={}".xformat)) ((xBOUNDARY)))) ("CONTENT_LENGTH") ("558"))
                        xfp.write (((xBytesIO)) (((((xPOSTDATA).xencode)) ("latin-1"))))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xfs).xlist)))) (4))
                        xexpect.write (((unsupported)) ((((unsupported)) ("name") ("id") ("filename") ("None: is there a None literal in the EO language?") ("value") ("1234"))) ((((unsupported)) ("name") ("title") ("filename") ("None: is there a None literal in the EO language?") ("value") (""))) ((((unsupported)) ("name") ("file") ("filename") ("test.txt") ("value") ("Testing 123.n"))) ((((unsupported)) ("name") ("submit") ("filename") ("None: is there a None literal in the EO language?") ("value") (" Add "))))
                        (((unsupported)) ((xx)) ((((xrange)) ((((xlen)) (((xfs).xlist)))))))
                          (((unsupported)) ((((unsupported)) ((xk)) ((xexp)))) (((((((unsupported)) ((xexpect)) ((xx))).xitems)) 0)))
                            seq
                              xgot.write (((xgetattr)) ((((unsupported)) (((xfs).xlist)) ((xx)))) ((xk)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xexp)))
                xtest_fieldstorage_multipart_leading_whitespace.write
                  [xself]
                    memory > xgot
                    memory > xfs
                    memory > xfp
                    memory > xexpect
                    memory > xenv
                    seq > @
                      seq
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") (((("multipart/form-data; boundary={}".xformat)) ((xBOUNDARY)))) ("CONTENT_LENGTH") ("560"))
                        xfp.write (((xBytesIO)) (("rn".add ((((xPOSTDATA).xencode)) ("latin-1")))))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xfs).xlist)))) (4))
                        xexpect.write (((unsupported)) ((((unsupported)) ("name") ("id") ("filename") ("None: is there a None literal in the EO language?") ("value") ("1234"))) ((((unsupported)) ("name") ("title") ("filename") ("None: is there a None literal in the EO language?") ("value") (""))) ((((unsupported)) ("name") ("file") ("filename") ("test.txt") ("value") ("Testing 123.n"))) ((((unsupported)) ("name") ("submit") ("filename") ("None: is there a None literal in the EO language?") ("value") (" Add "))))
                        (((unsupported)) ((xx)) ((((xrange)) ((((xlen)) (((xfs).xlist)))))))
                          (((unsupported)) ((((unsupported)) ((xk)) ((xexp)))) (((((((unsupported)) ((xexpect)) ((xx))).xitems)) 0)))
                            seq
                              xgot.write (((xgetattr)) ((((unsupported)) (((xfs).xlist)) ((xx)))) ((xk)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xexp)))
                xtest_fieldstorage_multipart_non_ascii.write
                  [xself]
                    memory > xgot
                    memory > xfs
                    memory > xfp
                    memory > xexpect
                    memory > xenv
                    seq > @
                      seq
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") (((("multipart/form-data; boundary={}".xformat)) ((xBOUNDARY)))) ("CONTENT_LENGTH") ("558"))
                        (((unsupported)) ((xencoding)) ((((unsupported)) ("iso-8859-1") ("utf-8"))))
                          seq
                            xfp.write (((xBytesIO)) (((((xPOSTDATA_NON_ASCII).xencode)) ((xencoding)))))
                            xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)) ((xencoding)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xfs).xlist)))) (1))
                            xexpect.write (((unsupported)) ((((unsupported)) ("name") ("id") ("filename") ("None: is there a None literal in the EO language?") ("value") ("xe7xf1x80"))))
                            (((unsupported)) ((xx)) ((((xrange)) ((((xlen)) (((xfs).xlist)))))))
                              (((unsupported)) ((((unsupported)) ((xk)) ((xexp)))) (((((((unsupported)) ((xexpect)) ((xx))).xitems)) 0)))
                                seq
                                  xgot.write (((xgetattr)) ((((unsupported)) (((xfs).xlist)) ((xx)))) ((xk)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xexp)))
                xtest_fieldstorage_multipart_maxline.write
                  [xself]
                    memory > xmaxline
                    memory > xcheck
                    seq > @
                      seq
                        xmaxline.write (((unsupported)) (1) (16))
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        xcheck.write
                          [xcontent]
                            memory > xenviron
                            memory > xdata
                            seq > @
                              seq
                                xdata.write (((((((unsupported)) 0).xreplace)) ("n") ("rn")).mod (xcontent))
                                xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("multipart/form-data; boundary=-123") ("REQUEST_METHOD") ("POST"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xgen_result)) ((xdata)) ((xenviron)))) ((((unsupported)) ("upload") (((((xcontent).xencode)) ("latin1"))))))
                        bogusForceDataize.write (((xcheck)) (("x".mul ((xmaxline).sub 1))))
                        bogusForceDataize.write (((xcheck)) ((("x".mul ((xmaxline).sub 1)).add "r")))
                        bogusForceDataize.write (((xcheck)) (((("x".mul ((xmaxline).sub 1)).add "r").add ("y".mul ((xmaxline).sub 1)))))
                xtest_fieldstorage_multipart_w3c.write
                  [xself]
                    memory > xgot
                    memory > xfs
                    memory > xfiles
                    memory > xfp
                    memory > xexpect
                    memory > xenv
                    seq > @
                      seq
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") (((("multipart/form-data; boundary={}".xformat)) ((xBOUNDARY_W3)))) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xPOSTDATA_W3)))))))
                        xfp.write (((xBytesIO)) (((((xPOSTDATA_W3).xencode)) ("latin-1"))))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xfs).xlist)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xfs).xlist)) (0)).xname)) ("submit-name"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xfs).xlist)) (0)).xvalue)) ("Larry"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xfs).xlist)) (1)).xname)) ("files"))
                        xfiles.write ((((unsupported)) (((xfs).xlist)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xfiles)))) (2))
                        xexpect.write (((unsupported)) ((((unsupported)) ("name") ("None: is there a None literal in the EO language?") ("filename") ("file1.txt") ("value") ("... contents of file1.txt ..."))) ((((unsupported)) ("name") ("None: is there a None literal in the EO language?") ("filename") ("file2.gif") ("value") ("...contents of file2.gif..."))))
                        (((unsupported)) ((xx)) ((((xrange)) ((((xlen)) ((xfiles)))))))
                          (((unsupported)) ((((unsupported)) ((xk)) ((xexp)))) (((((((unsupported)) ((xexpect)) ((xx))).xitems)) 0)))
                            seq
                              xgot.write (((xgetattr)) ((((unsupported)) ((xfiles)) ((xx)))) ((xk)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xgot)) ((xexp)))
                xtest_fieldstorage_part_content_length.write
                  [xself]
                    memory > xPOSTDATA
                    memory > xfs
                    memory > xenv
                    memory > xBOUNDARY
                    memory > xfp
                    seq > @
                      seq
                        xBOUNDARY.write "JfISa01"
                        xPOSTDATA.write (((unsupported)) 0)
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") (((("multipart/form-data; boundary={}".xformat)) ((xBOUNDARY)))) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xPOSTDATA)))))))
                        xfp.write (((xBytesIO)) (((((xPOSTDATA).xencode)) ("latin-1"))))
                        xfs.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xfs).xlist)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xfs).xlist)) (0)).xname)) ("submit-name"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xfs).xlist)) (0)).xvalue)) ("Larry"))
                xtest_field_storage_multipart_no_content_length.write
                  [xself]
                    memory > xenv
                    memory > xfp
                    memory > xfields
                    seq > @
                      seq
                        xfp.write (((xBytesIO)) ((((unsupported)) 0)))
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("POST") ("CONTENT_TYPE") ("multipart/form-data; boundary=MyBoundary") ("wsgi.input") ((xfp)))
                        xfields.write (((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((((((unsupported)) ((xfields)) ("my-arg")).xfile).xread)) 0)))) (5))
                xtest_fieldstorage_as_context_manager.write
                  [xself]
                    memory > xenv
                    memory > xfp
                    memory > xcontent
                    seq > @
                      seq
                        xfp.write (((xBytesIO)) (("x".mul 10)))
                        xenv.write (((unsupported)) ("REQUEST_METHOD") ("PUT"))
                        (((unsupported)) ((((unsupported)) (((xcgi).xFieldStorage)) ((xfp)) ((xenv)))) ((xfs)))
                          seq
                            xcontent.write (((((xfs).xfile).xread)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((xfs).xfile).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xfs).xfile).xclosed)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcontent)) (("x".mul 10)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ("I/O operation on closed file"))))
                          bogusForceDataize.write (((((xfs).xfile).xread)) 0)
                x_qs_result.write (((unsupported)) ("key1") ("value1") ("key2") ((((unsupported)) ("value2x") ("value2y"))) ("key3") ("value3") ("key4") ("value4"))
                xtestQSAndUrlEncode.write
                  [xself]
                    memory > xv
                    memory > xenviron
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "key2=value2x&key3=value3&key4=value4"
                        xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("application/x-www-form-urlencoded") ("QUERY_STRING") ("key1=value1&key2=value2y") ("REQUEST_METHOD") ("POST"))
                        xv.write (((xgen_result)) ((xdata)) ((xenviron)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).x_qs_result)) ((xv)))
                xtest_max_num_fields.write
                  [xself]
                    memory > xenviron
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((("&".xjoin)) (((((unsupported)) ("a=a")).mul 11)))
                        xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("application/x-www-form-urlencoded") ("REQUEST_METHOD") ("POST"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xcgi).xFieldStorage)) ((((xBytesIO)) (((((xdata).xencode)) 0)))) ((xenviron)) (10))
                        xdata.write (((unsupported)) 0)
                        xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("multipart/form-data; boundary=-123") ("QUERY_STRING") ("a=1&a=2") ("REQUEST_METHOD") ("POST"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xcgi).xFieldStorage)) ((((xBytesIO)) (((((xdata).xencode)) 0)))) ((xenviron)) (4))
                        (((unsupported)) (((xcgi).xFieldStorage)) ((((xBytesIO)) (((((xdata).xencode)) 0)))) ((xenviron)) (5))
                xtestQSAndFormData.write
                  [xself]
                    memory > xv
                    memory > xenviron
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) 0)
                        xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("multipart/form-data; boundary=-123") ("QUERY_STRING") ("key1=value1&key2=value2x") ("REQUEST_METHOD") ("POST"))
                        xv.write (((xgen_result)) ((xdata)) ((xenviron)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).x_qs_result)) ((xv)))
                xtestQSAndFormDataFile.write
                  [xself]
                    memory > xresult
                    memory > xv
                    memory > xenviron
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) 0)
                        xenviron.write (((unsupported)) ("CONTENT_LENGTH") ((((xstr)) ((((xlen)) ((xdata)))))) ("CONTENT_TYPE") ("multipart/form-data; boundary=-123") ("QUERY_STRING") ("key1=value1&key2=value2x") ("REQUEST_METHOD") ("POST"))
                        xresult.write (((((xself).x_qs_result).xcopy)) 0)
                        bogusForceDataize.write ((((xresult).xupdate)) ((((unsupported)) ("upload") ("this is the content of the fake filen"))))
                        xv.write (((xgen_result)) ((xdata)) ((xenviron)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xv)))
                xtest_parse_header.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("text/plain"))) ((((unsupported)) ("text/plain") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("text/vnd.just.made.this.up ; "))) ((((unsupported)) ("text/vnd.just.made.this.up") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("text/plain;charset=us-ascii"))) ((((unsupported)) ("text/plain") ((((unsupported)) ("charset") ("us-ascii"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("text/plain ; charset=\"us-ascii\""))) ((((unsupported)) ("text/plain") ((((unsupported)) ("charset") ("us-ascii"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("text/plain ; charset=\"us-ascii\"; another=opt"))) ((((unsupported)) ("text/plain") ((((unsupported)) ("charset") ("us-ascii") ("another") ("opt"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("attachment; filename=\"silly.txt\""))) ((((unsupported)) ("attachment") ((((unsupported)) ("filename") ("silly.txt"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("attachment; filename=\"strange;name\""))) ((((unsupported)) ("attachment") ((((unsupported)) ("filename") ("strange;name"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("attachment; filename=\"strange;name\";size=123;"))) ((((unsupported)) ("attachment") ((((unsupported)) ("filename") ("strange;name") ("size") ("123"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcgi).xparse_header)) ("form-data; name=\"files\"; filename=\"fo\\\"o;bar\""))) ((((unsupported)) ("form-data") ((((unsupported)) ("name") ("files") ("filename") ("fo\"o;bar"))))))
                xtest_all.write
                  [xself]
                    memory > xblacklist
                    seq > @
                      seq
                        xblacklist.write (((unsupported)) ("logfile") ("logfp") ("initlog") ("dolog") ("nolog") ("closelog") ("log") ("maxlen") ("valid_boundary"))
                        (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xcgi)) ((xblacklist)))
            xBOUNDARY.write "---------------------------721837373350705526688164684"
            xPOSTDATA.write (((unsupported)) 0)
            xPOSTDATA_NON_ASCII.write (((unsupported)) 0)
            xBOUNDARY_W3.write "AaB03x"
            xPOSTDATA_W3.write (((unsupported)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)