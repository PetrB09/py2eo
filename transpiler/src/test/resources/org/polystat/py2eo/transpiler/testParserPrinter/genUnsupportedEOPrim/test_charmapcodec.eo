memory > xUnicodeError
memory > xstr
memory > xtestcodec
memory > xcodecs
memory > xtuple
memory > xunittest
memory > x__name__
[] > test_charmapcodec
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_encodex
        memory > xtest_constructorx
        memory > xtest_constructory
        memory > xcodec_search_function
        memory > xtest_maptoundefined
        memory > xcodecname
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xcodec_search_function.write
              [xencoding]
                seq > @
                  seq
                    ((xencoding).eq "testcodec").if
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((xtuple)) (((((xtestcodec).xgetregentry)) 0)))))
                    (((unsupported)) ("None: is there a None literal in the EO language?"))
            bogusForceDataize.write ((((xcodecs).xregister)) ((xcodec_search_function)))
            xcodecname.write "testcodec"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_constructorx.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("abc") ((xcodecname)))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("xdef") ((xcodecname)))) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("defx") ((xcodecname)))) ("defabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("dxf") ((xcodecname)))) ("dabcf"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("dxfx") ((xcodecname)))) ("dabcfabc"))
                xtest_encodex.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("abc".xencode)) ((xcodecname)))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("xdef".xencode)) ((xcodecname)))) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("defx".xencode)) ((xcodecname)))) ("defabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("dxf".xencode)) ((xcodecname)))) ("dabcf"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("dxfx".xencode)) ((xcodecname)))) ("dabcfabc"))
                xtest_constructory.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("ydef") ((xcodecname)))) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("defy") ((xcodecname)))) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("dyf") ((xcodecname)))) ("df"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("dyfy") ((xcodecname)))) ("df"))
                xtest_maptoundefined.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) ((xstr)) ("abc001") ((xcodecname)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)