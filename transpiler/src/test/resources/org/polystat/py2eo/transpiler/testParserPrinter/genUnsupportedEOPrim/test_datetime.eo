memory > ximport_fresh_module
memory > xrun_unittest
memory > xtest
memory > xtype
memory > xset
memory > xissubclass
memory > xsuffix
memory > xmodname
memory > xisinstance
memory > x__name__
memory > xmodule
memory > xsys
memory > xsorted
memory > xcls
memory > xname
memory > xzip
memory > xunittest
[] > test_datetime
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsuit
        memory > xtest_classes
        memory > xtest_main
        memory > xtearDownClass
        memory > xsetUpClass
        memory > xall_test_classes
        memory > xTESTS
        memory > xtest_modules
        memory > xfast_tests
        memory > xpure_tests
        memory > xtest_suffixes
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            xTESTS.write "test.datetimetester"
            (((unsupported)) 0)
              seq
                xpure_tests.write (((unsupported)) ((ximport_fresh_module)) ((xTESTS)) ((((unsupported)) ("datetime") ("_strptime"))) ((((unsupported)) ("_datetime"))))
                xfast_tests.write (((unsupported)) ((ximport_fresh_module)) ((xTESTS)) ((((unsupported)) ("datetime") ("_datetime") ("_strptime"))))
              (((unsupported)) ((xmodname)) ((((unsupported)) ("datetime") ("_datetime") ("_strptime"))))
                bogusForceDataize.write (((((xsys).xmodules).xpop)) ((xmodname)) ("None: is there a None literal in the EO language?"))
            xtest_modules.write (((unsupported)) ((xpure_tests)) ((xfast_tests)))
            xtest_suffixes.write (((unsupported)) ("_Pure") ("_Fast"))
            xall_test_classes.write (((unsupported)) 0)
            (((unsupported)) ((((unsupported)) ((xmodule)) ((xsuffix)))) ((((xzip)) ((xtest_modules)) ((xtest_suffixes)))))
              seq
                xtest_classes.write (((unsupported)) 0)
                (((unsupported)) ((((unsupported)) ((xname)) ((xcls)))) ((((((xmodule).x__dict__).xitems)) 0)))
                  seq
                    ((((xisinstance)) ((xcls)) ((xtype))).not).if
                      (((unsupported)) 0)
                    (((xissubclass)) ((xcls)) (((xunittest).xTestCase))).if
                      bogusForceDataize.write ((((xtest_classes).xappend)) ((xcls)))
                      (((xissubclass)) ((xcls)) (((xunittest).xTestSuite))).if
                        seq
                          xsuit.write (((xcls)) 0)
                          bogusForceDataize.write ((((xtest_classes).xextend)) ((((unsupported)) ((((xtype)) ((xtest)))) ((xtest)) ((xsuit)))))
                xtest_classes.write (((unsupported)) ((xsorted)) ((((xset)) ((xtest_classes)))) ((((unsupported)) (((xcls).x__qualname__)))))
                (((unsupported)) ((xcls)) ((xtest_classes)))
                  seq
                    (((unsupported)) (((xcls).x__name__)) ((xsuffix)))
                    (((unsupported)) (((xcls).x__qualname__)) ((xsuffix)))
                    xsetUpClass.write
                      [xcls_ xmodule]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((xcls_).x_save_sys_modules)) ((((((xsys).xmodules).xcopy)) 0)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xTESTS)))) ((xmodule)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("datetime"))) (((xmodule).xdatetime_module)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("_strptime"))) (((xmodule).x_strptime)))
                    xtearDownClass.write
                      [xcls_]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write (((((xsys).xmodules).xclear)) 0)
                            bogusForceDataize.write (((((xsys).xmodules).xupdate)) (((xcls_).x_save_sys_modules)))
                    (((unsupported)) (((xcls).xsetUpClass)) ((xsetUpClass)))
                    (((unsupported)) (((xcls).xtearDownClass)) ((xtearDownClass)))
                bogusForceDataize.write ((((xall_test_classes).xextend)) ((xtest_classes)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write (((xrun_unittest)) ((((unsupported)) ((xall_test_classes)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)