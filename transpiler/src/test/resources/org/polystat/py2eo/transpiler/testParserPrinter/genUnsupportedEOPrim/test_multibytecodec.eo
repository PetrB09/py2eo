memory > xUnicodeError
memory > xexec
memory > xrange
memory > xchar
memory > x_multibytecodec
memory > xpending2
memory > xopen
memory > xcodecs
memory > xx
memory > xchr
memory > xTESTFN
memory > xunittest
memory > xenc
memory > xpending3
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xindex
memory > xenumerate
memory > xstr
memory > xio
memory > xIndexError
memory > x_
memory > xflags2
memory > xany
memory > xpending1
memory > xint
memory > xsupport
memory > xsys
memory > xUnicodeEncodeError
memory > xpending4
memory > xTestStateful
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_multibytecodec
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_issue5640
        memory > xexpected
        memory > xtest_setstate_validates_input_size
        memory > xtest_state_methods_with_buffer_state
        memory > xtest_init_segfault
        memory > xtest_dbcs
        memory > xtest_main
        memory > xtext
        memory > xALL_CJKENCODINGS
        memory > xtest_codingspec
        memory > xtest_stateful
        memory > xtest_streamwriter_strwrite
        memory > xtest_state_methods
        memory > xexpected_reset
        memory > xtest_utf_8
        memory > xtest_bug1728403
        memory > xtest_nullcoding
        memory > xtest_getstate_returns_expected_value
        memory > xtest_setstate_validates_input
        memory > xtest_iso2022_jp_g0
        memory > xtest_str_decode
        memory > xtest_g2
        memory > xtest_setstate_validates_input_bytes
        memory > xtest_state_methods_with_non_buffer_state
        memory > xtest_incrementalencoder_final
        memory > xtest_errorcallback_custom_ignore
        memory > xtest_errorcallback_longindex
        memory > xtest_gb18030
        memory > xtest_stateful_keep_buffer
        memory > xtest_iso2022
        memory > xencoding
        memory > xtest_stateless
        memory > xreset
        memory > xtest_incrementalencoder
        memory > xtest_bug1572832
        memory > xtest_decode_unicode
        memory > xtest_encode
        memory > xtest_dbcs_keep_buffer
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            xALL_CJKENCODINGS.write (((unsupported)) ("gb2312") ("gbk") ("gb18030") ("hz") ("big5hkscs") ("cp932") ("shift_jis") ("euc_jp") ("euc_jisx0213") ("shift_jisx0213") ("euc_jis_2004") ("shift_jis_2004") ("cp949") ("euc_kr") ("johab") ("big5") ("cp950") ("iso2022_jp") ("iso2022_jp_1") ("iso2022_jp_2") ("iso2022_jp_2004") ("iso2022_jp_3") ("iso2022_jp_ext") ("iso2022_kr"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_nullcoding.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) (((("".xdecode)) ((xenc)))) (""))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ("") ((xenc)))) (""))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((("".xencode)) ((xenc)))) (""))
                xtest_str_decode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("abcd".xencode)) ((xenc)))) ("abcd"))
                xtest_errorcallback_longindex.write
                  [xself]
                    memory > xdec
                    memory > xmyreplace
                    seq > @
                      seq
                        xdec.write ((((xcodecs).xgetdecoder)) ("euc-kr"))
                        xmyreplace.write (((unsupported)) ((((unsupported)) ("") ((((xsys).xmaxsize).add 1)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)) ("test.cjktest") ((xmyreplace)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) ((xdec)) ("applex92hamx93spam") ("test.cjktest"))
                xtest_errorcallback_custom_ignore.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (100.mul "udc00")
                        bogusForceDataize.write ((((xcodecs).xregister_error)) ("test.ignore") (((xcodecs).xignore_errors)))
                        (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xdata).xencode)) ((xenc)) ("test.ignore"))) (""))
                xtest_codingspec.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                          seq
                            xcode.write ((("# coding: {}n".xformat)) ((xenc)))
                            bogusForceDataize.write (((xexec)) ((xcode)))
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
                xtest_init_segfault.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((x_multibytecodec).xMultibyteStreamReader)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((x_multibytecodec).xMultibyteStreamWriter)) ("None: is there a None literal in the EO language?"))
                xtest_decode_unicode.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xcodecs).xgetdecoder)) ((xenc)))) (""))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_stateless.write
                  [xself]
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("cp949"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("ud30cuc774uc36c ub9c8uc744"))) ("xc6xc4xc0xccxbdxe3 xb8xb6xc0xbb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u2606u223cu2606") (TRUE))) ("xa1xd9xa1xadxa1xd9"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (FALSE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                xtest_stateful.write
                  [xself]
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("jisx0213"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6u0300"))) ("xabxc4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300"))) ("xabxc4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6") (TRUE))) ("xa9xdc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300"))) ("xabxdc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) ("xa9xdc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) (""))
                xtest_stateful_keep_buffer.write
                  [xself]
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("jisx0213"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6"))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xencoder).xencode)) ("u0123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300u00e6"))) ("xabxc4"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xencoder).xencode)) ("u0123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300"))) ("xabxdc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6"))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeEncodeError)) (((xencoder).xencode)) ("u0123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("") (TRUE))) ("xa9xdc"))
                xtest_state_methods_with_buffer_state.write
                  [xself]
                    memory > xpartial_state
                    memory > xencoder
                    memory > xinitial_state
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("euc_jis_2004"))) 0)
                        xinitial_state.write ((((xencoder).xgetstate)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6u0300"))) ("xabxc4"))
                        bogusForceDataize.write ((((xencoder).xsetstate)) ((xinitial_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6u0300"))) ("xabxc4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u00e6"))) (""))
                        xpartial_state.write ((((xencoder).xgetstate)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300"))) ("xabxc4"))
                        bogusForceDataize.write ((((xencoder).xsetstate)) ((xpartial_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u0300"))) ("xabxc4"))
                xtest_state_methods_with_non_buffer_state.write
                  [xself]
                    memory > xjp_state
                    memory > xencoder
                    memory > xen_state
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("iso2022_jp"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("z"))) ("z"))
                        xen_state.write ((((xencoder).xgetstate)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u3042"))) ("x1bx24x42x24x22"))
                        xjp_state.write ((((xencoder).xgetstate)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("z"))) ("x1bx28x42z"))
                        bogusForceDataize.write ((((xencoder).xsetstate)) ((xjp_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("u3042"))) ("x24x22"))
                        bogusForceDataize.write ((((xencoder).xsetstate)) ((xen_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("z"))) ("z"))
                xtest_getstate_returns_expected_value.write
                  [xself]
                    memory > xbuffer_state_encoder
                    memory > xnon_buffer_state_encoder
                    seq > @
                      seq
                        xbuffer_state_encoder.write ((((((xcodecs).xgetincrementalencoder)) ("euc_jis_2004"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuffer_state_encoder).xgetstate)) 0)) (0))
                        bogusForceDataize.write ((((xbuffer_state_encoder).xencode)) ("u00e6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuffer_state_encoder).xgetstate)) 0)) (((((xint).xfrom_bytes)) ("x02xc3xa6x00x00x00x00x00x00x00x00") ("little"))))
                        bogusForceDataize.write ((((xbuffer_state_encoder).xencode)) ("u0300"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xbuffer_state_encoder).xgetstate)) 0)) (0))
                        xnon_buffer_state_encoder.write ((((((xcodecs).xgetincrementalencoder)) ("iso2022_jp"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnon_buffer_state_encoder).xgetstate)) 0)) (((((xint).xfrom_bytes)) ("x00x42x42x00x00x00x00x00x00") ("little"))))
                        bogusForceDataize.write ((((xnon_buffer_state_encoder).xencode)) ("u3042"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnon_buffer_state_encoder).xgetstate)) 0)) (((((xint).xfrom_bytes)) ("x00xc2x42x00x00x00x00x00x00") ("little"))))
                xtest_setstate_validates_input_size.write
                  [xself]
                    memory > xpending_size_nine
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("euc_jp"))) 0)
                        xpending_size_nine.write ((((xint).xfrom_bytes)) ("x09x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00") ("little"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xencoder).xsetstate)) ((xpending_size_nine)))
                xtest_setstate_validates_input_bytes.write
                  [xself]
                    memory > xinvalid_utf8
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("euc_jp"))) 0)
                        xinvalid_utf8.write ((((xint).xfrom_bytes)) ("x01xffx00x00x00x00x00x00x00x00") ("little"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xencoder).xsetstate)) ((xinvalid_utf8)))
                xtest_issue5640.write
                  [xself]
                    memory > xencoder
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) ("shift-jis"))) ("backslashreplace"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("xff"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xencoder).xencode)) ("n"))) ("n"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_dbcs.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("cp949"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xc6xc4xc0xccxbd"))) ("ud30cuc774"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xe3 xb8xb6xc0xbb"))) ("uc36c ub9c8uc744"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) (""))) (""))
                xtest_dbcs_keep_buffer.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("cp949"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xc6xc4xc0"))) ("ud30c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xdecoder).xdecode)) ("") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xcc"))) ("uc774"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xc6xc4xc0"))) ("ud30c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xdecoder).xdecode)) ("xccxbd") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xcc"))) ("uc774"))
                xtest_iso2022.write
                  [xself]
                    memory > xdecoder
                    memory > xESC
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("iso2022-jp"))) 0)
                        xESC.write "x1b"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) (((xESC).add "(")))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("B") (TRUE))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) (((xESC).add "$")))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("B@$"))) ("u4e16"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("@$@"))) ("u4e16"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("$") (TRUE))) ("u4e16"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xreset)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("@$"))) ("@$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) (((xESC).add "$")))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xdecoder).xdecode)) ("") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("B@$"))) ("u4e16"))
                xtest_decode_unicode.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      (((unsupported)) ((xenc)) ((xALL_CJKENCODINGS)))
                        seq
                          xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ((xenc)))) 0)
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xdecoder).xdecode)) (""))
                xtest_state_methods.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("euc_jp"))) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xa4xa6"))) ("u3046"))
                        (((unsupported)) ((((unsupported)) ((xpending1)) ((x_)))) (((((xdecoder).xgetstate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpending1)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xa4"))) (""))
                        (((unsupported)) ((((unsupported)) ((xpending2)) ((xflags2)))) (((((xdecoder).xgetstate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpending2)) ("xa4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xa6"))) ("u3046"))
                        (((unsupported)) ((((unsupported)) ((xpending3)) ((x_)))) (((((xdecoder).xgetstate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpending3)) (""))
                        bogusForceDataize.write ((((xdecoder).xsetstate)) ((((unsupported)) ((xpending2)) ((xflags2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xdecode)) ("xa6"))) ("u3046"))
                        (((unsupported)) ((((unsupported)) ((xpending4)) ((x_)))) (((((xdecoder).xgetstate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpending4)) (""))
                        bogusForceDataize.write ((((xdecoder).xsetstate)) ((((unsupported)) ("abc") (123456789))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xdecoder).xgetstate)) 0)) ((((unsupported)) ("abc") (123456789))))
                xtest_setstate_validates_input.write
                  [xself]
                    memory > xdecoder
                    seq > @
                      seq
                        xdecoder.write ((((((xcodecs).xgetincrementaldecoder)) ("euc_jp"))) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xdecoder).xsetstate)) (123))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xdecoder).xsetstate)) ((((unsupported)) ("invalid") (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xdecoder).xsetstate)) ((((unsupported)) ("1234") ("invalid"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeError)) (((xdecoder).xsetstate)) ((((unsupported)) ("123456789") (0))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_bug1728403.write
                [xself]
                  memory > xf
                  seq > @
                    (((unsupported)) 0)
                      seq
                        xf.write (((xopen)) ((xTESTFN)) ("wb"))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xf).xwrite)) ("xa1"))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                        xf.write (((unsupported)) (((xcodecs).xopen)) ((xTESTFN)) ("cp949"))
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xUnicodeDecodeError)) (((xf).xread)) (2))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                      bogusForceDataize.write ((((xsupport).xunlink)) ((xTESTFN)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_gb18030.write
                  [xself]
                    memory > xs
                    memory > xc
                    seq > @
                      seq
                        xs.write ((((xio).xBytesIO)) 0)
                        xc.write ((((((xcodecs).xgetwriter)) ("gb18030"))) ((xs)))
                        bogusForceDataize.write ((((xc).xwrite)) ("123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123"))
                        bogusForceDataize.write ((((xc).xwrite)) ("U00012345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123x907x959"))
                        bogusForceDataize.write ((((xc).xwrite)) ("uac00u00ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123x907x959x827xcf5x810x851"))
                xtest_utf_8.write
                  [xself]
                    memory > xs
                    memory > xc
                    seq > @
                      seq
                        xs.write ((((xio).xBytesIO)) 0)
                        xc.write ((((((xcodecs).xgetwriter)) ("utf-8"))) ((xs)))
                        bogusForceDataize.write ((((xc).xwrite)) ("123"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123"))
                        bogusForceDataize.write ((((xc).xwrite)) ("U00012345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123xf0x92x8dx85"))
                        bogusForceDataize.write ((((xc).xwrite)) ("uac00u00ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("123xf0x92x8dx85xeaxb0x80xc2xac"))
                xtest_streamwriter_strwrite.write
                  [xself]
                    memory > xs
                    memory > xwr
                    seq > @
                      seq
                        xs.write ((((xio).xBytesIO)) 0)
                        xwr.write ((((((xcodecs).xgetwriter)) ("gb18030"))) ((xs)))
                        bogusForceDataize.write ((((xwr).xwrite)) ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) ("abcd"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_g2.write
                  [xself]
                    memory > xiso2022jp2
                    memory > xuni
                    seq > @
                      seq
                        xiso2022jp2.write "x1b(B:hu4:unitx1b.Ax1bNi de famille"
                        xuni.write ":hu4:unitxe9 de famille"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xiso2022jp2).xdecode)) ("iso2022-jp-2"))) ((xuni)))
                xtest_iso2022_jp_g0.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("x0e") (((("N{SOFT HYPHEN}".xencode)) ("iso-2022-jp-2"))))
                        (((unsupported)) ((xencoding)) ((((unsupported)) ("iso-2022-jp-2004") ("iso-2022-jp-3"))))
                          seq
                            xe.write ((("u3406".xencode)) ((xencoding)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((xany)) ((((unsupported)) (((xx).greater 128)) ((xx)) ((xe)))))))
                xtest_bug1572832.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((xrange)) (65536) (1114112))))
                        bogusForceDataize.write ((((((xchr)) ((xx))).xencode)) ("iso_2022_jp") ("ignore"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtext.write "u4E16u4E16"
                xencoding.write "iso-2022-jp"
                xexpected.write "x1b$B@$@$"
                xreset.write "x1b(B"
                xexpected_reset.write ((xexpected).add (xreset))
                xtest_encode.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xtext).xencode)) (((xself).xencoding)))) (((xself).xexpected_reset)))
                xtest_incrementalencoder.write
                  [xself]
                    memory > xencoder
                    memory > xoutput
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) (((xself).xencoding)))) 0)
                        xoutput.write ((("".xjoin)) ((((unsupported)) (((((xencoder).xencode)) ((xchar)))) ((xchar)) (((xself).xtext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) (((xself).xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xencoder).xencode)) ("") (TRUE))) (((xself).xreset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xencoder).xencode)) ("") (TRUE))) (""))
                xtest_incrementalencoder_final.write
                  [xself]
                    memory > xlast_index
                    memory > xencoder
                    memory > xoutput
                    seq > @
                      seq
                        xencoder.write ((((((xcodecs).xgetincrementalencoder)) (((xself).xencoding)))) 0)
                        xlast_index.write ((((xlen)) (((xself).xtext))).sub 1)
                        xoutput.write ((("".xjoin)) ((((unsupported)) (((((xencoder).xencode)) ((xchar)) (((xindex).eq (xlast_index))))) ((((unsupported)) ((xindex)) ((xchar)))) ((((xenumerate)) (((xself).xtext)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) (((xself).xexpected_reset)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xencoder).xencode)) ("") (TRUE))) (""))
            (((unsupported)) ((xTestStateful)))
              seq
                xtext.write "u804au804a"
                xencoding.write "hz"
                xexpected.write "~{ADAD"
                xreset.write "~}"
                xexpected_reset.write ((xexpected).add (xreset))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)) ((x__name__)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)