memory > xd
memory > ximport_fresh_module
memory > xk
memory > xinspect
memory > xthreading
memory > xrop
memory > xloader
memory > xis_resource_enabled
memory > xCUsabilityTest
memory > xrun_unittest
memory > xcopy
memory > xFormatTest
memory > xround
memory > xfilename
memory > xImplicitConstructionTest
memory > xmin
memory > xImportError
memory > xcomplex
memory > xAttributeError
memory > xc
memory > xopt
memory > xcond
memory > xc3
memory > xlop
memory > xexpected
memory > xall
memory > xpickle
memory > xlist
memory > xcoeff
memory > xContextInputValidation
memory > xIBMTestCases
memory > xCoverage
memory > xCFormatTest
memory > xSignatureTest
memory > xPyExplicitConstructionTest
memory > xCCoverage
memory > xenumerate
memory > xlocals
memory > xPyWhitebox
memory > xPyIBMTestCases
memory > xCWhitebox
memory > xValueError
memory > xsignal
memory > xsign
memory > xZ
memory > xstr
memory > xUserWarning
memory > xerror
memory > xc2
memory > xq
memory > xextra_flags
memory > xignore
memory > xself
memory > xnumbers
memory > xUsabilityTest
memory > xwarnings
memory > xcontext
memory > xPyArithmeticOperatorsTest
memory > xIGNORE_EXCEPTION_DETAIL
memory > xPythonAPItests
memory > xfmt
memory > xt
memory > xtemplate
memory > xexec
memory > xPyCoverage
memory > xrange
memory > xmath
memory > xCThreadingTest
memory > xother
memory > xflag
memory > x_testcapi
memory > xPyContextAPItests
memory > xArithmeticOperatorsTest
memory > xvalue
memory > xPyContextSubclassing
memory > xZeroDivisionError
memory > xoptparse
memory > xdivmod
memory > xeval
memory > xIndexError
memory > xrequires_docstrings
memory > xtrail
memory > x_
memory > xTEST_ALL
memory > xKeyError
memory > xhead
memory > xfn
memory > xproto
memory > xlead
memory > xmax
memory > xparam
memory > xContextAPItests
memory > xrandom
memory > xsym
memory > xThreadingTest
memory > xCFunctionality
memory > xopen
memory > xsig
memory > xfi
memory > xprint
memory > xri
memory > xtype
memory > xContextWithStatement
memory > xPyThreadingTest
memory > xf
memory > xset
memory > xCImplicitConstructionTest
memory > xrepr
memory > xint
memory > xException
memory > xr
memory > xX
memory > xhasattr
memory > xDEBUG
memory > xOverflowError
memory > xtail
memory > xx
memory > xPyFormatTest
memory > xCContextFlags
memory > xi
memory > xI
memory > xCContextInputValidation
memory > xoperator
memory > xPyFunctionality
memory > xPyContextFlags
memory > xPyUsabilityTest
memory > xs
memory > xsys
memory > xMyContext
memory > xCheckAttributes
memory > xkwds
memory > xbool
memory > xissubclass
memory > xTestFailed
memory > xm
memory > xtuple
memory > xexp
memory > xNotImplemented
memory > xsorted
memory > xlocale
memory > xfloat
memory > xchr
memory > xContextFlags
memory > xc4
memory > xcls
memory > xargs
memory > xCPythonAPItests
memory > xPySpecialContexts
memory > xos
memory > xdir
memory > xCSpecialContexts
memory > xenter_ctx
memory > xpow
memory > xgetattr
memory > xv
memory > xid
memory > xCIBMTestCases
memory > xPyContextWithStatement
memory > xSpecialContexts
memory > xCContextWithStatement
memory > xinput
memory > xctx
memory > xExplicitConstructionTest
memory > xe
memory > xti
memory > xformat
memory > xE
memory > x__file__
memory > xsetattr
memory > xattr
memory > xname
memory > xunittest
memory > xresult
memory > xy
memory > xhash
memory > xY
memory > xmap
memory > xn
memory > xobject
memory > xA
memory > xrnd
memory > xContextSubclassing
memory > xrun_doctest
memory > xCContextSubclassing
memory > xCContextAPItests
memory > xabs
memory > xop
memory > xPyPythonAPItests
memory > xisinstance
memory > xCArithmeticOperatorsTest
memory > xc1
memory > xexception
memory > xlen
memory > xMyDecimal
memory > xdict
memory > xCExplicitConstructionTest
memory > xArithmeticError
memory > xPyImplicitConstructionTest
memory > xPyContextInputValidation
memory > xTypeError
memory > xCHAR_MAX
memory > xdumper
memory > x__name__
[] > test_decimal
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_invalid_construction
        memory > xtest_next_toward
        memory > xROUND_05UP
        memory > xtest_flag_comparisons
        memory > xtest_create_decimal
        memory > xtest_localcontextarg
        memory > xeval_directive
        memory > xtest_exception_hierarchy
        memory > xC
        memory > xtest_hash_method
        memory > xtest_inspect_module
        memory > xtest_comparison_operators
        memory > xtest_explicit_from_list
        memory > xtest_multiply
        memory > xtest_py_decimal_id
        memory > xtest_conversions_from_int
        memory > xgetexceptions
        memory > xchange_max_exponent
        memory > xcfractions
        memory > xtest_nested_with_statements
        memory > xtest_c_context_errors
        memory > xtest_py_rescale
        memory > xtest_with_statements_gc3
        memory > xtest_tonum_methods
        memory > xeval_line
        memory > xdecimal
        memory > xTESTDATADIR
        memory > xtest_pickle
        memory > xtest_logb
        memory > xROUND_DOWN
        memory > xtest_implicit_from_Decimal
        memory > xtest_c_valid_context_extra
        memory > xtest_subclassing
        memory > xthfunc2
        memory > xRoundingModes
        memory > xtest_named_parameters
        memory > xtest_fma
        memory > xtest_flags_irrelevant
        memory > xtest_c_funcs
        memory > xtest_min_mag
        memory > xROUND_HALF_UP
        memory > xtest_module_attributes
        memory > xtest_float_comparison
        memory > xtest_context_repr
        memory > xtest_decimal_fraction_comparison
        memory > xinit
        memory > xchange_min_exponent
        memory > xtest_adjusted
        memory > xOrderedSignals
        memory > xtest_number_class
        memory > xtest_same_quantum
        memory > xtest_py_alternate_formatting
        memory > xtest_implicit_from_int
        memory > xtest_va_args_exceptions
        memory > xtest_c_context_templates
        memory > xtest_next_minus
        memory > xtest_with_statements_gc2
        memory > xtest_from_float
        memory > xtest_remainder
        memory > xtest_compare_total_mag
        memory > xtest_subtraction
        memory > xtest_copy_negate
        memory > xtest_powering
        memory > xtest_logical_invert
        memory > xtest_to_integral_value
        memory > xtest_from_tuple
        memory > xtest_py__round
        memory > xtest_decimal_float_comparison
        memory > xtest_c_integral
        memory > xtest_default_context
        memory > xtest_c_ieee_context
        memory > xtest_as_integer_ratio
        memory > xtest_explicit_from_string
        memory > xtest_subtract
        memory > xfile
        memory > xall_tests
        memory > xeval_equation
        memory > xtest_implicit_from_string
        memory > xtestdir
        memory > xtest_is_snan
        memory > xtest_c_context_errors_extra
        memory > xtest_explicit_context_create_from_float
        memory > xchange_precision
        memory > xtest_context_templates
        memory > xtest_main
        memory > xEXTRA_FUNCTIONALITY
        memory > xROUND_CEILING
        memory > xtest_copy_and_deepcopy_methods
        memory > xtest_float_operation_default
        memory > xtest_bignum
        memory > xtest_log10
        memory > xtest_implicit_from_None
        memory > xtest_unicode_digits
        memory > xtest_trunc
        memory > xtest_n_format
        memory > xtest_snan_to_float
        memory > xchange_clamp
        memory > xtest_shift
        memory > xtest_wide_char_separator_decimal_point
        memory > xtest_to_integral_exact
        memory > xtest_explicit_context_create_decimal
        memory > xtest_decimal_attributes
        memory > xtest_add
        memory > xtest_exact_conversion
        memory > xtest_is_zero
        memory > xtest_py_exact_power
        memory > xtest_implicit_context
        memory > xtest_remainder_near
        memory > xORIGINAL_CONTEXT
        memory > xskip_expected
        memory > xtest_rop
        memory > xtest_decimal_complex_comparison
        memory > xtest_power
        memory > xtest_canonical
        memory > xtest_divide
        memory > xtest_threading
        memory > xtest_addition
        memory > xtest_min_and_max_methods
        memory > xtest_internal_use_of_overridden_methods
        memory > xP
        memory > xsetUp
        memory > xpfractions
        memory > xtest_ln
        memory > xp
        memory > xtest_is_infinite
        memory > xtest_min
        memory > xROUND_HALF_EVEN
        memory > xtest_minus
        memory > xtest_c_signal_dict
        memory > xtest_with_statements_gc1
        memory > xtest_c_context_repr
        memory > xtest_c_input_restriction
        memory > xtest_divide_int
        memory > xtest_is_normal
        memory > xtest__clamp
        memory > xtest_constants
        memory > xtest_module
        memory > xEXTENDEDERRORTEST
        memory > xread_unlimited
        memory > xtest_as_nonzero
        memory > xtest_nan_comparisons
        memory > xtest_explicit_from_int
        memory > xtest_copy_decimal
        memory > xtest_eval_round_trip
        memory > xROUND_UP
        memory > xassert_signals
        memory > xtest_logical_xor
        memory > xtest_next_plus
        memory > xtest_c_valid_context
        memory > xtest_copy_abs
        memory > xtest_compare_signal
        memory > xtest_copy
        memory > xtest_context_subclassing
        memory > xtest_is_finite
        memory > xtest_tostring_methods
        memory > xtest_multiplication
        memory > xtest_localcontext
        memory > xorig_sys_decimal
        memory > xtest_none_args
        memory > xtest_from_legacy_strings
        memory > xtest_plus
        memory > xtest_as_tuple
        memory > xtest_is_signed
        memory > xtest_rounding_strings_interned
        memory > xROUND_HALF_DOWN
        memory > xtest_int
        memory > xtest_logical_or
        memory > xtest_float_operation
        memory > xeval_file
        memory > xtest_abc
        memory > xskip_if_extra_functionality
        memory > xtest_division
        memory > xtest_decimal_from_float_argument_type
        memory > xtest_complex
        memory > xtest_scaleb
        memory > xtest_explicit_from_Decimal
        memory > xfractions
        memory > xtest_compare
        memory > xtest_unary_operators
        memory > xtest_quantize
        memory > xtest_explicit_empty
        memory > xtest_sizeof
        memory > xROUND_FLOOR
        memory > xtest_context_attributes
        memory > xtest_radix
        memory > xrequires_extra_functionality
        memory > xtest_py_immutability_operations
        memory > xtest_equality_with_other_types
        memory > xtest_rotate
        memory > xtest_compare_total
        memory > xtest_is_subnormal
        memory > xtest_floor_division
        memory > xtest_divmod
        memory > xtest_floor_div_module
        memory > xtest_sqrt
        memory > xtest_c_format
        memory > xchange_rounding_method
        memory > xtest_is_nan
        memory > xtest_max_mag
        memory > xtest_max
        memory > xSignals
        memory > xdirectory
        memory > xtest_nan_to_float
        memory > xtest_round
        memory > xtest_inspect_types
        memory > xtest_copy_sign
        memory > xtest_normalize
        memory > xtest_is_qnan
        memory > xtest_invalid_context
        memory > xtest_c_context
        memory > xtest_explicit_from_tuples
        memory > xtest_explicit_from_float
        memory > xtest_to_sci_string
        memory > xtest_exp
        memory > xtest_logical_and
        memory > xtest_create_decimal_from_float
        memory > xtest_invalid_override
        memory > xtest_explicit_from_bool
        memory > xtest_explicit_from_None
        memory > xthfunc1
        memory > xtest_to_eng_string
        memory > xtest_c_round
        memory > xtest_abs
        memory > xtest_formatting
        memory > xtest_implicit_from_float
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xC.write (((unsupported)) ((ximport_fresh_module)) ("decimal") ((((unsupported)) ("_decimal"))))
            xP.write (((unsupported)) ((ximport_fresh_module)) ("decimal") ((((unsupported)) ("_decimal"))))
            xorig_sys_decimal.write (((unsupported)) (((xsys).xmodules)) ("decimal"))
            xcfractions.write (((unsupported)) ((ximport_fresh_module)) ("fractions") ((((unsupported)) ("fractions"))))
            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
            xpfractions.write (((unsupported)) ((ximport_fresh_module)) ("fractions") ((((unsupported)) ("fractions"))))
            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
            xfractions.write (((unsupported)) ((xC)) ((xcfractions)) ((xP)) ((xpfractions)))
            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xorig_sys_decimal)))
            xSignals.write (((unsupported)) ((xC)) (((xC).if (((xtuple)) (((((((((xC).xgetcontext)) 0).xflags).xkeys)) 0))) "None: is there a None literal in the EO language?")) ((xP)) ((((xtuple)) (((((((((xP).xgetcontext)) 0).xflags).xkeys)) 0)))))
            xOrderedSignals.write (((unsupported)) ((xC)) (((xC).if (((unsupported)) (((xC).xClamped)) (((xC).xRounded)) (((xC).xInexact)) (((xC).xSubnormal)) (((xC).xUnderflow)) (((xC).xOverflow)) (((xC).xDivisionByZero)) (((xC).xInvalidOperation)) (((xC).xFloatOperation))) "None: is there a None literal in the EO language?")) ((xP)) ((((unsupported)) (((xP).xClamped)) (((xP).xRounded)) (((xP).xInexact)) (((xP).xSubnormal)) (((xP).xUnderflow)) (((xP).xOverflow)) (((xP).xDivisionByZero)) (((xP).xInvalidOperation)) (((xP).xFloatOperation)))))
            xassert_signals.write
              [xcls xcontext xattr xexpected]
                memory > xd
                seq > @
                  seq
                    xd.write (((xgetattr)) ((xcontext)) ((xattr)))
                    bogusForceDataize.write ((((xcls).xassertTrue)) ((((xall)) ((((unsupported)) (((((unsupported)) ((xs)) ((xexpected))).if (((unsupported)) ((xd)) ((xs))) ((((unsupported)) ((xd)) ((xs))).not))) ((xs)) ((xd)))))))
            xROUND_UP.write ((xP).xROUND_UP)
            xROUND_DOWN.write ((xP).xROUND_DOWN)
            xROUND_CEILING.write ((xP).xROUND_CEILING)
            xROUND_FLOOR.write ((xP).xROUND_FLOOR)
            xROUND_HALF_UP.write ((xP).xROUND_HALF_UP)
            xROUND_HALF_DOWN.write ((xP).xROUND_HALF_DOWN)
            xROUND_HALF_EVEN.write ((xP).xROUND_HALF_EVEN)
            xROUND_05UP.write ((xP).xROUND_05UP)
            xRoundingModes.write (((unsupported)) ((xROUND_UP)) ((xROUND_DOWN)) ((xROUND_CEILING)) ((xROUND_FLOOR)) ((xROUND_HALF_UP)) ((xROUND_HALF_DOWN)) ((xROUND_HALF_EVEN)) ((xROUND_05UP)))
            xORIGINAL_CONTEXT.write (((unsupported)) ((xC)) (((xC).if (((((((xC).xgetcontext)) 0).xcopy)) 0) "None: is there a None literal in the EO language?")) ((xP)) ((((((((xP).xgetcontext)) 0).xcopy)) 0)))
            xinit.write
              [xm]
                memory > xDefaultTestContext
                seq > @
                  seq
                    ((xm).not).if
                      (((unsupported)) 0)
                    xDefaultTestContext.write (((unsupported)) (((xm).xContext)) (9) ((xROUND_HALF_EVEN)) (((((xdict).xfromkeys)) ((((unsupported)) ((xSignals)) ((xm)))) (0))))
                    bogusForceDataize.write ((((xm).xsetcontext)) ((xDefaultTestContext)))
            xTESTDATADIR.write "decimaltestdata"
            ((x__name__).eq "__main__").if
              xfile.write (((unsupported)) (((xsys).xargv)) (0))
              xfile.write (x__file__)
            xtestdir.write ((((((xos).xpath).xdirname)) ((xfile))).or ((xos).xcurdir))
            xdirectory.write ((((xtestdir).add ((xos).xsep)).add (xTESTDATADIR)).add ((xos).xsep))
            xskip_expected.write ((((((xos).xpath).xisdir)) ((xdirectory))).not)
            xEXTENDEDERRORTEST.write FALSE
            xEXTRA_FUNCTIONALITY.write ((((xhasattr)) ((xC)) ("DecClamped")).if TRUE FALSE)
            xrequires_extra_functionality.write ((((xunittest).xskipUnless)) ((xEXTRA_FUNCTIONALITY)) ("test requires build with -DEXTRA_FUNCTIONALITY"))
            xskip_if_extra_functionality.write ((((xunittest).xskipIf)) ((xEXTRA_FUNCTIONALITY)) ("test requires regular build"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcontext)) ((((((xself).xdecimal).xContext)) 0)))
                        (((unsupported)) (((xself).xreadcontext)) ((((((xself).xdecimal).xContext)) 0)))
                        (((unsupported)) (((xself).xignore_list)) ((((unsupported)) ("#"))))
                        (((unsupported)) (((xself).xskipped_test_ids)) ((((xset)) ((((unsupported)) ("scbx164") ("scbx165") ("expx901") ("expx902") ("expx903") ("expx905") ("lnx901") ("lnx902") ("lnx903") ("lnx905") ("logx901") ("logx902") ("logx903") ("logx905") ("powx1183") ("powx1184") ("powx4001") ("powx4002") ("powx4003") ("powx4005") ("powx4008") ("powx4010") ("powx4012") ("powx4014"))))))
                        (((xself).xdecimal).eq (xC)).if
                          seq
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("pwsx803"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("pwsx805"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("powx4302"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("powx4303"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("powx4342"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("powx4343"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("pwmx325"))
                            bogusForceDataize.write (((((xself).xskipped_test_ids).xadd)) ("pwmx326"))
                        (((unsupported)) (((xself).xChangeDict)) ((((unsupported)) ("precision") (((xself).xchange_precision)) ("rounding") (((xself).xchange_rounding_method)) ("maxexponent") (((xself).xchange_max_exponent)) ("minexponent") (((xself).xchange_min_exponent)) ("clamp") (((xself).xchange_clamp)))))
                        (((unsupported)) (((xself).xNameAdapter)) ((((unsupported)) ("and") ("logical_and") ("apply") ("_apply") ("class") ("number_class") ("comparesig") ("compare_signal") ("comparetotal") ("compare_total") ("comparetotmag") ("compare_total_mag") ("copy") ("copy_decimal") ("copyabs") ("copy_abs") ("copynegate") ("copy_negate") ("copysign") ("copy_sign") ("divideint") ("divide_int") ("invert") ("logical_invert") ("iscanonical") ("is_canonical") ("isfinite") ("is_finite") ("isinfinite") ("is_infinite") ("isnan") ("is_nan") ("isnormal") ("is_normal") ("isqnan") ("is_qnan") ("issigned") ("is_signed") ("issnan") ("is_snan") ("issubnormal") ("is_subnormal") ("iszero") ("is_zero") ("maxmag") ("max_mag") ("minmag") ("min_mag") ("nextminus") ("next_minus") ("nextplus") ("next_plus") ("nexttoward") ("next_toward") ("or") ("logical_or") ("reduce") ("normalize") ("remaindernear") ("remainder_near") ("samequantum") ("same_quantum") ("squareroot") ("sqrt") ("toeng") ("to_eng_string") ("tointegral") ("to_integral_value") ("tointegralx") ("to_integral_exact") ("tosci") ("to_sci_string") ("xor") ("logical_xor"))))
                        (((unsupported)) (((xself).xRoundingDict)) ((((unsupported)) ("ceiling") ((xROUND_CEILING)) ("down") ((xROUND_DOWN)) ("floor") ((xROUND_FLOOR)) ("half_down") ((xROUND_HALF_DOWN)) ("half_even") ((xROUND_HALF_EVEN)) ("half_up") ((xROUND_HALF_UP)) ("up") ((xROUND_UP)) ("05up") ((xROUND_05UP)))))
                        (((unsupported)) (((xself).xErrorNames)) ((((unsupported)) ("clamped") ((((xself).xdecimal).xClamped)) ("conversion_syntax") ((((xself).xdecimal).xInvalidOperation)) ("division_by_zero") ((((xself).xdecimal).xDivisionByZero)) ("division_impossible") ((((xself).xdecimal).xInvalidOperation)) ("division_undefined") ((((xself).xdecimal).xInvalidOperation)) ("inexact") ((((xself).xdecimal).xInexact)) ("invalid_context") ((((xself).xdecimal).xInvalidOperation)) ("invalid_operation") ((((xself).xdecimal).xInvalidOperation)) ("overflow") ((((xself).xdecimal).xOverflow)) ("rounded") ((((xself).xdecimal).xRounded)) ("subnormal") ((((xself).xdecimal).xSubnormal)) ("underflow") ((((xself).xdecimal).xUnderflow)))))
                        (((unsupported)) (((xself).xLogicalFunctions)) ((((unsupported)) ("is_canonical") ("is_finite") ("is_infinite") ("is_nan") ("is_normal") ("is_qnan") ("is_signed") ("is_snan") ("is_subnormal") ("is_zero") ("same_quantum"))))
                xread_unlimited.write
                  [xself xv xcontext]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        ((((xself).xdecimal).eq (xC)).and ((((xself).xdecimal).xMAX_EMAX).eq 425000000)).if
                          seq
                            bogusForceDataize.write (((((xself).xreadcontext).x_unsafe_setprec)) (1070000000))
                            bogusForceDataize.write (((((xself).xreadcontext).x_unsafe_setemax)) (1070000000))
                            bogusForceDataize.write (((((xself).xreadcontext).x_unsafe_setemin)) ((1070000000.neg)))
                            (((unsupported)) ((((((xself).xreadcontext).xcreate_decimal)) ((xv)))))
                          (((unsupported)) ((((((xself).xdecimal).xDecimal)) ((xv)) ((xcontext)))))
                xeval_file.write
                  [xself xfile]
                    memory > xt
                    memory > xline
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (xskip_expected).if
                          (((unsupported)) (((xunittest).xSkipTest)))
                        (((unsupported)) ((((xopen)) ((xfile)))) ((xf)))
                          (((unsupported)) ((xline)) ((xf)))
                            seq
                              xline.write (((((((xline).xreplace)) ("rn") ("")).xreplace)) ("n") (""))
                              (((unsupported)) ((((xself).xdecimal).xDecimalException)))
                                xt.write ((((xself).xeval_line)) ((xline)))
                                bogusForceDataize.write ((((xself).xfail)) (((("Exception \"".add (((xexception).x__class__).x__name__)).add "\" raised on line ").add (xline))))
                xeval_line.write
                  [xself xs]
                    seq > @
                      seq
                        (((((((xs).xfind)) (" -> ")).geq 0).and ((((unsupported)) ((xs)) ((((unsupported)) (2)))).neq "--")).and (((((xs).xstartswith)) ("  --")).not)).if
                          xs.write ((((((((unsupported)) (((((xs).xsplit)) ("->"))) (0)).add "->").add (((unsupported)) (((((((unsupported)) (((((xs).xsplit)) ("->"))) (1)).xsplit)) ("--"))) (0))).xstrip)) 0)
                          xs.write ((((((unsupported)) (((((xs).xsplit)) ("--"))) (0)).xstrip)) 0)
                        (((unsupported)) ((xignore)) (((xself).xignore_list)))
                          (((((xs).xfind)) ((xignore))).geq 0).if
                            (((unsupported)) 0)
                        ((xs).not).if
                          (((unsupported)) 0)
                          (((unsupported)) (":") ((xs))).if
                            (((unsupported)) (((((xself).xeval_directive)) ((xs)))))
                            (((unsupported)) (((((xself).xeval_equation)) ((xs)))))
                xeval_directive.write
                  [xself xs]
                    memory > xfunct
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xfunct)) ((xvalue)))) ((((unsupported)) ((((((((xx).xstrip)) 0).xlower)) 0)) ((xx)) (((((xs).xsplit)) (":"))))))
                        ((xfunct).eq "rounding").if
                          xvalue.write (((unsupported)) (((xself).xRoundingDict)) ((xvalue)))
                          (((unsupported)) ((xValueError)))
                            xvalue.write (((xint)) ((xvalue)))
                        xfunct.write (((((xself).xChangeDict).xget)) ((xfunct)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write (((xfunct)) ((xvalue)))
                xeval_equation.write
                  [xself xs]
                    memory > xFixQuotes
                    memory > xvals
                    memory > xexceptions
                    memory > xtheirexceptions
                    memory > xfname
                    memory > xresult
                    memory > xfunct
                    memory > xans
                    memory > xordered_errors
                    memory > xquote
                    memory > xconglomerate
                    memory > xSides
                    memory > xmyexceptions
                    memory > xL
                    memory > xvalstemp
                    memory > xval
                    memory > xv
                    memory > xid
                    seq > @
                      seq
                        (((xTEST_ALL).not).and (((((xrandom).xrandom)) 0).less 0.90)).if
                          (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xcontext).xclear_flags)) 0)
                        (((unsupported)) ((((unsupported)) ((xTypeError)) ((xAttributeError)) ((xIndexError)))))
                          seq
                            xSides.write ((((xs).xsplit)) ("->"))
                            xL.write (((((((((unsupported)) ((xSides)) (0)).xstrip)) 0).xsplit)) 0)
                            xid.write (((unsupported)) ((xL)) (0))
                            (xDEBUG).if
                              (((unsupported)) ((xprint)) ("Test ") ((xid)) (" "))
                            xfunct.write ((((((unsupported)) ((xL)) (1)).xlower)) 0)
                            xvalstemp.write (((unsupported)) ((xL)) ((((unsupported)) (2))))
                            xL.write (((((((((unsupported)) ((xSides)) (1)).xstrip)) 0).xsplit)) 0)
                            xans.write (((unsupported)) ((xL)) (0))
                            xexceptions.write (((unsupported)) ((xL)) ((((unsupported)) (1))))
                          (((unsupported)) ((((xself).xdecimal).xInvalidOperation)))
                        xFixQuotes.write
                          [xval]
                            seq > @
                              seq
                                xval.write (((((((xval).xreplace)) ("''") ("SingleQuote")).xreplace)) ("\"\"") ("DoubleQuote"))
                                xval.write (((((((xval).xreplace)) ("'") ("")).xreplace)) ("\"") (""))
                                xval.write (((((((xval).xreplace)) ("SingleQuote") ("'")).xreplace)) ("DoubleQuote") ("\""))
                                (((unsupported)) ((xval)))
                        (((unsupported)) ((xid)) (((xself).xskipped_test_ids))).if
                          (((unsupported)) 0)
                        xfname.write (((((xself).xNameAdapter).xget)) ((xfunct)) ((xfunct)))
                        ((xfname).eq "rescale").if
                          (((unsupported)) 0)
                        xfunct.write (((xgetattr)) (((xself).xcontext)) ((xfname)))
                        xvals.write (((unsupported)) 0)
                        xconglomerate.write ""
                        xquote.write 0
                        xtheirexceptions.write (((unsupported)) ((((unsupported)) (((xself).xErrorNames)) (((((xx).xlower)) 0)))) ((xx)) ((xexceptions)))
                        (((unsupported)) ((xexception)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                          (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xexception)))) (1))
                        (((unsupported)) ((xexception)) ((xtheirexceptions)))
                          (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xexception)))) (0))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xval)))) ((((xenumerate)) ((xvalstemp)))))
                          seq
                            ((((((xval).xcount)) ("'")).mod 2).eq 1).if
                              xquote.write (1.sub (xquote))
                            (xquote).if
                              seq
                                xconglomerate.write (((xconglomerate).add " ").add (xval))
                                (((unsupported)) 0)
                              seq
                                xval.write ((xconglomerate).add (xval))
                                xconglomerate.write ""
                            xv.write (((xFixQuotes)) ((xval)))
                            (((unsupported)) ((xfname)) ((((unsupported)) ("to_sci_string") ("to_eng_string")))).if
                              seq
                                (xEXTENDEDERRORTEST).if
                                  (((unsupported)) ((xerror)) ((xtheirexceptions)))
                                    seq
                                      (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (1))
                                      (((unsupported)) ((xerror)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                                        bogusForceDataize.write (((xfunct)) ((((((xself).xcontext).xcreate_decimal)) ((xv)))))
                                        bogusForceDataize.write ((((xself).xfail)) (("Raised %s in %s when %s disabled".mod (((unsupported)) ((xe)) ((xs)) ((xerror))))))
                                        bogusForceDataize.write ((((xself).xfail)) (("Did not raise %s in %s".mod (((unsupported)) ((xerror)) ((xs))))))
                                      (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (0))
                                xv.write (((((xself).xcontext).xcreate_decimal)) ((xv)))
                              xv.write ((((xself).xread_unlimited)) ((xv)) (((xself).xcontext)))
                            bogusForceDataize.write ((((xvals).xappend)) ((xv)))
                        xans.write (((xFixQuotes)) ((xans)))
                        ((xEXTENDEDERRORTEST).and (((unsupported)) ((xfname)) ((((unsupported)) ("to_sci_string") ("to_eng_string"))))).if
                          seq
                            (((unsupported)) ((xerror)) ((xtheirexceptions)))
                              seq
                                (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (1))
                                (((unsupported)) ((xerror)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                                  bogusForceDataize.write (((xfunct)) ((((unsupported)) ((xvals)))))
                                  bogusForceDataize.write ((((xself).xfail)) (("Raised %s in %s when %s disabled".mod (((unsupported)) ((xe)) ((xs)) ((xerror))))))
                                  bogusForceDataize.write ((((xself).xfail)) (("Did not raise %s in %s".mod (((unsupported)) ((xerror)) ((xs))))))
                                (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (0))
                            xordered_errors.write (((unsupported)) ((xe)) ((xe)) ((((unsupported)) ((xOrderedSignals)) (((xself).xdecimal)))) ((((unsupported)) ((xe)) ((xtheirexceptions)))))
                            (((unsupported)) ((xerror)) ((xordered_errors)))
                              seq
                                (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (1))
                                (((unsupported)) ((xerror)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                                  bogusForceDataize.write (((xfunct)) ((((unsupported)) ((xvals)))))
                                  bogusForceDataize.write ((((xself).xfail)) (("Raised %s in %s; expected %s".mod (((unsupported)) ((((xtype)) ((xe)))) ((xs)) ((xerror))))))
                                  bogusForceDataize.write ((((xself).xfail)) (("Did not raise %s in %s".mod (((unsupported)) ((xerror)) ((xs))))))
                            (((unsupported)) ((xerror)) ((xordered_errors)))
                              (((unsupported)) ((((unsupported)) ((((xself).xcontext).xtraps)) ((xerror)))) (0))
                        (xDEBUG).if
                          bogusForceDataize.write (((xprint)) ("--") (((xself).xcontext)))
                        (((unsupported)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                          seq
                            xresult.write (((xstr)) ((((xfunct)) ((((unsupported)) ((xvals)))))))
                            (((unsupported)) ((xfname)) (((xself).xLogicalFunctions))).if
                              xresult.write (((xstr)) ((((xint)) ((((xeval)) ((xresult)))))))
                          bogusForceDataize.write ((((xself).xfail)) (("Raised %s in %s".mod (((unsupported)) ((xerror)) ((xs))))))
                          seq
                            bogusForceDataize.write (((xprint)) ("ERROR:") ((xs)))
                            (((unsupported)) 0)
                        xmyexceptions.write ((((xself).xgetexceptions)) 0)
                        (((unsupported)) (((xmyexceptions).xsort)) ((xrepr)))
                        (((unsupported)) (((xtheirexceptions).xsort)) ((xrepr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xans)) (((("Incorrect answer for ".add (xs)).add " -- got ").add (xresult))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmyexceptions)) ((xtheirexceptions)) (((("Incorrect flags set in ".add (xs)).add " -- got ").add (((xstr)) ((xmyexceptions))))))
                xgetexceptions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xe)) ((xe)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))) ((((unsupported)) ((((xself).xcontext).xflags)) ((xe)))))))
                xchange_precision.write
                  [xself xprec]
                    seq > @
                      ((((xself).xdecimal).eq (xC)).and ((((xself).xdecimal).xMAX_PREC).eq 425000000)).if
                        bogusForceDataize.write (((((xself).xcontext).x_unsafe_setprec)) ((xprec)))
                        (((unsupported)) ((((xself).xcontext).xprec)) ((xprec)))
                xchange_rounding_method.write
                  [xself xrounding]
                    seq > @
                      (((unsupported)) ((((xself).xcontext).xrounding)) ((xrounding)))
                xchange_min_exponent.write
                  [xself xexp]
                    seq > @
                      ((((xself).xdecimal).eq (xC)).and ((((xself).xdecimal).xMAX_PREC).eq 425000000)).if
                        bogusForceDataize.write (((((xself).xcontext).x_unsafe_setemin)) ((xexp)))
                        (((unsupported)) ((((xself).xcontext).xEmin)) ((xexp)))
                xchange_max_exponent.write
                  [xself xexp]
                    seq > @
                      ((((xself).xdecimal).eq (xC)).and ((((xself).xdecimal).xMAX_PREC).eq 425000000)).if
                        bogusForceDataize.write (((((xself).xcontext).x_unsafe_setemax)) ((xexp)))
                        (((unsupported)) ((((xself).xcontext).xEmax)) ((xexp)))
                xchange_clamp.write
                  [xself xclamp]
                    seq > @
                      (((unsupported)) ((((xself).xcontext).xclamp)) ((xclamp)))
            (((unsupported)) ((xIBMTestCases)))
              xdecimal.write (xC)
            (((unsupported)) ((xIBMTestCases)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_explicit_empty.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) 0)) ((((xDecimal)) ("0"))))
                xtest_explicit_from_None.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xDecimal)) ("None: is there a None literal in the EO language?"))
                xtest_explicit_from_int.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    memory > xi
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) (45))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("45"))
                        xd.write (((xDecimal)) (500000123))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("500000123"))
                        xd.write (((xDecimal)) ((45.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-45"))
                        xd.write (((xDecimal)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("0"))
                        (((unsupported)) ((xn)) ((((xrange)) (0) (32))))
                          (((unsupported)) ((xsign)) ((((unsupported)) ((1.neg)) (1))))
                            (((unsupported)) ((xx)) ((((xrange)) ((5.neg)) (5))))
                              seq
                                xi.write ((xsign).mul ((((unsupported)) (2) ((xn))).add (xx)))
                                xd.write (((xDecimal)) ((xi)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ((((xstr)) ((xi)))))
                xtest_explicit_from_string.write
                  [xself]
                    memory > xlocalcontext
                    memory > xDecimal
                    memory > xInvalidOperation
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) (""))))) ("NaN"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("45"))))) ("45"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("45.34"))))) ("45.34"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("45e2"))))) ("4.5E+3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("ugly"))))) ("NaN"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("1.3E4 n"))))) ("1.3E+4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("  -7.89"))))) ("-7.89"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("  3.45679  "))))) ("3.45679"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("1_3.3e4_0"))))) ("1.33E+41"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ("1_0_0_0"))))) ("1000"))
                        (((unsupported)) ((xlead)) ((((unsupported)) ("") (" ") ("u00a0") ("u205f"))))
                          (((unsupported)) ((xtrail)) ((((unsupported)) ("") (" ") ("u00a0") ("u205f"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((((xlead).add "9.311E+28").add (xtrail))))))) ("9.311E+28"))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("xyz"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xDecimal)) ("1234") ("x") ("y"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("1u00a02u00a03"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("u00a01u00a02u00a0"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("u00a0"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("u00a0u00a0"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("12u00003"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("1_2_u00003"))
                xtest_from_legacy_strings.write
                  [xself]
                    memory > xs
                    memory > xDecimal
                    memory > xcontext
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xcontext.write (((((xself).xdecimal).xContext)) 0)
                        xs.write ((((x_testcapi).xunicode_legacy_string)) ("9.999999"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((xs)))))) ("9.999999"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xcontext).xcreate_decimal)) ((xs)))))) ("9.999999"))
                xtest_explicit_from_tuples.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("0"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (5))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-45"))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (4) (5) (3) (4))) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("45.34"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.34913534E-17"))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) 0)) ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("Infinity"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (8) ((((unsupported)) (4) (3) (4) (9) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) (4) (3) (4) (9) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) ((((xDecimal)) (1))) ((((unsupported)) (4) (3) (4) (9) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1))) ("wrong!"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1))) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1))) ("1"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ("xyz") (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) ("None: is there a None literal in the EO language?") (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) ((3.neg)) (4) (9) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (10) (4) (9) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) ("a") (1))) (2))))
                xtest_explicit_from_list.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("0"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.34913534E-17"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.34913534E-17"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.34913534E-17"))
                xtest_explicit_from_bool.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xbool)) ((((xDecimal)) (0))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xbool)) ((((xDecimal)) (1))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) (FALSE))) ((((xDecimal)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) (TRUE))) ((((xDecimal)) (1))))
                xtest_explicit_from_Decimal.write
                  [xself]
                    memory > xDecimal
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) (45))
                        xe.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("45"))
                        xd.write (((xDecimal)) (500000123))
                        xe.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("500000123"))
                        xd.write (((xDecimal)) ((45.neg)))
                        xe.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("-45"))
                        xd.write (((xDecimal)) (0))
                        xe.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("0"))
                xtest_explicit_from_float.write
                  [xself]
                    memory > xx
                    memory > xDecimal
                    memory > xr
                    seq > @
                      (((unsupported)) 0)
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xr.write (((xDecimal)) (0.1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xr)))) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xr)))) ("0.1000000000000000055511151231257827021181583404541015625"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ((((xfloat)) ("nan")))).xis_qnan)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ((((xfloat)) ("inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ((((xfloat)) ("-inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((((xfloat)) ("nan"))))))) ((((xstr)) ((((xDecimal)) ("NaN"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((((xfloat)) ("inf"))))))) ((((xstr)) ((((xDecimal)) ("Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((((xfloat)) ("-inf"))))))) ((((xstr)) ((((xDecimal)) ("-Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((((xfloat)) ("-0.0"))))))) ((((xstr)) ((((xDecimal)) ("-0"))))))
                        (((unsupported)) ((xi)) ((((xrange)) (200))))
                          seq
                            xx.write (((((xrandom).xexpovariate)) (0.01)).mul ((((((xrandom).xrandom)) 0).mul 2.0).sub 1.0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xfloat)) ((((xDecimal)) ((xx)))))))
                xtest_explicit_context_create_decimal.write
                  [xself]
                    memory > xd
                    memory > xprevdec
                    memory > xnc
                    memory > xInvalidOperation
                    memory > xDecimal
                    memory > xRounded
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xRounded.write (((xself).xdecimal).xRounded)
                        xnc.write ((((xcopy).xcopy)) ((((((xself).xdecimal).xgetcontext)) 0)))
                        (((unsupported)) (((xnc).xprec)) (3))
                        xd.write (((xDecimal)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("0"))
                        xd.write ((((xnc).xcreate_decimal)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("0"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xnc).xcreate_decimal)) ("None: is there a None literal in the EO language?"))
                        xd.write ((((xnc).xcreate_decimal)) (456))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnc).xcreate_decimal)) (45678))) (((((xnc).xcreate_decimal)) ("457E+2"))))
                        xd.write (((xDecimal)) ("456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("456789"))
                        xd.write ((((xnc).xcreate_decimal)) ("456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("4.57E+5"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("3.14n"))))) ("NaN"))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.34913534E-17"))
                        xd.write ((((xnc).xcreate_decimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("-4.35E-17"))
                        xprevdec.write (((xDecimal)) (500000123))
                        xd.write (((xDecimal)) ((xprevdec)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("500000123"))
                        xd.write ((((xnc).xcreate_decimal)) ((xprevdec)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("5.00E+8"))
                        (((unsupported)) (((xnc).xprec)) (28))
                        (((unsupported)) ((((unsupported)) (((xnc).xtraps)) ((xInvalidOperation)))) (TRUE))
                        (((unsupported)) ((xv)) ((((unsupported)) ((((((unsupported)) (2) (63)).neg).sub 1)) (((((unsupported)) (2) (63)).neg)) ((((((unsupported)) (2) (31)).neg).sub 1)) (((((unsupported)) (2) (31)).neg)) (0) (((((unsupported)) (2) (31)).sub 1)) ((((unsupported)) (2) (31))) (((((unsupported)) (2) (63)).sub 1)) ((((unsupported)) (2) (63))))))
                          seq
                            xd.write ((((xnc).xcreate_decimal)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xd)) ((xDecimal)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((xd)))) ((xv)))
                        (((unsupported)) (((xnc).xprec)) (3))
                        (((unsupported)) ((((unsupported)) (((xnc).xtraps)) ((xRounded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRounded)) (((xnc).xcreate_decimal)) (1234))
                        (((unsupported)) (((xnc).xprec)) (28))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("0E-017"))))) ("0E-17"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("45"))))) ("45"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("-Inf"))))) ("-Infinity"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("NaN123"))))) ("NaN123"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xnc).xcreate_decimal)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xnc).xcreate_decimal)) ((((unsupported)) (1) ("xyz") ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xnc).xcreate_decimal)) ("1234") ("5678"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xnc).xcreate_decimal)) (" 1234"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xnc).xcreate_decimal)) ("12_34"))
                        (((unsupported)) (((xnc).xprec)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xnc).xcreate_decimal)) ("NaN12345"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xnc).xcreate_decimal)) ((((xDecimal)) ("NaN12345"))))
                        (((unsupported)) ((((unsupported)) (((xnc).xtraps)) ((xInvalidOperation)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ("NaN12345"))))) ("NaN"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xnc).xflags)) ((xInvalidOperation)))))
                        (((unsupported)) ((((unsupported)) (((xnc).xflags)) ((xInvalidOperation)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ((((xDecimal)) ("NaN12345"))))))) ("NaN"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xnc).xflags)) ((xInvalidOperation)))))
                xtest_explicit_context_create_from_float.write
                  [xself]
                    memory > xx
                    memory > xDecimal
                    memory > xr
                    memory > xnc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xnc.write (((((xself).xdecimal).xContext)) 0)
                        xr.write ((((xnc).xcreate_decimal)) (0.1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xr)))) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xr)))) ("0.1000000000000000055511151231"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xnc).xcreate_decimal)) ((((xfloat)) ("nan")))).xis_qnan)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xnc).xcreate_decimal)) ((((xfloat)) ("inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xnc).xcreate_decimal)) ((((xfloat)) ("-inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ((((xfloat)) ("nan"))))))) ((((xstr)) (((((xnc).xcreate_decimal)) ("NaN"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ((((xfloat)) ("inf"))))))) ((((xstr)) (((((xnc).xcreate_decimal)) ("Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ((((xfloat)) ("-inf"))))))) ((((xstr)) (((((xnc).xcreate_decimal)) ("-Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xnc).xcreate_decimal)) ((((xfloat)) ("-0.0"))))))) ((((xstr)) (((((xnc).xcreate_decimal)) ("-0"))))))
                        (((unsupported)) (((xnc).xprec)) (100))
                        (((unsupported)) ((xi)) ((((xrange)) (200))))
                          seq
                            xx.write (((((xrandom).xexpovariate)) (0.01)).mul ((((((xrandom).xrandom)) 0).mul 2.0).sub 1.0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xfloat)) (((((xnc).xcreate_decimal)) ((xx)))))))
                xtest_unicode_digits.write
                  [xself]
                    memory > xDecimal
                    memory > xtest_values
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xtest_values.write (((unsupported)) ("uff11") ("1") ("u0660.u0660u0663u0667u0662e-u0663") ("0.0000372") ("-nanu0c68u0c6au0c66u0c66") ("-NaN2400"))
                        (((unsupported)) ((((unsupported)) ((xinput)) ((xexpected)))) (((((xtest_values).xitems)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((xinput)))))) ((xexpected)))
            (((unsupported)) ((xExplicitConstructionTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xExplicitConstructionTest)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_implicit_from_None.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("Decimal(5) + None") ((((xlocals)) 0)))
                xtest_implicit_from_int.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xDecimal)) (5)).add 45)))) ("50"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) (5)).add (((unsupported)) 0))) ((((xDecimal)) ((((unsupported)) 0)))))
                xtest_implicit_from_string.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("Decimal(5) + \"3\"") ((((xlocals)) 0)))
                xtest_implicit_from_float.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("Decimal(5) + 2.2") ((((xlocals)) 0)))
                xtest_implicit_from_Decimal.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) (5)).add (((xDecimal)) (45)))) ((((xDecimal)) (50))))
                xtest_rop.write
                  [xself]
                    memory > x__eq__
                    memory > x__ne__
                    memory > x__rdivmod__
                    memory > x__gt__
                    memory > xoplist
                    memory > xDecimal
                    memory > x__divmod__
                    memory > x__ge__
                    memory > x__le__
                    memory > x__lt__
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) 0)
                          seq
                            x__divmod__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("divmod ".add (((xstr)) ((xother))))))
                            x__rdivmod__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (((((xstr)) ((xother))).add " rdivmod")))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("lt ".add (((xstr)) ((xother))))))
                            x__gt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("gt ".add (((xstr)) ((xother))))))
                            x__le__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("le ".add (((xstr)) ((xother))))))
                            x__ge__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("ge ".add (((xstr)) ((xother))))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("eq ".add (((xstr)) ((xother))))))
                            x__ne__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) (("ne ".add (((xstr)) ((xother))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) ((((xE)) 0)) ((((xDecimal)) (10))))) ("divmod 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) ((((xDecimal)) (10))) ((((xE)) 0)))) ("10 rdivmod"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) < E()"))) ("gt 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) > E()"))) ("lt 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) <= E()"))) ("ge 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) >= E()"))) ("le 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) == E()"))) ("eq 10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("Decimal(10) != E()"))) ("ne 10"))
                        xoplist.write (((unsupported)) ((((unsupported)) ("+") ("__add__") ("__radd__"))) ((((unsupported)) ("-") ("__sub__") ("__rsub__"))) ((((unsupported)) ("*") ("__mul__") ("__rmul__"))) ((((unsupported)) ("/") ("__truediv__") ("__rtruediv__"))) ((((unsupported)) ("%") ("__mod__") ("__rmod__"))) ((((unsupported)) ("//") ("__floordiv__") ("__rfloordiv__"))) ((((unsupported)) ("**") ("__pow__") ("__rpow__"))))
                        (((unsupported)) ((((unsupported)) ((xsym)) ((xlop)) ((xrop)))) ((xoplist)))
                          seq
                            bogusForceDataize.write (((xsetattr)) ((xE)) ((xlop)) ((((unsupported)) ((("str".add (xlop)).add (((xstr)) ((xother))))))))
                            bogusForceDataize.write (((xsetattr)) ((xE)) ((xrop)) ((((unsupported)) ((((((xstr)) ((xother))).add (xrop)).add "str")))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((("E()".add (xsym)).add "Decimal(10)")))) ((("str".add (xlop)).add "10")))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((("Decimal(10)".add (xsym)).add "E()")))) ((("10".add (xrop)).add "str")))
            (((unsupported)) ((xImplicitConstructionTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xImplicitConstructionTest)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_formatting.write
                  [xself]
                    memory > xDecimal
                    memory > xtest_values
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xtest_values.write (((unsupported)) ((((unsupported)) ("e") ("0E-15") ("0e-15"))) ((((unsupported)) ("e") ("2.3E-15") ("2.3e-15"))) ((((unsupported)) ("e") ("2.30E+2") ("2.30e+2"))) ((((unsupported)) ("e") ("2.30000E-15") ("2.30000e-15"))) ((((unsupported)) ("e") ("1.23456789123456789e40") ("1.23456789123456789e+40"))) ((((unsupported)) ("e") ("1.5") ("1.5e+0"))) ((((unsupported)) ("e") ("0.15") ("1.5e-1"))) ((((unsupported)) ("e") ("0.015") ("1.5e-2"))) ((((unsupported)) ("e") ("0.0000000000015") ("1.5e-12"))) ((((unsupported)) ("e") ("15.0") ("1.50e+1"))) ((((unsupported)) ("e") ("-15") ("-1.5e+1"))) ((((unsupported)) ("e") ("0") ("0e+0"))) ((((unsupported)) ("e") ("0E1") ("0e+1"))) ((((unsupported)) ("e") ("0.0") ("0e-1"))) ((((unsupported)) ("e") ("0.00") ("0e-2"))) ((((unsupported)) (".6e") ("0E-15") ("0.000000e-9"))) ((((unsupported)) (".6e") ("0") ("0.000000e+6"))) ((((unsupported)) (".6e") ("9.999999") ("9.999999e+0"))) ((((unsupported)) (".6e") ("9.9999999") ("1.000000e+1"))) ((((unsupported)) (".6e") ("-1.23e5") ("-1.230000e+5"))) ((((unsupported)) (".6e") ("1.23456789e-3") ("1.234568e-3"))) ((((unsupported)) ("f") ("0") ("0"))) ((((unsupported)) ("f") ("0.0") ("0.0"))) ((((unsupported)) ("f") ("0E-2") ("0.00"))) ((((unsupported)) ("f") ("0.00E-8") ("0.0000000000"))) ((((unsupported)) ("f") ("0E1") ("0"))) ((((unsupported)) ("f") ("3.2E1") ("32"))) ((((unsupported)) ("f") ("3.2E2") ("320"))) ((((unsupported)) ("f") ("3.20E2") ("320"))) ((((unsupported)) ("f") ("3.200E2") ("320.0"))) ((((unsupported)) ("f") ("3.2E-6") ("0.0000032"))) ((((unsupported)) (".6f") ("0E-15") ("0.000000"))) ((((unsupported)) (".6f") ("0E1") ("0.000000"))) ((((unsupported)) (".6f") ("0") ("0.000000"))) ((((unsupported)) (".0f") ("0") ("0"))) ((((unsupported)) (".0f") ("0e-2") ("0"))) ((((unsupported)) (".0f") ("3.14159265") ("3"))) ((((unsupported)) (".1f") ("3.14159265") ("3.1"))) ((((unsupported)) (".4f") ("3.14159265") ("3.1416"))) ((((unsupported)) (".6f") ("3.14159265") ("3.141593"))) ((((unsupported)) (".7f") ("3.14159265") ("3.1415926"))) ((((unsupported)) (".8f") ("3.14159265") ("3.14159265"))) ((((unsupported)) (".9f") ("3.14159265") ("3.141592650"))) ((((unsupported)) ("g") ("0") ("0"))) ((((unsupported)) ("g") ("0.0") ("0.0"))) ((((unsupported)) ("g") ("0E1") ("0e+1"))) ((((unsupported)) ("G") ("0E1") ("0E+1"))) ((((unsupported)) ("g") ("0E-5") ("0.00000"))) ((((unsupported)) ("g") ("0E-6") ("0.000000"))) ((((unsupported)) ("g") ("0E-7") ("0e-7"))) ((((unsupported)) ("g") ("-0E2") ("-0e+2"))) ((((unsupported)) (".0g") ("3.14159265") ("3"))) ((((unsupported)) (".0n") ("3.14159265") ("3"))) ((((unsupported)) (".1g") ("3.14159265") ("3"))) ((((unsupported)) (".2g") ("3.14159265") ("3.1"))) ((((unsupported)) (".5g") ("3.14159265") ("3.1416"))) ((((unsupported)) (".7g") ("3.14159265") ("3.141593"))) ((((unsupported)) (".8g") ("3.14159265") ("3.1415926"))) ((((unsupported)) (".9g") ("3.14159265") ("3.14159265"))) ((((unsupported)) (".10g") ("3.14159265") ("3.14159265"))) ((((unsupported)) ("%") ("0E1") ("0%"))) ((((unsupported)) ("%") ("0E0") ("0%"))) ((((unsupported)) ("%") ("0E-1") ("0%"))) ((((unsupported)) ("%") ("0E-2") ("0%"))) ((((unsupported)) ("%") ("0E-3") ("0.0%"))) ((((unsupported)) ("%") ("0E-4") ("0.00%"))) ((((unsupported)) (".3%") ("0") ("0.000%"))) ((((unsupported)) (".3%") ("0E10") ("0.000%"))) ((((unsupported)) (".3%") ("0E-10") ("0.000%"))) ((((unsupported)) (".3%") ("2.34") ("234.000%"))) ((((unsupported)) (".3%") ("1.234567") ("123.457%"))) ((((unsupported)) (".0%") ("1.23") ("123%"))) ((((unsupported)) ("e") ("NaN") ("NaN"))) ((((unsupported)) ("f") ("-NaN123") ("-NaN123"))) ((((unsupported)) ("+g") ("NaN456") ("+NaN456"))) ((((unsupported)) (".3e") ("Inf") ("Infinity"))) ((((unsupported)) (".16f") ("-Inf") ("-Infinity"))) ((((unsupported)) (".0g") ("-sNaN") ("-sNaN"))) ((((unsupported)) ("") ("1.00") ("1.00"))) ((((unsupported)) ("6") ("123") ("   123"))) ((((unsupported)) ("<6") ("123") ("123   "))) ((((unsupported)) (">6") ("123") ("   123"))) ((((unsupported)) ("^6") ("123") (" 123  "))) ((((unsupported)) ("=+6") ("123") ("+  123"))) ((((unsupported)) ("#<10") ("NaN") ("NaN#######"))) ((((unsupported)) ("#<10") ("-4.3") ("-4.3######"))) ((((unsupported)) ("#<+10") ("0.0130") ("+0.0130###"))) ((((unsupported)) ("#< 10") ("0.0130") (" 0.0130###"))) ((((unsupported)) ("@>10") ("-Inf") ("@-Infinity"))) ((((unsupported)) ("#>5") ("-Inf") ("-Infinity"))) ((((unsupported)) ("?^5") ("123") ("?123?"))) ((((unsupported)) ("%^6") ("123") ("%123%%"))) ((((unsupported)) (" ^6") ("-45.6") ("-45.6 "))) ((((unsupported)) ("/=10") ("-45.6") ("-/////45.6"))) ((((unsupported)) ("/=+10") ("45.6") ("+/////45.6"))) ((((unsupported)) ("/= 10") ("45.6") (" /////45.6"))) ((((unsupported)) ("x00=10") ("-inf") ("-x00Infinity"))) ((((unsupported)) ("x00^16") ("-inf") ("x00x00x00-Infinityx00x00x00x00"))) ((((unsupported)) ("x00>10") ("1.2345") ("x00x00x00x001.2345"))) ((((unsupported)) ("x00<10") ("1.2345") ("1.2345x00x00x00x00"))) ((((unsupported)) (",") ("1234567") ("1,234,567"))) ((((unsupported)) (",") ("123456") ("123,456"))) ((((unsupported)) (",") ("12345") ("12,345"))) ((((unsupported)) (",") ("1234") ("1,234"))) ((((unsupported)) (",") ("123") ("123"))) ((((unsupported)) (",") ("12") ("12"))) ((((unsupported)) (",") ("1") ("1"))) ((((unsupported)) (",") ("0") ("0"))) ((((unsupported)) (",") ("-1234567") ("-1,234,567"))) ((((unsupported)) (",") ("-123456") ("-123,456"))) ((((unsupported)) ("7,") ("123456") ("123,456"))) ((((unsupported)) ("8,") ("123456") (" 123,456"))) ((((unsupported)) ("08,") ("123456") ("0,123,456"))) ((((unsupported)) ("+08,") ("123456") ("+123,456"))) ((((unsupported)) (" 08,") ("123456") (" 123,456"))) ((((unsupported)) ("08,") ("-123456") ("-123,456"))) ((((unsupported)) ("+09,") ("123456") ("+0,123,456"))) ((((unsupported)) ("07,") ("1234.56") ("1,234.56"))) ((((unsupported)) ("08,") ("1234.56") ("1,234.56"))) ((((unsupported)) ("09,") ("1234.56") ("01,234.56"))) ((((unsupported)) ("010,") ("1234.56") ("001,234.56"))) ((((unsupported)) ("011,") ("1234.56") ("0,001,234.56"))) ((((unsupported)) ("012,") ("1234.56") ("0,001,234.56"))) ((((unsupported)) ("08,.1f") ("1234.5") ("01,234.5"))) ((((unsupported)) (",") ("1.23456789") ("1.23456789"))) ((((unsupported)) (",%") ("123.456789") ("12,345.6789%"))) ((((unsupported)) (",e") ("123456") ("1.23456e+5"))) ((((unsupported)) (",E") ("123456") ("1.23456E+5"))) ((((unsupported)) ("a=-7.0") ("0.12345") ("aaaa0.1"))) ((((unsupported)) ("<^+15.20%") ("inf") ("<<+Infinity%<<<"))) ((((unsupported)) ("x07>,%") ("sNaN1234567") ("sNaN1234567%"))) ((((unsupported)) ("=10.10%") ("NaN123") ("   NaN123%"))))
                        (((unsupported)) ((((unsupported)) ((xfmt)) ((xd)) ((xresult)))) ((xtest_values)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDecimal)) ((xd)))) ((xfmt)))) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).x__format__)) ("-020"))
                xtest_n_format.write
                  [xself]
                    memory > xget_fmt
                    memory > xen_US
                    memory > xru_RU
                    memory > xfr_FR
                    memory > xcrazy
                    memory > xDecimal
                    memory > xdotsep_wide
                    memory > xmake_grouping
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xImportError)))
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("locale.CHAR_MAX not available"))
                        xmake_grouping.write
                          [xlst]
                            seq > @
                              (((unsupported)) (((((xself).xdecimal).eq (xC)).if ((("".xjoin)) ((((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((xlst))))) (xlst))))
                        xget_fmt.write
                          [xx xoverride xfmt]
                            seq > @
                              (((unsupported)) 0)
                                (((xself).xdecimal).eq (xC)).if
                                  (((unsupported)) (((((((xDecimal)) ((xx))).x__format__)) ((xfmt)) ((xoverride)))))
                                  (((unsupported)) ((((unsupported)) (((((xDecimal)) ((xx))).x__format__)) ((xfmt)) ((xoverride)))))
                        xen_US.write (((unsupported)) ("decimal_point") (".") ("grouping") ((((xmake_grouping)) ((((unsupported)) (3) (3) (0))))) ("thousands_sep") (","))
                        xfr_FR.write (((unsupported)) ("decimal_point") (",") ("grouping") ((((xmake_grouping)) ((((unsupported)) ((xCHAR_MAX)))))) ("thousands_sep") (""))
                        xru_RU.write (((unsupported)) ("decimal_point") (",") ("grouping") ((((xmake_grouping)) ((((unsupported)) (3) (3) (0))))) ("thousands_sep") (" "))
                        xcrazy.write (((unsupported)) ("decimal_point") ("&") ("grouping") ((((xmake_grouping)) ((((unsupported)) (1) (4) (2) ((xCHAR_MAX)))))) ("thousands_sep") ("-"))
                        xdotsep_wide.write (((unsupported)) ("decimal_point") (((("xc2xbf".xdecode)) ("utf-8"))) ("grouping") ((((xmake_grouping)) ((((unsupported)) (3) (3) (0))))) ("thousands_sep") (((("xc2xb4".xdecode)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((xDecimal)) ("12.7"))) ((xen_US)))) ("12.7"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((xDecimal)) ("12.7"))) ((xfr_FR)))) ("12,7"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((xDecimal)) ("12.7"))) ((xru_RU)))) ("12,7"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((xDecimal)) ("12.7"))) ((xcrazy)))) ("1-2&7"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xen_US)))) ("123,456,789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xfr_FR)))) ("123456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xru_RU)))) ("123 456 789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((unsupported)) 0)) ((xcrazy)))) ("123456-78-9012-3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xen_US)) (".6n"))) ("1.23457e+8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xfr_FR)) (".6n"))) ("1,23457e+8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xru_RU)) (".6n"))) ("1,23457e+8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456789) ((xcrazy)) (".6n"))) ("1&23457e+8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (1234) ((xfr_FR)) ("03n"))) ("1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (1234) ((xfr_FR)) ("04n"))) ("1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (1234) ((xfr_FR)) ("05n"))) ("01234"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (1234) ((xfr_FR)) ("06n"))) ("001234"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("05n"))) ("12,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("06n"))) ("12,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("07n"))) ("012,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("08n"))) ("0,012,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("09n"))) ("0,012,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (12345) ((xen_US)) ("010n"))) ("00,012,345"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("06n"))) ("1-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("07n"))) ("1-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("08n"))) ("1-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("09n"))) ("01-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("010n"))) ("0-01-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("011n"))) ("0-01-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("012n"))) ("00-01-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) (123456) ((xcrazy)) ("013n"))) ("000-01-2345-6"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xget_fmt)) ((((xDecimal)) ("-1.5"))) ((xdotsep_wide)) ("020n"))) ("-0u00b4000u00b4000u00b4000u00b4001u00bf5"))
                xtest_wide_char_separator_decimal_point.write
                  [xself]
                    memory > xdecimal_point
                    memory > xDecimal
                    memory > xthousands_sep
                    seq > @
                      (((unsupported)) 0)
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xdecimal_point.write (((unsupported)) (((((xlocale).xlocaleconv)) 0)) ("decimal_point"))
                        xthousands_sep.write (((unsupported)) (((((xlocale).xlocaleconv)) 0)) ("thousands_sep"))
                        ((xdecimal_point).neq "u066b").if
                          bogusForceDataize.write ((((xself).xskipTest)) (((("inappropriate decimal point separator ({!a} not {!a})".xformat)) ((xdecimal_point)) ("u066b"))))
                        ((xthousands_sep).neq "u066c").if
                          bogusForceDataize.write ((((xself).xskipTest)) (((("inappropriate thousands separator ({!a} not {!a})".xformat)) ((xthousands_sep)) ("u066c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDecimal)) ("100000000.123"))) ("n"))) ("100u066c000u066c000u066b123"))
                xtest_decimal_from_float_argument_type.write
                  [xself]
                    memory > x__init__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) ((((xself).xdecimal).xDecimal)))
                          x__init__.write
                            [xself xa]
                              seq > @
                                (((unsupported)) (((xself).xa_type)) ((((xtype)) ((xa)))))
                        xa.write ((((xA).xfrom_float)) (42.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xdecimal).xDecimal)) (((xa).xa_type)))
                        xa.write ((((xA).xfrom_float)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xdecimal).xDecimal)) (((xa).xa_type)))
            (((unsupported)) ((xFormatTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xFormatTest)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_addition.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("-11.1"))
                        xd2.write (((xDecimal)) ("22.2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).add (xd2))) ((((xDecimal)) ("11.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).add (xd1))) ((((xDecimal)) ("11.1"))))
                        xc.write ((xd1).add 5)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-6.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (5.add (xd1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-6.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("11.1"))))
                        (((unsupported)) ((xd1)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("16.1"))))
                xtest_subtraction.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("-11.1"))
                        xd2.write (((xDecimal)) ("22.2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).sub (xd2))) ((((xDecimal)) ("-33.3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).sub (xd1))) ((((xDecimal)) ("33.3"))))
                        xc.write ((xd1).sub 5)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-16.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (5.sub (xd1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("16.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-33.3"))))
                        (((unsupported)) ((xd1)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-38.3"))))
                xtest_multiplication.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("-5"))
                        xd2.write (((xDecimal)) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).mul (xd2))) ((((xDecimal)) ("-15"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).mul (xd1))) ((((xDecimal)) ("-15"))))
                        xc.write ((xd1).mul 5)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-25"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (5.mul (xd1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-25"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-15"))))
                        (((unsupported)) ((xd1)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-75"))))
                xtest_division.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("-5"))
                        xd2.write (((xDecimal)) ("2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).div (xd2))) ((((xDecimal)) ("-2.5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).div (xd1))) ((((xDecimal)) ("-0.4"))))
                        xc.write ((xd1).div 4)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-1.25"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (4.div (xd1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("-0.8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-2.5"))))
                        (((unsupported)) ((xd1)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("-0.625"))))
                xtest_floor_division.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("5"))
                        xd2.write (((xDecimal)) ("2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd1)) ((xd2)))) ((((xDecimal)) ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd2)) ((xd1)))) ((((xDecimal)) ("0"))))
                        xc.write (((unsupported)) ((xd1)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (((unsupported)) (7) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("2"))))
                        (((unsupported)) ((xd1)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("1"))))
                xtest_powering.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("5"))
                        xd2.write (((xDecimal)) ("2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd1)) ((xd2)))) ((((xDecimal)) ("25"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xd2)) ((xd1)))) ((((xDecimal)) ("32"))))
                        xc.write (((unsupported)) ((xd1)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("625"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (((unsupported)) (7) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("16807"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("25"))))
                        (((unsupported)) ((xd1)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("390625"))))
                xtest_module.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("5"))
                        xd2.write (((xDecimal)) ("2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).mod (xd2))) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).mod (xd1))) ((((xDecimal)) ("2"))))
                        xc.write ((xd1).mod 4)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        xc.write (7.mod (xd1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xc)) ((((xDecimal)) ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xc)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((xd1)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("1"))))
                        (((unsupported)) ((xd1)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd1)) ((((xDecimal)) ("1"))))
                xtest_floor_div_module.write
                  [xself]
                    memory > xd1
                    memory > xDecimal
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("5"))
                        xd2.write (((xDecimal)) ("2"))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((xdivmod)) ((xd1)) ((xd2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((((xDecimal)) ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xp)))) ((((xtype)) ((xd1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xq)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((xdivmod)) ((xd1)) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xp)))) ((((xtype)) ((xd1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xq)))) ((((xtype)) ((xd1)))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((xdivmod)) (7) ((xd1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xp)) ((((xDecimal)) ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((((xDecimal)) ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xp)))) ((((xtype)) ((xd1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xq)))) ((((xtype)) ((xd1)))))
                xtest_unary_operators.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) (45)))) ((((xDecimal)) ((45)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) (45)).neg)) ((((xDecimal)) ((45.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) ((((xDecimal)) (45))))) ((((xabs)) ((((xDecimal)) ((45.neg)))))))
                xtest_nan_comparisons.write
                  [xself]
                    memory > xequality_ops
                    memory > xexpected
                    memory > xgot
                    memory > xInvalidOperation
                    memory > xf
                    memory > xi
                    memory > xs
                    memory > xn
                    memory > xlocalcontext
                    memory > xorder_ops
                    memory > xsnan_pairs
                    memory > xqnan_pairs
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xn.write (((xDecimal)) ("NaN"))
                        xs.write (((xDecimal)) ("sNaN"))
                        xi.write (((xDecimal)) ("Inf"))
                        xf.write (((xDecimal)) ("2"))
                        xqnan_pairs.write (((unsupported)) ((((unsupported)) ((xn)) ((xn)))) ((((unsupported)) ((xn)) ((xi)))) ((((unsupported)) ((xi)) ((xn)))) ((((unsupported)) ((xn)) ((xf)))) ((((unsupported)) ((xf)) ((xn)))))
                        xsnan_pairs.write (((unsupported)) ((((unsupported)) ((xs)) ((xn)))) ((((unsupported)) ((xn)) ((xs)))) ((((unsupported)) ((xs)) ((xi)))) ((((unsupported)) ((xi)) ((xs)))) ((((unsupported)) ((xs)) ((xf)))) ((((unsupported)) ((xf)) ((xs)))) ((((unsupported)) ((xs)) ((xs)))))
                        xorder_ops.write (((unsupported)) (((xoperator).xlt)) (((xoperator).xle)) (((xoperator).xgt)) (((xoperator).xge)))
                        xequality_ops.write (((unsupported)) (((xoperator).xeq)) (((xoperator).xne)))
                        (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) (((xqnan_pairs).add (xsnan_pairs))))
                          (((unsupported)) ((xop)) (((xorder_ops).add (xequality_ops))))
                            seq
                              xgot.write (((xop)) ((xx)) ((xy)))
                              xexpected.write ((((unsupported)) ((xop)) (((xoperator).xne))).if TRUE FALSE)
                              bogusForceDataize.write ((((xself).xassertIs)) ((xexpected)) ((xgot)) (((("expected {0!r} for operator.{1}({2!r}, {3!r}); got {4!r}".xformat)) ((xexpected)) (((xop).x__name__)) ((xx)) ((xy)) ((xgot)))))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xctx)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xctx).xtraps)) ((xInvalidOperation)))) (1))
                            (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((xqnan_pairs)))
                              (((unsupported)) ((xop)) ((xequality_ops)))
                                seq
                                  xgot.write (((xop)) ((xx)) ((xy)))
                                  xexpected.write ((((unsupported)) ((xop)) (((xoperator).xne))).if TRUE FALSE)
                                  bogusForceDataize.write ((((xself).xassertIs)) ((xexpected)) ((xgot)) (((("expected {0!r} for operator.{1}({2!r}, {3!r}); got {4!r}".xformat)) ((xexpected)) (((xop).x__name__)) ((xx)) ((xy)) ((xgot)))))
                            (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((xsnan_pairs)))
                              (((unsupported)) ((xop)) ((xequality_ops)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xoperator).xeq)) ((xx)) ((xy)))
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xoperator).xne)) ((xx)) ((xy)))
                            (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) (((xqnan_pairs).add (xsnan_pairs))))
                              (((unsupported)) ((xop)) ((xorder_ops)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xop)) ((xx)) ((xy)))
                xtest_copy_sign.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write ((((((xDecimal)) (1)).xcopy_sign)) ((((xDecimal)) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (1)).xcopy_sign)) ((2.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).xcopy_sign)) ("-2"))
            (((unsupported)) ((xArithmeticOperatorsTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xArithmeticOperatorsTest)))
              xdecimal.write (xP)
            xthfunc1.write
              [xcls]
                memory > xtest2
                memory > xtest1
                memory > xOverflow
                memory > xd3
                memory > xInvalidOperation
                memory > xUnderflow
                memory > xd1
                memory > xDivisionByZero
                memory > xgetcontext
                memory > xlocalcontext
                memory > xc1
                memory > xInexact
                memory > xDecimal
                seq > @
                  seq
                    xDecimal.write (((xcls).xdecimal).xDecimal)
                    xInvalidOperation.write (((xcls).xdecimal).xInvalidOperation)
                    xDivisionByZero.write (((xcls).xdecimal).xDivisionByZero)
                    xOverflow.write (((xcls).xdecimal).xOverflow)
                    xUnderflow.write (((xcls).xdecimal).xUnderflow)
                    xInexact.write (((xcls).xdecimal).xInexact)
                    xgetcontext.write (((xcls).xdecimal).xgetcontext)
                    xlocalcontext.write (((xcls).xdecimal).xlocalcontext)
                    xd1.write (((xDecimal)) (1))
                    xd3.write (((xDecimal)) (3))
                    xtest1.write ((xd1).div (xd3))
                    bogusForceDataize.write (((((xcls).xfinish1).xset)) 0)
                    bogusForceDataize.write (((((xcls).xsynchro).xwait)) 0)
                    xtest2.write ((xd1).div (xd3))
                    (((unsupported)) ((((xlocalcontext)) 0)) ((xc2)))
                      seq
                        bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc2).xflags)) ((xInexact)))))
                        bogusForceDataize.write ((((xcls).xassertRaises)) ((xDivisionByZero)) (((xc2).xdivide)) ((xd1)) (0))
                        bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc2).xflags)) ((xDivisionByZero)))))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc3)))
                          seq
                            bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc3).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc3).xflags)) ((xDivisionByZero)))))
                            bogusForceDataize.write ((((xcls).xassertRaises)) ((xInvalidOperation)) (((xc3).xcompare)) ((xd1)) ((((xDecimal)) ("sNaN"))))
                            bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc3).xflags)) ((xInvalidOperation)))))
                            (((unsupported)) ((((unsupported)) ((xc3)))))
                        bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xc2).xflags)) ((xInvalidOperation)))))
                        (((unsupported)) ((((unsupported)) ((xc2)))))
                    bogusForceDataize.write ((((xcls).xassertEqual)) ((xtest1)) ((((xDecimal)) ("0.333333333333333333333333"))))
                    bogusForceDataize.write ((((xcls).xassertEqual)) ((xtest2)) ((((xDecimal)) ("0.333333333333333333333333"))))
                    xc1.write (((xgetcontext)) 0)
                    bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc1).xflags)) ((xInexact)))))
                    (((unsupported)) ((xsig)) ((((unsupported)) ((xOverflow)) ((xUnderflow)) ((xDivisionByZero)) ((xInvalidOperation)))))
                      bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xc1).xflags)) ((xsig)))))
            xthfunc2.write
              [xcls]
                memory > xtest2
                memory > xtest1
                memory > xOverflow
                memory > xd3
                memory > xInvalidOperation
                memory > xUnderflow
                memory > xd1
                memory > xthiscontext
                memory > xDivisionByZero
                memory > xgetcontext
                memory > xlocalcontext
                memory > xInexact
                memory > xDecimal
                seq > @
                  seq
                    xDecimal.write (((xcls).xdecimal).xDecimal)
                    xInvalidOperation.write (((xcls).xdecimal).xInvalidOperation)
                    xDivisionByZero.write (((xcls).xdecimal).xDivisionByZero)
                    xOverflow.write (((xcls).xdecimal).xOverflow)
                    xUnderflow.write (((xcls).xdecimal).xUnderflow)
                    xInexact.write (((xcls).xdecimal).xInexact)
                    xgetcontext.write (((xcls).xdecimal).xgetcontext)
                    xlocalcontext.write (((xcls).xdecimal).xlocalcontext)
                    xd1.write (((xDecimal)) (1))
                    xd3.write (((xDecimal)) (3))
                    xtest1.write ((xd1).div (xd3))
                    xthiscontext.write (((xgetcontext)) 0)
                    (((unsupported)) (((xthiscontext).xprec)) (18))
                    xtest2.write ((xd1).div (xd3))
                    (((unsupported)) ((((xlocalcontext)) 0)) ((xc2)))
                      seq
                        bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc2).xflags)) ((xInexact)))))
                        bogusForceDataize.write ((((xcls).xassertRaises)) ((xOverflow)) (((xc2).xmultiply)) ((((xDecimal)) ("1e425000000"))) (999))
                        bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc2).xflags)) ((xOverflow)))))
                        (((unsupported)) ((((xlocalcontext)) ((xthiscontext)))) ((xc3)))
                          seq
                            bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc3).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xc3).xflags)) ((xOverflow)))))
                            (((unsupported)) ((((unsupported)) (((xc3).xtraps)) ((xUnderflow)))) (TRUE))
                            bogusForceDataize.write ((((xcls).xassertRaises)) ((xUnderflow)) (((xc3).xdivide)) ((((xDecimal)) ("1e-425000000"))) (999))
                            bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xc3).xflags)) ((xUnderflow)))))
                            (((unsupported)) ((((unsupported)) ((xc3)))))
                        bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xc2).xflags)) ((xUnderflow)))))
                        bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xc2).xtraps)) ((xUnderflow)))))
                        (((unsupported)) ((((unsupported)) ((xc2)))))
                    bogusForceDataize.write (((((xcls).xsynchro).xset)) 0)
                    bogusForceDataize.write (((((xcls).xfinish2).xset)) 0)
                    bogusForceDataize.write ((((xcls).xassertEqual)) ((xtest1)) ((((xDecimal)) ("0.333333333333333333333333"))))
                    bogusForceDataize.write ((((xcls).xassertEqual)) ((xtest2)) ((((xDecimal)) ("0.333333333333333333"))))
                    bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xthiscontext).xtraps)) ((xUnderflow)))))
                    bogusForceDataize.write ((((xcls).xassertTrue)) ((((unsupported)) (((xthiscontext).xflags)) ((xInexact)))))
                    (((unsupported)) ((xsig)) ((((unsupported)) ((xOverflow)) ((xUnderflow)) ((xDivisionByZero)) ((xInvalidOperation)))))
                      bogusForceDataize.write ((((xcls).xassertFalse)) ((((unsupported)) (((xthiscontext).xflags)) ((xsig)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_threading.write
                  [xself]
                    memory > xsave_prec
                    memory > xsave_emin
                    memory > xsave_emax
                    memory > xth2
                    memory > xDefaultContext
                    memory > xth1
                    seq > @
                      seq
                        xDefaultContext.write (((xself).xdecimal).xDefaultContext)
                        ((((xself).xdecimal).eq (xC)).and ((((xself).xdecimal).xHAVE_THREADS).not)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("compiled without threading"))
                        xsave_prec.write ((xDefaultContext).xprec)
                        xsave_emax.write ((xDefaultContext).xEmax)
                        xsave_emin.write ((xDefaultContext).xEmin)
                        (((unsupported)) (((xDefaultContext).xprec)) (24))
                        (((unsupported)) (((xDefaultContext).xEmax)) (425000000))
                        (((unsupported)) (((xDefaultContext).xEmin)) ((425000000.neg)))
                        (((unsupported)) (((xself).xsynchro)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xfinish1)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xself).xfinish2)) (((((xthreading).xEvent)) 0)))
                        xth1.write (((unsupported)) (((xthreading).xThread)) ((xthfunc1)) ((((unsupported)) ((xself)))))
                        xth2.write (((unsupported)) (((xthreading).xThread)) ((xthfunc2)) ((((unsupported)) ((xself)))))
                        bogusForceDataize.write ((((xth1).xstart)) 0)
                        bogusForceDataize.write ((((xth2).xstart)) 0)
                        bogusForceDataize.write (((((xself).xfinish1).xwait)) 0)
                        bogusForceDataize.write (((((xself).xfinish2).xwait)) 0)
                        (((unsupported)) ((xsig)) ((((unsupported)) ((xSignals)) (((xself).xdecimal)))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xDefaultContext).xflags)) ((xsig)))))
                        bogusForceDataize.write ((((xth1).xjoin)) 0)
                        bogusForceDataize.write ((((xth2).xjoin)) 0)
                        (((unsupported)) (((xDefaultContext).xprec)) ((xsave_prec)))
                        (((unsupported)) (((xDefaultContext).xEmax)) ((xsave_emax)))
                        (((unsupported)) (((xDefaultContext).xEmin)) ((xsave_emin)))
            (((unsupported)) ((xThreadingTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xThreadingTest)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_comparison_operators.write
                  [xself]
                    memory > xdb
                    memory > xb
                    memory > xda
                    memory > xDecimal
                    memory > xdc
                    memory > xa
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xda.write (((xDecimal)) ("23.42"))
                        xdb.write (((xDecimal)) ("23.42"))
                        xdc.write (((xDecimal)) ("45"))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xdc)) ((xda)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xdc)) ((xda)))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xda)) ((xdc)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xda)) ((xdc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xda)) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) ((xdc)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xda)) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xda)) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xdc)) (23))
                        bogusForceDataize.write ((((xself).xassertLess)) (23) ((xdc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdc)) (45))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) ("ugly"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) (32.7))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) ((xobject)))
                        xa.write (((xlist)) ((((xmap)) ((xDecimal)) ((((xrange)) (100))))))
                        xb.write (((unsupported)) ((xa)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xa)))
                        bogusForceDataize.write ((((xa).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                xtest_decimal_float_comparison.write
                  [xself]
                    memory > xda
                    memory > xDecimal
                    memory > xdb
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xda.write (((xDecimal)) ("0.25"))
                        xdb.write (((xDecimal)) ("3.0"))
                        bogusForceDataize.write ((((xself).xassertLess)) ((xda)) (3.0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xda)) (3.0))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((xdb)) (0.25))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xdb)) (0.25))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xda)) (0.25))
                        bogusForceDataize.write ((((xself).xassertGreater)) (3.0) ((xda)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) (3.0) ((xda)))
                        bogusForceDataize.write ((((xself).xassertLess)) (0.25) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) (0.25) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (0.25) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3.0) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (0.1) ((((xDecimal)) ("0.1"))))
                xtest_decimal_complex_comparison.write
                  [xself]
                    memory > xda
                    memory > xDecimal
                    memory > xdb
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xda.write (((xDecimal)) ("0.25"))
                        xdb.write (((xDecimal)) ("3.0"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xda)) ((1.5.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((1.5.add (((unsupported)) 0))) ((xda)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xda)) ((0.25.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((0.25.add (((unsupported)) 0))) ((xda)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((3.0.add (((unsupported)) 0))) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdb)) ((3.0.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdb)) ((3.0.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((3.0.add (((unsupported)) 0))) ((xdb)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xdb).x__lt__)) ((3.0.add (((unsupported)) 0))))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xdb).x__le__)) ((3.0.add (((unsupported)) 0))))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xdb).x__gt__)) ((3.0.add (((unsupported)) 0))))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xdb).x__le__)) ((3.0.add (((unsupported)) 0))))) ((xNotImplemented)))
                xtest_decimal_fraction_comparison.write
                  [xself]
                    memory > xc
                    memory > xemax
                    memory > xetiny
                    memory > xemin
                    memory > xInvalidOperation
                    memory > xF
                    memory > xlocalcontext
                    memory > xContext
                    memory > xD
                    seq > @
                      seq
                        xD.write (((xself).xdecimal).xDecimal)
                        xF.write ((((unsupported)) ((xfractions)) (((xself).xdecimal))).xFraction)
                        xContext.write (((xself).xdecimal).xContext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xemax.write ((xC).if ((xC).xMAX_EMAX) 999999999)
                        xemin.write ((xC).if ((xC).xMIN_EMIN) (999999999.neg))
                        xetiny.write ((xC).if ((xC).xMIN_ETINY) (1999999997.neg))
                        xc.write (((unsupported)) ((xContext)) ((xemax)) ((xemin)))
                        (((unsupported)) ((((xlocalcontext)) ((xc)))))
                          seq
                            (((unsupported)) (((xc).xprec)) ((xemax)))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xD)) (0))) ((((xF)) (1) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xF)) ((1.neg)) ((((unsupported)) 0)))) ((((xD)) (0))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xF)) (0) (1))) ((((xD)) (("1e".add (((xstr)) ((xetiny))))))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xD)) (("-1e".add (((xstr)) ((xetiny))))))) ((((xF)) (0) (1))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xF)) (0) ((((unsupported)) 0)))) ((((xD)) (("1e".add (((xstr)) ((xetiny))))))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xD)) (("-1e".add (((xstr)) ((xetiny))))))) ((((xF)) (0) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xD)) ("0.1"))) ((((xF)) (1) (10))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xF)) (1) (10))) ((((xD)) ("0.1"))))
                            (((unsupported)) (((xc).xprec)) (300))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xD)) (1)).div 3)) ((((xF)) (1) (3))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xF)) (1) (3))) (((((xD)) (1)).div 3)))
                            bogusForceDataize.write ((((xself).xassertLessEqual)) ((((xF)) (120984237) ((((unsupported)) 0)))) ((((xD)) (("9e".add (((xstr)) ((xemax))))))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((xD)) (("9e".add (((xstr)) ((xemax))))))) ((((xF)) (120984237) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((((xD)) ("inf"))) ((((xF)) ((((unsupported)) 0)) (123))))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((((xD)) ("inf"))) ((((xF)) (((((unsupported)) 0).neg)) (123))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xD)) ("-inf"))) ((((xF)) ((((unsupported)) 0)) (123))))
                            bogusForceDataize.write ((((xself).xassertLess)) ((((xD)) ("-inf"))) ((((xF)) (((((unsupported)) 0).neg)) (123))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((((xD)) ("nan")).x__gt__)) ((((xF)) ((9.neg)) (123))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((xNotImplemented)) (((((((xF)) ((9.neg)) (123)).x__lt__)) ((((xD)) ("nan"))))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xD)) ("nan"))) ((((xF)) ((9.neg)) (123))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xF)) ((9.neg)) (123))) ((((xD)) ("nan"))))
                xtest_copy_and_deepcopy_methods.write
                  [xself]
                    memory > xdc
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) ("43.24"))
                        xc.write ((((xcopy).xcopy)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xc)))) ((((xid)) ((xd)))))
                        xdc.write ((((xcopy).xdeepcopy)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xid)) ((xdc)))) ((((xid)) ((xd)))))
                xtest_hash_method.write
                  [xself]
                    memory > xd
                    memory > xhashit
                    memory > xf
                    memory > xx
                    memory > xh3
                    memory > xh1
                    memory > xtest_strings
                    memory > xlocalcontext
                    memory > xh2
                    memory > xtest_values
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xhashit.write
                          [xd]
                            memory > xb
                            memory > xa
                            seq > @
                              seq
                                xa.write (((xhash)) ((xd)))
                                xb.write ((((xd).x__hash__)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                                (((unsupported)) ((xa)))
                        bogusForceDataize.write (((xhashit)) ((((xDecimal)) (23))))
                        bogusForceDataize.write (((xhashit)) ((((xDecimal)) ("Infinity"))))
                        bogusForceDataize.write (((xhashit)) ((((xDecimal)) ("-Infinity"))))
                        bogusForceDataize.write (((xhashit)) ((((xDecimal)) ("nan123"))))
                        bogusForceDataize.write (((xhashit)) ((((xDecimal)) ("-NaN"))))
                        xtest_values.write (((unsupported)) ((((xDecimal)) (((xsign).mul ((((unsupported)) (2) ((xm))).add (xn)))))) ((xm)) ((((unsupported)) (0) (14) (15) (16) (17) (30) (31) (32) (33) (61) (62) (63) (64) (65) (66))) ((xn)) ((((xrange)) ((10.neg)) (10))) ((xsign)) ((((unsupported)) ((1.neg)) (1))))
                        bogusForceDataize.write ((((xtest_values).xextend)) ((((unsupported)) ((((xDecimal)) ("-1"))) ((((xDecimal)) ("-0"))) ((((xDecimal)) ("0.00"))) ((((xDecimal)) ("-0.000"))) ((((xDecimal)) ("0E10"))) ((((xDecimal)) ("-0E12"))) ((((xDecimal)) ("10.0"))) ((((xDecimal)) ("-23.00000"))) ((((xDecimal)) ("1230E100"))) ((((xDecimal)) ("-4.5678E50"))) ((((xDecimal)) ((((((unsupported)) (2) (64)).add (((unsupported)) (2) (32))).sub 1)))) ((((xDecimal)) ("1.634E100"))) ((((xDecimal)) ("90.697E100"))) ((((xDecimal)) ("188.83E100"))) ((((xDecimal)) ("1652.9E100"))) ((((xDecimal)) ("56531E100"))))))
                        (((unsupported)) ((xvalue)) ((xtest_values)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xhashit)) ((xvalue)))) ((((xhashit)) ((((xint)) ((xvalue)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhashit)) ((((xDecimal)) (23))))) ((((xhashit)) (23))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) ((((xDecimal)) ("sNaN"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhashit)) ((((xDecimal)) ("Inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhashit)) ((((xDecimal)) ("-Inf"))))))
                        xtest_strings.write (((unsupported)) ("inf") ("-Inf") ("0.0") ("-.0e1") ("34.0") ("2.5") ("112390.625") ("-0.515625"))
                        (((unsupported)) ((xs)) ((xtest_strings)))
                          seq
                            xf.write (((xfloat)) ((xs)))
                            xd.write (((xDecimal)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xhashit)) ((xf)))) ((((xhashit)) ((xd)))))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            xx.write (((xDecimal)) ("123456789.1"))
                            (((unsupported)) (((xc).xprec)) (6))
                            xh1.write (((xhashit)) ((xx)))
                            (((unsupported)) (((xc).xprec)) (10))
                            xh2.write (((xhashit)) ((xx)))
                            (((unsupported)) (((xc).xprec)) (16))
                            xh3.write (((xhashit)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xh1)) ((xh2)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xh1)) ((xh3)))
                            (((unsupported)) (((xc).xprec)) (10000))
                            xx.write (((unsupported)) (1100) (1248))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xhashit)) ((((xDecimal)) ((xx)))))) ((((xhashit)) ((xx)))))
                xtest_min_and_max_methods.write
                  [xself]
                    memory > xl2
                    memory > xd1
                    memory > xDecimal
                    memory > xl1
                    memory > xd2
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("15.32"))
                        xd2.write (((xDecimal)) ("28.5"))
                        xl1.write 15
                        xl2.write 28
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmin)) ((xd1)) ((xd2)))) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmin)) ((xd2)) ((xd1)))) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmax)) ((xd1)) ((xd2)))) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmax)) ((xd2)) ((xd1)))) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmin)) ((xd1)) ((xl2)))) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmin)) ((xl2)) ((xd1)))) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmax)) ((xl1)) ((xd2)))) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xmax)) ((xd2)) ((xl1)))) ((xd2)))
                xtest_as_nonzero.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xDecimal)) (0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xDecimal)) ("0.372"))))
                xtest_tostring_methods.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) ("15.32"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xd)))) ("15.32"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xd)))) ("Decimal('15.32')"))
                xtest_tonum_methods.write
                  [xself]
                    memory > xd2
                    memory > xd1
                    memory > xtest_pairs
                    memory > xDecimal
                    memory > xtest_triples
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd1.write (((xDecimal)) ("66"))
                        xd2.write (((xDecimal)) ("15.32"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((xd1)))) (66))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((xd2)))) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfloat)) ((xd1)))) (66))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfloat)) ((xd2)))) (15.32))
                        xtest_pairs.write (((unsupported)) ((((unsupported)) ("123.00") (123))) ((((unsupported)) ("3.2") (3))) ((((unsupported)) ("3.54") (3))) ((((unsupported)) ("3.899") (3))) ((((unsupported)) ("-2.3") ((3.neg)))) ((((unsupported)) ("-11.0") ((11.neg)))) ((((unsupported)) ("0.0") (0))) ((((unsupported)) ("-0E3") (0))) ((((unsupported)) ("89891211712379812736.1") ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xi)))) ((xtest_pairs)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xmath).xfloor)) ((((xDecimal)) ((xd)))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xfloor)) ((((xDecimal)) ("-NaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xfloor)) ((((xDecimal)) ("sNaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xfloor)) ((((xDecimal)) ("NaN123"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xmath).xfloor)) ((((xDecimal)) ("Inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xmath).xfloor)) ((((xDecimal)) ("-Inf"))))
                        xtest_pairs.write (((unsupported)) ((((unsupported)) ("123.00") (123))) ((((unsupported)) ("3.2") (4))) ((((unsupported)) ("3.54") (4))) ((((unsupported)) ("3.899") (4))) ((((unsupported)) ("-2.3") ((2.neg)))) ((((unsupported)) ("-11.0") ((11.neg)))) ((((unsupported)) ("0.0") (0))) ((((unsupported)) ("-0E3") (0))) ((((unsupported)) ("89891211712379812736.1") ((((unsupported)) 0)))))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xi)))) ((xtest_pairs)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xmath).xceil)) ((((xDecimal)) ((xd)))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xceil)) ((((xDecimal)) ("-NaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xceil)) ((((xDecimal)) ("sNaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xmath).xceil)) ((((xDecimal)) ("NaN123"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xmath).xceil)) ((((xDecimal)) ("Inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xmath).xceil)) ((((xDecimal)) ("-Inf"))))
                        xtest_pairs.write (((unsupported)) ((((unsupported)) ("123.00") (123))) ((((unsupported)) ("3.2") (3))) ((((unsupported)) ("3.54") (4))) ((((unsupported)) ("3.899") (4))) ((((unsupported)) ("-2.3") ((2.neg)))) ((((unsupported)) ("-11.0") ((11.neg)))) ((((unsupported)) ("0.0") (0))) ((((unsupported)) ("-0E3") (0))) ((((unsupported)) ("-3.5") ((4.neg)))) ((((unsupported)) ("-2.5") ((2.neg)))) ((((unsupported)) ("-1.5") ((2.neg)))) ((((unsupported)) ("-0.5") (0))) ((((unsupported)) ("0.5") (0))) ((((unsupported)) ("1.5") (2))) ((((unsupported)) ("2.5") (2))) ((((unsupported)) ("3.5") (4))))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xi)))) ((xtest_pairs)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((((xDecimal)) ((xd)))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xround)) ((((xDecimal)) ("-NaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xround)) ((((xDecimal)) ("sNaN"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xround)) ((((xDecimal)) ("NaN123"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xround)) ((((xDecimal)) ("Inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xround)) ((((xDecimal)) ("-Inf"))))
                        xtest_triples.write (((unsupported)) ((((unsupported)) ("123.456") ((4.neg)) ("0E+4"))) ((((unsupported)) ("123.456") ((3.neg)) ("0E+3"))) ((((unsupported)) ("123.456") ((2.neg)) ("1E+2"))) ((((unsupported)) ("123.456") ((1.neg)) ("1.2E+2"))) ((((unsupported)) ("123.456") (0) ("123"))) ((((unsupported)) ("123.456") (1) ("123.5"))) ((((unsupported)) ("123.456") (2) ("123.46"))) ((((unsupported)) ("123.456") (3) ("123.456"))) ((((unsupported)) ("123.456") (4) ("123.4560"))) ((((unsupported)) ("123.455") (2) ("123.46"))) ((((unsupported)) ("123.445") (2) ("123.44"))) ((((unsupported)) ("Inf") (4) ("NaN"))) ((((unsupported)) ("-Inf") ((23.neg)) ("NaN"))) ((((unsupported)) ("sNaN314") (3) ("NaN314"))))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xn)) ((xr)))) ((xtest_triples)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xround)) ((((xDecimal)) ((xd)))) ((xn)))))) ((xr)))
                xtest_nan_to_float.write
                  [xself]
                    memory > xDecimal
                    memory > xf
                    memory > xsign
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xs)) ((((unsupported)) ("nan") ("nan1234") ("-nan") ("-nan2468"))))
                          seq
                            xf.write (((xfloat)) ((((xDecimal)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((xf)))))
                            xsign.write ((((xmath).xcopysign)) (1.0) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xsign)) ((((((xs).xstartswith)) ("-")).if (1.0.neg) 1.0)))
                xtest_snan_to_float.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xs)) ((((unsupported)) ("snan") ("-snan") ("snan1357") ("-snan1234"))))
                          seq
                            xd.write (((xDecimal)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xfloat)) ((xd)))
                xtest_eval_round_trip.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((((xeval)) ((((xrepr)) ((xd)))))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (5))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((((xeval)) ((((xrepr)) ((xd)))))))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (4) (5) (3) (4))) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((((xeval)) ((((xrepr)) ((xd)))))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((((xeval)) ((((xrepr)) ((xd)))))))
                xtest_as_tuple.write
                  [xself]
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xd.write (((xDecimal)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (0))) (0))))
                        xd.write (((xDecimal)) ((45.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) (4) (5))) (0))))
                        xd.write (((xDecimal)) ("-4.34913534E-17"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) (4) (3) (4) (9) (1) (3) (5) (3) (4))) ((25.neg)))))
                        xd.write (((xDecimal)) ("Infinity"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (0))) ("F"))))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0) (0) (4) (0) (5) (3) (4))) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (4) (0) (5) (3) (4))) ((2.neg)))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (0) (0) (0))) (37))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) (0))) (37))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) 0)) (37))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) (0))) (37))))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0) (0) (4) (0) (5) (3) (4))) ("n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (4) (0) (5) (3) (4))) ("n"))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (0) (0) (0))) ("N"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) 0)) ("N"))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) 0)) ("n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) 0)) ("n"))))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (0))) ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (0))) ("F"))))
                        xd.write (((xDecimal)) ((((unsupported)) (0) ((((unsupported)) (4) (5) (3) (4))) ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (0) ((((unsupported)) (0))) ("F"))))
                        xd.write (((xDecimal)) ((((unsupported)) (1) ((((unsupported)) (0) (2) (7) (1))) ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xas_tuple)) 0)) ((((unsupported)) (1) ((((unsupported)) (0))) ("F"))))
                xtest_as_integer_ratio.write
                  [xself]
                    memory > xpq
                    memory > xd
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xDecimal).xas_integer_ratio)) ((((xDecimal)) ("inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xDecimal).xas_integer_ratio)) ((((xDecimal)) ("-inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xDecimal).xas_integer_ratio)) ((((xDecimal)) ("-nan"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xDecimal).xas_integer_ratio)) ((((xDecimal)) ("snan123"))))
                        (((unsupported)) ((xexp)) ((((xrange)) ((4.neg)) (2))))
                          (((unsupported)) ((xcoeff)) ((((xrange)) (1000))))
                            (((unsupported)) ((xsign)) ((((unsupported)) ("+") ("-"))))
                              seq
                                xd.write (((xDecimal)) (("%s%dE%d".mod (((unsupported)) ((xsign)) ((xcoeff)) ((xexp))))))
                                xpq.write ((((xd).xas_integer_ratio)) 0)
                                (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((xpq)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xpq)) ((xtuple)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xp)) ((xint)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((xq)) ((xint)))
                                bogusForceDataize.write ((((xself).xassertGreater)) ((xq)) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xmath).xgcd)) ((xp)) ((xq)))) (1))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ((xp))).div (((xDecimal)) ((xq))))) ((xd)))
                xtest_subclassing.write
                  [xself]
                    memory > xd
                    memory > xd2
                    memory > xx
                    memory > xDecimal
                    memory > xy
                    memory > xm
                    memory > xd1
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xDecimal)))
                          xy.write "None: is there a None literal in the EO language?"
                        xd1.write (((xMyDecimal)) (1))
                        xd2.write (((xMyDecimal)) (2))
                        xd.write ((xd1).add (xd2))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xd)))) ((xDecimal)))
                        xd.write ((((xd1).xmax)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xd)))) ((xDecimal)))
                        xd.write ((((xcopy).xcopy)) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xd)))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xd1)))
                        xd.write ((((xcopy).xdeepcopy)) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xd)))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xd1)))
                        xd.write (((xDecimal)) ("1.0"))
                        xx.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xd)))
                        xm.write (((xMyDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xm)))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xm)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xm).xy)) ("None: is there a None literal in the EO language?"))
                        xx.write (((xDecimal)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xd)))
                        (((unsupported)) (((xm).xy)) (9))
                        xx.write (((xMyDecimal)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).xy)) ("None: is there a None literal in the EO language?"))
                xtest_implicit_context.write
                  [xself]
                    memory > xDecimal
                    memory > xc
                    memory > xgetcontext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xc.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) (0)).xsqrt)) 0)))) ((((xstr)) (((((xc).xsqrt)) ((((xDecimal)) (0))))))))
                xtest_none_args.write
                  [xself]
                    memory > xContext
                    memory > xInvalidOperation
                    memory > xx
                    memory > xUnderflow
                    memory > xDivisionByZero
                    memory > xy
                    memory > xlocalcontext
                    memory > xRounded
                    memory > xz
                    memory > xans
                    memory > xOverflow
                    memory > xInexact
                    memory > xDecimal
                    memory > xClamped
                    memory > xSubnormal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xDivisionByZero.write (((xself).xdecimal).xDivisionByZero)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xUnderflow.write (((xself).xdecimal).xUnderflow)
                        xSubnormal.write (((xself).xdecimal).xSubnormal)
                        xInexact.write (((xself).xdecimal).xInexact)
                        xRounded.write (((xself).xdecimal).xRounded)
                        xClamped.write (((xself).xdecimal).xClamped)
                        (((unsupported)) ((((xlocalcontext)) ((((xContext)) 0)))) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (7))
                            (((unsupported)) (((xc).xEmax)) (999))
                            (((unsupported)) (((xc).xEmin)) ((999.neg)))
                            xx.write (((xDecimal)) ("111"))
                            xy.write (((xDecimal)) ("1e9999"))
                            xz.write (((xDecimal)) ("1e-9999"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xx).xexp)) ("None: is there a None literal in the EO language?"))))) ("1.609487E+48"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xRounded)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((xy).xexp)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) (((xz).xis_normal)) ("None: is there a None literal in the EO language?"))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) (((xz).xis_subnormal)) ("None: is there a None literal in the EO language?"))) (TRUE))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xx).xln)) ("None: is there a None literal in the EO language?"))))) ("4.709530"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xRounded)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ((1.neg))).xln)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xx).xlog10)) ("None: is there a None literal in the EO language?"))))) ("2.045323"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xRounded)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ((1.neg))).xlog10)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xx).xlogb)) ("None: is there a None literal in the EO language?"))))) ("2"))
                            (((unsupported)) (((xself).xassertRaises)) ((xDivisionByZero)) (((((xDecimal)) (0)).xlogb)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xDivisionByZero)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xx).xlogical_invert)) ("None: is there a None literal in the EO language?"))))) ("1111000"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xy).xlogical_invert)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xy).xnext_minus)) ("None: is there a None literal in the EO language?"))))) ("9.999999E+999"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("sNaN")).xnext_minus)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xy).xnext_plus)) ("None: is there a None literal in the EO language?"))))) ("Infinity"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("sNaN")).xnext_plus)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xz).xnormalize)) ("None: is there a None literal in the EO language?"))))) ("0"))
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((xy).xnormalize)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xz).xnumber_class)) ("None: is there a None literal in the EO language?"))))) ("+Subnormal"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xz).xsqrt)) ("None: is there a None literal in the EO language?"))))) ("0E-1005"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xClamped)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInexact)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xRounded)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xSubnormal)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xUnderflow)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((xy).xsqrt)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            (((unsupported)) (((xc).xcapitals)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xz).xto_eng_string)) ("None: is there a None literal in the EO language?"))))) ("1e-9999"))
                            (((unsupported)) (((xc).xcapitals)) (1))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xcompare)) ((((xDecimal)) ("Nan891287828"))) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("NaN1287828"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xcompare)) ((((xDecimal)) ("sNaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xcompare_signal)) (8224) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("-1"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xcompare_signal)) ((((xDecimal)) ("NaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xlogical_and)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("101"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xlogical_and)) (123) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xlogical_or)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("111"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xlogical_or)) (123) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xlogical_xor)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("10"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xlogical_xor)) (123) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xmax)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("111"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xmax)) ((((xDecimal)) ("sNaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xmax_mag)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("111"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xmax_mag)) ((((xDecimal)) ("sNaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xmin)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("101"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xmin)) ((((xDecimal)) ("sNaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xmin_mag)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("101"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xmin_mag)) ((((xDecimal)) ("sNaN"))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xremainder_near)) (101) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("10"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xy).xremainder_near)) (101) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xrotate)) (2) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("11100"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xrotate)) (101) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xscaleb)) (7) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1.11E+9"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xscaleb)) (10000) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xshift)) (2) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("11100"))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xx).xshift)) (10000) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xans.write (((xstr)) ((((unsupported)) (((xx).xfma)) (2) (3) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("225"))
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((xx).xfma)) ((((xDecimal)) ("1e9999"))) (3) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_EVEN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_DOWN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1"))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral)) ((xROUND_UP)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("sNaN")).xto_integral)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_EVEN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_value)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_DOWN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_value)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1"))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_value)) ((xROUND_UP)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("sNaN")).xto_integral_value)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_EVEN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_exact)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_DOWN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_exact)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1"))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.5")).xto_integral_exact)) ((xROUND_UP)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("2"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("sNaN")).xto_integral_exact)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_UP)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.50001")).xquantize)) ((((xDecimal)) ("1e-3"))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1.501"))
                            (((unsupported)) (((xc).xrounding)) ((xROUND_DOWN)))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.50001")).xquantize)) ((((xDecimal)) ("1e-3"))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1.500"))
                            xans.write (((xstr)) ((((unsupported)) (((((xDecimal)) ("1.50001")).xquantize)) ((((xDecimal)) ("1e-3"))) ((xROUND_UP)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ("1.501"))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((xy).xquantize)) ((((xDecimal)) ("1e-10"))) ((xROUND_UP)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                        (((unsupported)) ((((xlocalcontext)) ((((xContext)) 0)))) ((xcontext)))
                          seq
                            (((unsupported)) (((xcontext).xprec)) (7))
                            (((unsupported)) (((xcontext).xEmax)) (999))
                            (((unsupported)) (((xcontext).xEmin)) ((999.neg)))
                            (((unsupported)) ((((unsupported)) ((xlocalcontext)) ("None: is there a None literal in the EO language?"))) ((xc)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (7))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (999))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((999.neg)))
                xtest_conversions_from_int.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (4)).xcompare)) (3))) (((((((xDecimal)) (4)).xcompare)) ((((xDecimal)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (4)).xcompare_signal)) (3))) (((((((xDecimal)) (4)).xcompare_signal)) ((((xDecimal)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (4)).xcompare_total)) (3))) (((((((xDecimal)) (4)).xcompare_total)) ((((xDecimal)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (4)).xcompare_total_mag)) (3))) (((((((xDecimal)) (4)).xcompare_total_mag)) ((((xDecimal)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (10101)).xlogical_and)) (1001))) (((((((xDecimal)) (10101)).xlogical_and)) ((((xDecimal)) (1001))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (10101)).xlogical_or)) (1001))) (((((((xDecimal)) (10101)).xlogical_or)) ((((xDecimal)) (1001))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (10101)).xlogical_xor)) (1001))) (((((((xDecimal)) (10101)).xlogical_xor)) ((((xDecimal)) (1001))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (567)).xmax)) (123))) (((((((xDecimal)) (567)).xmax)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (567)).xmax_mag)) (123))) (((((((xDecimal)) (567)).xmax_mag)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (567)).xmin)) (123))) (((((((xDecimal)) (567)).xmin)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (567)).xmin_mag)) (123))) (((((((xDecimal)) (567)).xmin_mag)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (567)).xnext_toward)) (123))) (((((((xDecimal)) (567)).xnext_toward)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (1234)).xquantize)) (100))) (((((((xDecimal)) (1234)).xquantize)) ((((xDecimal)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (768)).xremainder_near)) (1234))) (((((((xDecimal)) (768)).xremainder_near)) ((((xDecimal)) (1234))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (123)).xrotate)) (1))) (((((((xDecimal)) (123)).xrotate)) ((((xDecimal)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (1234)).xsame_quantum)) (1000))) (((((((xDecimal)) (1234)).xsame_quantum)) ((((xDecimal)) (1000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("9.123")).xscaleb)) ((100.neg)))) (((((((xDecimal)) ("9.123")).xscaleb)) ((((xDecimal)) ((100.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) (456)).xshift)) ((1.neg)))) (((((((xDecimal)) (456)).xshift)) ((((xDecimal)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ((12.neg))).xfma)) ((((xDecimal)) (45))) (67))) (((((((xDecimal)) ((12.neg))).xfma)) ((((xDecimal)) (45))) ((((xDecimal)) (67))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ((12.neg))).xfma)) (45) (67))) (((((((xDecimal)) ((12.neg))).xfma)) ((((xDecimal)) (45))) ((((xDecimal)) (67))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ((12.neg))).xfma)) (45) ((((xDecimal)) (67))))) (((((((xDecimal)) ((12.neg))).xfma)) ((((xDecimal)) (45))) ((((xDecimal)) (67))))))
            (((unsupported)) ((xUsabilityTest)))
              xdecimal.write (xC)
            (((unsupported)) ((xUsabilityTest)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_abc.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xDecimal)) (((xnumbers).xNumber)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xissubclass)) ((xDecimal)) (((xnumbers).xReal)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xDecimal)) (0))) (((xnumbers).xNumber)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xDecimal)) (0))) (((xnumbers).xReal)))
                xtest_pickle.write
                  [xself]
                    memory > xsavedecimal
                    memory > xp
                    memory > xr
                    memory > xx
                    memory > xe
                    memory > xDecimal
                    memory > xy
                    memory > xsy
                    memory > xd
                    memory > xsx
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xDecimal.write (((xself).xdecimal).xDecimal)
                          xsavedecimal.write (((unsupported)) (((xsys).xmodules)) ("decimal"))
                          (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) (((xself).xdecimal)))
                          xd.write (((xDecimal)) ("-3.141590000"))
                          xp.write ((((xpickle).xdumps)) ((xd)) ((xproto)))
                          xe.write ((((xpickle).xloads)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) ((xe)))
                          (xC).if
                            seq
                              xx.write ((((xC).xDecimal)) ("-3.123e81723"))
                              xy.write ((((xP).xDecimal)) ("-3.123e81723"))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
                              xsx.write ((((xpickle).xdumps)) ((xx)) ((xproto)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
                              xr.write ((((xpickle).xloads)) ((xsx)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xr)) (((xP).xDecimal)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xy)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
                              xsy.write ((((xpickle).xdumps)) ((xy)) ((xproto)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
                              xr.write ((((xpickle).xloads)) ((xsy)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xr)) (((xC).xDecimal)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xx)))
                              xx.write (((((((xC).xDecimal)) ("-3.123e81723")).xas_tuple)) 0)
                              xy.write (((((((xP).xDecimal)) ("-3.123e81723")).xas_tuple)) 0)
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
                              xsx.write ((((xpickle).xdumps)) ((xx)) ((xproto)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
                              xr.write ((((xpickle).xloads)) ((xsx)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xr)) (((xP).xDecimalTuple)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xy)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
                              xsy.write ((((xpickle).xdumps)) ((xy)) ((xproto)))
                              (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
                              xr.write ((((xpickle).xloads)) ((xsy)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xr)) (((xC).xDecimalTuple)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xx)))
                          (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xsavedecimal)))
                xtest_int.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xDecimal
                    memory > xr
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xx)) ((((xrange)) ((250.neg)) (250))))
                          seq
                            xs.write ("%0.2f".mod ((xx).div 100.0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xDecimal)) ((xs)))))) ((((xint)) ((((xfloat)) ((xs)))))))
                            xd.write (((xDecimal)) ((xs)))
                            xr.write ((((xd).xto_integral)) ((xROUND_DOWN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) ((((xint)) ((xd)))))) ((xr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xint)) ((((xDecimal)) ("-nan"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xint)) ((((xDecimal)) ("snan"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xint)) ((((xDecimal)) ("inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xint)) ((((xDecimal)) ("-inf"))))
                xtest_trunc.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xDecimal
                    memory > xr
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xx)) ((((xrange)) ((250.neg)) (250))))
                          seq
                            xs.write ("%0.2f".mod ((xx).div 100.0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xDecimal)) ((xs)))))) ((((xint)) ((((xfloat)) ((xs)))))))
                            xd.write (((xDecimal)) ((xs)))
                            xr.write ((((xd).xto_integral)) ((xROUND_DOWN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) (((((xmath).xtrunc)) ((xd)))))) ((xr)))
                xtest_from_float.write
                  [xself]
                    memory > xbigint
                    memory > xr
                    memory > xx
                    memory > x__init__
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xDecimal)))
                          x__init__.write
                            [xself x_]
                              seq > @
                                (((unsupported)) (((xself).xx)) ("y"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xMyDecimal)) ((xDecimal)))))
                        xr.write ((((xMyDecimal).xfrom_float)) (0.1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xr)))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xr)))) ("0.1000000000000000055511151231257827021181583404541015625"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xx)) ("y"))
                        xbigint.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xMyDecimal).xfrom_float)) ((xbigint)))) ((((xMyDecimal)) ((xbigint)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xMyDecimal).xfrom_float)) ((((xfloat)) ("nan")))).xis_qnan)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xMyDecimal).xfrom_float)) ((((xfloat)) ("inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xMyDecimal).xfrom_float)) ((((xfloat)) ("-inf")))).xis_infinite)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xMyDecimal).xfrom_float)) ((((xfloat)) ("nan"))))))) ((((xstr)) ((((xDecimal)) ("NaN"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xMyDecimal).xfrom_float)) ((((xfloat)) ("inf"))))))) ((((xstr)) ((((xDecimal)) ("Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xMyDecimal).xfrom_float)) ((((xfloat)) ("-inf"))))))) ((((xstr)) ((((xDecimal)) ("-Infinity"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xMyDecimal).xfrom_float)) ("abc"))
                        (((unsupported)) ((xi)) ((((xrange)) (200))))
                          seq
                            xx.write (((((xrandom).xexpovariate)) (0.01)).mul ((((((xrandom).xrandom)) 0).mul 2.0).sub 1.0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xfloat)) (((((xMyDecimal).xfrom_float)) ((xx)))))))
                xtest_create_decimal_from_float.write
                  [xself]
                    memory > xContext
                    memory > xcontext
                    memory > xInexact
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xInexact.write (((xself).xdecimal).xInexact)
                        xcontext.write (((unsupported)) ((xContext)) (5) ((xROUND_DOWN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcontext).xcreate_decimal_from_float)) (((xmath).xpi)))) ((((xDecimal)) ("3.1415"))))
                        xcontext.write (((unsupported)) ((xContext)) (5) ((xROUND_UP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcontext).xcreate_decimal_from_float)) (((xmath).xpi)))) ((((xDecimal)) ("3.1416"))))
                        xcontext.write (((unsupported)) ((xContext)) (5) ((((unsupported)) ((xInexact)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xInexact)) (((xcontext).xcreate_decimal_from_float)) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xcontext).xcreate_decimal_from_float)) ((0.0.neg)))))) ("Decimal('-0')"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xcontext).xcreate_decimal_from_float)) (1.0))))) ("Decimal('1')"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xcontext).xcreate_decimal_from_float)) (10))))) ("Decimal('10')"))
                xtest_quantize.write
                  [xself]
                    memory > xc
                    memory > xInvalidOperation
                    memory > xx
                    memory > xDecimal
                    memory > xd
                    memory > xContext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xc.write (((unsupported)) ((xContext)) (99999) ((99999.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("7.335")).xquantize)) ((((xDecimal)) (".01"))))) ((((xDecimal)) ("7.34"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xDecimal)) ("7.335")).xquantize)) ((((xDecimal)) (".01"))) ((xROUND_DOWN)))) ((((xDecimal)) ("7.33"))))
                        (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("10e99999")).xquantize)) ((((xDecimal)) ("1e100000"))) ((xc)))
                        xc.write (((xContext)) 0)
                        xd.write (((xDecimal)) ("0.871831e800"))
                        xx.write (((unsupported)) (((xd).xquantize)) ((xc)) ((((xDecimal)) ("1e797"))) ((xROUND_DOWN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("8.71E+799"))))
                xtest_complex.write
                  [xself]
                    memory > xx
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xx.write (((xDecimal)) ("9.8182731e181273"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xx).xreal)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xx).ximag)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xconjugate)) 0)) ((xx)))
                        xx.write (((xDecimal)) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcomplex)) ((xx)))) ((((xcomplex)) ((((xfloat)) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) ((xx)) ("real") (100))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) ((xx)) ("imag") (100))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) ((xx)) ("conjugate") (100))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) ((xx)) ("__complex__") (100))
                xtest_named_parameters.write
                  [xself]
                    memory > xOverflow
                    memory > xInvalidOperation
                    memory > xlocalcontext
                    memory > xxc
                    memory > xContext
                    memory > xD
                    seq > @
                      seq
                        xD.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xxc.write (((xContext)) 0)
                        (((unsupported)) (((xxc).xprec)) (1))
                        (((unsupported)) (((xxc).xEmax)) (1))
                        (((unsupported)) (((xxc).xEmin)) ((1.neg)))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xD)) (9) ((xxc)))) (9))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) (9) ((xxc)))) (9))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) ((xxc)) (9))) (9))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xD)) ((xxc)))) (0))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) ((xD)) ("xyz") ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) (2)).xexp)) ((xxc)))) (7))
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((((xD)) (8)).xexp)) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) (2)).xln)) ((xxc)))) ((((xD)) ("0.7"))))
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xD)) ((1.neg))).xln)) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) (0)).xlog10)) ((xxc)))) ((((xD)) ("-inf"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ((1.neg))).xnext_minus)) ((xxc)))) ((2.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ((1.neg))).xnext_plus)) ((xxc)))) ((((xD)) ("-0.9"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("9.73")).xnormalize)) ((xxc)))) ((((xD)) ("1E+1"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("9999")).xto_integral)) ((xxc)))) (9999))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("-2000")).xto_integral_exact)) ((xxc)))) ((2000.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("123")).xto_integral_value)) ((xxc)))) (123))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.0625")).xsqrt)) ((xxc)))) ((((xD)) ("0.2"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.0625")).xcompare)) ((xxc)) (3))) ((1.neg)))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xD)) ("0")).xcompare_signal)) ((((xD)) ("nan"))) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.01")).xmax)) ((((xD)) ("0.0101"))) ((xxc)))) ((((xD)) ("0.0"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.01")).xmax)) ((((xD)) ("0.0101"))) ((xxc)))) ((((xD)) ("0.0"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.2")).xmax_mag)) ((((xD)) ("-0.3"))) ((xxc)))) ((((xD)) ("-0.3"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.02")).xmin)) ((((xD)) ("-0.03"))) ((xxc)))) ((((xD)) ("-0.0"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.02")).xmin_mag)) ((((xD)) ("-0.03"))) ((xxc)))) ((((xD)) ("0.0"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.2")).xnext_toward)) ((((xD)) ("-1"))) ((xxc)))) ((((xD)) ("0.1"))))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xInvalidOperation)) (((((xD)) ("0.2")).xquantize)) ((((xD)) ("1e10"))) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("9.99")).xremainder_near)) ((((xD)) ("1.5"))) ((xxc)))) ((((xD)) ("-0.5"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("9.9")).xfma)) ((((xD)) ("0.9"))) ((xxc)) (7))) ((((xD)) ("7E+1"))))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_canonical)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_finite)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_infinite)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_nan)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_qnan)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_snan)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_signed)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xis_zero)) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((((xD)) ("0.01")).xis_normal)) ((xxc)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((((xD)) ("0.01")).xis_subnormal)) ((xxc)))))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xadjusted)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xconjugate)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xradix)) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ((111.neg))).xlogb)) ((xxc)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) (0)).xlogical_invert)) ((xxc)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.01")).xnumber_class)) ((xxc)))) ("+Subnormal"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("0.21")).xto_eng_string)) ((xxc)))) ("0.21"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("11")).xlogical_and)) ((((xD)) ("10"))) ((xxc)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("11")).xlogical_or)) ((((xD)) ("10"))) ((xxc)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("01")).xlogical_xor)) ((((xD)) ("10"))) ((xxc)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("23")).xrotate)) (1) ((xxc)))) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("23")).xrotate)) (1) ((xxc)))) (3))
                            bogusForceDataize.write ((((xxc).xclear_flags)) 0)
                            (((unsupported)) (((xself).xassertRaises)) ((xOverflow)) (((((xD)) ("23")).xscaleb)) (1) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xxc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xD)) ("23")).xshift)) ((1.neg)) ((xxc)))) (0))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xD).xfrom_float)) (1.1) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (0)).xas_tuple)) ((xxc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xD)) (1)).xcanonical)) 0)) (1))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) ("-1")).xcopy_abs)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) ("-1")).xcopy_negate)) ((xxc)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xcanonical)) ("x"))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((((xD)) (1)).xcanonical)) ("x"))
                xtest_exception_hierarchy.write
                  [xself]
                    memory > xdecimal
                    memory > xOverflow
                    memory > xDecimalException
                    memory > xInvalidOperation
                    memory > xFloatOperation
                    memory > xUnderflow
                    memory > xDivisionByZero
                    memory > xInexact
                    memory > xRounded
                    memory > xClamped
                    memory > xSubnormal
                    seq > @
                      seq
                        xdecimal.write ((xself).xdecimal)
                        xDecimalException.write ((xdecimal).xDecimalException)
                        xInvalidOperation.write ((xdecimal).xInvalidOperation)
                        xFloatOperation.write ((xdecimal).xFloatOperation)
                        xDivisionByZero.write ((xdecimal).xDivisionByZero)
                        xOverflow.write ((xdecimal).xOverflow)
                        xUnderflow.write ((xdecimal).xUnderflow)
                        xSubnormal.write ((xdecimal).xSubnormal)
                        xInexact.write ((xdecimal).xInexact)
                        xRounded.write ((xdecimal).xRounded)
                        xClamped.write ((xdecimal).xClamped)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xDecimalException)) ((xArithmeticError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xInvalidOperation)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xFloatOperation)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xFloatOperation)) ((xTypeError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xDivisionByZero)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xDivisionByZero)) ((xZeroDivisionError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xOverflow)) ((xRounded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xOverflow)) ((xInexact)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xOverflow)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xUnderflow)) ((xInexact)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xUnderflow)) ((xRounded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xUnderflow)) ((xSubnormal)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xUnderflow)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xSubnormal)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xInexact)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xRounded)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xClamped)) ((xDecimalException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xdecimal).xConversionSyntax)) ((xInvalidOperation)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xdecimal).xDivisionImpossible)) ((xInvalidOperation)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xdecimal).xDivisionUndefined)) ((xInvalidOperation)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xdecimal).xDivisionUndefined)) ((xZeroDivisionError)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xdecimal).xInvalidContext)) ((xInvalidOperation)))))
            (((unsupported)) ((xPythonAPItests)))
              xdecimal.write (xC)
            (((unsupported)) ((xPythonAPItests)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_none_args.write
                  [xself]
                    memory > xContext
                    memory > xOverflow
                    memory > xc2
                    memory > xInvalidOperation
                    memory > xDivisionByZero
                    memory > xc1
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xDivisionByZero.write (((xself).xdecimal).xDivisionByZero)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xc1.write (((xContext)) 0)
                        xc2.write (((unsupported)) ((xContext)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xc)) ((((unsupported)) ((xc1)) ((xc2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (28))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) ((xROUND_HALF_EVEN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (999999))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((999999.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xcapitals)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xclamp)) (0))
                            bogusForceDataize.write (((xassert_signals)) ((xself)) ((xc)) ("flags") ((((unsupported)) 0)))
                            bogusForceDataize.write (((xassert_signals)) ((xself)) ((xc)) ("traps") ((((unsupported)) ((xInvalidOperation)) ((xDivisionByZero)) ((xOverflow)))))
                xtest_from_legacy_strings.write
                  [xself]
                    memory > xs
                    memory > xc
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xc.write (((((xself).xdecimal).xContext)) 0)
                        (((unsupported)) ((xrnd)) ((xRoundingModes)))
                          seq
                            (((unsupported)) (((xc).xrounding)) (((((x_testcapi).xunicode_legacy_string)) ((xrnd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) ((xrnd)))
                        xs.write ((((x_testcapi).xunicode_legacy_string)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") ((xs)))
                        xs.write ((((x_testcapi).xunicode_legacy_string)) ("ROUND_x00UP"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") ((xs)))
                xtest_pickle.write
                  [xself]
                    memory > xc
                    memory > xemax
                    memory > xemin
                    memory > xsavedecimal
                    memory > xcaps
                    memory > xs
                    memory > xe
                    memory > xclamp
                    memory > xd
                    memory > xContext
                    memory > xprec
                    memory > xcombinations
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xContext.write (((xself).xdecimal).xContext)
                          xsavedecimal.write (((unsupported)) (((xsys).xmodules)) ("decimal"))
                          (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) (((xself).xdecimal)))
                          xc.write (((xContext)) 0)
                          xe.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xc)) ((xproto)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (((xe).xprec)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) (((xe).xEmin)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (((xe).xEmax)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) (((xe).xrounding)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xcapitals)) (((xe).xcapitals)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xclamp)) (((xe).xclamp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xflags)) (((xe).xflags)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xtraps)) (((xe).xtraps)))
                          xcombinations.write ((xC).if (((unsupported)) ((((unsupported)) ((xC)) ((xP)))) ((((unsupported)) ((xP)) ((xC))))) (((unsupported)) ((((unsupported)) ((xP)) ((xP))))))
                          (((unsupported)) ((((unsupported)) ((xdumper)) ((xloader)))) ((xcombinations)))
                            (((unsupported)) ((((unsupported)) ((xri)) ((x_)))) ((((xenumerate)) ((xRoundingModes)))))
                              (((unsupported)) ((((unsupported)) ((xfi)) ((x_)))) ((((xenumerate)) ((((unsupported)) ((xOrderedSignals)) ((xdumper)))))))
                                (((unsupported)) ((((unsupported)) ((xti)) ((x_)))) ((((xenumerate)) ((((unsupported)) ((xOrderedSignals)) ((xdumper)))))))
                                  seq
                                    xprec.write ((((xrandom).xrandrange)) (1) (100))
                                    xemin.write ((((xrandom).xrandrange)) ((100.neg)) (0))
                                    xemax.write ((((xrandom).xrandrange)) (1) (100))
                                    xcaps.write ((((xrandom).xrandrange)) (2))
                                    xclamp.write ((((xrandom).xrandrange)) (2))
                                    (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xdumper)))
                                    xc.write (((unsupported)) (((xdumper).xContext)) ((xprec)) ((xemin)) ((xemax)) ((((unsupported)) ((xRoundingModes)) ((xri)))) ((xcaps)) ((xclamp)) ((((unsupported)) ((((unsupported)) ((xOrderedSignals)) ((xdumper)))) ((((unsupported)) ((xfi)))))) ((((unsupported)) ((((unsupported)) ((xOrderedSignals)) ((xdumper)))) ((((unsupported)) ((xti)))))))
                                    xs.write ((((xpickle).xdumps)) ((xc)) ((xproto)))
                                    (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xloader)))
                                    xd.write ((((xpickle).xloads)) ((xs)))
                                    bogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) (((xloader).xContext)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xprec)) ((xprec)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xEmin)) ((xemin)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xEmax)) ((xemax)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xrounding)) ((((unsupported)) ((xRoundingModes)) ((xri)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xcapitals)) ((xcaps)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd).xclamp)) ((xclamp)))
                                    bogusForceDataize.write (((xassert_signals)) ((xself)) ((xd)) ("flags") ((((unsupported)) ((((unsupported)) ((xOrderedSignals)) ((xloader)))) ((((unsupported)) ((xfi)))))))
                                    bogusForceDataize.write (((xassert_signals)) ((xself)) ((xd)) ("traps") ((((unsupported)) ((((unsupported)) ((xOrderedSignals)) ((xloader)))) ((((unsupported)) ((xti)))))))
                          (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xsavedecimal)))
                xtest_equality_with_other_types.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xDecimal)) (10))) ((((unsupported)) ("a") (1.0) ((((xDecimal)) (10))) ((((unsupported)) (1) (2))) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((xDecimal)) (10))) ((((unsupported)) ("a") (1.0) ((((unsupported)) (1) (2))) ((((unsupported)) 0)))))
                xtest_copy.write
                  [xself]
                    memory > xc
                    memory > xk1
                    memory > xk2
                    memory > xDecimal
                    memory > xd
                    memory > xContext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xc)))) ((((xid)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) (((xc).xflags)))) ((((xid)) (((xd).xflags)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) (((xc).xtraps)))) ((((xid)) (((xd).xtraps)))))
                        xk1.write (((xset)) ((((((xc).xflags).xkeys)) 0)))
                        xk2.write (((xset)) ((((((xd).xflags).xkeys)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xk1)) ((xk2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xflags)) (((xd).xflags)))
                xtest__clamp.write
                  [xself]
                    memory > xContext
                    memory > xc
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xc)) ("_clamp"))
                xtest_abs.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xabs)) ((((xDecimal)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xabs)) ((1.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xabs)) ("-1"))
                xtest_add.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xadd)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xadd)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xadd)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xadd)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xadd)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xadd)) (1) ("1"))
                xtest_compare.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcompare)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare)) (1) ("1"))
                xtest_compare_signal.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcompare_signal)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_signal)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_signal)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_signal)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_signal)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_signal)) (1) ("1"))
                xtest_compare_total.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcompare_total)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_total)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_total)) (1) ("1"))
                xtest_compare_total_mag.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcompare_total_mag)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total_mag)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total_mag)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcompare_total_mag)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_total_mag)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcompare_total_mag)) (1) ("1"))
                xtest_copy_abs.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcopy_abs)) ((((xDecimal)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_abs)) ((1.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_abs)) ("-1"))
                xtest_copy_decimal.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcopy_decimal)) ((((xDecimal)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_decimal)) ((1.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_decimal)) ("-1"))
                xtest_copy_negate.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcopy_negate)) ((((xDecimal)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_negate)) ((1.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_negate)) ("-1"))
                xtest_copy_sign.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xcopy_sign)) ((((xDecimal)) (1))) ((((xDecimal)) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_sign)) (1) ((2.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_sign)) ((((xDecimal)) (1))) ((2.neg)))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcopy_sign)) (1) ((((xDecimal)) ((2.neg)))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_sign)) ("1") ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_sign)) (1) ("-2"))
                xtest_divide.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xdivide)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivide)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivide)) (1) ("2"))
                xtest_divide_int.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xdivide_int)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide_int)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide_int)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivide_int)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivide_int)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivide_int)) (1) ("2"))
                xtest_divmod.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xdivmod)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivmod)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivmod)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xdivmod)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivmod)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivmod)) (1) ("2"))
                xtest_exp.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xexp)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xexp)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xexp)) ("10"))
                xtest_fma.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xfma)) ((((xDecimal)) (2))) ((((xDecimal)) (3))) ((((xDecimal)) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xfma)) (2) (3) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xfma)) ((((xDecimal)) (2))) (3) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xfma)) (2) ((((xDecimal)) (3))) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xfma)) (2) (3) ((((xDecimal)) (4))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xfma)) ((((xDecimal)) (2))) ((((xDecimal)) (3))) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xfma)) ("2") (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xfma)) (2) ("3") (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xfma)) (2) (3) ("4"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xfma)) ((((xDecimal)) ("Infinity"))) ((((xDecimal)) (0))) ("not a decimal"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xfma)) ((((xDecimal)) (1))) ((((xDecimal)) ("snan"))) (1.222))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("Infinity")).xfma)) ((((xDecimal)) (0))) ("not a decimal"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).xfma)) ((((xDecimal)) ("snan"))) (1.222))
                xtest_is_finite.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_finite)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_finite)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_finite)) ("10"))
                xtest_is_infinite.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_infinite)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_infinite)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_infinite)) ("10"))
                xtest_is_nan.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_nan)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_nan)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_nan)) ("10"))
                xtest_is_normal.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_normal)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_normal)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_normal)) ("10"))
                xtest_is_qnan.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_qnan)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_qnan)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_qnan)) ("10"))
                xtest_is_signed.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_signed)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_signed)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_signed)) ("10"))
                xtest_is_snan.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_snan)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_snan)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_snan)) ("10"))
                xtest_is_subnormal.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_subnormal)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_subnormal)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_subnormal)) ("10"))
                xtest_is_zero.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xis_zero)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xis_zero)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_zero)) ("10"))
                xtest_ln.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xln)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xln)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xln)) ("10"))
                xtest_log10.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlog10)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlog10)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlog10)) ("10"))
                xtest_logb.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlogb)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogb)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogb)) ("10"))
                xtest_logical_and.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlogical_and)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_and)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_and)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_and)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_and)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_and)) (1) ("1"))
                xtest_logical_invert.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlogical_invert)) ((((xDecimal)) (1000))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_invert)) (1000))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_invert)) ("1000"))
                xtest_logical_or.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlogical_or)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_or)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_or)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_or)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_or)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_or)) (1) ("1"))
                xtest_logical_xor.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xlogical_xor)) ((((xDecimal)) (1))) ((((xDecimal)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_xor)) (1) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_xor)) ((((xDecimal)) (1))) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xlogical_xor)) (1) ((((xDecimal)) (1))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_xor)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xlogical_xor)) (1) ("1"))
                xtest_max.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xmax)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmax)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmax)) (1) ("2"))
                xtest_max_mag.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xmax_mag)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax_mag)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax_mag)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmax_mag)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmax_mag)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmax_mag)) (1) ("2"))
                xtest_min.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xmin)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmin)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmin)) (1) ("2"))
                xtest_min_mag.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xmin_mag)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin_mag)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin_mag)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmin_mag)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmin_mag)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmin_mag)) (1) ("2"))
                xtest_minus.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xminus)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xminus)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xminus)) ("10"))
                xtest_multiply.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xmultiply)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmultiply)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmultiply)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xmultiply)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmultiply)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xmultiply)) (1) ("2"))
                xtest_next_minus.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xnext_minus)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnext_minus)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xnext_minus)) ("10"))
                xtest_next_plus.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xnext_plus)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnext_plus)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xnext_plus)) ("10"))
                xtest_next_toward.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xnext_toward)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnext_toward)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnext_toward)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnext_toward)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xnext_toward)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xnext_toward)) (1) ("2"))
                xtest_normalize.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xnormalize)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnormalize)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xnormalize)) ("10"))
                xtest_number_class.write
                  [xself]
                    memory > xContext
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnumber_class)) (123))) (((((xc).xnumber_class)) ((((xDecimal)) (123))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnumber_class)) (0))) (((((xc).xnumber_class)) ((((xDecimal)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xnumber_class)) ((45.neg)))) (((((xc).xnumber_class)) ((((xDecimal)) ((45.neg)))))))
                xtest_plus.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xplus)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xplus)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xplus)) ("10"))
                xtest_power.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xpower)) ((((xDecimal)) (1))) ((((xDecimal)) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xpower)) (1) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xpower)) ((((xDecimal)) (1))) (4))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xpower)) (1) ((((xDecimal)) (4))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xpower)) ((((xDecimal)) (1))) ((((xDecimal)) (4))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xpower)) ("1") (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xpower)) (1) ("4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xc).xpower)) (5) (8) (2))) (1))
                xtest_quantize.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xquantize)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xquantize)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xquantize)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xquantize)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xquantize)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xquantize)) (1) ("2"))
                xtest_remainder.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xremainder)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xremainder)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xremainder)) (1) ("2"))
                xtest_remainder_near.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xremainder_near)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder_near)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder_near)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xremainder_near)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xremainder_near)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xremainder_near)) (1) ("2"))
                xtest_rotate.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xrotate)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xrotate)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xrotate)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xrotate)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xrotate)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xrotate)) (1) ("2"))
                xtest_sqrt.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xsqrt)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsqrt)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsqrt)) ("10"))
                xtest_same_quantum.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xsame_quantum)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsame_quantum)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsame_quantum)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsame_quantum)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsame_quantum)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsame_quantum)) (1) ("2"))
                xtest_scaleb.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xscaleb)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xscaleb)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xscaleb)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xscaleb)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xscaleb)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xscaleb)) (1) ("2"))
                xtest_shift.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xshift)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xshift)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xshift)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xshift)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xshift)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xshift)) (1) ("2"))
                xtest_subtract.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xsubtract)) ((((xDecimal)) (1))) ((((xDecimal)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsubtract)) (1) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsubtract)) ((((xDecimal)) (1))) (2))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xsubtract)) (1) ((((xDecimal)) (2))))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsubtract)) ("1") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsubtract)) (1) ("2"))
                xtest_to_eng_string.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xto_eng_string)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xto_eng_string)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xto_eng_string)) ("10"))
                xtest_to_sci_string.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xto_sci_string)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xto_sci_string)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xto_sci_string)) ("10"))
                xtest_to_integral_exact.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xto_integral_exact)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xto_integral_exact)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xto_integral_exact)) ("10"))
                xtest_to_integral_value.write
                  [xself]
                    memory > xContext
                    memory > xd
                    memory > xDecimal
                    memory > xc
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        xd.write ((((xc).xto_integral_value)) ((((xDecimal)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xto_integral_value)) (10))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xto_integral_value)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xto_integral_value)) (10) ("x"))
            (((unsupported)) ((xContextAPItests)))
              xdecimal.write (xC)
            (((unsupported)) ((xContextAPItests)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_localcontext.write
                  [xself]
                    memory > xorig_ctx
                    memory > xfinal_ctx
                    memory > xset_ctx
                    memory > xgetcontext
                    memory > xlocalcontext
                    seq > @
                      seq
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xorig_ctx.write (((xgetcontext)) 0)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xenter_ctx)))
                          xset_ctx.write (((xgetcontext)) 0)
                        xfinal_ctx.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) ((xorig_ctx)) ((xfinal_ctx)) ("did not restore context correctly"))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xorig_ctx)) ((xset_ctx)) ("did not copy the context"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xset_ctx)) ((xenter_ctx)) ("__enter__ returned wrong context"))
                xtest_localcontextarg.write
                  [xself]
                    memory > xContext
                    memory > xorig_ctx
                    memory > xnew_ctx
                    memory > xfinal_ctx
                    memory > xset_ctx
                    memory > xgetcontext
                    memory > xlocalcontext
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xorig_ctx.write (((xgetcontext)) 0)
                        xnew_ctx.write (((unsupported)) ((xContext)) (42))
                        (((unsupported)) ((((xlocalcontext)) ((xnew_ctx)))) ((xenter_ctx)))
                          xset_ctx.write (((xgetcontext)) 0)
                        xfinal_ctx.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) ((xorig_ctx)) ((xfinal_ctx)) ("did not restore context correctly"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xset_ctx).xprec)) (((xnew_ctx).xprec)) ("did not set correct context"))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xnew_ctx)) ((xset_ctx)) ("did not copy the context"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xset_ctx)) ((xenter_ctx)) ("__enter__ returned wrong context"))
                xtest_nested_with_statements.write
                  [xself]
                    memory > xContext
                    memory > xOverflow
                    memory > xorig_ctx
                    memory > xnew_ctx
                    memory > xDecimal
                    memory > xgetcontext
                    memory > xClamped
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xClamped.write (((xself).xdecimal).xClamped)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xorig_ctx.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xorig_ctx).xclear_flags)) 0)
                        xnew_ctx.write (((unsupported)) ((xContext)) (384))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc1)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc1).xflags)) (((xorig_ctx).xflags)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc1).xtraps)) (((xorig_ctx).xtraps)))
                            (((unsupported)) ((((unsupported)) (((xc1).xtraps)) ((xClamped)))) (TRUE))
                            (((unsupported)) (((xc1).xEmin)) ((383.neg)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) (((xorig_ctx).xEmin)) ((383.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xClamped)) (((xc1).xcreate_decimal)) ("0e-999"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc1).xflags)) ((xClamped)))))
                            (((unsupported)) ((((xlocalcontext)) ((xnew_ctx)))) ((xc2)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc2).xflags)) (((xnew_ctx).xflags)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc2).xtraps)) (((xnew_ctx).xtraps)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflow)) (((xc2).xpower)) ((((xDecimal)) ("3.4e200"))) (2))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc2).xflags)) ((xClamped)))))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc2).xflags)) ((xOverflow)))))
                                (((unsupported)) ((((unsupported)) ((xc2)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc1).xflags)) ((xOverflow)))))
                            (((unsupported)) ((((unsupported)) ((xc1)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xorig_ctx).xEmin)) ((383.neg)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xorig_ctx).xflags)) ((xClamped)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xorig_ctx).xflags)) ((xOverflow)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xnew_ctx).xflags)) ((xClamped)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xnew_ctx).xflags)) ((xOverflow)))))
                xtest_with_statements_gc1.write
                  [xself]
                    memory > xlocalcontext
                    seq > @
                      seq
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc1)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xc1)))))
                            (((unsupported)) ((((xlocalcontext)) 0)) ((xc2)))
                              seq
                                (((unsupported)) ((((unsupported)) ((xc2)))))
                                (((unsupported)) ((((xlocalcontext)) 0)) ((xc3)))
                                  seq
                                    (((unsupported)) ((((unsupported)) ((xc3)))))
                                    (((unsupported)) ((((xlocalcontext)) 0)) ((xc4)))
                                      (((unsupported)) ((((unsupported)) ((xc4)))))
                xtest_with_statements_gc2.write
                  [xself]
                    memory > xlocalcontext
                    seq > @
                      seq
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc1)))
                          (((unsupported)) ((((xlocalcontext)) ((xc1)))) ((xc2)))
                            seq
                              (((unsupported)) ((((unsupported)) ((xc1)))))
                              (((unsupported)) ((((xlocalcontext)) ((xc2)))) ((xc3)))
                                seq
                                  (((unsupported)) ((((unsupported)) ((xc2)))))
                                  (((unsupported)) ((((xlocalcontext)) ((xc3)))) ((xc4)))
                                    seq
                                      (((unsupported)) ((((unsupported)) ((xc3)))))
                                      (((unsupported)) ((((unsupported)) ((xc4)))))
                xtest_with_statements_gc3.write
                  [xself]
                    memory > xContext
                    memory > xn1
                    memory > xlocalcontext
                    memory > xsetcontext
                    memory > xn3
                    memory > xn4
                    memory > xgetcontext
                    memory > xn2
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xsetcontext.write (((xself).xdecimal).xsetcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc1)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xc1)))))
                            xn1.write (((unsupported)) ((xContext)) (1))
                            bogusForceDataize.write (((xsetcontext)) ((xn1)))
                            (((unsupported)) ((((xlocalcontext)) ((xn1)))) ((xc2)))
                              seq
                                (((unsupported)) ((((unsupported)) ((xn1)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc2).xprec)) (1))
                                (((unsupported)) ((((unsupported)) ((xc2)))))
                                xn2.write (((unsupported)) ((xContext)) (2))
                                bogusForceDataize.write (((xsetcontext)) ((xn2)))
                                (((unsupported)) ((((unsupported)) ((xn2)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xgetcontext)) 0).xprec)) (2))
                                xn3.write (((unsupported)) ((xContext)) (3))
                                bogusForceDataize.write (((xsetcontext)) ((xn3)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xgetcontext)) 0).xprec)) (3))
                                (((unsupported)) ((((xlocalcontext)) ((xn3)))) ((xc3)))
                                  seq
                                    (((unsupported)) ((((unsupported)) ((xn3)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xc3).xprec)) (3))
                                    (((unsupported)) ((((unsupported)) ((xc3)))))
                                    xn4.write (((unsupported)) ((xContext)) (4))
                                    bogusForceDataize.write (((xsetcontext)) ((xn4)))
                                    (((unsupported)) ((((unsupported)) ((xn4)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xgetcontext)) 0).xprec)) (4))
                                    (((unsupported)) ((((xlocalcontext)) 0)) ((xc4)))
                                      seq
                                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc4).xprec)) (4))
                                        (((unsupported)) ((((unsupported)) ((xc4)))))
            (((unsupported)) ((xContextWithStatement)))
              xdecimal.write (xC)
            (((unsupported)) ((xContextWithStatement)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_flags_irrelevant.write
                  [xself]
                    memory > xoperations
                    memory > xflags
                    memory > xflagsets
                    memory > xans
                    memory > xcontext
                    memory > xnew_ans
                    memory > xnew_flags
                    memory > xUnderflow
                    memory > xraise_error
                    memory > xContext
                    memory > xInexact
                    memory > xDecimal
                    memory > xClamped
                    memory > xSubnormal
                    memory > xRounded
                    memory > xexpected_flags
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xInexact.write (((xself).xdecimal).xInexact)
                        xRounded.write (((xself).xdecimal).xRounded)
                        xUnderflow.write (((xself).xdecimal).xUnderflow)
                        xClamped.write (((xself).xdecimal).xClamped)
                        xSubnormal.write (((xself).xdecimal).xSubnormal)
                        xraise_error.write
                          [xcontext xflag]
                            seq > @
                              (((xself).xdecimal).eq (xC)).if
                                seq
                                  (((unsupported)) ((((unsupported)) (((xcontext).xflags)) ((xflag)))) (TRUE))
                                  (((unsupported)) (((xcontext).xtraps)) ((xflag))).if
                                    (((unsupported)) ((xflag)))
                                bogusForceDataize.write ((((xcontext).x_raise_error)) ((xflag)))
                        xcontext.write (((unsupported)) ((xContext)) (9) ((425000000.neg)) (425000000) ((xROUND_HALF_EVEN)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        xoperations.write (((unsupported)) ((((unsupported)) (((xcontext).x_apply)) ((((unsupported)) ((((xDecimal)) ("100E-425000010"))))))) ((((unsupported)) (((xcontext).xsqrt)) ((((unsupported)) ((((xDecimal)) (2))))))) ((((unsupported)) (((xcontext).xadd)) ((((unsupported)) ((((xDecimal)) ("1.23456789"))) ((((xDecimal)) ("9.87654321"))))))) ((((unsupported)) (((xcontext).xmultiply)) ((((unsupported)) ((((xDecimal)) ("1.23456789"))) ((((xDecimal)) ("9.87654321"))))))) ((((unsupported)) (((xcontext).xsubtract)) ((((unsupported)) ((((xDecimal)) ("1.23456789"))) ((((xDecimal)) ("9.87654321"))))))))
                        xflagsets.write (((unsupported)) ((((unsupported)) ((xInexact)))) ((((unsupported)) ((xRounded)))) ((((unsupported)) ((xUnderflow)))) ((((unsupported)) ((xClamped)))) ((((unsupported)) ((xSubnormal)))) ((((unsupported)) ((xInexact)) ((xRounded)) ((xUnderflow)) ((xClamped)) ((xSubnormal)))))
                        (((unsupported)) ((((unsupported)) ((xfn)) ((xargs)))) ((xoperations)))
                          seq
                            bogusForceDataize.write ((((xcontext).xclear_flags)) 0)
                            xans.write (((xfn)) ((((unsupported)) ((xargs)))))
                            xflags.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xv)))) ((((((xcontext).xflags).xitems)) 0)) ((xv)))
                            (((unsupported)) ((xextra_flags)) ((xflagsets)))
                              seq
                                bogusForceDataize.write ((((xcontext).xclear_flags)) 0)
                                (((unsupported)) ((xflag)) ((xextra_flags)))
                                  bogusForceDataize.write (((xraise_error)) ((xcontext)) ((xflag)))
                                xnew_ans.write (((xfn)) ((((unsupported)) ((xargs)))))
                                xexpected_flags.write (((xlist)) ((xflags)))
                                (((unsupported)) ((xflag)) ((xextra_flags)))
                                  (((unsupported)) ((xflag)) ((xexpected_flags))).if
                                    bogusForceDataize.write ((((xexpected_flags).xappend)) ((xflag)))
                                (((unsupported)) (((xexpected_flags).xsort)) ((xid)))
                                xnew_flags.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xv)))) ((((((xcontext).xflags).xitems)) 0)) ((xv)))
                                (((unsupported)) (((xnew_flags).xsort)) ((xid)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((xnew_ans)) (("operation produces different answers depending on flags set: ".add ("expected %s, got %s.".mod (((unsupported)) ((xans)) ((xnew_ans)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_flags)) ((xexpected_flags)) (("operation raises different flags depending on flags set: ".add ("expected %s, got %s".mod (((unsupported)) ((xexpected_flags)) ((xnew_flags)))))))
                xtest_flag_comparisons.write
                  [xself]
                    memory > xc
                    memory > xInexact
                    memory > xRounded
                    memory > xd
                    memory > xContext
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xInexact.write (((xself).xdecimal).xInexact)
                        xRounded.write (((xself).xdecimal).xRounded)
                        xc.write (((xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xc).xflags)) (((xc).xtraps)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xc).xtraps)) (((xc).xflags)))
                        (((unsupported)) (((xc).xflags)) (((xc).xtraps)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xflags)) (((xc).xtraps)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xtraps)) (((xc).xflags)))
                        (((unsupported)) ((((unsupported)) (((xc).xflags)) ((xRounded)))) (TRUE))
                        (((unsupported)) (((xc).xtraps)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xflags)) (((xc).xtraps)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xtraps)) (((xc).xflags)))
                        xd.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xd).xupdate)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xd)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xflags)) ((xd)))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xInexact)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xd)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xc).xflags)) ((xd)))
                        xd.write (((unsupported)) ((xInexact)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xd)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xc).xflags)) ((xd)))
                        xd.write (((unsupported)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xd)) (((xc).xflags)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xc).xflags)) ((xd)))
                xtest_float_operation.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    memory > xFloatOperation
                    seq > @
                      (((unsupported)) 0)
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xFloatOperation.write (((xself).xdecimal).xFloatOperation)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xtraps)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xDecimal)) (7.5))) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xcreate_decimal)) (7.5))) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xx.write ((((xDecimal).xfrom_float)) (7.5))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xx.write ((((xc).xcreate_decimal_from_float)) (7.5))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xFloatOperation)))) (TRUE))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFloatOperation)) ((xDecimal)) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFloatOperation)) (((xc).xcreate_decimal)) (7.5))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xx.write ((((xDecimal).xfrom_float)) (7.5))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            xx.write ((((xc).xcreate_decimal_from_float)) (7.5))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                xtest_float_comparison.write
                  [xself]
                    memory > xContext
                    memory > xbig_d
                    memory > xneg_zero_f
                    memory > xassert_attr
                    memory > xsmall_d
                    memory > xbig_f
                    memory > xnc
                    memory > xdoit
                    memory > xzero_f
                    memory > xDecimal
                    memory > xinf_d
                    memory > xtest_containers
                    memory > xzero_d
                    memory > xneg_inf_f
                    memory > xneg_inf_d
                    memory > xneg_zero_d
                    memory > xsmall_f
                    memory > xFloatOperation
                    memory > xlocalcontext
                    memory > xinf_f
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xFloatOperation.write (((xself).xdecimal).xFloatOperation)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xassert_attr.write
                          [xa xb xattr xcontext xsignal]
                            memory > xf
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xcontext).xclear_flags)) 0)
                                xf.write (((xgetattr)) ((xa)) ((xattr)))
                                ((xsignal).eq (xFloatOperation)).if
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xsignal)) ((xf)) ((xb)))
                                  bogusForceDataize.write ((((xself).xassertIs)) ((((xf)) ((xb)))) (TRUE))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xcontext).xflags)) ((xFloatOperation)))))
                        xsmall_d.write (((xDecimal)) ("0.25"))
                        xbig_d.write (((xDecimal)) ("3.0"))
                        xsmall_f.write 0.25
                        xbig_f.write 3.0
                        xzero_d.write (((xDecimal)) ("0.0"))
                        xneg_zero_d.write (((xDecimal)) ("-0.0"))
                        xzero_f.write 0.0
                        xneg_zero_f.write (0.0.neg)
                        xinf_d.write (((xDecimal)) ("Infinity"))
                        xneg_inf_d.write (((xDecimal)) ("-Infinity"))
                        xinf_f.write (((xfloat)) ("inf"))
                        xneg_inf_f.write (((xfloat)) ("-inf"))
                        xdoit.write
                          [xc xsignal]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xattr)) ((((unsupported)) ("__lt__") ("__le__"))))
                                  bogusForceDataize.write (((xassert_attr)) ((xsmall_d)) ((xbig_f)) ((xattr)) ((xc)) ((xsignal)))
                                (((unsupported)) ((xattr)) ((((unsupported)) ("__gt__") ("__ge__"))))
                                  bogusForceDataize.write (((xassert_attr)) ((xbig_d)) ((xsmall_f)) ((xattr)) ((xc)) ((xsignal)))
                                bogusForceDataize.write (((xassert_attr)) ((xsmall_d)) ((xsmall_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xneg_zero_d)) ((xneg_zero_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xneg_zero_d)) ((xzero_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xzero_d)) ((xneg_zero_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xzero_d)) ((xzero_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xneg_inf_d)) ((xneg_inf_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xinf_d)) ((xinf_f)) ("__eq__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xsmall_d)) ((xbig_f)) ("__ne__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((((xDecimal)) ("0.1"))) (0.1) ("__ne__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xneg_inf_d)) ((xinf_f)) ("__ne__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((xinf_d)) ((xneg_inf_f)) ("__ne__") ((xc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write (((xassert_attr)) ((((xDecimal)) ("NaN"))) ((((xfloat)) ("nan"))) ("__ne__") ((xc)) ("None: is there a None literal in the EO language?"))
                        xtest_containers.write
                          [xc xsignal]
                            memory > xs
                            memory > xb
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xc).xclear_flags)) 0)
                                xs.write (((xset)) ((((unsupported)) (100.0) ((((xDecimal)) ("100.0"))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (1))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                                bogusForceDataize.write ((((xc).xclear_flags)) 0)
                                (xsignal).if
                                  bogusForceDataize.write ((((xself).xassertRaises)) ((xsignal)) ((xsorted)) ((((unsupported)) (1.0) ((((xDecimal)) ("10.0"))))))
                                  xs.write (((xsorted)) ((((unsupported)) (10.0) ((((xDecimal)) ("10.0"))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                                bogusForceDataize.write ((((xc).xclear_flags)) 0)
                                xb.write (((unsupported)) (10.0) ((((unsupported)) ((((xDecimal)) ("10.0"))) (1.0))))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                                bogusForceDataize.write ((((xc).xclear_flags)) 0)
                                xb.write (((unsupported)) (10.0) ((((unsupported)) ((((xDecimal)) ("10.0"))) ("a") (1.0) ("b"))))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))))
                        xnc.write (((xContext)) 0)
                        (((unsupported)) ((((xlocalcontext)) ((xnc)))) ((xc)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xtraps)) ((xFloatOperation)))))
                            (((unsupported)) ((xdoit)) ((xc)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((xtest_containers)) ((xc)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xFloatOperation)))) (TRUE))
                            (((unsupported)) ((xdoit)) ((xc)) ((xFloatOperation)))
                            (((unsupported)) ((xtest_containers)) ((xc)) ((xFloatOperation)))
                xtest_float_operation_default.write
                  [xself]
                    memory > xContext
                    memory > xcontext
                    memory > xFloatOperation
                    memory > xInexact
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xContext.write (((xself).xdecimal).xContext)
                        xInexact.write (((xself).xdecimal).xInexact)
                        xFloatOperation.write (((xself).xdecimal).xFloatOperation)
                        xcontext.write (((xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xcontext).xflags)) ((xFloatOperation)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xcontext).xtraps)) ((xFloatOperation)))))
                        bogusForceDataize.write ((((xcontext).xclear_traps)) 0)
                        (((unsupported)) ((((unsupported)) (((xcontext).xtraps)) ((xInexact)))) (TRUE))
                        (((unsupported)) ((((unsupported)) (((xcontext).xtraps)) ((xFloatOperation)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xcontext).xtraps)) ((xFloatOperation)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xcontext).xtraps)) ((xInexact)))))
            (((unsupported)) ((xContextFlags)))
              xdecimal.write (xC)
            (((unsupported)) ((xContextFlags)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_context_templates.write
                  [xself]
                    memory > xc
                    memory > xExtendedContext
                    memory > xOverflow
                    memory > xextended_context_prec
                    memory > xBasicContext
                    memory > xInvalidOperation
                    memory > xUnderflow
                    memory > xDivisionByZero
                    memory > xClamped
                    memory > xsetcontext
                    memory > xsavecontext
                    memory > xbasic_context_prec
                    memory > xex
                    memory > xgetcontext
                    seq > @
                      seq
                        xBasicContext.write (((xself).xdecimal).xBasicContext)
                        xExtendedContext.write (((xself).xdecimal).xExtendedContext)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xsetcontext.write (((xself).xdecimal).xsetcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xDivisionByZero.write (((xself).xdecimal).xDivisionByZero)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xUnderflow.write (((xself).xdecimal).xUnderflow)
                        xClamped.write (((xself).xdecimal).xClamped)
                        bogusForceDataize.write (((xassert_signals)) ((xself)) ((xBasicContext)) ("traps") ((((unsupported)) ((xInvalidOperation)) ((xDivisionByZero)) ((xOverflow)) ((xUnderflow)) ((xClamped)))))
                        xsavecontext.write ((((((xgetcontext)) 0).xcopy)) 0)
                        xbasic_context_prec.write ((xBasicContext).xprec)
                        xextended_context_prec.write ((xExtendedContext).xprec)
                        xex.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xException)))
                          seq
                            (((unsupported)) (((xBasicContext).xprec)) (((xExtendedContext).xprec)) (441))
                            (((unsupported)) ((xtemplate)) ((((unsupported)) ((xBasicContext)) ((xExtendedContext)))))
                              seq
                                bogusForceDataize.write (((xsetcontext)) ((xtemplate)))
                                xc.write (((xgetcontext)) 0)
                                bogusForceDataize.write ((((xself).xassertIsNot)) ((xc)) ((xtemplate)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (441))
                          xex.write ((xe).x__class__)
                          seq
                            (((unsupported)) (((xBasicContext).xprec)) ((xbasic_context_prec)))
                            (((unsupported)) (((xExtendedContext).xprec)) ((xextended_context_prec)))
                            bogusForceDataize.write (((xsetcontext)) ((xsavecontext)))
                            (xex).if
                              (((unsupported)) ((xex)))
                xtest_default_context.write
                  [xself]
                    memory > xc
                    memory > xExtendedContext
                    memory > xOverflow
                    memory > xsavecontext
                    memory > xdefault_context_prec
                    memory > xBasicContext
                    memory > xsaveprec
                    memory > xInvalidOperation
                    memory > xDivisionByZero
                    memory > xDefaultContext
                    memory > xsetcontext
                    memory > xex
                    memory > xgetcontext
                    seq > @
                      seq
                        xDefaultContext.write (((xself).xdecimal).xDefaultContext)
                        xBasicContext.write (((xself).xdecimal).xBasicContext)
                        xExtendedContext.write (((xself).xdecimal).xExtendedContext)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xsetcontext.write (((xself).xdecimal).xsetcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xDivisionByZero.write (((xself).xdecimal).xDivisionByZero)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xBasicContext).xprec)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xExtendedContext).xprec)) (9))
                        bogusForceDataize.write (((xassert_signals)) ((xself)) ((xDefaultContext)) ("traps") ((((unsupported)) ((xInvalidOperation)) ((xDivisionByZero)) ((xOverflow)))))
                        xsavecontext.write ((((((xgetcontext)) 0).xcopy)) 0)
                        xdefault_context_prec.write ((xDefaultContext).xprec)
                        xex.write "None: is there a None literal in the EO language?"
                        (((unsupported)) ((xException)))
                          seq
                            xc.write (((xgetcontext)) 0)
                            xsaveprec.write ((xc).xprec)
                            (((unsupported)) (((xDefaultContext).xprec)) (961))
                            xc.write (((xgetcontext)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) ((xsaveprec)))
                            bogusForceDataize.write (((xsetcontext)) ((xDefaultContext)))
                            xc.write (((xgetcontext)) 0)
                            bogusForceDataize.write ((((xself).xassertIsNot)) ((xc)) ((xDefaultContext)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (961))
                          xex.write ((xe).x__class__)
                          seq
                            (((unsupported)) (((xDefaultContext).xprec)) ((xdefault_context_prec)))
                            bogusForceDataize.write (((xsetcontext)) ((xsavecontext)))
                            (xex).if
                              (((unsupported)) ((xex)))
            (((unsupported)) ((xSpecialContexts)))
              xdecimal.write (xC)
            (((unsupported)) ((xSpecialContexts)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_invalid_context.write
                [xself]
                  memory > xContext
                  memory > xc
                  memory > xDefaultContext
                  seq > @
                    seq
                      xContext.write (((xself).xdecimal).xContext)
                      xDefaultContext.write (((xself).xdecimal).xDefaultContext)
                      xc.write ((((xDefaultContext).xcopy)) 0)
                      (((unsupported)) ((xattr)) ((((unsupported)) ("prec") ("Emax"))))
                        seq
                          bogusForceDataize.write (((xsetattr)) ((xc)) ((xattr)) (999999))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xc)) ((xattr)))) (999999))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((1.neg)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ("xyz"))
                      bogusForceDataize.write (((xsetattr)) ((xc)) ("Emin") ((999999.neg)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xc)) ("Emin"))) ((999999.neg)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("Emin") (1))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("Emin") ((((unsupported)) (1) (2) (3))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") ((1.neg)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") (9))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") (1.0))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("rounding") ("xyz"))
                      (((unsupported)) ((xattr)) ((((unsupported)) ("capitals") ("clamp"))))
                        seq
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((1.neg)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) (2))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ((((unsupported)) (1) (2) (3))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xsetattr)) ((xc)) ("emax") (100))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("flags") ((((unsupported)) 0)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("flags") ((((unsupported)) 0)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("traps") ((((unsupported)) ("InvalidOperation") (0))))
                      (((unsupported)) ((xattr)) ((((unsupported)) ("prec") ("Emax") ("Emin") ("rounding") ("capitals") ("clamp") ("flags") ("traps"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((xc).x__delattr__)) ((xattr)))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgetattr)) ((xc)) (9))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) (9))
                      (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xContext)) (999999))
                      (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xContext)) ("xyz"))
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((xContext)) (2))
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((xContext)) ((1.neg)))
                      (((unsupported)) (((xself).xassertRaises)) ((xKeyError)) ((xContext)) ((((unsupported)) ("P"))))
                      (((unsupported)) (((xself).xassertRaises)) ((xKeyError)) ((xContext)) ((((unsupported)) ("Q"))))
                      (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xContext)) ((((unsupported)) (0) (1))))
                      (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xContext)) ((((unsupported)) (1) (0))))
            (((unsupported)) ((xContextInputValidation)))
              xdecimal.write (xC)
            (((unsupported)) ((xContextInputValidation)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_context_subclassing.write
                [xself]
                  memory > xc
                  memory > xdecimal
                  memory > xOverflow
                  memory > xInvalidOperation
                  memory > xx
                  memory > xUnderflow
                  memory > xDivisionByZero
                  memory > x__init__
                  memory > xRounded
                  memory > xd
                  memory > xContext
                  memory > xInexact
                  memory > xDecimal
                  memory > xClamped
                  memory > xSubnormal
                  seq > @
                    seq
                      xdecimal.write ((xself).xdecimal)
                      xDecimal.write ((xdecimal).xDecimal)
                      xContext.write ((xdecimal).xContext)
                      xClamped.write ((xdecimal).xClamped)
                      xDivisionByZero.write ((xdecimal).xDivisionByZero)
                      xInexact.write ((xdecimal).xInexact)
                      xOverflow.write ((xdecimal).xOverflow)
                      xRounded.write ((xdecimal).xRounded)
                      xSubnormal.write ((xdecimal).xSubnormal)
                      xUnderflow.write ((xdecimal).xUnderflow)
                      xInvalidOperation.write ((xdecimal).xInvalidOperation)
                      (((unsupported)) ((xContext)))
                        x__init__.write
                          [xself xprec xrounding xEmin xEmax xcapitals xclamp xflags xtraps]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xContext).x__init__)) ((xself)))
                                (((unsupported)) ((xprec)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xprec)) ((xprec)))
                                (((unsupported)) ((xrounding)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xrounding)) ((xrounding)))
                                (((unsupported)) ((xEmin)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xEmin)) ((xEmin)))
                                (((unsupported)) ((xEmax)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xEmax)) ((xEmax)))
                                (((unsupported)) ((xcapitals)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xcapitals)) ((xcapitals)))
                                (((unsupported)) ((xclamp)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (((xself).xclamp)) ((xclamp)))
                                (((unsupported)) ((xflags)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    (((xisinstance)) ((xflags)) ((xlist))).if
                                      xflags.write (((unsupported)) ((xv)) ((((unsupported)) ((xv)) ((xflags)))) ((xv)) (((((unsupported)) ((xOrderedSignals)) ((xdecimal))).add (xflags))))
                                    (((unsupported)) (((xself).xflags)) ((xflags)))
                                (((unsupported)) ((xtraps)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    (((xisinstance)) ((xtraps)) ((xlist))).if
                                      xtraps.write (((unsupported)) ((xv)) ((((unsupported)) ((xv)) ((xtraps)))) ((xv)) (((((unsupported)) ((xOrderedSignals)) ((xdecimal))).add (xtraps))))
                                    (((unsupported)) (((xself).xtraps)) ((xtraps)))
                      xc.write (((xContext)) 0)
                      xd.write (((xMyContext)) 0)
                      (((unsupported)) ((xattr)) ((((unsupported)) ("prec") ("rounding") ("Emin") ("Emax") ("capitals") ("clamp") ("flags") ("traps"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xc)) ((xattr)))) ((((xgetattr)) ((xd)) ((xattr)))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("prec") ((1.neg)))))))
                      xc.write (((unsupported)) ((xMyContext)) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (1))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xc).xquantize)) ((((xDecimal)) ("9e2"))) (0))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("rounding") ("XYZ"))))))
                      xc.write (((unsupported)) ((xMyContext)) ((xROUND_DOWN)) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) ((xROUND_DOWN)))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xplus)) ((((xDecimal)) ("9.9"))))) (9))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("Emin") (5))))))
                      xc.write (((unsupported)) ((xMyContext)) ((1.neg)) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((1.neg)))
                      xx.write ((((xc).xadd)) ((((xDecimal)) ("1e-99"))) ((((xDecimal)) ("2.234e-2000"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("0.0"))))
                      (((unsupported)) ((xsignal)) ((((unsupported)) ((xInexact)) ((xUnderflow)) ((xSubnormal)) ((xRounded)) ((xClamped)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xsignal)))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("Emax") ((1.neg)))))))
                      xc.write (((unsupported)) ((xMyContext)) (1) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (1))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflow)) (((xc).xadd)) ((((xDecimal)) ("1e99"))) ((((xDecimal)) ("2.234e2000"))))
                      (((xself).xdecimal).eq (xC)).if
                        (((unsupported)) ((xsignal)) ((((unsupported)) ((xInexact)) ((xOverflow)) ((xRounded)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xsignal)))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("capitals") ((1.neg)))))))
                      xc.write (((unsupported)) ((xMyContext)) (0))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xcapitals)) (0))
                      xx.write ((((xc).xcreate_decimal)) ("1E222"))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xto_sci_string)) ((xx)))) ("1e+222"))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("clamp") (2))))))
                      xc.write (((unsupported)) ((xMyContext)) (1) (99))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xclamp)) (1))
                      xx.write ((((xc).xplus)) ((((xDecimal)) ("1e99"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xx)))) ("1.000000000000000000000000000E+99"))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("flags") ("XYZ"))))))
                      xc.write (((unsupported)) ((xMyContext)) ((((unsupported)) ((xRounded)) ((xDivisionByZero)))))
                      (((unsupported)) ((xsignal)) ((((unsupported)) ((xRounded)) ((xDivisionByZero)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xsignal)))))
                      bogusForceDataize.write ((((xc).xclear_flags)) 0)
                      (((unsupported)) ((xsignal)) ((((unsupported)) ((xOrderedSignals)) ((xdecimal)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xflags)) ((xsignal)))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xMyContext)) ((((unsupported)) ((((unsupported)) ("traps") ("XYZ"))))))
                      xc.write (((unsupported)) ((xMyContext)) ((((unsupported)) ((xRounded)) ((xDivisionByZero)))))
                      (((unsupported)) ((xsignal)) ((((unsupported)) ((xRounded)) ((xDivisionByZero)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xtraps)) ((xsignal)))))
                      bogusForceDataize.write ((((xc).xclear_traps)) 0)
                      (((unsupported)) ((xsignal)) ((((unsupported)) ((xOrderedSignals)) ((xdecimal)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xc).xtraps)) ((xsignal)))))
            (((unsupported)) ((xContextSubclassing)))
              xdecimal.write (xC)
            (((unsupported)) ((xContextSubclassing)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)) ((xskip_if_extra_functionality)))
              seq
                xtest_module_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xMAX_PREC)) (((xP).xMAX_PREC)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xMAX_EMAX)) (((xP).xMAX_EMAX)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xMIN_EMIN)) (((xP).xMIN_EMIN)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xMIN_ETINY)) (((xP).xMIN_ETINY)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) (((xC).xHAVE_THREADS)) (TRUE)).or (((unsupported)) (((xC).xHAVE_THREADS)) (FALSE)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) (((xP).xHAVE_THREADS)) (TRUE)).or (((unsupported)) (((xP).xHAVE_THREADS)) (FALSE)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__version__)) (((xP).x__version__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdir)) ((xC)))) ((((xdir)) ((xP)))))
                xtest_context_attributes.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write (((unsupported)) ((xs)) ((xs)) ((((xdir)) (((((xC).xContext)) 0)))) (((((unsupported)) ("__") ((xs))).or (((((xs).xstartswith)) ("_")).not))))
                        xy.write (((unsupported)) ((xs)) ((xs)) ((((xdir)) (((((xP).xContext)) 0)))) (((((unsupported)) ("__") ((xs))).or (((((xs).xstartswith)) ("_")).not))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xset)) ((xx))).sub (((xset)) ((xy))))) ((((xset)) 0)))
                xtest_decimal_attributes.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write (((unsupported)) ((xs)) ((xs)) ((((xdir)) (((((xC).xDecimal)) (9))))) (((((unsupported)) ("__") ((xs))).or (((((xs).xstartswith)) ("_")).not))))
                        xy.write (((unsupported)) ((xs)) ((xs)) ((((xdir)) (((((xC).xDecimal)) (9))))) (((((unsupported)) ("__") ((xs))).or (((((xs).xstartswith)) ("_")).not))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xset)) ((xx))).sub (((xset)) ((xy))))) ((((xset)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_adjusted.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("1234e9999")).xadjusted)) 0)) (10002))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("nan")).xadjusted)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("inf")).xadjusted)) 0)) (0))
                xtest_canonical.write
                  [xself]
                    memory > xx
                    memory > xDecimal
                    memory > xc
                    memory > xgetcontext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xx.write ((((((xDecimal)) (9)).xcanonical)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (9))
                        xc.write (((xgetcontext)) 0)
                        xx.write ((((xc).xcanonical)) ((((xDecimal)) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (9))
                xtest_context_repr.write
                  [xself]
                    memory > xt
                    memory > xs
                    memory > xc
                    seq > @
                      seq
                        xc.write ((((((xself).xdecimal).xDefaultContext).xcopy)) 0)
                        (((unsupported)) (((xc).xprec)) (425000000))
                        (((unsupported)) (((xc).xEmax)) (425000000))
                        (((unsupported)) (((xc).xEmin)) ((425000000.neg)))
                        (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_DOWN)))
                        (((unsupported)) (((xc).xcapitals)) (0))
                        (((unsupported)) (((xc).xclamp)) (1))
                        (((unsupported)) ((xsig)) ((((unsupported)) ((xOrderedSignals)) (((xself).xdecimal)))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xflags)) ((xsig)))) (FALSE))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xsig)))) (FALSE))
                        xs.write ((((xc).x__repr__)) 0)
                        xt.write "Context(prec=425000000, rounding=ROUND_HALF_DOWN, Emin=-425000000, Emax=425000000, capitals=0, clamp=1, flags=[], traps=[])"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xt)))
                xtest_implicit_context.write
                  [xself]
                    memory > xz
                    memory > xx
                    memory > xDecimal
                    memory > xy
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (1))
                            (((unsupported)) (((xc).xEmax)) (1))
                            (((unsupported)) (((xc).xEmin)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) ((((xDecimal)) ("-10"))))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("7")).add 1)) (8))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("10")).div 5)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xDecimal)) ("10"))) (7))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("1.2")).xfma)) ((((xDecimal)) ("0.01"))) (1))) (1))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((((((((xDecimal)) ("NaN")).xfma)) (7) (1)).xis_nan)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((((xDecimal)) (10))) (2) (7))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("1.01")).xexp)) 0)) (3))
                            bogusForceDataize.write ((((xself).xassertIs)) (((((((xDecimal)) ("0.01")).xis_normal)) 0)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)) (((((((xDecimal)) ("0.01")).xis_subnormal)) 0)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("20")).xln)) 0)) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("20")).xlog10)) 0)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("580")).xlogb)) 0)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("10")).xlogical_invert)) 0)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("-10")).neg)) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("2")).mul 4)) (8))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("10")).xnext_minus)) 0)) (9))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("10")).xnext_plus)) 0)) ((((xDecimal)) ("2E+1"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("-10")).xnormalize)) 0)) ((((xDecimal)) ("-1E+1"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("10")).xnumber_class)) 0)) ("+Normal"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("-1")))) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("10")).mod 7)) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal)) ("10")).sub 7)) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("1.12345")).xto_integral_exact)) 0)) (1))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("1")).xis_canonical)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("1")).xis_finite)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("1")).xis_finite)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("snan")).xis_snan)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("-1")).xis_signed)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("0")).xis_zero)) 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((((xDecimal)) ("0")).xis_zero)) 0)))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (10000))
                            xx.write (((unsupported)) (1228) (1523))
                            xy.write ((((xDecimal)) ((xx))).neg)
                            xz.write ((((xy).xcopy_abs)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xz)) ((xx)))
                            xz.write ((((xy).xcopy_negate)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xz)) ((xx)))
                            xz.write ((((xy).xcopy_sign)) ((((xDecimal)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xz)) ((xx)))
                xtest_divmod.write
                  [xself]
                    memory > xlocalcontext
                    memory > xInvalidOperation
                    memory > xDecimal
                    memory > xDivisionByZero
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        xDivisionByZero.write (((xself).xdecimal).xDivisionByZero)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) ("10912837129"))) (1001))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xq)) ((((xDecimal)) ("10901935"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((xDecimal)) ("194"))))
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) ("NaN"))) (7))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_nan)) 0).and ((((xr).xis_nan)) 0))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (FALSE))
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) ("NaN"))) (7))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_nan)) 0).and ((((xr).xis_nan)) 0))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (FALSE))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) ("inf"))) ((((xDecimal)) ("inf"))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_nan)) 0).and ((((xr).xis_nan)) 0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) ("inf"))) (101))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_infinite)) 0).and ((((xr).xis_nan)) 0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) (0))) (0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_nan)) 0).and ((((xr).xis_nan)) 0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xDivisionByZero)))) (FALSE))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) ((xq)) ((xr)))) ((((xdivmod)) ((((xDecimal)) (11))) (0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xq).xis_infinite)) 0).and ((((xr).xis_nan)) 0))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((unsupported)) (((xc).xflags)) ((xInvalidOperation))).and (((unsupported)) (((xc).xflags)) ((xDivisionByZero))))))
                xtest_power.write
                  [xself]
                    memory > xlocalcontext
                    memory > xDecimal
                    memory > xOverflow
                    memory > xRounded
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xOverflow.write (((xself).xdecimal).xOverflow)
                        xRounded.write (((xself).xdecimal).xRounded)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (3))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xDecimal)) ("1.0"))) (100))) ((((xDecimal)) ("1.00"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xRounded)))))
                            (((unsupported)) (((xc).xprec)) (1))
                            (((unsupported)) (((xc).xEmax)) (1))
                            (((unsupported)) (((xc).xEmin)) ((1.neg)))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xOverflow)))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xDecimal)) (10000))) ((((xDecimal)) ("0.5"))))) ((((xDecimal)) ("inf"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xOverflow)))))
                xtest_quantize.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    memory > xInvalidOperation
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        xInvalidOperation.write (((xself).xdecimal).xInvalidOperation)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (1))
                            (((unsupported)) (((xc).xEmax)) (1))
                            (((unsupported)) (((xc).xEmin)) ((1.neg)))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (FALSE))
                            xx.write ((((((xDecimal)) (99)).xquantize)) ((((xDecimal)) ("1e1"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xx).xis_nan)) 0)))
                xtest_radix.write
                  [xself]
                    memory > xDecimal
                    memory > xc
                    memory > xgetcontext
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xgetcontext.write (((xself).xdecimal).xgetcontext)
                        xc.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("1")).xradix)) 0)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xradix)) 0)) (10))
                xtest_rop.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        (((unsupported)) ((xattr)) ((((unsupported)) ("__radd__") ("__rsub__") ("__rmul__") ("__rtruediv__") ("__rdivmod__") ("__rmod__") ("__rfloordiv__") ("__rpow__"))))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((((xgetattr)) ((((xDecimal)) ("1"))) ((xattr)))) ("xyz"))) ((xNotImplemented)))
                xtest_round.write
                  [xself]
                    memory > xlocalcontext
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (28))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) ("9.99")).x__round__)) 0)))) ("10"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) ("9.99e-5")).x__round__)) 0)))) ("0"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) ("1.23456789")).x__round__)) (5))))) ("1.23457"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) ("1.2345")).x__round__)) (10))))) ("1.2345000000"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xDecimal)) ("1.2345")).x__round__)) ((10.neg)))))) ("0E+10"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23")).x__round__)) ("5"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23")).x__round__)) (5) (8))
                xtest_create_decimal.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((((xself).xdecimal).xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xc).xcreate_decimal)) ((((unsupported)) ("%"))))
                xtest_int.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write (((xself).xdecimal).xDecimal)
                        xlocalcontext.write (((xself).xdecimal).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (9999))
                            xx.write ((((xDecimal)) ((((unsupported)) (1221) (1271)))).div (((unsupported)) (10) (3923)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((xx)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xto_integral)) 0)) (2))
                xtest_copy.write
                  [xself]
                    memory > xContext
                    memory > xx
                    memory > xc
                    memory > xy
                    seq > @
                      seq
                        xContext.write (((xself).xdecimal).xContext)
                        xc.write (((xContext)) 0)
                        (((unsupported)) (((xc).xprec)) (10000))
                        xx.write ((((unsupported)) (1172) (1712)).neg)
                        xy.write ((((xc).xcopy_abs)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) (((xx).neg)))
                        xy.write ((((xc).xcopy_negate)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) (((xx).neg)))
                        xy.write ((((xc).xcopy_sign)) ((xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) (((xx).neg)))
            (((unsupported)) ((xCoverage)))
              xdecimal.write (xC)
            (((unsupported)) ((xCoverage)))
              xdecimal.write (xP)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_py_alternate_formatting.write
                  [xself]
                    memory > xlocalcontext
                    memory > xDecimal
                    memory > xtest_values
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        xlocalcontext.write ((xP).xlocalcontext)
                        xtest_values.write (((unsupported)) ((((unsupported)) (".0e") ("1.0") ("1e+0"))) ((((unsupported)) ("#.0e") ("1.0") ("1.e+0"))) ((((unsupported)) (".0f") ("1.0") ("1"))) ((((unsupported)) ("#.0f") ("1.0") ("1."))) ((((unsupported)) ("g") ("1.1") ("1.1"))) ((((unsupported)) ("#g") ("1.1") ("1.1"))) ((((unsupported)) (".0g") ("1") ("1"))) ((((unsupported)) ("#.0g") ("1") ("1."))) ((((unsupported)) (".0%") ("1.0") ("100%"))) ((((unsupported)) ("#.0%") ("1.0") ("100.%"))))
                        (((unsupported)) ((((unsupported)) ((xfmt)) ((xd)) ((xresult)))) ((xtest_values)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDecimal)) ((xd)))) ((xfmt)))) ((xresult)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_py_exact_power.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        xlocalcontext.write ((xP).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (8))
                            xx.write (((unsupported)) ((((xDecimal)) ((((unsupported)) (2) (16))))) ((((xDecimal)) ("-0.5"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("0.00390625"))))
                            xx.write (((unsupported)) ((((xDecimal)) ((((unsupported)) (2) (16))))) ((((xDecimal)) ("-0.6"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("0.0012885819"))))
                            xx.write (((unsupported)) ((((xDecimal)) ("256e7"))) ((((xDecimal)) ("-0.5"))))
                            xx.write (((unsupported)) ((((xDecimal)) ((((unsupported)) 0)))) ((((xDecimal)) ("-0.0625"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("0.2"))))
                            xx.write (((unsupported)) ((((xDecimal)) ("152587890625e7"))) ((((xDecimal)) ("-0.0625"))))
                            xx.write (((unsupported)) ((((xDecimal)) ((((unsupported)) (5) (2659))))) ((((xDecimal)) ("-0.0625"))))
                            (((unsupported)) (((xc).xprec)) (1))
                            xx.write (((unsupported)) ((((xDecimal)) ("152587890625"))) ((((xDecimal)) ("-0.5"))))
                            (((unsupported)) (((xc).xprec)) (201))
                            xx.write (((unsupported)) ((((xDecimal)) ((((unsupported)) (2) (578))))) ((((xDecimal)) ("-0.5"))))
                xtest_py_immutability_operations.write
                  [xself]
                    memory > xc
                    memory > xb1
                    memory > xd2
                    memory > xb2
                    memory > xd1
                    memory > xcheckSameDec
                    memory > xDecimal
                    memory > xDefaultContext
                    memory > xsetcontext
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        xDefaultContext.write ((xP).xDefaultContext)
                        xsetcontext.write ((xP).xsetcontext)
                        xc.write ((((xDefaultContext).xcopy)) 0)
                        (((unsupported)) (((xc).xtraps)) ((((xdict)) ((((unsupported)) ((((unsupported)) ((xs)) (0))) ((xs)) ((((unsupported)) ((xOrderedSignals)) ((xP)))))))))
                        bogusForceDataize.write (((xsetcontext)) ((xc)))
                        xd1.write (((xDecimal)) ("-25e55"))
                        xb1.write (((xDecimal)) ("-25e55"))
                        xd2.write (((xDecimal)) ("33e+33"))
                        xb2.write (((xDecimal)) ("33e+33"))
                        xcheckSameDec.write
                          [xoperation xuseOther]
                            seq > @
                              (((unsupported)) 0)
                                (xuseOther).if
                                  seq
                                    bogusForceDataize.write (((xeval)) ((("d1.".add (xoperation)).add "(d2)")))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_sign)) (((xb1).x_sign)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_int)) (((xb1).x_int)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_exp)) (((xb1).x_exp)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).x_sign)) (((xb2).x_sign)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).x_int)) (((xb2).x_int)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd2).x_exp)) (((xb2).x_exp)))
                                  seq
                                    bogusForceDataize.write (((xeval)) ((("d1.".add (xoperation)).add "()")))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_sign)) (((xb1).x_sign)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_int)) (((xb1).x_int)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_exp)) (((xb1).x_exp)))
                        bogusForceDataize.write (((xDecimal)) ((xd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_sign)) (((xb1).x_sign)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_int)) (((xb1).x_int)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xd1).x_exp)) (((xb1).x_exp)))
                        bogusForceDataize.write (((xcheckSameDec)) ("__abs__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__add__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__divmod__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__eq__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__ne__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__le__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__lt__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__ge__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__gt__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__float__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__floordiv__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__hash__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__int__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__trunc__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__mod__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__mul__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__neg__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__bool__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__pos__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__pow__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__radd__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rdivmod__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__repr__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rfloordiv__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rmod__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rmul__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rpow__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__rsub__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__str__"))
                        bogusForceDataize.write (((xcheckSameDec)) ("__sub__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("__truediv__") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("adjusted"))
                        bogusForceDataize.write (((xcheckSameDec)) ("as_tuple"))
                        bogusForceDataize.write (((xcheckSameDec)) ("compare") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("max") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("min") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("normalize"))
                        bogusForceDataize.write (((xcheckSameDec)) ("quantize") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("remainder_near") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("same_quantum") (TRUE))
                        bogusForceDataize.write (((xcheckSameDec)) ("sqrt"))
                        bogusForceDataize.write (((xcheckSameDec)) ("to_eng_string"))
                        bogusForceDataize.write (((xcheckSameDec)) ("to_integral"))
                xtest_py_decimal_id.write
                  [xself]
                    memory > xDecimal
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        xd.write (((xDecimal)) (45))
                        xe.write (((xDecimal)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) ("45"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xid)) ((xd)))) ((((xid)) ((xe)))))
                xtest_py_rescale.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        xlocalcontext.write ((xP).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            xx.write ((((((xDecimal)) ("NaN")).x_rescale)) (3) ((xROUND_UP)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xx).xis_nan)) 0)))
                xtest_py__round.write
                  [xself]
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write ((xP).xDecimal)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xDecimal)) ("3.1234")).x_round)) (0) ((xROUND_UP)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_c_ieee_context.write
                  [xself]
                    memory > xc
                    memory > xDECIMAL128
                    memory > xIEEEContext
                    memory > xassert_rest
                    memory > xDECIMAL32
                    memory > xDECIMAL64
                    seq > @
                      (((unsupported)) 0)
                        xIEEEContext.write ((xC).xIEEEContext)
                        xDECIMAL32.write ((xC).xDECIMAL32)
                        xDECIMAL64.write ((xC).xDECIMAL64)
                        xDECIMAL128.write ((xC).xDECIMAL128)
                        xassert_rest.write
                          [xself xcontext]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xcontext).xclamp)) (1))
                                bogusForceDataize.write (((xassert_signals)) ((xself)) ((xcontext)) ("traps") ((((unsupported)) 0)))
                                bogusForceDataize.write (((xassert_signals)) ((xself)) ((xcontext)) ("flags") ((((unsupported)) 0)))
                        xc.write (((xIEEEContext)) ((xDECIMAL32)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (96))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((95.neg)))
                        bogusForceDataize.write (((xassert_rest)) ((xself)) ((xc)))
                        xc.write (((xIEEEContext)) ((xDECIMAL64)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (384))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((383.neg)))
                        bogusForceDataize.write (((xassert_rest)) ((xself)) ((xc)))
                        xc.write (((xIEEEContext)) ((xDECIMAL128)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (34))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (6144))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((6143.neg)))
                        bogusForceDataize.write (((xassert_rest)) ((xself)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xIEEEContext)) ((((unsupported)) (2) (63))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xIEEEContext)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xIEEEContext)) (1024))
                xtest_c_context.write
                  [xself]
                    memory > xContext
                    memory > xc
                    seq > @
                      (((unsupported)) 0)
                        xContext.write ((xC).xContext)
                        xc.write (((unsupported)) ((xContext)) (((xC).xDecClamped)) (((xC).xDecRounded)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_flags)) (((xC).xDecClamped)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_traps)) (((xC).xDecRounded)))
                xtest_constants.write
                  [xself]
                    memory > xcond
                    seq > @
                      (((unsupported)) 0)
                        xcond.write (((unsupported)) (((xC).xDecClamped)) (((xC).xDecConversionSyntax)) (((xC).xDecDivisionByZero)) (((xC).xDecDivisionImpossible)) (((xC).xDecDivisionUndefined)) (((xC).xDecFpuError)) (((xC).xDecInexact)) (((xC).xDecInvalidContext)) (((xC).xDecInvalidOperation)) (((xC).xDecMallocError)) (((xC).xDecFloatOperation)) (((xC).xDecOverflow)) (((xC).xDecRounded)) (((xC).xDecSubnormal)) (((xC).xDecUnderflow)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDECIMAL32)) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDECIMAL64)) (64))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDECIMAL128)) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xIEEE_CONTEXT_MAX_BITS)) (512))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xv)))) ((((xenumerate)) ((xcond)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((((unsupported)) (1) ((xi)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDecIEEEInvalidOperation)) (((((((((xC).xDecConversionSyntax).or ((xC).xDecDivisionImpossible)).or ((xC).xDecDivisionUndefined)).or ((xC).xDecFpuError)).or ((xC).xDecInvalidContext)).or ((xC).xDecInvalidOperation)).or ((xC).xDecMallocError))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDecErrors)) ((((xC).xDecIEEEInvalidOperation).or ((xC).xDecDivisionByZero))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).xDecTraps)) (((((xC).xDecErrors).or ((xC).xDecOverflow)).or ((xC).xDecUnderflow))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_bignum.write
                  [xself]
                    memory > xb1
                    memory > xb
                    memory > xb2
                    memory > xx
                    memory > xDecimal
                    memory > xy
                    memory > xlocalcontext
                    memory > xa
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xb1.write (((unsupported)) (10) (35))
                        xb2.write (((unsupported)) (10) (36))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) (((xc).xprec)) (1000000))
                            (((unsupported)) ((xi)) ((((xrange)) (5))))
                              seq
                                xa.write ((((xrandom).xrandrange)) ((xb1)) ((xb2)))
                                xb.write ((((xrandom).xrandrange)) (1000) (1200))
                                xx.write (((unsupported)) ((xa)) ((xb)))
                                xy.write (((unsupported)) ((((xDecimal)) ((xa)))) ((((xDecimal)) ((xb)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xy)))
                xtest_invalid_construction.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xC).xDecimal)) (9) ("xyz"))
                xtest_c_input_restriction.write
                  [xself]
                    memory > xDecimal
                    memory > xInvalidOperation
                    memory > xContext
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xContext.write ((xC).xContext)
                        xlocalcontext.write ((xC).xlocalcontext)
                        (((unsupported)) ((((xlocalcontext)) ((((xContext)) 0)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ("1e9999999999999999999"))
                xtest_c_context_repr.write
                  [xself]
                    memory > xc
                    memory > xt
                    memory > xFloatOperation
                    memory > xs
                    memory > xDefaultContext
                    seq > @
                      seq
                        xDefaultContext.write ((xC).xDefaultContext)
                        xFloatOperation.write ((xC).xFloatOperation)
                        xc.write ((((xDefaultContext).xcopy)) 0)
                        (((unsupported)) (((xc).xprec)) (425000000))
                        (((unsupported)) (((xc).xEmax)) (425000000))
                        (((unsupported)) (((xc).xEmin)) ((425000000.neg)))
                        (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_DOWN)))
                        (((unsupported)) (((xc).xcapitals)) (0))
                        (((unsupported)) (((xc).xclamp)) (1))
                        (((unsupported)) ((xsig)) ((((unsupported)) ((xOrderedSignals)) ((xC)))))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xflags)) ((xsig)))) (TRUE))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xsig)))) (TRUE))
                        (((unsupported)) ((((unsupported)) (((xc).xflags)) ((xFloatOperation)))) (TRUE))
                        (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xFloatOperation)))) (TRUE))
                        xs.write ((((xc).x__repr__)) 0)
                        xt.write "Context(prec=425000000, rounding=ROUND_HALF_DOWN, Emin=-425000000, Emax=425000000, capitals=0, clamp=1, flags=[Clamped, InvalidOperation, DivisionByZero, Inexact, FloatOperation, Overflow, Rounded, Subnormal, Underflow], traps=[Clamped, InvalidOperation, DivisionByZero, Inexact, FloatOperation, Overflow, Rounded, Subnormal, Underflow])"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xt)))
                xtest_c_context_errors.write
                  [xself]
                    memory > xOverflow
                    memory > xInvalidOperation
                    memory > xFloatOperation
                    memory > xHAVE_CONFIG_64
                    memory > xsaved_context
                    memory > xgetcontext
                    memory > xlocalcontext
                    memory > xd
                    memory > xContext
                    memory > xint_max
                    memory > xc
                    memory > xgt_max_emax
                    memory > xsetcontext
                    seq > @
                      seq
                        xContext.write ((xC).xContext)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xOverflow.write ((xC).xOverflow)
                        xFloatOperation.write ((xC).xFloatOperation)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xgetcontext.write ((xC).xgetcontext)
                        xsetcontext.write ((xC).xsetcontext)
                        xHAVE_CONFIG_64.write (((xC).xMAX_PREC).greater 425000000)
                        xc.write (((xContext)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((((xc).xflags).x__setitem__)) (801) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((((xc).xtraps).x__setitem__)) (801) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xc).xflags).x__delitem__)) ((xOverflow)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xc).xtraps).x__delitem__)) ((xInvalidOperation)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("flags") ((((unsupported)) ("x"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("traps") ((((unsupported)) ("y"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("flags") ((((unsupported)) (0) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("traps") ((((unsupported)) (0) (1))))
                        xd.write (((((xc).xflags).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xd)) ((xFloatOperation)))))))
                        (((unsupported)) ((((unsupported)) ((xd)) ("XYZ"))) (91283719))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("flags") ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) ((xsetattr)) ((xc)) ("traps") ((xd)))
                        xint_max.write ((xHAVE_CONFIG_64).if ((((unsupported)) (2) (63)).sub 1) ((((unsupported)) (2) (31)).sub 1))
                        xgt_max_emax.write ((xHAVE_CONFIG_64).if (((unsupported)) (10) (18)) (((unsupported)) (10) (9)))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("prec") ("Emax"))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((xgt_max_emax)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("Emin") (((xgt_max_emax).neg)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((xContext)) ((xgt_max_emax)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((xContext)) ((xgt_max_emax)))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((xContext)) (((xgt_max_emax).neg)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOverflowError)) ((xContext)) (((xint_max).add 1)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOverflowError)) ((xContext)) (((xint_max).add 1)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOverflowError)) ((xContext)) ((((xint_max).neg).sub 2)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOverflowError)) ((xContext)) (((xint_max).add 1)))
                        (((unsupported)) (((xself).xassertRaises)) ((xOverflowError)) ((xContext)) (((xint_max).add 1)))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("prec") ("Emin") ("Emax") ("capitals") ("clamp"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ((xattr)) (((xint_max).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ((xattr)) ((((xint_max).neg).sub 2)))
                            (((xsys).xplatform).neq "win32").if
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((xint_max)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((((xint_max).neg).sub 1)))
                        (((xC).xMAX_PREC).eq 425000000).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((((xgetattr)) ((xc)) ("_unsafe_setprec"))) (((xint_max).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((((xgetattr)) ((xc)) ("_unsafe_setemax"))) (((xint_max).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((((xgetattr)) ((xc)) ("_unsafe_setemin"))) ((((xint_max).neg).sub 2)))
                        (((xC).xMAX_PREC).eq 425000000).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setprec"))) (0))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setprec"))) (1070000001))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setemax"))) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setemax"))) (1070000001))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setemin"))) ((1070000001.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xgetattr)) ((xc)) ("_unsafe_setemin"))) (1))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("capitals") ("clamp"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) (2))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ((((unsupported)) (1) (2) (3))))
                            (xHAVE_CONFIG_64).if
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) ((((unsupported)) (2) (32))))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ((xattr)) (((((unsupported)) (2) (32)).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xexec)) ("with localcontext(\"xyz\"): pass") ((((xlocals)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xexec)) ("with localcontext(context=getcontext()): pass") ((((xlocals)) 0)))
                        xsaved_context.write (((xgetcontext)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetcontext)) ("xyz"))
                        bogusForceDataize.write (((xsetcontext)) ((xsaved_context)))
                xtest_rounding_strings_interned.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_UP)) (((xP).xROUND_UP)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_DOWN)) (((xP).xROUND_DOWN)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_CEILING)) (((xP).xROUND_CEILING)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_FLOOR)) (((xP).xROUND_FLOOR)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_HALF_UP)) (((xP).xROUND_HALF_UP)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_HALF_DOWN)) (((xP).xROUND_HALF_DOWN)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_HALF_EVEN)) (((xP).xROUND_HALF_EVEN)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).xROUND_05UP)) (((xP).xROUND_05UP)))
                xtest_c_context_errors_extra.write
                  [xself]
                    memory > xContext
                    memory > xOverflow
                    memory > xInvalidOperation
                    memory > xHAVE_CONFIG_64
                    memory > xgetcontext
                    memory > xlocalcontext
                    memory > xsetcontext
                    memory > xint_max
                    memory > xc
                    seq > @
                      (((unsupported)) 0)
                        xContext.write ((xC).xContext)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xOverflow.write ((xC).xOverflow)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xgetcontext.write ((xC).xgetcontext)
                        xsetcontext.write ((xC).xsetcontext)
                        xHAVE_CONFIG_64.write (((xC).xMAX_PREC).greater 425000000)
                        xc.write (((xContext)) 0)
                        xint_max.write ((xHAVE_CONFIG_64).if ((((unsupported)) (2) (63)).sub 1) ((((unsupported)) (2) (31)).sub 1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ("_allcr") (((xint_max).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ("_allcr") ((((xint_max).neg).sub 2)))
                        (((xsys).xplatform).neq "win32").if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") ((xint_max)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") ((((xint_max).neg).sub 1)))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("_flags") ("_traps"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ((xattr)) (((xint_max).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xsetattr)) ((xc)) ((xattr)) ((((xint_max).neg).sub 2)))
                            (((xsys).xplatform).neq "win32").if
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ((xint_max)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ((((xint_max).neg).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ("_allcr") ((((unsupported)) (1) (2) (3))))
                        (xHAVE_CONFIG_64).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") ((((unsupported)) (2) (32))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsetattr)) ((xc)) ("_allcr") (((((unsupported)) (2) (32)).add 1)))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("_flags") ("_traps"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) (999999))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xc)) ((xattr)) ("x"))
                xtest_c_valid_context.write
                  [xself]
                    memory > xc
                    memory > xUnderflow
                    memory > xInexact
                    memory > xDefaultContext
                    memory > xRounded
                    memory > xClamped
                    memory > xSubnormal
                    seq > @
                      seq
                        xDefaultContext.write ((xC).xDefaultContext)
                        xClamped.write ((xC).xClamped)
                        xUnderflow.write ((xC).xUnderflow)
                        xInexact.write ((xC).xInexact)
                        xRounded.write ((xC).xRounded)
                        xSubnormal.write ((xC).xSubnormal)
                        xc.write ((((xDefaultContext).xcopy)) 0)
                        (((unsupported)) (((xc).xprec)) (34))
                        (((unsupported)) (((xc).xrounding)) ((xROUND_HALF_UP)))
                        (((unsupported)) (((xc).xEmax)) (3000))
                        (((unsupported)) (((xc).xEmin)) ((3000.neg)))
                        (((unsupported)) (((xc).xcapitals)) (1))
                        (((unsupported)) (((xc).xclamp)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (34))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) ((xROUND_HALF_UP)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((3000.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (3000))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xcapitals)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xclamp)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xEtiny)) 0)) ((3033.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xEtop)) 0)) (2967))
                        (((xC).xMAX_PREC).eq 425000000).if
                          seq
                            bogusForceDataize.write ((((xc).x_unsafe_setprec)) (999999999))
                            bogusForceDataize.write ((((xc).x_unsafe_setemax)) (999999999))
                            bogusForceDataize.write ((((xc).x_unsafe_setemin)) ((999999999.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) (999999999))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) (999999999))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((999999999.neg)))
                xtest_c_valid_context_extra.write
                  [xself]
                    memory > xc
                    memory > xDefaultContext
                    seq > @
                      (((unsupported)) 0)
                        xDefaultContext.write ((xC).xDefaultContext)
                        xc.write ((((xDefaultContext).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_allcr)) (1))
                        (((unsupported)) (((xc).x_allcr)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_allcr)) (0))
                xtest_c_round.write
                  [xself]
                    memory > xint_max
                    memory > xMIN_ETINY
                    memory > xInvalidOperation
                    memory > xMAX_EMAX
                    memory > xDecimal
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xMAX_EMAX.write ((xC).xMAX_EMAX)
                        xMIN_ETINY.write ((xC).xMIN_ETINY)
                        xint_max.write ((((xC).xMAX_PREC).greater 425000000).if ((((unsupported)) (2) (63)).sub 1) ((((unsupported)) (2) (31)).sub 1))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("1.23")).x__round__)) ((((xint_max).neg).sub 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("1.23")).x__round__)) ((xint_max)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) ("1")).x__round__)) ((((xint)) (((xMAX_EMAX).add 1)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xC).xInvalidOperation)) (((((xDecimal)) ("1")).x__round__)) (((((xint)) (((xMIN_ETINY).sub 1))).neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((((xDecimal)) ("1.23")).x__round__)) ((((xint_max).neg).sub 2)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((((xDecimal)) ("1.23")).x__round__)) (((xint_max).add 1)))
                xtest_c_format.write
                  [xself]
                    memory > xDecimal
                    memory > xmaxsize
                    memory > xHAVE_CONFIG_64
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xHAVE_CONFIG_64.write (((xC).xMAX_PREC).greater 425000000)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).x__format__)) ("=10.10") ((((unsupported)) 0)) (9))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).x__format__)) ("=10.10") (9))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (1)).x__format__)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xDecimal)) (1)).x__format__)) ("<>=10.10"))
                        xmaxsize.write ((xHAVE_CONFIG_64).if ((((unsupported)) (2) (63)).sub 1) ((((unsupported)) (2) (31)).sub 1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xDecimal)) ("1.23456789")).x__format__)) (("=%d.1".mod (xmaxsize))))
                xtest_c_integral.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xInexact
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xInexact.write ((xC).xInexact)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xx.write (((xDecimal)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xto_integral)) 0)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) (10) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xto_integral_value)) 0)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) (10) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xto_integral_exact)) 0)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) (10) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) (10))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            xx.write ((((((xDecimal)) ("99999999999999999999999999.9")).xto_integral_value)) ((xROUND_UP)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("100000000000000000000000000"))))
                            xx.write ((((((xDecimal)) ("99999999999999999999999999.9")).xto_integral_exact)) ((xROUND_UP)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((((xDecimal)) ("100000000000000000000000000"))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInexact)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInexact)) (((((xDecimal)) ("999.9")).xto_integral_exact)) ((xROUND_UP)))
                xtest_c_funcs.write
                  [xself]
                    memory > xInvalidOperation
                    memory > xDivisionByZero
                    memory > xDecimal
                    memory > xgetcontext
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xDivisionByZero.write ((xC).xDivisionByZero)
                        xgetcontext.write ((xC).xgetcontext)
                        xlocalcontext.write ((xC).xlocalcontext)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xDecimal)) ("9.99e10")).xto_eng_string)) 0)) ("99.9E+9"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpow)) ((((xDecimal)) (1))) (2) ("3"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (9)).xnumber_class)) ("x") ("y"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) (9)).xsame_quantum)) (3) ("x") ("y"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23456789")).xquantize)) ((((xDecimal)) ("1e-100000"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23456789")).xquantize)) ((((xDecimal)) ("1e-100000"))) ((((xgetcontext)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23456789")).xquantize)) ((((xDecimal)) ("1e-100000"))) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xDecimal)) ("1.23456789")).xquantize)) ((((xDecimal)) ("1e-100000"))) ((xROUND_UP)) (1000))
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            bogusForceDataize.write ((((xc).xclear_traps)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcopy_sign)) ((((xDecimal)) (1))) ("x") ("y"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xcanonical)) (200))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xis_canonical)) (200))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xdivmod)) (9) (8) ("x") ("y"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xc).xsame_quantum)) (9) (3) ("x") ("y"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xc).xcanonical)) ((((xDecimal)) (200))))))) ("200"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xc).xradix)) 0)) (10))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xDivisionByZero)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xDivisionByZero)) (((((xDecimal)) (9)).x__divmod__)) (0))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xDivisionByZero)) (((xc).xdivmod)) (9) (0))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xInvalidOperation)))))
                            bogusForceDataize.write ((((xc).xclear_flags)) 0)
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((((xDecimal)) (9)).x__divmod__)) (0))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) (((xc).xdivmod)) (9) (0))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xDivisionByZero)))))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            (((unsupported)) (((xc).xprec)) (2))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xpow)) ((((xDecimal)) (1000))) (1) (501))
                xtest_va_args_exceptions.write
                  [xself]
                    memory > xContext
                    memory > xc
                    memory > xfunc
                    memory > xx
                    memory > xDecimal
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xContext.write ((xC).xContext)
                        xx.write (((xDecimal)) ("10001111111"))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("exp") ("is_normal") ("is_subnormal") ("ln") ("log10") ("logb") ("logical_invert") ("next_minus") ("next_plus") ("normalize") ("number_class") ("sqrt") ("to_eng_string"))))
                          seq
                            xfunc.write (((xgetattr)) ((xx)) ((xattr)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xfunc)) ("x"))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xfunc)) ("x") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xattr)) ((((unsupported)) ("compare") ("compare_signal") ("logical_and") ("logical_or") ("max") ("max_mag") ("min") ("min_mag") ("remainder_near") ("rotate") ("scaleb") ("shift"))))
                          seq
                            xfunc.write (((xgetattr)) ((xx)) ((xattr)))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xfunc)) ("x"))
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xfunc)) ("x") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_value)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xto_integral_exact)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xfma)) (1) (2) ("x"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xfma)) (1) (2) ("x") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xquantize)) (1) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xx).xquantize)) (1) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xquantize)) (1) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        xc.write (((xContext)) 0)
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xc).xpower)) (1) (2) ("x"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xc).xpower)) (1) ("x") ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xc).xpower)) ("x") (2) ("None: is there a None literal in the EO language?"))
                xtest_c_context_templates.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xC).xBasicContext).x_traps)) (((((((xC).xDecIEEEInvalidOperation).or ((xC).xDecDivisionByZero)).or ((xC).xDecOverflow)).or ((xC).xDecUnderflow)).or ((xC).xDecClamped))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xC).xDefaultContext).x_traps)) (((((xC).xDecIEEEInvalidOperation).or ((xC).xDecDivisionByZero)).or ((xC).xDecOverflow))))
                xtest_c_signal_dict.write
                  [xself]
                    memory > xemax
                    memory > xOverflow
                    memory > xassertIsExclusivelySet
                    memory > xprec
                    memory > xInvalidOperation
                    memory > xcaps
                    memory > xtraps
                    memory > xIntSignals
                    memory > xDefaultContext
                    memory > xIntCond
                    memory > xRounded
                    memory > xd
                    memory > xContext
                    memory > xlim
                    memory > xDecInvalidOperation
                    memory > xflags
                    memory > xc
                    memory > xemin
                    memory > xcr
                    memory > xf
                    memory > xDecIEEEInvalidOperation
                    memory > xUnderflow
                    memory > xs
                    memory > xDivisionByZero
                    memory > xDecClamped
                    memory > xclamp
                    memory > xInexact
                    memory > xClamped
                    memory > xSubnormal
                    seq > @
                      (((unsupported)) 0)
                        xContext.write ((xC).xContext)
                        xDefaultContext.write ((xC).xDefaultContext)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xDivisionByZero.write ((xC).xDivisionByZero)
                        xOverflow.write ((xC).xOverflow)
                        xSubnormal.write ((xC).xSubnormal)
                        xUnderflow.write ((xC).xUnderflow)
                        xRounded.write ((xC).xRounded)
                        xInexact.write ((xC).xInexact)
                        xClamped.write ((xC).xClamped)
                        xDecClamped.write ((xC).xDecClamped)
                        xDecInvalidOperation.write ((xC).xDecInvalidOperation)
                        xDecIEEEInvalidOperation.write ((xC).xDecIEEEInvalidOperation)
                        xassertIsExclusivelySet.write
                          [xsignal xsignal_dict]
                            seq > @
                              (((unsupported)) ((xsig)) ((xsignal_dict)))
                                ((xsig).eq (xsignal)).if
                                  bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xsignal_dict)) ((xsig)))))
                                  bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xsignal_dict)) ((xsig)))))
                        xc.write ((((xDefaultContext).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xOverflow)) (((xc).xtraps)))))
                        bogusForceDataize.write ((((xc).xclear_traps)) 0)
                        (((unsupported)) ((xk)) ((((((xc).xtraps).xkeys)) 0)))
                          (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xk)))) (TRUE))
                        (((unsupported)) ((xv)) ((((((xc).xtraps).xvalues)) 0)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((xv)))
                        bogusForceDataize.write ((((xc).xclear_traps)) 0)
                        (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) ((((((xc).xtraps).xitems)) 0)))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xc).xflags).xget)) ((xOverflow)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((((xc).xflags).xget)) ("x"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xc).xflags).xget)) ("x") ("y"))) ("y"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xc).xflags).xget)) ("x") ("y") ("z"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xc).xflags)))) ((((xlen)) (((xc).xtraps)))))
                        xs.write ((((xsys).xgetsizeof)) (((xc).xflags)))
                        xs.write ((((xsys).xgetsizeof)) (((xc).xtraps)))
                        xs.write (((((xc).xflags).x__repr__)) 0)
                        bogusForceDataize.write ((((xc).xclear_flags)) 0)
                        (((unsupported)) (((xc).x_flags)) ((xDecClamped)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xflags)) ((xClamped)))))
                        bogusForceDataize.write ((((xc).xclear_traps)) 0)
                        (((unsupported)) (((xc).x_traps)) ((xDecInvalidOperation)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))))
                        bogusForceDataize.write ((((xc).xclear_flags)) 0)
                        xd.write (((((xc).xflags).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xd)) ((xDivisionByZero)))) (TRUE))
                        (((unsupported)) (((xc).xflags)) ((xd)))
                        bogusForceDataize.write (((xassertIsExclusivelySet)) ((xDivisionByZero)) (((xc).xflags)))
                        bogusForceDataize.write ((((xc).xclear_traps)) 0)
                        xd.write (((((xc).xtraps).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xd)) ((xUnderflow)))) (TRUE))
                        (((unsupported)) (((xc).xtraps)) ((xd)))
                        bogusForceDataize.write (((xassertIsExclusivelySet)) ((xUnderflow)) (((xc).xtraps)))
                        xIntSignals.write (((unsupported)) ((xClamped)) (((xC).xDecClamped)) ((xRounded)) (((xC).xDecRounded)) ((xInexact)) (((xC).xDecInexact)) ((xSubnormal)) (((xC).xDecSubnormal)) ((xUnderflow)) (((xC).xDecUnderflow)) ((xOverflow)) (((xC).xDecOverflow)) ((xDivisionByZero)) (((xC).xDecDivisionByZero)) ((xInvalidOperation)) (((xC).xDecIEEEInvalidOperation)))
                        xIntCond.write (((unsupported)) (((xC).xDecDivisionImpossible)) (((xC).xDecDivisionUndefined)) (((xC).xDecFpuError)) (((xC).xDecInvalidContext)) (((xC).xDecInvalidOperation)) (((xC).xDecMallocError)) (((xC).xDecConversionSyntax)))
                        xlim.write (((xlen)) ((((unsupported)) ((xOrderedSignals)) ((xC)))))
                        (((unsupported)) ((xr)) ((((xrange)) ((xlim)))))
                          (((unsupported)) ((xt)) ((((xrange)) ((xlim)))))
                            (((unsupported)) ((xround)) ((xRoundingModes)))
                              seq
                                xflags.write ((((xrandom).xsample)) ((((unsupported)) ((xOrderedSignals)) ((xC)))) ((xr)))
                                xtraps.write ((((xrandom).xsample)) ((((unsupported)) ((xOrderedSignals)) ((xC)))) ((xt)))
                                xprec.write ((((xrandom).xrandrange)) (1) (10000))
                                xemin.write ((((xrandom).xrandrange)) ((10000.neg)) (0))
                                xemax.write ((((xrandom).xrandrange)) (0) (10000))
                                xclamp.write ((((xrandom).xrandrange)) (0) (2))
                                xcaps.write ((((xrandom).xrandrange)) (0) (2))
                                xcr.write ((((xrandom).xrandrange)) (0) (2))
                                xc.write (((unsupported)) ((xContext)) ((xprec)) ((xround)) ((xemin)) ((xemax)) ((xcaps)) ((xclamp)) ((((xlist)) ((xflags)))) ((((xlist)) ((xtraps)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xprec)) ((xprec)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xrounding)) ((xround)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmin)) ((xemin)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xEmax)) ((xemax)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xcapitals)) ((xcaps)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).xclamp)) ((xclamp)))
                                xf.write 0
                                (((unsupported)) ((xx)) ((xflags)))
                                  (((unsupported)) ((xf)) ((((unsupported)) ((xIntSignals)) ((xx)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_flags)) ((xf)))
                                xf.write 0
                                (((unsupported)) ((xx)) ((xtraps)))
                                  (((unsupported)) ((xf)) ((((unsupported)) ((xIntSignals)) ((xx)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xc).x_traps)) ((xf)))
                        (((unsupported)) ((xcond)) ((xIntCond)))
                          seq
                            (((unsupported)) (((xc).x_flags)) ((xcond)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xc).x_flags).and (xDecIEEEInvalidOperation))))
                            bogusForceDataize.write (((xassertIsExclusivelySet)) ((xInvalidOperation)) (((xc).xflags)))
                        (((unsupported)) ((xcond)) ((xIntCond)))
                          seq
                            (((unsupported)) (((xc).x_traps)) ((xcond)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xc).x_traps).and (xDecIEEEInvalidOperation))))
                            bogusForceDataize.write (((xassertIsExclusivelySet)) ((xInvalidOperation)) (((xc).xtraps)))
                xtest_invalid_override.write
                  [xself]
                    memory > xmake_grouping
                    memory > xget_fmt
                    memory > xinvalid_dot
                    memory > xinvalid_grouping
                    memory > xDecimal
                    memory > xinvalid_sep
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        (((unsupported)) ((xImportError)))
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("locale.CHAR_MAX not available"))
                        xmake_grouping.write
                          [xlst]
                            seq > @
                              (((unsupported)) (((("".xjoin)) ((((unsupported)) ((((xchr)) ((xx)))) ((xx)) ((xlst)))))))
                        xget_fmt.write
                          [xx xoverride xfmt]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) (((((((xDecimal)) ((xx))).x__format__)) ((xfmt)) ((xoverride)))))
                        xinvalid_grouping.write (((unsupported)) ("decimal_point") (",") ("grouping") ((((xmake_grouping)) ((((unsupported)) (255) (255) (0))))) ("thousands_sep") (","))
                        xinvalid_dot.write (((unsupported)) ("decimal_point") ("xxxxx") ("grouping") ((((xmake_grouping)) ((((unsupported)) (3) (3) (0))))) ("thousands_sep") (","))
                        xinvalid_sep.write (((unsupported)) ("decimal_point") (".") ("grouping") ((((xmake_grouping)) ((((unsupported)) (3) (3) (0))))) ("thousands_sep") ("yyyyy"))
                        ((xCHAR_MAX).eq 127).if
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xget_fmt)) (12345) ((xinvalid_grouping)) ("g"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xget_fmt)) (12345) ((xinvalid_dot)) ("g"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xget_fmt)) (12345) ((xinvalid_sep)) ("g"))
                xtest_exact_conversion.write
                  [xself]
                    memory > xlocalcontext
                    memory > xx
                    memory > xDecimal
                    memory > xInvalidOperation
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            xx.write ("0e%d".mod ((xsys).xmaxsize))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write ("0e%d".mod ((((xsys).xmaxsize).neg).sub 1))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write ("1e%d".mod ((xsys).xmaxsize))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write ("1e%d".mod ((((xsys).xmaxsize).neg).sub 1))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                xtest_from_tuple.write
                  [xself]
                    memory > xOverflow
                    memory > xInvalidOperation
                    memory > xx
                    memory > xUnderflow
                    memory > xDecimal
                    memory > xlocalcontext
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xlocalcontext.write ((xC).xlocalcontext)
                        xInvalidOperation.write ((xC).xInvalidOperation)
                        xOverflow.write ((xC).xOverflow)
                        xUnderflow.write ((xC).xUnderflow)
                        (((unsupported)) ((((xlocalcontext)) 0)) ((xc)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xInvalidOperation)))) (TRUE))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xOverflow)))) (TRUE))
                            (((unsupported)) ((((unsupported)) (((xc).xtraps)) ((xUnderflow)))) (TRUE))
                            xx.write (((unsupported)) (1) ((((unsupported)) 0)) (((xsys).xmaxsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xc).xcreate_decimal)) ((xx)))))) ("-0E+999999"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) (0) (1) (2))) (((xsys).xmaxsize)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflow)) (((xc).xcreate_decimal)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) 0)) (((((xsys).xmaxsize).neg).sub 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xc).xcreate_decimal)) ((xx)))))) ("-0E-1000007"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) (0) (1) (2))) (((((xsys).xmaxsize).neg).sub 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xUnderflow)) (((xc).xcreate_decimal)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xInvalidOperation)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) 0)) ((((xsys).xmaxsize).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xc).xcreate_decimal)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) 0)) (((((xsys).xmaxsize).neg).sub 2)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xc).xcreate_decimal)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xDecimal)) ((xx)))
                            xx.write (((unsupported)) (1) ((((unsupported)) 0)) ("N"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((xx)))))) ("-sNaN"))
                            xx.write (((unsupported)) (1) ((((unsupported)) (0))) ("N"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((xx)))))) ("-sNaN"))
                            xx.write (((unsupported)) (1) ((((unsupported)) (0) (1))) ("N"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xDecimal)) ((xx)))))) ("-sNaN1"))
                xtest_sizeof.write
                  [xself]
                    memory > xx
                    memory > xDecimal
                    memory > xy
                    memory > xHAVE_CONFIG_64
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        xHAVE_CONFIG_64.write (((xC).xMAX_PREC).greater 425000000)
                        bogusForceDataize.write ((((xself).xassertGreater)) (((((((xDecimal)) (0)).x__sizeof__)) 0)) (0))
                        (xHAVE_CONFIG_64).if
                          seq
                            xx.write ((((((xDecimal)) ((((unsupported)) (10) ((19.mul 24))))).x__sizeof__)) 0)
                            xy.write ((((((xDecimal)) ((((unsupported)) (10) ((19.mul 25))))).x__sizeof__)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) (((xx).add 8)))
                          seq
                            xx.write ((((((xDecimal)) ((((unsupported)) (10) ((9.mul 24))))).x__sizeof__)) 0)
                            xy.write ((((((xDecimal)) ((((unsupported)) (10) ((9.mul 25))))).x__sizeof__)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) (((xx).add 4)))
                xtest_internal_use_of_overridden_methods.write
                  [xself]
                    memory > x__abs__
                    memory > xDecimal
                    memory > xbit_length
                    memory > xas_integer_ratio
                    seq > @
                      seq
                        xDecimal.write ((xC).xDecimal)
                        (((unsupported)) ((xfloat)))
                          seq
                            xas_integer_ratio.write
                              [xself]
                                seq > @
                                  (((unsupported)) (1))
                            x__abs__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                        (((unsupported)) ((xfloat)))
                          x__abs__.write
                            [xself]
                              seq > @
                                (((unsupported)) (((((unsupported)) (1)).mul 200)))
                        (((unsupported)) ((xint)))
                          xbit_length.write
                            [xself]
                              seq > @
                                (((unsupported)) (((((unsupported)) (1)).mul 200)))
                        (((unsupported)) ((xfloat)))
                          seq
                            xas_integer_ratio.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((unsupported)) ((((xI)) (1))) ((((xI)) (1))))))
                            x__abs__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                        (((unsupported)) ((xcls)) ((((unsupported)) ((xX)) ((xY)) ((xZ)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xDecimal).xfrom_float)) ((((xcls)) (101.1))))) (((((xDecimal).xfrom_float)) (101.1))))
            (((unsupported)) (((xunittest).xTestCase)) ((xrequires_docstrings)) (((((xunittest).xskipUnless)) ((xC)) ("test requires C version"))))
              seq
                unsupported
                xtest_inspect_module.write
                  [xself]
                    memory > xp_func
                    memory > xp_names
                    memory > xp_sig
                    memory > xp_kind
                    memory > xc_func
                    memory > xc_sig
                    memory > xc_names
                    memory > xc_kind
                    seq > @
                      (((unsupported)) ((xattr)) ((((xdir)) ((xP)))))
                        seq
                          ((((xattr).xstartswith)) ("_")).if
                            (((unsupported)) 0)
                          xp_func.write (((xgetattr)) ((xP)) ((xattr)))
                          xc_func.write (((xgetattr)) ((xC)) ((xattr)))
                          ((((xattr).eq "Decimal").or ((xattr).eq "Context")).or ((((xinspect).xisfunction)) ((xp_func)))).if
                            seq
                              xp_sig.write ((((xinspect).xsignature)) ((xp_func)))
                              xc_sig.write ((((xinspect).xsignature)) ((xc_func)))
                              xc_names.write (((xlist)) ((((((xc_sig).xparameters).xkeys)) 0)))
                              xp_names.write (((unsupported)) ((xx)) ((xx)) ((((((xp_sig).xparameters).xkeys)) 0)) ((((((xx).xstartswith)) ("_")).not)))
                              (((unsupported)) (((xself).xassertEqual)) ((xc_names)) ((xp_names)) (("parameter name mismatch in %s".mod (xp_func))))
                              xc_kind.write (((unsupported)) (((xx).xkind)) ((xx)) ((((((xc_sig).xparameters).xvalues)) 0)))
                              xp_kind.write (((unsupported)) (((((unsupported)) ((xx)) (1)).xkind)) ((xx)) ((((((xp_sig).xparameters).xitems)) 0)) ((((((((unsupported)) ((xx)) (0)).xstartswith)) ("_")).not)))
                              ((xattr).neq "setcontext").if
                                (((unsupported)) (((xself).xassertEqual)) ((xc_kind)) ((xp_kind)) (("parameter kind mismatch in %s".mod (xp_func))))
                xtest_inspect_types.write
                  [xself]
                    memory > xmkargs
                    memory > xPOS
                    memory > xdoit
                    memory > xPOS_KWD
                    memory > xtr
                    memory > xpdict
                    seq > @
                      seq
                        xPOS.write (((xinspect).x_ParameterKind).xPOSITIONAL_ONLY)
                        xPOS_KWD.write (((xinspect).x_ParameterKind).xPOSITIONAL_OR_KEYWORD)
                        xpdict.write (((unsupported)) ((xC)) ((((unsupported)) ("other") (((((xC).xDecimal)) (1))) ("third") (((((xC).xDecimal)) (1))) ("x") (((((xC).xDecimal)) (1))) ("y") (((((xC).xDecimal)) (1))) ("z") (((((xC).xDecimal)) (1))) ("a") (((((xC).xDecimal)) (1))) ("b") (((((xC).xDecimal)) (1))) ("c") (((((xC).xDecimal)) (1))) ("exp") (((((xC).xDecimal)) (1))) ("modulo") (((((xC).xDecimal)) (1))) ("num") ("1") ("f") (1.0) ("rounding") (((xC).xROUND_HALF_UP)) ("context") (((((xC).xgetcontext)) 0)))) ((xP)) ((((unsupported)) ("other") (((((xP).xDecimal)) (1))) ("third") (((((xP).xDecimal)) (1))) ("a") (((((xP).xDecimal)) (1))) ("b") (((((xP).xDecimal)) (1))) ("c") (((((xP).xDecimal)) (1))) ("exp") (((((xP).xDecimal)) (1))) ("modulo") (((((xP).xDecimal)) (1))) ("num") ("1") ("f") (1.0) ("rounding") (((xP).xROUND_HALF_UP)) ("context") (((((xP).xgetcontext)) 0)))))
                        xmkargs.write
                          [xmodule xsig]
                            memory > xargs
                            memory > xkwargs
                            seq > @
                              seq
                                xargs.write (((unsupported)) 0)
                                xkwargs.write (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xname)) ((xparam)))) ((((((xsig).xparameters).xitems)) 0)))
                                  seq
                                    ((xname).eq "self").if
                                      (((unsupported)) 0)
                                    (((xparam).xkind).eq (xPOS)).if
                                      bogusForceDataize.write ((((xargs).xappend)) ((((unsupported)) ((((unsupported)) ((xpdict)) ((xmodule)))) ((xname)))))
                                      (((xparam).xkind).eq (xPOS_KWD)).if
                                        (((unsupported)) ((((unsupported)) ((xkwargs)) ((xname)))) ((((unsupported)) ((((unsupported)) ((xpdict)) ((xmodule)))) ((xname)))))
                                        (((unsupported)) ((((xTestFailed)) ("unexpected parameter kind"))))
                                (((unsupported)) ((((unsupported)) ((xargs)) ((xkwargs)))))
                        xtr.write
                          [xs]
                            seq > @
                              seq
                                (((unsupported)) 0)
                                ((xs).eq "x").if
                                  (((unsupported)) ("a"))
                                ((xs).eq "y").if
                                  (((unsupported)) ("b"))
                                ((xs).eq "z").if
                                  (((unsupported)) ("c"))
                                (((unsupported)) ((xs)))
                        xdoit.write
                          [xty]
                            memory > xp_names
                            memory > xp_sig
                            memory > xp_kind
                            memory > xc_func
                            memory > xc_sig
                            memory > xc_names
                            memory > xc_type
                            memory > xc_kind
                            memory > xp_type
                            memory > xp_func
                            seq > @
                              seq
                                xp_type.write (((xgetattr)) ((xP)) ((xty)))
                                xc_type.write (((xgetattr)) ((xC)) ((xty)))
                                (((unsupported)) ((xattr)) ((((xdir)) ((xp_type)))))
                                  seq
                                    ((((xattr).xstartswith)) ("_")).if
                                      (((unsupported)) 0)
                                    xp_func.write (((xgetattr)) ((xp_type)) ((xattr)))
                                    xc_func.write (((xgetattr)) ((xc_type)) ((xattr)))
                                    ((((xinspect).xisfunction)) ((xp_func))).if
                                      seq
                                        xp_sig.write ((((xinspect).xsignature)) ((xp_func)))
                                        xc_sig.write ((((xinspect).xsignature)) ((xc_func)))
                                        xp_names.write (((xlist)) ((((((xp_sig).xparameters).xkeys)) 0)))
                                        xc_names.write (((unsupported)) ((((xtr)) ((xx)))) ((xx)) ((((((xc_sig).xparameters).xkeys)) 0)))
                                        (((unsupported)) (((xself).xassertEqual)) ((xc_names)) ((xp_names)) (("parameter name mismatch in %s".mod (xp_func))))
                                        xp_kind.write (((unsupported)) (((xx).xkind)) ((xx)) ((((((xp_sig).xparameters).xvalues)) 0)))
                                        xc_kind.write (((unsupported)) (((xx).xkind)) ((xx)) ((((((xc_sig).xparameters).xvalues)) 0)))
                                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xp_kind)) (0))) ((xPOS_KWD)))
                                        bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xc_kind)) (0))) ((xPOS)))
                                        ((xty).eq "Decimal").if
                                          (((unsupported)) (((xself).xassertEqual)) ((((unsupported)) ((xc_kind)) ((((unsupported)) (1))))) ((((unsupported)) ((xp_kind)) ((((unsupported)) (1))))) (("parameter kind mismatch in %s".mod (xp_func))))
                                          (((unsupported)) (((xself).xassertEqual)) ((((xlen)) ((xc_kind)))) ((((xlen)) ((xp_kind)))) (("parameter kind mismatch in %s".mod (xp_func))))
                                        (((unsupported)) ((((unsupported)) ((xargs)) ((xkwds)))) ((((xmkargs)) ((xC)) ((xc_sig)))))
                                        (((unsupported)) ((xException)))
                                          bogusForceDataize.write (((((xgetattr)) ((((xc_type)) (9))) ((xattr)))) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwds)))))
                                          (((unsupported)) ((((xTestFailed)) (("invalid signature for %s: %s %s".mod (((unsupported)) ((xc_func)) ((xargs)) ((xkwds))))))))
                                        (((unsupported)) ((((unsupported)) ((xargs)) ((xkwds)))) ((((xmkargs)) ((xP)) ((xp_sig)))))
                                        (((unsupported)) ((xException)))
                                          bogusForceDataize.write (((((xgetattr)) ((((xp_type)) (9))) ((xattr)))) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwds)))))
                                          (((unsupported)) ((((xTestFailed)) (("invalid signature for %s: %s %s".mod (((unsupported)) ((xp_func)) ((xargs)) ((xkwds))))))))
                        bogusForceDataize.write (((xdoit)) ("Decimal"))
                        bogusForceDataize.write (((xdoit)) ("Context"))
            xall_tests.write (((unsupported)) ((xCExplicitConstructionTest)) ((xPyExplicitConstructionTest)) ((xCImplicitConstructionTest)) ((xPyImplicitConstructionTest)) ((xCFormatTest)) ((xPyFormatTest)) ((xCArithmeticOperatorsTest)) ((xPyArithmeticOperatorsTest)) ((xCThreadingTest)) ((xPyThreadingTest)) ((xCUsabilityTest)) ((xPyUsabilityTest)) ((xCPythonAPItests)) ((xPyPythonAPItests)) ((xCContextAPItests)) ((xPyContextAPItests)) ((xCContextWithStatement)) ((xPyContextWithStatement)) ((xCContextFlags)) ((xPyContextFlags)) ((xCSpecialContexts)) ((xPySpecialContexts)) ((xCContextInputValidation)) ((xPyContextInputValidation)) ((xCContextSubclassing)) ((xPyContextSubclassing)) ((xCCoverage)) ((xPyCoverage)) ((xCFunctionality)) ((xPyFunctionality)) ((xCWhitebox)) ((xPyWhitebox)) ((xCIBMTestCases)) ((xPyIBMTestCases)))
            ((xC).not).if
              xall_tests.write (((unsupported)) ((xall_tests)) ((((unsupported)) (1) (2))))
              seq
                bogusForceDataize.write ((((xall_tests).xinsert)) (0) ((xCheckAttributes)))
                bogusForceDataize.write ((((xall_tests).xinsert)) (1) ((xSignatureTest)))
            xtest_main.write
              [xarith xverbose xtodo_tests xdebug]
                memory > xtester
                memory > xtest_classes
                memory > xTEST_ALL
                memory > xsavedecimal
                memory > xDEBUG
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    bogusForceDataize.write (((xinit)) ((xC)))
                    bogusForceDataize.write (((xinit)) ((xP)))
                    (((unsupported)) 0)
                    xTEST_ALL.write ((((unsupported)) ((xarith)) ("None: is there a None literal in the EO language?")).if (xarith) (((xis_resource_enabled)) ("decimal")))
                    xDEBUG.write (xdebug)
                    (((unsupported)) ((xtodo_tests)) ("None: is there a None literal in the EO language?")).if
                      xtest_classes.write (xall_tests)
                      xtest_classes.write (((unsupported)) ((xCIBMTestCases)) ((xPyIBMTestCases)))
                    (((unsupported)) ((xfilename)) (((((xos).xlistdir)) ((xdirectory)))))
                      seq
                        ((((unsupported)) (".decTest") ((xfilename))).or ((((xfilename).xstartswith)) ("."))).if
                          (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xhead)) ((xtail)))) (((((xfilename).xsplit)) ("."))))
                        ((((unsupported)) ((xtodo_tests)) ("None: is there a None literal in the EO language?")).and (((unsupported)) ((xhead)) ((xtodo_tests)))).if
                          (((unsupported)) 0)
                        xtester.write (((unsupported)) (((((xself).xeval_file)) (((xdirectory).add (xf))))))
                        bogusForceDataize.write (((xsetattr)) ((xCIBMTestCases)) (("test_".add (xhead))) ((xtester)))
                        bogusForceDataize.write (((xsetattr)) ((xPyIBMTestCases)) (("test_".add (xhead))) ((xtester)))
                        (((unsupported)) ((((unsupported)) ((xfilename)) ((xhead)) ((xtail)) ((xtester)))))
                    (((unsupported)) 0)
                      seq
                        bogusForceDataize.write (((xrun_unittest)) ((((unsupported)) ((xtest_classes)))))
                        (((unsupported)) ((xtodo_tests)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)) 0)
                            xsavedecimal.write (((unsupported)) (((xsys).xmodules)) ("decimal"))
                            (xC).if
                              seq
                                (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xC)))
                                (((unsupported)) ((xrun_doctest)) ((xC)) ((xverbose)) ((xIGNORE_EXCEPTION_DETAIL)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xP)))
                            bogusForceDataize.write (((xrun_doctest)) ((xP)) ((xverbose)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("decimal"))) ((xsavedecimal)))
                      seq
                        (xC).if
                          bogusForceDataize.write ((((xC).xsetcontext)) ((((unsupported)) ((xORIGINAL_CONTEXT)) ((xC)))))
                        bogusForceDataize.write ((((xP).xsetcontext)) ((((unsupported)) ((xORIGINAL_CONTEXT)) ((xP)))))
                        ((xC).not).if
                          bogusForceDataize.write ((((xwarnings).xwarn)) ("C tests skipped: no module named _decimal.") ((xUserWarning)))
                        ((((unsupported)) ((xorig_sys_decimal)) ((((unsupported)) (((xsys).xmodules)) ("decimal")))).not).if
                          (((unsupported)) ((((xTestFailed)) ("Internal error: unbalanced number of changes to sys.modules['decimal']."))))
            ((x__name__).eq "__main__").if
              seq
                (((unsupported)) 0)
                xp.write ((((xoptparse).xOptionParser)) ("test_decimal.py [--debug] [{--skip | test1 [test2 [...]]}]"))
                (((unsupported)) (((xp).xadd_option)) ("--debug") ("-d") ("store_true") ("shows the test number and context before each test"))
                (((unsupported)) (((xp).xadd_option)) ("--skip") ("-s") ("store_true") ("skip over 90% of the arithmetic tests"))
                (((unsupported)) ((((unsupported)) ((xopt)) ((xargs)))) (((((xp).xparse_args)) 0)))
                ((xopt).xskip).if
                  (((unsupported)) ((xtest_main)) (FALSE) (TRUE))
                  (xargs).if
                    (((unsupported)) ((xtest_main)) (TRUE) (TRUE) ((xargs)) (((xopt).xdebug)))
                    (((unsupported)) ((xtest_main)) (TRUE) (TRUE))