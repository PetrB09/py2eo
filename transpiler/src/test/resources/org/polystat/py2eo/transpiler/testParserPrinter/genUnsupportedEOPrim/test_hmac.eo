memory > xstr
memory > xwarnings
memory > xrange
memory > xb
memory > xtype
memory > xx
memory > xDeprecationWarning
memory > xid
memory > xmybytes
memory > xunittest
memory > xkwargs
memory > xMockCrazyHash
memory > xbytearray
memory > xRuntimeWarning
memory > xbinascii
memory > xException
memory > xmystr
memory > xbytes
memory > xhmac
memory > xargs
memory > xhashlib
memory > xobject
memory > xmemoryview
memory > xTypeError
memory > x__name__
memory > xa
[] > test_hmac
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_sha384_rfc4231
        memory > xexpected
        memory > xtest_with_str_key
        memory > xtest_realcopy
        memory > xignore_warning
        memory > xtest_dot_new_with_str_key
        memory > xtest_with_digestmod_no_default
        memory > xtest_with_memoryview_msg
        memory > xtest_attributes
        memory > xtest_sha224_rfc4231
        memory > xtest_normal
        memory > xtest_sha512_rfc4231
        memory > xtest_compare_digest
        memory > xtest_legacy_block_size_warnings
        memory > xtest_exercise_all_methods
        memory > xtest_withmodule
        memory > xtest_with_bytearray
        memory > xtest_md5_vectors
        memory > x_rfc4231_test_cases
        memory > xtest_sha256_rfc4231
        memory > xtest_withtext
        memory > xtest_sha_vectors
        memory > xtest_equality
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xignore_warning.write
              [xfunc]
                memory > xwrapper
                seq > @
                  seq
                    xwrapper.write
                      []
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                              seq
                                (((unsupported)) (((xwarnings).xfilterwarnings)) ("ignore") ((xDeprecationWarning)))
                                (((unsupported)) ((((xfunc)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                    (((unsupported)) ((xwrapper)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_md5_vectors.write
                  [xself]
                    memory > xmd5test
                    seq > @
                      (((unsupported)) 0)
                        xmd5test.write
                          [xkey xdata xdigest]
                            memory > xh
                            seq > @
                              seq
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) (((xhashlib).xmd5)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xupper)) 0)) (((((xdigest).xupper)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xdigest)) 0)) (((((xbinascii).xunhexlify)) ((xdigest)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("hmac-md5"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) (16))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) (64))
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) ("md5"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xupper)) 0)) (((((xdigest).xupper)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xdigest)) 0)) (((((xbinascii).xunhexlify)) ((xdigest)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("hmac-md5"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) (16))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) (64))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ("md5"))) (((((xbinascii).xunhexlify)) ((xdigest)))))
                                (((unsupported)) ((((((xunittest).xmock).xpatch)) ("hmac._openssl_md_meths") ((((unsupported)) 0)))))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ("md5"))) (((((xbinascii).xunhexlify)) ((xdigest)))))
                        bogusForceDataize.write (((xmd5test)) (("x0b".mul 16)) ("Hi There") ("9294727A3638BB1C13F48EF8158BFC9D"))
                        bogusForceDataize.write (((xmd5test)) ("Jefe") ("what do ya want for nothing?") ("750c783e6ab0b503eaa86e310a5db738"))
                        bogusForceDataize.write (((xmd5test)) (("xaa".mul 16)) (("xdd".mul 50)) ("56be34521d144c88dbb8c733f0e8b3f6"))
                        bogusForceDataize.write (((xmd5test)) ((((xbytes)) ((((xrange)) (1) (26))))) (("xcd".mul 50)) ("697eaf0aca3a3aea3a75164746ffaa79"))
                        bogusForceDataize.write (((xmd5test)) (("x0C".mul 16)) ("Test With Truncation") ("56461ef2342edc00f9bab995690efd4c"))
                        bogusForceDataize.write (((xmd5test)) (("xaa".mul 80)) ("Test Using Larger Than Block-Size Key - Hash Key First") ("6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd"))
                        bogusForceDataize.write (((xmd5test)) (("xaa".mul 80)) ("Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data") ("6f630fad67cda0ee1fb1f562db3aa53e"))
                xtest_sha_vectors.write
                  [xself]
                    memory > xshatest
                    seq > @
                      (((unsupported)) 0)
                        xshatest.write
                          [xkey xdata xdigest]
                            memory > xh
                            seq > @
                              seq
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) (((xhashlib).xsha1)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xupper)) 0)) (((((xdigest).xupper)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xdigest)) 0)) (((((xbinascii).xunhexlify)) ((xdigest)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("hmac-sha1"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) (20))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) (64))
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) ("sha1"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xupper)) 0)) (((((xdigest).xupper)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xdigest)) 0)) (((((xbinascii).xunhexlify)) ((xdigest)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ("hmac-sha1"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) (20))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) (64))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ("sha1"))) (((((xbinascii).xunhexlify)) ((xdigest)))))
                        bogusForceDataize.write (((xshatest)) (("x0b".mul 20)) ("Hi There") ("b617318655057264e28bc0b6fb378c8ef146be00"))
                        bogusForceDataize.write (((xshatest)) ("Jefe") ("what do ya want for nothing?") ("effcdf6ae5eb2fa2d27416d5f184df9c259a7c79"))
                        bogusForceDataize.write (((xshatest)) (("xAA".mul 20)) (("xDD".mul 50)) ("125d7342b9ac11cd91a39af48aa17b4f63f175d3"))
                        bogusForceDataize.write (((xshatest)) ((((xbytes)) ((((xrange)) (1) (26))))) (("xCD".mul 50)) ("4c9007f4026250c6bc8414f9bf50c86c2d7235da"))
                        bogusForceDataize.write (((xshatest)) (("x0C".mul 20)) ("Test With Truncation") ("4c1a03424b55e07fe7f27be1d58bb9324a9a5a04"))
                        bogusForceDataize.write (((xshatest)) (("xAA".mul 80)) ("Test Using Larger Than Block-Size Key - Hash Key First") ("aa4ae5e15272d00e95705637ce8a3b55ed402112"))
                        bogusForceDataize.write (((xshatest)) (("xAA".mul 80)) ("Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data") ("e8e99d0f45237d786d6bbaa7965c7808bbff1a91"))
                x_rfc4231_test_cases.write
                  [xself xhashfunc xhash_name xdigest_size xblock_size]
                    memory > xhmactest
                    seq > @
                      seq
                        xhmactest.write
                          [xkey xdata xhexdigests]
                            memory > xh
                            memory > xhmac_name
                            seq > @
                              seq
                                xhmac_name.write ("hmac-".add (xhash_name))
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) ((xhashfunc)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xlower)) 0)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ((xhmac_name)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) ((xdigest_size)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) ((xblock_size)))
                                xh.write (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) ((xhash_name)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xh).xhexdigest)) 0).xlower)) 0)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xname)) ((xhmac_name)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdigest_size)) ((xdigest_size)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xblock_size)) ((xblock_size)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ((xhashfunc)))) (((((xbinascii).xunhexlify)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ((xhash_name)))) (((((xbinascii).xunhexlify)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))))
                                (((unsupported)) ((((((xunittest).xmock).xpatch)) ("hmac._openssl_md_meths") ((((unsupported)) 0)))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ((xhashfunc)))) (((((xbinascii).xunhexlify)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhmac).xdigest)) ((xkey)) ((xdata)) ((xhash_name)))) (((((xbinascii).xunhexlify)) ((((unsupported)) ((xhexdigests)) ((xhashfunc)))))))
                        (((unsupported)) ((xhmactest)) (("x0b".mul 20)) ("Hi There") ((((unsupported)) (((xhashlib).xsha224)) ("896fb1128abbdf196832107cd49df33f47b4b1169912ba4f53684b22") (((xhashlib).xsha256)) ("b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7") (((xhashlib).xsha384)) ("afd03944d84895626b0825f4ab46907f15f9dadbe4101ec682aa034c7cebc59cfaea9ea9076ede7f4af152e8b2fa9cb6") (((xhashlib).xsha512)) ("87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854"))))
                        (((unsupported)) ((xhmactest)) ("Jefe") ("what do ya want for nothing?") ((((unsupported)) (((xhashlib).xsha224)) ("a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44") (((xhashlib).xsha256)) ("5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843") (((xhashlib).xsha384)) ("af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649") (((xhashlib).xsha512)) ("164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737"))))
                        (((unsupported)) ((xhmactest)) (("xaa".mul 20)) (("xdd".mul 50)) ((((unsupported)) (((xhashlib).xsha224)) ("7fb3cb3588c6c1f6ffa9694d7d6ad2649365b0c1f65d69d1ec8333ea") (((xhashlib).xsha256)) ("773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe") (((xhashlib).xsha384)) ("88062608d3e6ad8a0aa2ace014c8a86f0aa635d947ac9febe83ef4e55966144b2a5ab39dc13814b94e3ab6e101a34f27") (((xhashlib).xsha512)) ("fa73b0089d56a284efb0f0756c890be9b1b5dbdd8ee81a3655f83e33b2279d39bf3e848279a722c806b485a47e67c807b946a337bee8942674278859e13292fb"))))
                        (((unsupported)) ((xhmactest)) ((((xbytes)) ((((unsupported)) ((xx)) ((xx)) ((((xrange)) (1) ((25.add 1)))))))) (("xcd".mul 50)) ((((unsupported)) (((xhashlib).xsha224)) ("6c11506874013cac6a2abc1bb382627cec6a90d86efc012de7afec5a") (((xhashlib).xsha256)) ("82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b") (((xhashlib).xsha384)) ("3e8a69b7783c25851933ab6290af6ca77a9981480850009cc5577c6e1f573b4e6801dd23c4a7d679ccf8a386c674cffb") (((xhashlib).xsha512)) ("b0ba465637458c6990e5a8c5f61d4af7e576d97ff94b872de76f8050361ee3dba91ca5c11aa25eb4d679275cc5788063a5f19741120c4f2de2adebeb10a298dd"))))
                        (((unsupported)) ((xhmactest)) (("xaa".mul 131)) ("Test Using Larger Than Block-Size Key - Hash Key First") ((((unsupported)) (((xhashlib).xsha224)) ("95e9a0db962095adaebe9b2d6f0dbce2d499f112f2d2b7273fa6870e") (((xhashlib).xsha256)) ("60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54") (((xhashlib).xsha384)) ("4ece084485813e9088d2c63a041bc5b44f9ef1012a2b588f3cd11f05033ac4c60c2ef6ab4030fe8296248df163f44952") (((xhashlib).xsha512)) ("80b24263c7c1a3ebb71493c1dd7be8b49b46d1f41b4aeec1121b013783f8f3526b56d037e05f2598bd0fd2215d6a1e5295e64f73f63f0aec8b915a985d786598"))))
                        (((unsupported)) ((xhmactest)) (("xaa".mul 131)) ("This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.") ((((unsupported)) (((xhashlib).xsha224)) ("3a854166ac5d9f023f54d517d0b39dbd946770db9c2b95c9f6f565d1") (((xhashlib).xsha256)) ("9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2") (((xhashlib).xsha384)) ("6617178e941f020d351e2f254e8fd32c602420feb0b8fb9adccebb82461e99c5a678cc31e799176d3860e6110c46523e") (((xhashlib).xsha512)) ("e37b6a775dc87dbaa4dfa9f96e5e3ffddebd71f8867289865df5a32d20cdc944b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58"))))
                xtest_sha224_rfc4231.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_rfc4231_test_cases)) (((xhashlib).xsha224)) ("sha224") (28) (64))
                xtest_sha256_rfc4231.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_rfc4231_test_cases)) (((xhashlib).xsha256)) ("sha256") (32) (64))
                xtest_sha384_rfc4231.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_rfc4231_test_cases)) (((xhashlib).xsha384)) ("sha384") (48) (128))
                xtest_sha512_rfc4231.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_rfc4231_test_cases)) (((xhashlib).xsha512)) ("sha512") (64) (128))
                xtest_legacy_block_size_warnings.write
                  [xself]
                    memory > xupdate
                    memory > x__init__
                    memory > xdigest
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xobject)))
                          seq
                            unsupported
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((xself).x_x)) (((((xhashlib).xsha256)) ((((unsupported)) ((xargs)))))))
                                    (((unsupported)) (((xself).xdigest_size)) ((((xself).x_x).xdigest_size)))
                            xupdate.write
                              [xself xv]
                                seq > @
                                  bogusForceDataize.write (((((xself).x_x).xupdate)) ((xv)))
                            xdigest.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((((xself).x_x).xdigest)) 0)))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xRuntimeWarning)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeWarning)))))
                              seq
                                (((unsupported)) (((xhmac).xHMAC)) ("a") ("b") ((xMockCrazyHash)))
                                bogusForceDataize.write ((((xself).xfail)) ("Expected warning about missing block_size"))
                            (((unsupported)) (((xMockCrazyHash).xblock_size)) (1))
                            (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeWarning)))))
                              seq
                                (((unsupported)) (((xhmac).xHMAC)) ("a") ("b") ((xMockCrazyHash)))
                                bogusForceDataize.write ((((xself).xfail)) ("Expected warning about small block_size"))
                xtest_with_digestmod_no_default.write
                  [xself]
                    memory > xkey
                    memory > xdata
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("required.*digestmod"))))
                          seq
                            xkey.write ("x0b".mul 16)
                            xdata.write "Hi There"
                            (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("required.*digestmod"))))
                          bogusForceDataize.write ((((xhmac).xnew)) ((xkey)) ((xdata)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("required.*digestmod"))))
                          (((unsupported)) (((xhmac).xHMAC)) ((xkey)) ((xdata)) (""))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xexpected.write "6c845b47f52b3b47f6590c502db7825aad757bf4fadc8fa972f7cd2e76a5bdeb"
                xtest_normal.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                          (((unsupported)) (((xhmac).xHMAC)) ("key") ("sha256"))
                          bogusForceDataize.write ((((xself).xfail)) ("Standard constructor call raised exception."))
                xtest_with_str_key.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          xh.write (((unsupported)) (((xhmac).xHMAC)) ("key") ("sha256"))
                xtest_dot_new_with_str_key.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          xh.write (((unsupported)) (((xhmac).xnew)) ("key") ("sha256"))
                xtest_withtext.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                          xh.write (((unsupported)) (((xhmac).xHMAC)) ("key") ("hash this!") ("sha256"))
                          bogusForceDataize.write ((((xself).xfail)) ("Constructor call with text argument raised exception."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xhexdigest)) 0)) (((xself).xexpected)))
                xtest_with_bytearray.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                          xh.write (((unsupported)) (((xhmac).xHMAC)) ((((xbytearray)) ("key"))) ((((xbytearray)) ("hash this!"))) ("sha256"))
                          bogusForceDataize.write ((((xself).xfail)) ("Constructor call with bytearray arguments raised exception."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xhexdigest)) 0)) (((xself).xexpected)))
                xtest_with_memoryview_msg.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                          xh.write (((unsupported)) (((xhmac).xHMAC)) ("key") ((((xmemoryview)) ("hash this!"))) ("sha256"))
                          bogusForceDataize.write ((((xself).xfail)) ("Constructor call with memoryview msg raised exception."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xh).xhexdigest)) 0)) (((xself).xexpected)))
                xtest_withmodule.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                          xh.write ((((xhmac).xHMAC)) ("key") ("") (((xhashlib).xsha256)))
                          bogusForceDataize.write ((((xself).xfail)) ("Constructor call with hashlib.sha256 raised exception."))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_exercise_all_methods.write
                [xself]
                  memory > xh
                  memory > xh2
                  memory > xdig
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((xException)))
                        seq
                          xh.write (((unsupported)) (((xhmac).xHMAC)) ("my secret key") ("sha256"))
                          bogusForceDataize.write ((((xh).xupdate)) ("compute the hash of this text!"))
                          xdig.write ((((xh).xdigest)) 0)
                          xdig.write ((((xh).xhexdigest)) 0)
                          xh2.write ((((xh).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xfail)) ("Exception raised during normal usage of HMAC class."))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_attributes.write
                  [xself]
                    memory > xh2
                    memory > xh1
                    seq > @
                      (((unsupported)) 0)
                        xh1.write (((unsupported)) (((xhmac).xHMAC)) ("key") ("sha256"))
                        xh2.write ((((xh1).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xh1).xdigest_cons).eq ((xh2).xdigest_cons))) ("digest constructors don't match."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) (((xh1).xinner)))) ((((xtype)) (((xh2).xinner)))) ("Types of inner don't match."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) (((xh1).xouter)))) ((((xtype)) (((xh2).xouter)))) ("Types of outer don't match."))
                xtest_realcopy.write
                  [xself]
                    memory > xh2
                    memory > xh1
                    seq > @
                      (((unsupported)) 0)
                        xh1.write (((unsupported)) (((xhmac).xHMAC)) ("key") ("sha256"))
                        xh2.write ((((xh1).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xid)) ((xh1))).neq (((xid)) ((xh2))))) ("No real copy of the HMAC instance."))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xid)) (((xh1).xinner))).neq (((xid)) (((xh2).xinner))))) ("No real copy of the attribute 'inner'."))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xid)) (((xh1).xouter))).neq (((xid)) (((xh2).xouter))))) ("No real copy of the attribute 'outer'."))
                xtest_equality.write
                  [xself]
                    memory > xh2
                    memory > xh1
                    seq > @
                      (((unsupported)) 0)
                        xh1.write (((unsupported)) (((xhmac).xHMAC)) ("key") ("sha256"))
                        bogusForceDataize.write ((((xh1).xupdate)) ("some random text"))
                        xh2.write ((((xh1).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xh1).xdigest)) 0)) (((((xh2).xdigest)) 0)) ("Digest of copy doesn't match original digest."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xh1).xhexdigest)) 0)) (((((xh2).xhexdigest)) 0)) ("Hexdigest of copy doesn't match original hexdigest."))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_compare_digest.write
                [xself]
                  memory > x__eq__
                  seq > @
                    seq
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (100) (200))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (100) ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") (200))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foo"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("xdexadxbexef") ("xdexad"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobaz"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("xdexadxbexef") ("xabxadx1dxea"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("xdexadxbexef") ("xdexadxbexef"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ((((xbytearray)) ("foobar"))))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ((((xbytearray)) ("foo"))))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ((((xbytearray)) ("foobaz"))))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xb)) ((xa)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ("foo"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xb)) ((xa)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xbytearray)) ("foobar"))) ("foobaz"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xb)) ((xa)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foo") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobaz"))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("foobar") (1))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) (100) (200))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("fooä") ("fooä"))))
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xhmac).xcompare_digest)) ((xa)) ((xb)))
                      (((unsupported)) ((xstr)))
                        x__eq__.write
                          [xself xother]
                            seq > @
                              (((unsupported)) (FALSE))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmystr)) ("foobar"))) ((((xmystr)) ("foobar"))))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmystr)) ("foobar"))) ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmystr)) ("foobar"))) ((((xmystr)) ("foobaz"))))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((xbytes)))
                        x__eq__.write
                          [xself xother]
                            seq > @
                              (((unsupported)) (FALSE))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmybytes)) ("foobar"))) ((((xmybytes)) ("foobar"))))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmybytes)) ("foobar"))) ("foobar"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
                      (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmybytes)) ("foobar"))) ((((xmybytes)) ("foobaz"))))))
                      bogusForceDataize.write ((((xself).xassertFalse)) (((((xhmac).xcompare_digest)) ((xa)) ((xb)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)