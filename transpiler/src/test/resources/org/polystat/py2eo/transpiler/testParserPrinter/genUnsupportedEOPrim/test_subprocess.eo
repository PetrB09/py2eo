memory > xResourceWarning
memory > xrange
memory > xpython_base
memory > xk
memory > xofhandle
memory > xthreading
memory > xtypes
memory > xignored1
memory > xpython_dir
memory > xstdout
memory > xto_fd
memory > xFakePath
memory > xImportError
memory > xAttributeError
memory > xfd
memory > xEnvironmentError
memory > xnum
memory > xc
memory > xprocess
memory > xsaved
memory > xexpected
memory > xlist
memory > xRuntimeError
memory > xKeyboardInterrupt
memory > xenumerate
memory > xValueError
memory > xo
memory > xsetrlimit
memory > xsignal
memory > xNotADirectoryError
memory > xfrozenset
memory > xerrno
memory > xreadfiles
memory > xstr
memory > xfrom_fds
memory > xProcessLookupError
memory > xerror
memory > xio
memory > xofname
memory > xout
memory > xinst
memory > xwrong_dir
memory > xfrom_fd
memory > xcontext
memory > xerrors
memory > xenv_list
memory > xmsvcrt
memory > xmock__wait
memory > xstdout_w
memory > xBadInt
memory > xFileNotFoundError
memory > xcall
memory > xh
memory > xstream
memory > xvalue
memory > xignored2
memory > xhard
memory > xeval
memory > xselect
memory > xprefix
memory > x_
memory > xtempfile
memory > xerr
memory > xstdout_r
memory > xcwd
memory > xRuntimeWarning
memory > xto_fds
memory > xoutput
memory > xProcessTestCase
memory > xBadEnv
memory > xopen
memory > xp
memory > xstdin_pipe
memory > xtextwrap
memory > xpath
memory > xf
memory > xset
memory > xifname
memory > xrepr
memory > xint
memory > xException
memory > xhasattr
memory > xmock_proc_stdin
memory > xtime
memory > xi
memory > xgetrlimit
memory > xx
memory > xPopenTestException
memory > xsuper
memory > xexe_list
memory > xs
memory > xfname
memory > xsupport
memory > xPopenExecuteChildRaises
memory > xsys
memory > xascii
memory > xBrokenPipeError
memory > xbytes
memory > xstdout_pipe
memory > xunused_process
memory > xdev_null
memory > xstderr
memory > xnon_inheritable
memory > xgc
memory > xargs
memory > xOSError
memory > xunused_stderr
memory > xmock
memory > xos
memory > xtraceback
memory > xitertools
memory > xsubprocess
memory > xencoding
memory > xgetattr
memory > xPermissionError
memory > xid
memory > xfds_to_keep
memory > xe
memory > xefhandle
memory > xextra_kwarg
memory > xname
memory > xshutil
memory > xzip
memory > xunittest
memory > xy
memory > xenc
memory > xnull
memory > x_posixsubprocess
memory > xChildProcessError
memory > xfobj
memory > xmap
memory > xstderr_pipe
memory > xstatus
memory > xBaseTestCase
memory > xIsADirectoryError
memory > xkwargs
memory > xisinstance
memory > xinheritable
memory > xtemp_fd
memory > xifhandle
memory > xinout
memory > xdict
memory > xselectors
memory > xproc
memory > xline
memory > xRLIMIT_NPROC
memory > xlen
memory > xBlockingIOError
memory > xTypeError
memory > xefname
memory > xignored
memory > x__name__
[] > test_subprocess
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_startupinfo_copy
        memory > xinstances_created
        memory > xtest_bytes_program
        memory > xtest_communicate_timeout_large_output
        memory > xmswindows
        memory > xtest_close_fds_after_preexec
        memory > xtest__all__
        memory > xtest_send_signal
        memory > xtest_CalledProcessError_str_non_zero
        memory > xtest_close_fd_0
        memory > xtest_cwd
        memory > xtest_check_output_stdin_with_input_arg
        memory > xtest_stderr_pipe
        memory > xtest_universal_newlines_communicate_input_none
        memory > xtest_close_fds_0_1
        memory > xtest_file_not_found_includes_filename
        memory > xtest_bytes_executable_replaces_shell
        memory > xtest_file_not_found_with_bad_cwd
        memory > xrun_python
        memory > x_test_bufsize_equal_one
        memory > xtest_pipe_cloexec
        memory > xtest_run_with_pathlike_path
        memory > xtest_stopped
        memory > xtest_remapping_std_fds
        memory > xtest_shell_encodings
        memory > xtest_stdout_devnull
        memory > xtest_surrogates_error_message
        memory > xtest_universal_newlines_and_text
        memory > xtest_empty_handle_list
        memory > x_restore_fds
        memory > xtest_preexec_exception
        memory > xtest_undecodable_env
        memory > xtest_stderr_fileobj
        memory > xtest_stderr_stdin_are_single_inout_fd
        memory > xtest_communicate_BrokenPipeError_stdin_write
        memory > xtest_cwd_with_relative_arg
        memory > xtest_threadsafe_wait
        memory > xtest_run_with_pathlike_path_and_arguments
        memory > xtest_communicate_BrokenPipeError_stdin_close
        memory > xtest_preexec_gc_module_failure
        memory > xtest_call_string
        memory > xtest_run_kwargs
        memory > xtest_wait_timeout
        memory > xtest_terminate
        memory > xtest_shell_sequence_with_spaces
        memory > xtest_broken_pipe_cleanup
        memory > xtest_check_output_stderr
        memory > xtest_kill_dead
        memory > xtest_pathlike_executable
        memory > xNONEXISTING_ERRORS
        memory > xtest_run_abort
        memory > xtest_universal_newlines_communicate_stdin
        memory > xtest_executable_with_cwd
        memory > xtest_pass_fds_inheritable
        memory > xtest_close_fds_1_2
        memory > xtest_executable_replaces_shell
        memory > xtest_run_with_shell_timeout_and_capture_output
        memory > xtest_close_fd_2
        memory > xtest_check_call_nonzero
        memory > xtest_pipe
        memory > xtest_check_output
        memory > xtest_io_unbuffered_works
        memory > xSETBINARY
        memory > xtest_bytes_executable
        memory > xtest_call_timeout
        memory > xtest_wait
        memory > xtest_pipe_cloexec_real_tools
        memory > xcheck_close_std_fds
        memory > xtest_stderr_redirect_with_no_stdout_redirect
        memory > xtest_creationflags
        memory > xtest_zombie_fast_process_del
        memory > xtest_exception_errpipe_bad_data
        memory > xtest_io_buffered_by_default
        memory > xtest_check_output_timeout
        memory > xtest_executable
        memory > xtest_double_close_on_error
        memory > xtest_list2cmdline
        memory > x_assert_python
        memory > xtest_startupinfo_keywords
        memory > x_testcapi
        memory > xtest_issue8780
        memory > xtest_args_string
        memory > x_normalize_cwd
        memory > xtest_noshell_string_with_spaces
        memory > xtest_getoutput
        memory > xtest_communicate_stderr
        memory > xtest_check_zero
        memory > xtest_preexec_errpipe_does_not_double_close_pipes
        memory > xtest_communicate_timeout
        memory > xtest_CalledProcessError_str_unknown_signal
        memory > xtest_stdout_filedes
        memory > xtest_fork_exec
        memory > xtest_stdout_with_capture_output_arg
        memory > xtest_shell_string
        memory > xtest_stdin_devnull
        memory > xtest_communicate_BrokenPipeError_stdin_flush
        memory > xtest_poll
        memory > xtest_shell_sequence
        memory > xtest_check_output_input_none_universal_newlines
        memory > xtest_stdout_fileobj
        memory > xtest_stderr_filedes
        memory > xwith_spaces
        memory > xtest_terminate_dead
        memory > xcheck_swap_fds
        memory > xsetUp
        memory > xtest_preexec_fork_failure
        memory > xtest_universal_newlines_communicate_stdin_stdout_stderr
        memory > xtest_exception_cwd
        memory > xtest_run_keyboardinterrupt_no_kill
        memory > xtest_stdout_stderr_file
        memory > xtest_call_kwargs
        memory > xtest_failed_child_execute_fd_leak
        memory > xtest_close_fds_when_max_fd_is_lowered
        memory > xtest_stderr_devnull
        memory > xtest_exception_bad_args_0
        memory > xtest_start_new_session
        memory > xtest_kill
        memory > xtest_shell_string_with_spaces
        memory > xtest_invalid_bufsize
        memory > xtest_communicate_pipe_fd_leak
        memory > xtest_call_seq
        memory > xtest_universal_newlines_communicate
        memory > xtest_check_call_zero
        memory > xtest_empty_attribute_list
        memory > xtest_CalledProcessError_str_signal
        memory > xtest_stdout_stderr_are_single_inout_fd
        memory > xtest_executable_takes_precedence
        memory > xtest_invalid_env
        memory > xtest_stdin_fileobj
        memory > xtest_cwd_with_absolute_arg
        memory > xtest_noshell_sequence_with_spaces
        memory > xtest_exception_bad_executable
        memory > xtest_check_output_stdout_arg
        memory > xtest_select_unbuffered
        memory > xtest_small_errpipe_write_fd
        memory > xtest_empty_env
        memory > xtest_stdin_filedes
        memory > xtest_check_output_input_none_text
        memory > xtest_close_fds_with_stdio
        memory > x_kill_process
        memory > xtest_check_output_input_arg
        memory > xtest_bufsize_equal_one_text_mode
        memory > x_split_python_path
        memory > xtest_close_fds
        memory > xtest_call_keyboardinterrupt_no_kill
        memory > xtest_cwd_with_relative_executable
        memory > xtest_stdout_filedes_of_stdout
        memory > xtest_executable_without_cwd
        memory > xtest_check
        memory > xtest_stdin_none
        memory > xtest_communicate_epipe_only_stdin
        memory > xtest_universal_newlines_communicate_encodings
        memory > xtest_communicate_eintr
        memory > xtest_communicate_epipe
        memory > xtest_check_output_nonzero
        memory > xtest_close_fds_0_1_2
        memory > x__init__
        memory > xtest_communicate_pipe_buf
        memory > xtest_no_leaking
        memory > xtest_writes_before_communicate
        memory > xtest_restore_signals
        memory > xtest_communicate_repeated_call_after_stdout_close
        memory > xtest_specific_shell
        memory > xtest_bufsize_is_none
        memory > xtest_pass_fds_redirected
        memory > xtest_swap_std_fds_with_one_closed
        memory > x_assert_cwd
        memory > x_get_chdir_exception
        memory > xtest_context_manager_keyboardinterrupt_no_kill
        memory > x_kill_dead_process
        memory > xtest_capture_stderr
        memory > xtest_bufsize_equal_one_binary_mode
        memory > x_test_keyboardinterrupt_no_kill
        memory > xtest_leaking_fds_on_error
        memory > xtest_stdout_stdin_are_single_inout_fd
        memory > xtest_capture_stdout
        memory > xtest_communicate_returns
        memory > xtest_startupinfo
        memory > xtest_communicate
        memory > xtest_stderr_with_capture_output_arg
        memory > xtest_close_fds_0_2
        memory > x__del__
        memory > xtest_stdout_stderr_pipe
        memory > xtest_stdin_pipe
        memory > xtest_stdout_none
        memory > xtest_fork_exec_sorted_fd_sanity_check
        memory > x_check_swap_std_fds_with_one_closed
        memory > xtest_leak_fast_process_del_killed
        memory > xtest_communicate_BrokenPipeError_stdin_close_with_timeout
        memory > xtest_env
        memory > xtest_stderr_none
        memory > xZERO_RETURN_CMD
        memory > xtest_communicate_errors
        memory > xtest_stdout_pipe
        memory > xassertStderrEqual
        memory > xtest_capture_output
        memory > xtest_wait_when_sigchild_ignored
        memory > xtest_check_output_input_none
        memory > xtest_communicate_stdin
        memory > xtest_invalid_args
        memory > xtearDown
        memory > xtest_swap_fds
        memory > xtest_cwd_with_pathlike
        memory > xtest_pathlike_executable_replaces_shell
        memory > xtest_run_with_bytes_path_and_arguments
        memory > xtest_check_output_stdin_arg
        memory > xsetUpModule
        memory > xtest_nonexisting_with_pipes
        memory > xtest_close_fd_1
        memory > xtest_communicate_stdout
        memory > xtest_issue31471
        memory > xtest_handles_closed_on_exception
        memory > xtest_pass_fds
        memory > x_save_fds
        memory > x_execute_child
        memory > xtest_returncode
        memory > xtest_send_signal_dead
        memory > xtest_preexec
        memory > xNONEXISTING_CMD
        memory > xtest_exception_errpipe_normal
        memory > xtest_timeout
        memory > xtest_invalid_cmd
        memory > xtest_cwd_with_bytes
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_testcapi.write "None: is there a None literal in the EO language?"
            ((xsupport).xPGO).if
              (((unsupported)) (((((xunittest).xSkipTest)) ("test is not helpful for PGO"))))
            xmswindows.write (((xsys).xplatform).eq "win32")
            (xmswindows).if
              xSETBINARY.write "import msvcrt; msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY);"
              xSETBINARY.write ""
            xNONEXISTING_CMD.write (((unsupported)) ("nonexisting_i_hope"))
            xNONEXISTING_ERRORS.write (((unsupported)) ((xFileNotFoundError)) ((xNotADirectoryError)) ((xPermissionError)))
            xZERO_RETURN_CMD.write (((unsupported)) (((xsys).xexecutable)) ("-c") ("pass"))
            xsetUpModule.write
              []
                memory > xZERO_RETURN_CMD
                memory > xshell_true
                seq > @
                  seq
                    xshell_true.write ((((xshutil).xwhich)) ("true"))
                    (((unsupported)) ((xshell_true)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)) 0)
                    (((((xos).xaccess)) ((xshell_true)) (((xos).xX_OK))).and ((((((xsubprocess).xrun)) ((((unsupported)) ((xshell_true))))).xreturncode).eq 0)).if
                      seq
                        (((unsupported)) 0)
                        xZERO_RETURN_CMD.write (((unsupported)) ((xshell_true)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((xmswindows).not).if
                          seq
                            (((unsupported)) ((xinst)) (((xsubprocess).x_active)))
                              bogusForceDataize.write ((((xinst).xwait)) 0)
                            bogusForceDataize.write ((((xsubprocess).x_cleanup)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xsubprocess).x_active)) ("subprocess._active not empty"))
                        bogusForceDataize.write ((((xself).xdoCleanups)) 0)
                        bogusForceDataize.write ((((xsupport).xreap_children)) 0)
                xassertStderrEqual.write
                  [xself xstderr xexpected xmsg]
                    memory > xactual
                    seq > @
                      (((unsupported)) 0)
                        xactual.write ((((xsupport).xstrip_python_stderr)) ((xstderr)))
                        xexpected.write ((((xexpected).xstrip)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)) ((xmsg)))
            (((unsupported)) ((xException)))
            (((unsupported)) (((xsubprocess).xPopen)))
              seq
                (((unsupported)) 0)
                x_execute_child.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xPopenTestException)) ("Forced Exception for Test"))))
            (((unsupported)) ((xBaseTestCase)))
              seq
                xtest_io_buffered_by_default.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstdin)) (((xio).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstdout)) (((xio).xBufferedIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstderr)) (((xio).xBufferedIOBase)))
                          seq
                            bogusForceDataize.write (((((xp).xstdin).xclose)) 0)
                            bogusForceDataize.write (((((xp).xstdout).xclose)) 0)
                            bogusForceDataize.write (((((xp).xstderr).xclose)) 0)
                            bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_io_unbuffered_works.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (0))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstdin)) (((xio).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstdout)) (((xio).xRawIOBase)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xstderr)) (((xio).xRawIOBase)))
                          seq
                            bogusForceDataize.write (((((xp).xstdin).xclose)) 0)
                            bogusForceDataize.write (((((xp).xstdout).xclose)) 0)
                            bogusForceDataize.write (((((xp).xstderr).xclose)) 0)
                            bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_call_seq.write
                  [xself]
                    memory > xrc
                    seq > @
                      seq
                        xrc.write ((((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (47))
                xtest_call_timeout.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("while True: pass"))) (0.1))
                xtest_check_call_zero.write
                  [xself]
                    memory > xrc
                    seq > @
                      seq
                        xrc.write ((((xsubprocess).xcheck_call)) ((xZERO_RETURN_CMD)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (0))
                xtest_check_call_nonzero.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xCalledProcessError)))) ((xc)))
                          bogusForceDataize.write ((((xsubprocess).xcheck_call)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xreturncode)) (47))
                xtest_check_output.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write ((((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print('BDFL')"))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("BDFL") ((xoutput)))
                xtest_check_output_nonzero.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xCalledProcessError)))) ((xc)))
                          bogusForceDataize.write ((((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(5)"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xreturncode)) (5))
                xtest_check_output_stderr.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stderr.write('BDFL')"))) (((xsubprocess).xSTDOUT)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("BDFL") ((xoutput)))
                xtest_check_output_stdin_arg.write
                  [xself]
                    memory > xtf
                    memory > xoutput
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        bogusForceDataize.write ((((xtf).xwrite)) ("pear"))
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(sys.stdin.read().upper())"))) ((xtf)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("PEAR") ((xoutput)))
                xtest_check_output_input_arg.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(sys.stdin.read().upper())"))) ("pear"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("PEAR") ((xoutput)))
                xtest_check_output_input_none.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        unsupported
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; print('XX' if sys.stdin.read() else '')"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("XX") ((xoutput)))
                xtest_check_output_input_none_text.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; print('XX' if sys.stdin.read() else '')"))) ("None: is there a None literal in the EO language?") (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("XX") ((xoutput)))
                xtest_check_output_input_none_universal_newlines.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; print('XX' if sys.stdin.read() else '')"))) ("None: is there a None literal in the EO language?") (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("XX") ((xoutput)))
                xtest_check_output_stdout_arg.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xc)))
                          seq
                            xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print('will not be run')"))) (((xsys).xstdout)))
                            bogusForceDataize.write ((((xself).xfail)) ("Expected ValueError when stdout arg supplied."))
                        bogusForceDataize.write ((((xself).xassertIn)) ("stdout") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                xtest_check_output_stdin_with_input_arg.write
                  [xself]
                    memory > xtf
                    memory > xoutput
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        bogusForceDataize.write ((((xtf).xwrite)) ("pear"))
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xc)))
                          seq
                            xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print('will not be run')"))) ((xtf)) ("hare"))
                            bogusForceDataize.write ((((xself).xfail)) ("Expected ValueError when stdin and input args supplied."))
                        bogusForceDataize.write ((((xself).xassertIn)) ("stdin") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("input") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                xtest_check_output_timeout.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)))) ((xc)))
                          seq
                            xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, timensys.stdout.write('BDFL')nsys.stdout.flush()ntime.sleep(3600)"))) (3))
                            bogusForceDataize.write ((((xself).xfail)) ("Expected TimeoutExpired."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xoutput)) ("BDFL"))
                xtest_call_kwargs.write
                  [xself]
                    memory > xnewenv
                    memory > xrc
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("banana"))
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, os;sys.exit(os.getenv(\"FRUIT\")==\"banana\")"))) ((xnewenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                xtest_invalid_args.write
                  [xself]
                    memory > xargcount
                    memory > xtoo_many_args
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xs)))
                          seq
                            (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xsubprocess).xPopen)) (1))
                            xargcount.write (((((xsubprocess).xPopen).x__init__).x__code__).xco_argcount)
                            xtoo_many_args.write ((((unsupported)) (0)).mul ((xargcount).add 1))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xtoo_many_args)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xgetvalue)) 0)) (""))
                xtest_stdin_none.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print(\"banana\")"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xstdin)) ("None: is there a None literal in the EO language?"))
                xtest_stdout_none.write
                  [xself]
                    memory > xcode
                    memory > xp
                    seq > @
                      seq
                        xcode.write "import sys; from subprocess import Popen, PIPE;p = Popen([sys.executable, \"-c\", \"print('test_stdout_none')\"],          stdin=PIPE, stderr=PIPE);p.wait(); assert p.stdout is None;"
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        (((unsupported)) ((((unsupported)) ((xout)) ((xerr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xout).xrstrip)) 0)) ("test_stdout_none"))
                xtest_stderr_none.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print(\"banana\")"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xstderr)) ("None: is there a None literal in the EO language?"))
                x_assert_python.write
                  [xself xpre_args]
                    memory > xargs
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        xargs.write ((xpre_args).add (((unsupported)) ("import sys; sys.exit(47)")))
                        xp.write ((((xsubprocess).xPopen)) ((xargs)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (47) (((xp).xreturncode)))
                xtest_executable.write
                  [xself]
                    memory > xdoesnotexist
                    seq > @
                      seq
                        xdoesnotexist.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) (((xsys).xexecutable)))) ("doesnotexist"))
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) ((xdoesnotexist)) ("-c"))) (((xsys).xexecutable)))
                xtest_bytes_executable.write
                  [xself]
                    memory > xdoesnotexist
                    seq > @
                      seq
                        xdoesnotexist.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) (((xsys).xexecutable)))) ("doesnotexist"))
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) ((xdoesnotexist)) ("-c"))) (((((xos).xfsencode)) (((xsys).xexecutable)))))
                xtest_pathlike_executable.write
                  [xself]
                    memory > xdoesnotexist
                    seq > @
                      seq
                        xdoesnotexist.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) (((xsys).xexecutable)))) ("doesnotexist"))
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) ((xdoesnotexist)) ("-c"))) ((((xFakePath)) (((xsys).xexecutable)))))
                xtest_executable_takes_precedence.write
                  [xself]
                    memory > xpre_args
                    seq > @
                      seq
                        xpre_args.write (((unsupported)) (((xsys).xexecutable)) ("-c"))
                        bogusForceDataize.write ((((xself).x_assert_python)) ((xpre_args)))
                        (((unsupported)) (((xself).xassertRaises)) ((xNONEXISTING_ERRORS)) (((xself).x_assert_python)) ((xpre_args)) ((((unsupported)) ((xNONEXISTING_CMD)) (0))))
                xtest_executable_replaces_shell.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) 0)) (((xsys).xexecutable)) (TRUE))
                xtest_bytes_executable_replaces_shell.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) 0)) (((((xos).xfsencode)) (((xsys).xexecutable)))) (TRUE))
                xtest_pathlike_executable_replaces_shell.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_assert_python)) ((((unsupported)) 0)) ((((xFakePath)) (((xsys).xexecutable)))) (TRUE))
                x_normalize_cwd.write
                  [xself xcwd]
                    seq > @
                      (((unsupported)) (((((xsupport).xchange_cwd)) ((xcwd)))))
                        (((unsupported)) (((((xos).xgetcwd)) 0)))
                x_split_python_path.write
                  [xself]
                    memory > xpython_path
                    seq > @
                      seq
                        xpython_path.write (((((xos).xpath).xrealpath)) (((xsys).xexecutable)))
                        (((unsupported)) ((((((xos).xpath).xsplit)) ((xpython_path)))))
                x_assert_cwd.write
                  [xself xexpected_cwd xpython_arg]
                    memory > xp
                    memory > xnormcase
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) ((xpython_arg)) ("-c") ("import os, sys; buf = sys.stdout.buffer; buf.write(os.getcwd().encode()); buf.flush(); sys.exit(47)"))) (((xsubprocess).xPIPE)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (47) (((xp).xreturncode)))
                        xnormcase.write (((xos).xpath).xnormcase)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnormcase)) ((xexpected_cwd)))) ((((xnormcase)) (((((((((xp).xstdout).xread)) 0).xdecode)) 0)))))
                xtest_cwd.write
                  [xself]
                    memory > xtemp_dir
                    seq > @
                      seq
                        xtemp_dir.write ((((xtempfile).xgettempdir)) 0)
                        xtemp_dir.write ((((xself).x_normalize_cwd)) ((xtemp_dir)))
                        (((unsupported)) (((xself).x_assert_cwd)) ((xtemp_dir)) (((xsys).xexecutable)) ((xtemp_dir)))
                xtest_cwd_with_bytes.write
                  [xself]
                    memory > xtemp_dir
                    seq > @
                      seq
                        xtemp_dir.write ((((xtempfile).xgettempdir)) 0)
                        xtemp_dir.write ((((xself).x_normalize_cwd)) ((xtemp_dir)))
                        (((unsupported)) (((xself).x_assert_cwd)) ((xtemp_dir)) (((xsys).xexecutable)) (((((xos).xfsencode)) ((xtemp_dir)))))
                xtest_cwd_with_pathlike.write
                  [xself]
                    memory > xtemp_dir
                    seq > @
                      seq
                        xtemp_dir.write ((((xtempfile).xgettempdir)) 0)
                        xtemp_dir.write ((((xself).x_normalize_cwd)) ((xtemp_dir)))
                        (((unsupported)) (((xself).x_assert_cwd)) ((xtemp_dir)) (((xsys).xexecutable)) ((((xFakePath)) ((xtemp_dir)))))
                xtest_cwd_with_relative_arg.write
                  [xself]
                    memory > xpython_dir
                    memory > xrel_python
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xpython_dir)) ((xpython_base)))) (((((xself).x_split_python_path)) 0)))
                        xrel_python.write (((((xos).xpath).xjoin)) (((xos).xcurdir)) ((xpython_base)))
                        (((unsupported)) (((((xsupport).xtemp_cwd)) 0)) ((xwrong_dir)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xFileNotFoundError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xrel_python)))))
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xrel_python)))) ((xwrong_dir)))
                            xpython_dir.write ((((xself).x_normalize_cwd)) ((xpython_dir)))
                            (((unsupported)) (((xself).x_assert_cwd)) ((xpython_dir)) ((xrel_python)) ((xpython_dir)))
                xtest_cwd_with_relative_executable.write
                  [xself]
                    memory > xpython_dir
                    memory > xrel_python
                    memory > xdoesntexist
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xpython_dir)) ((xpython_base)))) (((((xself).x_split_python_path)) 0)))
                        xrel_python.write (((((xos).xpath).xjoin)) (((xos).xcurdir)) ((xpython_base)))
                        xdoesntexist.write "somethingyoudonthave"
                        (((unsupported)) (((((xsupport).xtemp_cwd)) 0)) ((xwrong_dir)))
                          seq
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xdoesntexist)))) ((xrel_python)))
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xdoesntexist)))) ((xrel_python)) ((xwrong_dir)))
                            xpython_dir.write ((((xself).x_normalize_cwd)) ((xpython_dir)))
                            (((unsupported)) (((xself).x_assert_cwd)) ((xpython_dir)) ((xdoesntexist)) ((xrel_python)) ((xpython_dir)))
                xtest_cwd_with_absolute_arg.write
                  [xself]
                    memory > xabs_python
                    memory > xrel_python
                    memory > xwrong_dir
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xpython_dir)) ((xpython_base)))) (((((xself).x_split_python_path)) 0)))
                        xabs_python.write (((((xos).xpath).xjoin)) ((xpython_dir)) ((xpython_base)))
                        xrel_python.write (((((xos).xpath).xjoin)) (((xos).xcurdir)) ((xpython_base)))
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xwrong_dir)))
                          seq
                            (((unsupported)) (((xself).xassertRaises)) ((xFileNotFoundError)) (((xsubprocess).xPopen)) ((((unsupported)) ((xrel_python)))) ((xwrong_dir)))
                            xwrong_dir.write ((((xself).x_normalize_cwd)) ((xwrong_dir)))
                            (((unsupported)) (((xself).x_assert_cwd)) ((xwrong_dir)) ((xabs_python)) ((xwrong_dir)))
                xtest_executable_with_cwd.write
                  [xself]
                    memory > xpython_dir
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xpython_dir)) ((xpython_base)))) (((((xself).x_split_python_path)) 0)))
                        xpython_dir.write ((((xself).x_normalize_cwd)) ((xpython_dir)))
                        (((unsupported)) (((xself).x_assert_cwd)) ((xpython_dir)) ("somethingyoudonthave") (((xsys).xexecutable)) ((xpython_dir)))
                xtest_executable_without_cwd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_assert_cwd)) (((((xos).xgetcwd)) 0)) ("somethingyoudonthave") (((xsys).xexecutable)))
                xtest_stdin_pipe.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(sys.stdin.read() == \"pear\")"))) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write (((((xp).xstdin).xwrite)) ("pear"))
                        bogusForceDataize.write (((((xp).xstdin).xclose)) 0)
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                xtest_stdin_filedes.write
                  [xself]
                    memory > xd
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xd.write ((((xtf).xfileno)) 0)
                        bogusForceDataize.write ((((xos).xwrite)) ((xd)) ("pear"))
                        bogusForceDataize.write ((((xos).xlseek)) ((xd)) (0) (0))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(sys.stdin.read() == \"pear\")"))) ((xd)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                xtest_stdin_fileobj.write
                  [xself]
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        bogusForceDataize.write ((((xtf).xwrite)) ("pear"))
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(sys.stdin.read() == \"pear\")"))) ((xtf)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                xtest_stdout_pipe.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(\"orange\")"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xread)) 0)) ("orange"))
                xtest_stdout_filedes.write
                  [xself]
                    memory > xd
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xd.write ((((xtf).xfileno)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(\"orange\")"))) ((xd)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xos).xlseek)) ((xd)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xread)) ((xd)) (1024))) ("orange"))
                xtest_stdout_fileobj.write
                  [xself]
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(\"orange\")"))) ((xtf)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtf).xread)) 0)) ("orange"))
                xtest_stderr_pipe.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stderr.write(\"strawberry\")"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertStderrEqual)) ((((((xp).xstderr).xread)) 0)) ("strawberry"))
                xtest_stderr_filedes.write
                  [xself]
                    memory > xd
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xd.write ((((xtf).xfileno)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stderr.write(\"strawberry\")"))) ((xd)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xos).xlseek)) ((xd)) (0) (0))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) (((((xos).xread)) ((xd)) (1024))) ("strawberry"))
                xtest_stderr_fileobj.write
                  [xself]
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stderr.write(\"strawberry\")"))) ((xtf)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) (((((xtf).xread)) 0)) ("strawberry"))
                xtest_stderr_redirect_with_no_stdout_redirect.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, subprocess;rc = subprocess.call([sys.executable, \"-c\",    \"import sys;\"    \"sys.stderr.write('42')\"],    stderr=subprocess.STDOUT);sys.exit(rc)"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstdout)) ("42"))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                xtest_stdout_stderr_pipe.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(\"apple\");sys.stdout.flush();sys.stderr.write(\"orange\")"))) (((xsubprocess).xPIPE)) (((xsubprocess).xSTDOUT)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertStderrEqual)) ((((((xp).xstdout).xread)) 0)) ("appleorange"))
                xtest_stdout_stderr_file.write
                  [xself]
                    memory > xtf
                    memory > xp
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(\"apple\");sys.stdout.flush();sys.stderr.write(\"orange\")"))) ((xtf)) ((xtf)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) (((((xtf).xread)) 0)) ("appleorange"))
                xtest_stdout_filedes_of_stdout.write
                  [xself]
                    memory > xcode
                    memory > xp
                    seq > @
                      seq
                        xcode.write "import sys, subprocess; rc = subprocess.call([sys.executable, \"-c\",     \"import os, sys; sys.exit(os.write(sys.stdout.fileno(), b'test with stdout=1'))\"], stdout=1); assert rc == 18"
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        (((unsupported)) ((((unsupported)) ((xout)) ((xerr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xout).xrstrip)) 0)) ("test with stdout=1"))
                xtest_stdout_devnull.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("for i in range(10240):print(\"x\" * 1024)"))) (((xsubprocess).xDEVNULL)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xstdout)) ("None: is there a None literal in the EO language?"))
                xtest_stderr_devnull.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sysnfor i in range(10240):sys.stderr.write(\"x\" * 1024)"))) (((xsubprocess).xDEVNULL)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xstderr)) ("None: is there a None literal in the EO language?"))
                xtest_stdin_devnull.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdin.read(1)"))) (((xsubprocess).xDEVNULL)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xstdin)) ("None: is there a None literal in the EO language?"))
                xtest_env.write
                  [xself]
                    memory > xnewenv
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange"))
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys,os;sys.stdout.write(os.getenv(\"FRUIT\"))"))) (((xsubprocess).xPIPE)) ((xnewenv)))) ((xp)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("orange"))
                xtest_empty_env.write
                  [xself]
                    memory > xis_env_var_to_ignore
                    memory > xchild_env_names
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xis_env_var_to_ignore.write
                          [xn]
                            seq > @
                              seq
                                unsupported
                                (((unsupported)) ((((((((unsupported)) ("VERSIONER") ((xn))).or (((unsupported)) ("__CF") ((xn)))).or ((xn).eq "LD_PRELOAD")).or ((((xn).xstartswith)) ("SANDBOX"))).or ((xn).eq "LC_CTYPE"))))
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os; print(list(os.environ.keys()))"))) (((xsubprocess).xPIPE)) ((((unsupported)) 0)))) ((xp)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            xchild_env_names.write (((xeval)) (((((xstdout).xstrip)) 0)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xchild_env_names)) ((xlist)))
                            xchild_env_names.write (((unsupported)) ((xk)) ((xk)) ((xchild_env_names)) (((((xis_env_var_to_ignore)) ((xk))).not)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xchild_env_names)) ((((unsupported)) 0)))
                xtest_invalid_cmd.write
                  [xself]
                    memory > xcmd
                    seq > @
                      seq
                        xcmd.write (((xsys).xexecutable).add "0")
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsubprocess).xPopen)) ((((unsupported)) ((xcmd)) ("-c") ("pass"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("pass#0"))))
                xtest_invalid_env.write
                  [xself]
                    memory > xnewenv
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT0VEGETABLE"))) ("cabbage"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xnewenv)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange0VEGETABLE=cabbage"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xnewenv)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT=ORANGE"))) ("lemon"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xnewenv)))
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("orange=lemon"))
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, os;sys.stdout.write(os.getenv(\"FRUIT\"))"))) (((xsubprocess).xPIPE)) ((xnewenv)))) ((xp)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("orange=lemon"))
                xtest_communicate_stdin.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.exit(sys.stdin.read() == \"pear\")"))) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xp).xcommunicate)) ("pear"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                xtest_communicate_stdout.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stdout.write(\"pineapple\")"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("pineapple"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstderr)) ("None: is there a None literal in the EO language?"))
                xtest_communicate_stderr.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.stderr.write(\"pineapple\")"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) ("pineapple"))
                xtest_communicate.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys,os;sys.stderr.write(\"pineapple\");sys.stdout.write(sys.stdin.read())"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) ("banana"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("banana"))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) ("pineapple"))
                xtest_communicate_timeout.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (TRUE) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) (((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)) (((xp).xcommunicate)) ("banana") (0.3))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("banana"))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) (((((xstderr).xencode)) 0)) ("pineapplenpearn"))
                xtest_communicate_timeout_large_output.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys,os,time;sys.stdout.write(\"a\" * (64 * 1024));time.sleep(0.2);sys.stdout.write(\"a\" * (64 * 1024));time.sleep(0.2);sys.stdout.write(\"a\" * (64 * 1024));time.sleep(0.2);sys.stdout.write(\"a\" * (64 * 1024));"))) (((xsubprocess).xPIPE)))
                        (((unsupported)) (((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)) (((xp).xcommunicate)) (0.4))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((x_)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xstdout)))) (((4.mul 64).mul 1024)))
                xtest_communicate_pipe_fd_leak.write
                  [xself]
                    memory > xp
                    memory > xoptions
                    seq > @
                      (((unsupported)) ((xstdin_pipe)) ((((unsupported)) (FALSE) (TRUE))))
                        (((unsupported)) ((xstdout_pipe)) ((((unsupported)) (FALSE) (TRUE))))
                          (((unsupported)) ((xstderr_pipe)) ((((unsupported)) (FALSE) (TRUE))))
                            seq
                              xoptions.write (((unsupported)) 0)
                              (xstdin_pipe).if
                                (((unsupported)) ((((unsupported)) ((xoptions)) ("stdin"))) (((xsubprocess).xPIPE)))
                              (xstdout_pipe).if
                                (((unsupported)) ((((unsupported)) ((xoptions)) ("stdout"))) (((xsubprocess).xPIPE)))
                              (xstderr_pipe).if
                                (((unsupported)) ((((unsupported)) ((xoptions)) ("stderr"))) (((xsubprocess).xPIPE)))
                              ((xoptions).not).if
                                (((unsupported)) 0)
                              xp.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((((unsupported)) ((xoptions)))))
                              bogusForceDataize.write ((((xp).xcommunicate)) 0)
                              (((unsupported)) (((xp).xstdin)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xp).xstdin).xclosed)))
                              (((unsupported)) (((xp).xstdout)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xp).xstdout).xclosed)))
                              (((unsupported)) (((xp).xstderr)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xp).xstderr).xclosed)))
                xtest_communicate_returns.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstderr)) ("None: is there a None literal in the EO language?"))
                xtest_communicate_pipe_buf.write
                  [xself]
                    memory > xstring_to_write
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xos).xclose)) ((xx)))
                        bogusForceDataize.write ((((xos).xclose)) ((xy)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (("import sys,os;sys.stdout.write(sys.stdin.read(47));sys.stderr.write(\"x\" * %d);sys.stdout.write(sys.stdin.read())".mod ((xsupport).xPIPE_MAX_SIZE))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        xstring_to_write.write ("a".mul ((xsupport).xPIPE_MAX_SIZE))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) ((xstring_to_write)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ((xstring_to_write)))
                xtest_writes_before_communicate.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys,os;sys.stdout.write(sys.stdin.read())"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        bogusForceDataize.write (((((xp).xstdin).xwrite)) ("banana"))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) ("split"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("bananasplit"))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                xtest_universal_newlines_and_text.write
                  [xself]
                    memory > xargs
                    memory > xp
                    seq > @
                      seq
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((("import sys,os;".add (xSETBINARY)).add (((unsupported)) 0))))
                        (((unsupported)) ((xextra_kwarg)) ((((unsupported)) ("universal_newlines") ("text"))))
                          seq
                            xp.write ((((xsubprocess).xPopen)) ((xargs)) ((((unsupported)) ((((unsupported)) ("stdin") (((xsubprocess).xPIPE)) ("stdout") (((xsubprocess).xPIPE)) ((xextra_kwarg)) (TRUE))))))
                            (((unsupported)) ((xp)))
                              seq
                                bogusForceDataize.write (((((xp).xstdin).xwrite)) ("line1n"))
                                bogusForceDataize.write (((((xp).xstdin).xflush)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xreadline)) 0)) ("line1n"))
                                bogusForceDataize.write (((((xp).xstdin).xwrite)) ("line3n"))
                                bogusForceDataize.write (((((xp).xstdin).xclose)) 0)
                                bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xreadline)) 0)) ("line2n"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xread)) (6))) ("line3n"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xread)) 0)) ("line4nline5nline6nline7nline8"))
                xtest_universal_newlines_communicate.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((("import sys,os;".add (xSETBINARY)).add (((unsupported)) 0))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (1))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("line2nline4nline5nline6nline7nline8"))
                xtest_universal_newlines_communicate_stdin.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((("import sys,os;".add (xSETBINARY)).add ((((xtextwrap).xdedent)) ((((unsupported)) 0))))))) (((xsubprocess).xPIPE)) (1))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) ("line1nline3n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                xtest_universal_newlines_communicate_input_none.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (TRUE))
                        bogusForceDataize.write ((((xp).xcommunicate)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                xtest_universal_newlines_communicate_stdin_stdout_stderr.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((("import sys,os;".add (xSETBINARY)).add ((((xtextwrap).xdedent)) ((((unsupported)) 0))))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (TRUE))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) ("line1nline3n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("line1nline2nline3nline4nline5n") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xstderr).xstartswith)) ("eline2neline6neline7n"))))
                xtest_universal_newlines_communicate_encodings.write
                  [xself]
                    memory > xcode
                    memory > xargs
                    memory > xpopen
                    seq > @
                      (((unsupported)) ((xencoding)) ((((unsupported)) ("utf-16") ("utf-32-be"))))
                        seq
                          xcode.write ("import sys; sys.stdout.buffer.write('1rn2r3n4'.encode('%s'))".mod (xencoding))
                          xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                          xpopen.write (((unsupported)) (((xsubprocess).xPopen)) ((xargs)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ((xencoding)))
                          (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) ((((unsupported)) (((xpopen).xcommunicate)) (""))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) ("1n2n3n4"))
                xtest_communicate_errors.write
                  [xself]
                    memory > xcode
                    memory > xargs
                    memory > xpopen
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xerrors)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("ignore") (""))) ((((unsupported)) ("replace") ("ufffdufffd"))) ((((unsupported)) ("surrogateescape") ("udc80udc80"))) ((((unsupported)) ("backslashreplace") ((((unsupported)) 0)))))))
                        seq
                          xcode.write "import sys; sys.stdout.buffer.write(b'[x80x80]')"
                          xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                          xpopen.write (((unsupported)) (((xsubprocess).xPopen)) ((xargs)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ("utf-8") ((xerrors)))
                          (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) ((((unsupported)) (((xpopen).xcommunicate)) (""))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xstdout)) (((("[{}]".xformat)) ((xexpected)))))
                xtest_no_leaking.write
                  [xself]
                    memory > xdata
                    memory > xtmpdir
                    memory > xmax_handles
                    memory > xtmpfile
                    memory > xhandles
                    memory > xp
                    seq > @
                      seq
                        ((xmswindows).not).if
                          xmax_handles.write 1026
                          xmax_handles.write 2050
                        xhandles.write (((unsupported)) 0)
                        xtmpdir.write ((((xtempfile).xmkdtemp)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xi)) ((((xrange)) ((xmax_handles)))))
                              (((unsupported)) ((xOSError)))
                                seq
                                  xtmpfile.write (((((xos).xpath).xjoin)) ((xtmpdir)) (((xsupport).xTESTFN)))
                                  bogusForceDataize.write ((((xhandles).xappend)) (((((xos).xopen)) ((xtmpfile)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))))
                                seq
                                  (((xe).xerrno).neq ((xerrno).xEMFILE)).if
                                    (((unsupported)) 0)
                                  (((unsupported)) 0)
                              bogusForceDataize.write ((((xself).xskipTest)) (("failed to reach the file descriptor limit (tried %d)".mod (xmax_handles))))
                            (((unsupported)) ((xi)) ((((xrange)) (10))))
                              bogusForceDataize.write ((((xos).xclose)) (((((xhandles).xpop)) 0)))
                            (((unsupported)) ((xi)) ((((xrange)) (15))))
                              seq
                                xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(sys.stdin.read())"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                                xdata.write (((unsupported)) (((((xp).xcommunicate)) ("lime"))) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("lime"))
                          seq
                            (((unsupported)) ((xh)) ((xhandles)))
                              bogusForceDataize.write ((((xos).xclose)) ((xh)))
                            bogusForceDataize.write ((((xshutil).xrmtree)) ((xtmpdir)))
                xtest_list2cmdline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ("a b c") ("d") ("e"))))) ("\"a b c\" d e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ("ab\"c") ("\\") ("d"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ("ab\"c") (" \\") ("d"))))) ("ab\\\"c \" \\\\\" d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ((((unsupported)) 0)) ("de fg") ("h"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ("a\\\"b") ("c") ("d"))))) ("a\\\\\\\"b c d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ((((unsupported)) 0)) ("d") ("e"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ((((unsupported)) 0)) ("d") ("e"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xlist2cmdline)) ((((unsupported)) ("ab") (""))))) ("ab \"\""))
                xtest_poll.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os; os.read(0, 1)"))) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp).xpoll)) 0)))
                        bogusForceDataize.write ((((xos).xwrite)) ((((((xp).xstdin).xfileno)) 0)) ("A"))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xpoll)) 0)) (0))
                xtest_wait.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) (0))
                xtest_wait_timeout.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import time; time.sleep(0.3)"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)))) ((xc)))
                          (((unsupported)) (((xp).xwait)) (0.0001))
                        bogusForceDataize.write ((((xself).xassertIn)) ("0.0001") ((((xstr)) (((xc).xexception)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xp).xwait)) (3))) (0))
                xtest_invalid_bufsize.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                        bogusForceDataize.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ("orange"))
                xtest_bufsize_is_none.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) (0))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) (0))
                x_test_bufsize_equal_one.write
                  [xself xline xexpected xuniversal_newlines]
                    memory > xread_line
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(sys.stdin.readline());sys.stdout.flush()"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xDEVNULL)) (1) ((xuniversal_newlines)))) ((xp)))
                          seq
                            bogusForceDataize.write (((((xp).xstdin).xwrite)) ((xline)))
                            bogusForceDataize.write ((((xos).xclose)) ((((((xp).xstdin).xfileno)) 0)))
                            xread_line.write (((((xp).xstdout).xreadline)) 0)
                            (((unsupported)) (((((xsupport).xSuppressCrashReport)) 0)))
                              (((unsupported)) ((xOSError)))
                                bogusForceDataize.write (((((xp).xstdin).xclose)) 0)
                            (((unsupported)) (((xp).xstdin)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xread_line)) ((xexpected)))
                xtest_bufsize_equal_one_text_mode.write
                  [xself]
                    memory > xline
                    seq > @
                      seq
                        xline.write "linen"
                        (((unsupported)) (((xself).x_test_bufsize_equal_one)) ((xline)) ((xline)) (TRUE))
                xtest_bufsize_equal_one_binary_mode.write
                  [xself]
                    memory > xline
                    seq > @
                      seq
                        xline.write ("line".add (((((xos).xlinesep).xencode)) 0))
                        (((unsupported)) (((((xself).xassertWarnsRegex)) ((xRuntimeWarning)) ("line buffering"))))
                          (((unsupported)) (((xself).x_test_bufsize_equal_one)) ((xline)) ("") (FALSE))
                xtest_leaking_fds_on_error.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xi)) ((((xrange)) (1024))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNONEXISTING_ERRORS)))))
                          (((unsupported)) (((xsubprocess).xPopen)) ((xNONEXISTING_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                xtest_nonexisting_with_pipes.write
                  [xself]
                    memory > xproc
                    memory > xcode
                    memory > xstderr
                    memory > xcmd
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xAttributeError)) ((xImportError)))))
                          seq
                            (((unsupported)) 0)
                            unsupported
                          bogusForceDataize.write ((((xself).xskipTest)) ("need msvcrt.CrtSetReportMode"))
                        xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                        xcmd.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (TRUE))
                        (((unsupported)) ((xproc)))
                          xstderr.write (((unsupported)) (((((xproc).xcommunicate)) 0)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (0))
                xtest_double_close_on_error.write
                  [xself]
                    memory > xt
                    memory > xfds
                    memory > xexc
                    memory > xopen_fds
                    seq > @
                      seq
                        xfds.write (((unsupported)) 0)
                        xopen_fds.write
                          []
                            seq > @
                              (((unsupported)) ((xi)) ((((xrange)) (20))))
                                seq
                                  bogusForceDataize.write ((((xfds).xextend)) (((((xos).xpipe)) 0)))
                                  bogusForceDataize.write ((((xtime).xsleep)) (0.001))
                        xt.write (((unsupported)) (((xthreading).xThread)) ((xopen_fds)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) (((((xself).xassertRaises)) ((xEnvironmentError)))))
                            (((unsupported)) (((xsubprocess).xPopen)) ((xNONEXISTING_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                          seq
                            bogusForceDataize.write ((((xt).xjoin)) 0)
                            xexc.write "None: is there a None literal in the EO language?"
                            (((unsupported)) ((xfd)) ((xfds)))
                              (((unsupported)) ((xOSError)))
                                bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                                xexc.write (xe)
                            (((unsupported)) ((xexc)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)) ((xexc)))
                xtest_threadsafe_wait.write
                  [xself]
                    memory > xt
                    memory > xkill_proc_timer_thread
                    memory > xexpected_errorcode
                    memory > xresults
                    memory > xproc
                    seq > @
                      seq
                        unsupported
                        xproc.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import time; time.sleep(12)"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) ("None: is there a None literal in the EO language?"))
                        xresults.write (((unsupported)) 0)
                        xkill_proc_timer_thread.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xresults).xappend)) ((((unsupported)) ("thread-start-poll-result") (((((xproc).xpoll)) 0)))))
                                bogusForceDataize.write ((((xproc).xkill)) 0)
                                bogusForceDataize.write ((((xproc).xwait)) 0)
                                bogusForceDataize.write ((((xresults).xappend)) ((((unsupported)) ("thread-after-kill-and-wait") (((xproc).xreturncode)))))
                                bogusForceDataize.write ((((xproc).xwait)) 0)
                                bogusForceDataize.write ((((xresults).xappend)) ((((unsupported)) ("thread-after-second-wait") (((xproc).xreturncode)))))
                        xt.write ((((xthreading).xTimer)) (0.2) ((xkill_proc_timer_thread)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (xmswindows).if
                          xexpected_errorcode.write 1
                          xexpected_errorcode.write (9.neg)
                        (((unsupported)) (((xproc).xwait)) (20))
                        (((unsupported)) (((xself).xassertEqual)) (((xproc).xreturncode)) ((xexpected_errorcode)) ("unexpected result in wait from main thread"))
                        bogusForceDataize.write ((((xproc).xwait)) 0)
                        (((unsupported)) (((xself).xassertEqual)) (((xproc).xreturncode)) ((xexpected_errorcode)) ("unexpected result in second main wait."))
                        bogusForceDataize.write ((((xt).xjoin)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ("thread-start-poll-result") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("thread-after-kill-and-wait") ((xexpected_errorcode)))) ((((unsupported)) ("thread-after-second-wait") ((xexpected_errorcode)))))) ((xresults)))
                xtest_issue8780.write
                  [xself]
                    memory > xcode
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write (((";".xjoin)) ((((unsupported)) ("import subprocess, sys") ("retcode = subprocess.call([sys.executable, '-c', 'print(\"Hello World!\")'])") ("assert retcode == 0"))))
                        xoutput.write ((((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xoutput).xstartswith)) ("Hello World!"))) ((((xascii)) ((xoutput)))))
                xtest_handles_closed_on_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xifhandle)) ((xifname)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((((unsupported)) ((xofhandle)) ((xofname)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((((unsupported)) ((xefhandle)) ((xefname)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((xOSError)))
                          (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) ("*"))) ((xifhandle)) ((xofhandle)) ((xefhandle)))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xifhandle)))
                            bogusForceDataize.write ((((xos).xremove)) ((xifname)))
                            bogusForceDataize.write ((((xos).xclose)) ((xofhandle)))
                            bogusForceDataize.write ((((xos).xremove)) ((xofname)))
                            bogusForceDataize.write ((((xos).xclose)) ((xefhandle)))
                            bogusForceDataize.write ((((xos).xremove)) ((xefname)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xifname)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xofname)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xefname)))))
                xtest_communicate_epipe.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        bogusForceDataize.write ((((xp).xcommunicate)) (("x".mul (((unsupported)) (2) (20)))))
                xtest_communicate_epipe_only_stdin.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdin).xclose)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xp).xcommunicate)) (("x".mul (((unsupported)) (2) (20)))))
                xtest_communicate_eintr.write
                  [xself]
                    memory > xkw
                    memory > xold_handler
                    memory > xhandler
                    memory > xargs
                    seq > @
                      (((unsupported)) 0)
                        xhandler.write
                          [xsignum xframe]
                            seq > @
                        xold_handler.write ((((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ((xold_handler)))
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ("import os, signal;os.kill(os.getppid(), signal.SIGUSR1)"))
                        (((unsupported)) ((xstream)) ((((unsupported)) ("stdout") ("stderr"))))
                          seq
                            xkw.write (((unsupported)) ((xstream)) (((xsubprocess).xPIPE)))
                            (((unsupported)) (((((xsubprocess).xPopen)) ((xargs)) ((((unsupported)) ((xkw)))))) ((xprocess)))
                              bogusForceDataize.write ((((xprocess).xcommunicate)) 0)
                xtest_failed_child_execute_fd_leak.write
                  [xself]
                    memory > xfds_after_exception
                    memory > xfds_before_popen
                    memory > xfd_directory
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xfd_directory.write ("/proc/%d/fd".mod ((((xos).xgetpid)) 0))
                        xfds_before_popen.write ((((xos).xlistdir)) ((xfd_directory)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xPopenTestException)))))
                          (((unsupported)) ((xPopenExecuteChildRaises)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        xfds_after_exception.write ((((xos).xlistdir)) ((xfd_directory)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfds_before_popen)) ((xfds_after_exception)))
                xtest_file_not_found_includes_filename.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))) ((xc)))
                          bogusForceDataize.write ((((xsubprocess).xcall)) ((((unsupported)) ("/opt/nonexistent_binary") ("with") ("some") ("args"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xfilename)) ("/opt/nonexistent_binary"))
                xtest_file_not_found_with_bad_cwd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xFileNotFoundError)))) ((xc)))
                          (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) ("exit") ("0"))) ("/some/nonexistent/directory"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xfilename)) ("/some/nonexistent/directory"))
            (((unsupported)) ((xBaseTestCase)))
              seq
                xrun_python.write
                  [xself xcode]
                    memory > xargv
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xargv.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                        (((unsupported)) (((((xsubprocess).xrun)) ((xargv)) ((((unsupported)) ((xkwargs)))))))
                xtest_returncode.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write ((((xself).xrun_python)) ("import sys; sys.exit(47)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xcp).xreturncode)) (47))
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xCalledProcessError)))))
                          bogusForceDataize.write ((((xcp).xcheck_returncode)) 0)
                xtest_check.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xCalledProcessError)))) ((xc)))
                          (((unsupported)) (((xself).xrun_python)) ("import sys; sys.exit(47)") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xreturncode)) (47))
                xtest_check_zero.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)) (((xsubprocess).xrun)) ((xZERO_RETURN_CMD)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xcp).xreturncode)) (0))
                xtest_timeout.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)))))
                        (((unsupported)) (((xself).xrun_python)) ("while True: pass") (0.0001))
                xtest_capture_stdout.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("print('BDFL')") (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("BDFL") (((xcp).xstdout)))
                xtest_capture_stderr.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys; sys.stderr.write('BDFL')") (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("BDFL") (((xcp).xstderr)))
                xtest_check_output_stdin_arg.write
                  [xself]
                    memory > xcp
                    memory > xtf
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        bogusForceDataize.write ((((xtf).xwrite)) ("pear"))
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys; sys.stdout.write(sys.stdin.read().upper())") ((xtf)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("PEAR") (((xcp).xstdout)))
                xtest_check_output_input_arg.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys; sys.stdout.write(sys.stdin.read().upper())") ("pear") (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("PEAR") (((xcp).xstdout)))
                xtest_check_output_stdin_with_input_arg.write
                  [xself]
                    memory > xtf
                    memory > xoutput
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        bogusForceDataize.write ((((xtf).xwrite)) ("pear"))
                        bogusForceDataize.write ((((xtf).xseek)) (0))
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xValueError)) ("Expected ValueError when stdin and input args supplied."))) ((xc)))
                          xoutput.write (((unsupported)) (((xself).xrun_python)) ("print('will not be run')") ((xtf)) ("hare"))
                        bogusForceDataize.write ((((xself).xassertIn)) ("stdin") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("input") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                xtest_check_output_timeout.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xTimeoutExpired)))) ((xc)))
                          xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys, timensys.stdout.write('BDFL')nsys.stdout.flush()ntime.sleep(3600)") (3) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xoutput)) ("BDFL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xexception).xstdout)) ("BDFL"))
                xtest_run_kwargs.write
                  [xself]
                    memory > xnewenv
                    memory > xcp
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("banana"))
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys, os;sys.exit(33 if os.getenv(\"FRUIT\")==\"banana\" else 31)") ((xnewenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xcp).xreturncode)) (33))
                xtest_run_with_pathlike_path.write
                  [xself]
                    memory > xres
                    memory > xpath
                    memory > xprog
                    seq > @
                      seq
                        xprog.write ((xmswindows).if "tree.com" "ls")
                        xpath.write ((((xshutil).xwhich)) ((xprog)))
                        (((unsupported)) ((xpath)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("{prog} required for this test"))
                        xpath.write (((xFakePath)) ((xpath)))
                        xres.write (((unsupported)) (((xsubprocess).xrun)) ((xpath)) (((xsubprocess).xDEVNULL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xres).xreturncode)) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xsubprocess).xrun)) ((xpath)) (((xsubprocess).xDEVNULL)) (TRUE))
                xtest_run_with_bytes_path_and_arguments.write
                  [xself]
                    memory > xargs
                    memory > xres
                    memory > xpath
                    seq > @
                      seq
                        xpath.write ((((xos).xfsencode)) (((xsys).xexecutable)))
                        xargs.write (((unsupported)) ((xpath)) ("-c") ("import sys; sys.exit(57)"))
                        xres.write ((((xsubprocess).xrun)) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xres).xreturncode)) (57))
                xtest_run_with_pathlike_path_and_arguments.write
                  [xself]
                    memory > xargs
                    memory > xres
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((xFakePath)) (((xsys).xexecutable)))
                        xargs.write (((unsupported)) ((xpath)) ("-c") ("import sys; sys.exit(57)"))
                        xres.write ((((xsubprocess).xrun)) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xres).xreturncode)) (57))
                xtest_capture_output.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)) (((xself).xrun_python)) ("import sys;sys.stdout.write('BDFL'); sys.stderr.write('FLUFL')") (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)) ("BDFL") (((xcp).xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("FLUFL") (((xcp).xstderr)))
                xtest_stdout_with_capture_output_arg.write
                  [xself]
                    memory > xtf
                    memory > xoutput
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xValueError)) ("Expected ValueError when stdout and capture_output args supplied."))) ((xc)))
                          xoutput.write (((unsupported)) (((xself).xrun_python)) ("print('will not be run')") (TRUE) ((xtf)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("stdout") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("capture_output") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                xtest_stderr_with_capture_output_arg.write
                  [xself]
                    memory > xtf
                    memory > xoutput
                    seq > @
                      seq
                        xtf.write ((((xtempfile).xTemporaryFile)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xtf).xclose)))
                        (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xValueError)) ("Expected ValueError when stderr and capture_output args supplied."))) ((xc)))
                          xoutput.write (((unsupported)) (((xself).xrun_python)) ("print('will not be run')") (TRUE) ((xtf)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("stderr") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("capture_output") ((((unsupported)) ((((xc).xexception).xargs)) (0))))
                xtest_run_with_shell_timeout_and_capture_output.write
                  [xself]
                    memory > xafter_secs
                    memory > xbefore_secs
                    memory > xstacks
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xbefore_secs.write ((((xtime).xmonotonic)) 0)
                        (((unsupported)) (((xsubprocess).xTimeoutExpired)))
                          (((unsupported)) (((xsubprocess).xrun)) ("sleep 3") (TRUE) (0.1) (TRUE))
                          seq
                            xafter_secs.write ((((xtime).xmonotonic)) 0)
                            xstacks.write ((((xtraceback).xformat_exc)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("TimeoutExpired not raised."))
                        (((unsupported)) (((xself).xassertLess)) (((xafter_secs).sub (xbefore_secs))) (1.5) ("TimeoutExpired was delayed! Bad traceback:n```n{stacks}```"))
            (((unsupported)) ((xBaseTestCase)) (((((xunittest).xskipIf)) ((xmswindows)) ("POSIX specific tests"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) (((xself).x_nonexistent_dir)) ("/_this/pa.th/does/not/exist"))
                x_get_chdir_exception.write
                  [xself]
                    memory > xdesired_exception
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xchdir)) (((xself).x_nonexistent_dir)))
                          xdesired_exception.write (xe)
                          bogusForceDataize.write ((((xself).xfail)) (("chdir to nonexistent directory %s succeeded.".mod ((xself).x_nonexistent_dir))))
                        (((unsupported)) ((xdesired_exception)))
                xtest_exception_cwd.write
                  [xself]
                    memory > xdesired_exception
                    memory > xp
                    seq > @
                      seq
                        unsupported
                        xdesired_exception.write ((((xself).x_get_chdir_exception)) 0)
                        (((unsupported)) ((xOSError)))
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) (((xself).x_nonexistent_dir)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xerrno)) (((xe).xerrno)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xstrerror)) (((xe).xstrerror)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xfilename)) (((xe).xfilename)))
                          bogusForceDataize.write ((((xself).xfail)) (("Expected OSError: %s".mod (xdesired_exception))))
                xtest_exception_bad_executable.write
                  [xself]
                    memory > xdesired_exception
                    memory > xp
                    seq > @
                      seq
                        unsupported
                        xdesired_exception.write ((((xself).x_get_chdir_exception)) 0)
                        (((unsupported)) ((xOSError)))
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) (((xself).x_nonexistent_dir)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xerrno)) (((xe).xerrno)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xstrerror)) (((xe).xstrerror)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xfilename)) (((xe).xfilename)))
                          bogusForceDataize.write ((((xself).xfail)) (("Expected OSError: %s".mod (xdesired_exception))))
                xtest_exception_bad_args_0.write
                  [xself]
                    memory > xdesired_exception
                    memory > xp
                    seq > @
                      seq
                        unsupported
                        xdesired_exception.write ((((xself).x_get_chdir_exception)) 0)
                        (((unsupported)) ((xOSError)))
                          xp.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xself).x_nonexistent_dir)) ("-c") (""))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xerrno)) (((xe).xerrno)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xstrerror)) (((xe).xstrerror)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xdesired_exception).xfilename)) (((xe).xfilename)))
                          bogusForceDataize.write ((((xself).xfail)) (("Expected OSError: %s".mod (xdesired_exception))))
                (((unsupported)) (((xsubprocess).xPopen)))
                  x__del__.write
                    [xself]
                      seq > @
                xtest_exception_errpipe_normal.write
                  [xself xfork_exec]
                    memory > xproper_error
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xproper_error.write
                          []
                            memory > xerrpipe_write
                            memory > xerr_code
                            seq > @
                              (((unsupported)) 0)
                                xerrpipe_write.write (((unsupported)) ((xargs)) (13))
                                xerr_code.write (((((("{:x}".xformat)) (((xerrno).xEISDIR))).xencode)) 0)
                                bogusForceDataize.write ((((xos).xwrite)) ((xerrpipe_write)) ((("OSError:".add (xerr_code)).add ":")))
                                (((unsupported)) (0))
                        (((unsupported)) (((xfork_exec).xside_effect)) ((xproper_error)))
                        (((unsupported)) ((((unsupported)) (((xmock).xpatch)) ("subprocess.os.waitpid") ((xChildProcessError)))))
                          (((unsupported)) (((((xself).xassertRaises)) ((xIsADirectoryError)))))
                            bogusForceDataize.write ((((xself).xPopenNoDestructor)) ((((unsupported)) ("non_existent_command"))))
                xtest_exception_errpipe_bad_data.write
                  [xself xfork_exec]
                    memory > xerror_data
                    memory > xbad_error
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xerror_data.write "xFFx00xDExAD"
                        xbad_error.write
                          []
                            memory > xerrpipe_write
                            seq > @
                              (((unsupported)) 0)
                                xerrpipe_write.write (((unsupported)) ((xargs)) (13))
                                bogusForceDataize.write ((((xos).xwrite)) ((xerrpipe_write)) ((xerror_data)))
                                (((unsupported)) (0))
                        (((unsupported)) (((xfork_exec).xside_effect)) ((xbad_error)))
                        (((unsupported)) ((((unsupported)) (((xmock).xpatch)) ("subprocess.os.waitpid") ((xChildProcessError)))))
                          (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xSubprocessError)))) ((xe)))
                            bogusForceDataize.write ((((xself).xPopenNoDestructor)) ((((unsupported)) ("non_existent_command"))))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xrepr)) ((xerror_data)))) ((((xstr)) (((xe).xexception)))))
                xtest_restore_signals.write
                  [xself]
                    memory > xrestored_sig_ign_mask
                    memory > xrestored_proc_status
                    memory > xdefault_sig_ign_mask
                    memory > xdefault_proc_status
                    seq > @
                      (((unsupported)) 0)
                        xdefault_proc_status.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) ("cat") ("/proc/self/status"))) (FALSE))
                        (((unsupported)) ((xline)) (((((xdefault_proc_status).xsplitlines)) 0)))
                          ((((xline).xstartswith)) ("SigIgn")).if
                            seq
                              xdefault_sig_ign_mask.write (xline)
                              (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("SigIgn not found in /proc/self/status."))
                        xrestored_proc_status.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) ("cat") ("/proc/self/status"))) (TRUE))
                        (((unsupported)) ((xline)) (((((xrestored_proc_status).xsplitlines)) 0)))
                          ((((xline).xstartswith)) ("SigIgn")).if
                            seq
                              xrestored_sig_ign_mask.write (xline)
                              (((unsupported)) 0)
                        (((unsupported)) (((xself).xassertNotEqual)) ((xdefault_sig_ign_mask)) ((xrestored_sig_ign_mask)) ("restore_signals=True should've unblocked SIGPIPE and friends."))
                xtest_start_new_session.write
                  [xself]
                    memory > xchild_sid
                    memory > xparent_sid
                    memory > xoutput
                    seq > @
                      (((unsupported)) ((xOSError)))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os; print(os.getsid(0))"))) (TRUE))
                        (((xe).xerrno).neq ((xerrno).xEPERM)).if
                          (((unsupported)) 0)
                        seq
                          xparent_sid.write ((((xos).xgetsid)) (0))
                          xchild_sid.write (((xint)) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((xparent_sid)) ((xchild_sid)))
                xtest_run_abort.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xSuppressCrashReport)) 0)))
                          seq
                            xp.write ((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os; os.abort()"))))
                            bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xp).xreturncode).neg)) (((xsignal).xSIGABRT)))
                xtest_CalledProcessError_str_signal.write
                  [xself]
                    memory > xerror_string
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xsubprocess).xCalledProcessError)) (((((xint)) (((xsignal).xSIGABRT))).neg)) ("fake cmd"))
                        xerror_string.write (((xstr)) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("signal") (((((xerror_string).xlower)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("SIG") ((xerror_string)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xstr)) (((xsignal).xSIGABRT)))) ((xerror_string)))
                xtest_CalledProcessError_str_unknown_signal.write
                  [xself]
                    memory > xerror_string
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xsubprocess).xCalledProcessError)) ((9876543.neg)) ("fake cmd"))
                        xerror_string.write (((xstr)) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("unknown signal 9876543.") ((xerror_string)))
                xtest_CalledProcessError_str_non_zero.write
                  [xself]
                    memory > xerror_string
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xsubprocess).xCalledProcessError)) (2) ("fake cmd"))
                        xerror_string.write (((xstr)) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("non-zero exit status 2.") ((xerror_string)))
                xtest_preexec.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys,os;sys.stdout.write(os.getenv(\"FRUIT\"))"))) (((xsubprocess).xPIPE)) ((((unsupported)) (((((xos).xputenv)) ("FRUIT") ("apple"))))))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp).xstdout).xread)) 0)) ("apple"))
                xtest_preexec_exception.write
                  [xself]
                    memory > xp
                    memory > xraise_it
                    seq > @
                      seq
                        xraise_it.write
                          []
                            seq > @
                              (((unsupported)) ((((xValueError)) ("What if two swallows carried a coconut?"))))
                        (((unsupported)) (((xsubprocess).xSubprocessError)) ((xValueError)))
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((xraise_it)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((xsubprocess).x_posixsubprocess)) ("Expected a ValueError from the preexec_fn"))
                          bogusForceDataize.write ((((xself).xassertIn)) ("coconut") ((((unsupported)) (((xe).xargs)) (0))))
                          bogusForceDataize.write ((((xself).xfail)) ("Exception raised by preexec_fn did not make it to the parent process."))
                (((unsupported)) (((xsubprocess).xPopen)))
                  seq
                    unsupported
                    x__init__.write
                      [xself xtestcase]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) (((xself).x_testcase)) ((xtestcase)))
                            bogusForceDataize.write (((((xsubprocess).xPopen).x__init__)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                    x_execute_child.write
                      [xself]
                        memory > xdevzero_fds
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) 0)
                              bogusForceDataize.write (((((xsubprocess).xPopen).x_execute_child)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                              seq
                                xdevzero_fds.write (((unsupported)) (((((xos).xopen)) ("/dev/zero") (((xos).xO_RDONLY)))) ((x_)) ((((xrange)) (8))))
                                (((unsupported)) 0)
                                  (((unsupported)) ((xfd)) ((xdevzero_fds)))
                                    (((unsupported)) ((((xself).x_testcase).xassertNotIn)) ((xfd)) ((((unsupported)) ((((((xself).xstdin).xfileno)) 0)) ((((((xself).xstdout).xfileno)) 0)) ((((((xself).xstderr).xfileno)) 0)))) ("At least one fd was closed early."))
                                  (((unsupported)) ((xfd)) ((xdevzero_fds)))
                                    bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_preexec_errpipe_does_not_double_close_pipes.write
                  [xself]
                    memory > xraise_it
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xraise_it.write
                          []
                            seq > @
                              (((unsupported)) (((((xsubprocess).xSubprocessError)) ("force the _execute_child() errpipe_data path."))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xsubprocess).xSubprocessError)))))
                          (((unsupported)) (((xself).x_TestExecuteChildPopen)) ((xself)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ((xraise_it)))
                xtest_preexec_gc_module_failure.write
                  [xself]
                    memory > xenabled
                    memory > xraise_runtime_error
                    memory > xorig_gc_disable
                    memory > xorig_gc_isenabled
                    seq > @
                      seq
                        xraise_runtime_error.write
                          []
                            seq > @
                              (((unsupported)) ((((xRuntimeError)) ("this shouldn't escape"))))
                        xenabled.write ((((xgc).xisenabled)) 0)
                        xorig_gc_disable.write ((xgc).xdisable)
                        xorig_gc_isenabled.write ((xgc).xisenabled)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xgc).xdisable)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xgc).xisenabled)) 0)))
                            (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xgc).xisenabled)) 0)) ("Popen enabled gc when it shouldn't."))
                            bogusForceDataize.write ((((xgc).xenable)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xisenabled)) 0)))
                            (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xisenabled)) 0)) ("Popen left gc disabled."))
                            (((unsupported)) (((xgc).xdisable)) ((xraise_runtime_error)))
                            (((unsupported)) (((xself).xassertRaises)) ((xRuntimeError)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)) ((((unsupported)) (((xgc).xisenabled)))))
                            (((unsupported)) (((xself).xassertRaises)) ((xAttributeError)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                          seq
                            (((unsupported)) (((xgc).xdisable)) ((xorig_gc_disable)))
                            (((unsupported)) (((xgc).xisenabled)) ((xorig_gc_isenabled)))
                            ((xenabled).not).if
                              bogusForceDataize.write ((((xgc).xdisable)) 0)
                xtest_preexec_fork_failure.write
                  [xself]
                    memory > xlimits
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xImportError)))
                          seq
                            (((unsupported)) 0)
                            (((unsupported)) 0)
                            (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ((xerr)))
                        xlimits.write (((xgetrlimit)) ((xRLIMIT_NPROC)))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xhard)))) ((xlimits)))
                        bogusForceDataize.write (((xsetrlimit)) ((xRLIMIT_NPROC)) ((((unsupported)) (0) ((xhard)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetrlimit)) ((xRLIMIT_NPROC)) ((xlimits)))
                        (((unsupported)) ((xBlockingIOError)))
                          (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (""))) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xskipTest)) ("RLIMIT_NPROC had no effect; probably superuser"))
                xtest_args_string.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xfname)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xfd)) ("w") ("surrogateescape"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xfobj).xwrite)) (("#!%sn".mod ((xsupport).xunix_shell))))
                            bogusForceDataize.write ((((xfobj).xwrite)) (("exec '%s' -c 'import sys; sys.exit(47)'n".mod ((xsys).xexecutable))))
                        bogusForceDataize.write ((((xos).xchmod)) ((xfname)) (448))
                        xp.write ((((xsubprocess).xPopen)) ((xfname)))
                        bogusForceDataize.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xos).xremove)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (47))
                xtest_invalid_args.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))) (47))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))) (47))
                xtest_shell_sequence.write
                  [xself]
                    memory > xnewenv
                    memory > xp
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("apple"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) ("echo $FRUIT"))) (1) (((xsubprocess).xPIPE)) ((xnewenv)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xp).xstdout).xread)) 0).xstrip)) (" trnf"))) ("apple"))
                xtest_shell_string.write
                  [xself]
                    memory > xnewenv
                    memory > xp
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("apple"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ("echo $FRUIT") (1) (((xsubprocess).xPIPE)) ((xnewenv)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xp).xstdout).xread)) 0).xstrip)) (" trnf"))) ("apple"))
                xtest_call_string.write
                  [xself]
                    memory > xrc
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xfname)))) (((((xtempfile).xmkstemp)) 0)))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xfd)) ("w") ("surrogateescape"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xfobj).xwrite)) (("#!%sn".mod ((xsupport).xunix_shell))))
                            bogusForceDataize.write ((((xfobj).xwrite)) (("exec '%s' -c 'import sys; sys.exit(47)'n".mod ((xsys).xexecutable))))
                        bogusForceDataize.write ((((xos).xchmod)) ((xfname)) (448))
                        xrc.write ((((xsubprocess).xcall)) ((xfname)))
                        bogusForceDataize.write ((((xos).xremove)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (47))
                xtest_specific_shell.write
                  [xself]
                    memory > xsh
                    memory > xp
                    memory > xshells
                    seq > @
                      seq
                        xshells.write (((unsupported)) 0)
                        (((unsupported)) ((xprefix)) ((((unsupported)) ("/bin") ("/usr/bin/") ("/usr/local/bin"))))
                          (((unsupported)) ((xname)) ((((unsupported)) ("bash") ("ksh"))))
                            seq
                              xsh.write (((((xos).xpath).xjoin)) ((xprefix)) ((xname)))
                              (((((xos).xpath).xisfile)) ((xsh))).if
                                bogusForceDataize.write ((((xshells).xappend)) ((xsh)))
                        ((xshells).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("bash or ksh required for this test"))
                        xsh.write "/bin/sh"
                        ((((((xos).xpath).xisfile)) ((xsh))).and ((((((xos).xpath).xislink)) ((xsh))).not)).if
                          bogusForceDataize.write ((((xshells).xappend)) ((xsh)))
                        (((unsupported)) ((xsh)) ((xshells)))
                          seq
                            xp.write (((unsupported)) (((xsubprocess).xPopen)) ("echo $0") ((xsh)) (TRUE) (((xsubprocess).xPIPE)))
                            (((unsupported)) ((xp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xp).xstdout).xread)) 0).xstrip)) 0)) ((((xbytes)) ((xsh)) ("ascii"))))
                x_kill_process.write
                  [xself xmethod]
                    memory > xp
                    memory > xold_handler
                    seq > @
                      (((unsupported)) 0)
                        xold_handler.write ((((xsignal).xsignal)) (((xsignal).xSIGINT)) (((xsignal).xdefault_int_handler)))
                        (((unsupported)) 0)
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (TRUE) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                          bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGINT)) ((xold_handler)))
                        bogusForceDataize.write (((((xp).xstdout).xread)) (1))
                        bogusForceDataize.write (((((xgetattr)) ((xp)) ((xmethod)))) ((((unsupported)) ((xargs)))))
                        (((unsupported)) ((xp)))
                x_kill_dead_process.write
                  [xself xmethod]
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (TRUE) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write (((((xp).xstdout).xread)) (1))
                        bogusForceDataize.write ((((xtime).xsleep)) (1))
                        bogusForceDataize.write (((((xgetattr)) ((xp)) ((xmethod)))) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xp).xcommunicate)) 0)
                xtest_send_signal.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).x_kill_process)) ("send_signal") (((xsignal).xSIGINT)))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("KeyboardInterrupt") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xp).xwait)) 0)) (0))
                xtest_kill.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).x_kill_process)) ("kill"))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) ((((xsignal).xSIGKILL).neg)))
                xtest_terminate.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).x_kill_process)) ("terminate"))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xwait)) 0)) ((((xsignal).xSIGTERM).neg)))
                xtest_send_signal_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("send_signal") (((xsignal).xSIGINT)))
                xtest_kill_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("kill"))
                xtest_terminate_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("terminate"))
                x_save_fds.write
                  [xself xsave_fds]
                    memory > xsaved
                    memory > xinheritable
                    memory > xfds
                    seq > @
                      seq
                        xfds.write (((unsupported)) 0)
                        (((unsupported)) ((xfd)) ((xsave_fds)))
                          seq
                            xinheritable.write ((((xos).xget_inheritable)) ((xfd)))
                            xsaved.write ((((xos).xdup)) ((xfd)))
                            bogusForceDataize.write ((((xfds).xappend)) ((((unsupported)) ((xfd)) ((xsaved)) ((xinheritable)))))
                        (((unsupported)) ((xfds)))
                x_restore_fds.write
                  [xself xfds]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xfd)) ((xsaved)) ((xinheritable)))) ((xfds)))
                        seq
                          (((unsupported)) (((xos).xdup2)) ((xsaved)) ((xfd)) ((xinheritable)))
                          bogusForceDataize.write ((((xos).xclose)) ((xsaved)))
                xcheck_close_std_fds.write
                  [xself xfds]
                    memory > xstdin
                    memory > xerr
                    memory > xsaved_fds
                    seq > @
                      seq
                        xstdin.write 0
                        xsaved_fds.write ((((xself).x_save_fds)) ((xfds)))
                        (((unsupported)) ((((unsupported)) ((xfd)) ((xsaved)) ((xinheritable)))) ((xsaved_fds)))
                          ((xfd).eq 0).if
                            seq
                              xstdin.write (xsaved)
                              (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xfd)) ((xfds)))
                              bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            (((unsupported)) ((((unsupported)) ((xout)) ((xerr)))) (((((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(\"apple\");sys.stdout.flush();sys.stderr.write(\"orange\")"))) ((xstdin)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE))).xcommunicate)) 0)))
                            xerr.write ((((xsupport).xstrip_python_stderr)) ((xerr)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xout)) ((xerr)))) ((((unsupported)) ("apple") ("orange"))))
                          bogusForceDataize.write ((((xself).x_restore_fds)) ((xsaved_fds)))
                xtest_close_fd_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (0))))
                xtest_close_fd_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (1))))
                xtest_close_fd_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (2))))
                xtest_close_fds_0_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (0) (1))))
                xtest_close_fds_0_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (0) (2))))
                xtest_close_fds_1_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (1) (2))))
                xtest_close_fds_0_1_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_close_std_fds)) ((((unsupported)) (0) (1) (2))))
                xtest_small_errpipe_write_fd.write
                  [xself]
                    memory > xnew_stdout
                    memory > xnew_stdin
                    seq > @
                      seq
                        unsupported
                        xnew_stdin.write ((((xos).xdup)) (0))
                        xnew_stdout.write ((((xos).xdup)) (1))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xclose)) (0))
                            bogusForceDataize.write ((((xos).xclose)) (1))
                            bogusForceDataize.write (((((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("print('AssertionError:0:CLOEXEC failure.')")))).xwait)) 0)
                          seq
                            bogusForceDataize.write ((((xos).xdup2)) ((xnew_stdin)) (0))
                            bogusForceDataize.write ((((xos).xdup2)) ((xnew_stdout)) (1))
                            bogusForceDataize.write ((((xos).xclose)) ((xnew_stdin)))
                            bogusForceDataize.write ((((xos).xclose)) ((xnew_stdout)))
                xtest_remapping_std_fds.write
                  [xself]
                    memory > xout
                    memory > xp
                    memory > xtemp_fds
                    memory > xsaved_fds
                    memory > xerr
                    memory > xtemps
                    seq > @
                      seq
                        xtemps.write (((unsupported)) (((((xtempfile).xmkstemp)) 0)) ((xi)) ((((xrange)) (3))))
                        (((unsupported)) 0)
                          seq
                            xtemp_fds.write (((unsupported)) ((xfd)) ((((unsupported)) ((xfd)) ((xfname)))) ((xtemps)))
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xfname)))) ((xtemps)))
                              bogusForceDataize.write ((((xos).xunlink)) ((xfname)))
                            bogusForceDataize.write ((((xos).xwrite)) ((((unsupported)) ((xtemp_fds)) (1))) ("STDIN"))
                            bogusForceDataize.write ((((xos).xlseek)) ((((unsupported)) ((xtemp_fds)) (1))) (0) (0))
                            xsaved_fds.write ((((xself).x_save_fds)) ((((xrange)) (3))))
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) ((((unsupported)) ((xfd)) ((xtemp_fd)))) ((((xenumerate)) ((xtemp_fds)))))
                                  bogusForceDataize.write ((((xos).xdup2)) ((xtemp_fd)) ((xfd)))
                                xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; got = sys.stdin.read();sys.stdout.write(\"got %s\"%got); sys.stderr.write(\"err\")"))) ((((unsupported)) ((xtemp_fds)) (1))) ((((unsupported)) ((xtemp_fds)) (2))) ((((unsupported)) ((xtemp_fds)) (0))))
                                bogusForceDataize.write ((((xp).xwait)) 0)
                              bogusForceDataize.write ((((xself).x_restore_fds)) ((xsaved_fds)))
                            (((unsupported)) ((xfd)) ((xtemp_fds)))
                              bogusForceDataize.write ((((xos).xlseek)) ((xfd)) (0) (0))
                            xout.write ((((xos).xread)) ((((unsupported)) ((xtemp_fds)) (2))) (1024))
                            xerr.write ((((xsupport).xstrip_python_stderr)) (((((xos).xread)) ((((unsupported)) ((xtemp_fds)) (0))) (1024))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xout)) ("got STDIN"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xerr)) ("err"))
                          (((unsupported)) ((xfd)) ((xtemp_fds)))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xcheck_swap_fds.write
                  [xself xstdin_no xstdout_no xstderr_no]
                    memory > xout
                    memory > xp
                    memory > xtemp_fds
                    memory > xsaved_fds
                    memory > xerr
                    memory > xtemps
                    seq > @
                      seq
                        xtemps.write (((unsupported)) (((((xtempfile).xmkstemp)) 0)) ((xi)) ((((xrange)) (3))))
                        xtemp_fds.write (((unsupported)) ((xfd)) ((((unsupported)) ((xfd)) ((xfname)))) ((xtemps)))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((((unsupported)) ((xfd)) ((xfname)))) ((xtemps)))
                              bogusForceDataize.write ((((xos).xunlink)) ((xfname)))
                            xsaved_fds.write ((((xself).x_save_fds)) ((((xrange)) (3))))
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) ((((unsupported)) ((xfd)) ((xtemp_fd)))) ((((xenumerate)) ((xtemp_fds)))))
                                  bogusForceDataize.write ((((xos).xdup2)) ((xtemp_fd)) ((xfd)))
                                bogusForceDataize.write ((((xos).xwrite)) ((xstdin_no)) ("STDIN"))
                                bogusForceDataize.write ((((xos).xlseek)) ((xstdin_no)) (0) (0))
                                xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; got = sys.stdin.read();sys.stdout.write(\"got %s\"%got); sys.stderr.write(\"err\")"))) ((xstdin_no)) ((xstdout_no)) ((xstderr_no)))
                                bogusForceDataize.write ((((xp).xwait)) 0)
                                (((unsupported)) ((xfd)) ((xtemp_fds)))
                                  bogusForceDataize.write ((((xos).xlseek)) ((xfd)) (0) (0))
                                xout.write ((((xos).xread)) ((xstdout_no)) (1024))
                                xerr.write ((((xsupport).xstrip_python_stderr)) (((((xos).xread)) ((xstderr_no)) (1024))))
                              bogusForceDataize.write ((((xself).x_restore_fds)) ((xsaved_fds)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xout)) ("got STDIN"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xerr)) ("err"))
                          (((unsupported)) ((xfd)) ((xtemp_fds)))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                xtest_swap_fds.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (0) (1) (2))
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (0) (2) (1))
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (1) (0) (2))
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (1) (2) (0))
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (2) (0) (1))
                        bogusForceDataize.write ((((xself).xcheck_swap_fds)) (2) (1) (0))
                x_check_swap_std_fds_with_one_closed.write
                  [xself xfrom_fds xto_fds]
                    memory > xrc
                    memory > xarg_names
                    memory > xfd_to_close
                    memory > xread_bytes
                    memory > xmsg
                    memory > xskipped_fd
                    memory > xcode
                    memory > xread_fds
                    memory > xsaved_fds
                    memory > xkwargs
                    seq > @
                      seq
                        xsaved_fds.write ((((xself).x_save_fds)) ((((xrange)) (3))))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xfrom_fd)) ((xfrom_fds)))
                              (((unsupported)) (((((xtempfile).xTemporaryFile)) 0)) ((xf)))
                                bogusForceDataize.write ((((xos).xdup2)) (((((xf).xfileno)) 0)) ((xfrom_fd)))
                            xfd_to_close.write (((((((xset)) ((((xrange)) (3)))).sub (((xset)) ((xfrom_fds)))).xpop)) 0)
                            bogusForceDataize.write ((((xos).xclose)) ((xfd_to_close)))
                            xarg_names.write (((unsupported)) ("stdin") ("stdout") ("stderr"))
                            xkwargs.write (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xfrom_fd)) ((xto_fd)))) ((((xzip)) ((xfrom_fds)) ((xto_fds)))))
                              (((unsupported)) ((((unsupported)) ((xkwargs)) ((((unsupported)) ((xarg_names)) ((xto_fd)))))) ((xfrom_fd)))
                            xcode.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                            xskipped_fd.write (((((((xset)) ((((xrange)) (3)))).sub (((xset)) ((xto_fds)))).xpop)) 0)
                            xrc.write ((((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)) ((((xstr)) ((xskipped_fd)))))) ((((unsupported)) ((xkwargs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (0))
                            (((unsupported)) ((((unsupported)) ((xfrom_fd)) ((xto_fd)))) ((((xzip)) ((xfrom_fds)) ((xto_fds)))))
                              seq
                                bogusForceDataize.write ((((xos).xlseek)) ((xfrom_fd)) (0) (((xos).xSEEK_SET)))
                                xread_bytes.write ((((xos).xread)) ((xfrom_fd)) (1024))
                                xread_fds.write (((xlist)) ((((xmap)) ((xint)) (((((xread_bytes).xdecode)) ("ascii"))))))
                                xmsg.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xto_fd)))) ((xread_fds)) ((xmsg)))
                          bogusForceDataize.write ((((xself).x_restore_fds)) ((xsaved_fds)))
                xtest_swap_std_fds_with_one_closed.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xfrom_fds)) (((((xitertools).xcombinations)) ((((xrange)) (3))) (2))))
                        (((unsupported)) ((xto_fds)) (((((xitertools).xpermutations)) ((((xrange)) (3))) (2))))
                          bogusForceDataize.write ((((xself).x_check_swap_std_fds_with_one_closed)) ((xfrom_fds)) ((xto_fds)))
                xtest_surrogates_error_message.write
                  [xself]
                    memory > xprepare
                    seq > @
                      seq
                        xprepare.write
                          []
                            seq > @
                              (((unsupported)) ((((xValueError)) ("surrogate:uDCff"))))
                        (((unsupported)) ((xValueError)) (((xsubprocess).xSubprocessError)))
                          (((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) ((xprepare)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((xsubprocess).x_posixsubprocess)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xerr)))) ("surrogate:uDCff"))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsNotNone)) (((xsubprocess).x_posixsubprocess)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xerr)))) ("Exception occurred in preexec_fn."))
                          bogusForceDataize.write ((((xself).xfail)) ("Expected ValueError or subprocess.SubprocessError"))
                xtest_undecodable_env.write
                  [xself]
                    memory > xstdout
                    memory > xencoded_value
                    memory > xscript
                    memory > xdecoded_value
                    memory > xenv
                    memory > xkey
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xkey)) ((xvalue)))) ((((unsupported)) ((((unsupported)) ("test") ("abcuDCFF"))) ((((unsupported)) ("testuDCFF") ("42"))))))
                        seq
                          xencoded_value.write ((((xvalue).xencode)) ("ascii") ("surrogateescape"))
                          xscript.write ("import os; print(ascii(os.getenv(%s)))".mod (((xrepr)) ((xkey))))
                          xenv.write (((((xos).xenviron).xcopy)) 0)
                          (((unsupported)) ((((unsupported)) ((xenv)) ((xkey)))) ((xvalue)))
                          (((unsupported)) ((((unsupported)) ((xenv)) ("LC_ALL"))) ("C"))
                          xdecoded_value.write (xvalue)
                          xstdout.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xscript)))) ((xenv)))
                          xstdout.write ((((xstdout).xrstrip)) ("nr"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xdecode)) ("ascii"))) ((((xascii)) ((xdecoded_value)))))
                          xkey.write ((((xkey).xencode)) ("ascii") ("surrogateescape"))
                          xscript.write ("import os; print(ascii(os.getenvb(%s)))".mod (((xrepr)) ((xkey))))
                          xenv.write (((((xos).xenviron).xcopy)) 0)
                          (((unsupported)) ((((unsupported)) ((xenv)) ((xkey)))) ((xencoded_value)))
                          xstdout.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((xscript)))) ((xenv)))
                          xstdout.write ((((xstdout).xrstrip)) ("nr"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xdecode)) ("ascii"))) ((((xascii)) ((xencoded_value)))))
                xtest_bytes_program.write
                  [xself]
                    memory > xabs_program
                    memory > xcmd
                    memory > xargs
                    memory > xenv
                    memory > xexitcode
                    memory > xprogram
                    memory > xenvb
                    seq > @
                      seq
                        xabs_program.write ((((xos).xfsencode)) ((((unsupported)) ((xZERO_RETURN_CMD)) (0))))
                        xargs.write (((xlist)) ((((unsupported)) ((xZERO_RETURN_CMD)) ((((unsupported)) (1))))))
                        (((unsupported)) ((((unsupported)) ((xpath)) ((xprogram)))) ((((((xos).xpath).xsplit)) ((((unsupported)) ((xZERO_RETURN_CMD)) (0))))))
                        xprogram.write ((((xos).xfsencode)) ((xprogram)))
                        xexitcode.write ((((xsubprocess).xcall)) (((((unsupported)) ((xabs_program))).add (xargs))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                        xcmd.write ("'%s' %s".mod (((unsupported)) ((xabs_program)) (((((((" ".xjoin)) ((xargs))).xencode)) ("utf-8")))))
                        xexitcode.write (((unsupported)) (((xsubprocess).xcall)) ((xcmd)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PATH"))) ((xpath)))
                        xexitcode.write (((unsupported)) (((xsubprocess).xcall)) (((((unsupported)) ((xprogram))).add (xargs))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                        xenvb.write (((((xos).xenvironb).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenvb)) ("PATH"))) (((((xos).xfsencode)) ((xpath)))))
                        xexitcode.write (((unsupported)) (((xsubprocess).xcall)) (((((unsupported)) ((xprogram))).add (xargs))) ((xenvb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_pipe_cloexec.write
                  [xself]
                    memory > xp2
                    memory > xunwanted_fds
                    memory > xsleeper
                    memory > xp1
                    memory > xfd_status
                    memory > xresult_fds
                    seq > @
                      seq
                        xsleeper.write (((unsupported)) (((xsupport).xfindfile)) ("input_reader.py") ("subprocessdata"))
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xp1.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xsleeper)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (FALSE))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xp1).xcommunicate)) (""))
                        xp2.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (FALSE))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xerror)))) (((((xp2).xcommunicate)) 0)))
                        xresult_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        xunwanted_fds.write (((xset)) ((((unsupported)) ((((((xp1).xstdin).xfileno)) 0)) ((((((xp1).xstdout).xfileno)) 0)) ((((((xp1).xstderr).xfileno)) 0)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xresult_fds).and (xunwanted_fds))) (("Expected no fds from %r to be open in child, found %r".mod (((unsupported)) ((xunwanted_fds)) (((xresult_fds).and (xunwanted_fds)))))))
                xtest_pipe_cloexec_real_tools.write
                  [xself]
                    memory > xdata
                    memory > xp2
                    memory > xqgrep
                    memory > xqcat
                    memory > xkill_p2
                    memory > xsubdata
                    memory > xkill_p1
                    memory > xp1
                    seq > @
                      seq
                        xqcat.write (((unsupported)) (((xsupport).xfindfile)) ("qcat.py") ("subprocessdata"))
                        xqgrep.write (((unsupported)) (((xsupport).xfindfile)) ("qgrep.py") ("subprocessdata"))
                        xsubdata.write "zxcvbn"
                        xdata.write (((xsubdata).mul 4).add "n")
                        xp1.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xqcat)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (FALSE))
                        xp2.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xqgrep)) ((xsubdata)))) (((xp1).xstdout)) (((xsubprocess).xPIPE)) (FALSE))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xp1).xwait)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xp2).xwait)))
                        xkill_p1.write
                          []
                            seq > @
                              (((unsupported)) ((xProcessLookupError)))
                                bogusForceDataize.write ((((xp1).xterminate)) 0)
                        xkill_p2.write
                          []
                            seq > @
                              (((unsupported)) ((xProcessLookupError)))
                                bogusForceDataize.write ((((xp2).xterminate)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xkill_p1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xkill_p2)))
                        bogusForceDataize.write (((((xp1).xstdin).xwrite)) ((xdata)))
                        bogusForceDataize.write (((((xp1).xstdin).xclose)) 0)
                        (((unsupported)) ((((unsupported)) ((xreadfiles)) ((xignored1)) ((xignored2)))) (((((xselect).xselect)) ((((unsupported)) (((xp2).xstdout)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (10))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xreadfiles)) ("The child hung"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xp2).xstdout).xread)) 0)) ((xdata)))
                        bogusForceDataize.write (((((xp1).xstdout).xclose)) 0)
                        bogusForceDataize.write (((((xp2).xstdout).xclose)) 0)
                xtest_close_fds.write
                  [xself]
                    memory > xremaining_fds
                    memory > xfd
                    memory > xp
                    memory > xfd_status
                    memory > xopen_fds
                    memory > xfds_to_keep
                    memory > xfds
                    seq > @
                      seq
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xfds.write ((((xos).xpipe)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (0))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (1))))
                        xopen_fds.write (((xset)) ((xfds)))
                        (((unsupported)) ((x_)) ((((xrange)) (9))))
                          seq
                            xfd.write ((((xos).xopen)) (((xos).xdevnull)) (((xos).xO_RDONLY)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                            bogusForceDataize.write ((((xopen_fds).xadd)) ((xfd)))
                        (((unsupported)) ((xfd)) ((xopen_fds)))
                          bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (FALSE))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                        xremaining_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xremaining_fds).and (xopen_fds))) ((xopen_fds)) ("Some fds were closed"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                        xremaining_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xremaining_fds).and (xopen_fds))) ("Some fds were left open"))
                        bogusForceDataize.write ((((xself).xassertIn)) (1) ((xremaining_fds)) ("Subprocess failed"))
                        xfds_to_keep.write (((xset)) ((((unsupported)) (((((xopen_fds).xpop)) 0)) ((x_)) ((((xrange)) (8))))))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (TRUE) ((xfds_to_keep)))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                        xremaining_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xremaining_fds).sub (xfds_to_keep)).and (xopen_fds))) ("Some fds not in pass_fds were left open"))
                        bogusForceDataize.write ((((xself).xassertIn)) (1) ((xremaining_fds)) ("Subprocess failed"))
                xtest_close_fds_when_max_fd_is_lowered.write
                  [xself]
                    memory > xremaining_fds
                    memory > xp
                    memory > xfd_status
                    memory > xoutput_lines
                    memory > xopened_fds
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((((xtextwrap).xdedent)) (((((unsupported)) 0).mod (xfd_status))))))) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xunused_stderr)))) (((((xp).xcommunicate)) 0)))
                        xoutput_lines.write ((((xoutput).xsplitlines)) 0)
                        (((unsupported)) (((xself).xassertEqual)) ((((xlen)) ((xoutput_lines)))) (2) (("expected exactly two lines of output:n%r".mod (xoutput))))
                        xopened_fds.write (((xset)) ((((xmap)) ((xint)) ((((((((((unsupported)) ((xoutput_lines)) (0)).xstrip)) 0).xsplit)) (","))))))
                        xremaining_fds.write (((xset)) ((((xmap)) ((xint)) ((((((((((unsupported)) ((xoutput_lines)) (1)).xstrip)) 0).xsplit)) (","))))))
                        (((unsupported)) (((xself).xassertFalse)) (((xremaining_fds).and (xopened_fds))) ("Some fds were left open."))
                xtest_pass_fds.write
                  [xself]
                    memory > xremaining_fds
                    memory > xto_be_closed
                    memory > xp
                    memory > xfd_status
                    memory > xopen_fds
                    memory > xfds
                    seq > @
                      (((unsupported)) 0)
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xopen_fds.write (((xset)) 0)
                        (((unsupported)) ((xx)) ((((xrange)) (5))))
                          seq
                            xfds.write ((((xos).xpipe)) 0)
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (0))))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (1))))
                            bogusForceDataize.write ((((xos).xset_inheritable)) ((((unsupported)) ((xfds)) (0))) (TRUE))
                            bogusForceDataize.write ((((xos).xset_inheritable)) ((((unsupported)) ((xfds)) (1))) (TRUE))
                            bogusForceDataize.write ((((xopen_fds).xupdate)) ((xfds)))
                        (((unsupported)) ((xfd)) ((xopen_fds)))
                          seq
                            xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (TRUE) ((((unsupported)) ((xfd)))))
                            (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                            xremaining_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                            xto_be_closed.write ((xopen_fds).sub (((unsupported)) ((xfd))))
                            bogusForceDataize.write ((((xself).xassertIn)) ((xfd)) ((xremaining_fds)) ("fd to be passed not passed"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xremaining_fds).and (xto_be_closed))) ("fd to be closed passed"))
                            (((unsupported)) (((((xself).xassertWarns)) ((xRuntimeWarning)))) ((xcontext)))
                              bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) (FALSE) ((((unsupported)) ((xfd)))))))
                            bogusForceDataize.write ((((xself).xassertIn)) ("overriding close_fds") ((((xstr)) (((xcontext).xwarning)))))
                xtest_pass_fds_inheritable.write
                  [xself]
                    memory > xscript
                    memory > xpass_fds
                    memory > xp
                    memory > xargs
                    memory > xfds
                    seq > @
                      seq
                        xscript.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        (((unsupported)) ((((unsupported)) ((xinheritable)) ((xnon_inheritable)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xinheritable)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xnon_inheritable)))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xinheritable)) (TRUE))
                        bogusForceDataize.write ((((xos).xset_inheritable)) ((xnon_inheritable)) (FALSE))
                        xpass_fds.write (((unsupported)) ((xinheritable)) ((xnon_inheritable)))
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ((xscript)))
                        (((unsupported)) ((xargs)) ((((xlist)) ((((xmap)) ((xstr)) ((xpass_fds)))))))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xargs)) (((xsubprocess).xPIPE)) (TRUE) ((xpass_fds)))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                        xfds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfds)) ((((xset)) ((xpass_fds)))) (("output=%a".mod (xoutput))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xinheritable)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xget_inheritable)) ((xnon_inheritable)))) (FALSE))
                xtest_pass_fds_redirected.write
                  [xself]
                    memory > xfd
                    memory > xpass_fds
                    memory > xoutput
                    memory > xfd_status
                    memory > xfds
                    seq > @
                      seq
                        unsupported
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xpass_fds.write (((unsupported)) 0)
                        (((unsupported)) ((x_)) ((((xrange)) (2))))
                          seq
                            xfd.write ((((xos).xopen)) (((xos).xdevnull)) (((xos).xO_RDWR)))
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                            bogusForceDataize.write ((((xpass_fds).xappend)) ((xfd)))
                        (((unsupported)) ((((unsupported)) ((xstdout_r)) ((xstdout_w)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xstdout_r)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xstdout_w)))
                        bogusForceDataize.write ((((xpass_fds).xinsert)) (1) ((xstdout_w)))
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) ((((unsupported)) ((xpass_fds)) (0))) ((((unsupported)) ((xpass_fds)) (1))) ((((unsupported)) ((xpass_fds)) (2))) (TRUE) ((xpass_fds)))))
                          xoutput.write ((((xos).xread)) ((xstdout_r)) (1024))
                        xfds.write (((unsupported)) ((((xint)) ((xnum)))) ((xnum)) (((((xoutput).xsplit)) (","))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfds)) (((((unsupported)) (0) (1) (2)).or (((xfrozenset)) ((xpass_fds))))) ("output={output!a}"))
                xtest_stdout_stdin_are_single_inout_fd.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) (((((xio).xopen)) (((xos).xdevnull)) ("r+"))) ((xinout)))
                        seq
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xinout)) ((xinout)))
                          bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_stdout_stderr_are_single_inout_fd.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) (((((xio).xopen)) (((xos).xdevnull)) ("r+"))) ((xinout)))
                        seq
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xinout)) ((xinout)))
                          bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_stderr_stdin_are_single_inout_fd.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) (((((xio).xopen)) (((xos).xdevnull)) ("r+"))) ((xinout)))
                        seq
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((xinout)) ((xinout)))
                          bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_wait_when_sigchild_ignored.write
                  [xself]
                    memory > xsigchild_ignore
                    memory > xp
                    seq > @
                      seq
                        xsigchild_ignore.write (((unsupported)) (((xsupport).xfindfile)) ("sigchild_ignore.py") ("subprocessdata"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xsigchild_ignore)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (0) (((xp).xreturncode)) (("sigchild_ignore.py exited non-zero with this error:n%s".mod ((((xstderr).xdecode)) ("utf-8")))))
                xtest_select_unbuffered.write
                  [xself]
                    memory > xp
                    memory > xf
                    memory > xselect
                    seq > @
                      seq
                        xselect.write ((((xsupport).ximport_module)) ("select"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write(\"apple\")"))) (((xsubprocess).xPIPE)) (0))
                        xf.write ((xp).xstdout)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xf).xclose)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) (4))) ("appl"))
                            bogusForceDataize.write ((((xself).xassertIn)) ((xf)) ((((unsupported)) (((((xselect).xselect)) ((((unsupported)) ((xf)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (0.0))) (0))))
                          bogusForceDataize.write ((((xp).xwait)) 0)
                xtest_zombie_fast_process_del.write
                  [xself]
                    memory > xident
                    memory > xpid
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, time;time.sleep(0.2)"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        xident.write (((xid)) ((xp)))
                        xpid.write ((xp).xpid)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          xp.write "None: is there a None literal in the EO language?"
                        (xmswindows).if
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((xsubprocess).x_active)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xident)) ((((unsupported)) ((((xid)) ((xo)))) ((xo)) (((xsubprocess).x_active)))))
                xtest_leak_fast_process_del_killed.write
                  [xself]
                    memory > xident
                    memory > xpid
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import time;time.sleep(3)"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstdout).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xp).xstderr).xclose)))
                        xident.write (((xid)) ((xp)))
                        xpid.write ((xp).xpid)
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          xp.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xos).xkill)) ((xpid)) (((xsignal).xSIGKILL)))
                        (xmswindows).if
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((xsubprocess).x_active)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xident)) ((((unsupported)) ((((xid)) ((xo)))) ((xo)) (((xsubprocess).x_active)))))
                        bogusForceDataize.write ((((xtime).xsleep)) (0.2))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((xNONEXISTING_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))) ((xproc)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xos).xwaitpid)) ((xpid)) (0))
                        (xmswindows).if
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((xsubprocess).x_active)))
                          bogusForceDataize.write ((((xself).xassertNotIn)) ((xident)) ((((unsupported)) ((((xid)) ((xo)))) ((xo)) (((xsubprocess).x_active)))))
                xtest_close_fds_after_preexec.write
                  [xself]
                    memory > xfd_status
                    memory > xp
                    memory > xfd
                    memory > xremaining_fds
                    seq > @
                      seq
                        xfd_status.write (((unsupported)) (((xsupport).xfindfile)) ("fd_status.py") ("subprocessdata"))
                        xfd.write ((((xos).xdup)) (1))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xfd)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ((xfd_status)))) (((xsubprocess).xPIPE)) (TRUE) ((((unsupported)) (((((xos).xdup2)) (1) ((xfd)))))))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xignored)))) (((((xp).xcommunicate)) 0)))
                        xremaining_fds.write (((xset)) ((((xmap)) ((xint)) (((((xoutput).xsplit)) (","))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((xfd)) ((xremaining_fds)))
                xtest_fork_exec.write
                  [xself]
                    memory > xfunc
                    memory > xgc_enabled
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xgc_enabled.write ((((xgc).xisenabled)) 0)
                        (((unsupported)) 0)
                          seq
                            xfunc.write (((unsupported)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xgc).xenable)) 0)
                            (((unsupported)) ((((unsupported)) ((xargs)) ((xexe_list)) ((xcwd)) ((xenv_list)))) ((((unsupported)) ((((unsupported)) (123) ((((unsupported)) ("exe"))) ("None: is there a None literal in the EO language?") ((((unsupported)) ("env"))))) ((((unsupported)) ((((unsupported)) ("arg"))) (123) ("None: is there a None literal in the EO language?") ((((unsupported)) ("env"))))) ((((unsupported)) ((((unsupported)) ("arg"))) ((((unsupported)) ("exe"))) (123) ((((unsupported)) ("env"))))) ((((unsupported)) ((((unsupported)) ("arg"))) ((((unsupported)) ("exe"))) ("None: is there a None literal in the EO language?") (123))))))
                              (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                                bogusForceDataize.write ((((x_posixsubprocess).xfork_exec)) ((xargs)) ((xexe_list)) (TRUE) ((((unsupported)) 0)) ((xcwd)) ((xenv_list)) ((1.neg)) ((1.neg)) ((1.neg)) ((1.neg)) (1) (2) (3) (4) (TRUE) (TRUE) ((xfunc)))
                          ((xgc_enabled).not).if
                            bogusForceDataize.write ((((xgc).xdisable)) 0)
                xtest_fork_exec_sorted_fd_sanity_check.write
                  [xself]
                    memory > xfirst
                    memory > x__init__
                    memory > xgc_enabled
                    memory > x__int__
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                          seq
                            xfirst.write TRUE
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)) (((xself).xvalue)) ((xvalue)))
                            x__int__.write
                              [xself]
                                seq > @
                                  seq
                                    ((xself).xfirst).if
                                      seq
                                        (((unsupported)) (((xself).xfirst)) (FALSE))
                                        (((unsupported)) (((xself).xvalue)))
                                    (((unsupported)) ((xValueError)))
                        xgc_enabled.write ((((xgc).xisenabled)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xgc).xenable)) 0)
                            (((unsupported)) ((xfds_to_keep)) ((((unsupported)) ((((unsupported)) ((1.neg)) (2) (3) (4) (5))) ((((unsupported)) ("str") (4))) ((((unsupported)) (18) (23) (42) ((((unsupported)) (2) (63))))) ((((unsupported)) (5) (4))) ((((unsupported)) (6) (7) (7) (8))) ((((unsupported)) ((((xBadInt)) (1))) ((((xBadInt)) (2))))))))
                              seq
                                (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((("fds_to_keep={}".xformat)) ((xfds_to_keep)))))) ((xc)))
                                  bogusForceDataize.write ((((x_posixsubprocess).xfork_exec)) ((((unsupported)) ("false"))) ((((unsupported)) ("false"))) (TRUE) ((xfds_to_keep)) ("None: is there a None literal in the EO language?") ((((unsupported)) ("env"))) ((1.neg)) ((1.neg)) ((1.neg)) ((1.neg)) (1) (2) (3) (4) (TRUE) (TRUE) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertIn)) ("fds_to_keep") ((((xstr)) (((xc).xexception)))))
                          ((xgc_enabled).not).if
                            bogusForceDataize.write ((((xgc).xdisable)) 0)
                xtest_communicate_BrokenPipeError_stdin_close.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        xproc.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)))
                        (((unsupported)) ((xproc)) ((((((xmock).xpatch).xobject)) ((xproc)) ("stdin"))) ((xmock_proc_stdin)))
                          seq
                            (((unsupported)) ((((xmock_proc_stdin).xclose).xside_effect)) ((xBrokenPipeError)))
                            bogusForceDataize.write ((((xproc).xcommunicate)) 0)
                            bogusForceDataize.write (((((xmock_proc_stdin).xclose).xassert_called_with)) 0)
                xtest_communicate_BrokenPipeError_stdin_write.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        xproc.write ((((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)))
                        (((unsupported)) ((xproc)) ((((((xmock).xpatch).xobject)) ((xproc)) ("stdin"))) ((xmock_proc_stdin)))
                          seq
                            (((unsupported)) ((((xmock_proc_stdin).xwrite).xside_effect)) ((xBrokenPipeError)))
                            bogusForceDataize.write ((((xproc).xcommunicate)) ("stuff"))
                            bogusForceDataize.write (((((xmock_proc_stdin).xwrite).xassert_called_once_with)) ("stuff"))
                            bogusForceDataize.write (((((xmock_proc_stdin).xclose).xassert_called_once_with)) 0)
                xtest_communicate_BrokenPipeError_stdin_flush.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-h"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xproc)) ((((((xmock).xpatch).xobject)) ((xproc)) ("stdin"))) ((xmock_proc_stdin)) ((((xopen)) (((xos).xdevnull)) ("wb"))) ((xdev_null)))
                          seq
                            (((unsupported)) ((((xmock_proc_stdin).xflush).xside_effect)) ((xBrokenPipeError)))
                            (((unsupported)) ((((xmock_proc_stdin).xfileno).xreturn_value)) (((((xdev_null).xfileno)) 0)))
                            bogusForceDataize.write ((((xproc).xcommunicate)) ("stuff"))
                            bogusForceDataize.write (((((xmock_proc_stdin).xflush).xassert_called_once_with)) 0)
                xtest_communicate_BrokenPipeError_stdin_close_with_timeout.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-h"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xproc)) ((((((xmock).xpatch).xobject)) ((xproc)) ("stdin"))) ((xmock_proc_stdin)))
                          seq
                            (((unsupported)) ((((xmock_proc_stdin).xclose).xside_effect)) ((xBrokenPipeError)))
                            (((unsupported)) (((xproc).xcommunicate)) (999))
                            bogusForceDataize.write (((((xmock_proc_stdin).xclose).xassert_called_once_with)) 0)
                xtest_stopped.write
                  [xself]
                    memory > xpid
                    memory > xreturncode
                    memory > xargs
                    memory > xstatus
                    memory > xproc
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xargs.write (xZERO_RETURN_CMD)
                        xproc.write ((((xsubprocess).xPopen)) ((xargs)))
                        xpid.write ((xproc).xpid)
                        (((unsupported)) ((((unsupported)) ((xpid)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstatus)) (0))
                        xstatus.write ((((x_testcapi).xW_STOPCODE)) (3))
                        (((unsupported)) ((((unsupported)) (((xmock).xpatch)) ("subprocess.os.waitpid") ((((unsupported)) ((xpid)) ((xstatus)))))))
                          xreturncode.write ((((xproc).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xreturncode)) ((3.neg)))
                xtest_communicate_repeated_call_after_stdout_close.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os, time; os.close(1), time.sleep(2)"))) (((xsubprocess).xPIPE)))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              (((unsupported)) (((xsubprocess).xTimeoutExpired)))
                                seq
                                  (((unsupported)) (((xproc).xcommunicate)) (0.1))
                                  (((unsupported)) 0)
            (((unsupported)) ((xBaseTestCase)) (((((xunittest).xskipUnless)) ((xmswindows)) ("Windows specific tests"))))
              seq
                xtest_startupinfo.write
                  [xself]
                    memory > xstartupinfo
                    memory > xSW_MAXIMIZE
                    memory > xSTARTF_USESHOWWINDOW
                    seq > @
                      seq
                        xSTARTF_USESHOWWINDOW.write 1
                        xSW_MAXIMIZE.write 3
                        xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                        (((unsupported)) (((xstartupinfo).xdwFlags)) ((xSTARTF_USESHOWWINDOW)))
                        (((unsupported)) (((xstartupinfo).xwShowWindow)) ((xSW_MAXIMIZE)))
                        (((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) ((xstartupinfo)))
                xtest_startupinfo_keywords.write
                  [xself]
                    memory > xSTARTF_USERSHOWWINDOW
                    memory > xstartupinfo
                    memory > xSW_MAXIMIZE
                    seq > @
                      seq
                        xSTARTF_USERSHOWWINDOW.write 1
                        xSW_MAXIMIZE.write 3
                        xstartupinfo.write (((unsupported)) (((xsubprocess).xSTARTUPINFO)) ((xSTARTF_USERSHOWWINDOW)) ((xSW_MAXIMIZE)))
                        (((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) ((xstartupinfo)))
                xtest_startupinfo_copy.write
                  [xself]
                    memory > xproc
                    memory > xstartupinfo
                    memory > xcmd
                    seq > @
                      seq
                        xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                        (((unsupported)) (((xstartupinfo).xdwFlags)) (((xsubprocess).xSTARTF_USESHOWWINDOW)))
                        (((unsupported)) (((xstartupinfo).xwShowWindow)) (((xsubprocess).xSW_HIDE)))
                        (((unsupported)) ((x_)) ((((xrange)) (2))))
                          seq
                            xcmd.write (xZERO_RETURN_CMD)
                            (((unsupported)) ((((xopen)) (((xos).xdevnull)) ("w"))) ((xnull)))
                              seq
                                xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((xcmd)) ((xnull)) (((xsubprocess).xSTDOUT)) ((xstartupinfo)))
                                (((unsupported)) ((xproc)))
                                  bogusForceDataize.write ((((xproc).xcommunicate)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xstartupinfo).xdwFlags)) (((xsubprocess).xSTARTF_USESHOWWINDOW)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((xstartupinfo).xhStdInput)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((xstartupinfo).xhStdOutput)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((xstartupinfo).xhStdError)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xstartupinfo).xwShowWindow)) (((xsubprocess).xSW_HIDE)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xstartupinfo).xlpAttributeList)) ((((unsupported)) ("handle_list") ((((unsupported)) 0)))))
                xtest_creationflags.write
                  [xself]
                    memory > xCREATE_NEW_CONSOLE
                    seq > @
                      seq
                        xCREATE_NEW_CONSOLE.write 16
                        bogusForceDataize.write (((((xsys).xstderr).xwrite)) ("    a DOS box should flash briefly ...n"))
                        (((unsupported)) (((xsubprocess).xcall)) ((((xsys).xexecutable).add " -c \"import time; time.sleep(0.25)\"")) ((xCREATE_NEW_CONSOLE)))
                xtest_invalid_args.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))) ((((unsupported)) (1))))
                xtest_issue31471.write
                  [xself]
                    memory > xkeys
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xdict)))
                          xkeys.write "None: is there a None literal in the EO language?"
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) ((((xBadEnv)) 0)))
                xtest_close_fds.write
                  [xself]
                    memory > xrc
                    seq > @
                      seq
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(47)"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (47))
                xtest_close_fds_with_stdio.write
                  [xself]
                    memory > xhandles
                    memory > xp
                    memory > xstartupinfo
                    memory > xhandle_list
                    memory > xfds
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xfds.write ((((xos).xpipe)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (0))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((((unsupported)) ((xfds)) (1))))
                        xhandles.write (((unsupported)) 0)
                        (((unsupported)) ((xfd)) ((xfds)))
                          seq
                            bogusForceDataize.write ((((xos).xset_inheritable)) ((xfd)) (TRUE))
                            bogusForceDataize.write ((((xhandles).xappend)) (((((xmsvcrt).xget_osfhandle)) ((xfd)))))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((("import msvcrt; print(msvcrt.open_osfhandle({}, 0))".xformat)) ((((unsupported)) ((xhandles)) (0))))))) (((xsubprocess).xPIPE)) (FALSE))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                        bogusForceDataize.write (((xint)) (((((xstdout).xstrip)) 0)))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((("import msvcrt; print(msvcrt.open_osfhandle({}, 0))".xformat)) ((((unsupported)) ((xhandles)) (0))))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)) ("OSError") ((xstderr)))
                        xhandle_list.write (((unsupported)) 0)
                        xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                        (((unsupported)) (((xstartupinfo).xlpAttributeList)) ((((unsupported)) ("handle_list") ((xhandle_list)))))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((("import msvcrt; print(msvcrt.open_osfhandle({}, 0))".xformat)) ((((unsupported)) ((xhandles)) (0))))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ((xstartupinfo)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)) ("OSError") ((xstderr)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) (".*overriding close_fds") ((xRuntimeWarning)))))))
                          seq
                            xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                            (((unsupported)) (((xstartupinfo).xlpAttributeList)) ((((unsupported)) ("handle_list") ((((unsupported)) ((xhandles)) ((((unsupported)) 0)))))))
                            xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (((("import msvcrt; print(msvcrt.open_osfhandle({}, 0))".xformat)) ((((unsupported)) ((xhandles)) (0))))))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ((xstartupinfo)) (FALSE))
                            (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xreturncode)) (0))
                xtest_empty_attribute_list.write
                  [xself]
                    memory > xstartupinfo
                    seq > @
                      seq
                        xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                        (((unsupported)) (((xstartupinfo).xlpAttributeList)) ((((unsupported)) 0)))
                        (((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) ((xstartupinfo)))
                xtest_empty_handle_list.write
                  [xself]
                    memory > xstartupinfo
                    seq > @
                      seq
                        xstartupinfo.write ((((xsubprocess).xSTARTUPINFO)) 0)
                        (((unsupported)) (((xstartupinfo).xlpAttributeList)) ((((unsupported)) ("handle_list") ((((unsupported)) 0)))))
                        (((unsupported)) (((xsubprocess).xcall)) ((xZERO_RETURN_CMD)) ((xstartupinfo)))
                xtest_shell_sequence.write
                  [xself]
                    memory > xnewenv
                    memory > xp
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("physalis"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) ("set"))) (1) (((xsubprocess).xPIPE)) ((xnewenv)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertIn)) ("physalis") ((((((xp).xstdout).xread)) 0)))
                xtest_shell_string.write
                  [xself]
                    memory > xnewenv
                    memory > xp
                    seq > @
                      seq
                        xnewenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("physalis"))
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ("set") (1) (((xsubprocess).xPIPE)) ((xnewenv)))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertIn)) ("physalis") ((((((xp).xstdout).xread)) 0)))
                xtest_shell_encodings.write
                  [xself]
                    memory > xnewenv
                    memory > xp
                    seq > @
                      (((unsupported)) ((xenc)) ((((unsupported)) ("ansi") ("oem"))))
                        seq
                          xnewenv.write (((((xos).xenviron).xcopy)) 0)
                          (((unsupported)) ((((unsupported)) ((xnewenv)) ("FRUIT"))) ("physalis"))
                          xp.write (((unsupported)) (((xsubprocess).xPopen)) ("set") (1) (((xsubprocess).xPIPE)) ((xnewenv)) ((xenc)))
                          (((unsupported)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertIn)) ("physalis") ((((((xp).xstdout).xread)) 0)) ((xenc)))
                xtest_call_string.write
                  [xself]
                    memory > xrc
                    seq > @
                      seq
                        xrc.write ((((xsubprocess).xcall)) ((((xsys).xexecutable).add " -c \"import sys; sys.exit(47)\"")))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (47))
                x_kill_process.write
                  [xself xmethod]
                    memory > xp
                    memory > xreturncode
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xp)))
                          seq
                            bogusForceDataize.write (((((xp).xstdout).xread)) (1))
                            bogusForceDataize.write (((((xgetattr)) ((xp)) ((xmethod)))) ((((unsupported)) ((xargs)))))
                            (((unsupported)) ((((unsupported)) ((x_)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                            xreturncode.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xreturncode)) (0))
                x_kill_dead_process.write
                  [xself xmethod]
                    memory > xp
                    memory > xrc
                    seq > @
                      (((unsupported)) 0)
                        xp.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)) ((xp)))
                          seq
                            bogusForceDataize.write (((((xp).xstdout).xread)) (1))
                            bogusForceDataize.write ((((xtime).xsleep)) (1))
                            bogusForceDataize.write (((((xgetattr)) ((xp)) ((xmethod)))) ((((unsupported)) ((xargs)))))
                            (((unsupported)) ((((unsupported)) ((x_)) ((xstderr)))) (((((xp).xcommunicate)) 0)))
                            bogusForceDataize.write ((((xself).xassertStderrEqual)) ((xstderr)) (""))
                            xrc.write ((((xp).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (42))
                xtest_send_signal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_process)) ("send_signal") (((xsignal).xSIGTERM)))
                xtest_kill.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_process)) ("kill"))
                xtest_terminate.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_process)) ("terminate"))
                xtest_send_signal_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("send_signal") (((xsignal).xSIGTERM)))
                xtest_kill_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("kill"))
                xtest_terminate_dead.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_kill_dead_process)) ("terminate"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) (((xsubprocess).xPopen)))
                  seq
                    unsupported
                    xinstances_created.write (((unsupported)) 0)
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)) 0)
                            bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                            bogusForceDataize.write (((((xself).xinstances_created).xappend)) ((xself)))
                x_test_keyboardinterrupt_no_kill.write
                  [xself xpopener xmock__communicate]
                    memory > xprocess
                    memory > xsigint_calls
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) (((xmock__communicate).xside_effect)) ((xKeyboardInterrupt)))
                        (((unsupported)) 0)
                          (((unsupported)) ((((((xmock).xpatch).xobject)) (((xsubprocess).xPopen)) ("_wait"))) ((xmock__wait)))
                            seq
                              (((unsupported)) (((xmock__wait).xside_effect)) ((xKeyboardInterrupt)))
                              (((unsupported)) ((((((xmock).xpatch).xobject)) ((xsubprocess)) ("Popen") (((xself).xRecordingPopen)))))
                                (((unsupported)) (((((xself).xassertRaises)) ((xKeyboardInterrupt)))))
                                  (((unsupported)) ((xpopener)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ((((unsupported)) 0)))) (((xsubprocess).xDEVNULL)) ((((unsupported)) ((xkwargs)))))
                              (((unsupported)) ((xcall)) ((((unsupported)) (((xmock__wait).xcall_args_list)) ((((unsupported)) (1))))))
                                bogusForceDataize.write ((((xself).xassertNotEqual)) ((xcall)) ((((unsupported)) (((xmock).xcall)) ("None: is there a None literal in the EO language?"))) ("no open-ended wait() after the first allowed: {mock__wait.call_args_list}"))
                              xsigint_calls.write (((unsupported)) 0)
                              (((unsupported)) ((xcall)) (((xmock__wait).xcall_args_list)))
                                ((xcall).eq (((unsupported)) (((xmock).xcall)) (0.25))).if
                                  bogusForceDataize.write ((((xsigint_calls).xappend)) ((xcall)))
                              (((unsupported)) (((xself).xassertLessEqual)) (((xmock__wait).xcall_count)) (2) (((xmock__wait).xcall_args_list)))
                              (((unsupported)) (((xself).xassertEqual)) ((((xlen)) ((xsigint_calls)))) (1) (((xmock__wait).xcall_args_list)))
                          seq
                            xprocess.write ((((((xself).xRecordingPopen).xinstances_created).xpop)) 0)
                            bogusForceDataize.write ((((xprocess).xkill)) 0)
                            bogusForceDataize.write ((((xprocess).xwait)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) ((((xself).xRecordingPopen).xinstances_created)))
                xtest_call_keyboardinterrupt_no_kill.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test_keyboardinterrupt_no_kill)) (((xsubprocess).xcall)) (6.282))
                xtest_run_keyboardinterrupt_no_kill.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test_keyboardinterrupt_no_kill)) (((xsubprocess).xrun)) (6.282))
                xtest_context_manager_keyboardinterrupt_no_kill.write
                  [xself]
                    memory > xpopen_via_context_manager
                    seq > @
                      seq
                        xpopen_via_context_manager.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) (((((xsubprocess).xPopen)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))) ((xunused_process)))
                                  (((unsupported)) ((xKeyboardInterrupt)))
                        bogusForceDataize.write ((((xself).x_test_keyboardinterrupt_no_kill)) ((xpopen_via_context_manager)))
                xtest_getoutput.write
                  [xself]
                    memory > xname
                    memory > xdir
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xgetoutput)) ("echo xyzzy"))) ("xyzzy"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsubprocess).xgetstatusoutput)) ("echo xyzzy"))) ((((unsupported)) (0) ("xyzzy"))))
                        xdir.write "None: is there a None literal in the EO language?"
                        (((unsupported)) 0)
                          seq
                            xdir.write ((((xtempfile).xmkdtemp)) 0)
                            xname.write (((((xos).xpath).xjoin)) ((xdir)) ("foo"))
                            (((unsupported)) ((((unsupported)) ((xstatus)) ((xoutput)))) (((((xsubprocess).xgetstatusoutput)) ((((xmswindows).if "type " "cat ").add (xname))))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xstatus)) (0))
                          (((unsupported)) ((xdir)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xos).xrmdir)) ((xdir)))
                xtest__all__.write
                  [xself]
                    memory > xintentionally_excluded
                    memory > xpossible_exports
                    memory > xexported
                    seq > @
                      seq
                        unsupported
                        xintentionally_excluded.write (((unsupported)) ("list2cmdline") ("Handle"))
                        xexported.write (((xset)) (((xsubprocess).x__all__)))
                        xpossible_exports.write (((xset)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xname)) ((xvalue)))) ((((((xsubprocess).x__dict__).xitems)) 0)))
                          seq
                            ((((xname).xstartswith)) ("_")).if
                              (((unsupported)) 0)
                            (((xisinstance)) ((xvalue)) ((((unsupported)) (((xtypes).xModuleType))))).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xpossible_exports).xadd)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexported)) (((xpossible_exports).sub (xintentionally_excluded))))
            (((unsupported)) ((xProcessTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselectors)) ("PollSelector"))) ("Test needs selectors.PollSelector"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xorig_selector)) (((xsubprocess).x_PopenSelector)))
                        (((unsupported)) (((xsubprocess).x_PopenSelector)) (((xselectors).xSelectSelector)))
                        bogusForceDataize.write ((((xProcessTestCase).xsetUp)) ((xself)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsubprocess).x_PopenSelector)) (((xself).xorig_selector)))
                        bogusForceDataize.write ((((xProcessTestCase).xtearDown)) ((xself)))
            (((unsupported)) ((xBaseTestCase)) (((((xunittest).xskipUnless)) ((xmswindows)) ("Windows-specific tests"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) ((((unsupported)) ((xf)) ((xfname)))) (((((xtempfile).xmkstemp)) (".py") ("te st"))))
                        (((unsupported)) (((xself).xfname)) (((((xfname).xlower)) 0)))
                        bogusForceDataize.write ((((xos).xwrite)) ((xf)) ("import sys;sys.stdout.write('%d %s' % (len(sys.argv), [a.lower () for a in sys.argv]))"))
                        bogusForceDataize.write ((((xos).xclose)) ((xf)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xremove)) (((xself).xfname)))
                        bogusForceDataize.write ((((((xsuper)) 0).xtearDown)) 0)
                xwith_spaces.write
                  [xself]
                    memory > xp
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xkwargs)) ("stdout"))) (((xsubprocess).xPIPE)))
                        xp.write ((((xsubprocess).xPopen)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) ((xp)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xp).xstdout).xread)) 0).xdecode)) ("mbcs"))) (("2 [%r, 'ab cd']".mod ((xself).xfname))))
                xtest_shell_string_with_spaces.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xwith_spaces)) (("\"%s\" \"%s\" \"%s\"".mod (((unsupported)) (((xsys).xexecutable)) (((xself).xfname)) ("ab cd")))) (1))
                xtest_shell_sequence_with_spaces.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xwith_spaces)) ((((unsupported)) (((xsys).xexecutable)) (((xself).xfname)) ("ab cd"))) (1))
                xtest_noshell_string_with_spaces.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwith_spaces)) (("\"%s\" \"%s\" \"%s\"".mod (((unsupported)) (((xsys).xexecutable)) (((xself).xfname)) ("ab cd")))))
                xtest_noshell_sequence_with_spaces.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xwith_spaces)) ((((unsupported)) (((xsys).xexecutable)) (((xself).xfname)) ("ab cd"))))
            (((unsupported)) ((xBaseTestCase)))
              seq
                xtest_pipe.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.stdout.write('stdout');sys.stderr.write('stderr');"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))) ((xproc)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xproc).xstdout).xread)) 0)) ("stdout"))
                            bogusForceDataize.write ((((xself).xassertStderrEqual)) ((((((xproc).xstderr).xread)) 0)) ("stderr"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xproc).xstdout).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xproc).xstderr).xclosed)))
                xtest_returncode.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(100)"))))) ((xproc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (100))
                xtest_communicate_stdin.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys;sys.exit(sys.stdin.read() == 'context')"))) (((xsubprocess).xPIPE)))) ((xproc)))
                        seq
                          bogusForceDataize.write ((((xproc).xcommunicate)) ("context"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (1))
                xtest_invalid_args.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xNONEXISTING_ERRORS)))))
                        (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((xNONEXISTING_CMD)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))) ((xproc)))
                xtest_broken_pipe_cleanup.write
                  [xself]
                    memory > xproc
                    seq > @
                      seq
                        unsupported
                        xproc.write (((unsupported)) (((xsubprocess).xPopen)) ((xZERO_RETURN_CMD)) (((xsubprocess).xPIPE)) ((((xsupport).xPIPE_MAX_SIZE).mul 2)))
                        xproc.write ((((xproc).x__enter__)) 0)
                        bogusForceDataize.write (((((xproc).xstdin).xwrite)) (("x".mul ((xsupport).xPIPE_MAX_SIZE))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xproc).xreturncode)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xproc).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xproc).xreturncode)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xproc).xstdin).xclosed)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)