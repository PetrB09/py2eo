memory > xBasicElementTest
memory > xRuntimeWarning
memory > xopen
memory > xcm
memory > ximport_fresh_module
memory > xtypes
memory > xevent
memory > xchildren
memory > xfilters
memory > xcopy
memory > xstdout
memory > xloader
memory > xElementPath
memory > xfilename
memory > xTreeBuilderSubclass
memory > xAttributeError
memory > xexpected_retval
memory > xC14NTest
memory > xFutureWarning
memory > xDummy
memory > xTreeBuilderTest
memory > xpickle
memory > xlist
memory > xElementIterTest
memory > xRuntimeError
memory > xRaisingBuilder
memory > xel
memory > xinput_file
memory > xXMLParserTest
memory > xMyParser
memory > xMyParserWithDoctype
memory > xelement
memory > xDoctypeParser
memory > xValueError
memory > xTag
memory > xoutput_files
memory > xElementSlicingTest
memory > xBadElementTest
memory > xstr
memory > xpe
memory > xio
memory > xids
memory > xwarnings
memory > xMyParserWithoutDoctype
memory > xproduct
memory > xoption
memory > xrange
memory > xvalue
memory > xZeroDivisionError
memory > xchar
memory > xDummyBuilder
memory > xextra
memory > xIndexError
memory > xElementInclude
memory > x_
memory > xStopIteration
memory > xKeyError
memory > xIOTest
memory > xXIncludeTest
memory > xproto
memory > xfindfile
memory > xBugsTest
memory > xtextwrap
memory > xoutput_file
memory > xElementTreeTypeTest
memory > xislice
memory > xtype
memory > xtext
memory > xf
memory > xrepr
memory > xText
memory > xElementTestCase
memory > xX
memory > xhasattr
memory > xParseErrorTest
memory > xchild1
memory > xx
memory > xEchoTarget
memory > xi
memory > xtag
memory > xElementTreeTest
memory > xoperator
memory > xsuper
memory > xsupport
memory > xsys
memory > xtuple
memory > xKeywordArgsTest
memory > xchunk_size
memory > xsorted
memory > xDeprecationWarning
memory > xlocale
memory > xaction
memory > xgc_collect
memory > xDummyIter
memory > xargs
memory > xOSError
memory > xitertools
memory > xTESTFN
memory > xLookupError
memory > xos
memory > xdir
memory > xencoding
memory > xBaseDummyBuilder
memory > xweakref
memory > xSyntaxError
memory > xUnicodeEncodeError
memory > xMyElement
memory > xiter
memory > xpartial
memory > xe
memory > xhtml
memory > xtarget
memory > xE
memory > xentity_file
memory > xattr
memory > xNoAcceleratorTest
memory > xModuleTest
memory > xelem
memory > xname
memory > xzip
memory > xunittest
memory > xy
memory > xenc
memory > xY
memory > xnext
memory > xXMLPullParserTest
memory > xconfig
memory > xobject
memory > xElementFindTest
memory > xMyTreeBuilder
memory > xoptions
memory > xop
memory > xBadElementPathTest
memory > xkwargs
memory > xNameError
memory > xfunctools
memory > xlen
memory > xdict
memory > xswap_attr
memory > xExceptionFile
memory > xfp
memory > xxml_declaration
memory > xBadElementPath
memory > xTypeError
memory > xBuilder
memory > xchild2
memory > xdumper
memory > x__name__
memory > xkey
memory > xMutatingElementPath
[] > test_xml_etree
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_bug_xmltoolkit55
        memory > xtest_path_cache
        memory > xtest_getslice_range
        memory > xtest_bug_1534630
        memory > xtest_xml_c14n2
        memory > xtest_read_from_stringio
        memory > xserialize
        memory > xtest_findall_wildcard
        memory > xtest_issue10777
        memory > xtest_find_simple
        memory > xsample3
        memory > xtest_bug_200708_newline
        memory > x__eq__
        memory > xtest_inherited_doctype
        memory > xtest_bug_xmltoolkit62
        memory > xtest_weakref
        memory > xtest_late_tail_mix_pi_comments
        memory > xcheckwarnings
        memory > xtest_getslice_negative_steps
        memory > xsummarize_list
        memory > xXINCLUDE
        memory > xtest_setslice_range
        memory > xpickleRoundTrip
        memory > xET
        memory > xtest_issue14818
        memory > xtest_ass_subscr
        memory > xENTITY_XML
        memory > xtest_pickle
        memory > xtest_tostring_default_namespace_original_no_namespace
        memory > xtest_parse_string
        memory > xtest_xinclude_failures
        memory > xtest___copy__
        memory > xtest_findall_with_error
        memory > xtest_treebuilder_start
        memory > xtest_write_to_text_file
        memory > xassert_events
        memory > xtest_bug_200709_element_comment
        memory > xtest_setslice_single_index
        memory > xtest_issue6233
        memory > xtest_bug_200709_default_namespace
        memory > xtest_xinclude
        memory > xpyET
        memory > xtest_xinclude_default
        memory > xtest_delslice
        memory > xtest_bug_200708_close
        memory > xtest_bad_find
        memory > xtest_all
        memory > xtest_custom_builder_only_end_ns
        memory > x_check_sample1_element
        memory > xtest_issue6565
        memory > xtest_entity
        memory > xtest_findtext_with_error
        memory > xxinclude_loader
        memory > xtest_find_with_error
        memory > xtest_events_comment
        memory > xtest_element_get_text
        memory > xtest_expat224_utf8_bug_file
        memory > xtest_error_code
        memory > xtest_treebuilder_elementfactory_none
        memory > xtest_tostringlist_default_namespace
        memory > xtest_subclass
        memory > xtest_iter_by_tag
        memory > xtest_ns_events
        memory > xtest___deepcopy__
        memory > xSAMPLE_SECTION
        memory > xtest_Element_subclass_trivial
        memory > xtest_unknown_event
        memory > xtest_subclass_doctype
        memory > xtest_namespace
        memory > xtest_main
        memory > xtest_remove_with_mutating
        memory > xassert_event_tuples
        memory > xsample2
        memory > xtest_lost_elem
        memory > xassert_event_tags
        memory > xSAMPLE_XML
        memory > xtest_simple_xml_with_ns
        memory > xtest_write_to_user_binary_writer_with_bom
        memory > xtest_subscr
        memory > xsample1
        memory > xtest_simple_roundtrip
        memory > xXINCLUDE_BAD
        memory > xcheck_expat224_utf8_bug
        memory > xtest_setslice_negative_steps
        memory > xtest_short_empty_elements
        memory > xUTF8_BUG_XMLFILE
        memory > xtest_findall_with_mutating
        memory > xtest_tostring_default_namespace
        memory > xtest_bug_xmltoolkit60
        memory > xtest_error_position
        memory > xtest_tostringlist_invariant
        memory > xtest_write_to_binary_file_with_bom
        memory > xSAMPLE_XML_NS_ELEMS
        memory > xtest_bug_200709_register_namespace
        memory > xsetUpClass
        memory > xtest_write_to_user_binary_writer
        memory > xtest_issue18347
        memory > xtest_pickle_issue18997
        memory > xtest_treebuilder_comment
        memory > xtest_dummy_builder
        memory > xtest_tostring_xml_declaration_cases
        memory > xsetUp
        memory > xtest_bug_xmltoolkit63
        memory > xtest_tostringlist_xml_declaration
        memory > xtest_findtext_with_mutating
        memory > xtest_subclass_comment_pi
        memory > xtest_extend_mutable_list2
        memory > xtest_cyclic_gc
        memory > x_check_sample_element
        memory > xtest_issue3151
        memory > xtest_lost_text
        memory > xtest_file_init
        memory > xtest_findall_different_nsmaps
        memory > xtest_doctype_warning
        memory > xtest_processinginstruction
        memory > xtest_Element_subclass_find
        memory > x_feed
        memory > xtest_doctype
        memory > xtest_find_through_ElementTree
        memory > xtest_getchildren
        memory > xtest_bug_xmltoolkit25
        memory > xtest_interface
        memory > xtest_element_factory
        memory > xserialize_check
        memory > xtest_read_from_user_binary_reader
        memory > xtest_feed_while_iterating
        memory > xtest_qname
        memory > x_elem_tags
        memory > xtest_events_pi
        memory > xSIMPLE_NS_XMLFILE
        memory > xEXTERNAL_ENTITY_XML
        memory > xtest_get_keyword_args
        memory > xtest_bug_200709_element_insert
        memory > xtest_tostring_default_namespace_different_namespace
        memory > xtest___init__
        memory > xtest_Element_subclass_constructor
        memory > xtest_html_empty_elems_serialization
        memory > xtest_treebuilder_pi
        memory > xtest_c14n_exclusion
        memory > xtest_basic
        memory > xtest_element_get_tail
        memory > xtest_copy
        memory > xtest_recursive_repr
        memory > xtest_bug_xmltoolkitX1
        memory > x_get_error
        memory > xtest_xpath_tokenizer
        memory > xtest_builder_lookup_errors
        memory > xtest_iterparse
        memory > xtest_late_tail
        memory > xSIMPLE_XMLFILE
        memory > xtest_getslice_single_index
        memory > xtest_getslice_steps
        memory > xtest_element_factory_pure_python_subclass
        memory > xc14n_roundtrip
        memory > xtest_dump_attribute_order
        memory > xtest_ns_events_start
        memory > xtest_extend_mutable_list
        memory > xmaxDiff
        memory > xtest_tostring_xml_declaration
        memory > xtest_setslice_steps
        memory > xtest_Element_subclass_new_method
        memory > xtest_encoding
        memory > xtest_read_from_user_text_reader
        memory > xtest_write_to_user_text_writer
        memory > xtest_find_with_namespace
        memory > xtest_parseliteral
        memory > xtest_lost_tail
        memory > x_make_elem_with_children
        memory > xtest_writestring
        memory > xtest_treebuilder_end
        memory > xtest_read_from_bytesio
        memory > xtest_set_attribute
        memory > xtest_istype
        memory > xtest_augmentation_type_errors
        memory > xtest_cdata
        memory > xtest_find_with_mutating
        memory > xtest_tostring_no_xml_declaration
        memory > xtest_bug_xmltoolkit39
        memory > xtest_makeelement
        memory > xtest_parsefile
        memory > xtest_write_to_filename
        memory > xtest_bug_xmltoolkit28
        memory > xSAMPLE_XML_NS
        memory > xtest_ns_events_start_end
        memory > xtest_bug_200709_iter_comment
        memory > xtest_tostring_xml_declaration_unicode_encoding
        memory > xtest_simpleops
        memory > xtest_attrib
        memory > xtest_bug_xmltoolkit54
        memory > xtest_getiterator
        memory > x_ilist
        memory > xtest_constructor_args
        memory > xtest_writefile
        memory > x_subelem_tags
        memory > xtest_correct_import_pyET
        memory > xnone_loader
        memory > xassertEqualElements
        memory > xtest_bug_xmltoolkit21
        memory > xtest_element_factory_subclass
        memory > xtest_custom_builder
        memory > xtest_corners
        memory > x_check_element_factory_class
        memory > xtest_write_to_binary_file
        memory > xtest_write_to_bytesio
        memory > xtest_methods
        memory > x_my_loader
        memory > xtearDown
        memory > xtest_events_sequence
        memory > xtest_sanity
        memory > xtest_doctype_public
        memory > xtest_findall
        memory > x__new__
        memory > xtest_events
        memory > xtest_expat224_utf8_bug
        memory > xtest_write_to_stringio
        memory > xtest_simple_xml
        memory > xtest_tree_write_attribute_order
        memory > xtest_find_xpath
        memory > xtest_test_find_with_ns
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            xpyET.write "None: is there a None literal in the EO language?"
            xET.write "None: is there a None literal in the EO language?"
            xSIMPLE_XMLFILE.write (((unsupported)) ((xfindfile)) ("simple.xml") ("xmltestdata"))
            (((unsupported)) ((xUnicodeEncodeError)))
              bogusForceDataize.write ((((xSIMPLE_XMLFILE).xencode)) ("utf-8"))
              (((unsupported)) (((((xunittest).xSkipTest)) ("filename is not encodable to utf8"))))
            xSIMPLE_NS_XMLFILE.write (((unsupported)) ((xfindfile)) ("simple-ns.xml") ("xmltestdata"))
            xUTF8_BUG_XMLFILE.write (((unsupported)) ((xfindfile)) ("expat224_utf8_bug.xml") ("xmltestdata"))
            xSAMPLE_XML.write (((unsupported)) 0)
            xSAMPLE_SECTION.write (((unsupported)) 0)
            xSAMPLE_XML_NS.write (((unsupported)) 0)
            xSAMPLE_XML_NS_ELEMS.write (((unsupported)) 0)
            xENTITY_XML.write (((unsupported)) 0)
            xEXTERNAL_ENTITY_XML.write (((unsupported)) 0)
            xcheckwarnings.write
              [xquiet]
                memory > xdecorator
                seq > @
                  (((unsupported)) 0)
                    xdecorator.write
                      [xtest]
                        memory > xnewtest
                        seq > @
                          seq
                            xnewtest.write
                              []
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) (((xsupport).xcheck_warnings)) ((((unsupported)) ((xfilters)))) ((xquiet)))))
                                      bogusForceDataize.write (((xtest)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                            bogusForceDataize.write ((((xfunctools).xupdate_wrapper)) ((xnewtest)) ((xtest)))
                            (((unsupported)) ((xnewtest)))
                    (((unsupported)) ((xdecorator)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_sanity.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                xtest_all.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        xnames.write (((unsupported)) ("xml.etree.ElementTree") ("_elementtree"))
                        (((unsupported)) (((xsupport).xcheck__all__)) ((xself)) ((xET)) ((xnames)) ((((unsupported)) ("HTML_EMPTY"))))
            xserialize.write
              [xelem xto_string xencoding]
                memory > xfile
                memory > xtree
                seq > @
                  (((unsupported)) 0)
                    ((xencoding).neq "unicode").if
                      xfile.write ((((xio).xBytesIO)) 0)
                      xfile.write ((((xio).xStringIO)) 0)
                    xtree.write ((((xET).xElementTree)) ((xelem)))
                    (((unsupported)) (((xtree).xwrite)) ((xfile)) ((xencoding)) ((((unsupported)) ((xoptions)))))
                    (xto_string).if
                      (((unsupported)) (((((xfile).xgetvalue)) 0)))
                      seq
                        bogusForceDataize.write ((((xfile).xseek)) (0))
                        (((unsupported)) ((xfile)))
            xsummarize_list.write
              [xseq]
                seq > @
                  (((unsupported)) ((((unsupported)) (((xelem).xtag)) ((xelem)) ((xseq)))))
            (((unsupported)) 0)
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xcls).xmodules)) ((((unsupported)) ((xpyET)) ((xET)))))
                xpickleRoundTrip.write
                  [xself xobj xname xdumper xloader xproto]
                    memory > xresult
                    memory > xtemp
                    memory > xsave_m
                    memory > xhuman
                    seq > @
                      seq
                        xsave_m.write (((unsupported)) (((xsys).xmodules)) ((xname)))
                        (((unsupported)) (((xpickle).xPicklingError)))
                          seq
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xdumper)))
                            xtemp.write ((((xpickle).xdumps)) ((xobj)) ((xproto)))
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xloader)))
                            xresult.write ((((xpickle).xloads)) ((xtemp)))
                          seq
                            xhuman.write (((xdict)) ((((unsupported)) ((((unsupported)) ((xET)) ("cET"))) ((((unsupported)) ((xpyET)) ("pyET"))))))
                            (((unsupported)) (((((xsupport).xTestFailed)) (("Failed to round-trip %r from %r to %r".mod (((unsupported)) ((xobj)) (((((xhuman).xget)) ((xdumper)) ((xdumper)))) (((((xhuman).xget)) ((xloader)) ((xloader))))))))) ((xpe)))
                          (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xname)))) ((xsave_m)))
                        (((unsupported)) ((xresult)))
                xassertEqualElements.write
                  [xself xalice xbob]
                    memory > xproperties
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xalice)) ((((unsupported)) (((xET).xElement)) (((xpyET).xElement)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xbob)) ((((unsupported)) (((xET).xElement)) (((xpyET).xElement)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlist)) ((xalice)))))) ((((xlen)) ((((xlist)) ((xbob)))))))
                        (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((xzip)) ((xalice)) ((xbob)))))
                          bogusForceDataize.write ((((xself).xassertEqualElements)) ((xx)) ((xy)))
                        xproperties.write ((((xoperator).xattrgetter)) ("tag") ("tail") ("text") ("attrib"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xproperties)) ((xalice)))) ((((xproperties)) ((xbob)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xserialize_check.write
                  [xself xelem xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ((xexpected)))
                xtest_interface.write
                  [xself]
                    memory > xelement
                    memory > xcheck_string
                    memory > xcheck_element
                    memory > xtree
                    memory > xcheck_mapping
                    memory > xcheck_method
                    memory > xcheck_iter
                    seq > @
                      seq
                        xcheck_string.write
                          [xstring]
                            memory > xnew_string
                            seq > @
                              seq
                                bogusForceDataize.write (((xlen)) ((xstring)))
                                (((unsupported)) ((xchar)) ((xstring)))
                                  (((unsupported)) (((xself).xassertEqual)) ((((xlen)) ((xchar)))) (1) (("expected one-character string, got %r".mod (xchar))))
                                xnew_string.write ((xstring).add "")
                                xnew_string.write ((xstring).add " ")
                                (((unsupported)) ((xstring)) ((((unsupported)) (0))))
                        xcheck_mapping.write
                          [xmapping]
                            memory > xkeys
                            memory > xitems
                            memory > xitem
                            seq > @
                              seq
                                bogusForceDataize.write (((xlen)) ((xmapping)))
                                xkeys.write ((((xmapping).xkeys)) 0)
                                xitems.write ((((xmapping).xitems)) 0)
                                (((unsupported)) ((xkey)) ((xkeys)))
                                  xitem.write (((unsupported)) ((xmapping)) ((xkey)))
                                (((unsupported)) ((((unsupported)) ((xmapping)) ("key"))) ("value"))
                                (((unsupported)) (((xself).xassertEqual)) ((((unsupported)) ((xmapping)) ("key"))) ("value") (("expected value string, got %r".mod (((unsupported)) ((xmapping)) ("key")))))
                        xcheck_element.write
                          [xelement]
                            memory > xdirelem
                            seq > @
                              seq
                                (((unsupported)) (((xself).xassertTrue)) (((((xET).xiselement)) ((xelement)))) ("not an element"))
                                xdirelem.write (((xdir)) ((xelement)))
                                (((unsupported)) ((xattr)) ((((unsupported)) ("tag") ("attrib") ("text") ("tail"))))
                                  seq
                                    (((unsupported)) (((xself).xassertTrue)) ((((xhasattr)) ((xelement)) ((xattr)))) (("no %s member".mod (xattr))))
                                    (((unsupported)) (((xself).xassertIn)) ((xattr)) ((xdirelem)) (("no %s visible by dir".mod (xattr))))
                                bogusForceDataize.write (((xcheck_string)) (((xelement).xtag)))
                                bogusForceDataize.write (((xcheck_mapping)) (((xelement).xattrib)))
                                (((unsupported)) (((xelement).xtext)) ("None: is there a None literal in the EO language?")).if
                                  bogusForceDataize.write (((xcheck_string)) (((xelement).xtext)))
                                (((unsupported)) (((xelement).xtail)) ("None: is there a None literal in the EO language?")).if
                                  bogusForceDataize.write (((xcheck_string)) (((xelement).xtail)))
                                (((unsupported)) ((xelem)) ((xelement)))
                                  bogusForceDataize.write (((xcheck_element)) ((xelem)))
                        xelement.write ((((xET).xElement)) ("tag"))
                        bogusForceDataize.write (((xcheck_element)) ((xelement)))
                        xtree.write ((((xET).xElementTree)) ((xelement)))
                        bogusForceDataize.write (((xcheck_element)) (((((xtree).xgetroot)) 0)))
                        xelement.write (((unsupported)) (((xET).xElement)) ("txe4g") ("value"))
                        xtree.write ((((xET).xElementTree)) ((xelement)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xelement)))) ("^<Element 'txe4g' at 0x.*>$"))
                        xelement.write (((unsupported)) (((xET).xElement)) ("tag") ("value"))
                        xcheck_method.write
                          [xmethod]
                            seq > @
                              (((unsupported)) (((xself).xassertTrue)) ((((xhasattr)) ((xmethod)) ("__call__"))) (("%s not callable".mod (xmethod))))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xappend)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xextend)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xinsert)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xremove)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xgetchildren)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xfind)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xiterfind)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xfindall)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xfindtext)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xclear)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xget)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xset)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xkeys)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xitems)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xiter)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xitertext)))
                        bogusForceDataize.write (((xcheck_method)) (((xelement).xgetiterator)))
                        xcheck_iter.write
                          [xit]
                            seq > @
                              bogusForceDataize.write (((xcheck_method)) (((xit).x__next__)))
                        bogusForceDataize.write (((xcheck_iter)) (((((xelement).xiterfind)) ("tag"))))
                        bogusForceDataize.write (((xcheck_iter)) (((((xelement).xiterfind)) ("*"))))
                        bogusForceDataize.write (((xcheck_iter)) (((((xtree).xiterfind)) ("tag"))))
                        bogusForceDataize.write (((xcheck_iter)) (((((xtree).xiterfind)) ("*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xET).xXML)) (((xET).xfromstring)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xET).xPI)) (((xET).xProcessingInstruction)))
                xtest_set_attribute.write
                  [xself]
                    memory > xelement
                    seq > @
                      seq
                        xelement.write ((((xET).xElement)) ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtag)) ("tag"))
                        (((unsupported)) (((xelement).xtag)) ("Tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtag)) ("Tag"))
                        (((unsupported)) (((xelement).xtag)) ("TAG"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtag)) ("TAG"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement).xtext)))
                        (((unsupported)) (((xelement).xtext)) ("Text"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtext)) ("Text"))
                        (((unsupported)) (((xelement).xtext)) ("TEXT"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtext)) ("TEXT"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement).xtail)))
                        (((unsupported)) (((xelement).xtail)) ("Tail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtail)) ("Tail"))
                        (((unsupported)) (((xelement).xtail)) ("TAIL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtail)) ("TAIL"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xattrib)) ((((unsupported)) 0)))
                        (((unsupported)) (((xelement).xattrib)) ((((unsupported)) ("a") ("b") ("c") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xattrib)) ((((unsupported)) ("a") ("b") ("c") ("d"))))
                        (((unsupported)) (((xelement).xattrib)) ((((unsupported)) ("A") ("B") ("C") ("D"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xattrib)) ((((unsupported)) ("A") ("B") ("C") ("D"))))
                xtest_simpleops.write
                  [xself]
                    memory > xe
                    memory > xelem
                    memory > xelement
                    memory > xsubelement
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag /></body>"))
                        xe.write ((((xET).xElement)) ("tag2"))
                        bogusForceDataize.write ((((xelem).xappend)) ((xe)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag /><tag2 /></body>"))
                        bogusForceDataize.write ((((xelem).xremove)) ((xe)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag /></body>"))
                        bogusForceDataize.write ((((xelem).xinsert)) (0) ((xe)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag2 /><tag /></body>"))
                        bogusForceDataize.write ((((xelem).xremove)) ((xe)))
                        bogusForceDataize.write ((((xelem).xextend)) ((((unsupported)) ((xe)))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag /><tag2 /></body>"))
                        bogusForceDataize.write ((((xelem).xremove)) ((xe)))
                        bogusForceDataize.write ((((xelem).xextend)) ((((xiter)) ((((unsupported)) ((xe)))))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<body><tag /><tag2 /></body>"))
                        bogusForceDataize.write ((((xelem).xremove)) ((xe)))
                        xelement.write (((unsupported)) (((xET).xElement)) ("tag") ("value"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\" />"))
                        xsubelement.write ((((xET).xElement)) ("subtag"))
                        bogusForceDataize.write ((((xelement).xappend)) ((xsubelement)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\"><subtag /></tag>"))
                        bogusForceDataize.write ((((xelement).xinsert)) (0) ((xsubelement)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\"><subtag /><subtag /></tag>"))
                        bogusForceDataize.write ((((xelement).xremove)) ((xsubelement)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\"><subtag /></tag>"))
                        bogusForceDataize.write ((((xelement).xremove)) ((xsubelement)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\" />"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xelement).xremove)) ((xsubelement)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("list.remove(x): x not in list"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\" />"))
                        (((unsupported)) ((((unsupported)) ((xelement)) ((((unsupported)) (0) (0))))) ((((unsupported)) ((xsubelement)) ((xsubelement)) ((xsubelement)))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((((unsupported)) ((xelement)) (1))) ("<subtag />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xelement)) ((((unsupported)) (1) (9))))) ((((unsupported)) ((((unsupported)) ((xelement)) (1))) ((((unsupported)) ((xelement)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xelement)) ((((unsupported)) (9) (2))))) ((((unsupported)) ((((unsupported)) ((xelement)) (0))) ((((unsupported)) ((xelement)) (2))))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xelement)) ((((unsupported)) (1) (2))))))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelement)) ("<tag key=\"value\"><subtag /><subtag /></tag>"))
                xtest_cdata.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xserialize_check)) (((((xET).xXML)) ("<tag>hello</tag>"))) ("<tag>hello</tag>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) (((((xET).xXML)) ("<tag>&#104;&#101;&#108;&#108;&#111;</tag>"))) ("<tag>hello</tag>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) (((((xET).xXML)) ("<tag><![CDATA[hello]]></tag>"))) ("<tag>hello</tag>"))
                xtest_file_init.write
                  [xself]
                    memory > xstringfile
                    memory > xtree
                    seq > @
                      seq
                        xstringfile.write ((((xio).xBytesIO)) (((((xSAMPLE_XML).xencode)) ("utf-8"))))
                        xtree.write (((unsupported)) (((xET).xElementTree)) ((xstringfile)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xfind)) ("tag")).xtag)) ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xfind)) ("section/tag")).xtag)) ("tag"))
                        xtree.write (((unsupported)) (((xET).xElementTree)) ((xSIMPLE_XMLFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xfind)) ("element")).xtag)) ("element"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xfind)) ("element/../empty-element")).xtag)) ("empty-element"))
                xtest_path_cache.write
                  [xself]
                    memory > xcache_len_10
                    memory > xelem
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xelem.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          bogusForceDataize.write (((((((xET).xElementTree)) ((xelem))).xfind)) (("./".add (((xstr)) ((xi))))))
                        xcache_len_10.write (((xlen)) (((xElementPath).x_cache)))
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          bogusForceDataize.write (((((((xET).xElementTree)) ((xelem))).xfind)) (("./".add (((xstr)) ((xi))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xElementPath).x_cache)))) ((xcache_len_10)))
                        (((unsupported)) ((xi)) ((((xrange)) (20))))
                          bogusForceDataize.write (((((((xET).xElementTree)) ((xelem))).xfind)) (("./".add (((xstr)) ((xi))))))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((((xlen)) (((xElementPath).x_cache)))) ((xcache_len_10)))
                        (((unsupported)) ((xi)) ((((xrange)) (600))))
                          bogusForceDataize.write (((((((xET).xElementTree)) ((xelem))).xfind)) (("./".add (((xstr)) ((xi))))))
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) (((xElementPath).x_cache)))) (500))
                xtest_copy.write
                  [xself]
                    memory > xe2
                    memory > xe3
                    memory > xe1
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xe1.write ((((xET).xXML)) ("<tag>hello<foo/></tag>"))
                        xe2.write ((((xcopy).xcopy)) ((xe1)))
                        xe3.write ((((xcopy).xdeepcopy)) ((xe1)))
                        (((unsupported)) ((((((xe1).xfind)) ("foo")).xtag)) ("bar"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xe1)) ("<tag>hello<bar /></tag>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xe2)) ("<tag>hello<bar /></tag>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xe3)) ("<tag>hello<foo /></tag>"))
                xtest_attrib.write
                  [xself]
                    memory > xattrib
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xElement)) ("tag"))
                        bogusForceDataize.write ((((xelem).xget)) ("key"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key") ("default"))) ("default"))
                        bogusForceDataize.write ((((xelem).xset)) ("key") ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key"))) ("value"))
                        xelem.write (((unsupported)) (((xET).xElement)) ("tag") ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xattrib)) ((((unsupported)) ("key") ("value"))))
                        xattrib.write (((unsupported)) ("key") ("value"))
                        xelem.write ((((xET).xElement)) ("tag") ((xattrib)))
                        bogusForceDataize.write ((((xattrib).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xattrib)) ((((unsupported)) ("key") ("value"))))
                        xattrib.write (((unsupported)) ("key") ("value"))
                        xelem.write ((((xET).xElement)) ("tag") ((((unsupported)) ((xattrib)))))
                        bogusForceDataize.write ((((xattrib).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xattrib)) ((((unsupported)) ("key") ("value"))))
                        xelem.write (((unsupported)) (((xET).xElement)) ("tag") ((((unsupported)) ("key") ("other"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xget)) ("key"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xattrib)) ((((unsupported)) ("key") ("value"))))
                        xelem.write ((((xET).xElement)) ("test"))
                        (((unsupported)) (((xelem).xtext)) ("aa"))
                        bogusForceDataize.write ((((xelem).xset)) ("testa") ("testval"))
                        bogusForceDataize.write ((((xelem).xset)) ("testb") ("test2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelem)))) ("<test testa=\"testval\" testb=\"test2\">aa</test>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xelem).xkeys)) 0)))) ((((unsupported)) ("testa") ("testb"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xelem).xitems)) 0)))) ((((unsupported)) ((((unsupported)) ("testa") ("testval"))) ((((unsupported)) ("testb") ("test2"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xelem).xattrib)) ("testb"))) ("test2"))
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("testb"))) ("test1"))
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("testc"))) ("test2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelem)))) ("<test testa=\"testval\" testb=\"test1\" testc=\"test2\">aa</test>"))
                        xelem.write ((((xET).xElement)) ("test"))
                        bogusForceDataize.write ((((xelem).xset)) ("a") ("r"))
                        bogusForceDataize.write ((((xelem).xset)) ("b") ("rn"))
                        bogusForceDataize.write ((((xelem).xset)) ("c") ("tnr "))
                        bogusForceDataize.write ((((xelem).xset)) ("d") ("nn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelem)))) ("<test a=\"&#10;\" b=\"&#10;\" c=\"&#09;&#10;&#10; \" d=\"&#10;&#10;\" />"))
                xtest_makeelement.write
                  [xself]
                    memory > xattrib
                    memory > xelem
                    memory > xsubelem
                    seq > @
                      seq
                        xelem.write ((((xET).xElement)) ("tag"))
                        xattrib.write (((unsupported)) ("key") ("value"))
                        xsubelem.write ((((xelem).xmakeelement)) ("subtag") ((xattrib)))
                        (((unsupported)) (((xself).xassertIsNot)) (((xsubelem).xattrib)) ((xattrib)) ("attrib aliasing"))
                        bogusForceDataize.write ((((xelem).xappend)) ((xsubelem)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag><subtag key=\"value\" /></tag>"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag />"))
                        bogusForceDataize.write ((((xelem).xappend)) ((xsubelem)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag><subtag key=\"value\" /></tag>"))
                        bogusForceDataize.write ((((xelem).xextend)) ((((unsupported)) ((xsubelem)) ((xsubelem)))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag><subtag key=\"value\" /><subtag key=\"value\" /><subtag key=\"value\" /></tag>"))
                        (((unsupported)) ((((unsupported)) ((xelem)) ((((unsupported)) 0)))) ((((unsupported)) ((xsubelem)))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag><subtag key=\"value\" /></tag>"))
                        (((unsupported)) ((((unsupported)) ((xelem)) ((((unsupported)) 0)))) ((((xtuple)) ((((unsupported)) ((xsubelem)))))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag><subtag key=\"value\" /></tag>"))
                xtest_parsefile.write
                  [xself]
                    memory > xdata
                    memory > xstream
                    memory > xtree
                    memory > xparser
                    memory > xtarget
                    seq > @
                      seq
                        xtree.write ((((xET).xparse)) ((xSIMPLE_XMLFILE)))
                        xstream.write ((((xio).xStringIO)) 0)
                        (((unsupported)) (((xtree).xwrite)) ((xstream)) ("unicode"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstream).xgetvalue)) 0)) ("<root>n   <element key=\"value\">text</element>n   <element>text</element>tailn   <empty-element />n</root>"))
                        xtree.write ((((xET).xparse)) ((xSIMPLE_NS_XMLFILE)))
                        xstream.write ((((xio).xStringIO)) 0)
                        (((unsupported)) (((xtree).xwrite)) ((xstream)) ("unicode"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstream).xgetvalue)) 0)) ("<ns0:root xmlns:ns0=\"namespace\">n   <ns0:element key=\"value\">text</ns0:element>n   <ns0:element>text</ns0:element>tailn   <ns0:empty-element />n</ns0:root>"))
                        (((unsupported)) ((((xopen)) ((xSIMPLE_XMLFILE)))) ((xf)))
                          xdata.write ((((xf).xread)) 0)
                        xparser.write ((((xET).xXMLParser)) 0)
                        bogusForceDataize.write ((((xself).xassertRegex)) (((xparser).xversion)) ("^Expat "))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xdata)))
                        bogusForceDataize.write ((((xself).xserialize_check)) (((((xparser).xclose)) 0)) ("<root>n   <element key=\"value\">text</element>n   <element>text</element>tailn   <empty-element />n</root>"))
                        xtarget.write ((((xET).xTreeBuilder)) 0)
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xtarget)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xdata)))
                        bogusForceDataize.write ((((xself).xserialize_check)) (((((xparser).xclose)) 0)) ("<root>n   <element key=\"value\">text</element>n   <element>text</element>tailn   <empty-element />n</root>"))
                xtest_parseliteral.write
                  [xself]
                    memory > xsequence
                    memory > xelement
                    seq > @
                      seq
                        xelement.write ((((xET).xXML)) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelement)) ("unicode"))) ("<html><body>text</body></html>"))
                        xelement.write ((((xET).xfromstring)) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelement)) ("unicode"))) ("<html><body>text</body></html>"))
                        xsequence.write (((unsupported)) ("<html><body>") ("text</bo") ("dy></html>"))
                        xelement.write ((((xET).xfromstringlist)) ((xsequence)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelement)))) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xET).xtostringlist)) ((xelement)))))) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelement)) ("ascii"))) ("<?xml version='1.0' encoding='ascii'?>n<html><body>text</body></html>"))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xids)))) (((((xET).xXMLID)) ("<html><body>text</body></html>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xids)))) (0))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xids)))) (((((xET).xXMLID)) ("<html><body id='body'>text</body></html>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xids)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xids)) ("body")).xtag)) ("body"))
                xtest_iterparse.write
                  [xself]
                    memory > xcontext
                    memory > xiterparse
                    memory > xit
                    memory > xres
                    memory > xsource
                    memory > xevents
                    seq > @
                      seq
                        xiterparse.write ((xET).xiterparse)
                        xcontext.write (((xiterparse)) ((xSIMPLE_XMLFILE)))
                        (((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((xnext)) ((xcontext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ("end") ("element"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("end") ("empty-element"))) ((((unsupported)) ("end") ("root"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcontext).xroot).xtag)) ("root"))
                        xcontext.write (((xiterparse)) ((xSIMPLE_NS_XMLFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}empty-element"))) ((((unsupported)) ("end") ("{namespace}root"))))))
                        xevents.write (((unsupported)) 0)
                        xcontext.write (((xiterparse)) ((xSIMPLE_XMLFILE)) ((xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) 0)))
                        xevents.write (((unsupported)) 0)
                        xcontext.write (((unsupported)) ((xiterparse)) ((xSIMPLE_XMLFILE)) ((xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) 0)))
                        xevents.write (((unsupported)) ("start") ("end"))
                        xcontext.write (((xiterparse)) ((xSIMPLE_XMLFILE)) ((xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) ((((unsupported)) ("start") ("root"))) ((((unsupported)) ("start") ("element"))) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("start") ("element"))) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("start") ("empty-element"))) ((((unsupported)) ("end") ("empty-element"))) ((((unsupported)) ("end") ("root"))))))
                        xevents.write (((unsupported)) ("start") ("end") ("start-ns") ("end-ns"))
                        xcontext.write (((xiterparse)) ((xSIMPLE_NS_XMLFILE)) ((xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((unsupported)) ((xaction)) ((((unsupported)) ("start") ("end")))).if (((unsupported)) ((xaction)) (((xelem).xtag))) (((unsupported)) ((xaction)) ((xelem))))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) ((((unsupported)) ("start-ns") ((((unsupported)) ("") ("namespace"))))) ((((unsupported)) ("start") ("{namespace}root"))) ((((unsupported)) ("start") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("start") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("start") ("{namespace}empty-element"))) ((((unsupported)) ("end") ("{namespace}empty-element"))) ((((unsupported)) ("end") ("{namespace}root"))) ((((unsupported)) ("end-ns") ("None: is there a None literal in the EO language?"))))))
                        xevents.write (((unsupported)) ("start-ns") ("end-ns"))
                        xcontext.write (((xiterparse)) (((((xio).xStringIO)) ("<root xmlns=''/>"))) ((xevents)))
                        xres.write (((unsupported)) ((xaction)) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xres)) ((((unsupported)) ("start-ns") ("end-ns"))))
                        xevents.write (((unsupported)) ("start") ("end") ("bogus"))
                        (((unsupported)) ((((xopen)) ((xSIMPLE_XMLFILE)) ("rb"))) ((xf)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                              bogusForceDataize.write (((xiterparse)) ((xf)) ((xevents)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("unknown event 'bogus'"))
                        (((unsupported)) (((((xsupport).xcheck_no_resource_warning)) ((xself)))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                              bogusForceDataize.write (((xiterparse)) ((xSIMPLE_XMLFILE)) ((xevents)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("unknown event 'bogus'"))
                            (((unsupported)) ((((unsupported)) ((xcm)))))
                        xsource.write ((((xio).xBytesIO)) ("<?xml version='1.0' encoding='iso-8859-1'?>n<body xmlns='http://&#233;ffbot.org/ns'n      xmlns:clxe9='http://effbot.org/ns'>text</body>n"))
                        xevents.write (((unsupported)) ("start-ns"))
                        xcontext.write (((xiterparse)) ((xsource)) ((xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xcontext)))) ((((unsupported)) ((((unsupported)) ("start-ns") ((((unsupported)) ("") ("http://xe9ffbot.org/ns"))))) ((((unsupported)) ("start-ns") ((((unsupported)) ("clxe9") ("http://effbot.org/ns"))))))))
                        xsource.write ((((xio).xStringIO)) ("<document />junk"))
                        xit.write (((xiterparse)) ((xsource)))
                        (((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((xnext)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ("end") ("document"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                          bogusForceDataize.write (((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("junk after document element: line 1, column 12"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)) ("<document />junk"))
                        xit.write (((xiterparse)) ((xTESTFN)))
                        (((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((xnext)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ("end") ("document"))))
                        (((unsupported)) (((((xsupport).xcheck_no_resource_warning)) ((xself)))))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                              bogusForceDataize.write (((xnext)) ((xit)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("junk after document element: line 1, column 12"))
                            (((unsupported)) ((((unsupported)) ((xcm)) ((xit)))))
                xtest_writefile.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) (((xelem).xtext)) ("text"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag>text</tag>"))
                        (((unsupported)) ((((((xET).xSubElement)) ((xelem)) ("subtag")).xtext)) ("subtext"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag>text<subtag>subtext</subtag></tag>"))
                        (((unsupported)) (((xelem).xtag)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("text<subtag>subtext</subtag>"))
                        bogusForceDataize.write ((((xelem).xinsert)) (0) (((((xET).xComment)) ("comment"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("text<!--comment--><subtag>subtext</subtag>"))
                        (((unsupported)) ((((unsupported)) ((xelem)) (0))) (((((xET).xPI)) ("key") ("value"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("text<?key value?><subtag>subtext</subtag>"))
                xtest_custom_builder.write
                  [xself]
                    memory > xdata
                    memory > xcomment
                    memory > xpi
                    memory > xstart_ns
                    memory > xstart
                    memory > xparser
                    memory > xend
                    memory > xend_ns
                    memory > xbuilder
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xSIMPLE_XMLFILE)))) ((xf)))
                          xdata.write ((((xf).xread)) 0)
                        (((unsupported)) ((xlist)))
                          seq
                            xstart.write
                              [xself xtag xattrib]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("start") ((xtag)))))
                            xend.write
                              [xself xtag]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("end") ((xtag)))))
                            xdata.write
                              [xself xtext]
                                seq > @
                        xbuilder.write (((xBuilder)) 0)
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xbuilder)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuilder)) ((((unsupported)) ((((unsupported)) ("start") ("root"))) ((((unsupported)) ("start") ("element"))) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("start") ("element"))) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("start") ("empty-element"))) ((((unsupported)) ("end") ("empty-element"))) ((((unsupported)) ("end") ("root"))))))
                        (((unsupported)) ((((xopen)) ((xSIMPLE_NS_XMLFILE)))) ((xf)))
                          xdata.write ((((xf).xread)) 0)
                        (((unsupported)) ((xlist)))
                          seq
                            xstart.write
                              [xself xtag xattrib]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("start") ((xtag)))))
                            xend.write
                              [xself xtag]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("end") ((xtag)))))
                            xdata.write
                              [xself xtext]
                                seq > @
                            xpi.write
                              [xself xtarget xdata]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("pi") ((xtarget)) ((xdata)))))
                            xcomment.write
                              [xself xdata]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("comment") ((xdata)))))
                            xstart_ns.write
                              [xself xprefix xuri]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("start-ns") ((xprefix)) ((xuri)))))
                            xend_ns.write
                              [xself xprefix]
                                seq > @
                                  bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("end-ns") ((xprefix)))))
                        xbuilder.write (((xBuilder)) 0)
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xbuilder)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuilder)) ((((unsupported)) ((((unsupported)) ("pi") ("pi") ("data"))) ((((unsupported)) ("comment") (" comment "))) ((((unsupported)) ("start-ns") ("") ("namespace"))) ((((unsupported)) ("start") ("{namespace}root"))) ((((unsupported)) ("start") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("start") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("start") ("{namespace}empty-element"))) ((((unsupported)) ("end") ("{namespace}empty-element"))) ((((unsupported)) ("end") ("{namespace}root"))) ((((unsupported)) ("end-ns") (""))))))
                xtest_custom_builder_only_end_ns.write
                  [xself]
                    memory > xbuilder
                    memory > xend_ns
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) ((xlist)))
                          xend_ns.write
                            [xself xprefix]
                              seq > @
                                bogusForceDataize.write ((((xself).xappend)) ((((unsupported)) ("end-ns") ((xprefix)))))
                        xbuilder.write (((xBuilder)) 0)
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xbuilder)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((((xtextwrap).xdedent)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbuilder)) ((((unsupported)) ((((unsupported)) ("end-ns") ("a"))) ((((unsupported)) ("end-ns") ("p"))) ((((unsupported)) ("end-ns") (""))))))
                xtest_getchildren.write
                  [xself]
                    memory > xchild1
                    memory > xchild2
                    memory > xelem
                    memory > xtree
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xopen)) ((xSIMPLE_XMLFILE)) ("rb"))) ((xf)))
                          xtree.write ((((xET).xparse)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xsummarize_list)) (((((xelem).xgetchildren)) 0)))) ((xelem)) ((((((((xtree).xgetroot)) 0).xiter)) 0)))) ((((unsupported)) ((((unsupported)) ("element") ("element") ("empty-element"))) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xsummarize_list)) (((((xelem).xgetchildren)) 0)))) ((xelem)) (((((xtree).xgetiterator)) 0)))) ((((unsupported)) ((((unsupported)) ("element") ("element") ("empty-element"))) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                        xelem.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xelem).xgetchildren)) 0)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((((unsupported)) ((xelem)) (2)).xgetchildren)) 0)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xelem)) ((((unsupported)) 0)))) (((((xelem).xgetchildren)) 0)))
                        xchild1.write (((unsupported)) ((xelem)) (0))
                        xchild2.write (((unsupported)) ((xelem)) (2))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xelem)) ((((unsupported)) (1) (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xelem).xgetchildren)) 0)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xchild1)) ((((unsupported)) ((xelem)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xchild2)) ((((unsupported)) ((xelem)) (1))))
                        (((unsupported)) ((((unsupported)) ((xelem)) ((((unsupported)) (0) (2))))) ((((unsupported)) ((xchild2)) ((xchild1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xchild2)) ((((unsupported)) ((xelem)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xchild1)) ((((unsupported)) ((xelem)) (1))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xchild1)) ((((unsupported)) ((xelem)) (0))))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xelem).xgetchildren)) 0)) ((((unsupported)) 0)))
                xtest_writestring.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelem)))) ("<html><body>text</body></html>"))
                        xelem.write ((((xET).xfromstring)) ("<html><body>text</body></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xelem)))) ("<html><body>text</body></html>"))
                xtest_tostring_default_namespace.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body xmlns=\"http://effbot.org/ns\"><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode"))) ("<ns0:body xmlns:ns0=\"http://effbot.org/ns\"><ns0:tag /></ns0:body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode") ("http://effbot.org/ns"))) ("<body xmlns=\"http://effbot.org/ns\"><tag /></body>"))
                xtest_tostring_default_namespace_different_namespace.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body xmlns=\"http://effbot.org/ns\"><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode") ("foobar"))) ("<ns1:body xmlns=\"foobar\" xmlns:ns1=\"http://effbot.org/ns\"><ns1:tag /></ns1:body>"))
                xtest_tostring_default_namespace_original_no_namespace.write
                  [xself]
                    memory > xelem
                    memory > xEXPECTED_MSG
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        xEXPECTED_MSG.write "^cannot use non-qualified names with default_namespace option$"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ((xEXPECTED_MSG)))))
                          (((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode") ("foobar"))
                xtest_tostring_no_xml_declaration.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode"))) ("<body><tag /></body>"))
                xtest_tostring_xml_declaration.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ("utf8") (TRUE))) ("<?xml version='1.0' encoding='utf8'?>n<body><tag /></body>"))
                xtest_tostring_xml_declaration_unicode_encoding.write
                  [xself]
                    memory > xelem
                    memory > xpreferredencoding
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        xpreferredencoding.write ((((xlocale).xgetpreferredencoding)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("<?xml version='1.0' encoding='{preferredencoding}'?>n<body><tag /></body>") ((((unsupported)) (((xET).xtostring)) ((xelem)) ("unicode") (TRUE))))
                xtest_tostring_xml_declaration_cases.write
                  [xself]
                    memory > xelem
                    memory > xTESTCASES
                    memory > xpreferredencoding
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag>ø</tag></body>"))
                        xpreferredencoding.write ((((xlocale).xgetpreferredencoding)) 0)
                        xTESTCASES.write (((unsupported)) ((((unsupported)) ("<body><tag>&#248;</tag></body>") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("<body><tag>xc3xb8</tag></body>") ("UTF-8") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("<body><tag>&#248;</tag></body>") ("US-ASCII") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("<?xml version='1.0' encoding='ISO-8859-1'?>n<body><tag>xf8</tag></body>") ("ISO-8859-1") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("<body><tag>ø</tag></body>") ("unicode") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("<body><tag>&#248;</tag></body>") ("None: is there a None literal in the EO language?") (FALSE))) ((((unsupported)) ("<body><tag>xc3xb8</tag></body>") ("UTF-8") (FALSE))) ((((unsupported)) ("<body><tag>&#248;</tag></body>") ("US-ASCII") (FALSE))) ((((unsupported)) ("<body><tag>xf8</tag></body>") ("ISO-8859-1") (FALSE))) ((((unsupported)) ("<body><tag>ø</tag></body>") ("unicode") (FALSE))) ((((unsupported)) ("<?xml version='1.0' encoding='us-ascii'?>n<body><tag>&#248;</tag></body>") ("None: is there a None literal in the EO language?") (TRUE))) ((((unsupported)) ("<?xml version='1.0' encoding='UTF-8'?>n<body><tag>xc3xb8</tag></body>") ("UTF-8") (TRUE))) ((((unsupported)) ("<?xml version='1.0' encoding='US-ASCII'?>n<body><tag>&#248;</tag></body>") ("US-ASCII") (TRUE))) ((((unsupported)) ("<?xml version='1.0' encoding='ISO-8859-1'?>n<body><tag>xf8</tag></body>") ("ISO-8859-1") (TRUE))) ((((unsupported)) ("<?xml version='1.0' encoding='{preferredencoding}'?>n<body><tag>ø</tag></body>") ("unicode") (TRUE))))
                        (((unsupported)) ((((unsupported)) ((xexpected_retval)) ((xencoding)) ((xxml_declaration)))) ((xTESTCASES)))
                          (((unsupported)) (((((xself).xsubTest)) ("encoding={encoding} xml_declaration={xml_declaration}"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xelem)) ((xencoding)) ((xxml_declaration)))) ((xexpected_retval)))
                xtest_tostringlist_default_namespace.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body xmlns=\"http://effbot.org/ns\"><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((unsupported)) (((xET).xtostringlist)) ((xelem)) ("unicode"))))) ("<ns0:body xmlns:ns0=\"http://effbot.org/ns\"><ns0:tag /></ns0:body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((unsupported)) (((xET).xtostringlist)) ((xelem)) ("unicode") ("http://effbot.org/ns"))))) ("<body xmlns=\"http://effbot.org/ns\"><tag /></body>"))
                xtest_tostringlist_xml_declaration.write
                  [xself]
                    memory > xelem
                    memory > xstringlist
                    memory > xpreferredencoding
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((unsupported)) (((xET).xtostringlist)) ((xelem)) ("unicode"))))) ("<body><tag /></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((unsupported)) (((xET).xtostringlist)) ((xelem)) (TRUE))))) ("<?xml version='1.0' encoding='us-ascii'?>n<body><tag /></body>"))
                        xpreferredencoding.write ((((xlocale).xgetpreferredencoding)) 0)
                        xstringlist.write (((unsupported)) (((xET).xtostringlist)) ((xelem)) ("unicode") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((xstringlist)))) ("<?xml version='1.0' encoding='{preferredencoding}'?>n<body><tag /></body>"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((unsupported)) ((xstringlist)) (0))) ("^<?xml version='1.0' encoding='.+'?>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("<body") (">") ("<tag") (" />") ("</body>"))) ((((unsupported)) ((xstringlist)) ((((unsupported)) (1))))))
                xtest_encoding.write
                  [xself]
                    memory > xsupported_encodings
                    memory > xbxml
                    memory > xxml
                    memory > xcheck
                    memory > xunsupported_ascii_incompatible_encodings
                    memory > xunsupported_ascii_compatible_encodings
                    seq > @
                      seq
                        xcheck.write
                          [xencoding xbody]
                            memory > xxml
                            seq > @
                              (((unsupported)) 0)
                                xxml.write ("<?xml version='1.0' encoding='%s'?><xml>%s</xml>".mod (((unsupported)) ((xencoding)) ((xbody))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xET).xXML)) (((((xxml).xencode)) ((xencoding))))).xtext)) ((xbody)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xET).xXML)) ((xxml))).xtext)) ((xbody)))
                        bogusForceDataize.write (((xcheck)) ("ascii") ("a"))
                        bogusForceDataize.write (((xcheck)) ("us-ascii") ("a"))
                        bogusForceDataize.write (((xcheck)) ("iso-8859-1") ("xbd"))
                        bogusForceDataize.write (((xcheck)) ("iso-8859-15") ("u20ac"))
                        bogusForceDataize.write (((xcheck)) ("cp437") ("u221a"))
                        bogusForceDataize.write (((xcheck)) ("mac-roman") ("u02da"))
                        xxml.write
                          [xencoding]
                            seq > @
                              (((unsupported)) (("<?xml version='1.0' encoding='%s'?><xml />".mod (xencoding))))
                        xbxml.write
                          [xencoding]
                            seq > @
                              (((unsupported)) (((((((xxml)) ((xencoding))).xencode)) ((xencoding)))))
                        xsupported_encodings.write (((unsupported)) ("ascii") ("utf-8") ("utf-8-sig") ("utf-16") ("utf-16be") ("utf-16le") ("iso8859-1") ("iso8859-2") ("iso8859-3") ("iso8859-4") ("iso8859-5") ("iso8859-6") ("iso8859-7") ("iso8859-8") ("iso8859-9") ("iso8859-10") ("iso8859-13") ("iso8859-14") ("iso8859-15") ("iso8859-16") ("cp437") ("cp720") ("cp737") ("cp775") ("cp850") ("cp852") ("cp855") ("cp856") ("cp857") ("cp858") ("cp860") ("cp861") ("cp862") ("cp863") ("cp865") ("cp866") ("cp869") ("cp874") ("cp1006") ("cp1125") ("cp1250") ("cp1251") ("cp1252") ("cp1253") ("cp1254") ("cp1255") ("cp1256") ("cp1257") ("cp1258") ("mac-cyrillic") ("mac-greek") ("mac-iceland") ("mac-latin2") ("mac-roman") ("mac-turkish") ("iso2022-jp") ("iso2022-jp-1") ("iso2022-jp-2") ("iso2022-jp-2004") ("iso2022-jp-3") ("iso2022-jp-ext") ("koi8-r") ("koi8-t") ("koi8-u") ("kz1048") ("hz") ("ptcp154"))
                        (((unsupported)) ((xencoding)) ((xsupported_encodings)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xXML)) ((((xbxml)) ((xencoding)))))))) ("<xml />"))
                        xunsupported_ascii_compatible_encodings.write (((unsupported)) ("big5") ("big5hkscs") ("cp932") ("cp949") ("cp950") ("euc-jp") ("euc-jis-2004") ("euc-jisx0213") ("euc-kr") ("gb2312") ("gbk") ("gb18030") ("iso2022-kr") ("johab") ("shift-jis") ("shift-jis-2004") ("shift-jisx0213") ("utf-7"))
                        (((unsupported)) ((xencoding)) ((xunsupported_ascii_compatible_encodings)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xET).xXML)) ((((xbxml)) ((xencoding)))))
                        xunsupported_ascii_incompatible_encodings.write (((unsupported)) ("cp037") ("cp424") ("cp500") ("cp864") ("cp875") ("cp1026") ("cp1140") ("utf_32") ("utf_32_be") ("utf_32_le"))
                        (((unsupported)) ((xencoding)) ((xunsupported_ascii_incompatible_encodings)))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xET).xParseError)) (((xET).xXML)) ((((xbxml)) ((xencoding)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xET).xXML)) (((((((xxml)) ("undefined")).xencode)) ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xLookupError)) (((xET).xXML)) (((((((xxml)) ("xxx")).xencode)) ("ascii"))))
                xtest_methods.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<html><link/><script>1 &lt; 2</script></html>"))
                        (((unsupported)) (((xe).xtail)) ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xe)))) ("<html><link /><script>1 &lt; 2</script></html>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("None: is there a None literal in the EO language?"))) ("<html><link /><script>1 &lt; 2</script></html>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("xml"))) ("<html><link /><script>1 &lt; 2</script></html>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("html"))) ("<html><link><script>1 < 2</script></html>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("text"))) ("1 < 2n"))
                xtest_issue18347.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<html><CamelCase>text</CamelCase></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xe)))) ("<html><CamelCase>text</CamelCase></html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("html"))) ("<html><CamelCase>text</CamelCase></html>"))
                xtest_entity.write
                  [xself]
                    memory > xparser
                    memory > xroot
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<document title='&#x8230;'>test</document>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("us-ascii"))) ("<document title=\"&#33328;\">test</document>"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xe)) ("<document title=\"u8230\">test</document>"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                          bogusForceDataize.write ((((xET).xXML)) ("<document>&entity;</document>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("undefined entity: line 1, column 10"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                          bogusForceDataize.write ((((xET).xXML)) ((xENTITY_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("undefined entity &entity;: line 5, column 10"))
                        xparser.write ((((xET).xXMLParser)) 0)
                        (((unsupported)) ((((unsupported)) (((xparser).xentity)) ("entity"))) ("text"))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xENTITY_XML)))
                        xroot.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xroot)) ("<document>text</document>"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                          bogusForceDataize.write ((((xET).xXML)) ((xEXTERNAL_ENTITY_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("undefined entity &entity;: line 4, column 10"))
                xtest_namespace.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<tag xml:lang='en' />"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<tag xml:lang=\"en\" />"))
                        xelem.write ((((xET).xXML)) ("<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' />"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" />"))
                        xelem.write ((((xET).xXML)) ("<html:html xmlns:html='http://www.w3.org/1999/xhtml' />"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<html:html xmlns:html=\"http://www.w3.org/1999/xhtml\" />"))
                        xelem.write ((((xET).xXML)) ("<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope' />"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:Envelope xmlns:ns0=\"http://schemas.xmlsoap.org/soap/envelope\" />"))
                        xelem.write ((((xET).xXML)) ((xSAMPLE_XML_NS)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:body xmlns:ns0=\"http://effbot.org/ns\">n  <ns0:tag>text</ns0:tag>n  <ns0:tag />n  <ns0:section>n    <ns0:tag>subtext</ns0:tag>n  </ns0:section>n</ns0:body>"))
                xtest_qname.write
                  [xself]
                    memory > xq2
                    memory > xelem
                    memory > xsubelem
                    memory > xq1
                    seq > @
                      seq
                        xelem.write ((((xET).xElement)) ("{uri}tag"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" />"))
                        xelem.write ((((xET).xElement)) (((((xET).xQName)) ("{uri}tag"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" />"))
                        xelem.write ((((xET).xElement)) (((((xET).xQName)) ("uri") ("tag"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" />"))
                        xelem.write ((((xET).xElement)) (((((xET).xQName)) ("uri") ("tag"))))
                        xsubelem.write ((((xET).xSubElement)) ((xelem)) (((((xET).xQName)) ("uri") ("tag1"))))
                        xsubelem.write ((((xET).xSubElement)) ((xelem)) (((((xET).xQName)) ("uri") ("tag2"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\"><ns0:tag1 /><ns0:tag2 /></ns0:tag>"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("{uri}key"))) ("value"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" ns0:key=\"value\" />"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) (((((xET).xQName)) ("{uri}key"))))) ("value"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" ns0:key=\"value\" />"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("{uri}key"))) ("{uri}value"))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" ns0:key=\"{uri}value\" />"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("{uri}key"))) (((((xET).xQName)) ("{uri}value"))))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" ns0:key=\"ns0:value\" />"))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        xsubelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) ((((unsupported)) (((xsubelem).xattrib)) ("{uri1}key"))) (((((xET).xQName)) ("{uri2}value"))))
                        bogusForceDataize.write ((((xelem).xappend)) ((xsubelem)))
                        bogusForceDataize.write ((((xelem).xappend)) ((xsubelem)))
                        bogusForceDataize.write ((((xself).xserialize_check)) ((xelem)) ("<ns0:tag xmlns:ns0=\"uri\" xmlns:ns1=\"uri1\" xmlns:ns2=\"uri2\"><tag ns1:key=\"ns2:value\" /><tag ns1:key=\"ns2:value\" /></ns0:tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xET).xQName)) ("ns") ("tag"))))) ("{ns}tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xET).xQName)) ("{ns}tag"))))) ("{ns}tag"))
                        xq1.write ((((xET).xQName)) ("ns") ("tag"))
                        xq2.write ((((xET).xQName)) ("ns") ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq1)) ((xq2)))
                        xq2.write ((((xET).xQName)) ("ns") ("other-tag"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xq1)) ((xq2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xq1)) ("ns:tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xq1)) ("{ns}tag"))
                xtest_doctype_public.write
                  [xself]
                    memory > xelem
                    seq > @
                      xelem.write ((((xET).xXML)) ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html>text</html>"))
                xtest_xpath_tokenizer.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcheck.write
                          [xp xexpected xnamespaces]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xop).or (xtag))) ((((unsupported)) ((xop)) ((xtag)))) (((((xElementPath).xxpath_tokenizer)) ((xp)) ((xnamespaces)))))) ((xexpected)))
                        bogusForceDataize.write (((xcheck)) ("*") ((((unsupported)) ("*"))))
                        bogusForceDataize.write (((xcheck)) ("text()") ((((unsupported)) ("text") ("()"))))
                        bogusForceDataize.write (((xcheck)) ("@name") ((((unsupported)) ("@") ("name"))))
                        bogusForceDataize.write (((xcheck)) ("@*") ((((unsupported)) ("@") ("*"))))
                        bogusForceDataize.write (((xcheck)) ("para[1]") ((((unsupported)) ("para") ("[") ("1") ("]"))))
                        bogusForceDataize.write (((xcheck)) ("para[last()]") ((((unsupported)) ("para") ("[") ("last") ("()") ("]"))))
                        bogusForceDataize.write (((xcheck)) ("*/para") ((((unsupported)) ("*") ("/") ("para"))))
                        bogusForceDataize.write (((xcheck)) ("/doc/chapter[5]/section[2]") ((((unsupported)) ("/") ("doc") ("/") ("chapter") ("[") ("5") ("]") ("/") ("section") ("[") ("2") ("]"))))
                        bogusForceDataize.write (((xcheck)) ("chapter//para") ((((unsupported)) ("chapter") ("//") ("para"))))
                        bogusForceDataize.write (((xcheck)) ("//para") ((((unsupported)) ("//") ("para"))))
                        bogusForceDataize.write (((xcheck)) ("//olist/item") ((((unsupported)) ("//") ("olist") ("/") ("item"))))
                        bogusForceDataize.write (((xcheck)) (".") ((((unsupported)) ("."))))
                        bogusForceDataize.write (((xcheck)) (".//para") ((((unsupported)) (".") ("//") ("para"))))
                        bogusForceDataize.write (((xcheck)) ("..") ((((unsupported)) (".."))))
                        bogusForceDataize.write (((xcheck)) ("../@lang") ((((unsupported)) ("..") ("/") ("@") ("lang"))))
                        bogusForceDataize.write (((xcheck)) ("chapter[title]") ((((unsupported)) ("chapter") ("[") ("title") ("]"))))
                        bogusForceDataize.write (((xcheck)) ("employee[@secretary and @assistant]") ((((unsupported)) ("employee") ("[") ("@") ("secretary") ("") ("and") ("") ("@") ("assistant") ("]"))))
                        bogusForceDataize.write (((xcheck)) ("@{ns}attr") ((((unsupported)) ("@") ("{ns}attr"))))
                        bogusForceDataize.write (((xcheck)) ("{http://spam}egg") ((((unsupported)) ("{http://spam}egg"))))
                        bogusForceDataize.write (((xcheck)) ("./spam.egg") ((((unsupported)) (".") ("/") ("spam.egg"))))
                        bogusForceDataize.write (((xcheck)) (".//{http://spam}egg") ((((unsupported)) (".") ("//") ("{http://spam}egg"))))
                        bogusForceDataize.write (((xcheck)) ("{ns}*") ((((unsupported)) ("{ns}*"))))
                        bogusForceDataize.write (((xcheck)) ("{}*") ((((unsupported)) ("{}*"))))
                        bogusForceDataize.write (((xcheck)) ("{*}tag") ((((unsupported)) ("{*}tag"))))
                        bogusForceDataize.write (((xcheck)) ("{*}*") ((((unsupported)) ("{*}*"))))
                        bogusForceDataize.write (((xcheck)) (".//{*}tag") ((((unsupported)) (".") ("//") ("{*}tag"))))
                        bogusForceDataize.write (((xcheck)) ("./xsd:type") ((((unsupported)) (".") ("/") ("{http://www.w3.org/2001/XMLSchema}type"))) ((((unsupported)) ("xsd") ("http://www.w3.org/2001/XMLSchema"))))
                        bogusForceDataize.write (((xcheck)) ("type") ((((unsupported)) ("{http://www.w3.org/2001/XMLSchema}type"))) ((((unsupported)) ("") ("http://www.w3.org/2001/XMLSchema"))))
                        bogusForceDataize.write (((xcheck)) ("@xsd:type") ((((unsupported)) ("@") ("{http://www.w3.org/2001/XMLSchema}type"))) ((((unsupported)) ("xsd") ("http://www.w3.org/2001/XMLSchema"))))
                        bogusForceDataize.write (((xcheck)) ("@type") ((((unsupported)) ("@") ("type"))) ((((unsupported)) ("") ("http://www.w3.org/2001/XMLSchema"))))
                        bogusForceDataize.write (((xcheck)) ("@{*}type") ((((unsupported)) ("@") ("{*}type"))) ((((unsupported)) ("") ("http://www.w3.org/2001/XMLSchema"))))
                        bogusForceDataize.write (((xcheck)) ("@{ns}attr") ((((unsupported)) ("@") ("{ns}attr"))) ((((unsupported)) ("") ("http://www.w3.org/2001/XMLSchema") ("ns") ("http://www.w3.org/2001/XMLSchema"))))
                xtest_processinginstruction.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xProcessingInstruction)) ("test") ("instruction"))))) ("<?test instruction?>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xPI)) ("test") ("instruction"))))) ("<?test instruction?>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xPI)) ("test") ("<testing&>"))))) ("<?test <testing&>?>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xPI)) ("test") ("<testing&>xe3"))) ("latin-1"))) ("<?xml version='1.0' encoding='latin-1'?>n<?test <testing&>xe3?>"))
                xtest_html_empty_elems_serialization.write
                  [xself]
                    memory > xexpected
                    memory > xserialized
                    seq > @
                      (((unsupported)) ((xelement)) ((((unsupported)) ("AREA") ("BASE") ("BASEFONT") ("BR") ("COL") ("FRAME") ("HR") ("IMG") ("INPUT") ("ISINDEX") ("LINK") ("META") ("PARAM"))))
                        (((unsupported)) ((xelem)) ((((unsupported)) ((xelement)) (((((xelement).xlower)) 0)))))
                          seq
                            xexpected.write ("<%s>".mod (xelem))
                            xserialized.write (((unsupported)) ((xserialize)) (((((xET).xXML)) (("<%s />".mod (xelem))))) ("html"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xserialized)) ((xexpected)))
                            xserialized.write (((unsupported)) ((xserialize)) (((((xET).xXML)) (("<%s></%s>".mod (((unsupported)) ((xelem)) ((xelem))))))) ("html"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xserialized)) ((xexpected)))
                xtest_dump_attribute_order.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)) (((xET).xElement)) ("cirriculum") ("public") ("example"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          bogusForceDataize.write ((((xET).xdump)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xgetvalue)) 0)) ("<cirriculum status=\"public\" company=\"example\" />n"))
                xtest_tree_write_attribute_order.write
                  [xself]
                    memory > xroot
                    seq > @
                      seq
                        xroot.write (((unsupported)) (((xET).xElement)) ("cirriculum") ("public") ("example"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xroot)))) ("<cirriculum status=\"public\" company=\"example\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xroot)) ("html"))) ("<cirriculum status=\"public\" company=\"example\"></cirriculum>"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_feed.write
                  [xself xparser xdata xchunk_size]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xchunk_size)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xparser).xfeed)) ((xdata)))
                          (((unsupported)) ((xi)) ((((xrange)) (0) ((((xlen)) ((xdata)))) ((xchunk_size)))))
                            bogusForceDataize.write ((((xparser).xfeed)) ((((unsupported)) ((xdata)) ((((unsupported)) ((xi)) (((xi).add (xchunk_size))))))))
                xassert_events.write
                  [xself xparser xexpected xmax_events]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xevent)) ((((unsupported)) (((xelem).xtag)) (((xelem).xtext)))))) ((((unsupported)) ((xevent)) ((xelem)))) ((((xislice)) (((((xparser).xread_events)) 0)) ((xmax_events)))))) ((xexpected)))
                xassert_event_tuples.write
                  [xself xparser xexpected xmax_events]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) (((((xparser).xread_events)) 0)) ((xmax_events)))))) ((xexpected)))
                xassert_event_tags.write
                  [xself xparser xexpected xmax_events]
                    memory > xevents
                    seq > @
                      (((unsupported)) 0)
                        xevents.write (((xislice)) (((((xparser).xread_events)) 0)) ((xmax_events)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ((xaction)) ((xelem)))) ((xevents)))) ((xexpected)))
                xtest_simple_xml.write
                  [xself]
                    memory > xparser
                    seq > @
                      (((unsupported)) ((xchunk_size)) ((((unsupported)) ("None: is there a None literal in the EO language?") (1) (5))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xchunk_size)))))
                          seq
                            xparser.write ((((xET).xXMLPullParser)) 0)
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- comment -->n") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root>n  <element key='value'>text</element") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) (">n") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("element"))))))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element>text</element>tailn") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<empty-element/>n") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("element"))) ((((unsupported)) ("end") ("empty-element"))))))
                            bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>n") ((xchunk_size)))
                            bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("root"))))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                xtest_feed_while_iterating.write
                  [xself]
                    memory > xparser
                    memory > xit
                    seq > @
                      seq
                        xparser.write ((((xET).xXMLPullParser)) 0)
                        xit.write ((((xparser).xread_events)) 0)
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root>n  <element key='value'>text</element>n"))
                        (((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((xnext)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ("end") ("element"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>n"))
                        (((unsupported)) ((((unsupported)) ((xaction)) ((xelem)))) ((((xnext)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaction)) (((xelem).xtag)))) ((((unsupported)) ("end") ("root"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStopIteration)))))
                          bogusForceDataize.write (((xnext)) ((xit)))
                xtest_simple_xml_with_ns.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xET).xXMLPullParser)) 0)
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- comment -->n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root xmlns='namespace'>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element key='value'>text</element"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) (">n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("{namespace}element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element>text</element>tailn"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<empty-element/>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("{namespace}element"))) ((((unsupported)) ("end") ("{namespace}empty-element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("{namespace}root"))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                xtest_ns_events.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start-ns") ("end-ns"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- comment -->n"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root xmlns='namespace'>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xparser).xread_events)) 0)))) ((((unsupported)) ((((unsupported)) ("start-ns") ((((unsupported)) ("") ("namespace"))))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element key='value'>text</element"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) (">n"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element>text</element>tailn"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<empty-element/>n"))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xparser).xread_events)) 0)))) ((((unsupported)) ((((unsupported)) ("end-ns") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                xtest_ns_events_start.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start-ns") ("start") ("end"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<tag xmlns='abc' xmlns:p='xyz'>n"))
                        (((unsupported)) (((xself).xassert_event_tuples)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start-ns") ((((unsupported)) ("") ("abc"))))) ((((unsupported)) ("start-ns") ((((unsupported)) ("p") ("xyz"))))))) (2))
                        (((unsupported)) (((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{abc}tag"))))) (1))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<child />n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{abc}child"))) ((((unsupported)) ("end") ("{abc}child"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</tag>n"))
                        bogusForceDataize.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("{abc}tag"))))))
                xtest_ns_events_start_end.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start-ns") ("start") ("end") ("end-ns"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<tag xmlns='abc' xmlns:p='xyz'>n"))
                        (((unsupported)) (((xself).xassert_event_tuples)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start-ns") ((((unsupported)) ("") ("abc"))))) ((((unsupported)) ("start-ns") ((((unsupported)) ("p") ("xyz"))))))) (2))
                        (((unsupported)) (((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{abc}tag"))))) (1))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<child />n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{abc}child"))) ((((unsupported)) ("end") ("{abc}child"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</tag>n"))
                        bogusForceDataize.write ((((xparser).xclose)) 0)
                        (((unsupported)) (((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("{abc}tag"))))) (1))
                        bogusForceDataize.write ((((xself).xassert_event_tuples)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end-ns") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("end-ns") ("None: is there a None literal in the EO language?"))))))
                xtest_events.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root/>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start") ("end"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- text here -->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) 0)))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start") ("end"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("root"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element key='value'>text</element"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) (">n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element xmlns='foo'>text<empty-element/></element>tailn"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{foo}element"))) ((((unsupported)) ("start") ("{foo}empty-element"))) ((((unsupported)) ("end") ("{foo}empty-element"))) ((((unsupported)) ("end") ("{foo}element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("root"))))))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- comment -->n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("root"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element key='value'>text</element"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) (">n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<element xmlns='foo'>text<empty-element/></element>tailn"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("{foo}element"))) ((((unsupported)) ("start") ("{foo}empty-element"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root>"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                xtest_events_comment.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start") ("comment") ("end"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- text here -->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("comment") ((((unsupported)) (((xET).xComment)) (" text here "))))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- more text here -->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("comment") ((((unsupported)) (((xET).xComment)) (" more text here "))))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<root-tag>text"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("root-tag"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- inner comment-->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("comment") ((((unsupported)) (((xET).xComment)) (" inner comment"))))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("</root-tag>n"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("end") ("root-tag"))))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- outer comment -->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("comment") ((((unsupported)) (((xET).xComment)) (" outer comment "))))))))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("comment"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<!-- text here -->n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("comment") ((((unsupported)) (((xET).xComment)) (" text here "))))))))
                xtest_events_pi.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start") ("pi") ("end"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<?pitarget?>n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("pi") ((((unsupported)) (((xET).xPI)) ("pitarget"))))))))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("pi"))))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<?pitarget some text ?>n"))
                        bogusForceDataize.write ((((xself).xassert_events)) ((xparser)) ((((unsupported)) ((((unsupported)) ("pi") ((((unsupported)) (((xET).xPI)) ("pitarget some text "))))))))
                xtest_events_sequence.write
                  [xself]
                    memory > xeventset
                    memory > x__iter__
                    memory > xparser
                    memory > x__next__
                    memory > x__init__
                    seq > @
                      seq
                        xeventset.write (((unsupported)) ("end") ("start"))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((xeventset)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<foo>bar</foo>"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("foo"))) ((((unsupported)) ("end") ("foo"))))))
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xevents)) ((((xiter)) ((((unsupported)) ("start") ("end") ("start-ns"))))))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xnext)) (((xself).xevents)))))
                        xparser.write (((unsupported)) (((xET).xXMLPullParser)) ((((xDummyIter)) 0)))
                        bogusForceDataize.write ((((xself).x_feed)) ((xparser)) ("<foo>bar</foo>"))
                        bogusForceDataize.write ((((xself).xassert_event_tags)) ((xparser)) ((((unsupported)) ((((unsupported)) ("start") ("foo"))) ((((unsupported)) ("end") ("foo"))))))
                xtest_unknown_event.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                        (((unsupported)) (((xET).xXMLPullParser)) ((((unsupported)) ("start") ("end") ("bogus"))))
            xXINCLUDE.write (((unsupported)) 0)
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("C1.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("disclaimer.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("C2.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("count.txt"))) ("324387"))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("C2b.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("C3.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("data.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("C5.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE)) ("default.xml"))) (((((((unsupported)) 0).xformat)) (((((xhtml).xescape)) ((xSIMPLE_XMLFILE)) (TRUE))))))
            xXINCLUDE_BAD.write (((unsupported)) 0)
            (((unsupported)) ((((unsupported)) ((xXINCLUDE_BAD)) ("B1.xml"))) ((((unsupported)) 0)))
            (((unsupported)) ((((unsupported)) ((xXINCLUDE_BAD)) ("B2.xml"))) ((((unsupported)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xxinclude_loader.write
                  [xself xhref xparse xencoding]
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xKeyError)))
                          xdata.write (((unsupported)) ((xXINCLUDE)) ((xhref)))
                          (((unsupported)) ((((xOSError)) ("resource not found"))))
                        ((xparse).eq "xml").if
                          xdata.write ((((xET).xXML)) ((xdata)))
                        (((unsupported)) ((xdata)))
                xnone_loader.write
                  [xself xhref xparser xencoding]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ("None: is there a None literal in the EO language?"))
                x_my_loader.write
                  [xself xhref xparse]
                    seq > @
                      ((xparse).eq "xml").if
                        (((unsupported)) ((((xopen)) ((xhref)) ("rb"))) ((xf)))
                          (((unsupported)) ((((((((xET).xparse)) ((xf))).xgetroot)) 0)))
                        (((unsupported)) ("None: is there a None literal in the EO language?"))
                xtest_xinclude_default.write
                  [xself]
                    memory > xdoc
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xdoc.write ((((xself).xxinclude_loader)) ("default.xml"))
                        bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdoc)) (((xself).x_my_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdoc)))) ("<document>n  <p>Example.</p>n  <root>n   <element key=\"value\">text</element>n   <element>text</element>tailn   <empty-element />n</root>n</document>"))
                xtest_xinclude.write
                  [xself]
                    memory > xdocument
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xdocument.write ((((xself).xxinclude_loader)) ("C1.xml"))
                        bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdocument)) (((xself).xxinclude_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdocument)))) ("<document>n  <p>120 Mz is adequate for an average home user.</p>n  <disclaimer>n  <p>The opinions represented herein represent those of the individualn  and should not be interpreted as official policy endorsed by thisn  organization.</p>n</disclaimer>n</document>"))
                        xdocument.write ((((xself).xxinclude_loader)) ("C2.xml"))
                        bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdocument)) (((xself).xxinclude_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdocument)))) ("<document>n  <p>This document has been accessedn  324387 times.</p>n</document>"))
                        xdocument.write ((((xself).xxinclude_loader)) ("C2b.xml"))
                        bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdocument)) (((xself).xxinclude_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdocument)))) ("<document>n  <p>This document has been <em>accessed</em>n  324387 times.</p>n</document>"))
                        xdocument.write ((((xself).xxinclude_loader)) ("C3.xml"))
                        bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdocument)) (((xself).xxinclude_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdocument)))) ("<document>n  <p>The following is the source of the \"data.xml\" resource:</p>n  <example>&lt;?xml version='1.0'?&gt;n&lt;data&gt;n  &lt;item&gt;&lt;![CDATA[Brooks &amp; Shields]]&gt;&lt;/item&gt;n&lt;/data&gt;n</example>n</document>"))
                        xdocument.write ((((xself).xxinclude_loader)) ("C5.xml"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xElementInclude).xinclude)) ((xdocument)) (((xself).xxinclude_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("resource not found"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xdocument)))) ("<div xmlns:ns0=\"http://www.w3.org/2001/XInclude\">n  <ns0:include href=\"example.txt\" parse=\"text\">n    <ns0:fallback>n      <ns0:include href=\"fallback-example.txt\" parse=\"text\">n        <ns0:fallback><a href=\"mailto:bob@example.org\">Report error</a></ns0:fallback>n      </ns0:include>n    </ns0:fallback>n  </ns0:include>n</div>"))
                xtest_xinclude_failures.write
                  [xself]
                    memory > xdocument
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xdocument.write ((((xET).xXML)) ((((unsupported)) ((xXINCLUDE)) ("C1.xml"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xElementInclude).xFatalIncludeError)))) ((xcm)))
                          (((unsupported)) (((xElementInclude).xinclude)) ((xdocument)) (((xself).xnone_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("cannot load 'disclaimer.xml' as 'xml'"))
                        xdocument.write ((((xET).xXML)) ((((unsupported)) ((xXINCLUDE)) ("C2.xml"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xElementInclude).xFatalIncludeError)))) ((xcm)))
                          (((unsupported)) (((xElementInclude).xinclude)) ((xdocument)) (((xself).xnone_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("cannot load 'count.txt' as 'text'"))
                        xdocument.write ((((xET).xXML)) ((((unsupported)) ((xXINCLUDE_BAD)) ("B1.xml"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xElementInclude).xFatalIncludeError)))) ((xcm)))
                          (((unsupported)) (((xElementInclude).xinclude)) ((xdocument)) (((xself).xnone_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("unknown parse type in xi:include tag ('BAD_TYPE')"))
                        xdocument.write ((((xET).xXML)) ((((unsupported)) ((xXINCLUDE_BAD)) ("B2.xml"))))
                        (((unsupported)) (((((xself).xassertRaises)) (((xElementInclude).xFatalIncludeError)))) ((xcm)))
                          (((unsupported)) (((xElementInclude).xinclude)) ((xdocument)) (((xself).xnone_loader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("xi:fallback tag must be child of xi:include ('{http://www.w3.org/2001/XInclude}fallback')"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_bug_xmltoolkit21.write
                  [xself]
                    memory > xelem
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xelem]
                            seq > @
                              seq
                                (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                                  bogusForceDataize.write (((xserialize)) ((xelem)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("cannot serialize 123 (type int)"))
                        xelem.write ((((xET).xElement)) (123))
                        bogusForceDataize.write (((xcheck)) ((xelem)))
                        xelem.write ((((xET).xElement)) ("elem"))
                        (((unsupported)) (((xelem).xtext)) (123))
                        bogusForceDataize.write (((xcheck)) ((xelem)))
                        xelem.write ((((xET).xElement)) ("elem"))
                        (((unsupported)) (((xelem).xtail)) (123))
                        bogusForceDataize.write (((xcheck)) ((xelem)))
                        xelem.write ((((xET).xElement)) ("elem"))
                        bogusForceDataize.write ((((xelem).xset)) (123) ("123"))
                        bogusForceDataize.write (((xcheck)) ((xelem)))
                        xelem.write ((((xET).xElement)) ("elem"))
                        bogusForceDataize.write ((((xelem).xset)) ("123") (123))
                        bogusForceDataize.write (((xcheck)) ((xelem)))
                xtest_bug_xmltoolkit25.write
                  [xself]
                    memory > xelem
                    memory > xtree
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        xtree.write ((((xET).xElementTree)) ((xelem)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtree).xfindtext)) ("tag"))) ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtree).xfindtext)) ("section/tag"))) ("subtext"))
                xtest_bug_xmltoolkit28.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xXML)) ("<doc><table><tbody/></table></doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xtree).xfindall)) (".//thead"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xtree).xfindall)) (".//tbody"))))) ((((unsupported)) ("tbody"))))
                xtest_bug_xmltoolkitX1.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xXML)) ("<doc><table><tbody/></table></doc>"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xET).xdump)) ((xtree)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xgetvalue)) 0)) ("<doc><table><tbody /></table></doc>n"))
                xtest_bug_xmltoolkit39.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xXML)) ("<?xml version='1.0' encoding='iso-8859-1'?><txe4g />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xtree)) ("utf-8"))) ("<txc3xa4g />"))
                        xtree.write ((((xET).xXML)) ("<?xml version='1.0' encoding='iso-8859-1'?><tag xe4ttr='v&#228;lue' />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtree).xattrib)) ((((unsupported)) ("xe4ttr") ("vxe4lue"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xtree)) ("utf-8"))) ("<tag xc3xa4ttr=\"vxc3xa4lue\" />"))
                        xtree.write ((((xET).xXML)) ("<?xml version='1.0' encoding='iso-8859-1'?><txe4g>text</txe4g>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xtree)) ("utf-8"))) ("<txc3xa4g>text</txc3xa4g>"))
                        xtree.write ((((xET).xElement)) ("tu00e4g"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xtree)) ("utf-8"))) ("<txc3xa4g />"))
                        xtree.write ((((xET).xElement)) ("tag"))
                        bogusForceDataize.write ((((xtree).xset)) ("u00e4ttr") ("vu00e4lue"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xtree)) ("utf-8"))) ("<tag xc3xa4ttr=\"vxc3xa4lue\" />"))
                xtest_bug_xmltoolkit54.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<!DOCTYPE doc [<!ENTITY ldots '&#x8230;'>]><doc>&ldots;</doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("us-ascii"))) ("<doc>&#33328;</doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xe)))) ("<doc>u8230</doc>"))
                xtest_bug_xmltoolkit55.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xET).xParseError)))) ((xcm)))
                          bogusForceDataize.write ((((xET).xXML)) ("<!DOCTYPE doc SYSTEM 'doc.dtd'><doc>&ldots;&ndots;&rdots;</doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("undefined entity &ldots;: line 1, column 36"))
                xtest_bug_xmltoolkit60.write
                  [xself]
                    memory > xread
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xread.write
                            [xself xx]
                              seq > @
                                (((unsupported)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xET).xparse)) ((((xExceptionFile)) 0)))
                xtest_bug_xmltoolkit62.write
                  [xself]
                    memory > xENTITIES
                    memory > xt
                    memory > xparser
                    seq > @
                      seq
                        xENTITIES.write (((unsupported)) ("rsquo") ("u2019") ("lsquo") ("u2018"))
                        xparser.write ((((xET).xXMLParser)) 0)
                        bogusForceDataize.write (((((xparser).xentity).xupdate)) ((xENTITIES)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((((unsupported)) 0)))
                        xt.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xt).xfind)) (".//paragraph")).xtext)) ("A new cultivar of Begonia plant named u2018BCT9801BEGu2019."))
                xtest_bug_xmltoolkit63.write
                  [xself]
                    memory > xcount
                    memory > xxmltoolkit63
                    seq > @
                      (((unsupported)) 0)
                        xxmltoolkit63.write
                          []
                            memory > xtree
                            seq > @
                              seq
                                xtree.write ((((xET).xTreeBuilder)) 0)
                                bogusForceDataize.write ((((xtree).xstart)) ("tag") ((((unsupported)) 0)))
                                bogusForceDataize.write ((((xtree).xdata)) ("text"))
                                bogusForceDataize.write ((((xtree).xend)) ("tag"))
                        bogusForceDataize.write (((xxmltoolkit63)) 0)
                        xcount.write ((((xsys).xgetrefcount)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xi)) ((((xrange)) (1000))))
                          bogusForceDataize.write (((xxmltoolkit63)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsys).xgetrefcount)) ("None: is there a None literal in the EO language?"))) ((xcount)))
                xtest_bug_200708_newline.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)) (((xET).xElement)) ("SomeTag") ("def _f():n  return 3n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)))) ("<SomeTag text=\"def _f():&#10;  return 3&#10;\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xET).xXML)) (((((xET).xtostring)) ((xe))))).xget)) ("text"))) ("def _f():n  return 3n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) (((((xET).xXML)) (((((xET).xtostring)) ((xe)))))))) ("<SomeTag text=\"def _f():&#10;  return 3&#10;\" />"))
                xtest_bug_200708_close.write
                  [xself]
                    memory > xclose
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xET).xXMLParser)) 0)
                        bogusForceDataize.write ((((xparser).xfeed)) ("<element>some text</element>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xparser).xclose)) 0).xtag)) ("element"))
                        (((unsupported)) 0)
                          xclose.write
                            [xself]
                              seq > @
                                (((unsupported)) (((((xET).xElement)) ("element"))))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xEchoTarget)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) ("<element>some text</element>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xparser).xclose)) 0).xtag)) ("element"))
                xtest_bug_200709_default_namespace.write
                  [xself]
                    memory > xe
                    memory > xs
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("{default}elem"))
                        xs.write ((((xET).xSubElement)) ((xe)) ("{default}elem"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("default"))) ("<elem xmlns=\"default\"><elem /></elem>"))
                        xe.write ((((xET).xElement)) ("{default}elem"))
                        xs.write ((((xET).xSubElement)) ((xe)) ("{default}elem"))
                        xs.write ((((xET).xSubElement)) ((xe)) ("{not-default}elem"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xe)) ("default"))) ("<elem xmlns=\"default\" xmlns:ns1=\"not-default\"><elem /><ns1:elem /></elem>"))
                        xe.write ((((xET).xElement)) ("{default}elem"))
                        xs.write ((((xET).xSubElement)) ((xe)) ("{default}elem"))
                        xs.write ((((xET).xSubElement)) ((xe)) ("elem"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          (((unsupported)) ((xserialize)) ((xe)) ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("cannot use non-qualified names with default_namespace option"))
                xtest_bug_200709_register_namespace.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("{http://namespace.invalid/does/not/exist/}title"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)))) ("<ns0:title xmlns:ns0=\"http://namespace.invalid/does/not/exist/\" />"))
                        bogusForceDataize.write ((((xET).xregister_namespace)) ("foo") ("http://namespace.invalid/does/not/exist/"))
                        xe.write ((((xET).xElement)) ("{http://namespace.invalid/does/not/exist/}title"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)))) ("<foo:title xmlns:foo=\"http://namespace.invalid/does/not/exist/\" />"))
                        xe.write ((((xET).xElement)) ("{http://purl.org/dc/elements/1.1/}title"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)))) ("<dc:title xmlns:dc=\"http://purl.org/dc/elements/1.1/\" />"))
                xtest_bug_200709_element_comment.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        bogusForceDataize.write ((((xa).xappend)) (((((xET).xComment)) ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtag)) (((xET).xComment)))
                        xa.write ((((xET).xElement)) ("a"))
                        bogusForceDataize.write ((((xa).xappend)) (((((xET).xPI)) ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtag)) (((xET).xPI)))
                xtest_bug_200709_element_insert.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        xb.write ((((xET).xSubElement)) ((xa)) ("b"))
                        xc.write ((((xET).xSubElement)) ((xa)) ("c"))
                        xd.write ((((xET).xElement)) ("d"))
                        bogusForceDataize.write ((((xa).xinsert)) (0) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((xa)))) ((((unsupported)) ("d") ("b") ("c"))))
                        bogusForceDataize.write ((((xa).xinsert)) ((1.neg)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((xa)))) ((((unsupported)) ("d") ("b") ("d") ("c"))))
                xtest_bug_200709_iter_comment.write
                  [xself]
                    memory > xcomment_b
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        xb.write ((((xET).xSubElement)) ((xa)) ("b"))
                        xcomment_b.write ((((xET).xComment)) ("TEST-b"))
                        bogusForceDataize.write ((((xb).xappend)) ((xcomment_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xa).xiter)) (((xET).xComment)))))) ((((unsupported)) (((xET).xComment)))))
                xtest_bug_1534630.write
                  [xself]
                    memory > xbob
                    memory > xe
                    seq > @
                      seq
                        xbob.write ((((xET).xTreeBuilder)) 0)
                        xe.write ((((xbob).xdata)) ("data"))
                        xe.write ((((xbob).xstart)) ("tag") ((((unsupported)) 0)))
                        xe.write ((((xbob).xend)) ("tag"))
                        xe.write ((((xbob).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xe)))) ("<tag />"))
                xtest_issue6233.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<?xml version='1.0' encoding='utf-8'?><body>txc3xa3g</body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)) ("ascii"))) ("<?xml version='1.0' encoding='ascii'?>n<body>t&#227;g</body>"))
                        xe.write ((((xET).xXML)) ("<?xml version='1.0' encoding='iso-8859-1'?><body>txe3g</body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)) ("ascii"))) ("<?xml version='1.0' encoding='ascii'?>n<body>t&#227;g</body>"))
                xtest_issue3151.write
                  [xself]
                    memory > xt
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ("<prefix:localname xmlns:prefix=\"${stuff}\"/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("{${stuff}}localname"))
                        xt.write ((((xET).xElementTree)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xe)))) ("<ns0:localname xmlns:ns0=\"${stuff}\" />"))
                xtest_issue6565.write
                  [xself]
                    memory > xnewelem
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xXML)) ("<body><tag/></body>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((xelem)))) ((((unsupported)) ("tag"))))
                        xnewelem.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        (((unsupported)) ((((unsupported)) ((xelem)) ((((unsupported)) 0)))) ((((unsupported)) ((xnewelem)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((xelem)))) ((((unsupported)) ("tag") ("tag") ("section"))))
                xtest_issue10777.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xET).xregister_namespace)) ("test10777") ("http://myuri/"))
                        bogusForceDataize.write ((((xET).xregister_namespace)) ("test10777") ("http://myuri/"))
                xtest_lost_text.write
                  [xself]
                    memory > xt
                    memory > xe
                    memory > x__bool__
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__bool__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) (((xe).xtext)) ("changed"))
                                  (((unsupported)) (TRUE))
                        xe.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) (((xe).xtext)) ((((xText)) 0)))
                        xi.write ((((xe).xitertext)) 0)
                        xt.write (((xnext)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xt)) ((xText)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xe).xtext)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtext)) ("changed"))
                xtest_lost_tail.write
                  [xself]
                    memory > xt
                    memory > xe
                    memory > x__bool__
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__bool__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) (((((unsupported)) ((xe)) (0)).xtail)) ("changed"))
                                  (((unsupported)) (TRUE))
                        xe.write ((((xET).xElement)) ("root"))
                        bogusForceDataize.write ((((xe).xappend)) (((((xET).xElement)) ("tag"))))
                        (((unsupported)) (((((unsupported)) ((xe)) (0)).xtail)) ((((xText)) 0)))
                        xi.write ((((xe).xitertext)) 0)
                        xt.write (((xnext)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xt)) ((xText)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) ((xe)) (0)).xtail)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) (0)).xtail)) ("changed"))
                xtest_lost_elem.write
                  [xself]
                    memory > xt
                    memory > xe
                    memory > x__eq__
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  (((unsupported)) ((((unsupported)) ((xe)) (0))) (((((xET).xElement)) ("changed"))))
                                  bogusForceDataize.write (((xnext)) ((xi)))
                                  (((unsupported)) (TRUE))
                        xe.write ((((xET).xElement)) ("root"))
                        bogusForceDataize.write ((((xe).xappend)) (((((xET).xElement)) ((((xTag)) 0)))))
                        bogusForceDataize.write ((((xe).xappend)) (((((xET).xElement)) ("tag"))))
                        xi.write ((((xe).xiter)) ("tag"))
                        (((unsupported)) ((xValueError)))
                          xt.write (((xnext)) ((xi)))
                          bogusForceDataize.write ((((xself).xskipTest)) ("generators are not reentrant"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xt).xtag)) ((xTag)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) ((xe)) (0)).xtag)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) (0)).xtag)) ("changed"))
                xcheck_expat224_utf8_bug.write
                  [xself xtext]
                    memory > xroot
                    memory > xxml
                    seq > @
                      seq
                        xxml.write ("<a b=\"%s\"/>".mod (xtext))
                        xroot.write ((((xET).xXML)) ((xxml)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xroot).xget)) ("b"))) (((((xtext).xdecode)) ("utf-8"))))
                xtest_expat224_utf8_bug.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write ("xc3xa0".mul 1024)
                        bogusForceDataize.write ((((xself).xcheck_expat224_utf8_bug)) ((xtext)))
                        xtext.write ("x".add ("xc3xa0".mul 1024))
                        bogusForceDataize.write ((((xself).xcheck_expat224_utf8_bug)) ((xtext)))
                xtest_expat224_utf8_bug_file.write
                  [xself]
                    memory > xroot
                    memory > xraw
                    memory > xxmlattr
                    memory > xtext
                    seq > @
                      seq
                        (((unsupported)) ((((xopen)) ((xUTF8_BUG_XMLFILE)) ("rb"))) ((xfp)))
                          xraw.write ((((xfp).xread)) 0)
                        xroot.write ((((xET).xfromstring)) ((xraw)))
                        xxmlattr.write ((((xroot).xget)) ("b"))
                        xtext.write (((((((xraw).xdecode)) ("utf-8")).xstrip)) 0)
                        xtext.write ((((xtext).xreplace)) ("rn") (" "))
                        xtext.write (((unsupported)) ((xtext)) ((((unsupported)) (6) ((4.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xroot).xget)) ("b"))) ((xtext)))
            (((unsupported)) ((xElementTestCase)) (((xunittest).xTestCase)))
              seq
                xtest___init__.write
                  [xself]
                    memory > xattrib
                    memory > xelement_foo
                    memory > xtag
                    seq > @
                      seq
                        xtag.write "foo"
                        xattrib.write (((unsupported)) ("zix") ("wyp"))
                        xelement_foo.write ((((xET).xElement)) ((xtag)) ((xattrib)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xelement_foo)) (((xET).xElement)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("tag") ((((xdir)) ((xelement_foo)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("attrib") ((((xdir)) ((xelement_foo)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("text") ((((xdir)) ((xelement_foo)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("tail") ((((xdir)) ((xelement_foo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo).xtag)) ((xtag)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement_foo).xtext)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement_foo).xtail)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) (((xelement_foo).xattrib)) ((xattrib)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo).xattrib)) ((xattrib)))
                        (((unsupported)) ((((unsupported)) ((xattrib)) ("bar"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertIsNot)) (((xelement_foo).xattrib)) ((xattrib)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xelement_foo).xattrib)) ((xattrib)))
                xtest___copy__.write
                  [xself]
                    memory > xelement_foo
                    memory > xelement_foo2
                    seq > @
                      seq
                        xelement_foo.write ((((xET).xElement)) ("foo") ((((unsupported)) ("zix") ("wyp"))))
                        bogusForceDataize.write ((((xelement_foo).xappend)) (((((xET).xElement)) ("bar") ((((unsupported)) ("baz") ("qix"))))))
                        xelement_foo2.write ((((xcopy).xcopy)) ((xelement_foo)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xelement_foo2)) ((xelement_foo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtag)) (((xelement_foo).xtag)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtext)) (((xelement_foo).xtext)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtail)) (((xelement_foo).xtail)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xelement_foo2)))) ((((xlen)) ((xelement_foo)))))
                        (((unsupported)) ((((unsupported)) ((xchild1)) ((xchild2)))) (((((xitertools).xzip_longest)) ((xelement_foo)) ((xelement_foo2)))))
                          bogusForceDataize.write ((((xself).xassertIs)) ((xchild1)) ((xchild2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xattrib)) (((xelement_foo).xattrib)))
                xtest___deepcopy__.write
                  [xself]
                    memory > xelement_foo
                    memory > xelement_foo2
                    seq > @
                      seq
                        xelement_foo.write ((((xET).xElement)) ("foo") ((((unsupported)) ("zix") ("wyp"))))
                        bogusForceDataize.write ((((xelement_foo).xappend)) (((((xET).xElement)) ("bar") ((((unsupported)) ("baz") ("qix"))))))
                        xelement_foo2.write ((((xcopy).xdeepcopy)) ((xelement_foo)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xelement_foo2)) ((xelement_foo)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtag)) (((xelement_foo).xtag)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtext)) (((xelement_foo).xtext)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xtail)) (((xelement_foo).xtail)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xelement_foo2)))) ((((xlen)) ((xelement_foo)))))
                        (((unsupported)) ((((unsupported)) ((xchild1)) ((xchild2)))) (((((xitertools).xzip_longest)) ((xelement_foo)) ((xelement_foo2)))))
                          bogusForceDataize.write ((((xself).xassertIsNot)) ((xchild1)) ((xchild2)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) (((xelement_foo2).xattrib)) (((xelement_foo).xattrib)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement_foo2).xattrib)) (((xelement_foo).xattrib)))
                        (((unsupported)) ((((unsupported)) (((xelement_foo).xattrib)) ("bar"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertIsNot)) (((xelement_foo2).xattrib)) (((xelement_foo).xattrib)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xelement_foo2).xattrib)) (((xelement_foo).xattrib)))
                xtest_augmentation_type_errors.write
                  [xself]
                    memory > xe
                    memory > xstate
                    memory > x__deepcopy__
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xe).xappend)) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))) ("foo"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xe).xinsert)) (0) ("foo"))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) (0))) ("foo"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))) ((((unsupported)) (((((xET).xElement)) ("bar"))) ("foo"))))
                        (((xhasattr)) ((xe)) ("__setstate__")).if
                          seq
                            xstate.write (((unsupported)) ("tag") ("tag") ("_children") ((((unsupported)) ("None: is there a None literal in the EO language?"))) ("attrib") ("attr") ("tail") ("tail") ("text") ("text"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xe).x__setstate__)) ((xstate)))
                        (((xhasattr)) ((xe)) ("__deepcopy__")).if
                          seq
                            (((unsupported)) (((xET).xElement)))
                              x__deepcopy__.write
                                [xself xmemo]
                                  seq > @
                                    (((unsupported)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))) ((((unsupported)) ((((xE)) ("bar"))))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xcopy).xdeepcopy)) ((xe)))
                xtest_cyclic_gc.write
                  [xself]
                    memory > xd
                    memory > xe3
                    memory > xe1
                    memory > xwref
                    memory > xe2
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xd.write (((xDummy)) 0)
                        (((unsupported)) (((xd).xdummyref)) ((((unsupported)) (((xET).xElement)) ("joe") ((xd)))))
                        xwref.write ((((xweakref).xref)) ((xd)))
                        (((unsupported)) ((((unsupported)) ((xd)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwref)) 0)))
                        xe.write ((((xET).xElement)) ("joe"))
                        xd.write (((xDummy)) 0)
                        (((unsupported)) (((xd).xdummyref)) ((xe)))
                        xwref.write ((((xweakref).xref)) ((xd)))
                        xe2.write (((unsupported)) (((xET).xSubElement)) ((xe)) ("foo") ((xd)))
                        (((unsupported)) ((((unsupported)) ((xd)) ((xe)) ((xe2)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwref)) 0)))
                        xe1.write ((((xET).xElement)) ("e1"))
                        xe2.write ((((xET).xElement)) ("e2"))
                        xe3.write ((((xET).xElement)) ("e3"))
                        bogusForceDataize.write ((((xe3).xappend)) ((xe1)))
                        bogusForceDataize.write ((((xe2).xappend)) ((xe3)))
                        bogusForceDataize.write ((((xe1).xappend)) ((xe2)))
                        xwref.write ((((xweakref).xref)) ((xe1)))
                        (((unsupported)) ((((unsupported)) ((xe1)) ((xe2)) ((xe3)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwref)) 0)))
                xtest_weakref.write
                  [xself]
                    memory > xe
                    memory > xwref
                    memory > xwref_cb
                    memory > xflag
                    seq > @
                      seq
                        xflag.write FALSE
                        xwref_cb.write
                          [xw]
                            memory > xflag
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xflag.write TRUE
                        xe.write ((((xET).xElement)) ("e"))
                        xwref.write ((((xweakref).xref)) ((xe)) ((xwref_cb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xwref)) 0).xtag)) ("e"))
                        (((unsupported)) ((((unsupported)) ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xflag)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xwref)) 0)) ("None: is there a None literal in the EO language?"))
                xtest_get_keyword_args.write
                  [xself]
                    memory > xe1
                    seq > @
                      seq
                        xe1.write (((unsupported)) (((xET).xElement)) ("foo") (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe1).xget)) ("x") (7))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe1).xget)) ("w") (7))) (7))
                xtest_pickle.write
                  [xself]
                    memory > xe
                    memory > xe2
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) (2) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)) ((((unsupported)) ((xdumper)) ((xloader)))) ((((unsupported)) ((xproduct)) (((xself).xmodules)) (2))))
                          seq
                            xe.write (((unsupported)) (((xdumper).xElement)) ("foo") (42))
                            (((unsupported)) (((xe).xtext)) ("text goes here"))
                            (((unsupported)) (((xe).xtail)) ("opposite of head"))
                            bogusForceDataize.write (((((((xdumper).xSubElement)) ((xe)) ("child")).xappend)) (((((xdumper).xElement)) ("grandchild"))))
                            bogusForceDataize.write ((((xe).xappend)) (((((xdumper).xElement)) ("child"))))
                            bogusForceDataize.write ((((((unsupported)) (((((xe).xfindall)) (".//grandchild"))) (0)).xset)) ("attr") ("other value"))
                            xe2.write ((((xself).xpickleRoundTrip)) ((xe)) ("xml.etree.ElementTree") ((xdumper)) ((xloader)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xe2).xtag)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe2).xattrib)) ("bar"))) (42))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xe2)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqualElements)) ((xe)) ((xe2)))
                xtest_pickle_issue18997.write
                  [xself]
                    memory > xXMLTEXT
                    memory > xe2
                    memory > xe1
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) (2) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)) ((((unsupported)) ((xdumper)) ((xloader)))) ((((unsupported)) ((xproduct)) (((xself).xmodules)) (2))))
                          seq
                            xXMLTEXT.write (((unsupported)) 0)
                            xe1.write ((((xdumper).xfromstring)) ((xXMLTEXT)))
                            (((xhasattr)) ((xe1)) ("__getstate__")).if
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xe1).x__getstate__)) 0)) ("tag"))) ("group"))
                            xe2.write ((((xself).xpickleRoundTrip)) ((xe1)) ("xml.etree.ElementTree") ((xdumper)) ((xloader)) ((xproto)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xe2).xtag)) ("group"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe2)) (0)).xtag)) ("dogs"))
            (((unsupported)) ((xElementTestCase)) (((xunittest).xTestCase)))
              seq
                xtest_extend_mutable_list.write
                  [xself]
                    memory > xe
                    memory > xL
                    memory > x__class__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__class__.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((((unsupported)) ((xL)) ((((unsupported)) 0)))) ((((unsupported)) (((((xET).xElement)) ("baz"))))))
                                  (((unsupported)) (((xET).xElement)))
                        xL.write (((unsupported)) ((((xX)) 0)))
                        xe.write ((((xET).xElement)) ("foo"))
                        (((unsupported)) ((xTypeError)))
                          bogusForceDataize.write ((((xe).xextend)) ((xL)))
                        (((unsupported)) ((xX)) (((xET).xElement)))
                        xL.write (((unsupported)) ((((xY)) ("x"))))
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((xL)))
                xtest_extend_mutable_list2.write
                  [xself]
                    memory > xe
                    memory > xL
                    memory > x__class__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__class__.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((((unsupported)) ((((unsupported)) ((xL)) ((((unsupported)) 0)))))))
                                  (((unsupported)) (((xET).xElement)))
                        xL.write (((unsupported)) ((((xX)) 0)) (((((xET).xElement)) ("baz"))))
                        xe.write ((((xET).xElement)) ("foo"))
                        (((unsupported)) ((xTypeError)))
                          bogusForceDataize.write ((((xe).xextend)) ((xL)))
                        (((unsupported)) ((xX)) (((xET).xElement)))
                        xL.write (((unsupported)) ((((xY)) ("bar"))) (((((xET).xElement)) ("baz"))))
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((xL)))
                xtest_remove_with_mutating.write
                  [xself]
                    memory > xe
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                          x__eq__.write
                            [xself xo]
                              seq > @
                                seq
                                  (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))))))
                                  (((unsupported)) (FALSE))
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) ((((xX)) ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xe).xremove)) (((((xET).xElement)) ("baz"))))
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xe).xremove)) ((((xX)) ("baz"))))
                xtest_recursive_repr.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        (((unsupported)) ((((xswap_attr)) ((xe)) ("tag") ((xe)))))
                          (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))))
                            bogusForceDataize.write (((xrepr)) ((xe)))
                xtest_element_get_text.write
                  [xself]
                    memory > x__del__
                    memory > xelem
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                          x__del__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xNameError)))
                                  unsupported
                        xb.write ((((xET).xTreeBuilder)) 0)
                        bogusForceDataize.write ((((xb).xstart)) ("tag") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xb).xdata)) ("ABCD"))
                        bogusForceDataize.write ((((xb).xdata)) ((((xX)) ("EFGH"))))
                        bogusForceDataize.write ((((xb).xdata)) ("IJKL"))
                        bogusForceDataize.write ((((xb).xend)) ("tag"))
                        xelem.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xtext)) ("ABCDEFGHIJKL"))
                xtest_element_get_tail.write
                  [xself]
                    memory > x__del__
                    memory > xelem
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                          x__del__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xNameError)))
                                  unsupported
                        xb.write ((((xET).xTreeBuilder)) 0)
                        bogusForceDataize.write ((((xb).xstart)) ("root") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xb).xstart)) ("tag") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xb).xend)) ("tag"))
                        bogusForceDataize.write ((((xb).xdata)) ("ABCD"))
                        bogusForceDataize.write ((((xb).xdata)) ((((xX)) ("EFGH"))))
                        bogusForceDataize.write ((((xb).xdata)) ("IJKL"))
                        bogusForceDataize.write ((((xb).xend)) ("root"))
                        xelem.write ((((xb).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xelem)) (0)).xtail)) ("ABCDEFGHIJKL"))
                xtest_subscr.write
                  [xself]
                    memory > xe
                    memory > x__index__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__index__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))))))
                                  (((unsupported)) (1))
                        xe.write ((((xET).xElement)) ("elem"))
                        bogusForceDataize.write ((((xe).xappend)) (((((xET).xElement)) ("child"))))
                        (((unsupported)) ((xe)) ((((unsupported)) ((((xX)) 0)))))
                        bogusForceDataize.write ((((xe).xappend)) (((((xET).xElement)) ("child"))))
                        (((unsupported)) ((xe)) ((((unsupported)) (0) (10) ((((xX)) 0)))))
                xtest_ass_subscr.write
                  [xself]
                    memory > xe
                    memory > x__index__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__index__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                                  (((unsupported)) (1))
                        xe.write ((((xET).xElement)) ("elem"))
                        (((unsupported)) ((x_)) ((((xrange)) (10))))
                          bogusForceDataize.write ((((xe).xinsert)) (0) (((((xET).xElement)) ("child"))))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (0) (10) ((((xX)) 0)))))) ((((unsupported)) 0)))
                xtest_treebuilder_start.write
                  [xself]
                    memory > xelement_factory
                    memory > xb
                    seq > @
                      seq
                        xelement_factory.write
                          [xx xy]
                            seq > @
                              (((unsupported)) ((((unsupported)) 0)))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) ((xelement_factory)))
                        bogusForceDataize.write ((((xb).xstart)) ("tag") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xb).xdata)) ("ABCD"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((xb).xstart)) ("tag2") ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xb)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                xtest_treebuilder_end.write
                  [xself]
                    memory > xelement_factory
                    memory > xb
                    seq > @
                      seq
                        xelement_factory.write
                          [xx xy]
                            seq > @
                              (((unsupported)) ((((unsupported)) 0)))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) ((xelement_factory)))
                        bogusForceDataize.write ((((xb).xstart)) ("tag") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xb).xdata)) ("ABCD"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((xb).xend)) ("tag"))
                        (((unsupported)) ((((unsupported)) ((xb)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
            (((unsupported)) ((xstr)))
              seq
                x__new__.write
                  [xcls xelem]
                    memory > xself
                    seq > @
                      (((unsupported)) 0)
                        xself.write ((((xstr).x__new__)) ((xcls)) ((((unsupported)) ((xargs)))))
                        (((unsupported)) (((xself).xelem)) ((xelem)))
                        (((unsupported)) ((xself)))
                x__eq__.write
                  [xself xo]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xelem)) ((((unsupported)) 0)))))))
                        (((unsupported)) (TRUE))
            (((unsupported)) (((xMutatingElementPath).x__hash__)) (((xstr).x__hash__)))
            (((unsupported)) ((xstr)))
              x__eq__.write
                [xself xo]
                  seq > @
                    (((unsupported)) ((1.div 0)))
            (((unsupported)) (((xBadElementPath).x__hash__)) (((xstr).x__hash__)))
            (((unsupported)) ((xElementTestCase)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) 0).xsetUp)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) (((xself).xpath_cache)) (((xElementPath).x_cache)))
                        (((unsupported)) (((xElementPath).x_cache)) ((((unsupported)) 0)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((xElementPath).x_cache)) (((xself).xpath_cache)))
                        bogusForceDataize.write ((((((xsuper)) 0).xtearDown)) 0)
                xtest_find_with_mutating.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        bogusForceDataize.write ((((xe).xfind)) ((((xMutatingElementPath)) ((xe)) ("x"))))
                xtest_find_with_error.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        (((unsupported)) ((xZeroDivisionError)))
                          bogusForceDataize.write ((((xe).xfind)) ((((xBadElementPath)) ("x"))))
                xtest_findtext_with_mutating.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        bogusForceDataize.write ((((xe).xfindtext)) ((((xMutatingElementPath)) ((xe)) ("x"))))
                xtest_findtext_with_error.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        (((unsupported)) ((xZeroDivisionError)))
                          bogusForceDataize.write ((((xe).xfindtext)) ((((xBadElementPath)) ("x"))))
                xtest_findall_with_mutating.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        bogusForceDataize.write ((((xe).xfindall)) ((((xMutatingElementPath)) ((xe)) ("x"))))
                xtest_findall_with_error.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xElement)) ("foo"))
                        bogusForceDataize.write ((((xe).xextend)) ((((unsupported)) (((((xET).xElement)) ("bar"))))))
                        (((unsupported)) ((xZeroDivisionError)))
                          bogusForceDataize.write ((((xe).xfindall)) ((((xBadElementPath)) ("x"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_istype.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xParseError)) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xQName)) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xElementTree)) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xElement)) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xTreeBuilder)) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xET).xXMLParser)) ((xtype)))
                xtest_Element_subclass_trivial.write
                  [xself]
                    memory > xmye
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                        xmye.write (((xMyElement)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmye)) (((xET).xElement)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmye)) ((xMyElement)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmye).xtag)) ("foo"))
                        (((unsupported)) (((xmye).xtext)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmye).xtext)) ("joe"))
                xtest_Element_subclass_constructor.write
                  [xself]
                    memory > xmye
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                          x__init__.write
                            [xself xtag xattrib]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((((xsuper)) ((xMyElement)) ((xself))).x__init__)) (((xtag).add "__")) ((xattrib)) ((((unsupported)) ((xextra)))))
                        xmye.write (((unsupported)) ((xMyElement)) ("foo") ((((unsupported)) ("a") (1) ("b") (2))) (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xmye).xtag)) ("foo__"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xmye).xitems)) 0)))) ((((unsupported)) ((((unsupported)) ("a") (1))) ((((unsupported)) ("b") (2))) ((((unsupported)) ("c") (3))) ((((unsupported)) ("d") (4))))))
                xtest_Element_subclass_new_method.write
                  [xself]
                    memory > xmye
                    memory > xnewmethod
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                          xnewmethod.write
                            [xself]
                              seq > @
                                (((unsupported)) (((xself).xtag)))
                        xmye.write (((xMyElement)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmye).xnewmethod)) 0)) ("joe"))
                xtest_Element_subclass_find.write
                  [xself]
                    memory > xe
                    memory > xsub
                    memory > xfound
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                        xe.write ((((xET).xElement)) ("foo"))
                        (((unsupported)) (((xe).xtext)) ("text"))
                        xsub.write (((xMyElement)) ("bar"))
                        (((unsupported)) (((xsub).xtext)) ("subtext"))
                        bogusForceDataize.write ((((xe).xappend)) ((xsub)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("bar"))) ("subtext"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xe).xfind)) ("bar")).xtag)) ("bar"))
                        xfound.write (((xlist)) (((((xe).xfindall)) ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xfound)))) (1) ((xfound)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xfound)) (0)).xtag)) ("bar"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_find_simple.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xe).xfind)) ("tag")).xtag)) ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xe).xfind)) ("section/tag")).xtag)) ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xe).xfind)) ("./tag")).xtag)) ("tag"))
                        (((unsupported)) ((((unsupported)) ((xe)) (2))) (((((xET).xXML)) ((xSAMPLE_SECTION)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xe).xfind)) ("section/nexttag")).xtag)) ("nexttag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("./tag"))) ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("section/tag"))) ("subtext"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("section/nexttag"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("section/nexttag") ("default"))) (""))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xe).xfindtext)) ("tog"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindtext)) ("tog") ("default"))) ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xET).xXML)) ("<tag><empty /></tag>")).xfindtext)) ("empty"))) (""))
                xtest_find_xpath.write
                  [xself]
                    memory > xe
                    memory > xLINEAR_XML
                    seq > @
                      seq
                        xLINEAR_XML.write (((unsupported)) 0)
                        xe.write ((((xET).xXML)) ((xLINEAR_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xe).xfind)) ("./tag[1]")).xattrib)) ("class"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xe).xfind)) ("./tag[2]")).xattrib)) ("class"))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xe).xfind)) ("./tag[last()]")).xattrib)) ("class"))) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xe).xfind)) ("./tag[last()-1]")).xattrib)) ("class"))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xe).xfind)) ("./tag[last()-2]")).xattrib)) ("class"))) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("XPath") (((xe).xfind)) ("./tag[0]"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("XPath") (((xe).xfind)) ("./tag[-1]"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("XPath") (((xe).xfind)) ("./tag[last()-0]"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("XPath") (((xe).xfind)) ("./tag[last()+1]"))
                xtest_findall.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        (((unsupported)) ((((unsupported)) ((xe)) (2))) (((((xET).xXML)) ((xSAMPLE_SECTION)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("."))))) ((((unsupported)) ("body"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("tag"))))) ((((unsupported)) ("tag") ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("tog"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("tog/foo"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("*"))))) ((((unsupported)) ("tag") ("tag") ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag"))))) (((((unsupported)) ("tag")).mul 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section/tag"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section//tag"))))) (((((unsupported)) ("tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section/*"))))) ((((unsupported)) ("tag") ("nexttag") ("nextsection"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section//*"))))) ((((unsupported)) ("tag") ("nexttag") ("nextsection") ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section/.//*"))))) ((((unsupported)) ("tag") ("nexttag") ("nextsection") ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("*/*"))))) ((((unsupported)) ("tag") ("nexttag") ("nextsection"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("*//*"))))) ((((unsupported)) ("tag") ("nexttag") ("nextsection") ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("*/tag"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("*/./tag"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("./tag"))))) (((((unsupported)) ("tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("././tag"))))) (((((unsupported)) ("tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[@class]"))))) (((((unsupported)) ("tag")).mul 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[@class=\"a\"]"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[@class=\"b\"]"))))) (((((unsupported)) ("tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[@id]"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag]"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[element]"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("../tag"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("section/../tag"))))) (((((unsupported)) ("tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xe).xfindall)) ("section//"))) (((((xe).xfindall)) ("section//*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag='subtext']"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag ='subtext']"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag= 'subtext']"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag = 'subtext']"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[ tag = 'subtext' ]"))))) ((((unsupported)) ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[.='subtext']"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[. ='subtext']"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[.= \"subtext\"]"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[ . = \"subtext\" ]"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[. = 'subtext']"))))) ((((unsupported)) ("tag"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[. = 'subtext ']"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[.= ' subtext']"))))) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xe)) (1))) ((((unsupported)) ((xe)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//section[tag = 'subtext']"))))) ((((unsupported)) ("section") ("section"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//tag[. = 'subtext']"))))) ((((unsupported)) ("tag") ("tag"))))
                xtest_test_find_with_ns.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ((xSAMPLE_XML_NS)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("tag"))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) ("{http://effbot.org/ns}tag"))))) (((((unsupported)) ("{http://effbot.org/ns}tag")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xe).xfindall)) (".//{http://effbot.org/ns}tag"))))) (((((unsupported)) ("{http://effbot.org/ns}tag")).mul 3)))
                xtest_findall_different_nsmaps.write
                  [xself]
                    memory > xroot
                    memory > xnsmap
                    seq > @
                      seq
                        xroot.write ((((xET).xXML)) ((((unsupported)) 0)))
                        xnsmap.write (((unsupported)) ("xx") ("X"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//xx:b") ((xnsmap)))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//b") ((xnsmap)))))) (2))
                        xnsmap.write (((unsupported)) ("xx") ("Y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//xx:b") ((xnsmap)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//b") ((xnsmap)))))) (2))
                        xnsmap.write (((unsupported)) ("xx") ("X") ("") ("Y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//xx:b") ((xnsmap)))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (((xroot).xfindall)) (".//b") ((xnsmap)))))) (1))
                xtest_findall_wildcard.write
                  [xself]
                    memory > xroot
                    seq > @
                      seq
                        xroot.write ((((xET).xXML)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xroot).xappend)) (((((xET).xComment)) ("test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{*}b"))))) ((((unsupported)) ("{X}b") ("b") ("{Y}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{*}c"))))) ((((unsupported)) ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{X}*"))))) ((((unsupported)) ("{X}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{Y}*"))))) ((((unsupported)) ("{Y}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{}*"))))) ((((unsupported)) ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{}b"))))) ((((unsupported)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{}b"))))) ((((xsummarize_list)) (((((xroot).xfindall)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) ("{*}*"))))) ((((unsupported)) ("{X}b") ("b") ("c") ("{Y}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((((((xroot).xfindall)) ("{*}*")).add (((unsupported)) ((((unsupported)) ((xroot)) ((1.neg))))))))) ((((xsummarize_list)) (((((xroot).xfindall)) ("*"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{*}b"))))) ((((unsupported)) ("{X}b") ("b") ("{X}b") ("b") ("{Y}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{*}c"))))) ((((unsupported)) ("c") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{X}*"))))) ((((unsupported)) ("{X}b") ("{X}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{Y}*"))))) ((((unsupported)) ("{Y}b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{}*"))))) ((((unsupported)) ("c") ("b") ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{}b"))))) ((((unsupported)) ("b") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xroot).xfindall)) (".//{}b"))))) ((((xsummarize_list)) (((((xroot).xfindall)) (".//b"))))))
                xtest_bad_find.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("cannot use absolute path"))))
                          bogusForceDataize.write ((((xe).xfindall)) ("/tag"))
                xtest_find_through_ElementTree.write
                  [xself]
                    memory > xe
                    memory > xmsg
                    memory > xit
                    seq > @
                      seq
                        xe.write ((((xET).xXML)) ((xSAMPLE_XML)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xET).xElementTree)) ((xe))).xfind)) ("tag")).xtag)) ("tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xET).xElementTree)) ((xe))).xfindtext)) ("tag"))) ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((((((((xET).xElementTree)) ((xe))).xfindall)) ("tag"))))) (((((unsupported)) ("tag")).mul 2)))
                        xmsg.write "This search is broken in 1.3 and earlier, and will be fixed in a future version.  If you rely on the current behaviour, change it to '.+'"
                        (((unsupported)) (((((xself).xassertWarnsRegex)) ((xFutureWarning)) ((xmsg)))))
                          xit.write (((((((xET).xElementTree)) ((xe))).xfindall)) ("//tag"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((xit)))) (((((unsupported)) ("tag")).mul 3)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_ilist.write
                  [xself xelem xtag]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xsummarize_list)) (((((xelem).xiter)) ((xtag)))))))
                xtest_basic.write
                  [xself]
                    memory > xdoc
                    memory > xsourcefile
                    memory > xtree
                    memory > xparser
                    seq > @
                      seq
                        xdoc.write ((((xET).xXML)) ("<html><body>this is a <i>paragraph</i>.</body>..</html>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xdoc)))) ((((unsupported)) ("html") ("body") ("i"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) (((((xdoc).xfind)) ("body"))))) ((((unsupported)) ("body") ("i"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnext)) (((((xdoc).xiter)) 0))).xtag)) ("html"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xdoc).xitertext)) 0)))) ("this is a paragraph..."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((((((xdoc).xfind)) ("body")).xitertext)) 0)))) ("this is a paragraph."))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) (((((xdoc).xitertext)) 0)))) ("this is a "))
                        xsourcefile.write (((unsupported)) ((xserialize)) ((xdoc)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xnext)) (((((xET).xiterparse)) ((xsourcefile)))))) (0))) ("end"))
                        xsourcefile.write (((unsupported)) ((xserialize)) ((xdoc)) (FALSE))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) (((((xET).xTreeBuilder)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xnext)) ((((unsupported)) (((xET).xiterparse)) ((xsourcefile)) ((xparser)))))) (0))) ("end"))
                        xtree.write ((((xET).xElementTree)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) (((xtree).xiter)))
                        xdoc.write ((((xET).xXML)) ("<root>a&amp;<sub>b&amp;</sub>c&amp;</root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xdoc).xitertext)) 0)))) ("a&b&c&"))
                xtest_corners.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xa)))) ((((unsupported)) ("a"))))
                        xb.write ((((xET).xSubElement)) ((xa)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xa)))) ((((unsupported)) ("a") ("b"))))
                        xc.write ((((xET).xSubElement)) ((xb)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xa)))) ((((unsupported)) ("a") ("b") ("c"))))
                        xd.write ((((xET).xSubElement)) ((xa)) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xa)))) ((((unsupported)) ("a") ("b") ("c") ("d"))))
                        (((unsupported)) ((((unsupported)) ((xa)) (0))) ((((unsupported)) ((xa)) (1))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xa)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xa)))) ((((unsupported)) ("a") ("d"))))
                xtest_iter_by_tag.write
                  [xself]
                    memory > xdoc
                    memory > xall_tags
                    seq > @
                      seq
                        xdoc.write ((((xET).xXML)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xdoc)) ("room"))) (((((unsupported)) ("room")).mul 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xdoc)) ("house"))) (((((unsupported)) ("house")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((((unsupported)) (((xdoc).xiter)) ("room"))))) (((((unsupported)) ("room")).mul 3)))
                        xall_tags.write (((unsupported)) ("document") ("house") ("room") ("room") ("shed") ("house") ("room"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xiter)) 0)))) ((xall_tags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xdoc)))) ((xall_tags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_ilist)) ((xdoc)) ("*"))) ((xall_tags)))
                xtest_getiterator.write
                  [xself]
                    memory > xdoc
                    memory > xall_tags
                    seq > @
                      (((unsupported)) 0)
                        xdoc.write ((((xET).xXML)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xgetiterator)) ("room"))))) (((((unsupported)) ("room")).mul 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xgetiterator)) ("house"))))) (((((unsupported)) ("house")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) ((((unsupported)) (((xdoc).xgetiterator)) ("room"))))) (((((unsupported)) ("room")).mul 3)))
                        xall_tags.write (((unsupported)) ("document") ("house") ("room") ("room") ("shed") ("house") ("room"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xgetiterator)) 0)))) ((xall_tags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xgetiterator)) ("None: is there a None literal in the EO language?"))))) ((xall_tags)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsummarize_list)) (((((xdoc).xgetiterator)) ("*"))))) ((xall_tags)))
                xtest_copy.write
                  [xself]
                    memory > xit
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        xit.write ((((xa).xiter)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xcopy).xcopy)) ((xit)))
                xtest_pickle.write
                  [xself]
                    memory > xit
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xET).xElement)) ("a"))
                        xit.write ((((xa).xiter)) 0)
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xTypeError)) (((xpickle).xPicklingError)))))))
                            bogusForceDataize.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsample1.write "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html>text<div>subtext</div>tail</html>"
                xsample2.write "<toplevel>sometext</toplevel>"
                x_check_sample1_element.write
                  [xself xe]
                    memory > xchild
                    memory > xchildren
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("html"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtext)) ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtail)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xattrib)) ((((unsupported)) 0)))
                        xchildren.write (((xlist)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xchildren)))) (1))
                        xchild.write (((unsupported)) ((xchildren)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xchild).xtag)) ("div"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xchild).xtext)) ("subtext"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xchild).xtail)) ("tail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xchild).xattrib)) ((((unsupported)) 0)))
                xtest_dummy_builder.write
                  [xself]
                    memory > xdata
                    memory > xclose
                    memory > xstart
                    memory > xparser
                    memory > xend
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xclose.write
                            [xself]
                              seq > @
                                (((unsupported)) (42))
                        (((unsupported)) ((xBaseDummyBuilder)))
                          (((unsupported)) ((xdata)) ((xstart)) ((xend)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xDummyBuilder)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xclose)) 0)) (42))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xBaseDummyBuilder)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xclose)) 0)) (42))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
                xtest_treebuilder_comment.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xET).xTreeBuilder)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xcomment)) ("ctext")).xtag)) (((xET).xComment)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xcomment)) ("ctext")).xtext)) ("ctext"))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) (((xET).xComment)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xcomment)) ("ctext")).xtag)) (((xET).xComment)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xcomment)) ("ctext")).xtext)) ("ctext"))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) ((xlen)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xb).xcomment)) ("ctext"))) ((((xlen)) ("ctext"))))
                xtest_treebuilder_pi.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xET).xTreeBuilder)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("target") ("None: is there a None literal in the EO language?")).xtag)) (((xET).xPI)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("target") ("None: is there a None literal in the EO language?")).xtext)) ("target"))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) (((xET).xPI)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("target")).xtag)) (((xET).xPI)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("target")).xtext)) ("target"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("pitarget") (" text ")).xtag)) (((xET).xPI)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xb).xpi)) ("pitarget") (" text ")).xtext)) ("pitarget  text "))
                        xb.write (((unsupported)) (((xET).xTreeBuilder)) ((((unsupported)) ((((unsupported)) ((((xlen)) ((xtarget)))) ((xtext)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xb).xpi)) ("target"))) ((((unsupported)) ((((xlen)) ("target"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xb).xpi)) ("pitarget") (" text "))) ((((unsupported)) ((((xlen)) ("pitarget"))) (" text "))))
                xtest_late_tail.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) (((xET).xTreeBuilder)))
                        xxml.write "<a>text<!-- comment -->tail</a>"
                        xa.write ((((xET).xfromstring)) ((xxml)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("texttail"))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xTreeBuilderSubclass)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("texttail"))
                        xxml.write "<a>text<?pi data?>tail</a>"
                        xa.write ((((xET).xfromstring)) ((xxml)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("texttail"))
                        xxml.write "<a>text<?pi data?>tail</a>"
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xTreeBuilderSubclass)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("texttail"))
                xtest_late_tail_mix_pi_comments.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) (((xET).xTreeBuilder)))
                        xxml.write "<a>text<?pi1?> <!-- comment -->n<?pi2?>tail</a>"
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) (((xET).xTreeBuilder)) (TRUE))))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtext)) (" comment "))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtail)) ("ntail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("text "))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) ((xTreeBuilderSubclass)) (TRUE))))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtext)) (" comment "))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtail)) ("ntail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("text "))
                        xxml.write "<a>text<!-- comment -->n<?pi data?>tail</a>"
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) (((xET).xTreeBuilder)) (TRUE))))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtext)) ("pi data"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtail)) ("tail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("textn"))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) ((xTreeBuilderSubclass)) (TRUE))))
                        bogusForceDataize.write ((((xparser).xfeed)) ((xxml)))
                        xa.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtext)) ("pi data"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xa)) (0)).xtail)) ("tail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtext)) ("textn"))
                xtest_treebuilder_elementfactory_none.write
                  [xself]
                    memory > xe
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) (((xET).xTreeBuilder)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        xe.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).x_check_sample1_element)) ((xe)))
                xtest_subclass.write
                  [xself]
                    memory > xe
                    memory > xtb
                    memory > xfoobar
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) (((xET).xTreeBuilder)))
                          xfoobar.write
                            [xself xx]
                              seq > @
                                (((unsupported)) (((xx).mul 2)))
                        xtb.write (((xMyTreeBuilder)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtb).xfoobar)) (10))) (20))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xtb)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        xe.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).x_check_sample1_element)) ((xe)))
                xtest_subclass_comment_pi.write
                  [xself]
                    memory > xe
                    memory > xtb
                    memory > xfoobar
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) (((xET).xTreeBuilder)))
                          xfoobar.write
                            [xself xx]
                              seq > @
                                (((unsupported)) (((xx).mul 2)))
                        xtb.write (((unsupported)) ((xMyTreeBuilder)) (((xET).xComment)) (((xET).xPI)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtb).xfoobar)) (10))) (20))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xtb)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xparser).xfeed)) ("<!-- a comment--><?and a pi?>"))
                        xe.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).x_check_sample1_element)) ((xe)))
                xtest_element_factory.write
                  [xself]
                    memory > xtb
                    memory > xmyfactory
                    memory > xparser
                    memory > xlst
                    seq > @
                      seq
                        xlst.write (((unsupported)) 0)
                        xmyfactory.write
                          [xtag xattrib]
                            seq > @
                              seq
                                (((unsupported)) 0)
                                bogusForceDataize.write ((((xlst).xappend)) ((xtag)))
                                (((unsupported)) (((((xET).xElement)) ((xtag)) ((xattrib)))))
                        xtb.write (((unsupported)) (((xET).xTreeBuilder)) ((xmyfactory)))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xtb)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample2)))
                        bogusForceDataize.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlst)) ((((unsupported)) ("toplevel"))))
                x_check_element_factory_class.write
                  [xself xcls]
                    memory > xe
                    memory > xtb
                    memory > xparser
                    seq > @
                      seq
                        xtb.write (((unsupported)) (((xET).xTreeBuilder)) ((xcls)))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((xtb)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        xe.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xe)) ((xcls)))
                        bogusForceDataize.write ((((xself).x_check_sample1_element)) ((xe)))
                xtest_element_factory_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xET).xElement)))
                        bogusForceDataize.write ((((xself).x_check_element_factory_class)) ((xMyElement)))
                xtest_element_factory_pure_python_subclass.write
                  [xself]
                    memory > xbase
                    seq > @
                      seq
                        xbase.write ((xET).x_Element_Py)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xbase).x__module__)) ("xml.etree.ElementTree"))
                        (((unsupported)) ((xbase)) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_check_element_factory_class)) ((xMyElement)))
                xtest_doctype.write
                  [xself]
                    memory > xdoctype
                    memory > x_doctype
                    memory > xclose
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x_doctype.write "None: is there a None literal in the EO language?"
                            xdoctype.write
                              [xself xname xpubid xsystem]
                                seq > @
                                  (((unsupported)) (((xself).x_doctype)) ((((unsupported)) ((xname)) ((xpubid)) ((xsystem)))))
                            xclose.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).x_doctype)))
                        xparser.write (((unsupported)) (((xET).xXMLParser)) ((((xDoctypeParser)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xclose)) 0)) ((((unsupported)) ("html") ("-//W3C//DTD XHTML 1.0 Transitional//EN") ("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"))))
                xtest_builder_lookup_errors.write
                  [xself]
                    memory > x__getattr__
                    memory > xparser
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xraise_in xwhat]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) (((xself).xraise_in)) ((xraise_in)))
                                    (((unsupported)) (((xself).xwhat)) ((xwhat)))
                            x__getattr__.write
                              [xself xname]
                                memory > xhandle
                                seq > @
                                  seq
                                    ((xname).eq ((xself).xraise_in)).if
                                      (((unsupported)) (((((xself).xwhat)) (((xself).xraise_in)))))
                                    xhandle.write
                                      []
                                        seq > @
                                          (((unsupported)) 0)
                                    (((unsupported)) ((xhandle)))
                        (((unsupported)) (((xET).xXMLParser)) ((((xRaisingBuilder)) 0)))
                        (((unsupported)) ((xevent)) ((((unsupported)) ("start") ("data") ("end") ("comment") ("pi"))))
                          (((unsupported)) (((((xself).xassertRaisesRegex)) ((xValueError)) ((xevent)))))
                            (((unsupported)) (((xET).xXMLParser)) ((((xRaisingBuilder)) ((xevent)))))
                        (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) ((xRaisingBuilder)) ((xAttributeError)))))
                        (((unsupported)) ((xevent)) ((((unsupported)) ("start") ("data") ("end") ("comment") ("pi"))))
                          seq
                            xparser.write (((unsupported)) (((xET).xXMLParser)) ((((unsupported)) ((xRaisingBuilder)) ((xevent)) ((xAttributeError)))))
                            bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xclose)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsample1.write "<file><line>22</line></file>"
                xsample2.write "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html>text</html>"
                xsample3.write "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>n<money value=\"$xa3u20acU0001017b\">$xa3u20acU0001017b</money>"
                x_check_sample_element.write
                  [xself xe]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("file"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) (0)).xtag)) ("line"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) (0)).xtext)) ("22"))
                xtest_constructor_args.write
                  [xself]
                    memory > xparser2
                    seq > @
                      seq
                        xparser2.write (((unsupported)) (((xET).xXMLParser)) ("utf-8") (((((xET).xTreeBuilder)) 0)))
                        bogusForceDataize.write ((((xparser2).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).x_check_sample_element)) (((((xparser2).xclose)) 0)))
                xtest_subclass.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)) (((xET).xXMLParser)))
                        xparser.write (((xMyParser)) 0)
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample1)))
                        bogusForceDataize.write ((((xself).x_check_sample_element)) (((((xparser).xclose)) 0)))
                xtest_doctype_warning.write
                  [xself]
                    memory > xparser
                    seq > @
                      (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                        seq
                          bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xDeprecationWarning)))
                          xparser.write ((((xET).xXMLParser)) 0)
                          bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample2)))
                          bogusForceDataize.write ((((xparser).xclose)) 0)
                xtest_subclass_doctype.write
                  [xself]
                    memory > xdoctype
                    memory > x_doctype
                    memory > x_doctype2
                    memory > xparser
                    seq > @
                      seq
                        x_doctype.write "None: is there a None literal in the EO language?"
                        (((unsupported)) (((xET).xXMLParser)))
                          xdoctype.write
                            [xself]
                              memory > x_doctype
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) 0)
                                  x_doctype.write (((unsupported)) ((xargs)) ((xkwargs)))
                        xparser.write (((xMyParserWithDoctype)) 0)
                        (((unsupported)) (((((xself).xassertWarnsRegex)) ((xRuntimeWarning)) ("doctype"))))
                          bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample2)))
                        bogusForceDataize.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((x_doctype)))
                        (((unsupported)) ((x_doctype)) ((x_doctype2)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xRuntimeWarning)))
                            (((unsupported)) 0)
                              xdoctype.write
                                [xself xname xpubid xsystem]
                                  memory > x_doctype2
                                  seq > @
                                    seq
                                      (((unsupported)) 0)
                                      x_doctype2.write (((unsupported)) ((xname)) ((xpubid)) ((xsystem)))
                            xparser.write (((unsupported)) ((xMyParserWithDoctype)) ((((xDoctypeParser)) 0)))
                            bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample2)))
                            bogusForceDataize.write ((((xparser).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((x_doctype)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((x_doctype2)) ((((unsupported)) ("html") ("-//W3C//DTD XHTML 1.0 Transitional//EN") ("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"))))
                xtest_inherited_doctype.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xRuntimeWarning)))
                            (((unsupported)) (((xET).xXMLParser)))
                            xparser.write (((xMyParserWithoutDoctype)) 0)
                            bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample2)))
                            bogusForceDataize.write ((((xparser).xclose)) 0)
                xtest_parse_string.write
                  [xself]
                    memory > xe
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)) (((xET).xXMLParser)) (((((xET).xTreeBuilder)) 0)))
                        bogusForceDataize.write ((((xparser).xfeed)) (((xself).xsample3)))
                        xe.write ((((xparser).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("money"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xattrib)) ("value"))) ("$xa3u20acU0001017b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtext)) ("$xa3u20acU0001017b"))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_find_with_namespace.write
                [xself]
                  memory > xdoc
                  memory > xnsmap
                  seq > @
                    seq
                      xnsmap.write (((unsupported)) ("h") ("hello") ("f") ("foo"))
                      xdoc.write ((((xET).xfromstring)) ((xSAMPLE_XML_NS_ELEMS)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xdoc).xfindall)) ("{hello}table") ((xnsmap)))))) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xdoc).xfindall)) (".//{hello}td") ((xnsmap)))))) (2))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xdoc).xfindall)) (".//{foo}name") ((xnsmap)))))) (1))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                x_elem_tags.write
                  [xself xelemlist]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xe).xtag)) ((xe)) ((xelemlist)))))
                x_subelem_tags.write
                  [xself xelem]
                    seq > @
                      (((unsupported)) (((((xself).x_elem_tags)) ((((xlist)) ((xelem)))))))
                x_make_elem_with_children.write
                  [xself xnumchildren]
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xe.write ((((xET).xElement)) ("a"))
                        (((unsupported)) ((xi)) ((((xrange)) ((xnumchildren)))))
                          bogusForceDataize.write ((((xET).xSubElement)) ((xe)) (("a%s".mod (xi))))
                        (((unsupported)) ((xe)))
                xtest_getslice_single_index.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) (1)).xtag)) ("a1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xe)) ((2.neg))).xtag)) ("a8"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) ((((unsupported)) ((((unsupported)) ((xe)) (12))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) ((((unsupported)) ((((unsupported)) ((xe)) ((12.neg)))))))
                xtest_getslice_range.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3))))))) ((((unsupported)) ("a3") ("a4") ("a5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) (6))))))) ((((unsupported)) ("a3") ("a4") ("a5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) (16))))))) ((((unsupported)) ("a3") ("a4") ("a5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) (5))))))) ((((unsupported)) ("a3") ("a4"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) ((1.neg)))))))) ((((unsupported)) ("a3") ("a4"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (2))))))) ((((unsupported)) ("a0") ("a1"))))
                xtest_getslice_steps.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (8) (10) (1))))))) ((((unsupported)) ("a8") ("a9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3))))))) ((((unsupported)) ("a0") ("a3") ("a6") ("a9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (8))))))) ((((unsupported)) ("a0") ("a8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (8))))))) ((((unsupported)) ("a1") ("a9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) (((xsys).xmaxsize)))))))) ((((unsupported)) ("a3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) ((((unsupported)) (((xsys).xmaxsize)) (64))))))))) ((((unsupported)) ("a3"))))
                xtest_getslice_negative_steps.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) ((1.neg)))))))) ((((unsupported)) ("a3") ("a2") ("a1") ("a0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) ((2.neg)))))))) ((((unsupported)) ("a3") ("a1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) ((((xsys).xmaxsize).neg)))))))) ((((unsupported)) ("a3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) (((((xsys).xmaxsize).neg).sub 1)))))))) ((((unsupported)) ("a3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_elem_tags)) ((((unsupported)) ((xe)) ((((unsupported)) (3) ((((unsupported)) ((((xsys).xmaxsize).neg)) (64))))))))) ((((unsupported)) ("a3"))))
                xtest_delslice.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (0) (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a2") ("a3"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) 0)))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) 0)))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) ((2.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("a2"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("a2"))))
                        xe.write ((((xself).x_make_elem_with_children)) (2))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a1"))))
                xtest_setslice_single_index.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) (1))) (((((xET).xElement)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("a2") ("a3"))))
                        (((unsupported)) ((((unsupported)) ((xe)) ((2.neg)))) (((((xET).xElement)) ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("c") ("a3"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) (5))) (((((xET).xElement)) ("d"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((5.neg)))) (((((xET).xElement)) ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("c") ("a3"))))
                xtest_setslice_range.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (3))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b0") ("b1") ("a3"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (3))))) ((((unsupported)) (((((xET).xElement)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("a3"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (3))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b0") ("b1") ("b2") ("a3"))))
                xtest_setslice_steps.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (6))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (5) (2))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b0") ("a2") ("b1") ("a4") ("a5"))))
                        xe.write ((((xself).x_make_elem_with_children)) (6))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (5) (2))))) ((((unsupported)) (((((xET).xElement)) ("b"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (5) (2))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (3))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (5) (2))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("a1") ("a2") ("a3") ("a4") ("a5"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (((xsys).xmaxsize)))))) ((((unsupported)) (((((xET).xElement)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("a2") ("a3"))))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) ((((unsupported)) (((xsys).xmaxsize)) (64))))))) ((((unsupported)) (((((xET).xElement)) ("c"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("c") ("a2") ("a3"))))
                xtest_setslice_negative_steps.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (2) (0) ((1.neg)))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b1") ("b0") ("a3"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (2) (0) ((1.neg)))))) ((((unsupported)) (((((xET).xElement)) ("b"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (2) (0) ((1.neg)))))) ((((unsupported)) (((((xET).xElement)) (("b%s".mod (xi))))) ((xi)) ((((xrange)) (3))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (2) (0) ((1.neg)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("a1") ("a2") ("a3"))))
                        xe.write ((((xself).x_make_elem_with_children)) (4))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) ((((xsys).xmaxsize).neg)))))) ((((unsupported)) (((((xET).xElement)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("b") ("a2") ("a3"))))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) (((((xsys).xmaxsize).neg).sub 1)))))) ((((unsupported)) (((((xET).xElement)) ("c"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("c") ("a2") ("a3"))))
                        (((unsupported)) ((((unsupported)) ((xe)) ((((unsupported)) (1) ((((unsupported)) ((((xsys).xmaxsize).neg)) (64))))))) ((((unsupported)) (((((xET).xElement)) ("d"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).x_subelem_tags)) ((xe)))) ((((unsupported)) ("a0") ("d") ("a2") ("a3"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_encoding.write
                  [xself]
                    memory > xupper
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) (((xelem).xtext)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ("<tag>abc</tag>"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("utf-8") ("us-ascii"))))
                          (((unsupported)) (((((xself).xsubTest)) ((xenc)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ("<tag>abc</tag>"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) (((((xenc).xupper)) 0)))) ("<tag>abc</tag>"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("iso-8859-1") ("utf-16") ("utf-32"))))
                          (((unsupported)) (((((xself).xsubTest)) ((xenc)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag>abc</tag>".mod (xenc)).xencode)) ((xenc)))))
                              xupper.write ((((xenc).xupper)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xupper)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag>abc</tag>".mod (xupper)).xencode)) ((xenc)))))
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) (((xelem).xtext)) ("<&\"'>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ("<tag>&lt;&amp;\"'&gt;</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("utf-8"))) ("<tag>&lt;&amp;\"'&gt;</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("us-ascii"))) ("<tag>&lt;&amp;\"'&gt;</tag>"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("iso-8859-1") ("utf-16") ("utf-32"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag>&lt;&amp;\"'&gt;</tag>".mod (xenc)).xencode)) ((xenc)))))
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("key"))) ("<&\"'>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ("<tag key=\"&lt;&amp;&quot;'&gt;\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("utf-8"))) ("<tag key=\"&lt;&amp;&quot;'&gt;\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("us-ascii"))) ("<tag key=\"&lt;&amp;&quot;'&gt;\" />"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("iso-8859-1") ("utf-16") ("utf-32"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag key=\"&lt;&amp;&quot;'&gt;\" />".mod (xenc)).xencode)) ((xenc)))))
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) (((xelem).xtext)) ("xe5xf6xf6<>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ("<tag>xe5xf6xf6&lt;&gt;</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("utf-8"))) ("<tag>xc3xa5xc3xb6xc3xb6&lt;&gt;</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("us-ascii"))) ("<tag>&#229;&#246;&#246;&lt;&gt;</tag>"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("iso-8859-1") ("utf-16") ("utf-32"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag>åöö&lt;&gt;</tag>".mod (xenc)).xencode)) ((xenc)))))
                        xelem.write ((((xET).xElement)) ("tag"))
                        (((unsupported)) ((((unsupported)) (((xelem).xattrib)) ("key"))) ("xe5xf6xf6<>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xserialize)) ((xelem)))) ("<tag key=\"xe5xf6xf6&lt;&gt;\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("utf-8"))) ("<tag key=\"xc3xa5xc3xb6xc3xb6&lt;&gt;\" />"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ("us-ascii"))) ("<tag key=\"&#229;&#246;&#246;&lt;&gt;\" />"))
                        (((unsupported)) ((xenc)) ((((unsupported)) ("iso-8859-1") ("utf-16") ("utf-16le") ("utf-16be") ("utf-32"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserialize)) ((xelem)) ((xenc)))) ((((("<?xml version='1.0' encoding='%s'?>n<tag key=\"åöö&lt;&gt;\" />".mod (xenc)).xencode)) ((xenc)))))
                xtest_write_to_filename.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN)))
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        bogusForceDataize.write ((((xtree).xwrite)) ((xTESTFN)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("<site />"))
                xtest_write_to_text_file.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN)))
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xTESTFN)) ("w") ("utf-8"))) ((xf)))
                          seq
                            (((unsupported)) (((xtree).xwrite)) ((xf)) ("unicode"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("<site />"))
                xtest_write_to_binary_file.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN)))
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xtree).xwrite)) ((xf)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) ("<site />"))
                xtest_write_to_binary_file_with_bom.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xunlink)) ((xTESTFN)))
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("wb"))) ((xf)))
                          seq
                            (((unsupported)) (((xtree).xwrite)) ((xf)) ("utf-16"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("<?xml version='1.0' encoding='utf-16'?>n<site />".xencode)) ("utf-16"))))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xTESTFN)) ("wb") (0))) ((xf)))
                          seq
                            (((unsupported)) (((xtree).xwrite)) ((xf)) ("utf-16"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xf).xclosed)))
                        (((unsupported)) ((((xopen)) ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xf).xread)) 0)) (((("<?xml version='1.0' encoding='utf-16'?>n<site />".xencode)) ("utf-16"))))
                xtest_read_from_stringio.write
                  [xself]
                    memory > xstream
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) 0)
                        xstream.write ((((xio).xStringIO)) ("<?xml version=\"1.0\"?><site></site>"))
                        bogusForceDataize.write ((((xtree).xparse)) ((xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xgetroot)) 0).xtag)) ("site"))
                xtest_write_to_stringio.write
                  [xself]
                    memory > xstream
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        xstream.write ((((xio).xStringIO)) 0)
                        (((unsupported)) (((xtree).xwrite)) ((xstream)) ("unicode"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstream).xgetvalue)) 0)) ("<site />"))
                xtest_read_from_bytesio.write
                  [xself]
                    memory > xraw
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) 0)
                        xraw.write ((((xio).xBytesIO)) ("<?xml version=\"1.0\"?><site></site>"))
                        bogusForceDataize.write ((((xtree).xparse)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xgetroot)) 0).xtag)) ("site"))
                xtest_write_to_bytesio.write
                  [xself]
                    memory > xraw
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        xraw.write ((((xio).xBytesIO)) 0)
                        bogusForceDataize.write ((((xtree).xwrite)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("<site />"))
                (((unsupported)) 0)
                xtest_read_from_user_text_reader.write
                  [xself]
                    memory > xreader
                    memory > xstream
                    memory > xtree
                    seq > @
                      seq
                        xstream.write ((((xio).xStringIO)) ("<?xml version=\"1.0\"?><site></site>"))
                        xreader.write ((((xself).xdummy)) 0)
                        (((unsupported)) (((xreader).xread)) (((xstream).xread)))
                        xtree.write ((((xET).xElementTree)) 0)
                        bogusForceDataize.write ((((xtree).xparse)) ((xreader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xgetroot)) 0).xtag)) ("site"))
                xtest_write_to_user_text_writer.write
                  [xself]
                    memory > xwriter
                    memory > xstream
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        xstream.write ((((xio).xStringIO)) 0)
                        xwriter.write ((((xself).xdummy)) 0)
                        (((unsupported)) (((xwriter).xwrite)) (((xstream).xwrite)))
                        (((unsupported)) (((xtree).xwrite)) ((xwriter)) ("unicode"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstream).xgetvalue)) 0)) ("<site />"))
                xtest_read_from_user_binary_reader.write
                  [xself]
                    memory > xreader
                    memory > xraw
                    memory > xtree
                    seq > @
                      seq
                        xraw.write ((((xio).xBytesIO)) ("<?xml version=\"1.0\"?><site></site>"))
                        xreader.write ((((xself).xdummy)) 0)
                        (((unsupported)) (((xreader).xread)) (((xraw).xread)))
                        xtree.write ((((xET).xElementTree)) 0)
                        bogusForceDataize.write ((((xtree).xparse)) ((xreader)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xgetroot)) 0).xtag)) ("site"))
                        xtree.write ((((xET).xElementTree)) 0)
                xtest_write_to_user_binary_writer.write
                  [xself]
                    memory > xraw
                    memory > xtree
                    memory > xwriter
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        xraw.write ((((xio).xBytesIO)) 0)
                        xwriter.write ((((xself).xdummy)) 0)
                        (((unsupported)) (((xwriter).xwrite)) (((xraw).xwrite)))
                        bogusForceDataize.write ((((xtree).xwrite)) ((xwriter)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) ("<site />"))
                xtest_write_to_user_binary_writer_with_bom.write
                  [xself]
                    memory > xraw
                    memory > xtree
                    memory > xwriter
                    seq > @
                      seq
                        xtree.write ((((xET).xElementTree)) (((((xET).xXML)) ("<site />"))))
                        xraw.write ((((xio).xBytesIO)) 0)
                        xwriter.write ((((xself).xdummy)) 0)
                        (((unsupported)) (((xwriter).xwrite)) (((xraw).xwrite)))
                        (((unsupported)) (((xwriter).xseekable)) ((((unsupported)) (TRUE))))
                        (((unsupported)) (((xwriter).xtell)) (((xraw).xtell)))
                        (((unsupported)) (((xtree).xwrite)) ((xwriter)) ("utf-16"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xraw).xgetvalue)) 0)) (((("<?xml version='1.0' encoding='utf-16'?>n<site />".xencode)) ("utf-16"))))
                xtest_tostringlist_invariant.write
                  [xself]
                    memory > xroot
                    seq > @
                      seq
                        xroot.write ((((xET).xfromstring)) ("<tag>foo</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xroot)) ("unicode"))) (((("".xjoin)) (((((xET).xtostringlist)) ((xroot)) ("unicode"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xroot)) ("utf-16"))) (((("".xjoin)) (((((xET).xtostringlist)) ((xroot)) ("utf-16"))))))
                xtest_short_empty_elements.write
                  [xself]
                    memory > xroot
                    seq > @
                      seq
                        xroot.write ((((xET).xfromstring)) ("<tag>a<x />b<y></y>c</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xET).xtostring)) ((xroot)) ("unicode"))) ("<tag>a<x />b<y />c</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xroot)) ("unicode") (TRUE))) ("<tag>a<x />b<y />c</tag>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xET).xtostring)) ((xroot)) ("unicode") (FALSE))) ("<tag>a<x></x>b<y></y>c</tag>"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_subclass.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)) (((((xET).xParseError)) 0)) ((xSyntaxError)))
                x_get_error.write
                  [xself xs]
                    seq > @
                      (((unsupported)) (((xET).xParseError)))
                        bogusForceDataize.write ((((xET).xfromstring)) ((xs)))
                        (((unsupported)) ((xe)))
                xtest_error_position.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).x_get_error)) ("foo")).xposition)) ((((unsupported)) (1) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).x_get_error)) ("<tag>&foo;</tag>")).xposition)) ((((unsupported)) (1) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).x_get_error)) ("foobar<")).xposition)) ((((unsupported)) (1) (6))))
                xtest_error_code.write
                  [xself]
                    memory > xERRORS
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).x_get_error)) ("foo")).xcode)) ((((unsupported)) (((xERRORS).xcodes)) (((xERRORS).xXML_ERROR_SYNTAX)))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_issue14818.write
                [xself]
                  memory > xelements
                  memory > xx
                  memory > xe2
                  seq > @
                    seq
                      xx.write ((((xET).xXML)) ("<a>foo</a>"))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xfind)) ("a") ("None: is there a None literal in the EO language?"))) ((((unsupported)) (((xx).xfind)) ("a") ("None: is there a None literal in the EO language?"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xfindtext)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)) (((xx).xfindtext)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xfindall)) ("a") ("None: is there a None literal in the EO language?"))) ((((unsupported)) (((xx).xfindall)) ("a") ("None: is there a None literal in the EO language?"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xx).xiterfind)) ("a") ("None: is there a None literal in the EO language?"))))) ((((xlist)) ((((unsupported)) (((xx).xiterfind)) ("a") ("None: is there a None literal in the EO language?"))))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xET).xElement)) ("a")).xattrib)) ((((unsupported)) 0)))
                      xelements.write (((unsupported)) (((((xET).xElement)) ("a") ((((unsupported)) ((xdict)) ("#") ("foo"))))) ((((unsupported)) (((xET).xElement)) ("a") ((((unsupported)) ((xdict)) ("#") ("foo"))))) ((((unsupported)) (((xET).xElement)) ("a") ((((unsupported)) ((xdict)) ("#"))) ("foo"))) ((((unsupported)) (((xET).xElement)) ("a") ("#") ("foo"))) ((((unsupported)) (((xET).xElement)) ("a") ((((unsupported)) ((xdict)) ("#") ("foo"))) ("#") ("foo"))))
                      (((unsupported)) ((xe)) ((xelements)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("a"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xattrib)) ((((unsupported)) ((xdict)) ("#") ("foo"))))
                      xe2.write (((unsupported)) (((xET).xSubElement)) ((((unsupported)) ((xelements)) (0))) ("foobar") ((((unsupported)) ("key1") ("value1"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe2).xattrib)) ("key1"))) ("value1"))
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("must be dict, not str"))))
                        bogusForceDataize.write ((((xET).xElement)) ("a") ("I'm not a dict"))
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("must be dict, not str"))))
                        (((unsupported)) (((xET).xElement)) ("a") ("I'm not a dict"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      ((xpyET).not).if
                        (((unsupported)) (((((xunittest).xSkipTest)) ("only for the Python version"))))
                xtest_correct_import_pyET.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xpyET).xElement).x__init__)) (((xtypes).xFunctionType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xpyET).xXMLParser).x__init__)) (((xtypes).xFunctionType)))
            xc14n_roundtrip.write
              [xxml]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) (((((xpyET).xcanonicalize)) ((xxml)) ((((unsupported)) ((xoptions)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_simple_roundtrip.write
                  [xself]
                    memory > xxml
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<doc/>"))) ("<doc></doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<doc xmlns='uri'/>"))) ("<doc xmlns=\"uri\"></doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<prefix:doc xmlns:prefix='uri'/>"))) ("<prefix:doc xmlns:prefix=\"uri\"></prefix:doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<doc xmlns:prefix='uri'><prefix:bar/></doc>"))) ("<doc><prefix:bar xmlns:prefix=\"uri\"></prefix:bar></doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<elem xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd' xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' />"))) ("<elem></elem>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<doc>Hello, world!<!-- Comment 1 --></doc>"))) ("<doc>Hello, world!</doc>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<value>&#x32;</value>"))) ("<value>2</value>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<compute><![CDATA[value>\"0\" && value<\"10\" ?\"valid\":\"error\"]]></compute>"))) ("<compute>value&gt;\"0\" &amp;&amp; value&lt;\"10\" ?\"valid\":\"error\"</compute>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<compute expr='value>\"0\" &amp;&amp; value&lt;\"10\" ?\"valid\":\"error\"'>valid</compute>"))) ("<compute expr=\"value>&quot;0&quot; &amp;&amp; value&lt;&quot;10&quot; ?&quot;valid&quot;:&quot;error&quot;\">valid</compute>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<norm attr=' &apos;   &#x20;&#13;&#xa;&#9;   &apos; '/>"))) ("<norm attr=\" '    &#xD;&#xA;&#x9;   ' \"></norm>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<normNames attr='   A   &#x20;&#13;&#xa;&#9;   B   '/>"))) ("<normNames attr=\"   A    &#xD;&#xA;&#x9;   B   \"></normNames>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ("<normId id=' &apos;   &#x20;&#13;&#xa;&#9;   &apos; '/>"))) ("<normId id=\" '    &#xD;&#xA;&#x9;   ' \"></normId>"))
                        xxml.write "<X xmlns=\"http://nps/a\"><Y targets=\"abc,xyz\"></Y></X>"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ((xxml)))) ((xxml)))
                        xxml.write "<X xmlns=\"http://nps/a\"><Y xmlns=\"http://nsp/b\" targets=\"abc,xyz\"></Y></X>"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ((xxml)))) ((xxml)))
                        xxml.write "<X xmlns=\"http://nps/a\"><Y xmlns:b=\"http://nsp/b\" b:targets=\"abc,xyz\"></Y></X>"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xc14n_roundtrip)) ((xxml)))) ((xxml)))
                xtest_c14n_exclusion.write
                  [xself]
                    memory > xxml
                    seq > @
                      seq
                        xxml.write ((((xtextwrap).xdedent)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE))) ("<root><a xmlns:x=\"http://example.com/x\" x:attr=\"attrx\"><b>abtext</b></a><b>btext</b><c><x:d xmlns:x=\"http://example.com/x\">dtext</x:d></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE) ((((unsupported)) ("{http://example.com/x}attr"))))) ("<root><a><b>abtext</b></a><b>btext</b><c><x:d xmlns:x=\"http://example.com/x\">dtext</x:d></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE) ((((unsupported)) ("{http://example.com/x}d"))))) ("<root><a xmlns:x=\"http://example.com/x\" x:attr=\"attrx\"><b>abtext</b></a><b>btext</b><c></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE) ((((unsupported)) ("{http://example.com/x}attr"))) ((((unsupported)) ("{http://example.com/x}d"))))) ("<root><a><b>abtext</b></a><b>btext</b><c></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE) ((((unsupported)) ("a") ("b"))))) ("<root><c><x:d xmlns:x=\"http://example.com/x\">dtext</x:d></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) ((((unsupported)) ("a") ("b"))))) ("<root>n    n    n    <c>n        <x:d xmlns:x=\"http://example.com/x\">dtext</x:d>n    </c>n</root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) (TRUE) ((((unsupported)) ("{http://example.com/x}d") ("b"))))) ("<root><a xmlns:x=\"http://example.com/x\" x:attr=\"attrx\"></a><c></c></root>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xc14n_roundtrip)) ((xxml)) ((((unsupported)) ("{http://example.com/x}d") ("b"))))) ("<root>n    <a xmlns:x=\"http://example.com/x\" x:attr=\"attrx\">n        n    </a>n    n    <c>n        n    </c>n</root>"))
                xtest_xml_c14n2.write
                  [xself]
                    memory > xconfig_descr
                    memory > xexpected
                    memory > xqtags
                    memory > xrewrite_prefixes
                    memory > xget_option
                    memory > xtests
                    memory > xconfigs
                    memory > xdatadir
                    memory > xinput_files
                    memory > xtext
                    memory > xf
                    memory > xkeep_comments
                    memory > xfiles
                    memory > xstrip_text
                    memory > xfull_path
                    memory > xqattrs
                    seq > @
                      seq
                        xdatadir.write (((unsupported)) ((xfindfile)) ("c14n-20") ("xmltestdata"))
                        xfull_path.write (((xpartial)) ((((xos).xpath).xjoin)) ((xdatadir)))
                        xfiles.write (((unsupported)) ((((unsupported)) ((xfilename)) ((((unsupported)) ((4.neg)))))) ((xfilename)) ((((xsorted)) (((((xos).xlistdir)) ((xdatadir)))))) (((((xfilename).xendswith)) (".xml"))))
                        xinput_files.write (((unsupported)) ((xfilename)) ((xfilename)) ((xfiles)) (((((xfilename).xstartswith)) ("in"))))
                        xconfigs.write (((unsupported)) ((xfilename)) ((((unsupported)) ((((unsupported)) ((((((xoption).xtag).xsplit)) ("}"))) ((1.neg)))) ((((unsupported)) (((((((xoption).xtext).or "").xstrip)) 0)) ((xoption)))) ((xoption)) ((((((((xET).xparse)) (((((xfull_path)) ((xfilename))).add ".xml"))).xgetroot)) 0)))) ((xfilename)) ((xfiles)) (((((xfilename).xstartswith)) ("c14n"))))
                        xtests.write (((unsupported)) ((xinput_file)) ((((unsupported)) ((((unsupported)) ((xfilename)) ((((unsupported)) ((xconfigs)) ((((unsupported)) (((((xfilename).xrsplit)) ("_") (1))) ((1.neg)))))))) ((xfilename)) ((xfiles)) ((((((xfilename).xstartswith)) ("out_{input_file}_")).and (((unsupported)) ((((unsupported)) (((((xfilename).xrsplit)) ("_") (1))) ((1.neg)))) ((xconfigs))))))) ((xinput_file)) ((xinput_files)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (30) ((((xlen)) ((((unsupported)) ((xoutput_file)) ((xoutput_files)) (((((xtests).xvalues)) 0)) ((xoutput_file)) ((xoutput_files)))))))
                        xget_option.write
                          [xconfig xoption_name xdefault]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) (((((xconfig).xget)) ((xoption_name)) ((((unsupported)) ((xdefault)) ((((unsupported)) 0)))))) (0))))
                        (((unsupported)) ((((unsupported)) ((xinput_file)) ((xoutput_files)))) (((((xtests).xitems)) 0)))
                          (((unsupported)) ((((unsupported)) ((xoutput_file)) ((xconfig)))) ((xoutput_files)))
                            seq
                              xkeep_comments.write ((((xget_option)) ((xconfig)) ("IgnoreComments")).eq "true")
                              xstrip_text.write ((((xget_option)) ((xconfig)) ("TrimTextNodes")).eq "true")
                              xrewrite_prefixes.write ((((xget_option)) ((xconfig)) ("PrefixRewrite")).eq "sequential")
                              (((unsupported)) ("QNameAware") ((xconfig))).if
                                seq
                                  xqattrs.write (((unsupported)) ("{{{el.get('NS')}}}{el.get('Name')}") ((xel)) (((((((unsupported)) ((((unsupported)) ((xconfig)) ("QNameAware"))) (1)).xfindall)) ("{http://www.w3.org/2010/xml-c14n2}QualifiedAttr"))))
                                  xqtags.write (((unsupported)) ("{{{el.get('NS')}}}{el.get('Name')}") ((xel)) (((((((unsupported)) ((((unsupported)) ((xconfig)) ("QNameAware"))) (1)).xfindall)) ("{http://www.w3.org/2010/xml-c14n2}Element"))))
                                (((unsupported)) ((xqtags)) ((xqattrs)) ("None: is there a None literal in the EO language?"))
                              xconfig_descr.write (((",".xjoin)) ((((unsupported)) ("{name}={value or ','.join(c.tag.split('}')[-1] for c in children)}") ((((unsupported)) ((xname)) ((((unsupported)) ((xvalue)) ((xchildren)))))) ((((xsorted)) (((((xconfig).xitems)) 0)))))))
                              (((unsupported)) (((((xself).xsubTest)) ("{output_file}({config_descr})"))))
                                seq
                                  (((xinput_file).eq "inNsRedecl").and ((xrewrite_prefixes).not)).if
                                    bogusForceDataize.write ((((xself).xskipTest)) ("Redeclared namespace handling is not supported in {output_file}"))
                                  (((xinput_file).eq "inNsSuperfluous").and ((xrewrite_prefixes).not)).if
                                    bogusForceDataize.write ((((xself).xskipTest)) ("Redeclared namespace handling is not supported in {output_file}"))
                                  ((((unsupported)) ("QNameAware") ((xconfig))).and (((unsupported)) (((((((unsupported)) ((((unsupported)) ((xconfig)) ("QNameAware"))) (1)).xfind)) ("{http://www.w3.org/2010/xml-c14n2}XPathElement"))) ("None: is there a None literal in the EO language?"))).if
                                    bogusForceDataize.write ((((xself).xskipTest)) ("QName rewriting in XPath text is not supported in {output_file}"))
                                  xf.write (((xfull_path)) (((xinput_file).add ".xml")))
                                  ((xinput_file).eq "inC14N5").if
                                    (((unsupported)) ((((xopen)) ((((xfull_path)) ("world.txt"))) ("rb"))) ((xentity_file)))
                                      (((unsupported)) ((((xopen)) ((xf)) ("rb"))) ((xf)))
                                        xf.write ((((xio).xBytesIO)) ((((((((xf).xread)) 0).xreplace)) ("&ent2;") (((((xentity_file).xread)) 0)))))
                                  xtext.write (((unsupported)) (((xET).xcanonicalize)) ((xf)) ((xkeep_comments)) ((xstrip_text)) ((xrewrite_prefixes)) ((xqtags)) ((xqattrs)))
                                  (((unsupported)) ((((unsupported)) ((xopen)) ((((xfull_path)) (((xoutput_file).add ".xml")))) ("r") ("utf8"))) ((xf)))
                                    seq
                                      xexpected.write ((((xf).xread)) 0)
                                      ((xinput_file).eq "inC14N3").if
                                        seq
                                          xexpected.write ((((xexpected).xreplace)) (" attr=\"default\"") (""))
                                          xtext.write ((((xtext).xreplace)) (" attr=\"default\"") (""))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xtext)))
            xtest_main.write
              [xmodule]
                memory > xpath_cache
                memory > xET
                memory > xpyET
                memory > xtest_classes
                memory > xnsmap_copy
                memory > xold_factories
                memory > xnsmap
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    xpyET.write (((unsupported)) ((ximport_fresh_module)) ("xml.etree.ElementTree") ((((unsupported)) ("_elementtree"))))
                    (((unsupported)) ((xmodule)) ("None: is there a None literal in the EO language?")).if
                      xmodule.write (xpyET)
                    (((unsupported)) 0)
                    xET.write (xmodule)
                    xtest_classes.write (((unsupported)) ((xModuleTest)) ((xElementSlicingTest)) ((xBasicElementTest)) ((xBadElementTest)) ((xBadElementPathTest)) ((xElementTreeTest)) ((xIOTest)) ((xParseErrorTest)) ((xXIncludeTest)) ((xElementTreeTypeTest)) ((xElementFindTest)) ((xElementIterTest)) ((xTreeBuilderTest)) ((xXMLParserTest)) ((xXMLPullParserTest)) ((xBugsTest)) ((xKeywordArgsTest)) ((xC14NTest)))
                    (((unsupported)) ((xpyET)) ((xET))).if
                      bogusForceDataize.write ((((xtest_classes).xextend)) ((((unsupported)) ((xNoAcceleratorTest)))))
                    (((unsupported)) 0)
                    xnsmap.write (((xET).xregister_namespace).x_namespace_map)
                    xnsmap_copy.write ((((xnsmap).xcopy)) 0)
                    xpath_cache.write ((xElementPath).x_cache)
                    (((unsupported)) (((xElementPath).x_cache)) (((((xpath_cache).xcopy)) 0)))
                    (((xhasattr)) ((xET)) ("_set_factories")).if
                      xold_factories.write ((((xET).x_set_factories)) (((xET).xComment)) (((xET).xPI)))
                      xold_factories.write "None: is there a None literal in the EO language?"
                    (((unsupported)) 0)
                      bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtest_classes)))))
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xnsmap).xclear)) 0)
                        bogusForceDataize.write ((((xnsmap).xupdate)) ((xnsmap_copy)))
                        (((unsupported)) (((xElementPath).x_cache)) ((xpath_cache)))
                        (((unsupported)) ((xold_factories)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xET).x_set_factories)) ((((unsupported)) ((xold_factories)))))
                        (((unsupported)) ((xET)) ((xpyET)) ("None: is there a None literal in the EO language?"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)