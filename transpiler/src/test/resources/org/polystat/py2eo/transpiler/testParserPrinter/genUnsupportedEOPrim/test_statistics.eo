memory > xempty
memory > xpublished_result
memory > xd
memory > xk
memory > xMyFraction
memory > xcopy
memory > xU
memory > xLognormalDist
memory > xmeta
memory > xmu
memory > xmin
memory > xvalues
memory > xnum
memory > xAverageMixin
memory > xNewNormalDist
memory > xcount
memory > xsigma
memory > xdata
memory > xall
memory > xpickle
memory > xlist
memory > xexpected
memory > xMyList
memory > xdecimal
memory > xexpected_mean
memory > xenumerate
memory > xpx
memory > xValueError
memory > xq3
memory > xz
memory > xNumericTestCase
memory > xstr
memory > xtried
memory > xq
memory > xMyTuple
memory > xrel_err1
memory > xrng
memory > xrange
memory > xmath
memory > xother
memory > xMyFloat
memory > xb
memory > xvalue
memory > xT
memory > xcollections
memory > xstatistics
memory > x_
memory > xMySubclass
memory > xVarianceStdevMixin
memory > xbase
memory > xmax
memory > xTestMedian
memory > xrandom
memory > xp
memory > xtype_
memory > xkind
memory > xtype
memory > xW
memory > xTestNormalDist
memory > xf
memory > xFraction
memory > xset
memory > xrepr
memory > xint
memory > xrel_err2
memory > xsubstring
memory > xbisect
memory > xhasattr
memory > xdoctest
memory > xgood_type
memory > xx
memory > xMyInt
memory > xrel_err
memory > xi
memory > xsuper
memory > xabs_err
memory > xrow
memory > xSubclassOfB
memory > xfname
memory > xsupport
memory > xUnivariateCommonMixin
memory > xsys
memory > xbool
memory > xissubclass
memory > xMyClass
memory > xq1
memory > xtuple
memory > xexp
memory > xNotImplemented
memory > xsorted
memory > xcum_prob
memory > xfloat
memory > xden
memory > xargs
memory > xobj
memory > xgetattr
memory > xV
memory > xvars
memory > xdatatype
memory > xX1
memory > xiter
memory > xe
memory > xSizedNormalDist
memory > xUnivariateTypeMixin
memory > xDecimal
memory > xname
memory > xzip
memory > xunittest
memory > xy
memory > xnan
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xA
memory > xbad_type
memory > xtyp
memory > xINF
memory > xabs
memory > xq2
memory > xisinstance
memory > xX2
memory > xSubclassOfA
memory > xinf
memory > xlen
memory > xMyDecimal
memory > xdict
memory > xTypeError
memory > x__name__
memory > xa
memory > xfailed
[] > test_statistics
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_unique_data
        memory > xexpected_metadata
        memory > xtest_exactly_equal_absolute
        memory > xtest_exactly_equal_fractions
        memory > xdo_approx_equal_abs_test
        memory > xtest_sample_generation
        memory > xtest_none_data
        memory > xtest_check_all
        memory > xdo_exactly_equal_test
        memory > xtest_decimal_basiccontext_mismatched_infs_to_nan
        memory > xtest_symmetry
        memory > xtest_approx_equal_absolute_fractions
        memory > xtest_no_args
        memory > xtest_approx_equal_both3
        memory > xtest_multiply_data_points
        memory > xtest_compare_with_math_fsum
        memory > xtest_torture
        memory > xtest_same_type_addition_and_subtraction
        memory > xtest_negative_error
        memory > xtest_float
        memory > xtest_doc_tests
        memory > xtest_float_nan
        memory > xdo_approx_equal_rel_test
        memory > xtest_start_argument
        memory > xassertApproxEqual
        memory > xtest_equal_sized_groups
        memory > xpy_statistics
        memory > xtest_special_values
        memory > xgenerate_substrings
        memory > x_calc_errors
        memory > xdo_test_inf
        memory > xrel
        memory > xtest_even_decimals
        memory > xtest_c_functions
        memory > xtest_exactly_equal_relative
        memory > xtest_pickle_and_copy
        memory > xtest_doubled_data
        memory > xdo_test
        memory > xcheck_type_coercions
        memory > xtest_exactly_unequal_floats
        memory > xtest_error_cases
        memory > xtest_zero
        memory > xtest_range_data
        memory > xtest_py_functions
        memory > xtest_ints
        memory > xtest_decimals_exact
        memory > xtest_equal_inputs
        memory > xtest_odd_fractions
        memory > xtest_bytes_fail
        memory > xtest_float_inf
        memory > xsign
        memory > xtest_error_msg_numeric
        memory > xtest_inv_cdf
        memory > xtest_exactly_equal_absolute_decimals
        memory > xtest_cdf
        memory > xtest_infinity
        memory > xtest_decimals
        memory > xtest_approx_equal_both2
        memory > xtest_domain_error_regression
        memory > xtest_bool
        memory > xcheck_for_type_error
        memory > xtest_exactly_equal_decimals
        memory > xtest_approx_equal_relative_floats
        memory > xtest_compare_to_variance
        memory > xtest_cross_zero
        memory > xtest_overlap
        memory > xtest_approx_equal_absolute_ints
        memory > xtest_incompatible_types
        memory > xtest_repr
        memory > xtest_has_exception
        memory > xtest_mismatched_infs
        memory > xtest_error_msg
        memory > xtest_single_value
        memory > xfunc_names
        memory > xtest_negatives_raise
        memory > xcheck_exact_equal
        memory > xtest_big_and_small
        memory > xprepare_values_for_repeated_single_test
        memory > xtest_approx_equal_both4
        memory > xtest_quantiles
        memory > xtestZeroes
        memory > xtest_interval
        memory > xcheck_coerce_to
        memory > xtest_exactly_equal_floats
        memory > xtest_singleton_lists
        memory > xtest_even_ints
        memory > xtest_decimal_zeroes
        memory > xdo_symmetry_test
        memory > xprepare_data
        memory > xsetUp
        memory > xtest_regression_20536
        memory > xtest_relative_symmetry
        memory > xc_statistics
        memory > xtest_translation_and_scaling
        memory > xtest_negative_exponent
        memory > xtest_bad_tol
        memory > xtest_exactly_unequal_fractions
        memory > xtest_big_data
        memory > xtest_positive_exponent
        memory > xtest_strings_fail
        memory > xtest_slots
        memory > xtest_floats_exact
        memory > xtest_fractions
        memory > xtest_approx_equal_relative_decimals
        memory > xtest_bad_rel
        memory > xtest_type_of_data_element
        memory > xtest_fraction
        memory > xtest_types_conserved
        memory > xtest_decimal
        memory > xtest_order_doesnt_matter
        memory > xtest_odd_ints
        memory > x_make_std_err_msg
        memory > xtest_repeated_single_value
        memory > xtest_approx_equal_absolute_floats
        memory > xtest_instantiation_and_attributes
        memory > xtest_specific_cases
        memory > xtest_approx_equal_both1
        memory > xtest_shift_data_exact
        memory > xtest_odd_decimals
        memory > xload_tests
        memory > xtest_pdf
        memory > xtest_float_mismatched_infs
        memory > xtest_shift_data
        memory > xtest_regression_20561
        memory > xmodule
        memory > xtest_even_number_repeated
        memory > xdo_exactly_unequal_test
        memory > xtest_odd_number_repeated
        memory > xassertCoerceRaises
        memory > x_check_approx_seq
        memory > xtest_non_numeric_types
        memory > xtest_nan
        memory > xtest_torture_pep
        memory > xtest_int
        memory > xtest_approx_equal_absolute_decimals
        memory > xtest_exactly_equal_ints
        memory > xtest_approx_equal_relative_ints
        memory > xtest_center_not_at_mean
        memory > x_nan_equal
        memory > xtest_basics
        memory > xapprox_equal
        memory > xdo_check_both
        memory > xtest_bad_arg_types
        memory > xtest_specific_cases_inclusive
        memory > xtest_no_inplace_modifications
        memory > xtest_exactly_unequal_decimals
        memory > xtest_data_type_error
        memory > xtest_decimal_extendedcontext_mismatched_infs_to_nan
        memory > xtest_type_of_data_collection
        memory > x_check_approx_num
        memory > xtest_bimodal_data
        memory > xtest_properties
        memory > xtol
        memory > xassertCoerceTo
        memory > xtest_float_zeroes
        memory > xtest_sign
        memory > xtest_various_input_types
        memory > xtest_even_fractions
        memory > xtest_numerictestcase_is_testcase
        memory > xtest_decimal_inf
        memory > xtest_floats
        memory > xtest_unary_operations
        memory > xtest_alternative_constructor
        memory > xtest_counter_data
        memory > xdo_relative_symmetry
        memory > xtest_exact_uniform
        memory > xtest_pass_through
        memory > xtest_finite
        memory > xtest_decimal_nan
        memory > xtearDown
        memory > xtest_meta
        memory > xtest_regression_25177
        memory > xtest_nominal_data
        memory > xtest_empty_data
        memory > xtest_equality
        memory > xprepare_types_for_conservation_test
        memory > xtest_inf
        memory > xtest_error_msg_sequence
        memory > xtest_mixed_sum
        memory > xtest_decimal_snan_raises
        memory > xtest_exactly_unequal_ints
        memory > xcheck_infinity
        memory > xtest_approx_equal_relative_fractions
        memory > xtest_exactly_equal_both
        memory > xtest_discrete_data
        memory > xtest_iter_list_same
        memory > xtest_hashability
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xsign.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) (((((xmath).xcopysign)) (1) ((xx)))))
            x_nan_equal.write
              [xa xb]
                memory > xaexp
                memory > xbexp
                seq > @
                  seq
                    (((unsupported)) 0)
                    (((unsupported)) ((((xtype)) ((xa)))) ((((xtype)) ((xb))))).if
                      (((unsupported)) (FALSE))
                    (((xisinstance)) ((xa)) ((xfloat))).if
                      (((unsupported)) ((((((xmath).xisnan)) ((xa))).and ((((xmath).xisnan)) ((xb))))))
                    xaexp.write (((unsupported)) (((((xa).xas_tuple)) 0)) (2))
                    xbexp.write (((unsupported)) (((((xb).xas_tuple)) 0)) (2))
                    (((unsupported)) ((((xaexp).eq (xbexp)).and (((unsupported)) ((xaexp)) ((((unsupported)) ("n") ("N")))))))
            x_calc_errors.write
              [xactual xexpected]
                memory > xbase
                memory > xabs_err
                memory > xrel_err
                seq > @
                  seq
                    (((unsupported)) 0)
                    xbase.write (((xmax)) ((((xabs)) ((xactual)))) ((((xabs)) ((xexpected)))))
                    xabs_err.write (((xabs)) (((xactual).sub (xexpected))))
                    xrel_err.write ((xbase).if ((xabs_err).div (xbase)) (((xfloat)) ("inf")))
                    (((unsupported)) ((((unsupported)) ((xabs_err)) ((xrel_err)))))
            xapprox_equal.write
              [xx xy xtol xrel]
                memory > xallowed_error
                memory > xactual_error
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((xtol).less 0).or ((xrel).less 0)).if
                      (((unsupported)) ((((xValueError)) ("error tolerances must be non-negative"))))
                    (((((xmath).xisnan)) ((xx))).or ((((xmath).xisnan)) ((xy)))).if
                      (((unsupported)) (FALSE))
                    ((xx).eq (xy)).if
                      (((unsupported)) (TRUE))
                    (((((xmath).xisinf)) ((xx))).or ((((xmath).xisinf)) ((xy)))).if
                      (((unsupported)) (FALSE))
                    xactual_error.write (((xabs)) (((xx).sub (xy))))
                    xallowed_error.write (((xmax)) ((xtol)) (((xrel).mul (((xmax)) ((((xabs)) ((xx)))) ((((xabs)) ((xy))))))))
                    (((unsupported)) (((xactual_error).leq (xallowed_error))))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
            xpy_statistics.write (((unsupported)) (((xsupport).ximport_fresh_module)) ("statistics") ((((unsupported)) ("_statistics"))))
            xc_statistics.write (((unsupported)) (((xsupport).ximport_fresh_module)) ("statistics") ((((unsupported)) ("_statistics"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfunc_names.write (((unsupported)) ("_normal_dist_inv_cdf"))
                xtest_py_functions.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xfname)) (((xself).xfunc_names)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xgetattr)) ((xpy_statistics)) ((xfname))).x__module__)) ("statistics"))
                xtest_c_functions.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xfname)) (((xself).xfunc_names)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xgetattr)) ((xc_statistics)) ((xfname))).x__module__)) ("_statistics"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                (((unsupported)) ((xtol)) ((xrel)) (0))
                xassertApproxEqual.write
                  [xself xfirst xsecond xtol xrel xmsg]
                    memory > xcheck
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((xtol)) ("None: is there a None literal in the EO language?")).if
                          xtol.write ((xself).xtol)
                        (((unsupported)) ((xrel)) ("None: is there a None literal in the EO language?")).if
                          xrel.write ((xself).xrel)
                        ((((xisinstance)) ((xfirst)) ((((xcollections).xabc).xSequence))).and (((xisinstance)) ((xsecond)) ((((xcollections).xabc).xSequence)))).if
                          xcheck.write ((xself).x_check_approx_seq)
                          xcheck.write ((xself).x_check_approx_num)
                        bogusForceDataize.write (((xcheck)) ((xfirst)) ((xsecond)) ((xtol)) ((xrel)) ((xmsg)))
                x_check_approx_seq.write
                  [xself xfirst xsecond xtol xrel xmsg]
                    memory > xstandardMsg
                    seq > @
                      seq
                        ((((xlen)) ((xfirst))).neq (((xlen)) ((xsecond)))).if
                          seq
                            xstandardMsg.write ("sequences differ in length: %d items != %d items".mod (((unsupported)) ((((xlen)) ((xfirst)))) ((((xlen)) ((xsecond))))))
                            xmsg.write ((((xself).x_formatMessage)) ((xmsg)) ((xstandardMsg)))
                            (((unsupported)) (((((xself).xfailureException)) ((xmsg)))))
                        (((unsupported)) ((((unsupported)) ((xi)) ((((unsupported)) ((xa)) ((xe)))))) ((((xenumerate)) ((((xzip)) ((xfirst)) ((xsecond)))))))
                          bogusForceDataize.write ((((xself).x_check_approx_num)) ((xa)) ((xe)) ((xtol)) ((xrel)) ((xmsg)) ((xi)))
                x_check_approx_num.write
                  [xself xfirst xsecond xtol xrel xmsg xidx]
                    memory > xstandardMsg
                    seq > @
                      (((unsupported)) 0)
                        (((xapprox_equal)) ((xfirst)) ((xsecond)) ((xtol)) ((xrel))).if
                          (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xstandardMsg.write ((((xself).x_make_std_err_msg)) ((xfirst)) ((xsecond)) ((xtol)) ((xrel)) ((xidx)))
                        xmsg.write ((((xself).x_formatMessage)) ((xmsg)) ((xstandardMsg)))
                        (((unsupported)) (((((xself).xfailureException)) ((xmsg)))))
                x_make_std_err_msg.write
                  [xfirst xsecond xtol xrel xidx]
                    memory > xtemplate
                    memory > xheader
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xfirst).neq (xsecond))))
                        xtemplate.write "  %r != %rn  values differ by more than tol=%r and rel=%rn  -> absolute error = %rn  -> relative error = %r"
                        (((unsupported)) ((xidx)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xheader.write ("numeric sequences first differ at index %d.n".mod (xidx))
                            xtemplate.write ((xheader).add (xtemplate))
                        (((unsupported)) ((((unsupported)) ((xabs_err)) ((xrel_err)))) ((((x_calc_errors)) ((xfirst)) ((xsecond)))))
                        (((unsupported)) (((xtemplate).mod (((unsupported)) ((xfirst)) ((xsecond)) ((xtol)) ((xrel)) ((xabs_err)) ((xrel_err))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtestZeroes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsign)) (0.0))) ((1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsign)) ((0.0.neg)))) ((1.neg)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_relative_symmetry.write
                  [xself]
                    memory > xargs2
                    memory > xargs1
                    seq > @
                      seq
                        xargs1.write (((unsupported)) (2456) (37.8) ((12.45.neg)) ((((xDecimal)) ("2.54"))) ((((xFraction)) (17) (54))))
                        xargs2.write (((unsupported)) (2459) (37.2) ((12.41.neg)) ((((xDecimal)) ("2.59"))) ((((xFraction)) (15) (54))))
                        (((unsupported)) (((((xlen)) ((xargs1))).eq (((xlen)) ((xargs2))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) ((xargs1)) ((xargs2)))))
                          bogusForceDataize.write ((((xself).xdo_relative_symmetry)) ((xa)) ((xb)))
                xdo_relative_symmetry.write
                  [xself xa xb]
                    memory > xdelta
                    memory > xrel
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xmin)) ((xa)) ((xb)))) ((((xmax)) ((xa)) ((xb)))))))
                        (((unsupported)) (((xa).less (xb))))
                        xdelta.write ((xb).sub (xa))
                        (((unsupported)) ((((unsupported)) ((xrel_err1)) ((xrel_err2)))) ((((unsupported)) ((((xabs)) (((xdelta).div (xa))))) ((((xabs)) (((xdelta).div (xb))))))))
                        xrel.write (((xrel_err1).add (xrel_err2)).div 2)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xa)) ((xb)) (0) ((xrel)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xb)) ((xa)) (0) ((xrel)))))
                xtest_symmetry.write
                  [xself]
                    memory > xr
                    memory > xx
                    memory > xargs
                    memory > xdelta
                    memory > xy
                    seq > @
                      seq
                        xargs.write (((unsupported)) ((23.neg)) ((2.neg)) (5) (107) (93568))
                        xdelta.write 2
                        (((unsupported)) ((xa)) ((xargs)))
                          (((unsupported)) ((xtype_)) ((((unsupported)) ((xint)) ((xfloat)) ((xDecimal)) ((xFraction)))))
                            seq
                              xx.write ((((xtype_)) ((xa))).mul 100)
                              xy.write ((xx).add (xdelta))
                              xr.write (((xabs)) (((xdelta).div (((xmax)) ((xx)) ((xy))))))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) ((xdelta)) ((xr)))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) (((xdelta).add 1)) ((2.mul (xr))))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) (((xdelta).sub 1)) (((xr).div 2)))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) ((xdelta)) (((xr).div 2)))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) (((xdelta).sub 1)) ((xr)))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) (((xdelta).sub 1)) ((2.mul (xr))))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xx)) (0) (0))
                              (((unsupported)) (((xself).xdo_symmetry_test)) ((xx)) ((xy)) (0) (0))
                xdo_symmetry_test.write
                  [xself xa xb xtol xrel]
                    memory > xflag1
                    memory > xtemplate
                    memory > xflag2
                    seq > @
                      seq
                        xtemplate.write "approx_equal comparisons don't match for %r"
                        xflag1.write (((xapprox_equal)) ((xa)) ((xb)) ((xtol)) ((xrel)))
                        xflag2.write (((xapprox_equal)) ((xb)) ((xa)) ((xtol)) ((xrel)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xflag1)) ((xflag2)) (((((xtemplate).xformat)) ((((unsupported)) ((xa)) ((xb)) ((xtol)) ((xrel)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdo_exactly_equal_test.write
                  [xself xx xtol xrel]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) ((xapprox_equal)) ((xx)) ((xx)) ((xtol)) ((xrel)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xresult)) (("equality failure for x=%r".mod (xx))))
                        xresult.write (((unsupported)) ((xapprox_equal)) (((xx).neg)) (((xx).neg)) ((xtol)) ((xrel)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xresult)) (("equality failure for x=%r".mod ((xx).neg))))
                xtest_exactly_equal_ints.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xn)) ((((unsupported)) (42) (19740) (14974) (230) (1795) (700245) (36587))))
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xn)) (0) (0))
                xtest_exactly_equal_floats.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (0.42) (1.9740) (1497.4) (23.0) (179.5) (70.0245) (36.587))))
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xx)) (0) (0))
                xtest_exactly_equal_fractions.write
                  [xself]
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        (((unsupported)) ((xf)) ((((unsupported)) ((((xF)) (1) (2))) ((((xF)) (0))) ((((xF)) (5) (3))) ((((xF)) (9) (7))) ((((xF)) (35) (36))) ((((xF)) (3) (7))))))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xf)) (0) (0))
                xtest_exactly_equal_decimals.write
                  [xself]
                    memory > xD
                    seq > @
                      seq
                        xD.write (xDecimal)
                        (((unsupported)) ((xd)) ((((xmap)) ((xD)) (((("8.2 31.274 912.04 16.745 1.2047".xsplit)) 0)))))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xd)) (0) (0))
                xtest_exactly_equal_absolute.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)) ((xn)) ((((unsupported)) (16) (1013) (1372) (1198) (971) (4))))
                        seq
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xn)) (0.01) (0))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) (((xn).div 10)) (0.01) (0))
                          xf.write (((xFraction)) ((xn)) (1234))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xf)) (0.01) (0))
                xtest_exactly_equal_absolute_decimals.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((((xDecimal)) ("3.571"))) ((((xDecimal)) ("0.01"))) (0))
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) (((((xDecimal)) ("81.3971")).neg)) ((((xDecimal)) ("0.01"))) (0))
                xtest_exactly_equal_relative.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xx)) ((((unsupported)) (8347) (101.3) ((7910.28.neg)) ((((xFraction)) (5) (21))))))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xx)) (0) (0.01))
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((((xDecimal)) ("11.68"))) (0) ((((xDecimal)) ("0.01"))))
                xtest_exactly_equal_both.write
                  [xself]
                    memory > xD
                    seq > @
                      seq
                        (((unsupported)) ((xx)) ((((unsupported)) (41017) (16.742) ((813.02.neg)) ((((xFraction)) (3) (8))))))
                          bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((xx)) (0.1) (0.01))
                        xD.write (xDecimal)
                        bogusForceDataize.write ((((xself).xdo_exactly_equal_test)) ((((xD)) ("7.2"))) ((((xD)) ("0.1"))) ((((xD)) ("0.01"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdo_exactly_unequal_test.write
                  [xself xx]
                    memory > xresult
                    seq > @
                      (((unsupported)) ((xa)) ((((unsupported)) ((xx)) (((xx).neg)))))
                        seq
                          xresult.write (((unsupported)) ((xapprox_equal)) ((xa)) (((xa).add 1)) (0) (0))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((xresult)) (("inequality failure for x=%r".mod (xa))))
                xtest_exactly_unequal_ints.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xn)) ((((unsupported)) (951) (572305) (478) (917) (17240))))
                        bogusForceDataize.write ((((xself).xdo_exactly_unequal_test)) ((xn)))
                xtest_exactly_unequal_floats.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (9.51) (5723.05) (47.8) (9.17) (17.24))))
                        bogusForceDataize.write ((((xself).xdo_exactly_unequal_test)) ((xx)))
                xtest_exactly_unequal_fractions.write
                  [xself]
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        (((unsupported)) ((xf)) ((((unsupported)) ((((xF)) (1) (5))) ((((xF)) (7) (9))) ((((xF)) (12) (11))) ((((xF)) (101) (99023))))))
                          bogusForceDataize.write ((((xself).xdo_exactly_unequal_test)) ((xf)))
                xtest_exactly_unequal_decimals.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xd)) ((((xmap)) ((xDecimal)) (((("3.1415 298.12 3.47 18.996 0.00245".xsplit)) 0)))))
                        bogusForceDataize.write ((((xself).xdo_exactly_unequal_test)) ((xd)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdo_approx_equal_abs_test.write
                  [xself xx xdelta]
                    memory > xtemplate
                    memory > xmsg
                    seq > @
                      seq
                        xtemplate.write "Test failure for x={!r}, y={!r}"
                        (((unsupported)) ((xy)) ((((unsupported)) (((xx).add (xdelta))) (((xx).sub (xdelta))))))
                          seq
                            xmsg.write ((((xtemplate).xformat)) ((xx)) ((xy)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xx)) ((xy)) ((2.mul (xdelta))) (0))) ((xmsg)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xapprox_equal)) ((xx)) ((xy)) (((xdelta).div 2)) (0))) ((xmsg)))
                xtest_approx_equal_absolute_ints.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xn)) ((((unsupported)) ((10737.neg)) ((1975.neg)) ((7.neg)) ((2.neg)) (0) (1) (9) (37) (423) (9874) (23789110))))
                        seq
                          bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xn)) (10))
                          bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xn)) (2))
                xtest_approx_equal_absolute_floats.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) ((284.126.neg)) ((97.1.neg)) ((3.4.neg)) ((2.15.neg)) (0.5) (1.0) (7.8) (4.23) (3817.4))))
                        seq
                          bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xx)) (1.5))
                          bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xx)) (0.01))
                          bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xx)) (0.0001))
                xtest_approx_equal_absolute_fractions.write
                  [xself]
                    memory > xdelta
                    memory > xnumerators
                    seq > @
                      seq
                        xdelta.write (((xFraction)) (1) (29))
                        xnumerators.write (((unsupported)) ((84.neg)) ((15.neg)) ((2.neg)) ((1.neg)) (0) (1) (5) (17) (23) (34) (71))
                        (((unsupported)) ((xf)) ((((unsupported)) ((((xFraction)) ((xn)) (29))) ((xn)) ((xnumerators)))))
                          seq
                            bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xf)) ((xdelta)))
                            bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xf)) ((((xfloat)) ((xdelta)))))
                xtest_approx_equal_absolute_decimals.write
                  [xself]
                    memory > xdelta
                    seq > @
                      seq
                        xdelta.write (((xDecimal)) ("0.01"))
                        (((unsupported)) ((xd)) ((((xmap)) ((xDecimal)) (((("1.0 3.5 36.08 61.79 7912.3648".xsplit)) 0)))))
                          seq
                            bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) ((xd)) ((xdelta)))
                            bogusForceDataize.write ((((xself).xdo_approx_equal_abs_test)) (((xd).neg)) ((xdelta)))
                xtest_cross_zero.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((((unsupported)) 0)) (((((unsupported)) 0).neg)) ((((unsupported)) 0)) (0))))
                xdo_approx_equal_rel_test.write
                  [xself xx xdelta]
                    memory > xtemplate
                    memory > xmsg
                    seq > @
                      seq
                        xtemplate.write "Test failure for x={!r}, y={!r}"
                        (((unsupported)) ((xy)) ((((unsupported)) (((xx).mul (1.add (xdelta)))) (((xx).mul (1.sub (xdelta)))))))
                          seq
                            xmsg.write ((((xtemplate).xformat)) ((xx)) ((xy)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xx)) ((xy)) (0) ((2.mul (xdelta))))) ((xmsg)))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xapprox_equal)) ((xx)) ((xy)) (0) (((xdelta).div 2)))) ((xmsg)))
                xtest_approx_equal_relative_ints.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) (64) (47) (0) (0.36))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) (64) (47) (0) (0.37))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) (449) (512) (0) (0.125))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) (448) (512) (0) (0.125))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((xapprox_equal)) (447) (512) (0) (0.125))))
                xtest_approx_equal_relative_floats.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) ((178.34.neg)) ((0.1.neg)) (0.1) (1.0) (36.97) (2847.136) (9145.074))))
                        seq
                          bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) ((xx)) (0.02))
                          bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) ((xx)) (0.0001))
                xtest_approx_equal_relative_fractions.write
                  [xself]
                    memory > xdelta
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdelta.write (((xFraction)) (3) (8))
                        (((unsupported)) ((xf)) ((((unsupported)) ((((xF)) (3) (84))) ((((xF)) (17) (30))) ((((xF)) (49) (50))) ((((xF)) (92) (85))))))
                          (((unsupported)) ((xd)) ((((unsupported)) ((xdelta)) ((((xfloat)) ((xdelta)))))))
                            seq
                              bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) ((xf)) ((xd)))
                              bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) (((xf).neg)) ((xd)))
                xtest_approx_equal_relative_decimals.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xd)) ((((xmap)) ((xDecimal)) (((("0.02 1.0 5.7 13.67 94.138 91027.9321".xsplit)) 0)))))
                        seq
                          bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) ((xd)) ((((xDecimal)) ("0.001"))))
                          bogusForceDataize.write ((((xself).xdo_approx_equal_rel_test)) (((xd).neg)) ((((xDecimal)) ("0.05"))))
                xdo_check_both.write
                  [xself xa xb xtol xrel xtol_flag xrel_flag]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xtol_flag).if ((xself).xassertTrue) ((xself).xassertFalse))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ((xapprox_equal)) ((xa)) ((xb)) ((xtol)) (0))))
                        xcheck.write ((xrel_flag).if ((xself).xassertTrue) ((xself).xassertFalse))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ((xapprox_equal)) ((xa)) ((xb)) (0) ((xrel)))))
                        xcheck.write (((xtol_flag).or (xrel_flag)).if ((xself).xassertTrue) ((xself).xassertFalse))
                        bogusForceDataize.write (((xcheck)) ((((unsupported)) ((xapprox_equal)) ((xa)) ((xb)) ((xtol)) ((xrel)))))
                xtest_approx_equal_both1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_check_both)) (7.955) (7.952) (0.004) ((((unsupported)) 0)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xdo_check_both)) ((7.387.neg)) ((7.386.neg)) (0.002) (0.0002) (TRUE) (TRUE))
                xtest_approx_equal_both2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_check_both)) (7.955) (7.952) (0.004) ((((unsupported)) 0)) (TRUE) (FALSE))
                xtest_approx_equal_both3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_check_both)) (7.955) (7.952) (0.001) ((((unsupported)) 0)) (FALSE) (TRUE))
                xtest_approx_equal_both4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_check_both)) (2.78) (2.75) (0.01) (0.001) (FALSE) (FALSE))
                        bogusForceDataize.write ((((xself).xdo_check_both)) (971.44) (971.47) (0.02) ((((unsupported)) 0)) (FALSE) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_inf.write
                  [xself]
                    memory > xinf
                    seq > @
                      (((unsupported)) ((xtype_)) ((((unsupported)) ((xfloat)) ((xDecimal)))))
                        seq
                          xinf.write (((xtype_)) ("inf"))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xapprox_equal)) ((xinf)) ((xinf)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xapprox_equal)) ((xinf)) ((xinf)) (0) (0))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xapprox_equal)) ((xinf)) ((xinf)) (1) (0.01))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xapprox_equal)) (((xinf).neg)) (((xinf).neg)))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((xapprox_equal)) ((xinf)) (((xinf).neg)))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((xapprox_equal)) ((xinf)) (1000))))
                xtest_nan.write
                  [xself]
                    memory > xnan
                    seq > @
                      (((unsupported)) ((xtype_)) ((((unsupported)) ((xfloat)) ((xDecimal)))))
                        seq
                          xnan.write (((xtype_)) ("nan"))
                          (((unsupported)) ((xother)) ((((unsupported)) ((xnan)) ((((xtype_)) ("inf"))) (1000))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((xapprox_equal)) ((xnan)) ((xother)))))
                xtest_float_zeroes.write
                  [xself]
                    memory > xnzero
                    seq > @
                      seq
                        xnzero.write ((((xmath).xcopysign)) (0.0) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xnzero)) (0.0) (0.1) (0.1))))
                xtest_decimal_zeroes.write
                  [xself]
                    memory > xnzero
                    seq > @
                      seq
                        xnzero.write (((xDecimal)) ("-0.0"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xapprox_equal)) ((xnzero)) ((((xDecimal)) (0))) (0.1) (0.1))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_bad_tol.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xapprox_equal)) (100) (100) ((1.neg)) (0.1))
                xtest_bad_rel.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xapprox_equal)) (100) (100) (1) ((0.1.neg)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xdo_test.write
                  [xself xargs]
                    memory > xexpected
                    memory > xactual_msg
                    seq > @
                      seq
                        xactual_msg.write ((((xNumericTestCase).x_make_std_err_msg)) ((((unsupported)) ((xargs)))))
                        xexpected.write ((((xself).xgenerate_substrings)) ((((unsupported)) ((xargs)))))
                        (((unsupported)) ((xsubstring)) ((xexpected)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xsubstring)) ((xactual_msg)))
                xtest_numerictestcase_is_testcase.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xNumericTestCase)) (((xunittest).xTestCase)))))
                xtest_error_msg_numeric.write
                  [xself]
                    memory > xargs
                    seq > @
                      seq
                        xargs.write (((unsupported)) (2.5) (4.0) (0.5) (0.25) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xdo_test)) ((xargs)))
                xtest_error_msg_sequence.write
                  [xself]
                    memory > xargs
                    seq > @
                      seq
                        xargs.write (((unsupported)) (3.75) (8.25) (1.25) (0.5) (7))
                        bogusForceDataize.write ((((xself).xdo_test)) ((xargs)))
                xgenerate_substrings.write
                  [xself xfirst xsecond xtol xrel xidx]
                    memory > xsubstrings
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xabs_err)) ((xrel_err)))) ((((x_calc_errors)) ((xfirst)) ((xsecond)))))
                        xsubstrings.write (((unsupported)) (("tol=%r".mod (xtol))) (("rel=%r".mod (xrel))) (("absolute error = %r".mod (xabs_err))) (("relative error = %r".mod (xrel_err))))
                        (((unsupported)) ((xidx)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xsubstrings).xappend)) (("differ at index %d".mod (xidx))))
                        (((unsupported)) ((xsubstrings)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmodule.write (xstatistics)
                xexpected_metadata.write (((unsupported)) ("__doc__") ("__all__"))
                xtest_meta.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xmeta)) (((xself).xexpected_metadata)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) (((xself).xmodule)) ((xmeta)))) (("%s not present".mod (xmeta))))
                xtest_check_all.write
                  [xself]
                    memory > xmodule
                    seq > @
                      seq
                        xmodule.write ((xself).xmodule)
                        (((unsupported)) ((xname)) (((xmodule).x__all__)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xname).xstartswith)) ("_"))) (("private name \"%s\" in __all__".mod (xname))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xmodule)) ((xname)))) (("missing name \"%s\" in __all__".mod (xname))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_doc_tests.write
                [xself]
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) ((xfailed)) ((xtried)))) ((((unsupported)) (((xdoctest).xtestmod)) ((xstatistics)) (((xdoctest).xELLIPSIS)))))
                      bogusForceDataize.write ((((xself).xassertGreater)) ((xtried)) (0))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xfailed)) (0))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_has_exception.write
                [xself]
                  memory > xerrmsg
                  seq > @
                    seq
                      xerrmsg.write "Expected StatisticsError to be a ValueError, but got a subclass of %r instead."
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xstatistics)) ("StatisticsError"))))
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) (((xstatistics).xStatisticsError)) ((xValueError)))) (((xerrmsg).mod (((xstatistics).xStatisticsError).x__base__))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_int.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xi)) ((((unsupported)) ((20.neg)) ((3.neg)) (0) (5) (99) ((((unsupported)) (10) (20))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) ((xi)))) ((((unsupported)) ((xi)) (1))))
                xtest_fraction.write
                  [xself]
                    memory > xnumerators
                    memory > xf
                    seq > @
                      seq
                        xnumerators.write (((unsupported)) ((5.neg)) (1) (12) (38))
                        (((unsupported)) ((xn)) ((xnumerators)))
                          seq
                            xf.write (((xFraction)) ((xn)) (37))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) ((xf)))) ((((unsupported)) ((xn)) (37))))
                xtest_float.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) (0.125))) ((((unsupported)) (1) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) (1.125))) ((((unsupported)) (9) (8))))
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((100.neg)) (100))) ((x_)) ((((xrange)) (100))))
                        (((unsupported)) ((xx)) ((xdata)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xnum)) ((xden)))) (((((xstatistics).x_exact_ratio)) ((xx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (((xnum).div (xden))))
                xtest_decimal.write
                  [xself]
                    memory > xD
                    memory > x_exact_ratio
                    seq > @
                      seq
                        xD.write (xDecimal)
                        x_exact_ratio.write ((xstatistics).x_exact_ratio)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_exact_ratio)) ((((xD)) ("0.125"))))) ((((unsupported)) (1) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_exact_ratio)) ((((xD)) ("12.345"))))) ((((unsupported)) (2469) (200))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((x_exact_ratio)) ((((xD)) ("-1.98"))))) ((((unsupported)) ((99.neg)) (50))))
                xtest_inf.write
                  [xself]
                    memory > xx
                    memory > xINF
                    memory > xratio
                    seq > @
                      seq
                        xINF.write (((xfloat)) ("INF"))
                        (((unsupported)) ((xfloat)))
                        (((unsupported)) ((xDecimal)))
                        (((unsupported)) ((xinf)) ((((unsupported)) ((xINF)) (((xINF).neg)))))
                          (((unsupported)) ((xtype_)) ((((unsupported)) ((xfloat)) ((xMyFloat)) ((xDecimal)) ((xMyDecimal)))))
                            seq
                              xx.write (((xtype_)) ((xinf)))
                              xratio.write ((((xstatistics).x_exact_ratio)) ((xx)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xratio)) ((((unsupported)) ((xx)) ("None: is there a None literal in the EO language?"))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((unsupported)) ((xratio)) (0))))) ((xtype_)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisinf)) ((((unsupported)) ((xratio)) (0))))))
                xtest_float_nan.write
                  [xself]
                    memory > xNAN
                    memory > xratio
                    seq > @
                      seq
                        xNAN.write (((xfloat)) ("NAN"))
                        (((unsupported)) ((xfloat)))
                        (((unsupported)) ((xnan)) ((((unsupported)) ((xNAN)) ((((xMyFloat)) ((xNAN)))))))
                          seq
                            xratio.write ((((xstatistics).x_exact_ratio)) ((xnan)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((unsupported)) ((xratio)) (0))))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xratio)) (1))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((unsupported)) ((xratio)) (0))))) ((((xtype)) ((xnan)))))
                xtest_decimal_nan.write
                  [xself]
                    memory > xsNAN
                    memory > xNAN
                    memory > xratio
                    seq > @
                      seq
                        xNAN.write (((xDecimal)) ("NAN"))
                        xsNAN.write (((xDecimal)) ("sNAN"))
                        (((unsupported)) ((xDecimal)))
                        (((unsupported)) ((xnan)) ((((unsupported)) ((xNAN)) ((((xMyDecimal)) ((xNAN)))) ((xsNAN)) ((((xMyDecimal)) ((xsNAN)))))))
                          seq
                            xratio.write ((((xstatistics).x_exact_ratio)) ((xnan)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((x_nan_equal)) ((((unsupported)) ((xratio)) (0))) ((xnan)))))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((unsupported)) ((xratio)) (1))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((unsupported)) ((xratio)) (0))))) ((((xtype)) ((xnan)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_infinity.write
                  [xself]
                    memory > xinf
                    seq > @
                      seq
                        xinf.write (((xDecimal)) ("INF"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) ((xinf)))) ((((unsupported)) ((xinf)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_exact_ratio)) (((xinf).neg)))) ((((unsupported)) (((xinf).neg)) ("None: is there a None literal in the EO language?"))))
                xtest_nan.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xnan)) ((((unsupported)) ((((xDecimal)) ("NAN"))) ((((xDecimal)) ("sNAN"))))))
                        seq
                          (((unsupported)) ((((unsupported)) ((xnum)) ((xden)))) (((((xstatistics).x_exact_ratio)) ((xnan)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((x_nan_equal)) ((xnum)) ((xnan)))))
                          bogusForceDataize.write ((((xself).xassertIs)) ((xden)) ("None: is there a None literal in the EO language?"))
                xtest_sign.write
                  [xself]
                    memory > xnumbers
                    seq > @
                      seq
                        xnumbers.write (((unsupported)) ((((xDecimal)) ("9.8765e12"))) ((((xDecimal)) ("9.8765e-12"))))
                        (((unsupported)) ((xd)) ((xnumbers)))
                          seq
                            (((unsupported)) (((xd).greater 0)))
                            (((unsupported)) ((((unsupported)) ((xnum)) ((xden)))) (((((xstatistics).x_exact_ratio)) ((xd)))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xnum)) (0))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((xden)) (0))
                            (((unsupported)) ((((unsupported)) ((xnum)) ((xden)))) (((((xstatistics).x_exact_ratio)) (((xd).neg)))))
                            bogusForceDataize.write ((((xself).xassertLessEqual)) ((xnum)) (0))
                            bogusForceDataize.write ((((xself).xassertGreater)) ((xden)) (0))
                xtest_negative_exponent.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xstatistics).x_exact_ratio)) ((((xDecimal)) ("0.1234"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((unsupported)) (617) (5000))))
                xtest_positive_exponent.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xstatistics).x_exact_ratio)) ((((xDecimal)) ("1.234e7"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((unsupported)) (12340000) (1))))
                xtest_regression_20536.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xstatistics).x_exact_ratio)) ((((xDecimal)) ("1e2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((unsupported)) (100) (1))))
                        xt.write ((((xstatistics).x_exact_ratio)) ((((xDecimal)) ("1.47e5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((unsupported)) (147000) (1))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_finite.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (5) ((((xFraction)) (1) (3))) (2.5) ((((xDecimal)) ("5.5"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xstatistics).x_isfinite)) ((xx)))))
                xtest_infinity.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) ((((xfloat)) ("inf"))) ((((xDecimal)) ("inf"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xstatistics).x_isfinite)) ((xx)))))
                xtest_nan.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) ((((xfloat)) ("nan"))) ((((xDecimal)) ("NAN"))) ((((xDecimal)) ("sNAN"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xstatistics).x_isfinite)) ((xx)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_bool.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xT)) ((((unsupported)) ((xint)) ((xfloat)) ((xFraction)) ((xDecimal)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertIs)) (((((xstatistics).x_coerce)) ((xT)) ((xbool)))) ((xT)))
                          (((unsupported)) ((xT)))
                          bogusForceDataize.write ((((xself).xassertIs)) (((((xstatistics).x_coerce)) ((xMyClass)) ((xbool)))) ((xMyClass)))
                xassertCoerceTo.write
                  [xself xA xB]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xstatistics).x_coerce)) ((xA)) ((xB)))) ((xB)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xstatistics).x_coerce)) ((xB)) ((xA)))) ((xB)))
                xcheck_coerce_to.write
                  [xself xA xB]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xA)) ((xB)))
                        (((unsupported)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xSubclassOfA)) ((xB)))
                        (((unsupported)) ((xB)))
                        bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xA)) ((xSubclassOfB)))
                        bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xSubclassOfA)) ((xSubclassOfB)))
                xassertCoerceRaises.write
                  [xself xA xB]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xstatistics).x_coerce)) ((((unsupported)) ((xA)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xstatistics).x_coerce)) ((((unsupported)) ((xB)) ((xA)))))
                xcheck_type_coercions.write
                  [xself xT]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xT)) ((xbool)))))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xstatistics).x_coerce)) ((xT)) ((xT)))) ((xT)))
                        (((unsupported)) ((xT)))
                        (((unsupported)) ((xT)))
                        (((unsupported)) ((xU)))
                        (((unsupported)) ((xtyp)) ((((unsupported)) ((xU)) ((xV)) ((xW)))))
                          bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xT)) ((xtyp)))
                        bogusForceDataize.write ((((xself).xassertCoerceTo)) ((xU)) ((xW)))
                        bogusForceDataize.write ((((xself).xassertCoerceRaises)) ((xU)) ((xV)))
                        bogusForceDataize.write ((((xself).xassertCoerceRaises)) ((xV)) ((xW)))
                xtest_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_type_coercions)) ((xint)))
                        (((unsupported)) ((xtyp)) ((((unsupported)) ((xfloat)) ((xFraction)) ((xDecimal)))))
                          bogusForceDataize.write ((((xself).xcheck_coerce_to)) ((xint)) ((xtyp)))
                xtest_fraction.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_type_coercions)) ((xFraction)))
                        bogusForceDataize.write ((((xself).xcheck_coerce_to)) ((xFraction)) ((xfloat)))
                xtest_decimal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_type_coercions)) ((xDecimal)))
                xtest_float.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_type_coercions)) ((xfloat)))
                xtest_non_numeric_types.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xbad_type)) ((((unsupported)) ((xstr)) ((xlist)) ((((xtype)) ("None: is there a None literal in the EO language?"))) ((xtuple)) ((xdict)))))
                        (((unsupported)) ((xgood_type)) ((((unsupported)) ((xint)) ((xfloat)) ((xFraction)) ((xDecimal)))))
                          bogusForceDataize.write ((((xself).xassertCoerceRaises)) ((xgood_type)) ((xbad_type)))
                xtest_incompatible_types.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xT)) ((((unsupported)) ((xfloat)) ((xFraction)))))
                        seq
                          (((unsupported)) ((xT)))
                          bogusForceDataize.write ((((xself).xassertCoerceRaises)) ((xT)) ((xDecimal)))
                          bogusForceDataize.write ((((xself).xassertCoerceRaises)) ((xMySubclass)) ((xDecimal)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_exact_equal.write
                  [xself xx xy]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xy)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((((xtype)) ((xy)))))
                xtest_int.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (71))) ((xint)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) (71))
                        (((unsupported)) ((xint)))
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (17))) ((xMyInt)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xMyInt)) (17))))
                xtest_fraction.write
                  [xself]
                    memory > xx
                    memory > x__truediv__
                    seq > @
                      seq
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (95) (99))) ((xFraction)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xFraction)) (95) (99))))
                        (((unsupported)) ((xFraction)))
                          x__truediv__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (((((xself).x__class__)) (((((((xsuper)) 0).x__truediv__)) ((xother)))))))
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (71) (13))) ((xMyFraction)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xMyFraction)) (71) (13))))
                xtest_float.write
                  [xself]
                    memory > xx
                    memory > x__truediv__
                    seq > @
                      seq
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) ((1.neg)) (2))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((0.5.neg)))
                        (((unsupported)) ((xfloat)))
                          x__truediv__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (((((xself).x__class__)) (((((((xsuper)) 0).x__truediv__)) ((xother)))))))
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (9) (8))) ((xMyFloat)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xMyFloat)) (1.125))))
                xtest_decimal.write
                  [xself]
                    memory > xx
                    memory > x__truediv__
                    seq > @
                      seq
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) (1) (40))) ((xDecimal)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xDecimal)) ("0.025"))))
                        (((unsupported)) ((xDecimal)))
                          x__truediv__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (((((xself).x__class__)) (((((((xsuper)) 0).x__truediv__)) ((xother)))))))
                        xx.write ((((xstatistics).x_convert)) ((((xFraction)) ((15.neg)) (16))) ((xMyDecimal)))
                        bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((((xMyDecimal)) ("-0.9375"))))
                xtest_inf.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)) ((xINF)) ((((unsupported)) ((((xfloat)) ("inf"))) ((((xDecimal)) ("inf"))))))
                        (((unsupported)) ((xinf)) ((((unsupported)) ((xINF)) (((xINF).neg)))))
                          seq
                            xx.write ((((xstatistics).x_convert)) ((xinf)) ((((xtype)) ((xinf)))))
                            bogusForceDataize.write ((((xself).xcheck_exact_equal)) ((xx)) ((xinf)))
                xtest_nan.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)) ((xnan)) ((((unsupported)) ((((xfloat)) ("nan"))) ((((xDecimal)) ("NAN"))) ((((xDecimal)) ("sNAN"))))))
                        seq
                          xx.write ((((xstatistics).x_convert)) ((xnan)) ((((xtype)) ((xnan)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((x_nan_equal)) ((xx)) ((xnan)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_pass_through.write
                  [xself]
                    memory > xnew
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)) (1) (2.0) ((((xFraction)) (3))) ((((xDecimal)) (4))))
                        xnew.write (((xlist)) (((((xstatistics).x_fail_neg)) ((xvalues)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xvalues)) ((xnew)))
                xtest_negatives_raise.write
                  [xself]
                    memory > xseq
                    memory > xit
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (1) (2.0) ((((xFraction)) (3))) ((((xDecimal)) (4))))))
                        seq
                          xseq.write (((unsupported)) (((xx).neg)))
                          xit.write ((((xstatistics).x_fail_neg)) ((xseq)))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xstatistics).xStatisticsError)) ((xnext)) ((xit)))
                xtest_error_msg.write
                  [xself]
                    memory > xerrmsg
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ("badness #%d".mod ((((xrandom).xrandint)) (10000) (99999)))
                        (((unsupported)) (((xstatistics).xStatisticsError)))
                          bogusForceDataize.write (((xnext)) (((((xstatistics).x_fail_neg)) ((((unsupported)) ((1.neg)))) ((xmsg)))))
                          xerrmsg.write (((unsupported)) (((xe).xargs)) (0))
                          bogusForceDataize.write ((((xself).xfail)) ("expected exception, but it didn't happen"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xerrmsg)) ((xmsg)))
            (((unsupported)) 0)
              seq
                xtest_no_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)))
                xtest_empty_data.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xempty)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((xiter)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xstatistics).xStatisticsError)) (((xself).xfunc)) ((xempty)))
                xprepare_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        unsupported
                        xdata.write (((xlist)) ((((xrange)) (10))))
                        while.
                          ((xdata).eq (((xsorted)) ((xdata))))
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        (((unsupported)) ((xdata)))
                xtest_no_inplace_modifications.write
                  [xself]
                    memory > xsaved
                    memory > x_
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xself).xprepare_data)) 0)
                        (((unsupported)) (((((xlen)) ((xdata))).neq 1)))
                        (((unsupported)) (((xdata).neq (((xsorted)) ((xdata))))))
                        xsaved.write (((unsupported)) ((xdata)) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xsaved)))))
                        x_.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertListEqual)) ((xdata)) ((xsaved)) ("data has been modified"))
                xtest_order_doesnt_matter.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((unsupported)) (1) (2) (3) (3) (3) (4) (5) (6)).mul 100)
                        xexpected.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        xactual.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xactual)))
                xtest_type_of_data_collection.write
                  [xself]
                    memory > xexpected
                    memory > xresult
                    memory > xdata
                    memory > xgenerator
                    seq > @
                      seq
                        (((unsupported)) ((xlist)))
                        (((unsupported)) ((xtuple)))
                        xgenerator.write
                          [xdata]
                            seq > @
                              (((unsupported)) ((((unsupported)) ((xobj)) ((xobj)) ((xdata)))))
                        xdata.write ((((xself).xprepare_data)) 0)
                        xexpected.write ((((xself).xfunc)) ((xdata)))
                        (((unsupported)) ((xkind)) ((((unsupported)) ((xlist)) ((xtuple)) ((xiter)) ((xMyList)) ((xMyTuple)) ((xgenerator)))))
                          seq
                            xresult.write ((((xself).xfunc)) ((((xkind)) ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_range_data.write
                  [xself]
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xrange)) (20) (50) (3))
                        xexpected.write ((((xself).xfunc)) ((((xlist)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_bad_arg_types.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_for_type_error)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_for_type_error)) (23))
                        bogusForceDataize.write ((((xself).xcheck_for_type_error)) (42.0))
                        bogusForceDataize.write ((((xself).xcheck_for_type_error)) ((((xobject)) 0)))
                xcheck_for_type_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) ((xargs)))))
                xtest_type_of_data_element.write
                  [xself]
                    memory > x__radd__
                    memory > xraw
                    memory > x__add__
                    memory > xresult
                    memory > x__truediv__
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)) ((xfloat)))
                          seq
                            x__truediv__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__truediv__)) ((xother)))))))
                            x__add__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__add__)) ((xother)))))))
                            x__radd__.write (x__add__)
                        xraw.write ((((xself).xprepare_data)) 0)
                        xexpected.write ((((xself).xfunc)) ((xraw)))
                        (((unsupported)) ((xkind)) ((((unsupported)) ((xfloat)) ((xMyFloat)) ((xDecimal)) ((xFraction)))))
                          seq
                            xdata.write (((unsupported)) ((((xkind)) ((xx)))) ((xx)) ((xraw)))
                            xresult.write (((((xtype)) ((xexpected)))) (((((xself).xfunc)) ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                xprepare_types_for_conservation_test.write
                  [xself]
                    memory > x__radd__
                    memory > x__rsub__
                    memory > x__rtruediv__
                    memory > x__add__
                    memory > x__pow__
                    memory > x__truediv__
                    memory > x__sub__
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((xfloat)))
                          seq
                            x__truediv__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__truediv__)) ((xother)))))))
                            x__rtruediv__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__rtruediv__)) ((xother)))))))
                            x__sub__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__sub__)) ((xother)))))))
                            x__rsub__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__rsub__)) ((xother)))))))
                            x__pow__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__pow__)) ((xother)))))))
                            x__add__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)) ((((((xtype)) ((xself)))) (((((((xsuper)) 0).x__add__)) ((xother)))))))
                            x__radd__.write (x__add__)
                        (((unsupported)) ((((unsupported)) ((xfloat)) ((xDecimal)) ((xFraction)) ((xMyFloat)))))
                xtest_types_conserved.write
                  [xself]
                    memory > xd
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xself).xprepare_data)) 0)
                        (((unsupported)) ((xkind)) (((((xself).xprepare_types_for_conservation_test)) 0)))
                          seq
                            xd.write (((unsupported)) ((((xkind)) ((xx)))) ((xx)) ((xdata)))
                            xresult.write ((((xself).xfunc)) ((xd)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xresult)))) ((xkind)))
            (((unsupported)) ((xUnivariateCommonMixin)) ((xUnivariateTypeMixin)))
              xsetUp.write
                [xself]
                  memory > xsimplified_sum
                  seq > @
                    seq
                      xsimplified_sum.write
                        []
                          seq > @
                            (((unsupported)) 0)
                              (((unsupported)) ((((unsupported)) ((xT)) ((xvalue)) ((xn)))) (((((xstatistics).x_sum)) ((((unsupported)) ((xargs)))))))
                              (((unsupported)) (((((xstatistics).x_coerce)) ((xvalue)) ((xT)))))
                      (((unsupported)) (((xself).xfunc)) ((xsimplified_sum)))
            (((unsupported)) ((xNumericTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).x_sum)))
                xtest_empty_data.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xdata)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((xiter)) ((((unsupported)) 0)))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((unsupported)) ((xint)) ((((xFraction)) (0))) (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)) (23))) ((((unsupported)) ((xint)) ((((xFraction)) (23))) (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)) (2.3))) ((((unsupported)) ((xfloat)) ((((xFraction)) (2.3))) (0))))
                xtest_ints.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) (1) (5) (3) ((4.neg)) ((8.neg)) (20) (42) (1))))) ((((unsupported)) ((xint)) ((((xFraction)) (60))) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) (4) (2) (3) ((8.neg)) (7))) (1000))) ((((unsupported)) ((xint)) ((((xFraction)) (1008))) (5))))
                xtest_floats.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) (((((unsupported)) (0.25)).mul 20)))) ((((unsupported)) ((xfloat)) ((((xFraction)) (5.0))) (20))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) (0.125) (0.25) (0.5) (0.75))) (1.5))) ((((unsupported)) ((xfloat)) ((((xFraction)) (3.125))) (4))))
                xtest_fractions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) (((((unsupported)) ((((xFraction)) (1) (1000)))).mul 500)))) ((((unsupported)) ((xFraction)) ((((xFraction)) (1) (2))) (500))))
                xtest_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("0.001"))) ((((xD)) ("5.246"))) ((((xD)) ("1.702"))) ((((xD)) ("-0.025"))) ((((xD)) ("3.974"))) ((((xD)) ("2.328"))) ((((xD)) ("4.617"))) ((((xD)) ("2.843"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((unsupported)) ((xDecimal)) ((((xDecimal)) ("20.686"))) (8))))
                xtest_compare_with_math_fsum.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((100.neg)) (1000))) ((x_)) ((((xrange)) (1000))))
                        (((unsupported)) (((xself).xassertApproxEqual)) ((((xfloat)) ((((unsupported)) (((((xself).xfunc)) ((xdata)))) (1))))) (((((xmath).xfsum)) ((xdata)))) ((((unsupported)) 0)))
                xtest_start_argument.write
                  [xself]
                    memory > xt
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) (1) (1000))) ((x_)) ((((xrange)) (100))))
                        xt.write (((unsupported)) (((((xself).xfunc)) ((xdata)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).add 42)) ((((unsupported)) (((((xself).xfunc)) ((xdata)) (42))) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).sub 23)) ((((unsupported)) (((((xself).xfunc)) ((xdata)) ((23.neg)))) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xt).add (((xFraction)) ((((unsupported)) 0))))) ((((unsupported)) (((((xself).xfunc)) ((xdata)) ((((unsupported)) 0)))) (1))))
                xtest_strings_fail.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2) (3))) ("999"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2) (3) ("999"))))
                xtest_bytes_fail.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2) (3))) ("999"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2) (3) ("999"))))
                xtest_mixed_sum.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2.0) ((((xDecimal)) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((((unsupported)) (1) (2.0))) ((((xDecimal)) (1))))
            (((unsupported)) ((xNumericTestCase)))
              xtest_torture.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_sum)) (((((unsupported)) (1) ((((unsupported)) 0)) (1) (((((unsupported)) 0).neg))).mul 10000)))) ((((unsupported)) ((xfloat)) ((((xFraction)) (20000.0))) (40000))))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).x_sum)) (((((unsupported)) ((((unsupported)) 0)) (1) (1) (((((unsupported)) 0).neg))).mul 10000)))) ((((unsupported)) ((xfloat)) ((((xFraction)) (20000.0))) (40000))))
                      (((unsupported)) ((((unsupported)) ((xT)) ((xnum)) ((xcount)))) (((((xstatistics).x_sum)) (((((unsupported)) ((((unsupported)) 0)) (1) ((((unsupported)) 0)) ((1.neg))).mul 10000)))))
                      bogusForceDataize.write ((((xself).xassertIs)) ((xT)) ((xfloat)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xcount)) (40000))
                      (((unsupported)) (((xself).xassertApproxEqual)) ((((xfloat)) ((xnum)))) ((((unsupported)) 0)) ((((unsupported)) 0)))
            (((unsupported)) ((xNumericTestCase)))
              seq
                xtest_nan.write
                  [xself]
                    memory > xresult
                    memory > xnan
                    seq > @
                      (((unsupported)) ((xtype_)) ((((unsupported)) ((xfloat)) ((xDecimal)))))
                        seq
                          xnan.write (((xtype_)) ("nan"))
                          xresult.write (((unsupported)) (((((xstatistics).x_sum)) ((((unsupported)) (1) ((xnan)) (2))))) (1))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xresult)))) ((xtype_)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((xresult)))))
                xcheck_infinity.write
                  [xself xx xinf]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisinf)) ((xx)))))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((((xtype)) ((xinf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xx).greater 0)) (((xinf).greater 0)))
                        (((unsupported)) (((xx).eq (xinf))))
                xdo_test_inf.write
                  [xself xinf]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)) (((((xstatistics).x_sum)) ((((unsupported)) (1) (2) ((xinf)) (3))))) (1))
                        bogusForceDataize.write ((((xself).xcheck_infinity)) ((xresult)) ((xinf)))
                        xresult.write (((unsupported)) (((((xstatistics).x_sum)) ((((unsupported)) (1) (2) ((xinf)) (3) ((xinf)) (4))))) (1))
                        bogusForceDataize.write ((((xself).xcheck_infinity)) ((xresult)) ((xinf)))
                xtest_float_inf.write
                  [xself]
                    memory > xinf
                    seq > @
                      seq
                        xinf.write (((xfloat)) ("inf"))
                        (((unsupported)) ((xsign)) ((((unsupported)) ((1)) ((1.neg)))))
                          bogusForceDataize.write ((((xself).xdo_test_inf)) (((xsign).mul (xinf))))
                xtest_decimal_inf.write
                  [xself]
                    memory > xinf
                    seq > @
                      seq
                        xinf.write (((xDecimal)) ("inf"))
                        (((unsupported)) ((xsign)) ((((unsupported)) ((1)) ((1.neg)))))
                          bogusForceDataize.write ((((xself).xdo_test_inf)) (((xsign).mul (xinf))))
                xtest_float_mismatched_infs.write
                  [xself]
                    memory > xresult
                    memory > xinf
                    seq > @
                      seq
                        xinf.write (((xfloat)) ("inf"))
                        xresult.write (((unsupported)) (((((xstatistics).x_sum)) ((((unsupported)) (1) (2) ((xinf)) (3) (((xinf).neg)) (4))))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((xresult)))))
                xtest_decimal_extendedcontext_mismatched_infs_to_nan.write
                  [xself]
                    memory > xinf
                    memory > xdata
                    seq > @
                      seq
                        xinf.write (((xDecimal)) ("inf"))
                        xdata.write (((unsupported)) (1) (2) ((xinf)) (3) (((xinf).neg)) (4))
                        (((unsupported)) (((((xdecimal).xlocalcontext)) (((xdecimal).xExtendedContext)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((unsupported)) (((((xstatistics).x_sum)) ((xdata)))) (1))))))
                xtest_decimal_basiccontext_mismatched_infs_to_nan.write
                  [xself]
                    memory > xinf
                    memory > xdata
                    seq > @
                      seq
                        xinf.write (((xDecimal)) ("inf"))
                        xdata.write (((unsupported)) (1) (2) ((xinf)) (3) (((xinf).neg)) (4))
                        (((unsupported)) (((((xdecimal).xlocalcontext)) (((xdecimal).xBasicContext)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xdecimal).xInvalidOperation)) (((xstatistics).x_sum)) ((xdata)))
                xtest_decimal_snan_raises.write
                  [xself]
                    memory > xsNAN
                    memory > xdata
                    seq > @
                      seq
                        xsNAN.write (((xDecimal)) ("sNAN"))
                        xdata.write (((unsupported)) (1) ((xsNAN)) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xdecimal).xInvalidOperation)) (((xstatistics).x_sum)) ((xdata)))
            (((unsupported)) ((xUnivariateCommonMixin)))
              seq
                xtest_single_value.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (23) (42.5) ((((unsupported)) 0)) ((((xFraction)) (15) (19))) ((((xDecimal)) ("0.28"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) ((xx)))))) ((xx)))
                xprepare_values_for_repeated_single_test.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (3.5) (17) ((((unsupported)) 0)) ((((xFraction)) (61) (67))) ((((xDecimal)) ("4.9712"))))))
                xtest_repeated_single_value.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xx)) (((((xself).xprepare_values_for_repeated_single_test)) 0)))
                        (((unsupported)) ((xcount)) ((((unsupported)) (2) (5) (10) (20))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xx)) ((xcount)))))
                            seq
                              xdata.write ((((unsupported)) ((xx))).mul (xcount))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xx)))
            (((unsupported)) ((xNumericTestCase)) ((xAverageMixin)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmean)))
                xtest_torture_pep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) ((((unsupported)) 0)) (1) (3) (((((unsupported)) 0).neg)))))) (1))
                xtest_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (0) (1) (2) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (8) (9))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (4.8125))
                xtest_floats.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (17.25) (19.75) (20.0) (21.5) (21.75) (23.25) (25.125) (27.5))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (22.015625))
                xtest_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("1.634"))) ((((xD)) ("2.517"))) ((((xD)) ("3.912"))) ((((xD)) ("4.072"))) ((((xD)) ("5.813"))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("3.5896"))))
                xtest_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (2))) ((((xF)) (2) (3))) ((((xF)) (3) (4))) ((((xF)) (4) (5))) ((((xF)) (5) (6))) ((((xF)) (6) (7))) ((((xF)) (7) (8))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) (1479) (1960))))
                xtest_inf.write
                  [xself]
                    memory > xraw
                    memory > xresult
                    memory > xinf
                    memory > xdata
                    seq > @
                      seq
                        xraw.write (((unsupported)) (1) (3) (5) (7) (9))
                        (((unsupported)) ((xkind)) ((((unsupported)) ((xfloat)) ((xDecimal)))))
                          (((unsupported)) ((xsign)) ((((unsupported)) (1) ((1.neg)))))
                            seq
                              xinf.write ((((xkind)) ("inf")).mul (xsign))
                              xdata.write ((xraw).add (((unsupported)) ((xinf))))
                              xresult.write ((((xself).xfunc)) ((xdata)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisinf)) ((xresult)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xinf)))
                xtest_mismatched_infs.write
                  [xself]
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (2) (4) (6) ((((xfloat)) ("inf"))) (1) (3) (5) ((((xfloat)) ("-inf"))))
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((xresult)))))
                xtest_nan.write
                  [xself]
                    memory > xraw
                    memory > xresult
                    memory > xinf
                    memory > xdata
                    seq > @
                      seq
                        xraw.write (((unsupported)) (1) (3) (5) (7) (9))
                        (((unsupported)) ((xkind)) ((((unsupported)) ((xfloat)) ((xDecimal)))))
                          seq
                            xinf.write (((xkind)) ("nan"))
                            xdata.write ((xraw).add (((unsupported)) ((xinf))))
                            xresult.write ((((xself).xfunc)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((xresult)))))
                xtest_big_data.write
                  [xself]
                    memory > xexpected
                    memory > xc
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xc.write (((unsupported)) 0)
                        xdata.write (((unsupported)) (3.4) (4.5) (4.9) (6.7) (6.8) (7.2) (8.0) (8.1) (9.4))
                        xexpected.write (((((xself).xfunc)) ((xdata))).add (xc))
                        (((unsupported)) (((xexpected).neq (xc))))
                        xresult.write ((((xself).xfunc)) ((((unsupported)) (((xx).add (xc))) ((xx)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_doubled_data.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((3.neg)) (5))) ((x_)) ((((xrange)) (1000))))
                        xexpected.write ((((xself).xfunc)) ((xdata)))
                        xactual.write ((((xself).xfunc)) (((xdata).mul 2)))
                        bogusForceDataize.write ((((xself).xassertApproxEqual)) ((xactual)) ((xexpected)))
                xtest_regression_20561.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xDecimal)) ("1e4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).xmean)) ((((unsupported)) ((xd)))))) ((xd)))
                xtest_regression_25177.write
                  [xself]
                    memory > xtiny
                    memory > xbig
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).xmean)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        xbig.write (((unsupported)) 0)
                        xtiny.write (((unsupported)) 0)
                        (((unsupported)) ((xn)) ((((unsupported)) (2) (3) (5) (200))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).xmean)) (((((unsupported)) ((xbig))).mul (xn))))) ((xbig)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xstatistics).xmean)) (((((unsupported)) ((xtiny))).mul (xn))))) ((xtiny)))
            (((unsupported)) ((xNumericTestCase)) ((xAverageMixin)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xharmonic_mean)))
                xprepare_data.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write ((((((xsuper)) 0).xprepare_data)) 0)
                        bogusForceDataize.write ((((xvalues).xremove)) (0))
                        (((unsupported)) ((xvalues)))
                xprepare_values_for_repeated_single_test.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (3.5) (17) ((((unsupported)) 0)) ((((xFraction)) (61) (67))) ((((xDecimal)) ("4.125"))))))
                xtest_zero.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)) (1) (0) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xvalues)))) (0))
                xtest_negative_error.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        xexc.write ((xstatistics).xStatisticsError)
                        (((unsupported)) ((xvalues)) ((((unsupported)) ((((unsupported)) ((1.neg)))) ((((unsupported)) (1) ((2.neg)) (3))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xvalues)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xexc)) (((xself).xfunc)) ((xvalues)))
                xtest_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (2) (4) (4) (8) (16) (16))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (((6.mul 4).div 5)))
                xtest_floats_exact.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) ((1.div 8)) ((1.div 4)) ((1.div 4)) ((1.div 2)) ((1.div 2)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((1.div 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) (0.25) (0.5) (1.0) (1.0))))) (0.5))
                xtest_singleton_lists.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((xrange)) (1) (101))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) ((xx)))))) ((xx)))
                xtest_decimals_exact.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) ((((xD)) (15))) ((((xD)) (30))) ((((xD)) (60))) ((((xD)) (60))))))) ((((xD)) (30))))
                        xdata.write (((unsupported)) ((((xD)) ("0.05"))) ((((xD)) ("0.10"))) ((((xD)) ("0.20"))) ((((xD)) ("0.20"))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("0.10"))))
                        xdata.write (((unsupported)) ((((xD)) ("1.68"))) ((((xD)) ("0.32"))) ((((xD)) ("5.94"))) ((((xD)) ("2.75"))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (((((xD)) (66528)).div 70723)))
                xtest_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (2))) ((((xF)) (2) (3))) ((((xF)) (3) (4))) ((((xF)) (4) (5))) ((((xF)) (5) (6))) ((((xF)) (6) (7))) ((((xF)) (7) (8))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) ((7.mul 420)) (4029))))
                xtest_inf.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)) (2.0) ((((xfloat)) ("inf"))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xvalues)))) (2.0))
                xtest_nan.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)) (2.0) ((((xfloat)) ("nan"))) (1.0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) (((((xself).xfunc)) ((xvalues)))))))
                xtest_multiply_data_points.write
                  [xself]
                    memory > xexpected
                    memory > xc
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xc.write 111
                        xdata.write (((unsupported)) (3.4) (4.5) (4.9) (6.7) (6.8) (7.2) (8.0) (8.1) (9.4))
                        xexpected.write (((((xself).xfunc)) ((xdata))).mul (xc))
                        xresult.write ((((xself).xfunc)) ((((unsupported)) (((xx).mul (xc))) ((xx)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexpected)))
                xtest_doubled_data.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) (1) (5))) ((x_)) ((((xrange)) (1000))))
                        xexpected.write ((((xself).xfunc)) ((xdata)))
                        xactual.write ((((xself).xfunc)) (((xdata).mul 2)))
                        bogusForceDataize.write ((((xself).xassertApproxEqual)) ((xactual)) ((xexpected)))
            (((unsupported)) ((xNumericTestCase)) ((xAverageMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmedian)))
                xprepare_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        unsupported
                        xdata.write ((((((xsuper)) 0).xprepare_data)) 0)
                        (((((xlen)) ((xdata))).mod 2).neq 1).if
                          bogusForceDataize.write ((((xdata).xappend)) (2))
                        (((unsupported)) ((xdata)))
                xtest_even_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (2) (3) (4) (5) (6))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (3.5))
                xtest_odd_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (2) (3) (4) (5) (6) (9))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (4))
                xtest_odd_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (7))) ((((xF)) (2) (7))) ((((xF)) (3) (7))) ((((xF)) (4) (7))) ((((xF)) (5) (7))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) (3) (7))))
                xtest_even_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (7))) ((((xF)) (2) (7))) ((((xF)) (3) (7))) ((((xF)) (4) (7))) ((((xF)) (5) (7))) ((((xF)) (6) (7))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) (1) (2))))
                xtest_odd_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("2.5"))) ((((xD)) ("3.1"))) ((((xD)) ("4.2"))) ((((xD)) ("5.7"))) ((((xD)) ("5.8"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("4.2"))))
                xtest_even_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("1.2"))) ((((xD)) ("2.5"))) ((((xD)) ("3.1"))) ((((xD)) ("4.2"))) ((((xD)) ("5.7"))) ((((xD)) ("5.8"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("3.65"))))
            (((unsupported)) ((xNumericTestCase)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmedian)))
                xprepare_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)) ((((xrange)) (15))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        while.
                          ((xdata).eq (((xsorted)) ((xdata))))
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        (((unsupported)) ((xdata)))
            (((unsupported)) ((xTestMedian)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmedian_low)))
                xtest_even_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (2) (3) (4) (5) (6))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (3))
                xtest_even_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (7))) ((((xF)) (2) (7))) ((((xF)) (3) (7))) ((((xF)) (4) (7))) ((((xF)) (5) (7))) ((((xF)) (6) (7))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) (3) (7))))
                xtest_even_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("1.1"))) ((((xD)) ("2.2"))) ((((xD)) ("3.3"))) ((((xD)) ("4.4"))) ((((xD)) ("5.5"))) ((((xD)) ("6.6"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("3.3"))))
            (((unsupported)) ((xTestMedian)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmedian_high)))
                xtest_even_ints.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (2) (3) (4) (5) (6))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (4))
                xtest_even_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (7))) ((((xF)) (2) (7))) ((((xF)) (3) (7))) ((((xF)) (4) (7))) ((((xF)) (5) (7))) ((((xF)) (6) (7))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xF)) (4) (7))))
                xtest_even_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("1.1"))) ((((xD)) ("2.2"))) ((((xD)) ("3.3"))) ((((xD)) ("4.4"))) ((((xD)) ("5.5"))) ((((xD)) ("6.6"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xD)) ("4.4"))))
            (((unsupported)) ((xTestMedian)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmedian_grouped)))
                xtest_odd_number_repeated.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (12) (13) (14) (14) (14) (15) (15))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (14))
                        xdata.write (((unsupported)) (12) (13) (14) (14) (14) (14) (15))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (13.875))
                        xdata.write (((unsupported)) (5) (10) (10) (15) (20) (20) (20) (20) (25) (25) (30))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)) (5))) (19.375))
                        xdata.write (((unsupported)) (16) (18) (18) (18) (18) (20) (20) (20) (22) (22) (22) (24) (24) (26) (28))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        (((unsupported)) (((xself).xassertApproxEqual)) (((((xself).xfunc)) ((xdata)) (2))) (20.66666667) ((((unsupported)) 0)))
                xtest_even_number_repeated.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (5) (10) (10) (15) (20) (20) (20) (25) (25) (30))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        (((unsupported)) (((xself).xassertApproxEqual)) (((((xself).xfunc)) ((xdata)) (5))) (19.16666667) ((((unsupported)) 0)))
                        xdata.write (((unsupported)) (2) (3) (4) (4) (4) (5))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        (((unsupported)) (((xself).xassertApproxEqual)) (((((xself).xfunc)) ((xdata)))) (3.83333333) ((((unsupported)) 0)))
                        xdata.write (((unsupported)) (2) (3) (3) (4) (4) (4) (5) (5) (5) (5) (6) (6))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (4.5))
                        xdata.write (((unsupported)) (3) (4) (4) (4) (5) (5) (5) (5) (6) (6))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (4.75))
                xtest_repeated_single_value.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (5.3) (68) ((((unsupported)) 0)) ((((xFraction)) (29) (101))) ((((xDecimal)) ("32.9714"))))))
                        (((unsupported)) ((xcount)) ((((unsupported)) (2) (5) (10) (20))))
                          seq
                            xdata.write ((((unsupported)) ((xx))).mul (xcount))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((((xfloat)) ((xx)))))
                xtest_odd_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (5) (4))) ((((xF)) (9) (4))) ((((xF)) (13) (4))) ((((xF)) (13) (4))) ((((xF)) (17) (4))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (3.0))
                xtest_even_fractions.write
                  [xself]
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (5) (4))) ((((xF)) (9) (4))) ((((xF)) (13) (4))) ((((xF)) (13) (4))) ((((xF)) (17) (4))) ((((xF)) (17) (4))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (3.25))
                xtest_odd_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("5.5"))) ((((xD)) ("6.5"))) ((((xD)) ("6.5"))) ((((xD)) ("7.5"))) ((((xD)) ("8.5"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 1)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (6.75))
                xtest_even_decimals.write
                  [xself]
                    memory > xD
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("5.5"))) ((((xD)) ("5.5"))) ((((xD)) ("6.5"))) ((((xD)) ("6.5"))) ((((xD)) ("7.5"))) ((((xD)) ("8.5"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (6.5))
                        xdata.write (((unsupported)) ((((xD)) ("5.5"))) ((((xD)) ("5.5"))) ((((xD)) ("6.5"))) ((((xD)) ("7.5"))) ((((xD)) ("7.5"))) ((((xD)) ("8.5"))))
                        (((unsupported)) ((((((xlen)) ((xdata))).mod 2).eq 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (7.0))
                xtest_interval.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (2.25) (2.5) (2.5) (2.75) (2.75) (3.0) (3.0) (3.25) (3.5) (3.75))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)) (0.25))) (2.875))
                        xdata.write (((unsupported)) (2.25) (2.5) (2.5) (2.75) (2.75) (2.75) (3.0) (3.0) (3.25) (3.5) (3.75))
                        (((unsupported)) (((xself).xassertApproxEqual)) (((((xself).xfunc)) ((xdata)) (0.25))) (2.83333333) ((((unsupported)) 0)))
                        xdata.write (((unsupported)) (220) (220) (240) (260) (260) (260) (260) (280) (280) (300) (320) (340))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)) (20))) (265.0))
                xtest_data_type_error.write
                  [xself]
                    memory > xdata
                    memory > xinterval
                    seq > @
                      seq
                        xdata.write (((unsupported)) ("") ("") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((xdata)))
                        xdata.write (((unsupported)) ("") ("") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((xdata)))
                        xdata.write (((unsupported)) (1) (2) (3))
                        xinterval.write ""
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((xdata)) ((xinterval)))
                        xdata.write (((unsupported)) (1) (2) (3))
                        xinterval.write ""
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ((xdata)) ((xinterval)))
            (((unsupported)) ((xNumericTestCase)) ((xAverageMixin)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xmode)))
                xprepare_data.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) (1) (1) (1) (1) (3) (4) (7) (9) (0) (8) (2))))
                xtest_range_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xrange)) (20) (50) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (20))
                xtest_nominal_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "abcbdb"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ("b"))
                        xdata.write ((("fe fi fo fum fi fi".xsplit)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ("fi"))
                xtest_discrete_data.write
                  [xself]
                    memory > xd
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)) ((((xrange)) (10))))
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          seq
                            xd.write ((xdata).add (((unsupported)) ((xi))))
                            bogusForceDataize.write ((((xrandom).xshuffle)) ((xd)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xd)))) ((xi)))
                xtest_bimodal_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (1) (2) (2) (2) (2) (3) (4) (5) (6) (6) (6) (6) (7) (8) (9) (9))
                        (((unsupported)) ((((unsupported)) (((((xdata).xcount)) (2))) (((((xdata).xcount)) (6))) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (2))
                xtest_unique_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (0))
                xtest_none_data.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xself).xfunc)) ("None: is there a None literal in the EO language?"))
                xtest_counter_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((xcollections).xCounter)) ((((unsupported)) (1) (1) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (1))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_basics.write
                [xself]
                  memory > xmultimode
                  seq > @
                    seq
                      xmultimode.write ((xstatistics).xmultimode)
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xmultimode)) ("aabbbbbbbbcc"))) ((((unsupported)) ("b"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xmultimode)) ("aabbbbccddddeeffffgg"))) ((((unsupported)) ("b") ("d") ("f"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xmultimode)) (""))) ((((unsupported)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xD
                    memory > xfmean
                    memory > xactual_mean
                    memory > xF
                    seq > @
                      seq
                        xfmean.write ((xstatistics).xfmean)
                        xD.write (xDecimal)
                        xF.write (xFraction)
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xexpected_mean)) ((xkind)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) (3.5) (4.0) (5.25))) (4.25) ("floats"))) ((((unsupported)) ((((unsupported)) ((((xD)) ("3.5"))) ((((xD)) ("4.0"))) ((((xD)) ("5.25"))))) (4.25) ("decimals"))) ((((unsupported)) ((((unsupported)) ((((xF)) (7) (2))) ((((xF)) (4) (1))) ((((xF)) (21) (4))))) (4.25) ("fractions"))) ((((unsupported)) ((((unsupported)) (TRUE) (FALSE) (TRUE) (TRUE) (FALSE))) (0.60) ("booleans"))) ((((unsupported)) ((((unsupported)) (3.5) (4) ((((xF)) (21) (4))))) (4.25) ("mixed types"))) ((((unsupported)) ((((unsupported)) (3.5) (4.0) (5.25))) (4.25) ("tuple"))) ((((unsupported)) ((((xiter)) ((((unsupported)) (3.5) (4.0) (5.25))))) (4.25) ("iterator"))))))
                          seq
                            xactual_mean.write (((xfmean)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xactual_mean)))) ((xfloat)) ((xkind)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xactual_mean)) ((xexpected_mean)) ((xkind)))
                xtest_error_cases.write
                  [xself]
                    memory > xfmean
                    memory > xStatisticsError
                    seq > @
                      seq
                        xfmean.write ((xstatistics).xfmean)
                        xStatisticsError.write ((xstatistics).xStatisticsError)
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xfmean)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xfmean)) ((((xiter)) ((((unsupported)) 0)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xfmean)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xfmean)) ((((unsupported)) (10) ("None: is there a None literal in the EO language?") (20))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xfmean)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xfmean)) ((((unsupported)) (10) (20) (60))) (70))
                xtest_special_values.write
                  [xself]
                    memory > xNaN
                    memory > xfmean
                    memory > xInf
                    seq > @
                      seq
                        xfmean.write ((xstatistics).xfmean)
                        xNaN.write (((xfloat)) ("Nan"))
                        xInf.write (((xfloat)) ("Inf"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((xfmean)) ((((unsupported)) (10) ((xNaN)))))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((xfmean)) ((((unsupported)) ((xNaN)) ((xInf)))))))) ("nan and infinity"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisinf)) ((((xfmean)) ((((unsupported)) (10) ((xInf)))))))) ("infinity"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write (((xfmean)) ((((unsupported)) ((xInf)) (((xInf).neg)))))
            (((unsupported)) ((xUnivariateCommonMixin)))
              seq
                xrel.write (((unsupported)) 0)
                xtest_single_value.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (11) (19.8) ((((unsupported)) 0)) ((((xFraction)) (21) (34))) ((((xDecimal)) ("8.392"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((unsupported)) ((xx)))))) (0))
                xtest_repeated_single_value.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (7.2) (49) ((((unsupported)) 0)) ((((xFraction)) (3) (7))) ((((xDecimal)) ("62.4802"))))))
                        (((unsupported)) ((xcount)) ((((unsupported)) (2) (3) (5) (15))))
                          seq
                            xdata.write ((((unsupported)) ((xx))).mul (xcount))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (0))
                xtest_domain_error_regression.write
                  [xself]
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((((unsupported)) (0.123456789012345)).mul 10000)
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        (((unsupported)) (((xself).xassertApproxEqual)) ((xresult)) (0.0) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xresult)) (0))
                xtest_shift_data.write
                  [xself]
                    memory > xshift
                    memory > xexpected
                    memory > xraw
                    memory > xdata
                    seq > @
                      seq
                        xraw.write (((unsupported)) (1.03) (1.27) (1.94) (2.04) (2.58) (3.14) (4.75) (4.98) (5.42) (6.78))
                        xexpected.write ((((xself).xfunc)) ((xraw)))
                        xshift.write (((unsupported)) 0)
                        xdata.write (((unsupported)) (((xx).add (xshift))) ((xx)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertApproxEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_shift_data_exact.write
                  [xself]
                    memory > xshift
                    memory > xexpected
                    memory > xraw
                    memory > xdata
                    seq > @
                      seq
                        xraw.write (((unsupported)) (1) (3) (3) (4) (5) (7) (9) (10) (11) (16))
                        (((unsupported)) ((((xall)) ((((unsupported)) (((xx).eq (((xint)) ((xx))))) ((xx)) ((xraw)))))))
                        xexpected.write ((((xself).xfunc)) ((xraw)))
                        xshift.write (((unsupported)) (10) (9))
                        xdata.write (((unsupported)) (((xx).add (xshift))) ((xx)) ((xraw)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_iter_list_same.write
                  [xself]
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((3.neg)) (8))) ((x_)) ((((xrange)) (1000))))
                        xexpected.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((((xiter)) ((xdata)))))) ((xexpected)))
            (((unsupported)) ((xVarianceStdevMixin)) ((xNumericTestCase)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xpvariance)))
                xtest_exact_uniform.write
                  [xself]
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)) ((((xrange)) (10000))))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        xexpected.write (((((unsupported)) (10000) (2)).sub 1).div 12)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_ints.write
                  [xself]
                    memory > xexact
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (4) (7) (13) (16))
                        xexact.write 22.5
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexact)))
                xtest_fractions.write
                  [xself]
                    memory > xexact
                    memory > xresult
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (4))) ((((xF)) (1) (4))) ((((xF)) (3) (4))) ((((xF)) (7) (4))))
                        xexact.write (((xF)) (3) (8))
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexact)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) ((xFraction)))
                xtest_decimals.write
                  [xself]
                    memory > xD
                    memory > xexact
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) ("12.1"))) ((((xD)) ("12.2"))) ((((xD)) ("12.5"))) ((((xD)) ("12.9"))))
                        xexact.write (((xD)) ("0.096875"))
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexact)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) ((xDecimal)))
            (((unsupported)) ((xVarianceStdevMixin)) ((xNumericTestCase)) ((xUnivariateTypeMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xvariance)))
                xtest_single_value.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (35) (24.7) ((((unsupported)) 0)) ((((xFraction)) (19) (30))) ((((xDecimal)) ("4.2084"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xstatistics).xStatisticsError)) (((xself).xfunc)) ((((unsupported)) ((xx)))))
                xtest_ints.write
                  [xself]
                    memory > xexact
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (4) (7) (13) (16))
                        xexact.write 30
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexact)))
                xtest_fractions.write
                  [xself]
                    memory > xexact
                    memory > xresult
                    memory > xdata
                    memory > xF
                    seq > @
                      seq
                        xF.write (xFraction)
                        xdata.write (((unsupported)) ((((xF)) (1) (4))) ((((xF)) (1) (4))) ((((xF)) (3) (4))) ((((xF)) (7) (4))))
                        xexact.write (((xF)) (1) (2))
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexact)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) ((xFraction)))
                xtest_decimals.write
                  [xself]
                    memory > xD
                    memory > xexact
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xD.write (xDecimal)
                        xdata.write (((unsupported)) ((((xD)) (2))) ((((xD)) (2))) ((((xD)) (7))) ((((xD)) (9))))
                        xexact.write ((4.mul (((xD)) ("9.5"))).div (((xD)) (3)))
                        xresult.write ((((xself).xfunc)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xexact)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xresult)) ((xDecimal)))
                xtest_center_not_at_mean.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1.0) (2.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xfunc)) ((xdata)) (2.0))) (1.0))
            (((unsupported)) ((xVarianceStdevMixin)) ((xNumericTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xpstdev)))
                xtest_compare_to_variance.write
                  [xself]
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((17.neg)) (24))) ((x_)) ((((xrange)) (1000))))
                        xexpected.write ((((xmath).xsqrt)) (((((xstatistics).xpvariance)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_center_not_at_mean.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (3) (6) (7) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) (2.5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xfunc)) ((xdata)) (0.5))) (6.5))
            (((unsupported)) ((xVarianceStdevMixin)) ((xNumericTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xfunc)) (((xstatistics).xstdev)))
                xtest_single_value.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (81) (203.74) ((((unsupported)) 0)) ((((xFraction)) (5) (21))) ((((xDecimal)) ("35.719"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xstatistics).xStatisticsError)) (((xself).xfunc)) ((((unsupported)) ((xx)))))
                xtest_compare_to_variance.write
                  [xself]
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (((((xrandom).xuniform)) ((2.neg)) (9))) ((x_)) ((((xrange)) (1000))))
                        xexpected.write ((((xmath).xsqrt)) (((((xstatistics).xvariance)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfunc)) ((xdata)))) ((xexpected)))
                xtest_center_not_at_mean.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1.0) (2.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xself).xfunc)) ((xdata)) (2.0))) (1.0))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xgm_float
                    memory > xgeometric_mean
                    memory > xgm_decimal
                    seq > @
                      seq
                        xgeometric_mean.write ((xstatistics).xgeometric_mean)
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xgeometric_mean)) ((((unsupported)) (54) (24) (36))))) (36.0))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xgeometric_mean)) ((((unsupported)) (4.0) (9.0))))) (6.0))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xgeometric_mean)) ((((unsupported)) (17.625))))) (17.625))
                        bogusForceDataize.write ((((xrandom).xseed)) ((((unsupported)) 0)))
                        (((unsupported)) ((xrng)) ((((unsupported)) ((((xrange)) (1) (100))) ((((xrange)) (1) (1000))) ((((xrange)) (1) (10000))) ((((xrange)) (500) (10000) (3))) ((((xrange)) (10000) (500) ((3.neg)))) ((((unsupported)) (12) (17) (13) (5) (120) (7))) ((((unsupported)) (((((xrandom).xexpovariate)) (50.0))) ((xi)) ((((xrange)) (1000))))) ((((unsupported)) (((((xrandom).xlognormvariate)) (20.0) (3.0))) ((xi)) ((((xrange)) (2000))))) ((((unsupported)) (((((xrandom).xtriangular)) (2000) (3000) (2200))) ((xi)) ((((xrange)) (3000))))))))
                          seq
                            xgm_decimal.write (((unsupported)) (((((xmath).xprod)) ((((xmap)) ((xDecimal)) ((xrng)))))) (((((xDecimal)) (1)).div (((xlen)) ((xrng))))))
                            xgm_float.write (((xgeometric_mean)) ((xrng)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisclose)) ((xgm_float)) ((((xfloat)) ((xgm_decimal)))))))
                xtest_various_input_types.write
                  [xself]
                    memory > xD
                    memory > xexpected_mean
                    memory > xgeometric_mean
                    memory > xF
                    memory > xactual_mean
                    seq > @
                      seq
                        xgeometric_mean.write ((xstatistics).xgeometric_mean)
                        xD.write (xDecimal)
                        xF.write (xFraction)
                        xexpected_mean.write 4.18886
                        (((unsupported)) ((((unsupported)) ((xdata)) ((xkind)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) (3.5) (4.0) (5.25))) ("floats"))) ((((unsupported)) ((((unsupported)) ((((xD)) ("3.5"))) ((((xD)) ("4.0"))) ((((xD)) ("5.25"))))) ("decimals"))) ((((unsupported)) ((((unsupported)) ((((xF)) (7) (2))) ((((xF)) (4) (1))) ((((xF)) (21) (4))))) ("fractions"))) ((((unsupported)) ((((unsupported)) (3.5) (4) ((((xF)) (21) (4))))) ("mixed types"))) ((((unsupported)) ((((unsupported)) (3.5) (4.0) (5.25))) ("tuple"))) ((((unsupported)) ((((xiter)) ((((unsupported)) (3.5) (4.0) (5.25))))) ("iterator"))))))
                          seq
                            xactual_mean.write (((xgeometric_mean)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xactual_mean)))) ((xfloat)) ((xkind)))
                            (((unsupported)) (((xself).xassertAlmostEqual)) ((xactual_mean)) ((xexpected_mean)) (5))
                xtest_big_and_small.write
                  [xself]
                    memory > xbig_gm
                    memory > xgeometric_mean
                    memory > xlarge
                    memory > xsmall_gm
                    memory > xsmall
                    seq > @
                      seq
                        xgeometric_mean.write ((xstatistics).xgeometric_mean)
                        xlarge.write (((unsupported)) (2.0) (1000))
                        xbig_gm.write (((xgeometric_mean)) ((((unsupported)) ((54.0.mul (xlarge))) ((24.0.mul (xlarge))) ((36.0.mul (xlarge))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisclose)) ((xbig_gm)) ((36.0.mul (xlarge))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xmath).xisinf)) ((xbig_gm)))))
                        xsmall.write (((unsupported)) (2.0) ((1000.neg)))
                        xsmall_gm.write (((xgeometric_mean)) ((((unsupported)) ((54.0.mul (xsmall))) ((24.0.mul (xsmall))) ((36.0.mul (xsmall))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisclose)) ((xsmall_gm)) ((36.0.mul (xsmall))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xsmall_gm)) (0.0))
                xtest_error_cases.write
                  [xself]
                    memory > xgeometric_mean
                    memory > xStatisticsError
                    seq > @
                      seq
                        xgeometric_mean.write ((xstatistics).xgeometric_mean)
                        xStatisticsError.write ((xstatistics).xStatisticsError)
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) (3.5) (0.0) (5.25))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) (3.5) ((4.0.neg)) (5.25))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((xiter)) ((((unsupported)) 0)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) (10) ("None: is there a None literal in the EO language?") (20))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xgeometric_mean)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) (10) (20) (60))) (70))
                xtest_special_values.write
                  [xself]
                    memory > xNaN
                    memory > xInf
                    memory > xgeometric_mean
                    seq > @
                      seq
                        xgeometric_mean.write ((xstatistics).xgeometric_mean)
                        xNaN.write (((xfloat)) ("Nan"))
                        xInf.write (((xfloat)) ("Inf"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((xgeometric_mean)) ((((unsupported)) (10) ((xNaN)))))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) ((((xgeometric_mean)) ((((unsupported)) ((xNaN)) ((xInf)))))))) ("nan and infinity"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisinf)) ((((xgeometric_mean)) ((((unsupported)) (10) ((xInf)))))))) ("infinity"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write (((xgeometric_mean)) ((((unsupported)) ((xInf)) (((xInf).neg)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_specific_cases.write
                  [xself]
                    memory > xlo
                    memory > xdata
                    memory > xquantiles
                    memory > xhi
                    memory > xsdata
                    memory > xf
                    memory > xexp
                    memory > xresult
                    memory > xact
                    memory > xpadded_data
                    seq > @
                      seq
                        xquantiles.write ((xstatistics).xquantiles)
                        xdata.write (((unsupported)) (120) (200) (250) (320) (350))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        (((unsupported)) ((((unsupported)) ((xn)) ((xexpected)))) ((((unsupported)) ((((unsupported)) (1) ((((unsupported)) 0)))) ((((unsupported)) (2) ((((unsupported)) (250.0))))) ((((unsupported)) (3) ((((unsupported)) (200.0) (320.0))))) ((((unsupported)) (4) ((((unsupported)) (160.0) (250.0) (335.0))))) ((((unsupported)) (5) ((((unsupported)) (136.0) (220.0) (292.0) (344.0))))) ((((unsupported)) (6) ((((unsupported)) (120.0) (200.0) (250.0) (320.0) (350.0))))) ((((unsupported)) (8) ((((unsupported)) (100.0) (160.0) (212.5) (250.0) (302.5) (335.0) (357.5))))) ((((unsupported)) (10) ((((unsupported)) (88.0) (136.0) (184.0) (220.0) (250.0) (292.0) (326.0) (344.0) (362.0))))) ((((unsupported)) (12) ((((unsupported)) (80.0) (120.0) (160.0) (200.0) (225.0) (250.0) (285.0) (320.0) (335.0) (350.0) (365.0))))) ((((unsupported)) (15) ((((unsupported)) (72.0) (104.0) (136.0) (168.0) (200.0) (220.0) (240.0) (264.0) (292.0) (320.0) (332.0) (344.0) (356.0) (368.0))))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)))))) (((xn).sub 1)))
                            (((unsupported)) ((xdatatype)) ((((unsupported)) ((xfloat)) ((xDecimal)) ((xFraction)))))
                              seq
                                xresult.write (((unsupported)) ((xquantiles)) ((((xmap)) ((xdatatype)) ((xdata)))) ((xn)))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xall)) (((((xtype)) ((xx))).eq (xdatatype))))) ((xx)) ((xresult)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xmap)) ((xdatatype)) ((xexpected)))))))
                            ((((xlen)) ((xexpected))).geq 2).if
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xquantiles)) ((xexpected)) ((xn)))) ((xexpected)))
                            xsdata.write (((xsorted)) ((xdata)))
                            xlo.write ((2.mul (((unsupported)) ((xsdata)) (0))).sub (((unsupported)) ((xsdata)) (1)))
                            xhi.write ((2.mul (((unsupported)) ((xsdata)) ((1.neg)))).sub (((unsupported)) ((xsdata)) ((2.neg))))
                            xpadded_data.write ((xdata).add (((unsupported)) ((xlo)) ((xhi))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)))) ((((unsupported)) ((xquantiles)) ((xpadded_data)) ((xn)) ("inclusive"))) ((((unsupported)) ((xn)) ((xdata)))))
                            xf.write
                              [xx]
                                seq > @
                                  (((unsupported)) (((3.5.mul (xx)).sub 1234.675)))
                            xexp.write (((xlist)) ((((xmap)) ((xf)) ((xexpected)))))
                            xact.write (((unsupported)) ((xquantiles)) ((((xmap)) ((xf)) ((xdata)))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) (((((xmath).xisclose)) ((xe)) ((xa)))) ((((unsupported)) ((xe)) ((xa)))) ((((xzip)) ((xexp)) ((xact)))))))))
                        (((unsupported)) ((xk)) ((((xrange)) (2) (60))))
                          seq
                            xdata.write (((unsupported)) (((xrandom).xchoices)) ((((xrange)) (100))) ((xk)))
                            (((unsupported)) ((((unsupported)) ((xq1)) ((xq2)) ((xq3)))) ((((xquantiles)) ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xq2)) (((((xstatistics).xmedian)) ((xdata)))))
                xtest_specific_cases_inclusive.write
                  [xself]
                    memory > xquantiles
                    memory > xf
                    memory > xactual
                    memory > xexp
                    memory > xresult
                    memory > xact
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xquantiles.write ((xstatistics).xquantiles)
                        xdata.write (((unsupported)) (100) (200) (400) (800))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xdata)))
                        (((unsupported)) ((((unsupported)) ((xn)) ((xexpected)))) ((((unsupported)) ((((unsupported)) (1) ((((unsupported)) 0)))) ((((unsupported)) (2) ((((unsupported)) (300.0))))) ((((unsupported)) (3) ((((unsupported)) (200.0) (400.0))))) ((((unsupported)) (4) ((((unsupported)) (175.0) (300.0) (500.0))))) ((((unsupported)) (5) ((((unsupported)) (160.0) (240.0) (360.0) (560.0))))) ((((unsupported)) (6) ((((unsupported)) (150.0) (200.0) (300.0) (400.0) (600.0))))) ((((unsupported)) (8) ((((unsupported)) (137.5) (175) (225.0) (300.0) (375.0) (500.0) (650.0))))) ((((unsupported)) (10) ((((unsupported)) (130.0) (160.0) (190.0) (240.0) (300.0) (360.0) (440.0) (560.0) (680.0))))) ((((unsupported)) (12) ((((unsupported)) (125.0) (150.0) (175.0) (200.0) (250.0) (300.0) (350.0) (400.0) (500.0) (600.0) (700.0))))) ((((unsupported)) (15) ((((unsupported)) (120.0) (140.0) (160.0) (180.0) (200.0) (240.0) (280.0) (320.0) (360.0) (400.0) (480.0) (560.0) (640.0) (720.0))))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)) ("inclusive"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)) ("inclusive"))))) (((xn).sub 1)))
                            (((unsupported)) ((xdatatype)) ((((unsupported)) ((xfloat)) ((xDecimal)) ((xFraction)))))
                              seq
                                xresult.write (((unsupported)) ((xquantiles)) ((((xmap)) ((xdatatype)) ((xdata)))) ((xn)) ("inclusive"))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xall)) (((((xtype)) ((xx))).eq (xdatatype))))) ((xx)) ((xresult)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xmap)) ((xdatatype)) ((xexpected)))))))
                            xf.write
                              [xx]
                                seq > @
                                  (((unsupported)) (((3.5.mul (xx)).sub 1234.675)))
                            xexp.write (((xlist)) ((((xmap)) ((xf)) ((xexpected)))))
                            xact.write (((unsupported)) ((xquantiles)) ((((xmap)) ((xf)) ((xdata)))) ((xn)) ("inclusive"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) (((((xmath).xisclose)) ((xe)) ((xa)))) ((((unsupported)) ((xe)) ((xa)))) ((((xzip)) ((xexp)) ((xact)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xquantiles)) ((((unsupported)) (0) (100))) (10) ("inclusive"))) ((((unsupported)) (10.0) (20.0) (30.0) (40.0) (50.0) (60.0) (70.0) (80.0) (90.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xquantiles)) ((((xrange)) (0) (101))) (10) ("inclusive"))) ((((unsupported)) (10.0) (20.0) (30.0) (40.0) (50.0) (60.0) (70.0) (80.0) (90.0))))
                        xdata.write (((unsupported)) (((((xrandom).xrandrange)) (10000))) ((xi)) ((((xrange)) (501))))
                        xactual.write (((unsupported)) ((xquantiles)) ((xdata)) (32) ("inclusive"))
                        bogusForceDataize.write ((((xdata).xremove)) ((((xmin)) ((xdata)))))
                        bogusForceDataize.write ((((xdata).xremove)) ((((xmax)) ((xdata)))))
                        xexpected.write (((unsupported)) ((xquantiles)) ((xdata)) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexpected)) ((xactual)))
                        (((unsupported)) ((xk)) ((((xrange)) (2) (60))))
                          seq
                            xdata.write (((unsupported)) (((xrandom).xchoices)) ((((xrange)) (100))) ((xk)))
                            (((unsupported)) ((((unsupported)) ((xq1)) ((xq2)) ((xq3)))) ((((unsupported)) ((xquantiles)) ((xdata)) ("inclusive"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xq2)) (((((xstatistics).xmedian)) ((xdata)))))
                xtest_equal_inputs.write
                  [xself]
                    memory > xquantiles
                    memory > xdata
                    seq > @
                      seq
                        xquantiles.write ((xstatistics).xquantiles)
                        (((unsupported)) ((xn)) ((((xrange)) (2) (10))))
                          seq
                            xdata.write ((((unsupported)) (10.0)).mul (xn))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xquantiles)) ((xdata)))) ((((unsupported)) (10.0) (10.0) (10.0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xquantiles)) ((xdata)) ("inclusive"))) ((((unsupported)) (10.0) (10.0) (10.0))))
                xtest_equal_sized_groups.write
                  [xself]
                    memory > xdata
                    memory > xsizes
                    memory > xtotal
                    memory > xpos
                    memory > xgroup_sizes
                    memory > xquantiles
                    memory > xgroup_size
                    seq > @
                      seq
                        xquantiles.write ((xstatistics).xquantiles)
                        xtotal.write 10000
                        xdata.write (((unsupported)) (((((xrandom).xexpovariate)) (0.2))) ((xi)) ((((xrange)) ((xtotal)))))
                        while.
                          ((((xlen)) ((((xset)) ((xdata))))).neq (xtotal))
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xdata).xappend)) (((((xrandom).xexpovariate)) (0.2))))
                        bogusForceDataize.write ((((xdata).xsort)) 0)
                        (((unsupported)) ((xn)) ((((unsupported)) (1) (2) (5) (10) (20) (50) (100) (200) (500) (1000) (2000) (5000) (10000))))
                          seq
                            xgroup_size.write (((unsupported)) ((xtotal)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xbisect).xbisect)) ((xdata)) ((xq)))) ((xq)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)))))) ((((xlist)) ((((xrange)) ((xgroup_size)) ((xtotal)) ((xgroup_size)))))))
                        (((unsupported)) ((xn)) ((((unsupported)) (13) (19) (59) (109) (211) (571) (1019) (1907) (5261) (9769))))
                          seq
                            xgroup_sizes.write (((unsupported)) ((((unsupported)) ((xtotal)) ((xn)))) (((((unsupported)) ((xtotal)) ((xn))).add 1)))
                            xpos.write (((unsupported)) (((((xbisect).xbisect)) ((xdata)) ((xq)))) ((xq)) ((((unsupported)) ((xquantiles)) ((xdata)) ((xn)))))
                            xsizes.write (((unsupported)) (((xq).sub (xp))) ((((unsupported)) ((xp)) ((xq)))) ((((xzip)) ((xpos)) ((((unsupported)) ((xpos)) ((((unsupported)) (1))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xsizes).leq (xgroup_sizes))))
                xtest_error_cases.write
                  [xself]
                    memory > xquantiles
                    memory > xStatisticsError
                    seq > @
                      seq
                        xquantiles.write ((xstatistics).xquantiles)
                        xStatisticsError.write ((xstatistics).xStatisticsError)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xquantiles)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) (20) (30))) (13) (4))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xquantiles)) ((((unsupported)) (10) (20) (30))) (4))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) (20) (30))) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) (20) (30))) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) (20) (30))) (1.5))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) (20) (30))) ("X"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStatisticsError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10))) (4))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xquantiles)) ((((unsupported)) (10) ("None: is there a None literal in the EO language?") (30))) (4))
            (((unsupported)) 0)
              seq
                xtest_slots.write
                  [xself]
                    memory > xnd
                    seq > @
                      seq
                        xnd.write (((((xself).xmodule).xNormalDist)) (300) (23))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xvars)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtuple)) (((xnd).x__slots__)))) ((((unsupported)) ("_mu") ("_sigma"))))
                xtest_instantiation_and_attributes.write
                  [xself]
                    memory > xnd
                    memory > xnnd
                    seq > @
                      seq
                        xnd.write (((((xself).xmodule).xNormalDist)) (500) (17))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xmean)) (500))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xstdev)) (17))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xvariance)) ((((unsupported)) (17) (2))))
                        xnd.write (((((xself).xmodule).xNormalDist)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xmean)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xstdev)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd).xvariance)) ((((unsupported)) (1) (2))))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write (((((xself).xmodule).xNormalDist)) (500) ((10.neg)))
                        (((unsupported)) ((((xself).xmodule).xNormalDist)))
                        xnnd.write (((xNewNormalDist)) (200) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xnnd)))) ((xNewNormalDist)))
                xtest_alternative_constructor.write
                  [xself]
                    memory > xnnd
                    memory > xNormalDist
                    memory > xdata
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xdata.write (((unsupported)) (96) (107) (90) (92) (110))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xNormalDist).xfrom_samples)) ((xdata)))) ((((xNormalDist)) (99) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xNormalDist).xfrom_samples)) ((((xtuple)) ((xdata)))))) ((((xNormalDist)) (99) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xNormalDist).xfrom_samples)) ((((xiter)) ((xdata)))))) ((((xNormalDist)) (99) (9))))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xNormalDist).xfrom_samples)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xNormalDist).xfrom_samples)) ((((unsupported)) (10))))
                        (((unsupported)) ((xNormalDist)))
                        xnnd.write ((((xNewNormalDist).xfrom_samples)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xnnd)))) ((xNewNormalDist)))
                xtest_sample_generation.write
                  [xself]
                    memory > xdata
                    memory > xdata3
                    memory > xdata2
                    memory > xdata1
                    memory > xNormalDist
                    memory > xX
                    memory > xxbar
                    memory > xn
                    memory > xdata4
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        (((unsupported)) ((((unsupported)) ((xmu)) ((xsigma)))) ((((unsupported)) (10000) (3.0))))
                        xX.write (((xNormalDist)) ((xmu)) ((xsigma)))
                        xn.write 1000
                        xdata.write ((((xX).xsamples)) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdata)))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xmap)) ((xtype)) ((xdata)))))) ((((unsupported)) ((xfloat)))))
                        xxbar.write (((((xself).xmodule).xmean)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (((xmu).sub ((xsigma).mul 8))) ((xxbar)) (((xmu).add ((xsigma).mul 8))))))
                        xn.write 100
                        xdata1.write (((unsupported)) (((xX).xsamples)) ((xn)) ("happiness and joy"))
                        xdata2.write (((unsupported)) (((xX).xsamples)) ((xn)) ("trouble and despair"))
                        xdata3.write (((unsupported)) (((xX).xsamples)) ((xn)) ("happiness and joy"))
                        xdata4.write (((unsupported)) (((xX).xsamples)) ((xn)) ("trouble and despair"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata1)) ((xdata3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata2)) ((xdata4)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata1)) ((xdata2)))
                xtest_pdf.write
                  [xself]
                    memory > xdx
                    memory > xZ
                    memory > xest_pdf
                    memory > xNormalDist
                    memory > xX
                    memory > xY
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xX.write (((xNormalDist)) (100) (15))
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xX).xpdf)) (99))) (((((xX).xpdf)) (100))))
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xX).xpdf)) (101))) (((((xX).xpdf)) (100))))
                        (((unsupported)) ((xi)) ((((xrange)) (50))))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)) (((((xX).xpdf)) ((100.sub (xi))))) (((((xX).xpdf)) ((100.add (xi))))))
                        xdx.write (((unsupported)) (2.0) ((10.neg)))
                        (((unsupported)) ((xx)) ((((xrange)) (90) (111))))
                          seq
                            xest_pdf.write ((((((xX).xcdf)) (((xx).add (xdx)))).sub ((((xX).xcdf)) ((xx)))).div (xdx))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xX).xpdf)) ((xx)))) ((xest_pdf)) (4))
                        xZ.write (((xNormalDist)) 0)
                        (((unsupported)) ((((unsupported)) ((xx)) ((xpx)))) ((((xenumerate)) ((((unsupported)) (0.3989) (0.3989) (0.3989) (0.3988) (0.3986) (0.3984) (0.3982) (0.3980) (0.3977) (0.3973) (0.3970) (0.3965) (0.3961) (0.3956) (0.3951) (0.3945) (0.3939) (0.3932) (0.3925) (0.3918) (0.3910) (0.3902) (0.3894) (0.3885) (0.3876) (0.3867) (0.3857) (0.3847) (0.3836) (0.3825) (0.3814) (0.3802) (0.3790) (0.3778) (0.3765) (0.3752) (0.3739) (0.3725) (0.3712) (0.3697) (0.3683) (0.3668) (0.3653) (0.3637) (0.3621) (0.3605) (0.3589) (0.3572) (0.3555) (0.3538))))))
                          seq
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xZ).xpdf)) (((xx).div 100.0)))) ((xpx)) (4))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xZ).xpdf)) ((((xx).neg).div 100.0)))) ((xpx)) (4))
                        xY.write (((xNormalDist)) (100) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xY).xpdf)) (90))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xX).xpdf)) ((((xfloat)) ("-Inf"))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xX).xpdf)) ((((xfloat)) ("Inf"))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) (((((xX).xpdf)) ((((xfloat)) ("NaN"))))))))
                xtest_cdf.write
                  [xself]
                    memory > xZ
                    memory > xcdfs
                    memory > xNormalDist
                    memory > xX
                    memory > xY
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xX.write (((xNormalDist)) (100) (15))
                        xcdfs.write (((unsupported)) (((((xX).xcdf)) ((xx)))) ((xx)) ((((xrange)) (1) (200))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xmap)) ((xtype)) ((xcdfs)))))) ((((unsupported)) ((xfloat)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xcdfs)) ((((xsorted)) ((xcdfs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xX).xcdf)) (100))) (0.50))
                        xZ.write (((xNormalDist)) 0)
                        (((unsupported)) ((((unsupported)) ((xz)) ((xcum_prob)))) ((((unsupported)) ((((unsupported)) (0.00) (0.50000))) ((((unsupported)) (0.01) (0.50399))) ((((unsupported)) (0.02) (0.50798))) ((((unsupported)) (0.14) (0.55567))) ((((unsupported)) (0.29) (0.61409))) ((((unsupported)) (0.33) (0.62930))) ((((unsupported)) (0.54) (0.70540))) ((((unsupported)) (0.60) (0.72575))) ((((unsupported)) (1.17) (0.87900))) ((((unsupported)) (1.60) (0.94520))) ((((unsupported)) (2.05) (0.97982))) ((((unsupported)) (2.89) (0.99807))) ((((unsupported)) (3.52) (0.99978))) ((((unsupported)) (3.98) (0.99997))) ((((unsupported)) (4.07) (0.99998))))))
                          seq
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xZ).xcdf)) ((xz)))) ((xcum_prob)) (5))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xZ).xcdf)) (((xz).neg)))) ((1.0.sub (xcum_prob))) (5))
                        xY.write (((xNormalDist)) (100) (0))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xY).xcdf)) (90))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xX).xcdf)) ((((xfloat)) ("-Inf"))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xX).xcdf)) ((((xfloat)) ("Inf"))))) (1.0))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) (((((xX).xcdf)) ((((xfloat)) ("NaN"))))))))
                xtest_inv_cdf.write
                  [xself]
                    memory > xZ
                    memory > xp
                    memory > xNormalDist
                    memory > xpp
                    memory > xiq
                    memory > xn
                    seq > @
                      (((unsupported)) 0)
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xiq.write (((xNormalDist)) (100) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xiq).xinv_cdf)) (0.50))) (((xiq).xmean)))
                        xZ.write (((xNormalDist)) 0)
                        xpp.write (((unsupported)) (5.0) ((((unsupported)) (0.000) (1.645) (2.576) (3.291) (3.891) (4.417) (4.892) (5.327) (5.731) (6.109))) (2.5) ((((unsupported)) (0.674) (1.960) (2.807) (3.481) (4.056) (4.565) (5.026) (5.451) (5.847) (6.219))) (1.0) ((((unsupported)) (1.282) (2.326) (3.090) (3.719) (4.265) (4.753) (5.199) (5.612) (5.998) (6.361))))
                        (((unsupported)) ((((unsupported)) ((xbase)) ((xrow)))) (((((xpp).xitems)) 0)))
                          (((unsupported)) ((((unsupported)) ((xexp)) ((xx)))) ((((unsupported)) ((xenumerate)) ((xrow)) (1))))
                            seq
                              xp.write ((xbase).mul (((unsupported)) (10.0) (((xexp).neg))))
                              (((unsupported)) (((xself).xassertAlmostEqual)) ((((((xZ).xinv_cdf)) ((xp))).neg)) ((xx)) (3))
                              xp.write (1.0.sub (xp))
                              (((unsupported)) (((xself).xassertAlmostEqual)) (((((xZ).xinv_cdf)) ((xp)))) ((xx)) (3))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) (((((((xNormalDist)) (40) (1.5)).xinv_cdf)) (0.908789))) (42.000002))
                        xn.write (((unsupported)) (2) (20))
                        (((unsupported)) ((xp)) ((((xrange)) (1) ((xn)))))
                          seq
                            (((unsupported)) ((xp)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)) (((((xiq).xcdf)) (((((xiq).xinv_cdf)) ((xp)))))) ((xp)))
                        (((unsupported)) ((xe)) ((((xrange)) (1) (51))))
                          seq
                            xp.write (((unsupported)) (2.0) (((xe).neg)))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)) (((((xiq).xcdf)) (((((xiq).xinv_cdf)) ((xp)))))) ((xp)))
                            xp.write (1.0.sub (xp))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)) (((((xiq).xcdf)) (((((xiq).xinv_cdf)) ((xp)))))) ((xp)))
                        (((unsupported)) ((xx)) ((((xrange)) (200))))
                          (((unsupported)) (((xself).xassertAlmostEqual)) (((((xiq).xinv_cdf)) (((((xiq).xcdf)) ((xx)))))) ((xx)) (5))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xiq).xinv_cdf)) (0.0))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xiq).xinv_cdf)) ((0.1.neg)))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xiq).xinv_cdf)) (1.0))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xiq).xinv_cdf)) (1.1))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          seq
                            xiq.write (((xNormalDist)) (100) (0))
                            bogusForceDataize.write ((((xiq).xinv_cdf)) (0.5))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xmath).xisnan)) (((((xZ).xinv_cdf)) ((((xfloat)) ("NaN"))))))))
                xtest_quantiles.write
                  [xself]
                    memory > xactual
                    memory > xZ
                    seq > @
                      seq
                        xZ.write (((((xself).xmodule).xNormalDist)) 0)
                        (((unsupported)) ((((unsupported)) ((xn)) ((xexpected)))) ((((unsupported)) ((((unsupported)) (1) ((((unsupported)) 0)))) ((((unsupported)) (2) ((((unsupported)) (0.0))))) ((((unsupported)) (3) ((((unsupported)) ((0.4307.neg)) (0.4307))))) ((((unsupported)) (4) ((((unsupported)) ((0.6745.neg)) (0.0) (0.6745))))))))
                          seq
                            xactual.write (((unsupported)) (((xZ).xquantiles)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) ((((unsupported)) (((xmath).xisclose)) ((xe)) ((xa)) (0.0001))) ((((unsupported)) ((xe)) ((xa)))) ((((xzip)) ((xexpected)) ((xactual)))))))))
                xtest_overlap.write
                  [xself]
                    memory > xX
                    memory > xoverlap_numeric
                    memory > xNormalDist
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        (((unsupported)) ((((unsupported)) ((xX1)) ((xX2)) ((xpublished_result)))) ((((unsupported)) ((((unsupported)) ((((xNormalDist)) (0.0) (2.0))) ((((xNormalDist)) (1.0) (2.0))) (0.80258))) ((((unsupported)) ((((xNormalDist)) (0.0) (1.0))) ((((xNormalDist)) (1.0) (2.0))) (0.60993))))))
                          seq
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xX1).xoverlap)) ((xX2)))) ((xpublished_result)) (4))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xX2).xoverlap)) ((xX1)))) ((xpublished_result)) (4))
                        xoverlap_numeric.write
                          [xX xY xsteps xz]
                            memory > xdx
                            memory > xcenter
                            memory > xxp
                            memory > xtotal
                            memory > xstart
                            memory > xx_arr
                            memory > xyp
                            memory > xwidth
                            memory > xfsum
                            seq > @
                              (((unsupported)) 0)
                                unsupported
                                xfsum.write ((xmath).xfsum)
                                xcenter.write ((((xX).xmean).add ((xY).xmean)).div 2.0)
                                xwidth.write ((xz).mul (((xmax)) (((xX).xstdev)) (((xY).xstdev))))
                                xstart.write ((xcenter).sub (xwidth))
                                xdx.write ((2.0.mul (xwidth)).div (xsteps))
                                xx_arr.write (((unsupported)) (((xstart).add ((xi).mul (xdx)))) ((xi)) ((((xrange)) ((xsteps)))))
                                xxp.write (((xlist)) ((((xmap)) (((xX).xpdf)) ((xx_arr)))))
                                xyp.write (((xlist)) ((((xmap)) (((xY).xpdf)) ((xx_arr)))))
                                xtotal.write (((xmax)) ((((xfsum)) ((xxp)))) ((((xfsum)) ((xyp)))))
                                (((unsupported)) (((((xfsum)) ((((xmap)) ((xmin)) ((xxp)) ((xyp))))).div (xtotal))))
                        (((unsupported)) ((((unsupported)) ((xX1)) ((xX2)))) ((((unsupported)) ((((unsupported)) ((((xNormalDist)) (0.0) (2.0))) ((((xNormalDist)) (1.0) (2.0))))) ((((unsupported)) ((((xNormalDist)) (0.0) (1.0))) ((((xNormalDist)) (1.0) (2.0))))) ((((unsupported)) ((((xNormalDist)) (0.0) (1.0))) ((((xNormalDist)) (1.0) (2.0))))) ((((unsupported)) ((((xNormalDist)) (70) (4))) ((((xNormalDist)) (65) (3.5))))) ((((unsupported)) ((((xNormalDist)) (100) (15))) ((((xNormalDist)) (110) (15))))) ((((unsupported)) ((((xNormalDist)) ((100.neg)) (15))) ((((xNormalDist)) (110) (15))))) ((((unsupported)) ((((xNormalDist)) ((100.neg)) (15))) ((((xNormalDist)) ((110.neg)) (15))))) ((((unsupported)) ((((xNormalDist)) (100) (12))) ((((xNormalDist)) (100) (15))))) ((((unsupported)) ((((xNormalDist)) (100) (12))) ((((xNormalDist)) (110) (15))))) ((((unsupported)) ((((xNormalDist)) (100) (12))) ((((xNormalDist)) (150) (15))))) ((((unsupported)) ((((xNormalDist)) (100) (12))) ((((xNormalDist)) (150) (35))))) ((((unsupported)) ((((xNormalDist)) (1.000) (0.002))) ((((xNormalDist)) (1.001) (0.003))))) ((((unsupported)) ((((xNormalDist)) (1.000) (0.002))) ((((xNormalDist)) (1.006) (0.0003))))) ((((unsupported)) ((((xNormalDist)) (1.000) (0.002))) ((((xNormalDist)) (1.001) (0.099))))))))
                          seq
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xX1).xoverlap)) ((xX2)))) ((((xoverlap_numeric)) ((xX1)) ((xX2)))) (5))
                            (((unsupported)) (((xself).xassertAlmostEqual)) (((((xX2).xoverlap)) ((xX1)))) ((((xoverlap_numeric)) ((xX1)) ((xX2)))) (5))
                        xX.write (((xNormalDist)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xX).xoverlap)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xX).xoverlap)) ((xX)) ((xX)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xX).xoverlap)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((xX).xoverlap)) ((((xNormalDist)) (1) (0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xself).xmodule).xStatisticsError)))))
                          bogusForceDataize.write ((((((xNormalDist)) (1) (0)).xoverlap)) ((xX)))
                xtest_properties.write
                  [xself]
                    memory > xX
                    seq > @
                      seq
                        xX.write (((((xself).xmodule).xNormalDist)) (100) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xmean)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xmedian)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xmode)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xstdev)) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xvariance)) (225))
                xtest_same_type_addition_and_subtraction.write
                  [xself]
                    memory > xY
                    memory > xX
                    memory > xNormalDist
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xX.write (((xNormalDist)) (100) (12))
                        xY.write (((xNormalDist)) (40) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).add (xY))) ((((xNormalDist)) (140) (13))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).sub (xY))) ((((xNormalDist)) (60) (13))))
                xtest_translation_and_scaling.write
                  [xself]
                    memory > xX
                    memory > xy
                    memory > xNormalDist
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xX.write (((xNormalDist)) (100) (15))
                        xy.write 10
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX))) ((((xNormalDist)) (100) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).neg)) ((((xNormalDist)) ((100.neg)) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).add (xy))) ((((xNormalDist)) (110) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xy).add (xX))) ((((xNormalDist)) (110) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).sub (xy))) ((((xNormalDist)) (90) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xy).sub (xX))) ((((xNormalDist)) ((90.neg)) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).mul (xy))) ((((xNormalDist)) (1000) (150))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xy).mul (xX))) ((((xNormalDist)) (1000) (150))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).div (xy))) ((((xNormalDist)) (10) (1.5))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_unary_operations.write
                  [xself]
                    memory > xY
                    memory > xX
                    memory > xNormalDist
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xX.write (((xNormalDist)) (100) (12))
                        xY.write ((xX))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xX)) ((xY)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xmean)) (((xY).xmean)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xstdev)) (((xY).xstdev)))
                        xY.write ((xX).neg)
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xX)) ((xY)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xmean)) ((((xY).xmean).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xX).xstdev)) (((xY).xstdev)))
                xtest_equality.write
                  [xself]
                    memory > x__eq__
                    memory > xnd2
                    memory > xlnd
                    memory > xnd6
                    memory > xnd3
                    memory > xNormalDist
                    memory > xs
                    memory > xnd4
                    memory > x__init__
                    memory > xnd1
                    memory > xnd
                    memory > xnd5
                    memory > xa
                    seq > @
                      seq
                        xNormalDist.write (((xself).xmodule).xNormalDist)
                        xnd1.write (((xNormalDist)) 0)
                        xnd2.write (((xNormalDist)) (2) (4))
                        xnd3.write (((xNormalDist)) 0)
                        xnd4.write (((xNormalDist)) (2) (4))
                        xnd5.write (((xNormalDist)) (2) (8))
                        xnd6.write (((xNormalDist)) (8) (4))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnd1)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnd1)) ((xnd3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnd2)) ((xnd4)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnd2)) ((xnd5)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnd2)) ((xnd6)))
                        (((unsupported)) 0)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (10))
                        xa.write (((xA)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnd1).x__eq__)) ((xa)))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnd1).eq (xa))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).eq (xnd1))) (10))
                        (((unsupported)) ((xNormalDist)))
                          x__init__.write
                            [xself xmu xsigma xn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((xmu)) ((xsigma)))
                                  (((unsupported)) (((xself).xn)) ((xn)))
                        xs.write (((xSizedNormalDist)) (100) (15) (57))
                        xnd4.write (((xNormalDist)) (100) (15))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xnd4)))
                        (((unsupported)) 0)
                          x__init__.write
                            [xself xmu xsigma]
                              seq > @
                                seq
                                  (((unsupported)) (((xself).xmu)) ((xmu)))
                                  (((unsupported)) (((xself).xsigma)) ((xsigma)))
                        xlnd.write (((xLognormalDist)) (100) (15))
                        xnd.write (((xNormalDist)) (100) (15))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xnd)) ((xlnd)))
                xtest_pickle_and_copy.write
                  [xself]
                    memory > xnd3
                    memory > xnd
                    memory > xnd2
                    memory > xnd1
                    seq > @
                      seq
                        xnd.write (((((xself).xmodule).xNormalDist)) (37.5) (5.625))
                        xnd1.write ((((xcopy).xcopy)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnd)) ((xnd1)))
                        xnd2.write ((((xcopy).xdeepcopy)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnd)) ((xnd2)))
                        xnd3.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xnd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnd)) ((xnd3)))
                xtest_hashability.write
                  [xself]
                    memory > xs
                    memory > xND
                    seq > @
                      seq
                        xND.write (((xself).xmodule).xNormalDist)
                        xs.write (((unsupported)) ((((xND)) (100) (15))) ((((xND)) (100.0) (15.0))) ((((xND)) (100) (10))) ((((xND)) (95) (15))) ((((xND)) (100) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (3))
                xtest_repr.write
                  [xself]
                    memory > xnd
                    seq > @
                      seq
                        xnd.write (((((xself).xmodule).xNormalDist)) (37.5) (5.625))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xnd)))) ("NormalDist(mu=37.5, sigma=5.625)"))
            (((unsupported)) (((xunittest).xTestCase)) ((xTestNormalDist)))
              seq
                xmodule.write (xpy_statistics)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("statistics"))) (((xself).xmodule)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("statistics"))) ((xstatistics)))
            (((unsupported)) (((xunittest).xTestCase)) ((xTestNormalDist)) (((((xunittest).xskipUnless)) ((xc_statistics)) ("requires _statistics"))))
              seq
                xmodule.write (xc_statistics)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("statistics"))) (((xself).xmodule)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ("statistics"))) ((xstatistics)))
            xload_tests.write
              [xloader xtests xignore]
                seq > @
                  seq
                    unsupported
                    bogusForceDataize.write ((((xtests).xaddTests)) (((((xdoctest).xDocTestSuite)) 0)))
                    (((unsupported)) ((xtests)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)