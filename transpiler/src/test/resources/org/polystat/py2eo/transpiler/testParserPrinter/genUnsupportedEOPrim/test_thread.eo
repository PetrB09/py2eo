memory > xcm
memory > xround
memory > xBasicThreadTest
memory > xValueError
memory > xstr
memory > xrange
memory > xBarrier
memory > xlock_tests
memory > xrandom
memory > xprint
memory > xtss
memory > xtime
memory > xi
memory > xsupport
memory > xweakref
memory > xunittest
memory > x__name__
memory > xOSError
memory > xos
[] > test_thread
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_forkinthread
        memory > xtest_nt_and_posix_stack_size
        memory > xNUMTASKS
        memory > xsetUp
        memory > xtask
        memory > xPOLL_SLEEP
        memory > xverbose_print
        memory > x__init__
        memory > xlocktype
        memory > xthread
        memory > xtearDown
        memory > xtest_unraisable_exception
        memory > x_print_mutex
        memory > xNUMTRIPS
        memory > xtest_starting_threads
        memory > xtest_barrier
        memory > xnewtask
        memory > xtask2
        memory > xenter
        memory > xtest_stack_size
        memory > xtest__count
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xNUMTASKS.write 10
            xNUMTRIPS.write 3
            xPOLL_SLEEP.write 0.010
            x_print_mutex.write ((((xthread).xallocate_lock)) 0)
            xverbose_print.write
              [xarg]
                seq > @
                  seq
                    unsupported
                    ((xsupport).xverbose).if
                      (((unsupported)) ((x_print_mutex)))
                        bogusForceDataize.write (((xprint)) ((xarg)))
            (((unsupported)) (((xunittest).xTestCase)))
              xsetUp.write
                [xself]
                  memory > xkey
                  seq > @
                    seq
                      (((unsupported)) (((xself).xdone_mutex)) (((((xthread).xallocate_lock)) 0)))
                      bogusForceDataize.write (((((xself).xdone_mutex).xacquire)) 0)
                      (((unsupported)) (((xself).xrunning_mutex)) (((((xthread).xallocate_lock)) 0)))
                      (((unsupported)) (((xself).xrandom_mutex)) (((((xthread).xallocate_lock)) 0)))
                      (((unsupported)) (((xself).xcreated)) (0))
                      (((unsupported)) (((xself).xrunning)) (0))
                      (((unsupported)) (((xself).xnext_ident)) (0))
                      xkey.write ((((xsupport).xthreading_setup)) 0)
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xsupport).xthreading_cleanup)) ((((unsupported)) ((xkey)))))
            (((unsupported)) ((xBasicThreadTest)))
              seq
                xnewtask.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xrunning_mutex)))
                        seq
                          (((unsupported)) (((xself).xnext_ident)) (1))
                          bogusForceDataize.write (((xverbose_print)) (("creating task %s".mod ((xself).xnext_ident))))
                          bogusForceDataize.write ((((xthread).xstart_new_thread)) (((xself).xtask)) ((((unsupported)) (((xself).xnext_ident)))))
                          (((unsupported)) (((xself).xcreated)) (1))
                          (((unsupported)) (((xself).xrunning)) (1))
                xtask.write
                  [xself xident]
                    memory > xdelay
                    seq > @
                      seq
                        (((unsupported)) (((xself).xrandom_mutex)))
                          xdelay.write (((((xrandom).xrandom)) 0).div 10000.0)
                        bogusForceDataize.write (((xverbose_print)) (("task %s will run for %sus".mod (((unsupported)) ((xident)) ((((xround)) (((xdelay).mul (((unsupported)) 0)))))))))
                        bogusForceDataize.write ((((xtime).xsleep)) ((xdelay)))
                        bogusForceDataize.write (((xverbose_print)) (("task %s done".mod (xident))))
                        (((unsupported)) (((xself).xrunning_mutex)))
                          seq
                            (((unsupported)) (((xself).xrunning)) (1))
                            ((((xself).xcreated).eq (xNUMTASKS)).and (((xself).xrunning).eq 0)).if
                              bogusForceDataize.write (((((xself).xdone_mutex).xrelease)) 0)
                xtest_starting_threads.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                        seq
                          (((unsupported)) ((xi)) ((((xrange)) ((xNUMTASKS)))))
                            bogusForceDataize.write ((((xself).xnewtask)) 0)
                          bogusForceDataize.write (((xverbose_print)) ("waiting for tasks to complete..."))
                          bogusForceDataize.write (((((xself).xdone_mutex).xacquire)) 0)
                          bogusForceDataize.write (((xverbose_print)) ("all tasks done"))
                xtest_stack_size.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xthread).xstack_size)) 0)) (0) ("initial stack size is not 0"))
                        bogusForceDataize.write ((((xthread).xstack_size)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xthread).xstack_size)) 0)) (0) ("stack_size not reset to default"))
                xtest_nt_and_posix_stack_size.write
                  [xself]
                    memory > xfail_msg
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xValueError)) (((xthread).xerror)))
                          bogusForceDataize.write ((((xthread).xstack_size)) (4096))
                          bogusForceDataize.write (((xverbose_print)) ("caught expected ValueError setting stack_size(4096)"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("platform does not support changing thread stack size"))
                        xfail_msg.write "stack_size(%d) failed - should succeed"
                        (((unsupported)) ((xtss)) ((((unsupported)) (262144) (1048576) (0))))
                          seq
                            bogusForceDataize.write ((((xthread).xstack_size)) ((xtss)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xthread).xstack_size)) 0)) ((xtss)) (((xfail_msg).mod (xtss))))
                            bogusForceDataize.write (((xverbose_print)) (("successfully set stack_size(%d)".mod (xtss))))
                        (((unsupported)) ((xtss)) ((((unsupported)) (262144) (1048576))))
                          seq
                            bogusForceDataize.write (((xverbose_print)) (("trying stack_size = (%d)".mod (xtss))))
                            (((unsupported)) (((xself).xnext_ident)) (0))
                            (((unsupported)) (((xself).xcreated)) (0))
                            (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                              seq
                                (((unsupported)) ((xi)) ((((xrange)) ((xNUMTASKS)))))
                                  bogusForceDataize.write ((((xself).xnewtask)) 0)
                                bogusForceDataize.write (((xverbose_print)) ("waiting for all tasks to complete"))
                                bogusForceDataize.write (((((xself).xdone_mutex).xacquire)) 0)
                                bogusForceDataize.write (((xverbose_print)) ("all tasks done"))
                        bogusForceDataize.write ((((xthread).xstack_size)) (0))
                xtest__count.write
                  [xself]
                    memory > xstarted
                    memory > xorig
                    memory > xwr
                    memory > xmut
                    memory > xtask
                    memory > xdone
                    seq > @
                      seq
                        xorig.write ((((xthread).x_count)) 0)
                        xmut.write ((((xthread).xallocate_lock)) 0)
                        bogusForceDataize.write ((((xmut).xacquire)) 0)
                        xstarted.write (((unsupported)) 0)
                        xtask.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstarted).xappend)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xmut).xacquire)) 0)
                                bogusForceDataize.write ((((xmut).xrelease)) 0)
                        (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                          seq
                            bogusForceDataize.write ((((xthread).xstart_new_thread)) ((xtask)) ((((unsupported)) 0)))
                            while.
                              ((xstarted).not)
                              [unused]
                                seq > @
                                  bogusForceDataize.write ((((xtime).xsleep)) ((xPOLL_SLEEP)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xthread).x_count)) 0)) (((xorig).add 1)))
                            bogusForceDataize.write ((((xmut).xrelease)) 0)
                            xdone.write (((unsupported)) 0)
                            xwr.write ((((xweakref).xref)) ((xtask)) ((((unsupported)) (((((xdone).xappend)) ("None: is there a None literal in the EO language?"))))))
                            (((unsupported)) ((((unsupported)) ((xtask)))))
                            while.
                              ((xdone).not)
                              [unused]
                                seq > @
                                  bogusForceDataize.write ((((xtime).xsleep)) ((xPOLL_SLEEP)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xthread).x_count)) 0)) ((xorig)))
                xtest_unraisable_exception.write
                  [xself]
                    memory > xtask
                    memory > xstarted
                    seq > @
                      seq
                        xtask.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstarted).xrelease)) 0)
                                (((unsupported)) ((((xValueError)) ("task failed"))))
                        xstarted.write ((((xthread).xallocate_lock)) 0)
                        (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)) ((xcm)))
                          seq
                            (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                              seq
                                bogusForceDataize.write ((((xstarted).xacquire)) 0)
                                bogusForceDataize.write ((((xthread).xstart_new_thread)) ((xtask)) ((((unsupported)) 0)))
                                bogusForceDataize.write ((((xstarted).xacquire)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xcm).xunraisable).xexc_value)))) ("task failed"))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xcm).xunraisable).xobject)) ((xtask)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xunraisable).xerr_msg)) ("Exception ignored in thread started by"))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)) ((((xcm).xunraisable).xexc_traceback)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xnum_threads]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xnum_threads)) ((xnum_threads)))
                        (((unsupported)) (((xself).xwaiting)) (0))
                        (((unsupported)) (((xself).xcheckin_mutex)) (((((xthread).xallocate_lock)) 0)))
                        (((unsupported)) (((xself).xcheckout_mutex)) (((((xthread).xallocate_lock)) 0)))
                        bogusForceDataize.write (((((xself).xcheckout_mutex).xacquire)) 0)
                xenter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcheckin_mutex).xacquire)) 0)
                        (((unsupported)) (((xself).xwaiting)) ((((xself).xwaiting).add 1)))
                        (((xself).xwaiting).eq ((xself).xnum_threads)).if
                          seq
                            (((unsupported)) (((xself).xwaiting)) ((((xself).xnum_threads).sub 1)))
                            bogusForceDataize.write (((((xself).xcheckout_mutex).xrelease)) 0)
                            (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xcheckin_mutex).xrelease)) 0)
                        bogusForceDataize.write (((((xself).xcheckout_mutex).xacquire)) 0)
                        (((unsupported)) (((xself).xwaiting)) ((((xself).xwaiting).sub 1)))
                        (((xself).xwaiting).eq 0).if
                          seq
                            bogusForceDataize.write (((((xself).xcheckin_mutex).xrelease)) 0)
                            (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xcheckout_mutex).xrelease)) 0)
            (((unsupported)) ((xBasicThreadTest)))
              seq
                xtest_barrier.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                        seq
                          (((unsupported)) (((xself).xbar)) ((((xBarrier)) ((xNUMTASKS)))))
                          (((unsupported)) (((xself).xrunning)) ((xNUMTASKS)))
                          (((unsupported)) ((xi)) ((((xrange)) ((xNUMTASKS)))))
                            bogusForceDataize.write ((((xthread).xstart_new_thread)) (((xself).xtask2)) ((((unsupported)) ((xi)))))
                          bogusForceDataize.write (((xverbose_print)) ("waiting for tasks to end"))
                          bogusForceDataize.write (((((xself).xdone_mutex).xacquire)) 0)
                          bogusForceDataize.write (((xverbose_print)) ("tasks done"))
                xtask2.write
                  [xself xident]
                    memory > xdelay
                    memory > xfinished
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((xrange)) ((xNUMTRIPS)))))
                          seq
                            ((xident).eq 0).if
                              xdelay.write 0
                              (((unsupported)) (((xself).xrandom_mutex)))
                                xdelay.write (((((xrandom).xrandom)) 0).div 10000.0)
                            bogusForceDataize.write (((xverbose_print)) (("task %s will run for %sus".mod (((unsupported)) ((xident)) ((((xround)) (((xdelay).mul (((unsupported)) 0)))))))))
                            bogusForceDataize.write ((((xtime).xsleep)) ((xdelay)))
                            bogusForceDataize.write (((xverbose_print)) (("task %s entering %s".mod (((unsupported)) ((xident)) ((xi))))))
                            bogusForceDataize.write (((((xself).xbar).xenter)) 0)
                            bogusForceDataize.write (((xverbose_print)) (("task %s leaving barrier".mod (xident))))
                        (((unsupported)) (((xself).xrunning_mutex)))
                          seq
                            (((unsupported)) (((xself).xrunning)) (1))
                            xfinished.write (((xself).xrunning).eq 0)
                        (xfinished).if
                          bogusForceDataize.write (((((xself).xdone_mutex).xrelease)) 0)
            (((unsupported)) (((xlock_tests).xLockTests)))
              xlocktype.write ((xthread).xallocate_lock)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xread_fd)) (((xself).xwrite_fd)))) (((((xos).xpipe)) 0)))
                xtest_forkinthread.write
                  [xself]
                    memory > xthread1
                    memory > xstatus
                    seq > @
                      (((unsupported)) 0)
                        xstatus.write "not set"
                        xthread1.write
                          []
                            memory > xpid
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xpid.write ((((xos).xfork)) 0)
                                ((xpid).eq 0).if
                                  (((unsupported)) 0)
                                    seq
                                      bogusForceDataize.write ((((xos).xclose)) (((xself).xread_fd)))
                                      bogusForceDataize.write ((((xos).xwrite)) (((xself).xwrite_fd)) ("OK"))
                                    bogusForceDataize.write ((((xos).x_exit)) (0))
                                  seq
                                    bogusForceDataize.write ((((xos).xclose)) (((xself).xwrite_fd)))
                                    (((unsupported)) ((((unsupported)) ((xpid)) ((xstatus)))) (((((xos).xwaitpid)) ((xpid)) (0))))
                        (((unsupported)) (((((xsupport).xwait_threads_exit)) 0)))
                          seq
                            bogusForceDataize.write ((((xthread).xstart_new_thread)) ((xthread1)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xos).xread)) (((xself).xread_fd)) (2))) ("OK") ("Unable to fork() in thread"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xstatus)) (0))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xclose)) (((xself).xread_fd)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xclose)) (((xself).xwrite_fd)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)