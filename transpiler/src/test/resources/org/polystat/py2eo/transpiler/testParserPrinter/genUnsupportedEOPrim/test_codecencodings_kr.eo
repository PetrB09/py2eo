memory > xmultibytecodec_support
memory > xunittest
memory > x__name__
[] > test_codecencodings_kr
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xencoding
        memory > xtstring
        memory > xcodectests
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "cp949"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("cp949"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx80x80xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx80x80xc1xc4") ("replace") ("abcufffdufffduc894"))) ((((unsupported)) ("abcx80x80xc1xc4xc8") ("replace") ("abcufffdufffduc894ufffd"))) ((((unsupported)) ("abcx80x80xc1xc4") ("ignore") ("abcuc894"))))
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "euc_kr"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("euc_kr"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx80x80xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx80x80xc1xc4") ("replace") ("abcufffdufffduc894"))) ((((unsupported)) ("abcx80x80xc1xc4xc8") ("replace") ("abcufffdufffduc894ufffd"))) ((((unsupported)) ("abcx80x80xc1xc4") ("ignore") ("abcuc894"))) ((((unsupported)) ("xa4xd4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0xa4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0xa4xd4") ("strict") ("uc4d4"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0xa4xd4x") ("strict") ("uc4d4x"))) ((((unsupported)) ("axa4xd4xa4xb6xa4") ("replace") ("aufffd"))) ((((unsupported)) ("xa4xd4xa3xb6xa4xd0xa4xd4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa3xd0xa4xd4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0xa3xd4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("xa4xd4xa4xffxa4xd0xa4xd4") ("replace") ("ufffdu6e21ufffdu3160ufffd"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xffxa4xd4") ("replace") ("ufffdu6e21ub544ufffdufffd"))) ((((unsupported)) ("xa4xd4xa4xb6xa4xd0xa4xff") ("replace") ("ufffdu6e21ub544u572dufffd"))) ((((unsupported)) ("xa4xd4xffxa4xd4xa4xb6xa4xd0xa4xd4") ("replace") ("ufffdufffdufffduc4d4"))) ((((unsupported)) ("xc1xc4") ("strict") ("uc894"))))
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "johab"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("johab"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx80x80xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx80x80xc1xc4") ("replace") ("abcufffdufffducd27"))) ((((unsupported)) ("abcx80x80xc1xc4xc8") ("replace") ("abcufffdufffducd27ufffd"))) ((((unsupported)) ("abcx80x80xc1xc4") ("ignore") ("abcucd27"))) ((((unsupported)) ("xD8abc") ("replace") ("uFFFDabc"))) ((((unsupported)) ("xD8xFFabc") ("replace") ("uFFFDuFFFDabc"))) ((((unsupported)) ("x84bxy") ("replace") ("uFFFDbxy"))) ((((unsupported)) ("x8CBxy") ("replace") ("uFFFDBxy"))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)