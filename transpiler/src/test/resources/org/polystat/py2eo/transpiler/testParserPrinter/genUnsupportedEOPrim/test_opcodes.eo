memory > xC
memory > xAttributeError
memory > xAClass
memory > x__annotations__
memory > xstr
memory > xCClass
memory > xexec
memory > xrange
memory > xZeroDivisionError
memory > xeval
memory > xopen
memory > xglobals
memory > xOSError
memory > xunittest
memory > xDClass
memory > xNameError
memory > xf
memory > xint
memory > xException
memory > xann_module
memory > xx
memory > xi
memory > xcompile
memory > xsupport
memory > xMyString
memory > xv
memory > xTypeError
memory > xBClass
memory > x__name__
[] > test_opcodes
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_do_not_recreate_annotations
        memory > xtest_compare_function_objects
        memory > xtest_setup_annotations_line
        memory > xtest_try_inside_for_loop
        memory > xtest_modulo_of_string_subclasses
        memory > xtest_raise_class_exceptions
        memory > xtest_use_existing_annotations
        memory > xtest_no_annotations_if_not_needed
        seq > @
          seq
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_try_inside_for_loop.write
                  [xself]
                    memory > xn
                    seq > @
                      seq
                        xn.write 0
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          seq
                            xn.write ((xn).add (xi))
                            (((unsupported)) ((xNameError)) ((xZeroDivisionError)) ((xTypeError)))
                              unsupported
                            (((unsupported)) 0)
                            (((unsupported)) 0)
                            xn.write ((xn).add (xi))
                        ((xn).neq 90).if
                          bogusForceDataize.write ((((xself).xfail)) ("try inside for"))
                xtest_setup_annotations_line.write
                  [xself]
                    memory > xtxt
                    memory > xco
                    seq > @
                      (((unsupported)) ((xOSError)))
                        seq
                          (((unsupported)) ((((xopen)) (((xann_module).x__file__)))) ((xf)))
                            xtxt.write ((((xf).xread)) 0)
                          xco.write (((xcompile)) ((xtxt)) (((xann_module).x__file__)) ("exec"))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xco).xco_firstlineno)) (3))
                xtest_no_annotations_if_not_needed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          unsupported
                xtest_use_existing_annotations.write
                  [xself]
                    memory > xns
                    seq > @
                      seq
                        xns.write (((unsupported)) ("__annotations__") ((((unsupported)) (1) (2))))
                        bogusForceDataize.write (((xexec)) ("x: int") ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xns)) ("__annotations__"))) ((((unsupported)) ("x") ((xint)) (1) (2))))
                xtest_do_not_recreate_annotations.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xswap_item)) ((((xglobals)) 0)) ("__annotations__") ((((unsupported)) 0)))))
                        seq
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((((xglobals)) 0)) ("__annotations__"))))))
                          (((unsupported)) 0)
                            seq
                              (((unsupported)) ((((unsupported)) ((x__annotations__)))))
                              (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))))
                                (((unsupported)) ((xx)) ((xint)))
                xtest_raise_class_exceptions.write
                  [xself]
                    memory > xa
                    memory > x__init__
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)) ((xException)))
                        (((unsupported)) ((xAClass)))
                        (((unsupported)) ((xException)))
                        (((unsupported)) ((xAClass)))
                          x__init__.write
                            [xself xignore]
                              seq > @
                        (((unsupported)) 0)
                          (((unsupported)) ((((xAClass)) 0)))
                        (((unsupported)) ((xAClass)))
                          (((unsupported)) ((((xAClass)) 0)))
                        (((unsupported)) ((xAClass)))
                          (((unsupported)) ((((xBClass)) 0)))
                        (((unsupported)) ((xCClass)))
                          (((unsupported)) ((((xBClass)) 0)))
                          bogusForceDataize.write ((((xself).xfail)) 0)
                        xa.write (((xAClass)) 0)
                        xb.write (((xBClass)) 0)
                        (((unsupported)) ((xAClass)))
                          (((unsupported)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((xb)))
                          bogusForceDataize.write ((((xself).xfail)) ("no exception"))
                        (((unsupported)) ((xDClass)))
                          (((unsupported)) ((((xDClass)) ((xa)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xv)) ((xDClass)))
                          bogusForceDataize.write ((((xself).xfail)) ("no exception"))
                xtest_compare_function_objects.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xeval)) ("lambda: None"))
                        xg.write (((xeval)) ("lambda: None"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda a: a"))
                        xg.write (((xeval)) ("lambda a: a"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda a=1: a"))
                        xg.write (((xeval)) ("lambda a=1: a"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda: 0"))
                        xg.write (((xeval)) ("lambda: 1"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda: None"))
                        xg.write (((xeval)) ("lambda a: None"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda a: None"))
                        xg.write (((xeval)) ("lambda b: None"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda a: None"))
                        xg.write (((xeval)) ("lambda a=None: None"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                        xf.write (((xeval)) ("lambda a=0: None"))
                        xg.write (((xeval)) ("lambda a=1: None"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xf)) ((xg)))
                xtest_modulo_of_string_subclasses.write
                  [xself]
                    memory > x__mod__
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                          x__mod__.write
                            [xself xvalue]
                              seq > @
                                (((unsupported)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xMyString)) 0).mod 3)) (42))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)