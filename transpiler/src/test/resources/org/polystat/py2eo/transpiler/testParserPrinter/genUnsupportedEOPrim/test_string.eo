memory > xAttributeError
memory > xValueError
memory > xstr
memory > xKeyError
memory > xerr
memory > xPathPattern
memory > xMapping
memory > xchr
memory > xTemplate
memory > xMyTemplate
memory > xXFormatter
memory > xfield
memory > xCheckAllUsedFormatter
memory > xMyPattern
memory > xNamespaceFormatter
memory > xBadPattern
memory > xCallFormatter
memory > xrange
memory > xpart
memory > xformat_spec
memory > xIndexError
memory > xPieDelims
memory > x_
memory > xstring
memory > xset
memory > xarg
memory > xsuper
memory > xBarFormatter
memory > xgetattr
memory > xAnyAttr
memory > xformat
memory > xunittest
memory > xisinstance
memory > xfield_name
memory > xAmpersandTemplate
memory > xlen
memory > xdict
memory > xBag
memory > xTypeError
memory > x__name__
[] > test_string
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_tupleargs
        memory > xtest_regular_templates
        memory > xtest_override_parse
        memory > xtest_braced_override_safe
        memory > xtest_braced_override
        memory > xtest_unicode_values
        memory > xtest_auto_numbering
        memory > xtest_flags_override
        memory > xtest_invalid_placeholders
        memory > xtest_capwords
        memory > xtest_override_format_field
        memory > xtest_basic_formatter
        memory > xtest_conversion_specifiers
        memory > xtest_pattern_override
        memory > xtest_idpattern_override_inside_outside
        memory > xtest_regular_templates_with_upper_case
        memory > xtest_override_get_value
        memory > xtest_delimiter_override
        memory > xtest_keyword_arguments
        memory > xtest_escapes
        memory > xtest_idpattern_override_inside_outside_invalid_unbraced
        memory > xtest_check_unused_args
        memory > xtest_percents
        memory > x__getitem__
        memory > xtest_name_lookup
        memory > xtest_override_convert_field
        memory > xtest_vformat_recursion_limit
        memory > xtest_format_keyword_arguments
        memory > xtest_index_lookup
        memory > xtest_SafeTemplate
        memory > xtest_idpattern_override
        memory > xtest_regular_templates_with_braces
        memory > xtest_stringification
        memory > xtest_attrs
        memory > xtest_invalid_with_no_lines
        memory > xtest_regular_templates_with_non_letters
        memory > xtest_keyword_arguments_safe
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_attrs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xwhitespace)) (" tnrx0bx0c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xascii_lowercase)) ("abcdefghijklmnopqrstuvwxyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xascii_uppercase)) ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xascii_letters)) ((((xstring).xascii_lowercase).add ((xstring).xascii_uppercase))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xdigits)) ("0123456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xhexdigits)) ((((xstring).xdigits).add "abcdefABCDEF")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xoctdigits)) ("01234567"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xpunctuation)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xstring).xprintable)) (((((((xstring).xdigits).add ((xstring).xascii_lowercase)).add ((xstring).xascii_uppercase)).add ((xstring).xpunctuation)).add ((xstring).xwhitespace))))
                xtest_capwords.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("abc def ghi"))) ("Abc Def Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("abctdefnghi"))) ("Abc Def Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("abct   def  nghi"))) ("Abc Def Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("ABC DEF GHI"))) ("Abc Def Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("ABC-DEF-GHI") ("-"))) ("Abc-Def-Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("ABC-def DEF-ghi GHI"))) ("Abc-def Def-ghi Ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("   aBc  DeF   "))) ("Abc Def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("taBctDeFt"))) ("Abc Def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstring).xcapwords)) ("taBctDeFt") ("t"))) ("tAbctDeft"))
                xtest_basic_formatter.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("foo{0}") ("bar"))) ("foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("foo{1}{0}-{1}") ("bar") (6))) ("foo6bar-6"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xfmt).xformat)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xstring).xFormatter).xformat)))
                xtest_format_keyword_arguments.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("-{arg}-") ("test"))) ("-test-"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xfmt).xformat)) ("-{arg}-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("-{self}-") ("test"))) ("-test-"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xfmt).xformat)) ("-{self}-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("-{format_string}-") ("test"))) ("-test-"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xfmt).xformat)) ("-{format_string}-"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("format_string"))))
                          (((unsupported)) (((xfmt).xformat)) ("-{arg}-") ("test"))
                xtest_auto_numbering.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("foo{}{}") ("bar") (6))) (((("foo{}{}".xformat)) ("bar") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("foo{1}{num}{1}") ("None: is there a None literal in the EO language?") ("bar") (6))) ((((unsupported)) (("foo{1}{num}{1}".xformat)) ("None: is there a None literal in the EO language?") ("bar") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{:^{}}") ("bar") (6))) (((("{:^{}}".xformat)) ("bar") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{:^{}} {}") ("bar") (6) ("X"))) (((("{:^{}} {}".xformat)) ("bar") (6) ("X"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("{:^{pad}}{}") ("foo") ("bar") (6))) ((((unsupported)) (("{:^{pad}}{}".xformat)) ("foo") ("bar") (6))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xfmt).xformat)) ("foo{1}{}") ("bar") (6))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xfmt).xformat)) ("foo{}{1}") ("bar") (6))
                xtest_conversion_specifiers.write
                  [xself]
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("-{arg!r}-") ("test"))) ("-'test'-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!s}") ("test"))) ("test"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfmt).xformat)) ("{0!h}") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!a}") (42))) ("42"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!a}") (((xstring).xascii_letters)))) ("'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!a}") ((((xchr)) (255))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!a}") ((((xchr)) (256))))) ((((unsupported)) 0)))
                xtest_name_lookup.write
                  [xself]
                    memory > xx
                    memory > x__getattr__
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        (((unsupported)) 0)
                          x__getattr__.write
                            [xself xattr]
                              seq > @
                                (((unsupported)) ((xattr)))
                        xx.write (((xAnyAttr)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0.lumber}{0.jack}") ((xx)))) ("lumberjack"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          bogusForceDataize.write ((((xfmt).xformat)) ("{0.lumber}{0.jack}") (""))
                xtest_index_lookup.write
                  [xself]
                    memory > xlookup
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        xlookup.write (((unsupported)) ("eggs") ("and") ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0[2]}{0[0]}") ((xlookup)))) ("spameggs"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xIndexError)))))
                          bogusForceDataize.write ((((xfmt).xformat)) ("{0[2]}{0[0]}") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                          bogusForceDataize.write ((((xfmt).xformat)) ("{0[2]}{0[0]}") ((((unsupported)) 0)))
                xtest_override_get_value.write
                  [xself]
                    memory > xget_value
                    memory > xfmt
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) (((xstring).xFormatter)))
                          seq
                            x__init__.write
                              [xself xnamespace]
                                seq > @
                                  (((unsupported)) 0)
                                    bogusForceDataize.write (((((xstring).xFormatter).x__init__)) ((xself)))
                                    (((unsupported)) (((xself).xnamespace)) ((xnamespace)))
                            xget_value.write
                              [xself xkey xargs xkwds]
                                seq > @
                                  (((xisinstance)) ((xkey)) ((xstr))).if
                                    (((unsupported)) ((xKeyError)))
                                      (((unsupported)) ((((unsupported)) ((xkwds)) ((xkey)))))
                                      (((unsupported)) ((((unsupported)) (((xself).xnamespace)) ((xkey)))))
                                    bogusForceDataize.write (((((xstring).xFormatter).xget_value)) ((xkey)) ((xargs)) ((xkwds)))
                        xfmt.write (((xNamespaceFormatter)) ((((unsupported)) ("greeting") ("hello"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{greeting}, world!"))) ("hello, world!"))
                xtest_override_format_field.write
                  [xself]
                    memory > xformat_field
                    memory > xfmt
                    seq > @
                      seq
                        (((unsupported)) (((xstring).xFormatter)))
                          xformat_field.write
                            [xself xvalue xformat_spec]
                              seq > @
                                (((unsupported)) ((((xformat)) ((((xvalue)) 0)) ((xformat_spec)))))
                        xfmt.write (((xCallFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("*{0}*") ((((unsupported)) ("result"))))) ("*result*"))
                xtest_override_convert_field.write
                  [xself]
                    memory > xfmt
                    memory > xconvert_field
                    seq > @
                      seq
                        (((unsupported)) (((xstring).xFormatter)))
                          xconvert_field.write
                            [xself xvalue xconversion]
                              seq > @
                                seq
                                  ((xconversion).eq "x").if
                                    (((unsupported)) ("None: is there a None literal in the EO language?"))
                                  (((unsupported)) (((((((xsuper)) 0).xconvert_field)) ((xvalue)) ((xconversion)))))
                        xfmt.write (((xXFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0!r}:{0!x}") ("foo") ("foo"))) ("'foo':None"))
                xtest_override_parse.write
                  [xself]
                    memory > xparse
                    memory > xfmt
                    seq > @
                      seq
                        (((unsupported)) (((xstring).xFormatter)))
                          xparse.write
                            [xself xformat_string]
                              seq > @
                                (((unsupported)) ((xfield)) (((((xformat_string).xsplit)) ("|"))))
                                  ((((unsupported)) ((xfield)) (0)).eq "+").if
                                    seq
                                      (((unsupported)) ((((unsupported)) ((xfield_name)) ((x_)) ((xformat_spec)))) (((((((unsupported)) ((xfield)) ((((unsupported)) (1)))).xpartition)) (":"))))
                                      (((unsupported)) ((((unsupported)) ("") ((xfield_name)) ((xformat_spec)) ("None: is there a None literal in the EO language?"))))
                                    (((unsupported)) ((((unsupported)) ((xfield)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        xfmt.write (((xBarFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("*|+0:^10s|*") ("foo"))) ("*   foo    *"))
                xtest_check_unused_args.write
                  [xself]
                    memory > xcheck_unused_args
                    memory > xfmt
                    seq > @
                      seq
                        (((unsupported)) (((xstring).xFormatter)))
                          xcheck_unused_args.write
                            [xself xused_args xargs xkwargs]
                              memory > xunused_args
                              seq > @
                                seq
                                  xunused_args.write (((xset)) (((((xkwargs).xkeys)) 0)))
                                  bogusForceDataize.write ((((xunused_args).xupdate)) ((((xrange)) (0) ((((xlen)) ((xargs)))))))
                                  (((unsupported)) ((xarg)) ((xused_args)))
                                    bogusForceDataize.write ((((xunused_args).xremove)) ((xarg)))
                                  (xunused_args).if
                                    (((unsupported)) ((((xValueError)) ("unused arguments"))))
                        xfmt.write (((xCheckAllUsedFormatter)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfmt).xformat)) ("{0}") (10))) ("10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("{0}{i}") (10) (100))) ("10100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xfmt).xformat)) ("{0}{i}{1}") (10) (20) (100))) ("1010020"))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xfmt).xformat)) ("{0}{i}{1}") (10) (20) (100) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xfmt).xformat)) ("{0}") (10) (20))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xfmt).xformat)) ("{0}") (10) (20) (100))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) (((xfmt).xformat)) ("{i}") (10) (20) (100))
                xtest_vformat_recursion_limit.write
                  [xself]
                    memory > xargs
                    memory > xkwargs
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write ((((xstring).xFormatter)) 0)
                        xargs.write (((unsupported)) 0)
                        xkwargs.write (((unsupported)) ((xdict)) (100))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xerr)))
                          bogusForceDataize.write ((((xfmt).x_vformat)) ("{i}") ((xargs)) ((xkwargs)) ((((xset)) 0)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("recursion") ((((xstr)) (((xerr).xexception)))))
            (((unsupported)) 0)
            (((unsupported)) 0)
              x__getitem__.write
                [xself xname]
                  memory > xobj
                  seq > @
                    seq
                      xobj.write (xself)
                      (((unsupported)) ((xpart)) (((((xname).xsplit)) ("."))))
                        (((unsupported)) ((xAttributeError)))
                          xobj.write (((xgetattr)) ((xobj)) ((xpart)))
                          (((unsupported)) ((((xKeyError)) ((xname)))))
                      (((unsupported)) ((xobj)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_regular_templates.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xTemplate)) ("$who likes to eat a bag of $what worth $$100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))) ("tim likes to eat a bag of ham worth $100"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xTemplate).xsubstitute)))
                xtest_regular_templates_with_braces.write
                  [xself]
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xTemplate)) ("$who likes ${what} for ${meal}"))
                        xd.write (((unsupported)) ((xdict)) ("tim") ("ham") ("dinner"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xd)))) ("tim likes ham for dinner"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))
                xtest_regular_templates_with_upper_case.write
                  [xself]
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xTemplate)) ("$WHO likes ${WHAT} for ${MEAL}"))
                        xd.write (((unsupported)) ((xdict)) ("tim") ("ham") ("dinner"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xd)))) ("tim likes ham for dinner"))
                xtest_regular_templates_with_non_letters.write
                  [xself]
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xTemplate)) ("$_wh0_ likes ${_w_h_a_t_} for ${mea1}"))
                        xd.write (((unsupported)) ((xdict)) ("tim") ("ham") ("dinner"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xd)))) ("tim likes ham for dinner"))
                xtest_escapes.write
                  [xself]
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("$who likes to eat a bag of $$what worth $$100"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))) ("tim likes to eat a bag of $what worth $100"))
                        xs.write (((xTemplate)) ("$who likes $$"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))) ("tim likes $"))
                xtest_percents.write
                  [xself]
                    memory > xd
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("%(foo)s $foo ${foo}"))
                        xd.write (((unsupported)) ((xdict)) ("baz"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((xd)))) ("%(foo)s baz baz"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((xd)))) ("%(foo)s baz baz"))
                xtest_stringification.write
                  [xself]
                    memory > xd
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("tim has eaten $count bags of ham today"))
                        xd.write (((unsupported)) ((xdict)) (7))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((xd)))) ("tim has eaten 7 bags of ham today"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((xd)))) ("tim has eaten 7 bags of ham today"))
                        xs.write (((xTemplate)) ("tim has eaten ${count} bags of ham today"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((xd)))) ("tim has eaten 7 bags of ham today"))
                xtest_tupleargs.write
                  [xself]
                    memory > xd
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("$who ate ${meal}"))
                        xd.write (((unsupported)) ((xdict)) ((((unsupported)) ("tim") ("fred"))) ((((unsupported)) ("ham") ("kung pao"))))
                        bogusForceDataize.write (((xeq)) (((((xs).xsubstitute)) ((xd)))) ("('tim', 'fred') ate ('ham', 'kung pao')"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((xd)))) ("('tim', 'fred') ate ('ham', 'kung pao')"))
                xtest_SafeTemplate.write
                  [xself]
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("$who likes ${what} for ${meal}"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("tim"))))) ("tim likes ${what} for ${meal}"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("ham"))))) ("$who likes ham for ${meal}"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("ham") ("dinner"))))) ("$who likes ham for dinner"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))) ("tim likes ham for ${meal}"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("tim") ("ham") ("dinner"))))) ("tim likes ham for dinner"))
                xtest_invalid_placeholders.write
                  [xself]
                    memory > xraises
                    memory > xs
                    seq > @
                      seq
                        xraises.write ((xself).xassertRaises)
                        xs.write (((xTemplate)) ("$who likes $"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                        xs.write (((xTemplate)) ("$who likes ${what)"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                        xs.write (((xTemplate)) ("$who likes $100"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                        xs.write (((xTemplate)) ("$who likes $u0131"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                        xs.write (((xTemplate)) ("$who likes $u0130"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))))
                xtest_idpattern_override.write
                  [xself]
                    memory > xs
                    memory > xm
                    memory > xidpattern
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xidpattern.write "[_a-z][._a-z0-9]*"
                        xm.write (((xMapping)) 0)
                        (((unsupported)) (((xm).xbag)) ((((xBag)) 0)))
                        (((unsupported)) ((((xm).xbag).xfoo)) ((((xBag)) 0)))
                        (((unsupported)) (((((xm).xbag).xfoo).xwho)) ("tim"))
                        (((unsupported)) ((((xm).xbag).xwhat)) ("ham"))
                        xs.write (((xPathPattern)) ("$bag.foo.who likes to eat a bag of $bag.what"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xm)))) ("tim likes to eat a bag of ham"))
                xtest_flags_override.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xflags
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xflags.write 0
                        xs.write (((xMyPattern)) ("$wHO likes ${WHAT} for ${meal}"))
                        xd.write (((unsupported)) ((xdict)) ("tim") ("ham") ("dinner") ("fred"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xsubstitute)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsafe_substitute)) ((xd)))) ("fredHO likes ${WHAT} for dinner"))
                xtest_idpattern_override_inside_outside.write
                  [xself]
                    memory > xflags
                    memory > xidpattern
                    memory > xbraceidpattern
                    memory > xs
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          seq
                            xidpattern.write "[a-z]+"
                            xbraceidpattern.write "[A-Z]+"
                            xflags.write 0
                        xm.write (((unsupported)) ((xdict)) ("foo") ("BAR"))
                        xs.write (((xMyPattern)) ("$foo ${BAR}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xm)))) ("foo BAR"))
                xtest_idpattern_override_inside_outside_invalid_unbraced.write
                  [xself]
                    memory > xflags
                    memory > xidpattern
                    memory > xbraceidpattern
                    memory > xs
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          seq
                            xidpattern.write "[a-z]+"
                            xbraceidpattern.write "[A-Z]+"
                            xflags.write 0
                        xm.write (((unsupported)) ((xdict)) ("foo") ("BAR"))
                        xs.write (((xMyPattern)) ("$FOO"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xsubstitute)) ((xm)))
                        xs.write (((xMyPattern)) ("${bar}"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xsubstitute)) ((xm)))
                xtest_pattern_override.write
                  [xself]
                    memory > xs
                    memory > xm
                    memory > xpattern
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xpattern.write (((unsupported)) 0)
                        xm.write (((xMapping)) 0)
                        (((unsupported)) (((xm).xbag)) ((((xBag)) 0)))
                        (((unsupported)) ((((xm).xbag).xfoo)) ((((xBag)) 0)))
                        (((unsupported)) (((((xm).xbag).xfoo).xwho)) ("tim"))
                        (((unsupported)) ((((xm).xbag).xwhat)) ("ham"))
                        xs.write (((xMyPattern)) ("@bag.foo.who likes to eat a bag of @bag.what"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xm)))) ("tim likes to eat a bag of ham"))
                        (((unsupported)) ((xTemplate)))
                          xpattern.write (((unsupported)) 0)
                        xs.write (((xBadPattern)) ("@bag.foo.who likes to eat a bag of @bag.what"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xsafe_substitute)) ((((unsupported)) 0)))
                xtest_braced_override.write
                  [xself]
                    memory > xtmpl
                    memory > xpattern
                    memory > xt
                    memory > xval
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xpattern.write (((unsupported)) 0)
                        xtmpl.write "PyCon in $@@location@@"
                        xt.write (((xMyTemplate)) ((xtmpl)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xt).xsubstitute)) ((((unsupported)) 0)))
                        xval.write ((((xt).xsubstitute)) ((((unsupported)) ("location") ("Cleveland"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xval)) ("PyCon in Cleveland"))
                xtest_braced_override_safe.write
                  [xself]
                    memory > xtmpl
                    memory > xpattern
                    memory > xt
                    memory > xval
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xpattern.write (((unsupported)) 0)
                        xtmpl.write "PyCon in $@@location@@"
                        xt.write (((xMyTemplate)) ((xtmpl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xt).xsafe_substitute)) 0)) ((xtmpl)))
                        xval.write ((((xt).xsafe_substitute)) ((((unsupported)) ("location") ("Cleveland"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xval)) ("PyCon in Cleveland"))
                xtest_invalid_with_no_lines.write
                  [xself]
                    memory > xs
                    memory > xpattern
                    seq > @
                      seq
                        (((unsupported)) ((xTemplate)))
                          xpattern.write (((unsupported)) 0)
                        xs.write (((xMyTemplate)) (""))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xerr)))
                          bogusForceDataize.write ((((xs).xsubstitute)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("line 1, col 1") ((((xstr)) (((xerr).xexception)))))
                xtest_unicode_values.write
                  [xself]
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xTemplate)) ("$who likes $what"))
                        xd.write (((unsupported)) ((xdict)) ("txffm") ("fxfefed"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((xd)))) ("txffm likes fxfex0ced"))
                xtest_keyword_arguments.write
                  [xself]
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xs.write (((xTemplate)) ("$who likes $what"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ("tim") ("ham"))) ("tim likes ham"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim"))) ("ham"))) ("tim likes ham"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("fred") ("kung pao"))) ("tim") ("ham"))) ("tim likes ham"))
                        xs.write (((xTemplate)) ("the mapping is $mapping"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("none"))) ("bozo"))) ("the mapping is bozo"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("one"))) ("two"))) ("the mapping is two"))
                        xs.write (((xTemplate)) ("the self is $self"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ("bozo"))) ("the self is bozo"))
                xtest_keyword_arguments_safe.write
                  [xself]
                    memory > xraises
                    memory > xd
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xraises.write ((xself).xassertRaises)
                        xs.write (((xTemplate)) ("$who likes $what"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ("tim") ("ham"))) ("tim likes ham"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("tim"))) ("ham"))) ("tim likes ham"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("fred") ("kung pao"))) ("tim") ("ham"))) ("tim likes ham"))
                        xs.write (((xTemplate)) ("the mapping is $mapping"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("none"))) ("bozo"))) ("the mapping is bozo"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ((((unsupported)) ((xdict)) ("one"))) ("two"))) ("the mapping is two"))
                        xd.write (((unsupported)) ((xdict)) ("one"))
                        bogusForceDataize.write (((xraises)) ((xTypeError)) (((xs).xsubstitute)) ((xd)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xraises)) ((xTypeError)) (((xs).xsafe_substitute)) ((xd)) ((((unsupported)) 0)))
                        xs.write (((xTemplate)) ("the self is $self"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ("bozo"))) ("the self is bozo"))
                xtest_delimiter_override.write
                  [xself]
                    memory > xraises
                    memory > xdelimiter
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xraises.write ((xself).xassertRaises)
                        (((unsupported)) ((xTemplate)))
                          xdelimiter.write "&"
                        xs.write (((xAmpersandTemplate)) ("this &gift is for &{who} &&"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsubstitute)) ("bud") ("you"))) ("this bud is for you &"))
                        bogusForceDataize.write (((xraises)) ((xKeyError)) (((xs).xsubstitute)))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) (((xs).xsafe_substitute)) ("bud") ("you"))) ("this bud is for you &"))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) 0)) ("this &gift is for &{who} &"))
                        xs.write (((xAmpersandTemplate)) ("this &gift is for &{who} &"))
                        bogusForceDataize.write (((xraises)) ((xValueError)) (((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("bud") ("you"))))
                        bogusForceDataize.write (((xeq)) (((((xs).xsafe_substitute)) 0)) ("this &gift is for &{who} &"))
                        (((unsupported)) ((xTemplate)))
                          xdelimiter.write "@"
                        xs.write (((xPieDelims)) ("@who likes to eat a bag of @{what} worth $100"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xsubstitute)) ((((unsupported)) ((xdict)) ("tim") ("ham"))))) ("tim likes to eat a bag of ham worth $100"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)