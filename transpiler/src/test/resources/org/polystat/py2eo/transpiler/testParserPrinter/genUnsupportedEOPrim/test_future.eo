memory > xcm
memory > xfuture_test1
memory > xstr
memory > xexec
memory > xfuture_test2
memory > xflag
memory > xdedent
memory > xsupport
memory > xfuture
memory > xast
memory > x__name__
memory > xset
memory > xre
memory > xos
memory > xdir
memory > xgetattr
memory > xSyntaxError
memory > x__future__
memory > xunittest
[] > test_future
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_badfuture7
        memory > xtest_unicode_literals_exec
        memory > xtest_badfuture3
        memory > xtest_future2
        memory > xtest_multiple_features
        memory > xtest_future3
        memory > xtest_fstring_debug_annotations
        memory > xtest_badfuture9
        memory > xtest_badfuture5
        memory > xassertAnnotationEqual
        memory > xget_error_location
        memory > xgetActual
        memory > xtest_ensure_flags_dont_clash
        memory > xtest_parserhack
        memory > xtest_badfuture6
        memory > xtest_future1
        memory > xcheck_syntax_error
        memory > xtest_annotations
        memory > xtemplate
        memory > xtest_badfuture8
        memory > xrx
        memory > xtest_badfuture4
        memory > xtest_badfuture10
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xrx.write ((((xre).xcompile)) ("((S+).py, line (d+)"))
            xget_error_location.write
              [xmsg]
                memory > xmo
                seq > @
                  seq
                    xmo.write ((((xrx).xsearch)) ((((xstr)) ((xmsg)))))
                    (((unsupported)) (((((xmo).xgroup)) (1) (2))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_syntax_error.write
                  [xself xerr xbasename xlineno xoffset]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) (("%s.py, line %d".mod (((unsupported)) ((xbasename)) ((xlineno))))) ((((xstr)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xbasename)) (((xerr).xfilename)))) (((xbasename).add ".py")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xlineno)) ((xlineno)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xoffset)) ((xoffset)))
                xtest_future1.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("future_test1"))))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xfuture_test1).xresult)) (6))
                xtest_future2.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("future_test2"))))
                        seq
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xfuture_test2).xresult)) (6))
                xtest_future3.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("test_future3"))))
                        (((unsupported)) 0)
                xtest_badfuture3.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future3") (3))
                xtest_badfuture4.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future4") (3))
                xtest_badfuture5.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future5") (4))
                xtest_badfuture6.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future6") (3))
                xtest_badfuture7.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future7") (3) (53))
                xtest_badfuture8.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future8") (3))
                xtest_badfuture9.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future9") (3))
                xtest_badfuture10.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_syntax_error)) (((xcm).xexception)) ("badsyntax_future10") (3))
                xtest_ensure_flags_dont_clash.write
                  [xself]
                    memory > xflags
                    seq > @
                      seq
                        xflags.write (((unsupported)) ("CO_FUTURE_{future.upper()}") (((((xgetattr)) ((x__future__)) ((xfuture))).xcompiler_flag)) ((xfuture)) (((x__future__).xall_feature_names)))
                        bogusForceDataize.write ((((xflags).xupdate)) ((((unsupported)) ((xflag)) ((((xgetattr)) ((xast)) ((xflag)))) ((xflag)) ((((xdir)) ((xast)))) (((((xflag).xstartswith)) ("PyCF_"))))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)) ((((xset)) (((((xflags).xvalues)) 0)))) (((((xflags).xvalues)) 0)))
                xtest_parserhack.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xSyntaxError)))
                          bogusForceDataize.write (((xexec)) ("from __future__ import print_function; print 0"))
                          bogusForceDataize.write ((((xself).xfail)) ("syntax error didn't occur"))
                        (((unsupported)) ((xSyntaxError)))
                          bogusForceDataize.write (((xexec)) ("from __future__ import (print_function); print 0"))
                          bogusForceDataize.write ((((xself).xfail)) ("syntax error didn't occur"))
                xtest_multiple_features.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xsupport).xCleanImport)) ("test.test_future5"))))
                        (((unsupported)) 0)
                xtest_unicode_literals_exec.write
                  [xself]
                    memory > xscope
                    seq > @
                      seq
                        xscope.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ("from __future__ import unicode_literals; x = ''") ((((unsupported)) 0)) ((xscope)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xscope)) ("x"))) ((xstr)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtemplate.write (((xdedent)) ((((unsupported)) 0)))
                xgetActual.write
                  [xself xannotation]
                    memory > xvar_ann2
                    memory > xscope
                    memory > xvar_ann1
                    memory > xfunc_ret_ann
                    memory > xfunc_arg_ann
                    seq > @
                      seq
                        xscope.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ((((unsupported)) ((((xself).xtemplate).xformat)) ((xannotation)))) ((((unsupported)) 0)) ((xscope)))
                        xfunc_ret_ann.write (((unsupported)) (((((unsupported)) ((xscope)) ("f")).x__annotations__)) ("return"))
                        xfunc_arg_ann.write (((unsupported)) (((((unsupported)) ((xscope)) ("g")).x__annotations__)) ("arg"))
                        xvar_ann1.write (((unsupported)) ((((unsupported)) ((xscope)) ("__annotations__"))) ("var"))
                        xvar_ann2.write (((unsupported)) ((((unsupported)) ((xscope)) ("__annotations__"))) ("var2"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfunc_ret_ann)) ((xfunc_arg_ann)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfunc_ret_ann)) ((xvar_ann1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfunc_ret_ann)) ((xvar_ann2)))
                        (((unsupported)) ((xfunc_ret_ann)))
                xassertAnnotationEqual.write
                  [xself xannotation xexpected xdrop_parens xis_tuple]
                    memory > xactual
                    seq > @
                      (((unsupported)) 0)
                        xactual.write ((((xself).xgetActual)) ((xannotation)))
                        (((unsupported)) ((xexpected)) ("None: is there a None literal in the EO language?")).if
                          xexpected.write (((xis_tuple).not).if (xannotation) (((unsupported)) ((xannotation)) ((((unsupported)) (1) ((1.neg))))))
                        (xdrop_parens).if
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xactual)) ((xexpected)))
                            xactual.write (((((((xactual).xreplace)) ("(") ("")).xreplace)) (")") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_annotations.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertAnnotationEqual)
                        bogusForceDataize.write (((xeq)) ("..."))
                        bogusForceDataize.write (((xeq)) ("'some_string'"))
                        bogusForceDataize.write (((xeq)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xeq)) ("Name"))
                        bogusForceDataize.write (((xeq)) ("None"))
                        bogusForceDataize.write (((xeq)) ("True"))
                        bogusForceDataize.write (((xeq)) ("False"))
                        bogusForceDataize.write (((xeq)) ("1"))
                        bogusForceDataize.write (((xeq)) ("1.0"))
                        bogusForceDataize.write (((xeq)) ("1j"))
                        bogusForceDataize.write (((xeq)) ("True or False"))
                        bogusForceDataize.write (((xeq)) ("True or False or None"))
                        bogusForceDataize.write (((xeq)) ("True and False"))
                        bogusForceDataize.write (((xeq)) ("True and False and None"))
                        bogusForceDataize.write (((xeq)) ("Name1 and Name2 or Name3"))
                        bogusForceDataize.write (((xeq)) ("Name1 and (Name2 or Name3)"))
                        bogusForceDataize.write (((xeq)) ("Name1 or Name2 and Name3"))
                        bogusForceDataize.write (((xeq)) ("(Name1 or Name2) and Name3"))
                        bogusForceDataize.write (((xeq)) ("Name1 and Name2 or Name3 and Name4"))
                        bogusForceDataize.write (((xeq)) ("Name1 or Name2 and Name3 or Name4"))
                        bogusForceDataize.write (((xeq)) ("a + b + (c + d)"))
                        bogusForceDataize.write (((xeq)) ("a * b * (c * d)"))
                        bogusForceDataize.write (((xeq)) ("(a ** b) ** c ** d"))
                        bogusForceDataize.write (((xeq)) ("v1 << 2"))
                        bogusForceDataize.write (((xeq)) ("1 >> v2"))
                        bogusForceDataize.write (((xeq)) ("1 % finished"))
                        bogusForceDataize.write (((xeq)) ("1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8"))
                        bogusForceDataize.write (((xeq)) ("not great"))
                        bogusForceDataize.write (((xeq)) ("not not great"))
                        bogusForceDataize.write (((xeq)) ("~great"))
                        bogusForceDataize.write (((xeq)) ("+value"))
                        bogusForceDataize.write (((xeq)) ("++value"))
                        bogusForceDataize.write (((xeq)) ("-1"))
                        bogusForceDataize.write (((xeq)) ("~int and not v1 ^ 123 + v2 | True"))
                        bogusForceDataize.write (((xeq)) ("a + (not b)"))
                        bogusForceDataize.write (((xeq)) ("lambda: None"))
                        bogusForceDataize.write (((xeq)) ("lambda arg: None"))
                        bogusForceDataize.write (((xeq)) ("lambda a=True: a"))
                        bogusForceDataize.write (((xeq)) ("lambda a, b, c=True: a"))
                        bogusForceDataize.write (((xeq)) ("lambda a, b, c=True, *, d=1 << v2, e='str': a"))
                        bogusForceDataize.write (((xeq)) ("lambda a, b, c=True, *vararg, d, e='str', **kwargs: a + b"))
                        bogusForceDataize.write (((xeq)) ("lambda a, /, b, c=True, *vararg, d, e='str', **kwargs: a + b"))
                        bogusForceDataize.write (((xeq)) ("lambda x, /: x"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, /: x"))
                        bogusForceDataize.write (((xeq)) ("lambda x, /, y: x + y"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, /, y=2: x + y"))
                        bogusForceDataize.write (((xeq)) ("lambda x, /, y=1: x + y"))
                        bogusForceDataize.write (((xeq)) ("lambda x, /, y=1, *, z=3: x + y + z"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, /, y=2, *, z=3: x + y + z"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, /, y=2, *, z: x + y + z"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, y=2, z=3, /, w=4, *, l, l2: x + y + z + w + l + l2"))
                        bogusForceDataize.write (((xeq)) ("lambda x=1, y=2, z=3, /, w=4, *, l, l2, **kwargs: x + y + z + w + l + l2"))
                        bogusForceDataize.write (((xeq)) ("lambda x, /, y=1, *, z: x + y + z"))
                        bogusForceDataize.write (((xeq)) ("lambda x: lambda y: x + y"))
                        bogusForceDataize.write (((xeq)) ("1 if True else 2"))
                        bogusForceDataize.write (((xeq)) ("str or None if int or True else str or bytes or None"))
                        bogusForceDataize.write (((xeq)) ("str or None if (1 if True else 2) else str or bytes or None"))
                        bogusForceDataize.write (((xeq)) ("0 if not x else 1 if x > 0 else -1"))
                        bogusForceDataize.write (((xeq)) ("(1 if x > 0 else -1) if x else 0"))
                        bogusForceDataize.write (((xeq)) ("{'2.7': dead, '3.7': long_live or die_hard}"))
                        bogusForceDataize.write (((xeq)) ("{'2.7': dead, '3.7': long_live or die_hard, **{'3.6': verygood}}"))
                        bogusForceDataize.write (((xeq)) ("{**a, **b, **c}"))
                        bogusForceDataize.write (((xeq)) ("{'2.7', '3.6', '3.7', '3.8', '3.9', '4.0' if gilectomy else '3.10'}"))
                        bogusForceDataize.write (((xeq)) ("{*a, *b, *c}"))
                        bogusForceDataize.write (((xeq)) ("({'a': 'b'}, True or False, +value, 'string', b'bytes') or None"))
                        bogusForceDataize.write (((xeq)) ("()"))
                        bogusForceDataize.write (((xeq)) ("(a,)"))
                        bogusForceDataize.write (((xeq)) ("(a, b)"))
                        bogusForceDataize.write (((xeq)) ("(a, b, c)"))
                        bogusForceDataize.write (((xeq)) ("(*a, *b, *c)"))
                        bogusForceDataize.write (((xeq)) ("[]"))
                        bogusForceDataize.write (((xeq)) ("[1, 2, 3, 4, 5, 6, 7, 8, 9, 10 or A, 11 or B, 12 or C]"))
                        bogusForceDataize.write (((xeq)) ("[*a, *b, *c]"))
                        bogusForceDataize.write (((xeq)) ("{i for i in (1, 2, 3)}"))
                        bogusForceDataize.write (((xeq)) ("{i ** 2 for i in (1, 2, 3)}"))
                        bogusForceDataize.write (((xeq)) ("{i ** 2 for i, _ in ((1, 'a'), (2, 'b'), (3, 'c'))}"))
                        bogusForceDataize.write (((xeq)) ("{i ** 2 + j for i in (1, 2, 3) for j in (1, 2, 3)}"))
                        bogusForceDataize.write (((xeq)) ("[i for i in (1, 2, 3)]"))
                        bogusForceDataize.write (((xeq)) ("[i ** 2 for i in (1, 2, 3)]"))
                        bogusForceDataize.write (((xeq)) ("[i ** 2 for i, _ in ((1, 'a'), (2, 'b'), (3, 'c'))]"))
                        bogusForceDataize.write (((xeq)) ("[i ** 2 + j for i in (1, 2, 3) for j in (1, 2, 3)]"))
                        bogusForceDataize.write (((xeq)) ("(i for i in (1, 2, 3))"))
                        bogusForceDataize.write (((xeq)) ("(i ** 2 for i in (1, 2, 3))"))
                        bogusForceDataize.write (((xeq)) ("(i ** 2 for i, _ in ((1, 'a'), (2, 'b'), (3, 'c')))"))
                        bogusForceDataize.write (((xeq)) ("(i ** 2 + j for i in (1, 2, 3) for j in (1, 2, 3))"))
                        bogusForceDataize.write (((xeq)) ("{i: 0 for i in (1, 2, 3)}"))
                        bogusForceDataize.write (((xeq)) ("{i: j for i, j in ((1, 'a'), (2, 'b'), (3, 'c'))}"))
                        bogusForceDataize.write (((xeq)) ("[(x, y) for x, y in (a, b)]"))
                        bogusForceDataize.write (((xeq)) ("[(x,) for x, in (a,)]"))
                        bogusForceDataize.write (((xeq)) ("Python3 > Python2 > COBOL"))
                        bogusForceDataize.write (((xeq)) ("Life is Life"))
                        bogusForceDataize.write (((xeq)) ("call()"))
                        bogusForceDataize.write (((xeq)) ("call(arg)"))
                        bogusForceDataize.write (((xeq)) ("call(kwarg='hey')"))
                        bogusForceDataize.write (((xeq)) ("call(arg, kwarg='hey')"))
                        bogusForceDataize.write (((xeq)) ("call(arg, *args, another, kwarg='hey')"))
                        bogusForceDataize.write (((xeq)) ("call(arg, another, kwarg='hey', **kwargs, kwarg2='ho')"))
                        bogusForceDataize.write (((xeq)) ("lukasz.langa.pl"))
                        bogusForceDataize.write (((xeq)) ("call.me(maybe)"))
                        bogusForceDataize.write (((xeq)) ("1 .real"))
                        bogusForceDataize.write (((xeq)) ("1.0.real"))
                        bogusForceDataize.write (((xeq)) ("....__class__"))
                        bogusForceDataize.write (((xeq)) ("list[str]"))
                        bogusForceDataize.write (((xeq)) ("dict[str, int]"))
                        bogusForceDataize.write (((xeq)) ("set[str,]"))
                        bogusForceDataize.write (((xeq)) ("tuple[str, ...]"))
                        bogusForceDataize.write (((xeq)) ("tuple[(str, *types)]"))
                        bogusForceDataize.write (((xeq)) ("tuple[xx:yy, (*types,)]"))
                        bogusForceDataize.write (((xeq)) ("tuple[str, int, (str, int)]"))
                        bogusForceDataize.write (((xeq)) ("tuple[(*int, str, str, (str, int))]"))
                        bogusForceDataize.write (((xeq)) ("tuple[str, int, float, dict[str, int]]"))
                        bogusForceDataize.write (((xeq)) ("slice[0]"))
                        bogusForceDataize.write (((xeq)) ("slice[0:1]"))
                        bogusForceDataize.write (((xeq)) ("slice[0:1:2]"))
                        bogusForceDataize.write (((xeq)) ("slice[:]"))
                        bogusForceDataize.write (((xeq)) ("slice[:-1]"))
                        bogusForceDataize.write (((xeq)) ("slice[1:]"))
                        bogusForceDataize.write (((xeq)) ("slice[::-1]"))
                        bogusForceDataize.write (((xeq)) ("slice[:,]"))
                        bogusForceDataize.write (((xeq)) ("slice[1:2,]"))
                        bogusForceDataize.write (((xeq)) ("slice[1:2:3,]"))
                        bogusForceDataize.write (((xeq)) ("slice[1:2, 1]"))
                        bogusForceDataize.write (((xeq)) ("slice[1:2, 2, 3]"))
                        bogusForceDataize.write (((xeq)) ("slice[()]"))
                        bogusForceDataize.write (((xeq)) ("slice[a, b:c, d:e:f]"))
                        bogusForceDataize.write (((xeq)) ("slice[(x for x in a)]"))
                        bogusForceDataize.write (((xeq)) ("str or None if sys.version_info[0] > (3,) else str or bytes or None"))
                        bogusForceDataize.write (((xeq)) ("f'f-string without formatted values is just a string'"))
                        bogusForceDataize.write (((xeq)) ("f'{{NOT a formatted value}}'"))
                        bogusForceDataize.write (((xeq)) ("f'some f-string with {a} {few():.2f} {formatted.values!r}'"))
                        bogusForceDataize.write (((xeq)) ("f\"{f'{nested} inner'} outer\""))
                        bogusForceDataize.write (((xeq)) ("f'space between opening braces: { {a for a in (1, 2, 3)}}'"))
                        bogusForceDataize.write (((xeq)) ("f'{(lambda x: x)}'"))
                        bogusForceDataize.write (((xeq)) ("f'{(None if a else lambda x: x)}'"))
                        bogusForceDataize.write (((xeq)) ("f'{x}'"))
                        bogusForceDataize.write (((xeq)) ("f'{x!r}'"))
                        bogusForceDataize.write (((xeq)) ("f'{x!a}'"))
                        bogusForceDataize.write (((xeq)) ("(yield from outside_of_generator)"))
                        bogusForceDataize.write (((xeq)) ("(yield)"))
                        bogusForceDataize.write (((xeq)) ("(yield a + b)"))
                        bogusForceDataize.write (((xeq)) ("await some.complicated[0].call(with_args=True or 1 is not 1)"))
                        bogusForceDataize.write (((xeq)) ("[x for x in (a if b else c)]"))
                        bogusForceDataize.write (((xeq)) ("[x for x in a if (b if c else d)]"))
                        bogusForceDataize.write (((xeq)) ("f(x for x in a)"))
                        bogusForceDataize.write (((xeq)) ("f(1, (x for x in a))"))
                        bogusForceDataize.write (((xeq)) ("f((x for x in a), 2)"))
                        bogusForceDataize.write (((xeq)) ("(((a)))") ("a"))
                        bogusForceDataize.write (((xeq)) ("(((a, b)))") ("(a, b)"))
                        bogusForceDataize.write (((xeq)) ("(x:=10)"))
                        bogusForceDataize.write (((xeq)) ("f'{(x:=10):=10}'"))
                xtest_fstring_debug_annotations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=!r}'") ("f'x={x!r}'"))
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=:}'") ("f'x={x:}'"))
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=:.2f}'") ("f'x={x:.2f}'"))
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=!r}'") ("f'x={x!r}'"))
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=!a}'") ("f'x={x!a}'"))
                        (((unsupported)) (((xself).xassertAnnotationEqual)) ("f'{x=!s:*^20}'") ("f'x={x!s:*^20}'"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)