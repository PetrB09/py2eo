memory > xAttributeError
memory > xlist
memory > xValueError
memory > xrange
memory > xTestAcceleratorImported
memory > xi
memory > xMockFile
memory > x__name__
memory > ximport_fresh_module
memory > xtypes
memory > xtest_xml_etree
memory > xio
memory > xX
memory > xOverflowError
memory > xstruct
memory > xSizeofTest
memory > xsupport
memory > xMiscTests
memory > xunittest
memory > xexc
memory > xnext
memory > xTestAliasWorking
memory > xlen
[] > test_xml_etree_c
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_iterparse_leaks
        memory > xtest_parser_comes_from_C
        memory > xtest_correct_import_cET_alias
        memory > xtest_parser_ref_cycle
        memory > xtest_setstate_leaks
        memory > xtest_element_with_children
        memory > xtest_main
        memory > xtest_trashcan
        memory > xcET_alias
        memory > xtest_del_attribute
        memory > xsetUp
        memory > xtest_bpo_31728
        memory > xtest_correct_import_cET
        memory > xcET
        memory > xtest_element
        memory > xtest_length_overflow
        memory > xtest_xmlpullparser_leaks
        memory > xtest_alias_working
        memory > xcheck_sizeof
        memory > xtest_element_with_attrib
        memory > xtest_uninitialized_parser
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xcET.write (((unsupported)) ((ximport_fresh_module)) ("xml.etree.ElementTree") ((((unsupported)) ("_elementtree"))))
            xcET_alias.write (((unsupported)) ((ximport_fresh_module)) ("xml.etree.cElementTree") ((((unsupported)) ("_elementtree") ("xml.etree"))) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xcET)) ("requires _elementtree"))))
              seq
                xtest_length_overflow.write
                  [xself xsize]
                    memory > xparser
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xdata.write ("x".mul (xsize))
                        xparser.write ((((xcET).xXMLParser)) 0)
                        (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xparser).xfeed)) ((xdata)))
                          xdata.write "None: is there a None literal in the EO language?"
                xtest_del_attribute.write
                  [xself]
                    memory > xelement
                    seq > @
                      seq
                        xelement.write ((((xcET).xElement)) ("tag"))
                        (((unsupported)) (((xelement).xtag)) ("TAG"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xtag)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtag)) ("TAG"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xtext)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement).xtext)))
                        (((unsupported)) (((xelement).xtext)) ("TEXT"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xtext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtext)) ("TEXT"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xtail)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xelement).xtail)))
                        (((unsupported)) (((xelement).xtail)) ("TAIL"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xtail)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xtail)) ("TAIL"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xattrib)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xattrib)) ((((unsupported)) 0)))
                        (((unsupported)) (((xelement).xattrib)) ((((unsupported)) ("A") ("B") ("C") ("D"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) (((xelement).xattrib)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelement).xattrib)) ((((unsupported)) ("A") ("B") ("C") ("D"))))
                xtest_trashcan.write
                  [xself]
                    memory > xroot
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)) ((xe)) ((xroot)) (((((xcET).xElement)) ("root"))))
                        (((unsupported)) ((xi)) ((((xrange)) (200000))))
                          xe.write ((((xcET).xSubElement)) ((xe)) ("x"))
                        (((unsupported)) ((((unsupported)) ((xe)))))
                        (((unsupported)) ((((unsupported)) ((xroot)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_parser_ref_cycle.write
                  [xself]
                    memory > xparser_ref_cycle
                    seq > @
                      seq
                        xparser_ref_cycle.write
                          []
                            memory > xerr
                            memory > xparser
                            seq > @
                              seq
                                xparser.write ((((xcET).xXMLParser)) 0)
                                (((unsupported)) ((xValueError)))
                                  (((unsupported)) ((xValueError)))
                                  xerr.write (xexc)
                        bogusForceDataize.write (((xparser_ref_cycle)) 0)
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_bpo_31728.write
                  [xself]
                    memory > x__del__
                    memory > xelem
                    seq > @
                      seq
                        xelem.write ((((xcET).xElement)) ("elem"))
                        (((unsupported)) 0)
                          x__del__.write
                            [xself]
                              seq > @
                                seq
                                  unsupported
                                  unsupported
                                  bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtext)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtail)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtext)) ((((xX)) 0)))
                        (((unsupported)) (((xelem).xtext)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtail)) ((((xX)) 0)))
                        (((unsupported)) (((xelem).xtail)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtext)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).x__setstate__)) ((((unsupported)) ("tag") (42))))
                        bogusForceDataize.write ((((xelem).xclear)) 0)
                        (((unsupported)) (((xelem).xtail)) ((((xX)) 0)))
                        bogusForceDataize.write ((((xelem).x__setstate__)) ((((unsupported)) ("tag") (42))))
                xtest_uninitialized_parser.write
                  [xself]
                    memory > xparser
                    memory > xread
                    seq > @
                      (((unsupported)) 0)
                        xparser.write (((((xcET).xXMLParser).x__new__)) (((xcET).xXMLParser)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xparser).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xparser).xfeed)) ("foo"))
                        (((unsupported)) 0)
                          xread.write
                            []
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xparser).x_parse_whole)) ((((xMockFile)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xparser).x_setevents)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xparser).xentity)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xparser).xtarget)))
                xtest_setstate_leaks.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        xelem.write (((((xcET).xElement).x__new__)) (((xcET).xElement)))
                        (((unsupported)) ((xi)) ((((xrange)) (100))))
                          bogusForceDataize.write ((((xelem).x__setstate__)) ((((unsupported)) ("tag") ("foo") ("attrib") ((((unsupported)) ("bar") (42))) ("_children") ((((unsupported)) (((((xcET).xElement)) ("child"))))) ("text") ("text goes here") ("tail") ("opposite of head"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xtag)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xtext)) ("text goes here"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xelem).xtail)) ("opposite of head"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((((xelem).xattrib).xitems)) 0)))) ((((unsupported)) ((((unsupported)) ("bar") (42))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xelem)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xelem)) (0)).xtag)) ("child"))
                xtest_iterparse_leaks.write
                  [xself]
                    memory > xXML
                    memory > xparser
                    seq > @
                      seq
                        xXML.write "<a></a></b>"
                        xparser.write ((((xcET).xiterparse)) (((((xio).xStringIO)) ((xXML)))))
                        bogusForceDataize.write (((xnext)) ((xparser)))
                        (((unsupported)) ((((unsupported)) ((xparser)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_xmlpullparser_leaks.write
                  [xself]
                    memory > xXML
                    memory > xparser
                    seq > @
                      seq
                        xXML.write "<a></a></b>"
                        xparser.write ((((xcET).xXMLPullParser)) 0)
                        bogusForceDataize.write ((((xparser).xfeed)) ((xXML)))
                        (((unsupported)) ((((unsupported)) ((xparser)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xcET)) ("requires _elementtree"))))
              xtest_alias_working.write
                [xself]
                  memory > xe
                  seq > @
                    seq
                      xe.write ((((xcET_alias).xElement)) ("foo"))
                      bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xtag)) ("foo"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xcET)) ("requires _elementtree"))) (((xsupport).xcpython_only)))
              seq
                xtest_correct_import_cET.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xcET).xSubElement).x__module__)) ("_elementtree"))
                xtest_correct_import_cET_alias.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xcET_alias).xSubElement).x__module__)) ("_elementtree"))
                xtest_parser_comes_from_C.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xcET).xElement).x__init__)) (((xtypes).xFunctionType)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xcET)) ("requires _elementtree"))) (((xsupport).xcpython_only)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xelementsize)) (((((xsupport).xcalcobjsize)) ("5P"))))
                        (((unsupported)) (((xself).xextra)) (((((xstruct).xcalcsize)) ("PnnP4P"))))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_element.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xcET).xElement)) ("a"))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)) ((xe)) (((xself).xelementsize)))
                xtest_element_with_attrib.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)) (((xcET).xElement)) ("a") ("about:"))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)) ((xe)) ((((xself).xelementsize).add ((xself).xextra))))
                xtest_element_with_children.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xcET).xElement)) ("a"))
                        (((unsupported)) ((xi)) ((((xrange)) (5))))
                          bogusForceDataize.write ((((xcET).xSubElement)) ((xe)) ("span"))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)) ((xe)) (((((xself).xelementsize).add ((xself).xextra)).add ((((xstruct).xcalcsize)) ("8P")))))
            xtest_main.write
              []
                seq > @
                  seq
                    (((unsupported)) 0)
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xMiscTests)) ((xTestAliasWorking)) ((xTestAcceleratorImported)) ((xSizeofTest)))
                    (((unsupported)) (((xtest_xml_etree).xtest_main)) ((xcET)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)