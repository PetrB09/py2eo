memory > xImportError
memory > xdatetime
memory > xRuntimeError
memory > xsignal
memory > xstr
memory > xtrace
memory > xtempfile
memory > xrepr
memory > xhasattr
memory > xstderr
memory > xexc
memory > xfilter
memory > xdict
memory > xcm
memory > xexc_code
memory > xscript_helper
memory > xstdout
memory > xfilename
memory > xoutput
memory > xopen
memory > xdedent
memory > xkw
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xos
memory > xis_android
memory > xname
memory > xunittest
memory > xsysconfig
memory > xfaulthandler
memory > xfp
memory > xexitcode
memory > x__name__
[] > test_faulthandler
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheck_fatal_error
        memory > xtest_sigabrt
        memory > xtest_raise_exception
        memory > xtest_dump_traceback_later
        memory > xtest_read_null
        memory > xtest_disable
        memory > xtest_stack_overflow
        memory > xtest_sigsegv
        memory > xtest_dump_traceback_file
        memory > xtest_fatal_error_without_gil
        memory > xtest_fatal_error_c_thread
        memory > xcheck_register
        memory > xtest_dump_traceback_later_file
        memory > xtest_fatal_error
        memory > xtest_unregister
        memory > xcheck_stderr_none
        memory > xtest_dump_traceback_later_twice
        memory > xtest_raise_nonfatal_exception
        memory > xtest_enable_single_thread
        memory > xcheck_error
        memory > xtest_sys_xoptions
        memory > xtest_env_var
        memory > xtest_disable_windows_exc_handler
        memory > xtest_dump_traceback_fd
        memory > xtest_register_fd
        memory > xtest_sigfpe
        memory > x_config_args
        memory > xtest_ignore_exception
        memory > x_testcapi
        memory > xcheck_dump_traceback_threads
        memory > xUB_SANITIZER
        memory > xcheck_dump_traceback_later
        memory > xtemporary_filename
        memory > xtest_dump_traceback_threads
        memory > xskip_segfault_on_android
        memory > xtest_dump_traceback_later_fd
        memory > xtest_dump_traceback
        memory > xtest_register_chain
        memory > xtest_gil_released
        memory > xexpected_traceback
        memory > xtest_register
        memory > xtest_disabled_by_default
        memory > xtest_is_enabled
        memory > x_cflags
        memory > xTIMEOUT
        memory > xMEMORY_SANITIZER
        memory > xtest_enable_fd
        memory > xtest_sigill
        memory > xget_output
        memory > xtest_dump_traceback_later_repeat
        memory > xtest_register_threads
        memory > xcheck_dump_traceback
        memory > xcheck_windows_exception
        memory > xtest_register_file
        memory > xtest_truncate
        memory > xtest_stderr_None
        memory > xtest_dump_traceback_threads_file
        memory > xMS_WINDOWS
        memory > xtest_sigbus
        memory > xtest_enable_file
        memory > xtest_dump_traceback_later_cancel
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_testcapi.write "None: is there a None literal in the EO language?"
            xTIMEOUT.write 0.5
            xMS_WINDOWS.write (((xos).xname).eq "nt")
            x_cflags.write (((((xsysconfig).xget_config_var)) ("CFLAGS")).or "")
            x_config_args.write (((((xsysconfig).xget_config_var)) ("CONFIG_ARGS")).or "")
            xUB_SANITIZER.write ((((unsupported)) ("-fsanitize=undefined") ((x_cflags))).or (((unsupported)) ("--with-undefined-behavior-sanitizer") ((x_config_args))))
            xMEMORY_SANITIZER.write ((((unsupported)) ("-fsanitize=memory") ((x_cflags))).or (((unsupported)) ("--with-memory-sanitizer") ((x_config_args))))
            xexpected_traceback.write
              [xlineno1 xlineno2 xheader xmin_count]
                memory > xregex
                seq > @
                  (((unsupported)) 0)
                    xregex.write (xheader)
                    (((unsupported)) ((xregex)) (("  File \"<string>\", line %s in funcn".mod (xlineno1))))
                    (((unsupported)) ((xregex)) (("  File \"<string>\", line %s in <module>".mod (xlineno2))))
                    (1.less (xmin_count)).if
                      (((unsupported)) ((("^".add (((xregex).add "n").mul ((xmin_count).sub 1))).add (xregex))))
                      (((unsupported)) ((("^".add (xregex)).add "$")))
            xskip_segfault_on_android.write
              [xtest]
                seq > @
                  (((unsupported)) (((((((xunittest).xskipIf)) ((xis_android)) ("raising SIGSEGV on Android is unreliable"))) ((xtest)))))
            xtemporary_filename.write
              []
                memory > xfilename
                seq > @
                  (((unsupported)) 0)
                    xfilename.write ((((xtempfile).xmktemp)) 0)
                    (((unsupported)) 0)
                      (((unsupported)) ((xfilename)))
                      bogusForceDataize.write ((((xsupport).xunlink)) ((xfilename)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xget_output.write
                  [xself xcode xfilename xfd]
                    memory > xprocess
                    memory > xoutput
                    memory > xexitcode
                    memory > xpass_fds
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xcode.write ((((((xdedent)) ((xcode))).xstrip)) 0)
                        xpass_fds.write (((unsupported)) 0)
                        (((unsupported)) ((xfd)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xpass_fds).xappend)) ((xfd)))
                        (((unsupported)) (((((xsupport).xSuppressCrashReport)) 0)))
                          seq
                            xprocess.write (((unsupported)) (((xscript_helper).xspawn_python)) ("-c") ((xcode)) ((xpass_fds)))
                            (((unsupported)) ((xprocess)))
                              seq
                                (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xprocess).xcommunicate)) 0)))
                                xexitcode.write ((((xprocess).xwait)) 0)
                        xoutput.write ((((xsupport).xstrip_python_stderr)) ((xstdout)))
                        xoutput.write ((((xoutput).xdecode)) ("ascii") ("backslashreplace"))
                        (xfilename).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) (""))
                            (((unsupported)) ((((xopen)) ((xfilename)) ("rb"))) ((xfp)))
                              xoutput.write ((((xfp).xread)) 0)
                            xoutput.write ((((xoutput).xdecode)) ("ascii") ("backslashreplace"))
                          (((unsupported)) ((xfd)) ("None: is there a None literal in the EO language?")).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) (""))
                              bogusForceDataize.write ((((xos).xlseek)) ((xfd)) (((xos).xSEEK_SET)) (0))
                              (((unsupported)) ((((unsupported)) ((xopen)) ((xfd)) ("rb") (FALSE))) ((xfp)))
                                xoutput.write ((((xfp).xread)) 0)
                              xoutput.write ((((xoutput).xdecode)) ("ascii") ("backslashreplace"))
                        (((unsupported)) ((((unsupported)) (((((xoutput).xsplitlines)) 0)) ((xexitcode)))))
                xcheck_error.write
                  [xself xcode xline_number xfatal_error xfilename xall_threads xother_regex xfd xknow_current_thread xpy_fatal_error]
                    memory > xregex
                    memory > xheader
                    memory > xoutput
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (xall_threads).if
                          (xknow_current_thread).if
                            xheader.write "Current thread 0x[0-9a-f]+"
                            xheader.write "Thread 0x[0-9a-f]+"
                          xheader.write "Stack"
                        xregex.write (((unsupported)) 0)
                        (xpy_fatal_error).if
                          (((unsupported)) ((xfatal_error)) ("nPython runtime state: initialized"))
                        xregex.write ((((((unsupported)) (((((xdedent)) ((xregex))).xformat)) ((xline_number)) ((xfatal_error)) ((xheader))).xstrip)) 0)
                        (xother_regex).if
                          (((unsupported)) ((xregex)) (("|".add (xother_regex))))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xexitcode)))) ((((unsupported)) (((xself).xget_output)) ((xcode)) ((xfilename)) ((xfd)))))
                        xoutput.write ((("n".xjoin)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xoutput)) ((xregex)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xexitcode)) (0))
                xcheck_fatal_error.write
                  [xself xcode xline_number xname_regex]
                    memory > xfatal_error
                    seq > @
                      (((unsupported)) 0)
                        xfatal_error.write ("Fatal Python error: %s".mod (xname_regex))
                        bogusForceDataize.write ((((xself).xcheck_error)) ((xcode)) ((xline_number)) ((xfatal_error)) ((((unsupported)) ((xkw)))))
                xcheck_windows_exception.write
                  [xself xcode xline_number xname_regex]
                    memory > xfatal_error
                    seq > @
                      (((unsupported)) 0)
                        xfatal_error.write ("Windows fatal exception: %s".mod (xname_regex))
                        bogusForceDataize.write ((((xself).xcheck_error)) ((xcode)) ((xline_number)) ((xfatal_error)) ((((unsupported)) ((xkw)))))
                xtest_read_null.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        ((xMS_WINDOWS).not).if
                          bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("(?:Segmentation fault|Bus error|Illegal instruction)"))
                          bogusForceDataize.write ((((xself).xcheck_windows_exception)) ((((unsupported)) 0)) (3) ("access violation"))
                xtest_sigsegv.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("Segmentation fault"))
                xtest_fatal_error_c_thread.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("in new thread") (FALSE) (TRUE))
                xtest_sigabrt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("Aborted"))
                xtest_sigfpe.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("Floating point exception"))
                xtest_sigbus.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (5) ("Bus error"))
                xtest_sigill.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (5) ("Illegal instruction"))
                xtest_fatal_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (2) ("xyz") (TRUE))
                xtest_fatal_error_without_gil.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (2) ("xyz") (TRUE))
                xtest_stack_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("(?:Segmentation fault|Bus error)") ("unable to raise a stack overflow"))
                xtest_gil_released.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("Segmentation fault"))
                xtest_enable_file.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xtemporary_filename)) 0)) ((xfilename)))
                          (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) (((((unsupported)) 0).xformat)) ((((xrepr)) ((xfilename)))))) (4) ("Segmentation fault") ((xfilename)))
                xtest_enable_fd.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xtempfile).xTemporaryFile)) ("wb+"))) ((xfp)))
                          seq
                            xfd.write ((((xfp).xfileno)) 0)
                            (((unsupported)) (((xself).xcheck_fatal_error)) (((((unsupported)) 0).mod (xfd))) (4) ("Segmentation fault") ((xfd)))
                xtest_enable_single_thread.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheck_fatal_error)) ((((unsupported)) 0)) (3) ("Segmentation fault") (FALSE))
                xtest_disable.write
                  [xself]
                    memory > xcode
                    memory > xstderr
                    memory > xnot_expected
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        xnot_expected.write "Fatal Python error"
                        (((unsupported)) ((((unsupported)) ((xstderr)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)))))
                        xstderr.write ((("n".xjoin)) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xnot_expected)) ((xstderr)))) (("%r is present in %r".mod (((unsupported)) ((xnot_expected)) ((xstderr))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xexitcode)) (0))
                xtest_is_enabled.write
                  [xself]
                    memory > xwas_enabled
                    memory > xorig_stderr
                    seq > @
                      seq
                        xorig_stderr.write ((xsys).xstderr)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xsys).xstderr)) (((xsys).x__stderr__)))
                            xwas_enabled.write ((((xfaulthandler).xis_enabled)) 0)
                            (((unsupported)) 0)
                              seq
                                bogusForceDataize.write ((((xfaulthandler).xenable)) 0)
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xfaulthandler).xis_enabled)) 0)))
                                bogusForceDataize.write ((((xfaulthandler).xdisable)) 0)
                                bogusForceDataize.write ((((xself).xassertFalse)) (((((xfaulthandler).xis_enabled)) 0)))
                              (xwas_enabled).if
                                bogusForceDataize.write ((((xfaulthandler).xenable)) 0)
                                bogusForceDataize.write ((((xfaulthandler).xdisable)) 0)
                          (((unsupported)) (((xsys).xstderr)) ((xorig_stderr)))
                xtest_disabled_by_default.write
                  [xself]
                    memory > xcode
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-E") ("-c") ((xcode)))
                        xoutput.write ((((xsubprocess).xcheck_output)) ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xrstrip)) 0)) ("False"))
                xtest_sys_xoptions.write
                  [xself]
                    memory > xcode
                    memory > xenv
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((xfilter)) ("None: is there a None literal in the EO language?") ((((unsupported)) (((xsys).xexecutable)) (((((xsys).xflags).xignore_environment).if "-E" "")) ("-X") ("faulthandler") ("-c") ((xcode)))))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        bogusForceDataize.write ((((xenv).xpop)) ("PYTHONFAULTHANDLER") ("None: is there a None literal in the EO language?"))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xrstrip)) 0)) ("True"))
                xtest_env_var.write
                  [xself]
                    memory > xcode
                    memory > xenv
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((unsupported)) (((xsys).xexecutable)) ("-c") ((xcode)))
                        xenv.write (((xdict)) (((xos).xenviron)))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONFAULTHANDLER"))) (""))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONDEVMODE"))) (""))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xrstrip)) 0)) ("False"))
                        xenv.write (((xdict)) (((xos).xenviron)))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONFAULTHANDLER"))) ("1"))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONDEVMODE"))) (""))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoutput).xrstrip)) 0)) ("True"))
                xcheck_dump_traceback.write
                  [xself xfilename xfd]
                    memory > xcode
                    memory > xexpected
                    memory > xlineno
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        xcode.write (((unsupported)) (((xcode).xformat)) ((xfilename)) ((xfd)))
                        (xfilename).if
                          xlineno.write 9
                          (((unsupported)) ((xfd)) ("None: is there a None literal in the EO language?")).if
                            xlineno.write 11
                            xlineno.write 14
                        xexpected.write (((unsupported)) ("Stack (most recent call first):") (("  File \"<string>\", line %s in funcB".mod (xlineno))) ("  File \"<string>\", line 17 in funcA") ("  File \"<string>\", line 19 in <module>"))
                        (((unsupported)) ((((unsupported)) ((xtrace)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)) ((xfilename)) ((xfd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_dump_traceback.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback)) 0)
                xtest_dump_traceback_file.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xtemporary_filename)) 0)) ((xfilename)))
                        (((unsupported)) (((xself).xcheck_dump_traceback)) ((xfilename)))
                xtest_dump_traceback_fd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xtempfile).xTemporaryFile)) ("wb+"))) ((xfp)))
                          (((unsupported)) (((xself).xcheck_dump_traceback)) (((((xfp).xfileno)) 0)))
                xtest_truncate.write
                  [xself]
                    memory > xexpected
                    memory > xcode
                    memory > xmaxlen
                    memory > xfunc_name
                    memory > xtruncated
                    seq > @
                      seq
                        xmaxlen.write 500
                        xfunc_name.write ("x".mul ((xmaxlen).add 50))
                        xtruncated.write (("x".mul (xmaxlen)).add "...")
                        xcode.write (((unsupported)) 0)
                        xcode.write (((unsupported)) (((xcode).xformat)) ((xfunc_name)))
                        xexpected.write (((unsupported)) ("Stack (most recent call first):") (("  File \"<string>\", line 4 in %s".mod (xtruncated))) ("  File \"<string>\", line 6 in <module>"))
                        (((unsupported)) ((((unsupported)) ((xtrace)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xcheck_dump_traceback_threads.write
                  [xself xfilename]
                    memory > xcode
                    memory > xregex
                    memory > xlineno
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        xcode.write (((unsupported)) (((xcode).xformat)) ((((xrepr)) ((xfilename)))))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)) ((xfilename)))))
                        xoutput.write ((("n".xjoin)) ((xoutput)))
                        (xfilename).if
                          xlineno.write 8
                          xlineno.write 10
                        xregex.write (((unsupported)) 0)
                        xregex.write ((((((xdedent)) ((((unsupported)) (((xregex).xformat)) ((xlineno))))).xstrip)) 0)
                        bogusForceDataize.write ((((xself).xassertRegex)) ((xoutput)) ((xregex)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_dump_traceback_threads.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback_threads)) ("None: is there a None literal in the EO language?"))
                xtest_dump_traceback_threads_file.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xtemporary_filename)) 0)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xcheck_dump_traceback_threads)) ((xfilename)))
                xcheck_dump_traceback_later.write
                  [xself xrepeat xcancel xloops xfilename xfd]
                    memory > xheader
                    memory > xcount
                    memory > xtrace
                    memory > xcode
                    memory > xregex
                    memory > xtimeout_str
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xtimeout_str.write (((xstr)) ((((unsupported)) (((xdatetime).xtimedelta)) ((xTIMEOUT)))))
                        xcode.write (((unsupported)) 0)
                        xcode.write (((unsupported)) (((xcode).xformat)) ((xTIMEOUT)) ((xrepeat)) ((xcancel)) ((xloops)) ((xfilename)) ((xfd)))
                        (((unsupported)) ((((unsupported)) ((xtrace)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)) ((xfilename)))))
                        xtrace.write ((("n".xjoin)) ((xtrace)))
                        ((xcancel).not).if
                          seq
                            xcount.write (xloops)
                            (xrepeat).if
                              (((unsupported)) ((xcount)) (2))
                            xheader.write ("Timeout (%s)!nThread 0x[0-9a-f]+ (most recent call first):n".mod (xtimeout_str))
                            xregex.write (((unsupported)) ((xexpected_traceback)) (17) (26) ((xheader)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertRegex)) ((xtrace)) ((xregex)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_dump_traceback_later.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback_later)) 0)
                xtest_dump_traceback_later_repeat.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_dump_traceback_later)) (TRUE))
                xtest_dump_traceback_later_cancel.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_dump_traceback_later)) (TRUE))
                xtest_dump_traceback_later_file.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xtemporary_filename)) 0)) ((xfilename)))
                        (((unsupported)) (((xself).xcheck_dump_traceback_later)) ((xfilename)))
                xtest_dump_traceback_later_fd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xtempfile).xTemporaryFile)) ("wb+"))) ((xfp)))
                          (((unsupported)) (((xself).xcheck_dump_traceback_later)) (((((xfp).xfileno)) 0)))
                xtest_dump_traceback_later_twice.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_dump_traceback_later)) (2))
                xcheck_register.write
                  [xself xfilename xall_threads xunregister xchain xfd]
                    memory > xsignum
                    memory > xcode
                    memory > xtrace
                    memory > xregex
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xsignum.write ((xsignal).xSIGUSR1)
                        xcode.write (((unsupported)) 0)
                        xcode.write (((unsupported)) (((xcode).xformat)) ((xall_threads)) ((xsignum)) ((xunregister)) ((xchain)) ((xfilename)) ((xfd)))
                        (((unsupported)) ((((unsupported)) ((xtrace)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)) ((xfilename)))))
                        xtrace.write ((("n".xjoin)) ((xtrace)))
                        ((xunregister).not).if
                          seq
                            (xall_threads).if
                              xregex.write "Current thread 0x[0-9a-f]+ (most recent call first):n"
                              xregex.write "Stack (most recent call first):n"
                            xregex.write (((xexpected_traceback)) (14) (32) ((xregex)))
                            bogusForceDataize.write ((((xself).xassertRegex)) ((xtrace)) ((xregex)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xtrace)) (""))
                        (xunregister).if
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((xexitcode)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) (0))
                xtest_register.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_register)) 0)
                xtest_unregister.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_register)) (TRUE))
                xtest_register_file.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xtemporary_filename)) 0)) ((xfilename)))
                        (((unsupported)) (((xself).xcheck_register)) ((xfilename)))
                xtest_register_fd.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xtempfile).xTemporaryFile)) ("wb+"))) ((xfp)))
                          (((unsupported)) (((xself).xcheck_register)) (((((xfp).xfileno)) 0)))
                xtest_register_threads.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_register)) (TRUE))
                xtest_register_chain.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xcheck_register)) (TRUE))
                xcheck_stderr_none.write
                  [xself]
                    memory > xstderr
                    seq > @
                      (((unsupported)) 0)
                        xstderr.write ((xsys).xstderr)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xsys).xstderr)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))) ((xcm)))
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) ("sys.stderr is None"))
                          (((unsupported)) (((xsys).xstderr)) ((xstderr)))
                xtest_stderr_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xcheck_stderr_none)) 0)))
                          bogusForceDataize.write ((((xfaulthandler).xenable)) 0)
                        (((unsupported)) (((((xself).xcheck_stderr_none)) 0)))
                          bogusForceDataize.write ((((xfaulthandler).xdump_traceback)) 0)
                        (((xhasattr)) ((xfaulthandler)) ("dump_traceback_later")).if
                          (((unsupported)) (((((xself).xcheck_stderr_none)) 0)))
                            bogusForceDataize.write ((((xfaulthandler).xdump_traceback_later)) ((((unsupported)) 0)))
                        (((xhasattr)) ((xfaulthandler)) ("register")).if
                          (((unsupported)) (((((xself).xcheck_stderr_none)) 0)))
                            bogusForceDataize.write ((((xfaulthandler).xregister)) (((xsignal).xSIGUSR1)))
                xtest_raise_exception.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xexc)) ((xname)))) ((((unsupported)) ((((unsupported)) ("EXCEPTION_ACCESS_VIOLATION") ("access violation"))) ((((unsupported)) ("EXCEPTION_INT_DIVIDE_BY_ZERO") ("int divide by zero"))) ((((unsupported)) ("EXCEPTION_STACK_OVERFLOW") ("stack overflow"))))))
                          bogusForceDataize.write ((((xself).xcheck_windows_exception)) ((((unsupported)) 0)) (3) ((xname)))
                xtest_ignore_exception.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xexc_code)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                          seq
                            xcode.write (((unsupported)) 0)
                            xcode.write (((xdedent)) ((xcode)))
                            (((unsupported)) ((((unsupported)) ((xoutput)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) ((xexc_code)))
                xtest_raise_nonfatal_exception.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xexc)) ((((unsupported)) (0) (878082192) (1073741824) (1073745920) (1879048192) (2147483647))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xoutput)) ((xexitcode)))) (((((xself).xget_output)) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertIn)) ((xexitcode)) ((((unsupported)) ((xexc)) (((xexc).and (268435456.neg))))))
                xtest_disable_windows_exc_handler.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((xdedent)) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xoutput)) ((xexitcode)))) (((((xself).xget_output)) ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xexitcode)) ((((unsupported)) 0)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)