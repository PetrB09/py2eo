memory > xthreading
memory > xBaseHTTPRequestHandler
memory > xCrawlDelayAndRequestRateTest
memory > xBaseRequestRateTest
memory > xurllib
memory > xtuple
memory > xos
memory > xRobotHandler
memory > xunittest
memory > xBaseRobotTest
memory > xHTTPServer
memory > xisinstance
memory > x__name__
memory > xstr
memory > xio
memory > xUserAgentOrderingTest
memory > xsupport
[] > test_robotparser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_string_formatting
        memory > xtestPasswordProtectedSite
        memory > xsite_maps
        memory > xrobots_txt
        memory > xtest_read_404
        memory > xdo_GET
        memory > xtearDown
        memory > xexpected_output
        memory > xcrawl_delay
        memory > xlog_message
        memory > xurl
        memory > xgood
        memory > xtest_site_maps
        memory > xsetUp
        memory > xsetUpClass
        memory > xbase_url
        memory > xtest_good_urls
        memory > xtest_basic
        memory > xtest_bad_urls
        memory > xagent
        memory > xrequest_rate
        memory > xget_agent_and_url
        memory > xbad
        memory > xtest_can_fetch
        memory > xtest_request_rate
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
              seq
                xrobots_txt.write ""
                xagent.write "test_robotparser"
                xgood.write (((unsupported)) 0)
                xbad.write (((unsupported)) 0)
                xsite_maps.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((((((xio).xStringIO)) (((xself).xrobots_txt))).xreadlines)) 0)
                        (((unsupported)) (((xself).xparser)) ((((((xurllib).xrobotparser).xRobotFileParser)) 0)))
                        bogusForceDataize.write (((((xself).xparser).xparse)) ((xlines)))
                xget_agent_and_url.write
                  [xself xurl]
                    seq > @
                      seq
                        (((xisinstance)) ((xurl)) ((xtuple))).if
                          seq
                            (((unsupported)) ((((unsupported)) ((xagent)) ((xurl)))) ((xurl)))
                            (((unsupported)) ((((unsupported)) ((xagent)) ((xurl)))))
                        (((unsupported)) ((((unsupported)) (((xself).xagent)) ((xurl)))))
                xtest_good_urls.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xurl)) (((xself).xgood)))
                        seq
                          (((unsupported)) ((((unsupported)) ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)) ((xurl)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xurl)) ((xagent)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xparser).xcan_fetch)) ((xagent)) ((xurl)))))
                xtest_bad_urls.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xurl)) (((xself).xbad)))
                        seq
                          (((unsupported)) ((((unsupported)) ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)) ((xurl)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xurl)) ((xagent)))))
                            bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcan_fetch)) ((xagent)) ((xurl)))))
                xtest_site_maps.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xparser).xsite_maps)) 0)) (((xself).xsite_maps)))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/") ("/test.html"))
                xbad.write (((unsupported)) ("/cyberworld/map/index.html") ("/tmp/xxx") ("/foo.html"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/") ("/test.html") ((((unsupported)) ("cybermapper") ("/cyberworld/map/index.html"))))
                xbad.write (((unsupported)) ("/cyberworld/map/index.html"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/") ("/test.html"))
                xbad.write (((unsupported)) ("/cyberworld/map/index.html"))
                xsite_maps.write (((unsupported)) ("http://www.gstatic.com/s2/sitemaps/profiles-sitemap.xml") ("http://www.google.com/hostednews/sitemap_index.xml"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) 0)
                xbad.write (((unsupported)) ("/cyberworld/map/index.html") ("/") ("/tmp/"))
            (((unsupported)) ((xBaseRobotTest)))
              seq
                xrequest_rate.write "None: is there a None literal in the EO language?"
                xcrawl_delay.write "None: is there a None literal in the EO language?"
                xtest_request_rate.write
                  [xself]
                    memory > xparsed_request_rate
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((xself).xparser)
                        (((unsupported)) ((xurl)) ((((xself).xgood).add ((xself).xbad))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)) ((xurl)))))
                            (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xurl)) ((xagent)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xcrawl_delay)) ((xagent)))) (((xself).xcrawl_delay)))
                                xparsed_request_rate.write ((((xparser).xrequest_rate)) ((xagent)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xparsed_request_rate)) (((xself).xrequest_rate)))
                                (((unsupported)) (((xself).xrequest_rate)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsInstance)) ((xparsed_request_rate)) ((((xurllib).xrobotparser).xRequestRate)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xparsed_request_rate).xrequests)) ((((xself).xrequest_rate).xrequests)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((xparsed_request_rate).xseconds)) ((((xself).xrequest_rate).xseconds)))
            (((unsupported)) ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write ""
                xgood.write (((unsupported)) ("/foo"))
            (((unsupported)) ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xagent.write "figtree"
                xrequest_rate.write (((((xurllib).xrobotparser).xRequestRate)) (9) (30))
                xcrawl_delay.write 3
                xgood.write (((unsupported)) ((((unsupported)) ("figtree") ("/foo.html"))))
                xbad.write (((unsupported)) ("/tmp") ("/tmp.html") ("/tmp/a.html") ("/a%3cd.html") ("/a%3Cd.html") ("/a%2fb.html") ("/~joe/index.html"))
            (((unsupported)) ((xCrawlDelayAndRequestRateTest)))
              xagent.write "FigTree Robot libwww-perl/5.04"
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/tmp"))
                xbad.write (((unsupported)) ("/tmp/") ("/tmp/a.html") ("/a%3cd.html") ("/a%3Cd.html") ("/a/b.html") ("/%7Ejoe/index.html"))
                xcrawl_delay.write 3
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/foo.html"))
                xbad.write (((unsupported)) 0)
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xagent.write "Googlebot"
                xgood.write (((unsupported)) ("/folder1/myfile.html"))
                xbad.write (((unsupported)) ("/folder1/anotherfile.html"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xagent.write "Googlebot"
                xbad.write (((unsupported)) ("/something.jpg"))
            (((unsupported)) ((xUserAgentOrderingTest)))
              xagent.write "Googlebot-Mobile"
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xagent.write "googlebot"
                xgood.write (((unsupported)) ("/folder1/myfile.html"))
                xbad.write (((unsupported)) ("/folder1/anotherfile.html"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/some/path"))
                xbad.write (((unsupported)) ("/some/path?name=value"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/another/path"))
                xbad.write (((unsupported)) ("/some/path"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xgood.write (((unsupported)) ("/some/path?"))
                xbad.write (((unsupported)) ("/another/path?"))
            (((unsupported)) ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xrequest_rate.write (((((xurllib).xrobotparser).xRequestRate)) (3) (15))
                xcrawl_delay.write 1
                xgood.write (((unsupported)) ("/") ("/test.html"))
                xbad.write (((unsupported)) ("/cyberworld/map/index.html"))
            (((unsupported)) ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)) 0)
                xexpected_output.write (((unsupported)) 0)
                xtest_string_formatting.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xself).xparser)))) (((xself).xexpected_output)))
            (((unsupported)) ((xBaseHTTPRequestHandler)))
              seq
                xdo_GET.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsend_error)) (403) ("Forbidden access"))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xserver)) ((((xHTTPServer)) ((((unsupported)) (((xsupport).xHOST)) (0))) ((xRobotHandler)))))
                        (((unsupported)) (((xself).xt)) ((((unsupported)) (((xthreading).xThread)) ("HTTPServer serving") ((((xself).xserver).xserve_forever)) ((((unsupported)) ("poll_interval") (0.01))))))
                        (((unsupported)) ((((xself).xt).xdaemon)) (TRUE))
                        bogusForceDataize.write (((((xself).xt).xstart)) 0)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xshutdown)) 0)
                        bogusForceDataize.write (((((xself).xt).xjoin)) 0)
                        bogusForceDataize.write (((((xself).xserver).xserver_close)) 0)
                xtestPasswordProtectedSite.write
                  [xself]
                    memory > xaddr
                    memory > xrobots_url
                    memory > xparser
                    memory > xurl
                    seq > @
                      (((unsupported)) 0)
                        xaddr.write (((xself).xserver).xserver_address)
                        xurl.write ((("http://".add ((xsupport).xHOST)).add ":").add (((xstr)) ((((unsupported)) ((xaddr)) (1)))))
                        xrobots_url.write ((xurl).add "/robots.txt")
                        xparser.write (((((xurllib).xrobotparser).xRobotFileParser)) 0)
                        bogusForceDataize.write ((((xparser).xset_url)) ((xurl)))
                        bogusForceDataize.write ((((xparser).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xparser).xcan_fetch)) ("*") ((xrobots_url)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xbase_url.write "http://www.pythontest.net/"
                xrobots_txt.write ((("{}elsewhere/robots.txt".xformat)) ((xbase_url)))
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xsupport).xrequires)) ("network"))
                        (((unsupported)) (((((xsupport).xtransient_internet)) (((xcls).xbase_url)))))
                          seq
                            (((unsupported)) (((xcls).xparser)) ((((((xurllib).xrobotparser).xRobotFileParser)) (((xcls).xrobots_txt)))))
                            bogusForceDataize.write (((((xcls).xparser).xread)) 0)
                xurl.write
                  [xself xpath]
                    seq > @
                      (((unsupported)) (((("{}{}{}".xformat)) (((xself).xbase_url)) ((xpath)) ((((((unsupported)) ((((((xos).xpath).xsplitext)) ((xpath)))) (1)).not).if "/" "")))))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xparser).xdisallow_all)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xparser).xallow_all)))
                        bogusForceDataize.write ((((xself).xassertGreater)) ((((((xself).xparser).xmtime)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcrawl_delay)) ("*"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xrequest_rate)) ("*"))))
                xtest_can_fetch.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xparser).xcan_fetch)) ("*") (((((xself).xurl)) ("elsewhere"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcan_fetch)) ("Nutch") (((xself).xbase_url)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcan_fetch)) ("Nutch") (((((xself).xurl)) ("brian"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcan_fetch)) ("Nutch") (((((xself).xurl)) ("webstats"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xparser).xcan_fetch)) ("*") (((((xself).xurl)) ("webstats"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xparser).xcan_fetch)) ("*") (((xself).xbase_url)))))
                xtest_read_404.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((((xurllib).xrobotparser).xRobotFileParser)) (((((xself).xurl)) ("i-robot.txt"))))
                        bogusForceDataize.write ((((xparser).xread)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xparser).xallow_all)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xparser).xdisallow_all)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xparser).xmtime)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xcrawl_delay)) ("*"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xparser).xrequest_rate)) ("*"))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)