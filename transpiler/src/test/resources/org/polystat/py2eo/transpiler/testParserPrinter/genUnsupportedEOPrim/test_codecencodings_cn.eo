memory > xmultibytecodec_support
memory > xunittest
memory > x__name__
[] > test_codecencodings_cn
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xencoding
        memory > xtstring
        memory > xhas_iso10646
        memory > xcodectests
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "gb2312"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("gb2312"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx81x81xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx81x81xc1xc4") ("replace") ("abcufffdufffdu804a"))) ((((unsupported)) ("abcx81x81xc1xc4xc8") ("replace") ("abcufffdufffdu804aufffd"))) ((((unsupported)) ("abcx81x81xc1xc4") ("ignore") ("abcu804a"))) ((((unsupported)) ("xc1x64") ("strict") ("None: is there a None literal in the EO language?"))))
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "gbk"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("gbk"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx80x80xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx80x80xc1xc4") ("replace") ("abcufffdufffdu804a"))) ((((unsupported)) ("abcx80x80xc1xc4xc8") ("replace") ("abcufffdufffdu804aufffd"))) ((((unsupported)) ("abcx80x80xc1xc4") ("ignore") ("abcu804a"))) ((((unsupported)) ("x83x34x83x31") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("u30fb") ("strict") ("None: is there a None literal in the EO language?"))))
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "gb18030"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("gb18030"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("abcx80x80xc1xc4") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcxc8") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx80x80xc1xc4") ("replace") ("abcufffdufffdu804a"))) ((((unsupported)) ("abcx80x80xc1xc4xc8") ("replace") ("abcufffdufffdu804aufffd"))) ((((unsupported)) ("abcx80x80xc1xc4") ("ignore") ("abcu804a"))) ((((unsupported)) ("abcx84x39x84x39xc1xc4") ("replace") ("abcufffd9ufffd9u804a"))) ((((unsupported)) ("u30fb") ("strict") ("x819xa79"))) ((((unsupported)) ("abcx84x32x80x80def") ("replace") ("abcufffd2ufffdufffddef"))) ((((unsupported)) ("abcx81x30x81x30def") ("strict") ("abcx80def"))) ((((unsupported)) ("abcx86x30x81x30def") ("replace") ("abcufffd0ufffd0def"))) ((((unsupported)) ("xffx30x81x30") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("x81x30xffx30") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("abcx81x39xffx39xc1xc4") ("replace") ("abcufffdx39ufffdx39u804a"))) ((((unsupported)) ("abcxabx36xffx30def") ("replace") ("abcufffdx36ufffdx30def"))) ((((unsupported)) ("abcxbfx38xffx32xc1xc4") ("ignore") ("abcx38x32u804a"))))
                xhas_iso10646.write TRUE
            (((unsupported)) (((xmultibytecodec_support).xTestBase)) (((xunittest).xTestCase)))
              seq
                xencoding.write "hz"
                xtstring.write ((((xmultibytecodec_support).xload_teststring)) ("hz"))
                xcodectests.write (((unsupported)) ((((unsupported)) ("This sentence is in ASCII.nThe next sentence is in GB.~{<:Ky2;S{#,~}~n~{NpJ)l6HK!#~}Bye.n") ("strict") ("This sentence is in ASCII.nThe next sentence is in GB.u5df1u6240u4e0du6b32uff0cu52ffu65bdu65bcu4ebau3002Bye.n"))) ((((unsupported)) ("This sentence is in ASCII.nThe next sentence is in GB.~n~{<:Ky2;S{#,NpJ)l6HK!#~}~nBye.n") ("strict") ("This sentence is in ASCII.nThe next sentence is in GB.u5df1u6240u4e0du6b32uff0cu52ffu65bdu65bcu4ebau3002Bye.n"))) ((((unsupported)) ("ab~cd") ("replace") ("abuFFFDcd"))) ((((unsupported)) ("abxffcd") ("replace") ("abuFFFDcd"))) ((((unsupported)) ("ab~{x81x81x41x44~}cd") ("replace") ("abuFFFDuFFFDu804Acd"))) ((((unsupported)) ("ab~{x41x44~}cd") ("replace") ("abu804Acd"))) ((((unsupported)) ("ab~{x79x79x41x44~}cd") ("replace") ("abufffdufffdu804acd"))) ((((unsupported)) ("ab~cd") ("strict") ("ab~~cd"))) ((((unsupported)) ("~{Dc~~:C~}") ("strict") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("~{Dc~n:C~}") ("strict") ("None: is there a None literal in the EO language?"))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)