memory > xd
memory > xk
memory > xarray
memory > xcopy
memory > xMockHTTPHandler
memory > xu
memory > xfilename
memory > xheaders
memory > xAttributeError
memory > xOpenerDirector
memory > xhttp
memory > xRequest
memory > xUnknown
memory > xexpected
memory > xdata
memory > xlist
memory > xCookieJar
memory > xchallenge
memory > xinteract_netscape
memory > xenumerate
memory > xtc
memory > xhandler
memory > xds_url
memory > xValueError
memory > xgot
memory > xtransfer
memory > xMockHTTPResponse
memory > xstr
memory > xUserWarning
memory > xio
memory > xurlparse
memory > xftplib
memory > xtest_urllib
memory > xAbstractDigestAuthHandler
memory > xpos
memory > xHTTPPasswordMgrWithPriorAuth
memory > xsocket
memory > xexec
memory > xemail
memory > xMockFTPWrapper
memory > xpassword
memory > xh
memory > xtup
memory > xresp
memory > xftp
memory > xurl
memory > x_parse_proxy
memory > xMockResponse
memory > xTestDigestAuthHandler
memory > xMockOpener
memory > xMockPasswordManager
memory > xurllib
memory > xdirs
memory > x_proxy_bypass_macosx_sysconf
memory > xrealm_str
memory > xtempfile
memory > xscheme
memory > xmethod_name
memory > xRecordingOpenerDirector
memory > xtype_
memory > xMyOtherHTTPHandler
memory > xp
memory > xMockHeaders
memory > xkw
memory > xany
memory > xMockHandlerSubclass
memory > xHTTPBasicAuthHandler
memory > xf
memory > xstring
memory > xrepr
memory > xint
memory > xbase64
memory > xhasattr
memory > xchallenges
memory > xcode
memory > xhost
memory > xMockCookieJar
memory > xx
memory > xFooHandler
memory > xi
memory > xNonHandler
memory > xmodule
memory > xsupport
memory > xsys
memory > xkwds
memory > xMockHTTPHandlerCheckAuth
memory > xbytes
memory > xspec
memory > xMockHandler
memory > xsorted
memory > xMyHTTPHandler
memory > xaction
memory > xBarHandler
memory > xhandler_instances
memory > xargs
memory > xOSError
memory > xmimetype
memory > xsubprocess
memory > xos
memory > xgetattr
memory > xv
memory > xMockFile
memory > xUnicodeEncodeError
memory > xiter
memory > xport
memory > xFakeMethod
memory > xsetattr
memory > xname
memory > xzip
memory > xunittest
memory > xresult
memory > xTestBasicAuthHandler
memory > xNullFTPHandler
memory > xlocation
memory > xexc
memory > xpasswd
memory > xnext
memory > xobject
memory > xmeths
memory > xHandler
memory > xMockHTTPSHandler
memory > xURLError
memory > xuser
memory > xproc
memory > xlen
memory > xdict
memory > xMockHTTPClass
memory > xTypeError
memory > x__name__
[] > test_urllib2
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xgetheaders
        memory > xtest_invalid_closed
        memory > xtest_http_body_fileobj
        memory > xtest_setting_data_should_remove_content_length
        memory > xtest_http_body_empty_seq
        memory > xtest_get_type
        memory > xadd_parent
        memory > xtest_http_doubleslash
        memory > xtest_add_non_handler
        memory > xtest_full_url_deleter
        memory > x__call__
        memory > xhttps_open
        memory > xtest_basic_auth
        memory > xfind_user_password
        memory > xtest_request_headers_methods
        memory > xtest_cookies
        memory > xsanepathname2url
        memory > xset_debuglevel
        memory > xtest_get_host
        memory > xtest_method
        memory > xrequest
        memory > xtest_proxy_no_proxy
        memory > xerror
        memory > xbuild_test_opener
        memory > xtest_cookie_redirect
        memory > xtest_HTTPError_interface
        memory > xinfo
        memory > xtest_handler_order
        memory > xtest_handled
        memory > xtest_redirect
        memory > xtest_password_manager_default_port
        memory > xclose
        memory > xtest_data
        memory > xtest_parse_http_list
        memory > xtest_http
        memory > xtest_http_body_array
        memory > xtest_invalid_redirect
        memory > x_test_basic_auth
        memory > xtest_http_body_iterable
        memory > xtest_get_host_unquote
        memory > xtest_trivial
        memory > xtest_proxy_no_proxy_all
        memory > xtest_redirect_encoding
        memory > xgetresponse
        memory > xtest_parse_proxy
        memory > xsetUp
        memory > xtest_redirect_fragment
        memory > xtest_proxy_basic_auth
        memory > x__lt__
        memory > xtest_proxy_https
        memory > xtest_http_handler_debuglevel
        memory > xtest_http_body_pipe
        memory > xtest_url_fragment
        memory > xopen
        memory > xtest_basic_prior_auth_auto_send
        memory > xextract_cookies
        memory > x_define_methods
        memory > xtest_proxy
        memory > xtest_redirect_no_path
        memory > xtest_http_body_file
        memory > xtest_build_opener
        memory > xhttp_open
        memory > xtest_password_manager
        memory > xtest_processors
        memory > xtest_get_full_url
        memory > xtest_basic_prior_auth_send_after_first_success
        memory > xtest_basic_and_digest_auth_handlers
        memory > xtest_unsupported_auth_digest_handler
        memory > xtest_badly_named_methods
        memory > xhandle
        memory > xcheck_basic_auth
        memory > xtest___all__
        memory > xtest_http_closed
        memory > xadd_cookie_header
        memory > xtest_proxy_https_proxy_authorization
        memory > xset_tunnel
        memory > xadd_password
        memory > xtest_full_url_setter
        memory > xtest_unsupported_algorithm
        memory > xtest_errors
        memory > xtest_deleting_data_should_remove_content_length
        memory > xtest_raise
        memory > xgeturl
        memory > xreset
        memory > x__init__
        memory > xhandler_order
        memory > xread
        memory > xtest_http_error
        memory > xtest_osx_proxy_bypass
        memory > xtest_selector
        memory > xtest_issue16464
        memory > xtest_relative_redirect
        memory > xtest_request_headers_dict
        memory > xtest_url_fullurl_get_full_url
        memory > xtest_unsupported_auth_basic_handler
        memory > xopener_has_handler
        memory > xtest_file
        memory > xtest_ftp
        memory > xreadline
        memory > xaddheaders
        memory > xadd_ordered_mock_handlers
        memory > xtest_URLError_reasonstr
        memory > xtest_fixpath_in_weirdurls
        memory > xmethod
        memory > xtest_wrapped_url
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest___all__.write
                  [xself]
                    memory > xcontext
                    seq > @
                      (((unsupported)) ((xmodule)) ((((unsupported)) ("request") ("response") ("parse") ("error") ("robotparser"))))
                        seq
                          xcontext.write (((unsupported)) 0)
                          bogusForceDataize.write (((xexec)) (("from urllib.%s import *".mod (xmodule))) ((xcontext)))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xcontext)) ("__builtins__"))))))
                          (((xmodule).eq "request").and (((xos).xname).eq "nt")).if
                            seq
                              (((unsupported)) ((((unsupported)) ((xu)) ((xp)))) ((((unsupported)) (((((xcontext).xpop)) ("url2pathname"))) (((((xcontext).xpop)) ("pathname2url"))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xu).x__module__)) ("nturl2path"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xp).x__module__)) ("nturl2path"))
                          (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) (((((xcontext).xitems)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xv).x__module__)) (("urllib.%s".mod (xmodule))) (("%r is exposed in 'urllib.%s' but defined in %r".mod (((unsupported)) ((xk)) ((xmodule)) (((xv).x__module__))))))
                xtest_trivial.write
                  [xself]
                    memory > xfname
                    memory > xfile_url
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((((xurllib).xrequest).xurlopen)) ("bogus url"))
                        xfname.write ((((((((xos).xpath).xabspath)) ((((xurllib).xrequest).x__file__))).xreplace)) (((xos).xsep)) ("/"))
                        (((xos).xname).eq "nt").if
                          xfile_url.write ("file:///%s".mod (xfname))
                          xfile_url.write ("file://%s".mod (xfname))
                        (((unsupported)) ((((((xurllib).xrequest).xurlopen)) ((xfile_url)))) ((xf)))
                          bogusForceDataize.write ((((xf).xread)) 0)
                xtest_parse_http_list.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)) ((((unsupported)) ("a,b,c") ((((unsupported)) ("a") ("b") ("c"))))) ((((unsupported)) ("path\"o,l\"og\"i\"cal, example") ((((unsupported)) ("path\"o,l\"og\"i\"cal") ("example"))))) ((((unsupported)) ("a, b, \"c\", \"d\", \"e,f\", g, h") ((((unsupported)) ("a") ("b") ("\"c\"") ("\"d\"") ("\"e,f\"") ("g") ("h"))))) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("a=\"b\"c\"") ("d=\"e,f\"") ((((unsupported)) 0)))))))
                        (((unsupported)) ((((unsupported)) ((xstring)) ((xlist)))) ((xtests)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xurllib).xrequest).xparse_http_list)) ((xstring)))) ((xlist)))
                xtest_URLError_reasonstr.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write (((((xurllib).xerror).xURLError)) ("reason"))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xerr).xreason)) ((((xstr)) ((xerr)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_request_headers_dict.write
                  [xself]
                    memory > xurl
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xurl.write "http://example.com"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((unsupported)) ((xRequest)) ((xurl)) ((((unsupported)) ("Spam-eggs") ("blah")))).xheaders)) ("Spam-eggs"))) ("blah"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((unsupported)) ((xRequest)) ((xurl)) ((((unsupported)) ("spam-EggS") ("blah")))).xheaders)) ("Spam-eggs"))) ("blah"))
                xtest_request_headers_methods.write
                  [xself]
                    memory > xreq
                    memory > xurl
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xurl.write "http://example.com"
                        xreq.write (((unsupported)) ((xRequest)) ((xurl)) ((((unsupported)) ("Spam-eggs") ("blah"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xreq).xhas_header)) ("Spam-eggs"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xheader_items)) 0)) ((((unsupported)) ((((unsupported)) ("Spam-eggs") ("blah"))))))
                        bogusForceDataize.write ((((xreq).xadd_header)) ("Foo-Bar") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((xreq).xheader_items)) 0)))) ((((unsupported)) ((((unsupported)) ("Foo-bar") ("baz"))) ((((unsupported)) ("Spam-eggs") ("blah"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xreq).xhas_header)) ("Not-there"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xreq).xget_header)) ("Not-there"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xget_header)) ("Not-there") ("default"))) ("default"))
                        bogusForceDataize.write ((((xreq).xremove_header)) ("Spam-eggs"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xreq).xhas_header)) ("Spam-eggs"))))
                        bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Unredirected-spam") ("Eggs"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xreq).xhas_header)) ("Unredirected-spam"))))
                        bogusForceDataize.write ((((xreq).xremove_header)) ("Unredirected-spam"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xreq).xhas_header)) ("Unredirected-spam"))))
                xtest_password_manager.write
                  [xself]
                    memory > xfind_user_pass
                    memory > xadd
                    memory > xmgr
                    seq > @
                      seq
                        xmgr.write (((((xurllib).xrequest).xHTTPPasswordMgr)) 0)
                        xadd.write ((xmgr).xadd_password)
                        xfind_user_pass.write ((xmgr).xfind_user_password)
                        bogusForceDataize.write (((xadd)) ("Some Realm") ("http://example.com/") ("joe") ("password"))
                        bogusForceDataize.write (((xadd)) ("Some Realm") ("http://example.com/ni") ("ni") ("ni"))
                        bogusForceDataize.write (((xadd)) ("Some Realm") ("http://c.example.com:3128") ("3") ("c"))
                        bogusForceDataize.write (((xadd)) ("Some Realm") ("d.example.com") ("4") ("d"))
                        bogusForceDataize.write (((xadd)) ("Some Realm") ("e.example.com:3128") ("5") ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("example.com"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://example.com/ni"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://example.com"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://example.com/"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://example.com/spam"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://example.com/spam/spam"))) ((((unsupported)) ("joe") ("password"))))
                        bogusForceDataize.write (((xadd)) ("c") ("http://example.com/foo") ("foo") ("ni"))
                        bogusForceDataize.write (((xadd)) ("c") ("http://example.com/bar") ("bar") ("nini"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("c") ("http://example.com/foo"))) ((((unsupported)) ("foo") ("ni"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("c") ("http://example.com/bar"))) ((((unsupported)) ("bar") ("nini"))))
                        bogusForceDataize.write (((xadd)) ("b") ("http://example.com/") ("first") ("blah"))
                        bogusForceDataize.write (((xadd)) ("b") ("http://example.com/") ("second") ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("b") ("http://example.com/"))) ((((unsupported)) ("second") ("spam"))))
                        bogusForceDataize.write (((xadd)) ("a") ("http://example.com") ("1") ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("a") ("http://example.com/"))) ((((unsupported)) ("1") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("a") ("http://a.example.com/"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("c.example.com"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("c.example.com:3128"))) ((((unsupported)) ("3") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("http://c.example.com:3128"))) ((((unsupported)) ("3") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("d.example.com"))) ((((unsupported)) ("4") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("Some Realm") ("e.example.com:3128"))) ((((unsupported)) ("5") ("e"))))
                xtest_password_manager_default_port.write
                  [xself]
                    memory > xfind_user_pass
                    memory > xadd
                    memory > xmgr
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xmgr.write (((((xurllib).xrequest).xHTTPPasswordMgr)) 0)
                        xadd.write ((xmgr).xadd_password)
                        xfind_user_pass.write ((xmgr).xfind_user_password)
                        bogusForceDataize.write (((xadd)) ("f") ("http://g.example.com:80") ("10") ("j"))
                        bogusForceDataize.write (((xadd)) ("g") ("http://h.example.com") ("11") ("k"))
                        bogusForceDataize.write (((xadd)) ("h") ("i.example.com:80") ("12") ("l"))
                        bogusForceDataize.write (((xadd)) ("i") ("j.example.com") ("13") ("m"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("g.example.com:100"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("g.example.com:80"))) ((((unsupported)) ("10") ("j"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("g.example.com"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("http://g.example.com:100"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("http://g.example.com:80"))) ((((unsupported)) ("10") ("j"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("f") ("http://g.example.com"))) ((((unsupported)) ("10") ("j"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("g") ("h.example.com"))) ((((unsupported)) ("11") ("k"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("g") ("h.example.com:80"))) ((((unsupported)) ("11") ("k"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("g") ("http://h.example.com:80"))) ((((unsupported)) ("11") ("k"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("h") ("i.example.com"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("h") ("i.example.com:80"))) ((((unsupported)) ("12") ("l"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("h") ("http://i.example.com:80"))) ((((unsupported)) ("12") ("l"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("i") ("j.example.com"))) ((((unsupported)) ("13") ("m"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("i") ("j.example.com:80"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("i") ("http://j.example.com"))) ((((unsupported)) ("13") ("m"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfind_user_pass)) ("i") ("http://j.example.com:80"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
            (((unsupported)) 0)
              seq
                xaddheaders.write (((unsupported)) 0)
                xopen.write
                  [xself xreq xdata xtimeout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xreq)) (((xself).xdata)) (((xself).xtimeout)))) ((((unsupported)) ((xreq)) ((xdata)) ((xtimeout)))))
                xerror.write
                  [xself xproto]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xproto)) (((xself).xargs)))) ((((unsupported)) ((xproto)) ((xargs)))))
            (((unsupported)) 0)
              seq
                xread.write
                  [xself xcount]
                    seq > @
                      (((unsupported)) 0)
                xreadline.write
                  [xself xcount]
                    seq > @
                      (((unsupported)) 0)
                xclose.write
                  [xself]
                    seq > @
            (((unsupported)) ((xdict)))
              xgetheaders.write
                [xself xname]
                  seq > @
                    (((unsupported)) ((((xlist)) (((((xself).xvalues)) 0)))))
            (((unsupported)) (((xio).xStringIO)))
              seq
                x__init__.write
                  [xself xcode xmsg xheaders xdata xurl]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xio).xStringIO).x__init__)) ((xself)) ((xdata)))
                        (((unsupported)) ((((unsupported)) (((xself).xcode)) (((xself).xmsg)) (((xself).xheaders)) (((xself).xurl)))) ((((unsupported)) ((xcode)) ((xmsg)) ((xheaders)) ((xurl)))))
                xinfo.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xheaders)))
                xgeturl.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xurl)))
            (((unsupported)) 0)
              seq
                xadd_cookie_header.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)) (((xself).xach_req)) ((xrequest)))
                xextract_cookies.write
                  [xself xresponse xrequest]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xec_req)) (((xself).xec_r)))) ((((unsupported)) ((xrequest)) ((xresponse)))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xmeth_name xaction xhandle]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xmeth_name)) ((xmeth_name)))
                        (((unsupported)) (((xself).xhandle)) ((xhandle)))
                        (((unsupported)) (((xself).xaction)) ((xaction)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xhandle)) (((xself).xmeth_name)) (((xself).xaction)) ((((unsupported)) ((xargs)))))))
            (((unsupported)) (((xio).xIOBase)))
              seq
                x__init__.write
                  [xself xfp xmsg xstatus xreason]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xfp)) ((xfp)))
                        (((unsupported)) (((xself).xmsg)) ((xmsg)))
                        (((unsupported)) (((xself).xstatus)) ((xstatus)))
                        (((unsupported)) (((xself).xreason)) ((xreason)))
                        (((unsupported)) (((xself).xcode)) (200))
                xread.write
                  [xself]
                    seq > @
                      (((unsupported)) (""))
                xinfo.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) 0)))
                xgeturl.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xurl)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xlevel)) (0))
                        (((unsupported)) (((xself).xreq_headers)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xdata)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xraise_on_endheaders)) (FALSE))
                        (((unsupported)) (((xself).xsock)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).x_tunnel_headers)) ((((unsupported)) 0)))
                x__call__.write
                  [xself xhost xtimeout]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhost)) ((xhost)))
                        (((unsupported)) (((xself).xtimeout)) ((xtimeout)))
                        (((unsupported)) ((xself)))
                xset_debuglevel.write
                  [xself xlevel]
                    seq > @
                      (((unsupported)) (((xself).xlevel)) ((xlevel)))
                xset_tunnel.write
                  [xself xhost xport xheaders]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).x_tunnel_host)) ((xhost)))
                        (((unsupported)) (((xself).x_tunnel_port)) ((xport)))
                        (xheaders).if
                          (((unsupported)) (((xself).x_tunnel_headers)) ((xheaders)))
                          bogusForceDataize.write (((((xself).x_tunnel_headers).xclear)) 0)
                xrequest.write
                  [xself xmethod xurl xbody xheaders xencode_chunked]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xmethod)) ((xmethod)))
                        (((unsupported)) (((xself).xselector)) ((xurl)))
                        (((unsupported)) ((xheaders)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) (((xself).xreq_headers)) (((((xheaders).xitems)) 0)))
                        bogusForceDataize.write (((((xself).xreq_headers).xsort)) 0)
                        (xbody).if
                          (((unsupported)) (((xself).xdata)) ((xbody)))
                        (((unsupported)) (((xself).xencode_chunked)) ((xencode_chunked)))
                        ((xself).xraise_on_endheaders).if
                          (((unsupported)) ((((xOSError)) 0)))
                xgetresponse.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xMockHTTPResponse)) ((((xMockFile)) 0)) ((((unsupported)) 0)) (200) ("OK"))))
                xclose.write
                  [xself]
                    seq > @
            (((unsupported)) 0)
              seq
                xhandler_order.write 500
                x__init__.write
                  [xself xmethods]
                    seq > @
                      bogusForceDataize.write ((((xself).x_define_methods)) ((xmethods)))
                x_define_methods.write
                  [xself xmethods]
                    memory > xmeth
                    seq > @
                      (((unsupported)) ((xspec)) ((xmethods)))
                        seq
                          ((((xlen)) ((xspec))).eq 2).if
                            (((unsupported)) ((((unsupported)) ((xname)) ((xaction)))) ((xspec)))
                            (((unsupported)) ((((unsupported)) ((xname)) ((xaction)))) ((((unsupported)) ((xspec)) ("None: is there a None literal in the EO language?"))))
                          xmeth.write (((xFakeMethod)) ((xname)) ((xaction)) (((xself).xhandle)))
                          bogusForceDataize.write (((xsetattr)) (((xself).x__class__)) ((xname)) ((xmeth)))
                xhandle.write
                  [xself xfn_name xaction]
                    memory > xcode
                    memory > xres
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xself).xparent).xcalls).xappend)) ((((unsupported)) ((xself)) ((xfn_name)) ((xargs)) ((xkwds)))))
                        (((unsupported)) ((xaction)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)) ("None: is there a None literal in the EO language?"))
                          ((xaction).eq "return self").if
                            (((unsupported)) ((xself)))
                            ((xaction).eq "return response").if
                              seq
                                xres.write (((xMockResponse)) (200) ("OK") ((((unsupported)) 0)) (""))
                                (((unsupported)) ((xres)))
                              ((xaction).eq "return request").if
                                (((unsupported)) ((((xRequest)) ("http://blah/"))))
                                ((((xaction).xstartswith)) ("error")).if
                                  seq
                                    xcode.write (((unsupported)) ((xaction)) ((((unsupported)) ((((((xaction).xrfind)) (" ")).add 1)))))
                                    (((unsupported)) ((xValueError)))
                                      xcode.write (((xint)) ((xcode)))
                                    xres.write (((xMockResponse)) (200) ("OK") ((((unsupported)) 0)) (""))
                                    (((unsupported)) ((((((xself).xparent).xerror)) ("http") ((((unsupported)) ((xargs)) (0))) ((xres)) ((xcode)) ("") ((((unsupported)) 0)))))
                                  ((xaction).eq "raise").if
                                    (((unsupported)) ((((((xurllib).xerror).xURLError)) ("blah"))))
                        (((unsupported)) (FALSE))
                xclose.write
                  [xself]
                    seq > @
                xadd_parent.write
                  [xself xparent]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xparent)) ((xparent)))
                        (((unsupported)) ((((xself).xparent).xcalls)) ((((unsupported)) 0)))
                x__lt__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xhasattr)) ((xother)) ("handler_order")).not).if
                          (((unsupported)) (TRUE))
                        (((unsupported)) ((((xself).xhandler_order).less ((xother).xhandler_order))))
            xadd_ordered_mock_handlers.write
              [xopener xmeth_spec]
                memory > xh
                memory > xcount
                memory > xhandlers
                seq > @
                  seq
                    (((unsupported)) 0)
                    xhandlers.write (((unsupported)) 0)
                    xcount.write 0
                    (((unsupported)) ((xmeths)) ((xmeth_spec)))
                      seq
                        (((unsupported)) ((xMockHandler)))
                        xh.write (((xMockHandlerSubclass)) ((xmeths)))
                        (((unsupported)) (((xh).xhandler_order)) ((xcount)))
                        bogusForceDataize.write ((((xh).xadd_parent)) ((xopener)))
                        xcount.write ((xcount).add 1)
                        bogusForceDataize.write ((((xhandlers).xappend)) ((xh)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xh)))
                    (((unsupported)) ((xhandlers)))
            xbuild_test_opener.write
              []
                memory > xopener
                seq > @
                  (((unsupported)) 0)
                    xopener.write (((xOpenerDirector)) 0)
                    (((unsupported)) ((xh)) ((xhandler_instances)))
                      bogusForceDataize.write ((((xopener).xadd_handler)) ((xh)))
                    (((unsupported)) ((xopener)))
            (((unsupported)) ((((xurllib).xrequest).xBaseHandler)))
              seq
                x__init__.write
                  [xself xcode xheaders]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcode)) ((xcode)))
                        (((unsupported)) (((xself).xheaders)) ((xheaders)))
                        bogusForceDataize.write ((((xself).xreset)) 0)
                xreset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_count)) (0))
                        (((unsupported)) (((xself).xrequests)) ((((unsupported)) 0)))
                xhttp_open.write
                  [xself xreq]
                    memory > xname
                    memory > xmsg
                    seq > @
                      seq
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        bogusForceDataize.write (((((xself).xrequests).xappend)) (((((xcopy).xdeepcopy)) ((xreq)))))
                        (((xself).x_count).eq 0).if
                          seq
                            (((unsupported)) (((xself).x_count)) ((((xself).x_count).add 1)))
                            xname.write (((unsupported)) ((((xhttp).xclient).xresponses)) (((xself).xcode)))
                            xmsg.write ((((xemail).xmessage_from_string)) (((xself).xheaders)))
                            (((unsupported)) ((((((xself).xparent).xerror)) ("http") ((xreq)) ((((xMockFile)) 0)) (((xself).xcode)) ((xname)) ((xmsg)))))
                          seq
                            (((unsupported)) (((xself).xreq)) ((xreq)))
                            xmsg.write ((((xemail).xmessage_from_string)) ("rnrn"))
                            (((unsupported)) ((((xMockResponse)) (200) ("OK") ((xmsg)) ("") (((((xreq).xget_full_url)) 0)))))
            (((unsupported)) ((((xurllib).xrequest).xAbstractHTTPHandler)))
              seq
                x__init__.write
                  [xself xdebuglevel]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xurllib).xrequest).xAbstractHTTPHandler).x__init__)) ((xself)) ((xdebuglevel)))
                        (((unsupported)) (((xself).xhttpconn)) ((((xMockHTTPClass)) 0)))
                xhttps_open.write
                  [xself xreq]
                    seq > @
                      (((unsupported)) (((((xself).xdo_open)) (((xself).xhttpconn)) ((xreq)))))
            (((unsupported)) ((((xurllib).xrequest).xBaseHandler)))
              seq
                x__init__.write
                  [xself xcode]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xcode)) ((xcode)))
                        (((unsupported)) (((xself).xhas_auth_header)) (FALSE))
                xreset.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xhas_auth_header)) (FALSE))
                xhttp_open.write
                  [xself xreq]
                    memory > xname
                    seq > @
                      seq
                        ((((xreq).xhas_header)) ("Authorization")).if
                          (((unsupported)) (((xself).xhas_auth_header)) (TRUE))
                        xname.write (((unsupported)) ((((xhttp).xclient).xresponses)) (((xself).xcode)))
                        (((unsupported)) ((((xMockResponse)) (((xself).xcode)) ((xname)) ((((xMockFile)) 0)) ("") (((((xreq).xget_full_url)) 0)))))
            (((unsupported)) 0)
              seq
                xadd_password.write
                  [xself xrealm xuri xuser xpassword]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xrealm)) ((xrealm)))
                        (((unsupported)) (((xself).xurl)) ((xuri)))
                        (((unsupported)) (((xself).xuser)) ((xuser)))
                        (((unsupported)) (((xself).xpassword)) ((xpassword)))
                xfind_user_password.write
                  [xself xrealm xauthuri]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xtarget_realm)) ((xrealm)))
                        (((unsupported)) (((xself).xtarget_url)) ((xauthuri)))
                        (((unsupported)) ((((unsupported)) (((xself).xuser)) (((xself).xpassword)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_add_non_handler.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xOpenerDirector)) 0).xadd_handler)) ((((xNonHandler)) 0)))
                xtest_badly_named_methods.write
                  [xself]
                    memory > xo
                    memory > xmeth_spec
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xo.write (((xOpenerDirector)) 0)
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("do_open") ("return self"))) ((((unsupported)) ("proxy_open") ("return self"))))) ((((unsupported)) ((((unsupported)) ("redirect_request") ("return self"))))))
                        bogusForceDataize.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((((((xurllib).xrequest).xUnknownHandler)) 0)))
                        (((unsupported)) ((xscheme)) ((((unsupported)) ("do") ("proxy") ("redirect"))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xURLError)) (((xo).xopen)) (((xscheme).add "://example.com/")))
                xtest_handled.write
                  [xself]
                    memory > xhandlers
                    memory > xo
                    memory > xreq
                    memory > xmeth_spec
                    memory > xr
                    memory > xcalls
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ("http_open") ("ftp_open") ("http_error_302"))) ((((unsupported)) ("ftp_open"))) ((((unsupported)) ((((unsupported)) ("http_open") ("return self"))))) ((((unsupported)) ((((unsupported)) ("http_open") ("return self"))))))
                        xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        xreq.write (((xRequest)) ("http://example.com/"))
                        xr.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((unsupported)) ((xhandlers)) (2))))
                        xcalls.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_open"))) ((((unsupported)) ((((unsupported)) ((xhandlers)) (2))) ("http_open"))))
                        (((unsupported)) ((((unsupported)) ((xexpected)) ((xgot)))) ((((xzip)) ((xcalls)) (((xo).xcalls)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xhandler)) ((xname)) ((xargs)) ((xkwds)))) ((xgot)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xhandler)) ((xname)))) ((xexpected)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xargs)) ((((unsupported)) ((xreq)))))
                xtest_handler_order.write
                  [xself]
                    memory > xo
                    memory > xh
                    memory > xhandlers
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xhandlers.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xmeths)) ((xhandler_order)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ("http_open") ("return self"))))) (500))) ((((unsupported)) ((((unsupported)) ("http_open"))) (0))))))
                          seq
                            (((unsupported)) ((xMockHandler)))
                            xh.write (((xMockHandlerSubclass)) ((xmeths)))
                            (((unsupported)) (((xh).xhandler_order)) ((xhandler_order)))
                            bogusForceDataize.write ((((xhandlers).xappend)) ((xh)))
                            bogusForceDataize.write ((((xo).xadd_handler)) ((xh)))
                        bogusForceDataize.write ((((xo).xopen)) ("http://example.com/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) (((xo).xcalls)) (0))) (0))) ((((unsupported)) ((xhandlers)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) (((xo).xcalls)) (1))) (0))) ((((unsupported)) ((xhandlers)) (0))))
                xtest_raise.write
                  [xself]
                    memory > xreq
                    memory > xo
                    memory > xmeth_spec
                    memory > xhandlers
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("http_open") ("raise"))))) ((((unsupported)) ((((unsupported)) ("http_open") ("return self"))))))
                        xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        xreq.write (((xRequest)) ("http://example.com/"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)) (((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xo).xcalls)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_open") ((((unsupported)) ((xreq)))) ((((unsupported)) 0)))))))
                xtest_http_error.write
                  [xself]
                    memory > x__eq__
                    memory > xhandlers
                    memory > xo
                    memory > xreq
                    memory > xcalls
                    memory > xmeth_spec
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("http_open") ("error 302"))))) ((((unsupported)) ((((unsupported)) ("http_error_400") ("raise"))) ("http_open"))) ((((unsupported)) ((((unsupported)) ("http_error_302") ("return response"))) ("http_error_303") ("http_error"))) ((((unsupported)) ("http_error_302"))))
                        xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        (((unsupported)) 0)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (TRUE))
                        xreq.write (((xRequest)) ("http://example.com/"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        (((unsupported)) (((((xlen)) (((xo).xcalls))).eq 2)))
                        xcalls.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_open") ((((unsupported)) ((xreq)))))) ((((unsupported)) ((((unsupported)) ((xhandlers)) (2))) ("http_error_302") ((((unsupported)) ((xreq)) ((((xUnknown)) 0)) (302) ("") ((((unsupported)) 0)))))))
                        (((unsupported)) ((((unsupported)) ((xexpected)) ((xgot)))) ((((xzip)) ((xcalls)) (((xo).xcalls)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xhandler)) ((xmethod_name)) ((xargs)))) ((xexpected)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xhandler)) ((xmethod_name)))) ((((unsupported)) ((xgot)) ((((unsupported)) (2))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xargs)) ((((unsupported)) ((xgot)) (2))))
                xtest_processors.write
                  [xself]
                    memory > xhandlers
                    memory > xo
                    memory > xreq
                    memory > xcalls
                    memory > xmeth_spec
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("http_request") ("return request"))) ((((unsupported)) ("http_response") ("return response"))))) ((((unsupported)) ((((unsupported)) ("http_request") ("return request"))) ((((unsupported)) ("http_response") ("return response"))))))
                        xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        xreq.write (((xRequest)) ("http://example.com/"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        xcalls.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_request"))) ((((unsupported)) ((((unsupported)) ((xhandlers)) (1))) ("http_request"))) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_response"))) ((((unsupported)) ((((unsupported)) ((xhandlers)) (1))) ("http_response"))))
                        (((unsupported)) ((((unsupported)) ((xi)) ((((unsupported)) ((xhandler)) ((xname)) ((xargs)) ((xkwds)))))) ((((xenumerate)) (((xo).xcalls)))))
                          ((xi).less 2).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xhandler)) ((xname)))) ((((unsupported)) ((xcalls)) ((xi)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xargs)))) (1))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xargs)) (0))) ((xRequest)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xhandler)) ((xname)))) ((((unsupported)) ((xcalls)) ((xi)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xargs)))) (2))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xargs)) (0))) ((xRequest)))
                              (((unsupported)) ((((unsupported)) ((xargs)) (1))) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xargs)) (1))) ((xMockResponse)))
            xsanepathname2url.write
              [xpath]
                memory > xurlpath
                seq > @
                  seq
                    (((unsupported)) ((xUnicodeEncodeError)))
                      bogusForceDataize.write ((((xpath).xencode)) ("utf-8"))
                      (((unsupported)) (((((xunittest).xSkipTest)) ("path is not encodable to utf8"))))
                    xurlpath.write (((((xurllib).xrequest).xpathname2url)) ((xpath)))
                    ((((xos).xname).eq "nt").and ((((xurlpath).xstartswith)) ("///"))).if
                      xurlpath.write (((unsupported)) ((xurlpath)) ((((unsupported)) (2))))
                    (((unsupported)) ((xurlpath)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_ftp.write
                  [xself]
                    memory > xheaders
                    memory > xdata
                    memory > xconnect_ftp
                    memory > xreq
                    memory > xclose
                    memory > xh
                    memory > xr
                    memory > xretrfile
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xdata]
                                seq > @
                                  (((unsupported)) (((xself).xdata)) ((xdata)))
                            xretrfile.write
                              [xself xfilename xfiletype]
                                seq > @
                                  seq
                                    (((unsupported)) ((((unsupported)) (((xself).xfilename)) (((xself).xfiletype)))) ((((unsupported)) ((xfilename)) ((xfiletype)))))
                                    (((unsupported)) ((((unsupported)) (((((xio).xStringIO)) (((xself).xdata)))) ((((xlen)) (((xself).xdata)))))))
                            xclose.write
                              [xself]
                                seq > @
                        (((unsupported)) ((((xurllib).xrequest).xFTPHandler)))
                          seq
                            x__init__.write
                              [xself xdata]
                                seq > @
                                  (((unsupported)) (((xself).xdata)) ((xdata)))
                            xconnect_ftp.write
                              [xself xuser xpasswd xhost xport xdirs xtimeout]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) (((xself).xuser)) (((xself).xpasswd)))) ((((unsupported)) ((xuser)) ((xpasswd)))))
                                    (((unsupported)) ((((unsupported)) (((xself).xhost)) (((xself).xport)))) ((((unsupported)) ((xhost)) ((xport)))))
                                    (((unsupported)) (((xself).xdirs)) ((xdirs)))
                                    (((unsupported)) (((xself).xftpwrapper)) ((((xMockFTPWrapper)) (((xself).xdata)))))
                                    (((unsupported)) (((xself).xftpwrapper)))
                        (((unsupported)) 0)
                        xdata.write "rheum rhaponicum"
                        xh.write (((xNullFTPHandler)) ((xdata)))
                        (((unsupported)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        (((unsupported)) ((((unsupported)) ((xurl)) ((xhost)) ((xport)) ((xuser)) ((xpasswd)) ((xtype_)) ((xdirs)) ((xfilename)) ((xmimetype)))) ((((unsupported)) ((((unsupported)) ("ftp://localhost/foo/bar/baz.html") ("localhost") (((xftplib).xFTP_PORT)) ("") ("") ("I") ((((unsupported)) ("foo") ("bar"))) ("baz.html") ("text/html"))) ((((unsupported)) ("ftp://parrot@localhost/foo/bar/baz.html") ("localhost") (((xftplib).xFTP_PORT)) ("parrot") ("") ("I") ((((unsupported)) ("foo") ("bar"))) ("baz.html") ("text/html"))) ((((unsupported)) ("ftp://%25parrot@localhost/foo/bar/baz.html") ("localhost") (((xftplib).xFTP_PORT)) ("%parrot") ("") ("I") ((((unsupported)) ("foo") ("bar"))) ("baz.html") ("text/html"))) ((((unsupported)) ("ftp://%2542parrot@localhost/foo/bar/baz.html") ("localhost") (((xftplib).xFTP_PORT)) ("%42parrot") ("") ("I") ((((unsupported)) ("foo") ("bar"))) ("baz.html") ("text/html"))) ((((unsupported)) ("ftp://localhost:80/foo/bar/") ("localhost") (80) ("") ("") ("D") ((((unsupported)) ("foo") ("bar"))) ("") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("ftp://localhost/baz.gif;type=a") ("localhost") (((xftplib).xFTP_PORT)) ("") ("") ("A") ((((unsupported)) 0)) ("baz.gif") ("None: is there a None literal in the EO language?"))))))
                          seq
                            xreq.write (((xRequest)) ((xurl)))
                            (((unsupported)) (((xreq).xtimeout)) ("None: is there a None literal in the EO language?"))
                            xr.write ((((xh).xftp_open)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xuser)) ((xuser)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xpasswd)) ((xpasswd)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xhost)) (((((xsocket).xgethostbyname)) ((xhost)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xport)) ((xport)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xh).xdirs)) ((xdirs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xh).xftpwrapper).xfilename)) ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xh).xftpwrapper).xfiletype)) ((xtype_)))
                            xheaders.write ((((xr).xinfo)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xheaders).xget)) ("Content-type"))) ((xmimetype)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((unsupported)) ((xheaders)) ("Content-length"))))) ((((xlen)) ((xdata)))))
                xtest_file.write
                  [xself]
                    memory > xlocaladdr
                    memory > xheaders
                    memory > xdata
                    memory > xo
                    memory > xreq
                    memory > xurlpath
                    memory > xh
                    memory > xmodified
                    memory > xstats
                    memory > xf
                    memory > xr
                    memory > xtowrite
                    memory > xTESTFN
                    memory > xurls
                    memory > xrespurl
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xh.write (((((xurllib).xrequest).xFileHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xTESTFN.write ((xsupport).xTESTFN)
                        xurlpath.write (((xsanepathname2url)) ((((((xos).xpath).xabspath)) ((xTESTFN)))))
                        xtowrite.write "hello, worldn"
                        xurls.write (((unsupported)) (("file://localhost%s".mod (xurlpath))) (("file://%s".mod (xurlpath))) (("file://%s%s".mod (((unsupported)) (((((xsocket).xgethostbyname)) ("localhost"))) ((xurlpath))))))
                        (((unsupported)) (((xsocket).xgaierror)))
                          xlocaladdr.write ((((xsocket).xgethostbyname)) (((((xsocket).xgethostname)) 0)))
                          xlocaladdr.write ""
                        (xlocaladdr).if
                          bogusForceDataize.write ((((xurls).xappend)) (("file://%s%s".mod (((unsupported)) ((xlocaladdr)) ((xurlpath))))))
                        (((unsupported)) ((xurl)) ((xurls)))
                          seq
                            xf.write (((xopen)) ((xTESTFN)) ("wb"))
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((xf).xwrite)) ((xtowrite)))
                                  bogusForceDataize.write ((((xf).xclose)) 0)
                                xr.write ((((xh).xfile_open)) ((((xRequest)) ((xurl)))))
                                (((unsupported)) 0)
                                  seq
                                    xdata.write ((((xr).xread)) 0)
                                    xheaders.write ((((xr).xinfo)) 0)
                                    xrespurl.write ((((xr).xgeturl)) 0)
                                  bogusForceDataize.write ((((xr).xclose)) 0)
                                xstats.write ((((xos).xstat)) ((xTESTFN)))
                                xmodified.write (((unsupported)) ((((xemail).xutils).xformatdate)) (((xstats).xst_mtime)) (TRUE))
                              bogusForceDataize.write ((((xos).xremove)) ((xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xtowrite)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xheaders)) ("Content-type"))) ("text/plain"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xheaders)) ("Content-length"))) ("13"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xheaders)) ("Last-modified"))) ((xmodified)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xrespurl)) ((xurl)))
                        (((unsupported)) ((xurl)) ((((unsupported)) (("file://localhost:80%s".mod (xurlpath))) ("file:///file_does_not_exist.txt") ("file://not-a-local-host.com//dir/file.txt") (("file://%s:80%s/%s".mod (((unsupported)) (((((xsocket).xgethostbyname)) ("localhost"))) (((((xos).xgetcwd)) 0)) ((xTESTFN))))) (("file://somerandomhost.ontheinternet.com%s/%s".mod (((unsupported)) (((((xos).xgetcwd)) 0)) ((xTESTFN))))))))
                          (((unsupported)) 0)
                            seq
                              xf.write (((xopen)) ((xTESTFN)) ("wb"))
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xf).xwrite)) ((xtowrite)))
                                bogusForceDataize.write ((((xf).xclose)) 0)
                              bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)) (((xh).xfile_open)) ((((xRequest)) ((xurl)))))
                            bogusForceDataize.write ((((xos).xremove)) ((xTESTFN)))
                        xh.write (((((xurllib).xrequest).xFileHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        (((unsupported)) ((((unsupported)) ((xurl)) ((xftp)))) ((((unsupported)) ((((unsupported)) ("file://ftp.example.com//foo.txt") (FALSE))) ((((unsupported)) ("file://ftp.example.com///foo.txt") (FALSE))) ((((unsupported)) ("file://ftp.example.com/foo.txt") (FALSE))) ((((unsupported)) ("file://somehost//foo/something.txt") (FALSE))) ((((unsupported)) ("file://localhost//foo/something.txt") (FALSE))))))
                          seq
                            xreq.write (((xRequest)) ((xurl)))
                            (((unsupported)) ((((xurllib).xerror).xURLError)))
                              bogusForceDataize.write ((((xh).xfile_open)) ((xreq)))
                              bogusForceDataize.write ((((xself).xassertFalse)) ((xftp)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIs)) (((xo).xreq)) ((xreq)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xtype)) ("ftp"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xreq).xtype).eq "ftp")) ((xftp)))
                xtest_http.write
                  [xself]
                    memory > xo
                    memory > xreq
                    memory > xr
                    memory > xhdrs
                    memory > xhttp
                    memory > xh
                    memory > xnewreq
                    memory > xurl
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xurl.write "http://example.com/"
                        (((unsupported)) ((((unsupported)) ((xmethod)) ((xdata)))) ((((unsupported)) ((((unsupported)) ("GET") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("POST") ("blah"))))))
                          seq
                            xreq.write (((xRequest)) ((xurl)) ((xdata)) ((((unsupported)) ("Foo") ("bar"))))
                            (((unsupported)) (((xreq).xtimeout)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Spam") ("eggs"))
                            xhttp.write (((xMockHTTPClass)) 0)
                            xr.write ((((xh).xdo_open)) ((xhttp)) ((xreq)))
                            seq
                              unsupported
                              unsupported
                            seq
                              unsupported
                              unsupported
                            (((unsupported)) (((xr).xcode)) ((((xr).xmsg).eq 200)) ("OK"))
                            xhdrs.write ((((xr).xinfo)) 0)
                            seq
                              unsupported
                              unsupported
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xgeturl)) 0)) ((xurl)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xhost)) ("example.com"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xlevel)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xmethod)) ((xmethod)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xselector)) ("/"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xreq_headers)) ((((unsupported)) ((((unsupported)) ("Connection") ("close"))) ((((unsupported)) ("Foo") ("bar"))) ((((unsupported)) ("Spam") ("eggs"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xhttp).xdata)) ((xdata)))
                        (((unsupported)) (((xhttp).xraise_on_endheaders)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)) (((xh).xdo_open)) ((xhttp)) ((xreq)))
                        xreq.write (((xRequest)) ("http://example.com/") ("badpost"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xh).xdo_request_)) ((xreq)))
                        (((unsupported)) (((xo).xaddheaders)) ((((unsupported)) ((((unsupported)) ("Spam") ("eggs"))))))
                        (((unsupported)) ((xdata)) ((((unsupported)) ("") ("None: is there a None literal in the EO language?"))))
                          seq
                            xreq.write (((xRequest)) ("http://example.com/") ((xdata)))
                            xr.write (((xMockResponse)) (200) ("OK") ((((unsupported)) 0)) (""))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            (((unsupported)) ((xdata)) ("None: is there a None literal in the EO language?")).if
                              seq
                                bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-length") (((xreq).xunredirected_hdrs)))
                                bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-type") (((xreq).xunredirected_hdrs)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Content-length"))) ("0"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Content-type"))) ("application/x-www-form-urlencoded"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Host"))) ("example.com"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Spam"))) ("eggs"))
                            bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Content-length") ("foo"))
                            bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Content-type") ("bar"))
                            bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Host") ("baz"))
                            bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Spam") ("foo"))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Content-length"))) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Content-type"))) ("bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Host"))) ("baz"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xreq).xunredirected_hdrs)) ("Spam"))) ("foo"))
                xtest_http_body_file.write
                  [xself]
                    memory > xfile_path
                    memory > xo
                    memory > xreq
                    memory > xfile_obj
                    memory > xte
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xfile_obj.write (((unsupported)) (((xtempfile).xNamedTemporaryFile)) ("w+b") (FALSE))
                        xfile_path.write ((xfile_obj).xname)
                        bogusForceDataize.write ((((xfile_obj).xclose)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xunlink)) ((xfile_path)))
                        (((unsupported)) ((((xopen)) ((xfile_path)) ("rb"))) ((xf)))
                          seq
                            xreq.write (((xRequest)) ("http://example.com/") ((xf)) ((((unsupported)) 0)))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            xte.write ((((xnewreq).xget_header)) ("Transfer-encoding"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xte)) ("chunked"))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xnewreq).xhas_header)) ("Content-length"))))
                        (((unsupported)) ((((xopen)) ((xfile_path)) ("rb"))) ((xf)))
                          seq
                            xreq.write (((xRequest)) ("http://example.com/") ((xf)) ((((unsupported)) ("Content-Length") (30))))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xnewreq).xget_header)) ("Content-length"))))) (30))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xnewreq).xhas_header)) ("Transfer-encoding"))))
                xtest_http_body_fileobj.write
                  [xself]
                    memory > xheaders
                    memory > xo
                    memory > xreq
                    memory > xfile_obj
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xfile_obj.write ((((xio).xBytesIO)) 0)
                        xreq.write (((xRequest)) ("http://example.com/") ((xfile_obj)) ((((unsupported)) 0)))
                        xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewreq).xget_header)) ("Transfer-encoding"))) ("chunked"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xnewreq).xhas_header)) ("Content-length"))))
                        xheaders.write (((unsupported)) ("Content-Length") (30))
                        xreq.write (((xRequest)) ("http://example.com/") ((xfile_obj)) ((xheaders)))
                        xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xnewreq).xget_header)) ("Content-length"))))) (30))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xnewreq).xhas_header)) ("Transfer-encoding"))))
                        bogusForceDataize.write ((((xfile_obj).xclose)) 0)
                xtest_http_body_pipe.write
                  [xself]
                    memory > xo
                    memory > xreq
                    memory > xcmd
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xcmd.write (((unsupported)) (((xsys).xexecutable)) ("-c") ("pass"))
                        (((unsupported)) ((xheaders)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("Content-Length") (30))))))
                          (((unsupported)) ((((unsupported)) (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)))) ((xproc)))
                            seq
                              xreq.write (((xRequest)) ("http://example.com/") (((xproc).xstdout)) ((xheaders)))
                              xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                              ((xheaders).not).if
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewreq).xget_header)) ("Content-length"))) ("None: is there a None literal in the EO language?"))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewreq).xget_header)) ("Transfer-encoding"))) ("chunked"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xnewreq).xget_header)) ("Content-length"))))) (30))
                xtest_http_body_iterable.write
                  [xself]
                    memory > xo
                    memory > xreq
                    memory > xiterable_body
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xiterable_body.write
                          []
                            seq > @
                              (((unsupported)) ("one"))
                        (((unsupported)) ((xheaders)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("Content-Length") (11))))))
                          seq
                            xreq.write (((xRequest)) ("http://example.com/") ((((xiterable_body)) 0)) ((xheaders)))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            ((xheaders).not).if
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewreq).xget_header)) ("Content-length"))) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xnewreq).xget_header)) ("Transfer-encoding"))) ("chunked"))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xnewreq).xget_header)) ("Content-length"))))) (11))
                xtest_http_body_empty_seq.write
                  [xself]
                    memory > xreq
                    memory > xh
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xreq.write ((((xh).xdo_request_)) ((((xRequest)) ("http://example.com/") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xget_header)) ("Transfer-encoding"))) ("chunked"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xreq).xhas_header)) ("Content-length"))))
                xtest_http_body_array.write
                  [xself]
                    memory > xiterable_array
                    memory > xo
                    memory > xreq
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xiterable_array.write ((((xarray).xarray)) ("I") ((((unsupported)) (1) (2) (3) (4))))
                        (((unsupported)) ((xheaders)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("Content-Length") (16))))))
                          seq
                            xreq.write (((xRequest)) ("http://example.com/") ((xiterable_array)) ((xheaders)))
                            xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((((xnewreq).xget_header)) ("Content-length"))))) (16))
                xtest_http_handler_debuglevel.write
                  [xself]
                    memory > xo
                    memory > xh
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xh.write (((unsupported)) ((xMockHTTPSHandler)) (1))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xh)))
                        bogusForceDataize.write ((((xo).xopen)) ("https://www.example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xh).x_debuglevel)) (1))
                xtest_http_doubleslash.write
                  [xself]
                    memory > xdata
                    memory > xnp_ds_req
                    memory > xh
                    memory > xp_ds_req
                    memory > xds_urls
                    memory > xds_req
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xdata.write ""
                        xds_urls.write (((unsupported)) ("http://example.com/foo/bar/baz.html") ("http://example.com//foo/bar/baz.html") ("http://example.com/foo//bar/baz.html") ("http://example.com/foo/bar//baz.html"))
                        (((unsupported)) ((xds_url)) ((xds_urls)))
                          seq
                            xds_req.write (((xRequest)) ((xds_url)) ((xdata)))
                            xnp_ds_req.write ((((xh).xdo_request_)) ((xds_req)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xnp_ds_req).xunredirected_hdrs)) ("Host"))) ("example.com"))
                            bogusForceDataize.write ((((xds_req).xset_proxy)) ("someproxy:3128") ("None: is there a None literal in the EO language?"))
                            xp_ds_req.write ((((xh).xdo_request_)) ((xds_req)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xp_ds_req).xunredirected_hdrs)) ("Host"))) ("example.com"))
                xtest_full_url_setter.write
                  [xself]
                    memory > xr
                    memory > xparsed
                    memory > xurls
                    seq > @
                      seq
                        xurls.write (((unsupported)) ("http://example.com?foo=bar#baz") ("http://example.com?foo=bar&spam=eggs#bash") ("http://example.com"))
                        xr.write (((xRequest)) ("http://example.com"))
                        (((unsupported)) ((xurl)) ((xurls)))
                          seq
                            (((unsupported)) (((xr).xfull_url)) ((xurl)))
                            xparsed.write (((xurlparse)) ((xurl)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xr).xget_full_url)) 0)) ((xurl)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xr).xfragment).or "")) (((xparsed).xfragment)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xurlparse)) (((((xr).xget_full_url)) 0))).xquery)) (((xparsed).xquery)))
                xtest_full_url_deleter.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xRequest)) ("http://www.example.com"))
                        (((unsupported)) ((((unsupported)) (((xr).xfull_url)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xr).xfull_url)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xr).xfragment)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xr).xselector)) (""))
                xtest_fixpath_in_weirdurls.write
                  [xself]
                    memory > xweird_url
                    memory > xreq
                    memory > xurl_without_path
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        (((unsupported)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xweird_url.write "http://www.python.org?getspam"
                        xreq.write (((xRequest)) ((xweird_url)))
                        xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnewreq).xhost)) ("www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnewreq).xselector)) ("/?getspam"))
                        xurl_without_path.write "http://www.python.org"
                        xreq.write (((xRequest)) ((xurl_without_path)))
                        xnewreq.write ((((xh).xdo_request_)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnewreq).xhost)) ("www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnewreq).xselector)) (""))
                xtest_errors.write
                  [xself]
                    memory > xo
                    memory > xreq
                    memory > xr
                    memory > xnewr
                    memory > xh
                    memory > xurl
                    seq > @
                      seq
                        xh.write (((((xurllib).xrequest).xHTTPErrorProcessor)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xurl.write "http://example.com/"
                        xreq.write (((xRequest)) ((xurl)))
                        xr.write (((xMockResponse)) (200) ("OK") ((((unsupported)) 0)) ("") ((xurl)))
                        xnewr.write ((((xh).xhttp_response)) ((xreq)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xr)) ((xnewr)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xo)) ("proto"))))
                        xr.write (((xMockResponse)) (202) ("Accepted") ((((unsupported)) 0)) ("") ((xurl)))
                        xnewr.write ((((xh).xhttp_response)) ((xreq)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xr)) ((xnewr)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xo)) ("proto"))))
                        xr.write (((xMockResponse)) (206) ("Partial content") ((((unsupported)) 0)) ("") ((xurl)))
                        xnewr.write ((((xh).xhttp_response)) ((xreq)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xr)) ((xnewr)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xo)) ("proto"))))
                        xr.write (((xMockResponse)) (502) ("Bad gateway") ((((unsupported)) 0)) ("") ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xh).xhttp_response)) ((xreq)) ((xr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xo).xproto)) ("http"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xo).xargs)) ((((unsupported)) ((xreq)) ((xr)) (502) ("Bad gateway") ((((unsupported)) 0)))))
                xtest_cookies.write
                  [xself]
                    memory > xreq
                    memory > xr
                    memory > xcj
                    memory > xnewr
                    memory > xh
                    memory > xnewreq
                    seq > @
                      seq
                        xcj.write (((xMockCookieJar)) 0)
                        xh.write (((((xurllib).xrequest).xHTTPCookieProcessor)) ((xcj)))
                        (((unsupported)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xreq.write (((xRequest)) ("http://example.com/"))
                        xr.write (((xMockResponse)) (200) ("OK") ((((unsupported)) 0)) (""))
                        xnewreq.write ((((xh).xhttp_request)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcj).xach_req)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcj).xach_req)) ((xnewreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xorigin_req_host)) ("example.com"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xreq).xunverifiable)))
                        xnewr.write ((((xh).xhttp_response)) ((xreq)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcj).xec_req)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcj).xec_r)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xr)) ((xnewr)))
                xtest_redirect.write
                  [xself]
                    memory > xheaders
                    memory > xcount
                    memory > xo
                    memory > xreq
                    memory > xh
                    memory > xfrom_url
                    memory > xto_url
                    memory > xredirect
                    memory > xmethod
                    seq > @
                      seq
                        xfrom_url.write "http://example.com/a.html"
                        xto_url.write "http://example.com/b.html"
                        xh.write (((((xurllib).xrequest).xHTTPRedirectHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        (((unsupported)) ((xcode)) ((((unsupported)) (301) (302) (303) (307))))
                          (((unsupported)) ((xdata)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("blahnblahn"))))
                            seq
                              xmethod.write (((xgetattr)) ((xh)) (("http_error_%s".mod (xcode))))
                              xreq.write (((xRequest)) ((xfrom_url)) ((xdata)))
                              (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                              bogusForceDataize.write ((((xreq).xadd_header)) ("Nonsense") ("viking=withhold"))
                              (((unsupported)) ((xdata)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xreq).xadd_header)) ("Content-Length") ((((xstr)) ((((xlen)) ((xdata)))))))
                              bogusForceDataize.write ((((xreq).xadd_unredirected_header)) ("Spam") ("spam"))
                              (((unsupported)) ((((xurllib).xerror).xHTTPError)))
                                bogusForceDataize.write (((xmethod)) ((xreq)) ((((xMockFile)) 0)) ((xcode)) ("Blah") ((((xMockHeaders)) ((((unsupported)) ("location") ((xto_url)))))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xcode)) (307))
                                  bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xdata)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((((xo).xreq).xget_full_url)) 0)) ((xto_url)))
                              (((unsupported)) ((xAttributeError)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((((xo).xreq).xget_method)) 0)) ("GET"))
                                bogusForceDataize.write ((((xself).xassertFalse)) ((((xo).xreq).xdata)))
                              xheaders.write (((unsupported)) (((((xx).xlower)) 0)) ((xx)) ((((xo).xreq).xheaders)))
                              bogusForceDataize.write ((((xself).xassertNotIn)) ("content-length") ((xheaders)))
                              bogusForceDataize.write ((((xself).xassertNotIn)) ("content-type") ((xheaders)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xo).xreq).xheaders)) ("Nonsense"))) ("viking=withhold"))
                              bogusForceDataize.write ((((xself).xassertNotIn)) ("Spam") ((((xo).xreq).xheaders)))
                              bogusForceDataize.write ((((xself).xassertNotIn)) ("Spam") ((((xo).xreq).xunredirected_hdrs)))
                        xreq.write (((xRequest)) ((xfrom_url)))
                        (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                        xredirect.write
                          [xh xreq xurl]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xh).xhttp_error_302)) ((xreq)) ((((xMockFile)) 0)) (302) ("Blah") ((((xMockHeaders)) ((((unsupported)) ("location") ((xurl)))))))
                        xreq.write (((unsupported)) ((xRequest)) ((xfrom_url)) ("example.com"))
                        xcount.write 0
                        (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                        (((unsupported)) ((((xurllib).xerror).xHTTPError)))
                          while.
                            1
                            [unused]
                              seq > @
                                seq
                                  bogusForceDataize.write (((xredirect)) ((xh)) ((xreq)) ("http://example.com/"))
                                  xcount.write ((xcount).add 1)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xcount)) (((((xurllib).xrequest).xHTTPRedirectHandler).xmax_repeats)))
                        xreq.write (((unsupported)) ((xRequest)) ((xfrom_url)) ("example.com"))
                        xcount.write 0
                        (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                        (((unsupported)) ((((xurllib).xerror).xHTTPError)))
                          while.
                            1
                            [unused]
                              seq > @
                                seq
                                  bogusForceDataize.write (((xredirect)) ((xh)) ((xreq)) (("http://example.com/%d".mod (xcount))))
                                  xcount.write ((xcount).add 1)
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xcount)) (((((xurllib).xrequest).xHTTPRedirectHandler).xmax_redirections)))
                xtest_invalid_redirect.write
                  [xself]
                    memory > xvalid_url
                    memory > xreq
                    memory > xh
                    memory > xfrom_url
                    memory > xinvalid_url
                    memory > xvalid_schemes
                    memory > xinvalid_schemes
                    memory > xschemeless_url
                    memory > xo
                    seq > @
                      seq
                        xfrom_url.write "http://example.com/a.html"
                        xvalid_schemes.write (((unsupported)) ("http") ("https") ("ftp"))
                        xinvalid_schemes.write (((unsupported)) ("file") ("imap") ("ldap"))
                        xschemeless_url.write "example.com/b.html"
                        xh.write (((((xurllib).xrequest).xHTTPRedirectHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xreq.write (((xRequest)) ((xfrom_url)))
                        (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                        (((unsupported)) ((xscheme)) ((xinvalid_schemes)))
                          seq
                            xinvalid_url.write (((xscheme).add "://").add (xschemeless_url))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xHTTPError)) (((xh).xhttp_error_302)) ((xreq)) ((((xMockFile)) 0)) (302) ("Security Loophole") ((((xMockHeaders)) ((((unsupported)) ("location") ((xinvalid_url)))))))
                        (((unsupported)) ((xscheme)) ((xvalid_schemes)))
                          seq
                            xvalid_url.write (((xscheme).add "://").add (xschemeless_url))
                            bogusForceDataize.write ((((xh).xhttp_error_302)) ((xreq)) ((((xMockFile)) 0)) (302) ("That's fine") ((((xMockHeaders)) ((((unsupported)) ("location") ((xvalid_url)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((xo).xreq).xget_full_url)) 0)) ((xvalid_url)))
                xtest_relative_redirect.write
                  [xself]
                    memory > xrelative_url
                    memory > xvalid_url
                    memory > xo
                    memory > xreq
                    memory > xh
                    memory > xfrom_url
                    seq > @
                      seq
                        xfrom_url.write "http://example.com/a.html"
                        xrelative_url.write "/b.html"
                        xh.write (((((xurllib).xrequest).xHTTPRedirectHandler)) 0)
                        (((unsupported)) ((xo)) (((xh).xparent)) ((((xMockOpener)) 0)))
                        xreq.write (((xRequest)) ((xfrom_url)))
                        (((unsupported)) (((xreq).xtimeout)) (((xsocket).x_GLOBAL_DEFAULT_TIMEOUT)))
                        xvalid_url.write (((((xurllib).xparse).xurljoin)) ((xfrom_url)) ((xrelative_url)))
                        bogusForceDataize.write ((((xh).xhttp_error_302)) ((xreq)) ((((xMockFile)) 0)) (302) ("That's fine") ((((xMockHeaders)) ((((unsupported)) ("location") ((xvalid_url)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xo).xreq).xget_full_url)) 0)) ((xvalid_url)))
                xtest_cookie_redirect.write
                  [xself]
                    memory > xhdeh
                    memory > xo
                    memory > xhrh
                    memory > xcp
                    memory > xhh
                    memory > xcj
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) 0)
                        xcj.write (((xCookieJar)) 0)
                        bogusForceDataize.write (((xinteract_netscape)) ((xcj)) ("http://www.example.com/") ("spam=eggs"))
                        xhh.write (((xMockHTTPHandler)) (302) ("Location: http://www.cracker.com/rnrn"))
                        xhdeh.write (((((xurllib).xrequest).xHTTPDefaultErrorHandler)) 0)
                        xhrh.write (((((xurllib).xrequest).xHTTPRedirectHandler)) 0)
                        xcp.write (((((xurllib).xrequest).xHTTPCookieProcessor)) ((xcj)))
                        xo.write (((xbuild_test_opener)) ((xhh)) ((xhdeh)) ((xhrh)) ((xcp)))
                        bogusForceDataize.write ((((xo).xopen)) ("http://www.example.com/"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xhh).xreq).xhas_header)) ("Cookie"))))
                xtest_redirect_fragment.write
                  [xself]
                    memory > xhdeh
                    memory > xo
                    memory > xhrh
                    memory > xhh
                    memory > xredirected_url
                    memory > xfp
                    seq > @
                      seq
                        xredirected_url.write "http://www.example.com/index.html#OKrnrn"
                        xhh.write (((xMockHTTPHandler)) (302) (("Location: ".add (xredirected_url))))
                        xhdeh.write (((((xurllib).xrequest).xHTTPDefaultErrorHandler)) 0)
                        xhrh.write (((((xurllib).xrequest).xHTTPRedirectHandler)) 0)
                        xo.write (((xbuild_test_opener)) ((xhh)) ((xhdeh)) ((xhrh)))
                        xfp.write ((((xo).xopen)) ("http://www.example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xgeturl)) 0)) (((((xredirected_url).xstrip)) 0)))
                xtest_redirect_no_path.write
                  [xself]
                    memory > xrequest
                    memory > xresponse1
                    memory > xreal_class
                    memory > xurls
                    memory > xfp
                    seq > @
                      seq
                        xreal_class.write (((xhttp).xclient).xHTTPConnection)
                        xresponse1.write "HTTP/1.1 302 FoundrnLocation: ?queryrnrn"
                        (((unsupported)) ((((xhttp).xclient).xHTTPConnection)) (((((xtest_urllib).xfakehttp)) ((xresponse1)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xsetattr)) (((xhttp).xclient)) ("HTTPConnection") ((xreal_class)))
                        xurls.write (((xiter)) ((((unsupported)) ("/path") ("/path?query"))))
                        xrequest.write
                          [xconn xmethod xurl]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xurl)) ((((xnext)) ((xurls)))))
                                bogusForceDataize.write ((((xreal_class).xrequest)) ((xconn)) ((xmethod)) ((xurl)) ((((unsupported)) ((xpos)))) ((((unsupported)) ((xkw)))))
                                (((unsupported)) ((((xconn).x__class__).xfakedata)) ("HTTP/1.1 200 OKrnrnHello!"))
                        (((unsupported)) (((((xhttp).xclient).xHTTPConnection).xrequest)) ((xrequest)))
                        xfp.write (((((xurllib).xrequest).xurlopen)) ("http://python.org/path"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xgeturl)) 0)) ("http://python.org/path?query"))
                xtest_redirect_encoding.write
                  [xself]
                    memory > xexpected
                    memory > xhandler
                    memory > xrequest
                    memory > xhttp_open
                    memory > xresponse
                    memory > xtests
                    memory > xopener
                    seq > @
                      seq
                        (((unsupported)) ((((xurllib).xrequest).xHTTPHandler)))
                          xhttp_open.write
                            [xself xreq]
                              memory > xresult
                              seq > @
                                seq
                                  xresult.write ((((xself).xdo_open)) (((xself).xconnection)) ((xreq)))
                                  (((unsupported)) (((xself).xlast_buf)) ((((xself).xconnection).xbuf)))
                                  (((unsupported)) (((xself).xconnection)) (((((xtest_urllib).xfakehttp)) ("HTTP/1.1 200 OKrnContent-Length: 3rnrn123"))))
                                  (((unsupported)) ((xresult)))
                        xhandler.write (((xHandler)) 0)
                        xopener.write (((((xurllib).xrequest).xbuild_opener)) ((xhandler)))
                        xtests.write (((unsupported)) ((((unsupported)) ("/pxC3xA5-dansk/") ("/p%C3%A5-dansk/"))) ((((unsupported)) ("/spaced%20path/") ("/spaced%20path/"))) ((((unsupported)) ("/spaced path/") ("/spaced%20path/"))) ((((unsupported)) ("/?pxC3xA5-dansk") ("/?p%C3%A5-dansk"))))
                        (((unsupported)) ((((unsupported)) ((xlocation)) ((xresult)))) ((xtests)))
                          (((unsupported)) (((((xself).xsubTest)) ((((xrepr)) ((xlocation)))))))
                            seq
                              (((unsupported)) (((xhandler).xconnection)) (((((xtest_urllib).xfakehttp)) ((("HTTP/1.1 302 RedirectrnLocation: ".add (xlocation)).add "rnrn")))))
                              xresponse.write ((((xopener).xopen)) ("http://example.com/"))
                              xexpected.write (("GET ".add (xresult)).add " ")
                              xrequest.write ((xhandler).xlast_buf)
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xrequest).xstartswith)) ((xexpected)))) ((((xrepr)) ((xrequest)))))
                xtest_proxy.write
                  [xself]
                    memory > xu
                    memory > xhandlers
                    memory > xo
                    memory > xreq
                    memory > xph
                    memory > xmeth_spec
                    seq > @
                      seq
                        xu.write "proxy.example.com:3128"
                        (((unsupported)) ((xd)) ((((unsupported)) ((((unsupported)) ((xdict)) ((xu)))) ((((unsupported)) ((xdict)) ((xu)))))))
                          seq
                            xo.write (((xOpenerDirector)) 0)
                            xph.write (((((xurllib).xrequest).xProxyHandler)) ((xd)))
                            bogusForceDataize.write ((((xo).xadd_handler)) ((xph)))
                            xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("http_open") ("return response"))))))
                            xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                            xreq.write (((xRequest)) ("http://acme.example.com/"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("acme.example.com"))
                            bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ((xu)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("http_open"))))) ((((unsupported)) ((((unsupported)) ((xtup)) ((((unsupported)) (0) (2))))) ((xtup)) (((xo).xcalls)))))
                xtest_proxy_no_proxy.write
                  [xself]
                    memory > xreq
                    memory > xph
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))) ("python.org"))
                        xo.write (((xOpenerDirector)) 0)
                        xph.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ((xdict)) ("proxy.example.com"))))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xph)))
                        xreq.write (((xRequest)) ("http://www.perl.org/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.perl.org"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("proxy.example.com"))
                        xreq.write (((xRequest)) ("http://www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.python.org"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.python.org"))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))))))
                xtest_proxy_no_proxy_all.write
                  [xself]
                    memory > xreq
                    memory > xph
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))) ("*"))
                        xo.write (((xOpenerDirector)) 0)
                        xph.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ((xdict)) ("proxy.example.com"))))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xph)))
                        xreq.write (((xRequest)) ("http://www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.python.org"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.python.org"))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))))))
                xtest_proxy_https.write
                  [xself]
                    memory > xhandlers
                    memory > xo
                    memory > xreq
                    memory > xph
                    memory > xmeth_spec
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xph.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ((xdict)) ("proxy.example.com:3128"))))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xph)))
                        xmeth_spec.write (((unsupported)) ((((unsupported)) ((((unsupported)) ("https_open") ("return response"))))))
                        xhandlers.write (((xadd_ordered_mock_handlers)) ((xo)) ((xmeth_spec)))
                        xreq.write (((xRequest)) ("https://www.example.com/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.example.com"))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("proxy.example.com:3128"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((((unsupported)) ((xhandlers)) (0))) ("https_open"))))) ((((unsupported)) ((((unsupported)) ((xtup)) ((((unsupported)) (0) (2))))) ((xtup)) (((xo).xcalls)))))
                xtest_proxy_https_proxy_authorization.write
                  [xself]
                    memory > xreq
                    memory > xph
                    memory > xo
                    memory > xhttps_handler
                    seq > @
                      seq
                        xo.write (((xOpenerDirector)) 0)
                        xph.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ((xdict)) ("proxy.example.com:3128"))))
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xph)))
                        xhttps_handler.write (((xMockHTTPSHandler)) 0)
                        bogusForceDataize.write ((((xo).xadd_handler)) ((xhttps_handler)))
                        xreq.write (((xRequest)) ("https://www.example.com/"))
                        bogusForceDataize.write ((((xreq).xadd_header)) ("Proxy-Authorization") ("FooBar"))
                        bogusForceDataize.write ((((xreq).xadd_header)) ("User-Agent") ("Grail"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("www.example.com"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xreq).x_tunnel_host)))
                        bogusForceDataize.write ((((xo).xopen)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) ("Proxy-Authorization") ("FooBar"))) ((((xhttps_handler).xhttpconn).xreq_headers)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ("User-Agent") ("Grail"))) ((((xhttps_handler).xhttpconn).xreq_headers)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) (((xreq).x_tunnel_host)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xreq).xhost)) ("proxy.example.com:3128"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xget_header)) ("Proxy-authorization"))) ("FooBar"))
                xtest_osx_proxy_bypass.write
                  [xself]
                    memory > xbypass
                    memory > xhost
                    seq > @
                      (((unsupported)) 0)
                        xbypass.write (((unsupported)) ("exclude_simple") (FALSE) ("exceptions") ((((unsupported)) ("foo.bar") ("*.bar.com") ("127.0.0.1") ("10.10") ("10.0/16"))))
                        (((unsupported)) ((xhost)) ((((unsupported)) ("foo.bar") ("www.bar.com") ("127.0.0.1") ("10.10.0.1") ("10.0.0.1"))))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((x_proxy_bypass_macosx_sysconf)) ((xhost)) ((xbypass)))) (("expected bypass of %s to be True".mod (xhost))))
                        (((unsupported)) ((xhost)) ((((unsupported)) ("abc.foo.bar") ("bar.com") ("127.0.0.2") ("10.11.0.1") ("notinbypass"))))
                          bogusForceDataize.write ((((xself).xassertFalse)) ((((x_proxy_bypass_macosx_sysconf)) ((xhost)) ((xbypass)))) (("expected bypass of %s to be False".mod (xhost))))
                        xbypass.write (((unsupported)) ("exclude_simple") (TRUE) ("exceptions") ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((x_proxy_bypass_macosx_sysconf)) ("test") ((xbypass)))))
                        xbypass.write (((unsupported)) ("exclude_simple") (FALSE) ("exceptions") ((((unsupported)) ("10.0.0.0/40") ("172.19.10.0/24"))))
                        xhost.write "172.19.10.5"
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((x_proxy_bypass_macosx_sysconf)) ((xhost)) ((xbypass)))) (("expected bypass of %s to be True".mod (xhost))))
                        xhost.write "10.0.1.5"
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((x_proxy_bypass_macosx_sysconf)) ((xhost)) ((xbypass)))) (("expected bypass of %s to be False".mod (xhost))))
                xcheck_basic_auth.write
                  [xself xheaders xrealm]
                    memory > xauth_handler
                    memory > xhttp_handler
                    memory > xbody
                    memory > xpassword_manager
                    memory > xopener
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xrealm)) ((xheaders)))))
                        seq
                          xopener.write (((xOpenerDirector)) 0)
                          xpassword_manager.write (((xMockPasswordManager)) 0)
                          xauth_handler.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)) ((xpassword_manager)))
                          xbody.write (((("rn".xjoin)) ((xheaders))).add "rnrn")
                          xhttp_handler.write (((xMockHTTPHandler)) (401) ((xbody)))
                          bogusForceDataize.write ((((xopener).xadd_handler)) ((xauth_handler)))
                          bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                          bogusForceDataize.write ((((xself).x_test_basic_auth)) ((xopener)) ((xauth_handler)) ("Authorization") ((xrealm)) ((xhttp_handler)) ((xpassword_manager)) ("http://acme.example.com/protected") ("http://acme.example.com/protected"))
                xtest_basic_auth.write
                  [xself]
                    memory > xheaders
                    memory > xother_no_realm
                    memory > xbasic
                    memory > xrealm2
                    memory > xrealm
                    memory > xdigest
                    memory > xbasic2
                    seq > @
                      seq
                        xrealm.write "realm2@example.com"
                        xrealm2.write "realm2@example.com"
                        xbasic.write "Basic realm=\"{realm}\""
                        xbasic2.write "Basic realm=\"{realm2}\""
                        xother_no_realm.write "Otherscheme xxx"
                        xdigest.write "Digest realm=\"{realm2}\", qop=\"auth, auth-int\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\""
                        (((unsupported)) ((xrealm_str)) ((((unsupported)) ("Basic realm=\"{realm}\"") ("Basic realm='{realm}'") ("Basic realm=\"{realm}\", charset=\"UTF-8\"") ("{basic}, {basic2}") ("{basic}, {other_no_realm}") ("{other_no_realm}, {basic}") ("{basic}, {digest}") ("{digest}, {basic}"))))
                          seq
                            xheaders.write (((unsupported)) ("WWW-Authenticate: {realm_str}"))
                            bogusForceDataize.write ((((xself).xcheck_basic_auth)) ((xheaders)) ((xrealm)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("Basic Auth Realm was unquoted") ((xUserWarning)))))))
                          seq
                            xheaders.write (((unsupported)) ("WWW-Authenticate: Basic realm={realm}"))
                            bogusForceDataize.write ((((xself).xcheck_basic_auth)) ((xheaders)) ((xrealm)))
                        (((unsupported)) ((xchallenges)) ((((unsupported)) ((((unsupported)) ((xbasic)) ((xbasic2)))) ((((unsupported)) ((xbasic)) ((xdigest)))) ((((unsupported)) ((xdigest)) ((xbasic)))))))
                          seq
                            xheaders.write (((unsupported)) ("WWW-Authenticate: {challenge}") ((xchallenge)) ((xchallenges)))
                            bogusForceDataize.write ((((xself).xcheck_basic_auth)) ((xheaders)) ((xrealm)))
                xtest_proxy_basic_auth.write
                  [xself]
                    memory > xauth_handler
                    memory > xph
                    memory > xhttp_handler
                    memory > xpassword_manager
                    memory > xrealm
                    memory > xopener
                    seq > @
                      seq
                        xopener.write (((xOpenerDirector)) 0)
                        xph.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ((xdict)) ("proxy.example.com:3128"))))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xph)))
                        xpassword_manager.write (((xMockPasswordManager)) 0)
                        xauth_handler.write (((((xurllib).xrequest).xProxyBasicAuthHandler)) ((xpassword_manager)))
                        xrealm.write "ACME Networks"
                        xhttp_handler.write (((xMockHTTPHandler)) (407) (("Proxy-Authenticate: Basic realm=\"%s\"rnrn".mod (xrealm))))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xauth_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xself).x_test_basic_auth)) ((xopener)) ((xauth_handler)) ("Proxy-authorization") ((xrealm)) ((xhttp_handler)) ((xpassword_manager)) ("http://acme.example.com:3128/protected") ("proxy.example.com:3128"))
                xtest_basic_and_digest_auth_handlers.write
                  [xself]
                    memory > xdigest_handler
                    memory > xrecord
                    memory > xhttp_handler
                    memory > xpassword_manager
                    memory > xrealm
                    memory > x__init__
                    memory > xbasic_handler
                    memory > xhttp_error_401
                    memory > xopener
                    seq > @
                      seq
                        (((unsupported)) ((xOpenerDirector)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xOpenerDirector).x__init__)) ((xself)))
                                    (((unsupported)) (((xself).xrecorded)) ((((unsupported)) 0)))
                            xrecord.write
                              [xself xinfo]
                                seq > @
                                  bogusForceDataize.write (((((xself).xrecorded).xappend)) ((xinfo)))
                        (((unsupported)) ((((xurllib).xrequest).xHTTPDigestAuthHandler)))
                          xhttp_error_401.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write (((((xself).xparent).xrecord)) ("digest"))
                                  bogusForceDataize.write ((((((xurllib).xrequest).xHTTPDigestAuthHandler).xhttp_error_401)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwds)))))
                        (((unsupported)) ((((xurllib).xrequest).xHTTPBasicAuthHandler)))
                          xhttp_error_401.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write (((((xself).xparent).xrecord)) ("basic"))
                                  bogusForceDataize.write ((((((xurllib).xrequest).xHTTPBasicAuthHandler).xhttp_error_401)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwds)))))
                        xopener.write (((xRecordingOpenerDirector)) 0)
                        xpassword_manager.write (((xMockPasswordManager)) 0)
                        xdigest_handler.write (((xTestDigestAuthHandler)) ((xpassword_manager)))
                        xbasic_handler.write (((xTestBasicAuthHandler)) ((xpassword_manager)))
                        xrealm.write "ACME Networks"
                        xhttp_handler.write (((xMockHTTPHandler)) (401) (("WWW-Authenticate: Basic realm=\"%s\"rnrn".mod (xrealm))))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xbasic_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xdigest_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xself).x_test_basic_auth)) ((xopener)) ((xbasic_handler)) ("Authorization") ((xrealm)) ((xhttp_handler)) ((xpassword_manager)) ("http://acme.example.com/protected") ("http://acme.example.com/protected"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xopener).xrecorded)) (((((unsupported)) ("digest") ("basic")).mul 2)))
                xtest_unsupported_auth_digest_handler.write
                  [xself]
                    memory > xopener
                    memory > xhttp_handler
                    memory > xdigest_auth_handler
                    seq > @
                      seq
                        xopener.write (((xOpenerDirector)) 0)
                        xdigest_auth_handler.write (((((xurllib).xrequest).xHTTPDigestAuthHandler)) ("None: is there a None literal in the EO language?"))
                        xhttp_handler.write (((xMockHTTPHandler)) (401) ("WWW-Authenticate: Kerberosrnrn"))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xdigest_auth_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xopener).xopen)) ("http://www.example.com"))
                xtest_unsupported_auth_basic_handler.write
                  [xself]
                    memory > xopener
                    memory > xbasic_auth_handler
                    memory > xhttp_handler
                    seq > @
                      seq
                        xopener.write (((xOpenerDirector)) 0)
                        xbasic_auth_handler.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)) ("None: is there a None literal in the EO language?"))
                        xhttp_handler.write (((xMockHTTPHandler)) (401) ("WWW-Authenticate: NTLMrnrn"))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xbasic_auth_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xopener).xopen)) ("http://www.example.com"))
                x_test_basic_auth.write
                  [xself xopener xauth_handler xauth_header xrealm xhttp_handler xpassword_manager xrequest_url xprotected_url]
                    memory > xauth_hdr_value
                    memory > xuserpass
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xuser)) ((xpassword)))) ((((unsupported)) ("wile") ("coyote"))))
                        bogusForceDataize.write ((((xauth_handler).xadd_password)) ((xrealm)) ((xrequest_url)) ((xuser)) ((xpassword)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrealm)) (((xpassword_manager).xrealm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrequest_url)) (((xpassword_manager).xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xuser)) (((xpassword_manager).xuser)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpassword)) (((xpassword_manager).xpassword)))
                        bogusForceDataize.write ((((xopener).xopen)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xpassword_manager).xtarget_realm)) ((xrealm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xpassword_manager).xtarget_url)) ((xprotected_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xhttp_handler).xrequests)))) (2))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((unsupported)) (((xhttp_handler).xrequests)) (0)).xhas_header)) ((xauth_header)))))
                        xuserpass.write (((xbytes)) (("%s:%s".mod (((unsupported)) ((xuser)) ((xpassword))))) ("ascii"))
                        xauth_hdr_value.write ("Basic ".add ((((((((((xbase64).xencodebytes)) ((xuserpass))).xstrip)) 0).xdecode)) 0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) (((xhttp_handler).xrequests)) (1)).xget_header)) ((xauth_header)))) ((xauth_hdr_value)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((unsupported)) (((xhttp_handler).xrequests)) (1)).xunredirected_hdrs)) ((xauth_header)))) ((xauth_hdr_value)))
                        (((unsupported)) (((xpassword_manager).xuser)) (((xpassword_manager).xpassword)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xhttp_handler).xreset)) 0)
                        bogusForceDataize.write ((((xopener).xopen)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xhttp_handler).xrequests)))) (1))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((((unsupported)) (((xhttp_handler).xrequests)) (0)).xhas_header)) ((xauth_header)))))
                xtest_basic_prior_auth_auto_send.write
                  [xself]
                    memory > xrequest_url
                    memory > xpwd_manager
                    memory > xis_auth
                    memory > xhttp_handler
                    memory > xopener
                    memory > xauth_prior_handler
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xuser)) ((xpassword)))) ((((unsupported)) ("wile") ("coyote"))))
                        xrequest_url.write "http://acme.example.com/protected"
                        xhttp_handler.write (((xMockHTTPHandlerCheckAuth)) (200))
                        xpwd_manager.write (((xHTTPPasswordMgrWithPriorAuth)) 0)
                        xauth_prior_handler.write (((xHTTPBasicAuthHandler)) ((xpwd_manager)))
                        (((unsupported)) (((xauth_prior_handler).xadd_password)) ("None: is there a None literal in the EO language?") ((xrequest_url)) ((xuser)) ((xpassword)) (TRUE))
                        xis_auth.write ((((xpwd_manager).xis_authenticated)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xis_auth)))
                        xopener.write (((xOpenerDirector)) 0)
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xauth_prior_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xopener).xopen)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xhttp_handler).xhas_auth_header)))
                xtest_basic_prior_auth_send_after_first_success.write
                  [xself]
                    memory > xrequest_url
                    memory > xpwd_manager
                    memory > xis_auth
                    memory > xhttp_handler
                    memory > xrealm
                    memory > xopener
                    memory > xauth_prior_handler
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xuser)) ((xpassword)))) ((((unsupported)) ("wile") ("coyote"))))
                        xrequest_url.write "http://acme.example.com/protected"
                        xrealm.write "ACME"
                        xpwd_manager.write (((xHTTPPasswordMgrWithPriorAuth)) 0)
                        xauth_prior_handler.write (((xHTTPBasicAuthHandler)) ((xpwd_manager)))
                        bogusForceDataize.write ((((xauth_prior_handler).xadd_password)) ((xrealm)) ((xrequest_url)) ((xuser)) ((xpassword)))
                        xis_auth.write ((((xpwd_manager).xis_authenticated)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xis_auth)))
                        xopener.write (((xOpenerDirector)) 0)
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xauth_prior_handler)))
                        xhttp_handler.write (((xMockHTTPHandler)) (401) (("WWW-Authenticate: Basic realm=\"%s\"rnrn".mod "None: is there a None literal in the EO language?")))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xopener).xopen)) ((xrequest_url)))
                        xis_auth.write ((((xpwd_manager).xis_authenticated)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xis_auth)))
                        xhttp_handler.write (((xMockHTTPHandlerCheckAuth)) (200))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xhttp_handler).xhas_auth_header)))
                        xopener.write (((xOpenerDirector)) 0)
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xauth_prior_handler)))
                        bogusForceDataize.write ((((xopener).xadd_handler)) ((xhttp_handler)))
                        bogusForceDataize.write ((((xopener).xopen)) ((xrequest_url)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xhttp_handler).xhas_auth_header)))
                xtest_http_closed.write
                  [xself]
                    memory > xreq
                    memory > xconn
                    memory > xhandler
                    memory > xheader
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xtransfer)) ((xdata)))) ((((unsupported)) ((((unsupported)) ("Connection: close") ("data"))) ((((unsupported)) ("Transfer-Encoding: chunked") ("4rndatarn0rnrn"))) ((((unsupported)) ("Content-Length: 4") ("data"))))))
                          seq
                            xheader.write ((("HTTP/1.1 200 OKrn{}rnrn".xformat)) ((xtransfer)))
                            xconn.write ((((xtest_urllib).xfakehttp)) ((((((xheader).xencode)) 0).add (xdata))))
                            xhandler.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                            xreq.write (((xRequest)) ("http://dummy/"))
                            (((unsupported)) (((xreq).xtimeout)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)) (((((xhandler).xdo_open)) ((xconn)) ((xreq)))) ((xresp)))
                              bogusForceDataize.write ((((xresp).xread)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xconn).xfakesock).xclosed)) (((("Connection not closed with {!r}".xformat)) ((xtransfer)))))
                xtest_invalid_closed.write
                  [xself]
                    memory > xreq
                    memory > xconn
                    memory > xhandler
                    seq > @
                      seq
                        unsupported
                        xconn.write ((((xtest_urllib).xfakehttp)) (""))
                        xhandler.write (((((xurllib).xrequest).xAbstractHTTPHandler)) 0)
                        xreq.write (((xRequest)) ("http://dummy/"))
                        (((unsupported)) (((xreq).xtimeout)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((((xhttp).xclient).xBadStatusLine)))))
                          bogusForceDataize.write ((((xhandler).xdo_open)) ((xconn)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xconn).xfakesock).xclosed)) ("Connection not closed"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xopener_has_handler.write
                  [xself xopener xhandler_class]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xany)) ((((unsupported)) ((((xh).x__class__).eq (xhandler_class))) ((xh)) (((xopener).xhandlers)))))))
                xtest_build_opener.write
                  [xself]
                    memory > xbar_open
                    memory > xo
                    memory > xfoo_open
                    memory > xbuild_opener
                    seq > @
                      seq
                        (((unsupported)) ((((xurllib).xrequest).xHTTPHandler)))
                        (((unsupported)) ((((xurllib).xrequest).xBaseHandler)))
                          xfoo_open.write
                            [xself]
                              seq > @
                        (((unsupported)) ((((xurllib).xrequest).xBaseHandler)))
                          xbar_open.write
                            [xself]
                              seq > @
                        xbuild_opener.write (((xurllib).xrequest).xbuild_opener)
                        xo.write (((xbuild_opener)) ((xFooHandler)) ((xBarHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xFooHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xBarHandler)))
                        xo.write (((xbuild_opener)) ((xFooHandler)) ((((xBarHandler)) 0)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xFooHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xBarHandler)))
                        xo.write (((xbuild_opener)) ((xMyHTTPHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xMyHTTPHandler)))
                        xo.write (((xbuild_opener)) 0)
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((((xurllib).xrequest).xHTTPHandler)))
                        xo.write (((xbuild_opener)) ((((xurllib).xrequest).xHTTPHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((((xurllib).xrequest).xHTTPHandler)))
                        xo.write (((xbuild_opener)) ((((((xurllib).xrequest).xHTTPHandler)) 0)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((((xurllib).xrequest).xHTTPHandler)))
                        (((unsupported)) ((((xurllib).xrequest).xHTTPHandler)))
                        xo.write (((xbuild_opener)) ((xMyHTTPHandler)) ((xMyOtherHTTPHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xMyHTTPHandler)))
                        bogusForceDataize.write ((((xself).xopener_has_handler)) ((xo)) ((xMyOtherHTTPHandler)))
                xtest_issue16464.write
                  [xself]
                    memory > xopener
                    memory > xrequest
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xsupport).xtransient_internet)) ("http://www.example.com/"))))
                          seq
                            xopener.write (((((xurllib).xrequest).xbuild_opener)) 0)
                            xrequest.write (((((xurllib).xrequest).xRequest)) ("http://www.example.com/"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("None: is there a None literal in the EO language?") (((xrequest).xdata)))
                            bogusForceDataize.write ((((xopener).xopen)) ((xrequest)) (((("1".xencode)) ("us-ascii"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("1") (((xrequest).xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("1") (((((xrequest).xget_header)) ("Content-length"))))
                            bogusForceDataize.write ((((xopener).xopen)) ((xrequest)) (((("1234567890".xencode)) ("us-ascii"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("1234567890") (((xrequest).xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ("10") (((((xrequest).xget_header)) ("Content-length"))))
                xtest_HTTPError_interface.write
                  [xself]
                    memory > xhdrs
                    memory > xurl
                    memory > xmsg
                    memory > xerr
                    memory > xcode
                    memory > xfp
                    memory > xexpected_errmsg
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xmsg.write "something bad happened"
                        (((unsupported)) ((xurl)) ((xcode)) ((xfp)) ("None: is there a None literal in the EO language?"))
                        xhdrs.write "Content-Length: 42"
                        xerr.write (((((xurllib).xerror).xHTTPError)) ((xurl)) ((xcode)) ((xmsg)) ((xhdrs)) ((xfp)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xerr)) ("reason"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xreason)) ("something bad happened"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xerr)) ("headers"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xheaders)) ("Content-Length: 42"))
                        xexpected_errmsg.write ("HTTP Error %s: %s".mod (((unsupported)) (((xerr).xcode)) (((xerr).xmsg))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xerr)))) ((xexpected_errmsg)))
                        xexpected_errmsg.write ("<HTTPError %s: %r>".mod (((unsupported)) (((xerr).xcode)) (((xerr).xmsg))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xerr)))) ((xexpected_errmsg)))
                xtest_parse_proxy.write
                  [xself]
                    memory > xparse_proxy_test_cases
                    seq > @
                      seq
                        xparse_proxy_test_cases.write (((unsupported)) ((((unsupported)) ("proxy.example.com") ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com"))))) ((((unsupported)) ("proxy.example.com:3128") ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com:3128"))))) ((((unsupported)) ("proxy.example.com") ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com"))))) ((((unsupported)) ("proxy.example.com:3128") ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com:3128"))))) ((((unsupported)) ("joe:password@proxy.example.com") ((((unsupported)) ("None: is there a None literal in the EO language?") ("joe") ("password") ("proxy.example.com"))))) ((((unsupported)) ("joe:password@proxy.example.com:3128") ((((unsupported)) ("None: is there a None literal in the EO language?") ("joe") ("password") ("proxy.example.com:3128"))))) ((((unsupported)) ("http://proxy.example.com/") ((((unsupported)) ("http") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com"))))) ((((unsupported)) ("http://proxy.example.com:3128/") ((((unsupported)) ("http") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("proxy.example.com:3128"))))) ((((unsupported)) ("http://joe:password@proxy.example.com/") ((((unsupported)) ("http") ("joe") ("password") ("proxy.example.com"))))) ((((unsupported)) ("http://joe:password@proxy.example.com:3128") ((((unsupported)) ("http") ("joe") ("password") ("proxy.example.com:3128"))))) ((((unsupported)) ("ftp://joe:password@proxy.example.com/rubbish:3128") ((((unsupported)) ("ftp") ("joe") ("password") ("proxy.example.com"))))) ((((unsupported)) ("http://joe:password@proxy.example.com") ((((unsupported)) ("http") ("joe") ("password") ("proxy.example.com"))))) ((((unsupported)) ("http://user/name:password@localhost:22") ((((unsupported)) ("http") ("user/name") ("password") ("localhost:22"))))) ((((unsupported)) ("http://username:pass/word@localhost:22") ((((unsupported)) ("http") ("username") ("pass/word") ("localhost:22"))))) ((((unsupported)) ("http://user/name:pass/word@localhost:22") ((((unsupported)) ("http") ("user/name") ("pass/word") ("localhost:22"))))))
                        (((unsupported)) ((((unsupported)) ((xtc)) ((xexpected)))) ((xparse_proxy_test_cases)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((x_parse_proxy)) ((xtc)))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((x_parse_proxy)) ("file:/ftp.example.com"))
                xtest_unsupported_algorithm.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write (((xAbstractDigestAuthHandler)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xexc)))
                          bogusForceDataize.write ((((xhandler).xget_algorithm_impls)) ("invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xexc).xexception)))) ("Unsupported digest authentication algorithm 'invalid'"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) ((xRequest)))
                  xmethod.write "PUT"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xget)) ((((xRequest)) ("http://www.python.org/~jeremy/"))))
                        (((unsupported)) (((xself).xpost)) ((((unsupported)) ((xRequest)) ("http://www.python.org/~jeremy/") ("data") ((((unsupported)) ("X-Test") ("test"))))))
                        (((unsupported)) (((xself).xhead)) ((((unsupported)) ((xRequest)) ("http://www.python.org/~jeremy/") ("HEAD"))))
                        (((unsupported)) (((xself).xput)) (((((xself).xPutRequest)) ("http://www.python.org/~jeremy/"))))
                        (((unsupported)) (((xself).xforce_post)) ((((unsupported)) (((xself).xPutRequest)) ("http://www.python.org/~jeremy/") ("POST"))))
                xtest_method.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ("POST") ((((((xself).xpost).xget_method)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("GET") ((((((xself).xget).xget_method)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("HEAD") ((((((xself).xhead).xget_method)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("PUT") ((((((xself).xput).xget_method)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("POST") ((((((xself).xforce_post).xget_method)) 0)))
                xtest_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xget).xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("GET") ((((((xself).xget).xget_method)) 0)))
                        (((unsupported)) ((((xself).xget).xdata)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xget).xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("POST") ((((((xself).xget).xget_method)) 0)))
                xtest_setting_data_should_remove_content_length.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-length") ((((xself).xget).xunredirected_hdrs)))
                        bogusForceDataize.write (((((xself).xget).xadd_unredirected_header)) ("Content-length") (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) (42) ((((unsupported)) ((((xself).xget).xunredirected_hdrs)) ("Content-length"))))
                        (((unsupported)) ((((xself).xget).xdata)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-length") ((((xself).xget).xunredirected_hdrs)))
                xtest_deleting_data_should_remove_content_length.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-length") ((((xself).xget).xunredirected_hdrs)))
                        (((unsupported)) ((((xself).xget).xdata)) ("foo"))
                        bogusForceDataize.write (((((xself).xget).xadd_unredirected_header)) ("Content-length") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) ((((unsupported)) ((((xself).xget).xunredirected_hdrs)) ("Content-length"))))
                        (((unsupported)) ((((unsupported)) ((((xself).xget).xdata)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("Content-length") ((((xself).xget).xunredirected_hdrs)))
                xtest_get_full_url.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ("http://www.python.org/~jeremy/") ((((((xself).xget).xget_full_url)) 0)))
                xtest_selector.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ("/~jeremy/") ((((xself).xget).xselector)))
                        xreq.write (((xRequest)) ("http://www.python.org/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("/") (((xreq).xselector)))
                xtest_get_type.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ("http") ((((xself).xget).xtype)))
                xtest_get_host.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ("www.python.org") ((((xself).xget).xhost)))
                xtest_get_host_unquote.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        xreq.write (((xRequest)) ("http://www.%70ython.org/"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("www.python.org") (((xreq).xhost)))
                xtest_proxy.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xget).xhas_proxy)) 0)))
                        bogusForceDataize.write (((((xself).xget).xset_proxy)) ("www.perl.org") ("http"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xget).xhas_proxy)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("www.python.org") ((((xself).xget).xorigin_req_host)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("www.perl.org") ((((xself).xget).xhost)))
                xtest_wrapped_url.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        xreq.write (((xRequest)) ("<URL:http://www.python.org>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("www.python.org") (((xreq).xhost)))
                xtest_url_fragment.write
                  [xself]
                    memory > xreq
                    memory > xurl
                    seq > @
                      seq
                        xreq.write (((xRequest)) ("http://www.python.org/?qs=query#fragment=true"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("/?qs=query") (((xreq).xselector)))
                        xreq.write (((xRequest)) ("http://www.python.org/#fun=true"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("/") (((xreq).xselector)))
                        xurl.write "http://docs.python.org/library/urllib2.html#OK"
                        xreq.write (((xRequest)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xget_full_url)) 0)) ((xurl)))
                xtest_url_fullurl_get_full_url.write
                  [xself]
                    memory > xreq
                    memory > xurls
                    seq > @
                      seq
                        xurls.write (((unsupported)) ("http://docs.python.org") ("http://docs.python.org/library/urllib2.html#OK") ("http://www.python.org/?qs=query#fragment=true"))
                        (((unsupported)) ((xurl)) ((xurls)))
                          seq
                            xreq.write (((xRequest)) ((xurl)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xreq).xget_full_url)) 0)) (((xreq).xfull_url)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)