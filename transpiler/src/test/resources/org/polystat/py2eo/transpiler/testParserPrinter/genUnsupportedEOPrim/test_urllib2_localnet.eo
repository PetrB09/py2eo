memory > xscm
memory > xstr
memory > xemail
memory > xclient_address
memory > xFakeHTTPRequestHandler
memory > xBasicAuthHandler
memory > xpath
memory > xparams
memory > xDeprecationWarning
memory > xkwargs
memory > xcm
memory > xnetloc
memory > xthreading
memory > xheaders
memory > xImportError
memory > xDigestAuthHandler
memory > xheader
memory > xhttp
memory > xindex
memory > xenumerate
memory > xopen_url
memory > xrequest
memory > xProxyAuthTests
memory > xpart
memory > xvalue
memory > xLoopbackHttpServer
memory > xurllib
memory > xresponse_code
memory > xf
memory > xint
memory > xbase64
memory > xhasattr
memory > xbody
memory > xsuper
memory > xLoopbackHttpServerThread
memory > xsupport
memory > xbytes
memory > xquery
memory > xargs
memory > xBasicAuthTests
memory > xos
memory > xhashlib
memory > x__file__
memory > xunittest
memory > xattr
memory > xTestUrlopen
memory > xresult
memory > xFakeProxyHandler
memory > xisinstance
memory > xline
memory > xlen
memory > xdict
memory > xmake_https_server
memory > x__name__
memory > xfragment
[] > test_urllib2_localnet
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_200
        memory > xtest_iteration
        memory > xtest_404
        memory > xtest_https_sni
        memory > xtest_proxy_qop_auth_int_works_or_throws_urlerror
        memory > xUSER_PASSWD
        memory > xsetUp
        memory > xURL
        memory > xtest_basic
        memory > xPASSWD
        memory > xset_qop
        memory > x__init__
        memory > xdo_GET
        memory > xINCORRECT_PASSWD
        memory > xtest_proxy_with_no_password_raises_httperror
        memory > xstop_server
        memory > xtest_sending_headers
        memory > xset_users
        memory > xtest_basic_auth_success
        memory > x_generate_nonce
        memory > xdo_AUTHHEAD
        memory > xCERT_localhost
        memory > xREALM
        memory > xtest_proxy_qop_auth_works
        memory > xlog_message
        memory > xENCODED_AUTH
        memory > xstart_https_server
        memory > xstop
        memory > xhere
        memory > xtearDownModule
        memory > x_return_auth_challenge
        memory > xtest_line_iteration
        memory > xhandle_request
        memory > x_create_auth_dict
        memory > xGetRequestHandler
        memory > xssl
        memory > xtest_https_with_cadefault
        memory > xstart_server
        memory > x_validate_auth
        memory > xtest_redirection
        memory > xrun
        memory > xtest_basic_auth_httperror
        memory > xtest_https
        memory > xtest_200_with_parameters
        memory > xdo_HEAD
        memory > xtest_geturl
        memory > xget_request
        memory > xtest_https_with_cafile
        memory > xset_realm
        memory > xthreads_key
        memory > xtest_proxy_with_bad_password_raises_httperror
        memory > xtearDown
        memory > xtest_chunked
        memory > xUSER
        memory > xCERT_fakehostname
        memory > xsetUpModule
        memory > xtest_info
        memory > xurlopen
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xssl.write "None: is there a None literal in the EO language?"
            xhere.write (((((xos).xpath).xdirname)) ((x__file__)))
            xCERT_localhost.write (((((xos).xpath).xjoin)) ((xhere)) ("keycert.pem"))
            xCERT_fakehostname.write (((((xos).xpath).xjoin)) ((xhere)) ("keycert2.pem"))
            (((unsupported)) ((((xhttp).xserver).xHTTPServer)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xserver_address xRequestHandlerClass]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xhttp).xserver).xHTTPServer).x__init__)) ((xself)) ((xserver_address)) ((xRequestHandlerClass)))
                        bogusForceDataize.write (((((xself).xsocket).xsettimeout)) (0.1))
                xget_request.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) ((xrequest)) ((xclient_address)))) ((((((xself).xsocket).xaccept)) 0)))
                        bogusForceDataize.write ((((xrequest).xsettimeout)) (10.0))
                        (((unsupported)) ((((unsupported)) ((xrequest)) ((xclient_address)))))
            (((unsupported)) (((xthreading).xThread)))
              seq
                unsupported
                x__init__.write
                  [xself xrequest_handler]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)) ((xself)))
                        (((unsupported)) (((xself).x_stop_server)) (FALSE))
                        (((unsupported)) (((xself).xready)) (((((xthreading).xEvent)) 0)))
                        (((unsupported)) (((xrequest_handler).xprotocol_version)) ("HTTP/1.0"))
                        (((unsupported)) (((xself).xhttpd)) ((((xLoopbackHttpServer)) ((((unsupported)) ("127.0.0.1") (0))) ((xrequest_handler)))))
                        (((unsupported)) (((xself).xport)) ((((xself).xhttpd).xserver_port)))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).x_stop_server)) (TRUE))
                        bogusForceDataize.write ((((xself).xjoin)) 0)
                        bogusForceDataize.write (((((xself).xhttpd).xserver_close)) 0)
                xrun.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xready).xset)) 0)
                        while.
                          (((xself).x_stop_server).not)
                          [unused]
                            seq > @
                              bogusForceDataize.write (((((xself).xhttpd).xhandle_request)) 0)
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_request_num)) (0))
                        (((unsupported)) (((xself).x_nonces)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).x_users)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).x_realm_name)) ("Test Realm"))
                        (((unsupported)) (((xself).x_qop)) ("auth"))
                xset_qop.write
                  [xself xqop]
                    seq > @
                      (((unsupported)) (((xself).x_qop)) ((xqop)))
                xset_users.write
                  [xself xusers]
                    seq > @
                      seq
                        (((unsupported)) ((((xisinstance)) ((xusers)) ((xdict)))))
                        (((unsupported)) (((xself).x_users)) ((xusers)))
                xset_realm.write
                  [xself xrealm]
                    seq > @
                      (((unsupported)) (((xself).x_realm_name)) ((xrealm)))
                x_generate_nonce.write
                  [xself]
                    memory > xnonce
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_request_num)) (1))
                        xnonce.write (((((((xhashlib).xmd5)) (((((((xstr)) (((xself).x_request_num))).xencode)) ("ascii")))).xhexdigest)) 0)
                        bogusForceDataize.write (((((xself).x_nonces).xappend)) ((xnonce)))
                        (((unsupported)) ((xnonce)))
                x_create_auth_dict.write
                  [xself xauth_str]
                    memory > xparts
                    memory > xvalue
                    memory > xauth_dict
                    memory > xname
                    memory > xfirst_space_index
                    seq > @
                      seq
                        xfirst_space_index.write ((((xauth_str).xfind)) (" "))
                        xauth_str.write (((unsupported)) ((xauth_str)) ((((unsupported)) (((xfirst_space_index).add 1)))))
                        xparts.write ((((xauth_str).xsplit)) (","))
                        xauth_dict.write (((unsupported)) 0)
                        (((unsupported)) ((xpart)) ((xparts)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xname)) ((xvalue)))) (((((xpart).xsplit)) ("="))))
                            xname.write ((((xname).xstrip)) 0)
                            (((((unsupported)) ((xvalue)) (0)).eq "\"").and ((((unsupported)) ((xvalue)) ((1.neg))).eq "\"")).if
                              xvalue.write (((unsupported)) ((xvalue)) ((((unsupported)) (1) ((1.neg)))))
                              xvalue.write ((((xvalue).xstrip)) 0)
                            (((unsupported)) ((((unsupported)) ((xauth_dict)) ((xname)))) ((xvalue)))
                        (((unsupported)) ((xauth_dict)))
                x_validate_auth.write
                  [xself xauth_dict xpassword xmethod xuri]
                    memory > xHA1_str
                    memory > xresponse_str
                    memory > xfinal_dict
                    memory > xHA2
                    memory > xHA1
                    memory > xresponse
                    memory > xHA2_str
                    seq > @
                      seq
                        xfinal_dict.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xfinal_dict).xupdate)) ((xauth_dict)))
                        (((unsupported)) ((((unsupported)) ((xfinal_dict)) ("password"))) ((xpassword)))
                        (((unsupported)) ((((unsupported)) ((xfinal_dict)) ("method"))) ((xmethod)))
                        (((unsupported)) ((((unsupported)) ((xfinal_dict)) ("uri"))) ((xuri)))
                        xHA1_str.write ("%(username)s:%(realm)s:%(password)s".mod (xfinal_dict))
                        xHA1.write (((((((xhashlib).xmd5)) (((((xHA1_str).xencode)) ("ascii")))).xhexdigest)) 0)
                        xHA2_str.write ("%(method)s:%(uri)s".mod (xfinal_dict))
                        xHA2.write (((((((xhashlib).xmd5)) (((((xHA2_str).xencode)) ("ascii")))).xhexdigest)) 0)
                        (((unsupported)) ((((unsupported)) ((xfinal_dict)) ("HA1"))) ((xHA1)))
                        (((unsupported)) ((((unsupported)) ((xfinal_dict)) ("HA2"))) ((xHA2)))
                        xresponse_str.write ("%(HA1)s:%(nonce)s:%(nc)s:%(cnonce)s:%(qop)s:%(HA2)s".mod (xfinal_dict))
                        xresponse.write (((((((xhashlib).xmd5)) (((((xresponse_str).xencode)) ("ascii")))).xhexdigest)) 0)
                        (((unsupported)) (((xresponse).eq (((unsupported)) ((xauth_dict)) ("response")))))
                x_return_auth_challenge.write
                  [xself xrequest_handler]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xrequest_handler).xsend_response)) (407) ("Proxy Authentication Required"))
                        bogusForceDataize.write ((((xrequest_handler).xsend_header)) ("Content-Type") ("text/html"))
                        bogusForceDataize.write ((((xrequest_handler).xsend_header)) ("Proxy-Authenticate") (("Digest realm=\"%s\", qop=\"%s\",nonce=\"%s\", ".mod (((unsupported)) (((xself).x_realm_name)) (((xself).x_qop)) (((((xself).x_generate_nonce)) 0))))))
                        bogusForceDataize.write ((((xrequest_handler).xend_headers)) 0)
                        bogusForceDataize.write (((((xrequest_handler).xwfile).xwrite)) ("Proxy Authentication Required."))
                        (((unsupported)) (FALSE))
                xhandle_request.write
                  [xself xrequest_handler]
                    memory > xauth_dict
                    memory > xpassword
                    memory > xauth_validated
                    seq > @
                      seq
                        (((unsupported)) 0)
                        ((((xlen)) (((xself).x_users))).eq 0).if
                          (((unsupported)) (TRUE))
                        (((unsupported)) ("Proxy-Authorization") (((xrequest_handler).xheaders))).if
                          (((unsupported)) (((((xself).x_return_auth_challenge)) ((xrequest_handler)))))
                          seq
                            xauth_dict.write ((((xself).x_create_auth_dict)) ((((unsupported)) (((xrequest_handler).xheaders)) ("Proxy-Authorization"))))
                            (((unsupported)) ((((unsupported)) ((xauth_dict)) ("username"))) (((xself).x_users))).if
                              xpassword.write (((unsupported)) (((xself).x_users)) ((((unsupported)) ((xauth_dict)) ("username"))))
                              (((unsupported)) (((((xself).x_return_auth_challenge)) ((xrequest_handler)))))
                            ((((unsupported)) (((((xauth_dict).xget)) ("nonce"))) (((xself).x_nonces))).not).if
                              (((unsupported)) (((((xself).x_return_auth_challenge)) ((xrequest_handler)))))
                              bogusForceDataize.write (((((xself).x_nonces).xremove)) ((((unsupported)) ((xauth_dict)) ("nonce"))))
                            xauth_validated.write FALSE
                            (((unsupported)) ((xpath)) ((((unsupported)) (((xrequest_handler).xpath)) (((xrequest_handler).xshort_path)))))
                              ((((xself).x_validate_auth)) ((xauth_dict)) ((xpassword)) (((xrequest_handler).xcommand)) ((xpath))).if
                                xauth_validated.write TRUE
                            ((xauth_validated).not).if
                              (((unsupported)) (((((xself).x_return_auth_challenge)) ((xrequest_handler)))))
                            (((unsupported)) (TRUE))
            (((unsupported)) ((((xhttp).xserver).xBaseHTTPRequestHandler)))
              seq
                unsupported
                xUSER.write "testUser"
                xPASSWD.write "testPass"
                xREALM.write "Test"
                xUSER_PASSWD.write ("%s:%s".mod (((unsupported)) ((xUSER)) ((xPASSWD))))
                xENCODED_AUTH.write (((((((xbase64).xb64encode)) (((((xUSER_PASSWD).xencode)) ("ascii")))).xdecode)) ("ascii"))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xhttp).xserver).xBaseHTTPRequestHandler).x__init__)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)) 0)
                xdo_HEAD.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsend_response)) (200))
                        bogusForceDataize.write ((((xself).xsend_header)) ("Content-type") ("text/html"))
                        bogusForceDataize.write ((((xself).xend_headers)) 0)
                xdo_AUTHHEAD.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsend_response)) (401))
                        bogusForceDataize.write ((((xself).xsend_header)) ("WWW-Authenticate") (("Basic realm=\"%s\"".mod ((xself).xREALM))))
                        bogusForceDataize.write ((((xself).xsend_header)) ("Content-type") ("text/html"))
                        bogusForceDataize.write ((((xself).xend_headers)) 0)
                xdo_GET.write
                  [xself]
                    seq > @
                      ((((((xself).xheaders).xget)) ("Authorization") ("")).not).if
                        seq
                          bogusForceDataize.write ((((xself).xdo_AUTHHEAD)) 0)
                          bogusForceDataize.write (((((xself).xwfile).xwrite)) ("No Auth header received"))
                        ((((((xself).xheaders).xget)) ("Authorization") ("")).eq ("Basic ".add ((xself).xENCODED_AUTH))).if
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)) (200))
                            bogusForceDataize.write ((((xself).xend_headers)) 0)
                            bogusForceDataize.write (((((xself).xwfile).xwrite)) ("It works"))
                          bogusForceDataize.write ((((xself).xdo_AUTHHEAD)) 0)
            (((unsupported)) ((((xhttp).xserver).xBaseHTTPRequestHandler)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xdigest_auth_handler]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xdigest_auth_handler)) ((xdigest_auth_handler)))
                        bogusForceDataize.write ((((((xhttp).xserver).xBaseHTTPRequestHandler).x__init__)) ((xself)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)) 0)
                xdo_GET.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xscm)) ((xnetloc)) ((xpath)) ((xparams)) ((xquery)) ((xfragment)))) ((((((xurllib).xparse).xurlparse)) (((xself).xpath)) ("http"))))
                        (((unsupported)) (((xself).xshort_path)) ((xpath)))
                        (((((xself).xdigest_auth_handler).xhandle_request)) ((xself))).if
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)) (200) ("OK"))
                            bogusForceDataize.write ((((xself).xsend_header)) ("Content-Type") ("text/html"))
                            bogusForceDataize.write ((((xself).xend_headers)) 0)
                            bogusForceDataize.write (((((xself).xwfile).xwrite)) ((((xbytes)) (("You've reached %s!<BR>".mod ((xself).xpath))) ("ascii"))))
                            bogusForceDataize.write (((((xself).xwfile).xwrite)) ("Our apologies, but our server is down due to a sudden zombie invasion."))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xUSER.write "testUser"
                xPASSWD.write "testPass"
                xINCORRECT_PASSWD.write "Incorrect"
                xREALM.write "Test"
                xsetUp.write
                  [xself]
                    memory > xhttp_server_with_basic_auth_handler
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xBasicAuthTests)) ((xself))).xsetUp)) 0)
                        xhttp_server_with_basic_auth_handler.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xBasicAuthHandler)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                        (((unsupported)) (((xself).xserver)) ((((xLoopbackHttpServerThread)) ((xhttp_server_with_basic_auth_handler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xself).xstop_server)))
                        (((unsupported)) (((xself).xserver_url)) (("http://127.0.0.1:%s".mod (((xself).xserver).xport))))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)) 0)
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)) ((xBasicAuthTests)) ((xself))).xtearDown)) 0)
                xtest_basic_auth_success.write
                  [xself]
                    memory > xah
                    seq > @
                      seq
                        xah.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)) 0)
                        bogusForceDataize.write ((((xah).xadd_password)) (((xself).xREALM)) (((xself).xserver_url)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xurllib).xrequest).xinstall_opener)) ((((((xurllib).xrequest).xbuild_opener)) ((xah)))))
                        (((unsupported)) ((((xurllib).xerror).xHTTPError)))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((((xurllib).xrequest).xurlopen)) (((xself).xserver_url)))))
                          bogusForceDataize.write ((((xself).xfail)) (("Basic auth failed for the url: %s".mod ((xself).xserver_url))))
                xtest_basic_auth_httperror.write
                  [xself]
                    memory > xah
                    seq > @
                      seq
                        xah.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)) 0)
                        bogusForceDataize.write ((((xah).xadd_password)) (((xself).xREALM)) (((xself).xserver_url)) (((xself).xUSER)) (((xself).xINCORRECT_PASSWD)))
                        bogusForceDataize.write (((((xurllib).xrequest).xinstall_opener)) ((((((xurllib).xrequest).xbuild_opener)) ((xah)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xHTTPError)) ((((xurllib).xrequest).xurlopen)) (((xself).xserver_url)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xURL.write "http://localhost"
                xUSER.write "tester"
                xPASSWD.write "test123"
                xREALM.write "TestRealm"
                xsetUp.write
                  [xself]
                    memory > xrestore_environ
                    memory > xcreate_fake_proxy_handler
                    memory > xhandler
                    memory > xproxy_url
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((((xsuper)) ((xProxyAuthTests)) ((xself))).xsetUp)) 0)
                        xrestore_environ.write
                          [xold_environ]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                                bogusForceDataize.write (((((xos).xenviron).xupdate)) ((xold_environ)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xrestore_environ)) ((((((xos).xenviron).xcopy)) 0)))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("NO_PROXY"))) (""))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))) (""))
                        (((unsupported)) (((xself).xdigest_auth_handler)) ((((xDigestAuthHandler)) 0)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_users)) ((((unsupported)) (((xself).xUSER)) (((xself).xPASSWD)))))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_realm)) (((xself).xREALM)))
                        xcreate_fake_proxy_handler.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xFakeProxyHandler)) (((xself).xdigest_auth_handler)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))))
                        (((unsupported)) (((xself).xserver)) ((((xLoopbackHttpServerThread)) ((xcreate_fake_proxy_handler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xself).xstop_server)))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)) 0)
                        xproxy_url.write ("http://127.0.0.1:%d".mod (((xself).xserver).xport))
                        xhandler.write (((((xurllib).xrequest).xProxyHandler)) ((((unsupported)) ("http") ((xproxy_url)))))
                        (((unsupported)) (((xself).xproxy_digest_handler)) ((((((xurllib).xrequest).xProxyDigestAuthHandler)) 0)))
                        (((unsupported)) (((xself).xopener)) ((((((xurllib).xrequest).xbuild_opener)) ((xhandler)) (((xself).xproxy_digest_handler)))))
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_proxy_with_bad_password_raises_httperror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)) (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) ((((xself).xPASSWD).add "bad")))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)) ("auth"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xHTTPError)) ((((xself).xopener).xopen)) (((xself).xURL)))
                xtest_proxy_with_no_password_raises_httperror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)) ("auth"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((xurllib).xerror).xHTTPError)) ((((xself).xopener).xopen)) (((xself).xURL)))
                xtest_proxy_qop_auth_works.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)) (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)) ("auth"))
                        (((unsupported)) ((((((xself).xopener).xopen)) (((xself).xURL)))) ((xresult)))
                          while.
                            ((((xresult).xread)) 0)
                            [unused]
                              seq > @
                xtest_proxy_qop_auth_int_works_or_throws_urlerror.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)) (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)) ("auth-int"))
                        (((unsupported)) ((((xurllib).xerror).xURLError)))
                          xresult.write (((((xself).xopener).xopen)) (((xself).xURL)))
                          (((unsupported)) ((xresult)))
                            while.
                              ((((xresult).xread)) 0)
                              [unused]
                                seq > @
            xGetRequestHandler.write
              [xresponses]
                memory > xrequests
                memory > xheaders_received
                memory > xlog_message
                memory > xsend_head
                memory > xserver_version
                memory > xport
                memory > xdo_GET
                memory > xdo_POST
                seq > @
                  seq
                    (((unsupported)) ((((xhttp).xserver).xBaseHTTPRequestHandler)))
                      seq
                        xserver_version.write "TestHTTP/"
                        xrequests.write (((unsupported)) 0)
                        xheaders_received.write (((unsupported)) 0)
                        xport.write 80
                        xdo_GET.write
                          [xself]
                            memory > xdone
                            memory > xbody
                            seq > @
                              seq
                                xbody.write ((((xself).xsend_head)) 0)
                                while.
                                  (xbody)
                                  [unused]
                                    seq > @
                                      seq
                                        xdone.write (((((xself).xwfile).xwrite)) ((xbody)))
                                        xbody.write (((unsupported)) ((xbody)) ((((unsupported)) ((xdone)))))
                        xdo_POST.write
                          [xself]
                            memory > xcontent_length
                            memory > xpost_data
                            seq > @
                              seq
                                xcontent_length.write (((unsupported)) (((xself).xheaders)) ("Content-Length"))
                                xpost_data.write (((((xself).xrfile).xread)) ((((xint)) ((xcontent_length)))))
                                bogusForceDataize.write ((((xself).xdo_GET)) 0)
                                bogusForceDataize.write (((((xself).xrequests).xappend)) ((xpost_data)))
                        xsend_head.write
                          [xself]
                            seq > @
                              seq
                                (((unsupported)) (((xFakeHTTPRequestHandler).xheaders_received)) (((xself).xheaders)))
                                bogusForceDataize.write (((((xself).xrequests).xappend)) (((xself).xpath)))
                                (((unsupported)) ((((unsupported)) ((xresponse_code)) ((xheaders)) ((xbody)))) (((((xresponses).xpop)) (0))))
                                bogusForceDataize.write ((((xself).xsend_response)) ((xresponse_code)))
                                (((unsupported)) ((((unsupported)) ((xheader)) ((xvalue)))) ((xheaders)))
                                  bogusForceDataize.write ((((xself).xsend_header)) ((xheader)) (((xvalue).mod (((unsupported)) ("port") (((xself).xport))))))
                                (xbody).if
                                  seq
                                    bogusForceDataize.write ((((xself).xsend_header)) ("Content-type") ("text/plain"))
                                    bogusForceDataize.write ((((xself).xend_headers)) 0)
                                    (((unsupported)) ((xbody)))
                                bogusForceDataize.write ((((xself).xend_headers)) 0)
                        xlog_message.write
                          [xself]
                            seq > @
                              (((unsupported)) 0)
                    (((unsupported)) ((xFakeHTTPRequestHandler)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xsetUp.write
                  [xself]
                    memory > xrestore_environ
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)) ((xTestUrlopen)) ((xself))).xsetUp)) 0)
                        xrestore_environ.write
                          [xold_environ]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                                bogusForceDataize.write (((((xos).xenviron).xupdate)) ((xold_environ)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xrestore_environ)) ((((((xos).xenviron).xcopy)) 0)))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("NO_PROXY"))) ("*"))
                        (((unsupported)) ((((unsupported)) (((xos).xenviron)) ("no_proxy"))) ("*"))
                xurlopen.write
                  [xself xurl xdata]
                    memory > xl
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xl.write (((unsupported)) 0)
                        xf.write (((((xurllib).xrequest).xurlopen)) ((xurl)) ((xdata)) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xl).xextend)) (((((xf).xreadlines)) (200))))
                            bogusForceDataize.write ((((xl).xappend)) (((((xf).xreadline)) 0)))
                            bogusForceDataize.write ((((xl).xappend)) (((((xf).xread)) (1024))))
                            bogusForceDataize.write ((((xl).xappend)) (((((xf).xread)) 0)))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                        (((unsupported)) (((("".xjoin)) ((xl)))))
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)) 0)
                        (((unsupported)) (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xstart_server.write
                  [xself xresponses]
                    memory > xhandler
                    memory > xport
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xresponses)) ("None: is there a None literal in the EO language?")).if
                          xresponses.write (((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ("we don't care"))))
                        xhandler.write (((xGetRequestHandler)) ((xresponses)))
                        (((unsupported)) (((xself).xserver)) ((((xLoopbackHttpServerThread)) ((xhandler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xself).xstop_server)))
                        bogusForceDataize.write (((((xself).xserver).xstart)) 0)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)) 0)
                        xport.write (((xself).xserver).xport)
                        (((unsupported)) (((xhandler).xport)) ((xport)))
                        (((unsupported)) ((xhandler)))
                xstart_https_server.write
                  [xself xresponses]
                    memory > xserver
                    memory > xhandler
                    seq > @
                      (((unsupported)) 0)
                        ((((xhasattr)) (((xurllib).xrequest)) ("HTTPSHandler")).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("ssl support required"))
                        (((unsupported)) 0)
                        (((unsupported)) ((xresponses)) ("None: is there a None literal in the EO language?")).if
                          xresponses.write (((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ("we care a bit"))))
                        xhandler.write (((xGetRequestHandler)) ((xresponses)))
                        xserver.write (((unsupported)) ((xmake_https_server)) ((xself)) ((xhandler)) ((((unsupported)) ((xkwargs)))))
                        (((unsupported)) (((xhandler).xport)) (((xserver).xport)))
                        (((unsupported)) ((xhandler)))
                xtest_redirection.write
                  [xself]
                    memory > xresponses
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "We got here..."
                        xresponses.write (((unsupported)) ((((unsupported)) (302) ((((unsupported)) ((((unsupported)) ("Location") ("http://localhost:%(port)s/somewhere_else"))))) (""))) ((((unsupported)) (200) ((((unsupported)) 0)) ((xexpected_response)))))
                        xhandler.write ((((xself).xstart_server)) ((xresponses)))
                        xdata.write ((((xself).xurlopen)) (("http://localhost:%s/".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xrequests)) ((((unsupported)) ("/") ("/somewhere_else"))))
                xtest_chunked.write
                  [xself]
                    memory > xdata
                    memory > xexpected_response
                    memory > xresponse
                    memory > xchunked_start
                    memory > xhandler
                    seq > @
                      seq
                        xexpected_response.write "hello world"
                        xchunked_start.write "arnhello worlrn1rndrn0rn"
                        xresponse.write (((unsupported)) ((((unsupported)) (200) ((((unsupported)) ((((unsupported)) ("Transfer-Encoding") ("chunked"))))) ((xchunked_start)))))
                        xhandler.write ((((xself).xstart_server)) ((xresponse)))
                        xdata.write ((((xself).xurlopen)) (("http://localhost:%s/".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected_response)))
                xtest_404.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "Bad bad bad..."
                        xhandler.write ((((xself).xstart_server)) ((((unsupported)) ((((unsupported)) (404) ((((unsupported)) 0)) ((xexpected_response)))))))
                        (((unsupported)) ((((xurllib).xerror).xURLError)))
                          bogusForceDataize.write ((((xself).xurlopen)) (("http://localhost:%s/weeble".mod ((xhandler).xport))))
                          seq
                            xdata.write ((((xf).xread)) 0)
                            bogusForceDataize.write ((((xf).xclose)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("404 should raise URLError"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xrequests)) ((((unsupported)) ("/weeble"))))
                xtest_200.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)) ((((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ((xexpected_response)))))))
                        xdata.write ((((xself).xurlopen)) (("http://localhost:%s/bizarre".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xrequests)) ((((unsupported)) ("/bizarre"))))
                xtest_200_with_parameters.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)) ((((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ((xexpected_response)))))))
                        xdata.write ((((xself).xurlopen)) (("http://localhost:%s/bizarre".mod ((xhandler).xport))) ("get=with_feeling"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xhandler).xrequests)) ((((unsupported)) ("/bizarre") ("get=with_feeling"))))
                xtest_https.write
                  [xself]
                    memory > xcontext
                    memory > xhandler
                    memory > xdata
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_https_server)) 0)
                        xcontext.write (((unsupported)) (((xssl).xcreate_default_context)) ((xCERT_localhost)))
                        xdata.write (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("we care a bit"))
                xtest_https_with_cafile.write
                  [xself]
                    memory > xhandler
                    memory > xdata
                    seq > @
                      seq
                        xhandler.write (((unsupported)) (((xself).xstart_https_server)) ((xCERT_localhost)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          seq
                            xdata.write (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_localhost)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ("we care a bit"))
                            (((unsupported)) (((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)))) ((xcm)))
                              (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_fakehostname)))
                            xhandler.write (((unsupported)) (((xself).xstart_https_server)) ((xCERT_fakehostname)))
                            (((unsupported)) (((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)))) ((xcm)))
                              (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_fakehostname)))
                xtest_https_with_cadefault.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write (((unsupported)) (((xself).xstart_https_server)) ((xCERT_localhost)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xDeprecationWarning)))))))
                          (((unsupported)) (((((xself).xassertRaises)) ((((xurllib).xerror).xURLError)))) ((xcm)))
                            (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) (TRUE))
                xtest_https_sni.write
                  [xself]
                    memory > xhandler
                    memory > xcb_sni
                    memory > xsni_name
                    memory > xcontext
                    seq > @
                      seq
                        (((unsupported)) ((xssl)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("ssl module required"))
                        (((xssl).xHAS_SNI).not).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("SNI support required in OpenSSL"))
                        xsni_name.write "None: is there a None literal in the EO language?"
                        xcb_sni.write
                          [xssl_sock xserver_name xinitial_context]
                            memory > xsni_name
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xsni_name.write (xserver_name)
                        xcontext.write ((((xssl).xSSLContext)) (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xcontext).xset_servername_callback)) ((xcb_sni)))
                        xhandler.write (((unsupported)) (((xself).xstart_https_server)) ((xcontext)) ((xCERT_localhost)))
                        xcontext.write (((unsupported)) (((xssl).xcreate_default_context)) ((xCERT_localhost)))
                        (((unsupported)) (((xself).xurlopen)) (("https://localhost:%s".mod ((xhandler).xport))) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsni_name)) ("localhost"))
                xtest_sending_headers.write
                  [xself]
                    memory > xreq
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)) 0)
                        xreq.write (((unsupported)) ((((xurllib).xrequest).xRequest)) (("http://localhost:%s/".mod ((xhandler).xport))) ((((unsupported)) ("Range") ("bytes=20-39"))))
                        (((unsupported)) ((((((xurllib).xrequest).xurlopen)) ((xreq)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xhandler).xheaders_received)) ("Range"))) ("bytes=20-39"))
                xtest_basic.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)) 0)
                        (((unsupported)) ((((((xurllib).xrequest).xurlopen)) (("http://localhost:%s".mod ((xhandler).xport))))) ((xopen_url)))
                          seq
                            (((unsupported)) ((xattr)) ((((unsupported)) ("read") ("close") ("info") ("geturl"))))
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xopen_url)) ((xattr)))) (("object returned from urlopen lacks the %s attribute".mod (xattr))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xopen_url).xread)) 0)) ("calling 'read' failed"))
                xtest_info.write
                  [xself]
                    memory > xopen_url
                    memory > xinfo_obj
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)) 0)
                        xopen_url.write (((((xurllib).xrequest).xurlopen)) (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)) ((xopen_url)))
                          xinfo_obj.write ((((xopen_url).xinfo)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xinfo_obj)) ((((xemail).xmessage).xMessage)) ("object returned by 'info' is not an instance of email.message.Message"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xinfo_obj).xget_content_subtype)) 0)) ("plain"))
                xtest_geturl.write
                  [xself]
                    memory > xopen_url
                    memory > xhandler
                    memory > xurl
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)) 0)
                        xopen_url.write (((((xurllib).xrequest).xurlopen)) (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)) ((xopen_url)))
                          xurl.write ((((xopen_url).xgeturl)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xurl)) (("http://localhost:%s".mod ((xhandler).xport))))
                xtest_iteration.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)) ((((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ((xexpected_response)))))))
                        xdata.write (((((xurllib).xrequest).xurlopen)) (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)) ((xline)) ((xdata)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) ((xexpected_response)))
                xtest_line_iteration.write
                  [xself]
                    memory > xexpected_response
                    memory > xdata
                    memory > xhandler
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)) ("Wen") ("gotn") ("heren") ((("verylong ".mul 8192).add "n")))
                        xexpected_response.write ((("".xjoin)) ((xlines)))
                        xhandler.write ((((xself).xstart_server)) ((((unsupported)) ((((unsupported)) (200) ((((unsupported)) 0)) ((xexpected_response)))))))
                        xdata.write (((((xurllib).xrequest).xurlopen)) (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)) ((((unsupported)) ((xindex)) ((xline)))) ((((xenumerate)) ((xdata)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xline)) ((((unsupported)) ((xlines)) ((xindex)))) (("Fetched line number %s doesn't match expected:n    Expected length was %s, got %s".mod (((unsupported)) ((xindex)) ((((xlen)) ((((unsupported)) ((xlines)) ((xindex)))))) ((((xlen)) ((xline))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xindex).add 1)) ((((xlen)) ((xlines)))))
            xthreads_key.write "None: is there a None literal in the EO language?"
            xsetUpModule.write
              []
                memory > xthreads_key
                seq > @
                  seq
                    (((unsupported)) 0)
                    xthreads_key.write ((((xsupport).xthreading_setup)) 0)
            xtearDownModule.write
              []
                seq > @
                  (xthreads_key).if
                    bogusForceDataize.write ((((xsupport).xthreading_cleanup)) ((((unsupported)) ((xthreads_key)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)