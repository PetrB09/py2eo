memory > xcopy
memory > xbenchmarks
memory > xValueError
memory > xMAXREPEAT
memory > xp
memory > xop
memory > xarray
memory > xcm
memory > xUnicodeError
memory > xImportError
memory > xflags
memory > xc
memory > xFutureWarning
memory > xexpected
memory > xpickle
memory > xsecond
memory > xlist
memory > xproxy
memory > xstr
memory > xout
memory > xwarnings
memory > xcaptured_stdout
memory > xBytesWarning
memory > xt
memory > xB
memory > x_sre
memory > xS
memory > xrange
memory > xouter_reps
memory > xflag
memory > xb
memory > xtypecode
memory > xeval
memory > xSYNTAX_ERROR
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xstart
memory > xproto
memory > xprint
memory > xinner_op
memory > xIndex
memory > xtype
memory > xstring
memory > xrepr
memory > xint
memory > xre
memory > xr
memory > xwarns
memory > xScanner
memory > xOverflowError
memory > xx
memory > xend
memory > xsre_compile
memory > xloc
memory > xi
memory > xouter_mod
memory > xpattern
memory > xsuper
memory > xs
memory > xMAXGROUPS
memory > xbytes
memory > xm
memory > xtuple
memory > xsorted
memory > xDeprecationWarning
memory > xlocale
memory > xfloat
memory > xgc_collect
memory > xchr
memory > xmy_unicode
memory > xinner_mod
memory > xFAIL
memory > xitem
memory > xmod
memory > xfirst
memory > xUnicodeEncodeError
memory > x__file__
memory > xord
memory > xzip
memory > xunittest
memory > xsep
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xn
memory > xmemoryview
memory > xisinstance
memory > xouter_op
memory > xlen
memory > xreps
memory > xtests
memory > xBufferError
memory > xTypeError
memory > x__name__
memory > xa
memory > xinner_reps
[] > test_re
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheck_en_US_utf8
        memory > xtest_named_unicode_escapes
        memory > xtest_bug_20998
        memory > xtest_re_groupref_overflow
        memory > xtest_expand
        memory > xtest_scoped_flags
        memory > xtest_lookbehind
        memory > xtest_re_escape_non_ascii_bytes
        memory > xtest_sre_byte_class_literals
        memory > xtest_group
        memory > xtest_bytes
        memory > xtest_special_escapes
        memory > xtest_weakref
        memory > xtest_overlap_table
        memory > xtest_flags_repr
        memory > xtest_pattern_compare
        memory > xtest_symbolic_refs
        memory > xtest_multiple_repeat
        memory > xtest_bug_926075
        memory > xtest_big_codesize
        memory > xtest_flags
        memory > xtest_symbolic_groups
        memory > xtest_pattern_compare_bytes
        memory > xtest_bug_114660
        memory > xcheckPatternError
        memory > xtest_sub_template_numeric_escape
        memory > xtest_sre_byte_literals
        memory > xtest_re_escape_non_ascii
        memory > xtest_groupdict
        memory > xtest_ascii_and_unicode_flag
        memory > xtest_basic_re_sub
        memory > xtest_bug_449000
        memory > xtest_bug_581080
        memory > xtest_single_flag
        memory > xLITERAL_CHARS
        memory > xcheck_en_US_iso88591
        memory > xtest_keep_buffer
        memory > xtest_bug_764548
        memory > xtest_ignore_case_set
        memory > xtest_case_helpers
        memory > xtest_bug_817234
        memory > xtest_long_pattern
        memory > xcheck
        memory > xtest_bug_16688
        memory > xtest_large_search
        memory > xtest_re_benchmarks
        memory > xtest_bug_6509
        memory > xtest_locale
        memory > xtest_nothing_to_repeat
        memory > xtest_search_dot_unicode
        memory > xtest_sre_character_literals
        memory > xtest_re_groupref_exists
        memory > xtest_possible_set_operations
        memory > xtest_character_set_errors
        memory > xtest_getattr
        memory > xtest_ignore_case_range
        memory > xtest_qualified_re_sub
        memory > xtest_search_coverage
        memory > xtest_repeat_minmax
        memory > xtest_finditer
        memory > x__getitem__
        memory > xtest_re_fullmatch
        memory > xtest_error
        memory > xtest_zerowidth
        memory > xtest_unicode_flag
        memory > xtest_re_findall
        memory > xtest_without_flags
        memory > xtest_re_subn
        memory > xtest_dollar_matches_twice
        memory > xtest_bug_117612
        memory > xtest_re_tests
        memory > xtest_pickling
        memory > xtest_dealloc
        memory > xtest_empty_array
        memory > xtest_search_star_plus
        memory > xtest_qualified_re_split
        memory > xtest_match_getitem
        memory > xtest_bug_527371
        memory > xtest_repeat_minmax_overflow
        memory > xtest_bug_34294
        memory > xtest_bug_448951
        memory > xassertTypedEqual
        memory > xtest_anyall
        memory > xcheck_flags
        memory > xtest_constants
        memory > xtest_compile
        memory > xtest_bug_418626
        memory > xtest_bug_6561
        memory > xtest_category
        memory > xtest_misc_errors
        memory > xtest_bug_725106
        memory > xtest_not_literal
        memory > xtest_quotes
        memory > xtest_locale_compiled
        memory > xtest_re_groupref
        memory > xtest_re_split
        memory > xtest_multiple_flags
        memory > xassertMatch
        memory > xcheckTemplateError
        memory > xtest_bug_29444
        memory > xtest_re_match
        memory > xtest_backref_group_name_in_exception
        memory > xtest_issue17998
        memory > xtest_bug_3629
        memory > xtest_string_boundaries
        memory > xtest_locale_caching
        memory > xtest_group_name_in_exception
        memory > xtest_keyword_parameters
        memory > xtest_bug_931848
        memory > xtest_scanner
        memory > xtest_locale_flag
        memory > xtest_bug_1661
        memory > xtest_re_escape_bytes
        memory > xtest_bug_449964
        memory > xtest_bigcharset
        memory > xtest_repeat_minmax_overflow_maxrepeat
        memory > xtest_match_repr
        memory > xtest_enum
        memory > xtest_bug_612074
        memory > xtest_bug_113254
        memory > xtest_lookahead
        memory > xtest_inline_flags
        memory > xtest_ignore_case
        memory > xtest_bug_725149
        memory > xtest_copying
        memory > xtest_debug_flag
        memory > xtest_sre_character_class_literals
        memory > xtest_bytes_str_mixing
        memory > xtest_stack_overflow
        memory > xtest_large_subn
        memory > xtest_other_escapes
        memory > xtest_unknown_flags
        memory > xtest_bug_2537
        memory > xtest_re_escape
        memory > xtest_unlimited_zero_width_repeat
        memory > xbump_num
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xstr)))
              x__getitem__.write
                [xself xindex]
                  seq > @
                    (((unsupported)) ((((xS)) (((((((xsuper)) 0).x__getitem__)) ((xindex)))))))
            (((unsupported)) ((xbytes)))
              x__getitem__.write
                [xself xindex]
                  seq > @
                    (((unsupported)) ((((xB)) (((((((xsuper)) 0).x__getitem__)) ((xindex)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xassertTypedEqual.write
                  [xself xactual xexpect xmsg]
                    memory > xrecurse
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpect)) ((xmsg)))
                        xrecurse.write
                          [xactual xexpect]
                            seq > @
                              (((xisinstance)) ((xexpect)) ((((unsupported)) ((xtuple)) ((xlist))))).if
                                (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((xzip)) ((xactual)) ((xexpect)))))
                                  bogusForceDataize.write (((xrecurse)) ((xx)) ((xy)))
                                bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xactual)))) ((((xtype)) ((xexpect)))) ((xmsg)))
                        bogusForceDataize.write (((xrecurse)) ((xactual)) ((xexpect)))
                xcheckPatternError.write
                  [xself xpattern xerrmsg xpos]
                    memory > xerr
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)) ((xpattern)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xpattern)))))
                          seq
                            xerr.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xmsg)) ((xerrmsg)))
                            (((unsupported)) ((xpos)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpos)) ((xpos)))
                xcheckTemplateError.write
                  [xself xpattern xrepl xstring xerrmsg xpos]
                    memory > xerr
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xsub)) ((xpattern)) ((xrepl)) ((xstring)))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xpattern)) ((xrepl)))))
                          seq
                            xerr.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xmsg)) ((xerrmsg)))
                            (((unsupported)) ((xpos)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpos)) ((xpos)))
                xtest_keep_buffer.write
                  [xself]
                    memory > xit
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)) ("x"))
                        xit.write ((((xre).xfinditer)) ("a") ((xb)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xBufferError)))))
                          bogusForceDataize.write ((((xb).xextend)) (("x".mul 400)))
                        bogusForceDataize.write (((xlist)) ((xit)))
                        (((unsupported)) ((((unsupported)) ((xit)))))
                        bogusForceDataize.write (((xgc_collect)) 0)
                        bogusForceDataize.write ((((xb).xextend)) (("x".mul 400)))
                xtest_weakref.write
                  [xself]
                    memory > xy
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        xs.write "QabbbcR"
                        xx.write ((((xre).xcompile)) ("ab+c"))
                        xy.write (((xproxy)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xfindall)) ("QabbbcR"))) (((((xy).xfindall)) ("QabbbcR"))))
                xtest_search_star_plus.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("x*") ("axx")).xspan)) (0))) ((((unsupported)) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("x*") ("axx")).xspan)) 0)) ((((unsupported)) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("x+") ("axx")).xspan)) (0))) ((((unsupported)) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("x+") ("axx")).xspan)) 0)) ((((unsupported)) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xsearch)) ("x") ("aaa"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a*") ("xxx")).xspan)) (0))) ((((unsupported)) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a*") ("xxx")).xspan)) 0)) ((((unsupported)) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("x*") ("xxxa")).xspan)) (0))) ((((unsupported)) (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("x*") ("xxxa")).xspan)) 0)) ((((unsupported)) (0) (3))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("a+") ("xxx"))))
                xbump_num.write
                  [xself xmatchobj]
                    memory > xint_value
                    seq > @
                      seq
                        xint_value.write (((xint)) (((((xmatchobj).xgroup)) (0))))
                        (((unsupported)) ((((xstr)) (((xint_value).add 1)))))
                xtest_basic_re_sub.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ("a") ("xyz"))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ((((xS)) ("a"))) ((((xS)) ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ("a") ("xyz"))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ((((xB)) ("a"))) ((((xB)) ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ((((xbytearray)) ("a"))) ((((xbytearray)) ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsub)) ("y") ((((xmemoryview)) ("a"))) ((((xmemoryview)) ("xyz"))))) ("xaz"))
                        (((unsupported)) ((xy)) ((((unsupported)) ("xe0") ("u0430") ("U0001d49c"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ((xy)) ("a") (("x%sz".mod (xy))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?i)b+") ("x") ("bbbb BBBB"))) ("x x"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y"))) ("9.3 -3 24x100y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y") (3))) ("9.3 -3 23x99y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsub)) ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y") (3))) ("9.3 -3 23x99y"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) (".") ((((unsupported)) ("n"))) ("x"))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) (".") ("n") ("x"))) ("n"))
                        xs.write "11"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(.)") ((xs)) ("x"))) ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(.)") (((((xs).xreplace)) ("\\") ("\\"))) ("x"))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(.)") ((((unsupported)) ((xs)))) ("x"))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<a>x)") ("g<a>g<a>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<a>x)") ("g<a>g<1>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<unk>x)") ("g<unk>g<unk>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<unk>x)") ("g<1>g<1>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") ("tnvrfab") ("a"))) ("tnvrfab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") ("tnvrfab") ("a"))) ("tnvrfab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") ("tnvrfab") ("a"))) ((((((((((xchr)) (9)).add (((xchr)) (10))).add (((xchr)) (11))).add (((xchr)) (13))).add (((xchr)) (12))).add (((xchr)) (7))).add (((xchr)) (8)))))
                        (((unsupported)) ((xc)) ("cdehijklmopqsuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
                          (((unsupported)) (((((xself).xsubTest)) ((xc)))))
                            (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") (("\\".add (xc))) ("a"))) (("\\".add (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("^s*") ("X") ("test"))) ("Xtest"))
                xtest_bug_449964.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<unk>x)") ("g<1>g<1>b") ("xx"))) ("xxbxxb"))
                xtest_bug_449000.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                xtest_bug_1661.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ((((xre).xcompile)) ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xmatch)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xsearch)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xfindall)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ((xpattern)) (((xre).xI)))
                xtest_bug_3629.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xre).xcompile)) ("(?P<quote>)(?(quote))"))
                xtest_sub_template_numeric_escape.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("0") ("x"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("000") ("x"))) ("000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("001") ("x"))) ("001"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("008") ("x"))) (("0".add "8")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("009") ("x"))) (("0".add "9")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("111") ("x"))) ("111"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("117") ("x"))) ("117"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("377") ("x"))) ("377"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("1111") ("x"))) ("1111"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("1111") ("x"))) (("111".add "1")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("00") ("x"))) ("x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("07") ("x"))) ("x07"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("08") ("x"))) (("0".add "8")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("09") ("x"))) (("0".add "9")))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("x") ("0a") ("x"))) (("0".add "a")))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("400") ("x") ("octal escape value 400 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("777") ("x") ("octal escape value 777 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("1") ("x") ("invalid group reference 1") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("8") ("x") ("invalid group reference 8") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("9") ("x") ("invalid group reference 9") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("11") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("18") ("x") ("invalid group reference 18") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("1a") ("x") ("invalid group reference 1") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("90") ("x") ("invalid group reference 90") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("99") ("x") ("invalid group reference 99") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("118") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("11a") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("181") ("x") ("invalid group reference 18") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("800") ("x") ("invalid group reference 80") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("x") ("8") ("") ("invalid group reference 8") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(((((((((((x)))))))))))") ("11") ("x"))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("((((((((((y))))))))))(.)") ("118") ("xyz"))) ("xz8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("((((((((((y))))))))))(.)") ("11a") ("xyz"))) ("xza"))
                xtest_qualified_re_sub.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") ("b") ("aaaaa"))) ("bbbbb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("a") ("b") ("aaaaa") (1))) ("baaaa"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsub)) ("a") ("b") ("aaaaa") (1))) ("baaaa"))
                xtest_bug_114660.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(S)s+(S)") ("1 2") ("hello  there"))) ("hello there"))
                xtest_symbolic_groups.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        bogusForceDataize.write ((((xre).xcompile)) ("(?P<a>x)(?P=a)(?(a)y)"))
                        bogusForceDataize.write ((((xre).xcompile)) ("(?P<a1>x)(?P=a1)(?(a1)y)"))
                        bogusForceDataize.write ((((xre).xcompile)) ("(?P<a1>x)1(?(1)y)"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a>)(?P<a>)") ("redefinition of group name 'a' as group 2; was group 1"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a>(?P=a))") ("cannot refer to an open group") (10))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?Pxy)") ("unknown extension ?Px"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a>)(?P=a") ("missing ), unterminated name") (11))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=)") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=1)") ("bad character in group name '1'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=a)") ("unknown group name 'a'"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=a1)") ("unknown group name 'a1'"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=a.)") ("bad character in group name 'a.'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<)") ("missing >, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a") ("missing >, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<>)") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<1>)") ("bad character in group name '1'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a.>)") ("bad character in group name 'a.'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?(") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?())") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?(a))") ("unknown group name 'a'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?(-1))") ("bad character in group name '-1'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?(1a))") ("bad character in group name '1a'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?(a.))") ("bad character in group name 'a.'") (3))
                        bogusForceDataize.write ((((xre).xcompile)) ("(?P<µ>x)(?P=µ)(?(µ)y)"))
                        bogusForceDataize.write ((((xre).xcompile)) ("(?P<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>x)(?P=𝔘𝔫𝔦𝔠𝔬𝔡𝔢)(?(𝔘𝔫𝔦𝔠𝔬𝔡𝔢)y)"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<©>x)") ("bad character in group name '©'") (4))
                        xpat.write ((("|".xjoin)) ((((unsupported)) (("x(?P<a%d>%x)y".mod (((unsupported)) ((xi)) ((xi))))) ((xi)) ((((xrange)) (1) ((200.add 1)))))))
                        xpat.write ("(?:%s)(?(200)z|t)".mod (xpat))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ((xpat)) ("xc8yz")).xspan)) 0)) ((((unsupported)) (0) (5))))
                xtest_symbolic_refs.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<a") ("xx") ("missing >, unterminated name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<") ("xx") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g") ("xx") ("missing <") (2))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<a a>") ("xx") ("bad character in group name 'a a'") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<>") ("xx") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<1a1>") ("xx") ("bad character in group name '1a1'") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<2>") ("xx") ("invalid group reference 2") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("2") ("xx") ("invalid group reference 2") (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("unknown group name 'ab'"))))
                          bogusForceDataize.write ((((xre).xsub)) ("(?P<a>x)") ("g<ab>") ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<a>x)|(?P<b>y)") ("g<b>") ("xx"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<a>x)|(?P<b>y)") ("2") ("xx"))) (""))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<-1>") ("xx") ("bad character in group name '-1'") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<µ>x)") ("g<µ>") ("xx"))) ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(?P<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>x)") ("g<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>") ("xx"))) ("xx"))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("(?P<a>x)") ("g<©>") ("xx") ("bad character in group name '©'") (3))
                        xpat.write ((("|".xjoin)) ((((unsupported)) (("x(?P<a%d>%x)y".mod (((unsupported)) ((xi)) ((xi))))) ((xi)) ((((xrange)) (1) ((200.add 1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ((xpat)) ("g<200>") ("xc8yzxc8y"))) ("c8zc8"))
                xtest_re_subn.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsubn)) ("(?i)b+") ("x") ("bbbb BBBB"))) ((((unsupported)) ("x x") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsubn)) ("b+") ("x") ("bbbb BBBB"))) ((((unsupported)) ("x BBBB") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsubn)) ("b+") ("x") ("xyz"))) ((((unsupported)) ("xyz") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsubn)) ("b*") ("x") ("xyz"))) ((((unsupported)) ("xxxyxzx") (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsubn)) ("b*") ("x") ("xyz") (2))) ((((unsupported)) ("xxxyz") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsubn)) ("b*") ("x") ("xyz") (2))) ((((unsupported)) ("xxxyz") (2))))
                xtest_re_split.write
                  [xself]
                    memory > xstring
                    seq > @
                      seq
                        (((unsupported)) ((xstring)) ((((unsupported)) (":a:b::c") ((((xS)) (":a:b::c"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) (":") ((xstring)))) ((((unsupported)) ("") ("a") ("b") ("") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) (":+") ((xstring)))) ((((unsupported)) ("") ("a") ("b") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) ("(:+)") ((xstring)))) ((((unsupported)) ("") (":") ("a") (":") ("b") ("::") ("c"))))
                        (((unsupported)) ((xstring)) ((((unsupported)) (":a:b::c") ((((xB)) (":a:b::c"))) ((((xbytearray)) (":a:b::c"))) ((((xmemoryview)) (":a:b::c"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) (":") ((xstring)))) ((((unsupported)) ("") ("a") ("b") ("") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) (":+") ((xstring)))) ((((unsupported)) ("") ("a") ("b") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) ("(:+)") ((xstring)))) ((((unsupported)) ("") (":") ("a") (":") ("b") ("::") ("c"))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)) ((xc)))) ((((unsupported)) ("xe0xdfxe7") ("u0430u0431u0432") ("U0001d49cU0001d49eU0001d4b5"))))
                          seq
                            xstring.write (":%s:%s::%s".mod (((unsupported)) ((xa)) ((xb)) ((xc))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) (":") ((xstring)))) ((((unsupported)) ("") ((xa)) ((xb)) ("") ((xc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) (":+") ((xstring)))) ((((unsupported)) ("") ((xa)) ((xb)) ((xc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(:+)") ((xstring)))) ((((unsupported)) ("") (":") ((xa)) (":") ((xb)) ("::") ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(?::+)") (":a:b::c"))) ((((unsupported)) ("") ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(:)+") (":a:b::c"))) ((((unsupported)) ("") (":") ("a") (":") ("b") (":") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("([b:]+)") (":a:b::c"))) ((((unsupported)) ("") (":") ("a") (":b::") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(b)|(:+)") (":a:b::c"))) ((((unsupported)) ("") ("None: is there a None literal in the EO language?") (":") ("a") ("None: is there a None literal in the EO language?") (":") ("") ("b") ("None: is there a None literal in the EO language?") ("") ("None: is there a None literal in the EO language?") ("::") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(?:b)|(?::+)") (":a:b::c"))) ((((unsupported)) ("") ("a") ("") ("") ("c"))))
                        (((unsupported)) ((((unsupported)) ((xsep)) ((xexpected)))) ((((unsupported)) ((((unsupported)) (":*") ((((unsupported)) ("") ("") ("a") ("") ("b") ("") ("c") (""))))) ((((unsupported)) ("(?::*)") ((((unsupported)) ("") ("") ("a") ("") ("b") ("") ("c") (""))))) ((((unsupported)) ("(:*)") ((((unsupported)) ("") (":") ("") ("") ("a") (":") ("") ("") ("b") ("::") ("") ("") ("c") ("") (""))))) ((((unsupported)) ("(:)*") ((((unsupported)) ("") (":") ("") ("None: is there a None literal in the EO language?") ("a") (":") ("") ("None: is there a None literal in the EO language?") ("b") (":") ("") ("None: is there a None literal in the EO language?") ("c") ("None: is there a None literal in the EO language?") (""))))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xsep)))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) ((xsep)) (":a:b::c"))) ((xexpected)))
                        (((unsupported)) ((((unsupported)) ((xsep)) ((xexpected)))) ((((unsupported)) ((((unsupported)) ("") ((((unsupported)) ("") (":") ("a") (":") ("b") (":") (":") ("c") (""))))) ((((unsupported)) ("b") ((((unsupported)) (":") ("a") (":") ("b") ("::") ("c") (""))))) ((((unsupported)) ("(?=:)") ((((unsupported)) ("") (":a") (":b") (":") (":c"))))) ((((unsupported)) ("(?<=:)") ((((unsupported)) (":") ("a:") ("b:") (":") ("c"))))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xsep)))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xsplit)) ((xsep)) (":a:b::c"))) ((xexpected)))
                xtest_qualified_re_split.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) (":") (":a:b::c") (2))) ((((unsupported)) ("") ("a") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsplit)) (":") (":a:b::c") (2))) ((((unsupported)) ("") ("a") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsplit)) (":") ("a:b:c:d") (2))) ((((unsupported)) ("a") ("b") ("c:d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsplit)) ("(:)") (":a:b::c") (2))) ((((unsupported)) ("") (":") ("a") (":") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsplit)) ("(:+)") (":a:b::c") (2))) ((((unsupported)) ("") (":") ("a") (":") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xre).xsplit)) ("(:*)") (":a:b::c") (2))) ((((unsupported)) ("") (":") ("") ("") ("a:b::c"))))
                xtest_re_findall.write
                  [xself]
                    memory > xxx
                    memory > xxxx
                    memory > xstring
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) (":+") ("abc"))) ((((unsupported)) 0)))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("a:b::c:::d") ((((xS)) ("a:b::c:::d"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) (":+") ((xstring)))) ((((unsupported)) (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) ("(:+)") ((xstring)))) ((((unsupported)) (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) ("(:)(:*)") ((xstring)))) ((((unsupported)) ((((unsupported)) (":") (""))) ((((unsupported)) (":") (":"))) ((((unsupported)) (":") ("::"))))))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("a:b::c:::d") ((((xB)) ("a:b::c:::d"))) ((((xbytearray)) ("a:b::c:::d"))) ((((xmemoryview)) ("a:b::c:::d"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) (":+") ((xstring)))) ((((unsupported)) (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) ("(:+)") ((xstring)))) ((((unsupported)) (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)) (((((xre).xfindall)) ("(:)(:*)") ((xstring)))) ((((unsupported)) ((((unsupported)) (":") (""))) ((((unsupported)) (":") (":"))) ((((unsupported)) (":") ("::"))))))
                        (((unsupported)) ((xx)) ((((unsupported)) ("xe0") ("u0430") ("U0001d49c"))))
                          seq
                            xxx.write ((xx).mul 2)
                            xxxx.write ((xx).mul 3)
                            xstring.write ("a%sb%sc%sd".mod (((unsupported)) ((xx)) ((xxx)) ((xxxx))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) (("%s+".mod (xx))) ((xstring)))) ((((unsupported)) ((xx)) ((xxx)) ((xxxx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) (("(%s+)".mod (xx))) ((xstring)))) ((((unsupported)) ((xx)) ((xxx)) ((xxxx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) (("(%s)(%s*)".mod (((unsupported)) ((xx)) ((xx))))) ((xstring)))) ((((unsupported)) ((((unsupported)) ((xx)) (""))) ((((unsupported)) ((xx)) ((xx)))) ((((unsupported)) ((xx)) ((xxx)))))))
                xtest_bug_117612.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("(a|(b))") ("aba"))) ((((unsupported)) ((((unsupported)) ("a") (""))) ((((unsupported)) ("b") ("b"))) ((((unsupported)) ("a") (""))))))
                xtest_re_match.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)) ((xstring)) ((((unsupported)) ("a") ((((xS)) ("a"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a") ((xstring))).xgroups)) 0)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroups)) 0)) ((((unsupported)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (0))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (1))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (1) (1))) ((((unsupported)) ("a") ("a"))))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("a") ((((xB)) ("a"))) ((((xbytearray)) ("a"))) ((((xmemoryview)) ("a"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a") ((xstring))).xgroups)) 0)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroups)) 0)) ((((unsupported)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (0))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (1))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)") ((xstring))).xgroup)) (1) (1))) ((((unsupported)) ("a") ("a"))))
                        (((unsupported)) ((xa)) ((((unsupported)) ("xe0") ("u0430") ("U0001d49c"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ((xa)) ((xa))).xgroups)) 0)) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("(%s)".mod (xa))) ((xa))).xgroups)) 0)) ((((unsupported)) ((xa)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("(%s)".mod (xa))) ((xa))).xgroup)) (0))) ((xa)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("(%s)".mod (xa))) ((xa))).xgroup)) (1))) ((xa)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("(%s)".mod (xa))) ((xa))).xgroup)) (1) (1))) ((((unsupported)) ((xa)) ((xa)))))
                        xpat.write ((((xre).xcompile)) ("((a)|(b))(c)?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("a")).xgroups)) 0)) ((((unsupported)) ("a") ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("b")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("ac")).xgroups)) 0)) ((((unsupported)) ("a") ("a") ("None: is there a None literal in the EO language?") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("bc")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("bc")).xgroups)) (""))) ((((unsupported)) ("b") ("") ("b") ("c"))))
                        xpat.write ((((xre).xcompile)) ("(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("a")).xgroup)) (1) (2) (3))) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("b")).xgroup)) ("a1") ("b2") ("c3"))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xpat).xmatch)) ("ac")).xgroup)) (1) ("b2") (3))) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?") ("c"))))
                xtest_group.write
                  [xself]
                    memory > x__index__
                    memory > x__init__
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)) (((xself).xvalue)) ((xvalue)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xvalue)))
                        xm.write ((((xre).xmatch)) ("(a)(b)") ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) 0)) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (0))) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) ((((xIndex)) (1))))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).xgroup)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).xgroup)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).xgroup)) ((((unsupported)) (1) (1000))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).xgroup)) ((((xIndex)) ((((unsupported)) (1) (1000))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xm).xgroup)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (2) (1))) ((((unsupported)) ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) ((((xIndex)) (2))) ((((xIndex)) (1))))) ((((unsupported)) ("b") ("a"))))
                xtest_match_getitem.write
                  [xself]
                    memory > xpat
                    memory > xm
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)) ("(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?"))
                        xm.write ((((xpat).xmatch)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("a1"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("b2"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("c3"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("a1={a1} b2={b2} c3={c3}".xformat_map)) ((xm)))) ("a1=a b2=None c3=None"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (0))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (3))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) ("X"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) ((1.neg)))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) (4))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) ((((unsupported)) (0) (1))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) ((((unsupported)) (0))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          (((unsupported)) ((xm)) ((((unsupported)) (0) (1))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xIndexError)) ("no such group"))))
                          bogusForceDataize.write ((("a1={a2}".xformat_map)) ((xm)))
                        xm.write ((((xpat).xmatch)) ("ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("a1"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("b2"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) ("c3"))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("a1={a1} b2={b2} c3={c3}".xformat_map)) ((xm)))) ("a1=a b2=None c3=c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (0))) ("ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xm)) (3))) ("c"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) ((xm)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlen)) ((xm)))
                xtest_re_fullmatch.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a") ("a")).xspan)) 0)) ((((unsupported)) (0) (1))))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("ab") ((((xS)) ("ab"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a|ab") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (2))))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("ab") ((((xB)) ("ab"))) ((((xbytearray)) ("ab"))) ((((xmemoryview)) ("ab"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a|ab") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (2))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ("xe0xdf") ("u0430u0431") ("U0001d49cU0001d49e"))))
                          seq
                            xr.write ("%s|%s".mod (((unsupported)) ((xa)) (((xa).add (xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ((xr)) (((xa).add (xb)))).xspan)) 0)) ((((unsupported)) (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) (".*?$") ("abc")).xspan)) 0)) ((((unsupported)) (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) (".*?") ("abc")).xspan)) 0)) ((((unsupported)) (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a.*?b") ("ab")).xspan)) 0)) ((((unsupported)) (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a.*?b") ("abb")).xspan)) 0)) ((((unsupported)) (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("a.*?b") ("axxb")).xspan)) 0)) ((((unsupported)) (0) (4))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xfullmatch)) ("a+") ("ab"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xfullmatch)) ("abc$") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xfullmatch)) ("abcZ") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xfullmatch)) ("(?m)abc$") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("ab(?=c)cd") ("abcd")).xspan)) 0)) ((((unsupported)) (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("ab(?<=b)cd") ("abcd")).xspan)) 0)) ((((unsupported)) (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("(?=a|ab)ab") ("ab")).xspan)) 0)) ((((unsupported)) (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) ((((((xre).xcompile)) ("bc")).xfullmatch)) ("abcd") (1) (3)).xspan)) 0)) ((((unsupported)) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) ((((((xre).xcompile)) (".*?$")).xfullmatch)) ("abcd") (1) (3)).xspan)) 0)) ((((unsupported)) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) ((((((xre).xcompile)) (".*?")).xfullmatch)) ("abcd") (1) (3)).xspan)) 0)) ((((unsupported)) (1) (3))))
                xtest_re_groupref_exists.write
                  [xself]
                    memory > xpat
                    memory > xp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(()?([^()]+)(?(1)))$") ("(a)")).xgroups)) 0)) ((((unsupported)) ("(") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(()?([^()]+)(?(1)))$") ("a")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(()?([^()]+)(?(1)))$") ("a)"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(()?([^()]+)(?(1)))$") ("(a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)((?(1)b|d))$") ("ab")).xgroups)) 0)) ((((unsupported)) ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)((?(1)b|d))$") ("cd")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)((?(1)|d))$") ("cd")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)((?(1)|d))$") ("a")).xgroups)) 0)) ((((unsupported)) ("a") (""))))
                        xp.write ((((xre).xcompile)) ("(?P<g1>a)(?P<g2>b)?((?(g2)c|d))"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xp).xmatch)) ("abc")).xgroups)) 0)) ((((unsupported)) ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xp).xmatch)) ("ad")).xgroups)) 0)) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp).xmatch)) ("abd"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp).xmatch)) ("ac"))))
                        xpat.write ((("|".xjoin)) ((((unsupported)) (("x(?P<a%d>%x)y".mod (((unsupported)) ((xi)) ((xi))))) ((xi)) ((((xrange)) (1) ((200.add 1)))))))
                        xpat.write ("(?:%s)(?(200)z)".mod (xpat))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ((xpat)) ("xc8yz")).xspan)) 0)) ((((unsupported)) (0) (5))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<a>)(?(0))") ("bad group number") (10))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("()(?(1)a|b") ("missing ), unterminated subpattern") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("()(?(1)a|b|c)") ("conditional backref with more than two branches") (10))
                xtest_re_groupref_overflow.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xcheckTemplateError)) ("()") (("g<%s>".mod (xMAXGROUPS))) ("xx") (("invalid group reference %d".mod (xMAXGROUPS))) (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) (("(?P<a>)(?(%d))".mod (xMAXGROUPS))) (("invalid group reference %d".mod (xMAXGROUPS))) (10))
                xtest_re_groupref.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(|)?([^()]+)1$") ("|a|")).xgroups)) 0)) ((((unsupported)) ("|") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(|)?([^()]+)1?$") ("a")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(|)?([^()]+)1$") ("a|"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(|)?([^()]+)1$") ("|a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)(1)$") ("aa")).xgroups)) 0)) ((((unsupported)) ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(?:(a)|c)(1)?$") ("c")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(abc1)") ("cannot refer to an open group") (4))
                xtest_groupdict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(?P<first>first) (?P<second>second)") ("first second")).xgroupdict)) 0)) ((((unsupported)) ("first") ("first") ("second") ("second"))))
                xtest_expand.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(?P<first>first) (?P<second>second)") ("first second")).xexpand)) ("2 1 g<second> g<first>"))) ("second first second first"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(?P<first>first)|(?P<second>second)") ("first")).xexpand)) ("2 g<second>"))) (" "))
                xtest_repeat_minmax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(w){1}$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(w){1}?$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(w){1,2}$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^(w){1,2}?$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){3}$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){1,3}$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){1,4}$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){3,4}?$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){3}?$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){1,3}?$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){1,4}?$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(w){3,4}?$") ("abc")).xgroup)) (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^x{1}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^x{1}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^x{1,2}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^x{1,2}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{1,3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{3,3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{1,4}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{3,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{3}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{1,3}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{1,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{3,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^x{}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("^x{}$") ("x{}"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("x{2,1}") ("min repeat greater than max repeat") (2))
                xtest_getattr.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ("(?i)(a)(b)")).xpattern)) ("(?i)(a)(b)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ("(?i)(a)(b)")).xflags)) ((((xre).xI).or ((xre).xU))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ("(?i)(a)(b)")).xgroups)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ("(?i)(a)(b)")).xgroupindex)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ("(?i)(?P<first>a)(?P<other>b)")).xgroupindex)) ((((unsupported)) ("first") (1) ("other") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(a)") ("a")).xpos)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(a)") ("a")).xendpos)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(a)") ("a")).xstring)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(a)") ("a")).xregs)) ((((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (0) (1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xre).xmatch)) ("(a)") ("a")).xre)))
                        xp.write ((((xre).xcompile)) ("(?i)(?P<first>a)(?P<other>b)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((xp).xgroupindex)))) ((((unsupported)) ("first") ("other"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xp).xgroupindex)) ("other"))) (2))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) (((xp).xgroupindex)) ("other"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xp).xgroupindex)) ("other"))) (2))
                xtest_special_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("b(b.)b") ("abcd abc bcd bx")).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("B(b.)B") ("abc bcd bc abxd")).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("b(b.)b") ("abcd abc bcd bx") (((xre).xASCII))).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("B(b.)B") ("abc bcd bc abxd") (((xre).xASCII))).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("^abc$") ("nabcn") (((xre).xM))).xgroup)) (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("^AabcZ$") ("abc") (((xre).xM))).xgroup)) (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xsearch)) ("^AabcZ$") ("nabcn") (((xre).xM)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("b(b.)b") ("abcd abc bcd bx")).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("B(b.)B") ("abc bcd bc abxd")).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("b(b.)b") ("abcd abc bcd bx") (((xre).xLOCALE))).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("B(b.)B") ("abc bcd bc abxd") (((xre).xLOCALE))).xgroup)) (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("^abc$") ("nabcn") (((xre).xM))).xgroup)) (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("^AabcZ$") ("abc") (((xre).xM))).xgroup)) (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xsearch)) ("^AabcZ$") ("nabcn") (((xre).xM)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("dDwWsS") ("1aa! a")).xgroup)) (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("dDwWsS") ("1aa! a")).xgroup)) (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("dDwWsS") ("1aa! a") (((xre).xASCII))).xgroup)) (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("dDwWsS") ("1aa! a") (((xre).xLOCALE))).xgroup)) (0))) ("1aa! a"))
                xtest_other_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("\\") ("bad escape (end of pattern)") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(") ("(")).xgroup)) 0)) ("("))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(") (")"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("\\") ("\\")).xgroup)) 0)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("[]]") ("]")).xgroup)) 0)) ("]"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[]]") ("["))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("[a-c]") ("-")).xgroup)) 0)) ("-"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[a-c]") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("[^a]+") ("a^")).xgroup)) 0)) ("a^"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[^a]+") ("b"))))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        (((unsupported)) ((xc)) ("ceghijklmopqyzCEFGHIJKLMNOPQRTVXY"))
                          (((unsupported)) (((((xself).xsubTest)) ((xc)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) (((((unsupported)) 0).mod (xc))))
                        (((unsupported)) ((xc)) ("ceghijklmopqyzABCEFGHIJKLMNOPQRTVXYZ"))
                          (((unsupported)) (((((xself).xsubTest)) ((xc)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) (((((unsupported)) 0).mod (xc))))
                xtest_named_unicode_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("N{LESS-THAN SIGN}") ("<"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("N{less-than sign}") ("<"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("N{LESS-THAN SIGN}") (">"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("N{SNAKE}") ("U0001f40d"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("N{ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM}") ("ufbf9"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[N{LESS-THAN SIGN}-N{GREATER-THAN SIGN}]") ("="))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[N{LESS-THAN SIGN}-N{GREATER-THAN SIGN}]") (";"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N") ("missing {") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N]") ("missing {") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N{") ("missing character name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{") ("missing character name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N{}") ("missing character name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{}]") ("missing character name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("NSNAKE}") ("missing {") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[NSNAKE}]") ("missing {") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N{SNAKE") ("missing }, unterminated name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{SNAKE]") ("missing }, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{SNAKE]}") ("undefined character name 'SNAKE]'") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N{SPAM}") ("undefined character name 'SPAM'") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{SPAM}]") ("undefined character name 'SPAM'") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("N{LESS-THAN SIGN}") ("bad escape N") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[N{LESS-THAN SIGN}]") ("bad escape N") (1))
                xtest_string_boundaries.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("b(abc)b") ("abc")).xgroup)) (1))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("b") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("B") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xre).xmatch)) ("B") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xsearch)) ("B") (""))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xsearch)) ("b") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xre).xfindall)) ("b") ("a"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xre).xfindall)) ("B") ("a"))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xre).xfindall)) ("b") (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xre).xfindall)) ("b") ("   "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xre).xfindall)) ("B") (" "))))) (2))
                xtest_bigcharset.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("([u2222u2223])") ("u2222")).xgroup)) (1))) ("u2222"))
                        xr.write ("[%s]".mod ((("".xjoin)) ((((xmap)) ((xchr)) ((((xrange)) (256) ((((unsupported)) (2) (16))) (255)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ((xr)) ("uff01")).xgroup)) 0)) ("uff01"))
                xtest_big_codesize.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xre).xcompile)) (((("|".xjoin)) ((((unsupported)) (("%d".mod (xx))) ((xx)) ((((xrange)) (10000))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xmatch)) ("1000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xmatch)) ("9999"))))
                xtest_anyall.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a.b") ("anb") (((xre).xDOTALL))).xgroup)) (0))) ("anb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("a.*b") ("annb") (((xre).xDOTALL))).xgroup)) (0))) ("annb"))
                xtest_lookahead.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?=s[^a]))") ("a b")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?=s[^a]*))") ("a b")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?=s[abc]))") ("a b")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?=s[abc]*))") ("a bc")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?=s1)") ("a a")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?=s1*)") ("a aa")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?=s(abc|a))") ("a a")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?!s[^a]))") ("a a")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a(?!s[abc]))") ("a d")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?!s1)") ("a b")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?!s(abc|a))") ("a b")).xgroup)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)b(?=1)a") ("aba"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(a)b(?=1)c") ("abac"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?:(a)|(x))b(?=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:(a)|(x))b(?=(?(2)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?:(a)|(x))b(?=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:(a)|(x))b(?=(?(1)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?:(a)|(x))b(?=(?(1)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)b(?=(?(2)x|c))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(a)b(?=(?(2)b|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)b(?=(?(1)c|x))(c)") ("abc"))))
                xtest_lookbehind.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("ab(?<=b)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("ab(?<=c)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("ab(?<!b)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("ab(?<!c)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)a(?<=1)c") ("aac"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(a)b(?<=1)a") ("abaa"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(a)a(?<!1)c") ("aac"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)b(?<!1)a") ("abaa"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:(a)|(x))b(?<=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:(a)|(x))b(?<=(?(2)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?:(a)|(x))b(?<=(?(2)x|b))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:(a)|(x))b(?<=(?(1)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?:(a)|(x))b(?<=(?(1)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(?(2)b|x))(c)"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(a)b(?<=(?(1)c|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(a)b(?<=(?(1)b|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(.)2)(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(?P<a>.)(?P=a))(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(a)(?(2)b|x))(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(.)(?<=2))(c)"))
                xtest_ignore_case.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("abc") ("ABC") (((xre).xI))).xgroup)) (0))) ("ABC"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("abc") ("ABC") (((xre).xI))).xgroup)) (0))) ("ABC"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(as[^a])") ("a b") (((xre).xI))).xgroup)) (1))) ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(as[^a]*)") ("a bb") (((xre).xI))).xgroup)) (1))) ("a bb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(as[abc])") ("a b") (((xre).xI))).xgroup)) (1))) ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(as[abc]*)") ("a bb") (((xre).xI))).xgroup)) (1))) ("a bb"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("((a)s2)") ("a a") (((xre).xI))).xgroup)) (1))) ("a a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("((a)s2*)") ("a aa") (((xre).xI))).xgroup)) (1))) ("a aa"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("((a)s(abc|a))") ("a a") (((xre).xI))).xgroup)) (1))) ("a a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("((a)s(abc|a)*)") ("a aa") (((xre).xI))).xgroup)) (1))) ("a aa"))
                        (((unsupported)) ((((("u212a".xlower)) 0).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("K") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("k") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("u212a") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("u212a") ("k") (((xre).xI)))))
                        (((unsupported)) ((((("u017f".xupper)) 0).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("S") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("s") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("u017f") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("u017f") ("s") (((xre).xI)))))
                        (((unsupported)) ((((unsupported)) (((("ufb05".xupper)) 0)) (((("ufb06".xupper)) 0)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("ufb05") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("ufb06") ("ufb05") (((xre).xI)))))
                xtest_ignore_case_set.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19A]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19a]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19a]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19A]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19A]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19a]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19a]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19A]") ("a") (((xre).xI)))))
                        (((unsupported)) ((((("u212a".xlower)) 0).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19K]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19k]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19u212a]") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19u212a]") ("k") (((xre).xI)))))
                        (((unsupported)) ((((("u017f".xupper)) 0).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19S]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19s]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19u017f]") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19u017f]") ("s") (((xre).xI)))))
                        (((unsupported)) ((((unsupported)) (((("ufb05".xupper)) 0)) (((("ufb06".xupper)) 0)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19ufb05]") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[19ufb06]") ("ufb05") (((xre).xI)))))
                xtest_ignore_case_range.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[9-a]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[9-A]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[9-a]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[9-A]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[xc0-xde]") ("xd7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[xc0-xde]") ("xf7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[xe0-xfe]") ("xf7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("[xe0-xfe]") ("xd7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u0430-u045f]") ("u0450") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u0430-u045f]") ("u0400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u0400-u042f]") ("u0450") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u0400-u042f]") ("u0400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[U00010428-U0001044f]") ("U00010428") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[U00010428-U0001044f]") ("U00010400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[U00010400-U00010427]") ("U00010428") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[U00010400-U00010427]") ("U00010400") (((xre).xI)))))
                        (((unsupported)) ((((("u212a".xlower)) 0).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[J-M]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[j-m]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u2129-u212b]") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u2129-u212b]") ("k") (((xre).xI)))))
                        (((unsupported)) ((((("u017f".xupper)) 0).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[R-T]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[r-t]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u017e-u0180]") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[u017e-u0180]") ("s") (((xre).xI)))))
                        (((unsupported)) ((((unsupported)) (((("ufb05".xupper)) 0)) (((("ufb06".xupper)) 0)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[ufb04-ufb05]") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[ufb06-ufb07]") ("ufb05") (((xre).xI)))))
                xtest_category.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(s)") (" ")).xgroup)) (1))) (" "))
                xtest_case_helpers.write
                  [xself]
                    memory > xlo
                    memory > xc
                    memory > xiscased
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (128))))
                          seq
                            xc.write (((xchr)) ((xi)))
                            xlo.write (((xord)) (((((xc).xlower)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xascii_tolower)) ((xi)))) ((xlo)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xunicode_tolower)) ((xi)))) ((xlo)))
                            xiscased.write (((unsupported)) ((xc)) (((xstring).xascii_letters)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xascii_iscased)) ((xi)))) ((xiscased)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xunicode_iscased)) ((xi)))) ((xiscased)))
                        (((unsupported)) ((xi)) (((((xlist)) ((((xrange)) (128) (4096)))).add (((unsupported)) (66560) (66600)))))
                          seq
                            xc.write (((xchr)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xascii_tolower)) ((xi)))) ((xi)))
                            ((xi).neq 304).if
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xunicode_tolower)) ((xi)))) ((((xord)) (((((xc).xlower)) 0)))))
                            xiscased.write (((xc).neq ((((xc).xlower)) 0)).or ((xc).neq ((((xc).xupper)) 0)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((x_sre).xascii_iscased)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xunicode_iscased)) ((xi)))) ((((xc).neq ((((xc).xlower)) 0)).or ((xc).neq ((((xc).xupper)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xascii_tolower)) (304))) (304))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((x_sre).xunicode_tolower)) (304))) ((((xord)) ("i"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((x_sre).xascii_iscased)) (304))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((x_sre).xunicode_iscased)) (304))))
                xtest_not_literal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("s([^a])") (" b")).xgroup)) (1))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("s([^a]*)") (" bb")).xgroup)) (1))) ("bb"))
                xtest_possible_set_operations.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write ((((((xbytes)) ((((xrange)) (128)))).xdecode)) 0)
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[0-9--1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("-./0123456789"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("[--1]") ((xs)))) ((((xlist)) ("-./01"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[%--1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("%&'()*+,-1"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[%--]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("%&'()*+,-"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[0-9&&1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("&0123456789"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[d&&1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("&0123456789"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("[&&1]") ((xs)))) ((((xlist)) ("&1"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[0-9||a]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("0123456789a|"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[d||a]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("0123456789a|"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("[||1]") ((xs)))) ((((xlist)) ("1|"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[0-9~~1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("0123456789~"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[d~~1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("0123456789~"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("[~~1]") ((xs)))) ((((xlist)) ("1~"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[[0-9]|]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) ("0123456789[]"))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)) ("[[:digit:]|]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xp).xfindall)) ((xs)))) ((((xlist)) (":[]dgit"))))
                xtest_search_coverage.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("s(b)") (" b")).xgroup)) (1))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("as") ("a ")).xgroup)) (0))) ("a "))
                xassertMatch.write
                  [xself xpattern xtext xmatch xspan xmatcher]
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        ((((unsupported)) ((xmatch)) ("None: is there a None literal in the EO language?")).and (((unsupported)) ((xspan)) ("None: is there a None literal in the EO language?"))).if
                          seq
                            xmatch.write (xtext)
                            xspan.write (((unsupported)) (0) ((((xlen)) ((xtext)))))
                          ((((unsupported)) ((xmatch)) ("None: is there a None literal in the EO language?")).or (((unsupported)) ((xspan)) ("None: is there a None literal in the EO language?"))).if
                            (((unsupported)) ((((xValueError)) ("If match is not None, span should be specified (and vice versa)."))))
                        xm.write (((xmatcher)) ((xpattern)) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) 0)) ((xmatch)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xspan)) 0)) ((xspan)))
                xLITERAL_CHARS.write ((((xstring).xascii_letters).add ((xstring).xdigits)).add "!\"%',/:;<=>@_`")
                xtest_re_escape.write
                  [xself]
                    memory > xp
                    memory > xliteral_chars
                    seq > @
                      seq
                        xp.write ((("".xjoin)) ((((unsupported)) ((((xchr)) ((xi)))) ((xi)) ((((xrange)) (256))))))
                        (((unsupported)) ((xc)) ((xp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertMatch)) (((((xre).xescape)) ((xc)))) ((xc)))
                            bogusForceDataize.write ((((xself).xassertMatch)) ((("[".add ((((xre).xescape)) ((xc)))).add "]")) ((xc)))
                            bogusForceDataize.write ((((xself).xassertMatch)) (("(?x)".add ((((xre).xescape)) ((xc))))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertMatch)) (((((xre).xescape)) ((xp)))) ((xp)))
                        (((unsupported)) ((xc)) ("-.]{}"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xre).xescape)) ((xc)))) ((((unsupported)) (1))))) ("\\"))
                        xliteral_chars.write ((xself).xLITERAL_CHARS)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xescape)) ((xliteral_chars)))) ((xliteral_chars)))
                xtest_re_escape_bytes.write
                  [xself]
                    memory > xp
                    memory > xliteral_chars
                    memory > xb
                    seq > @
                      seq
                        xp.write (((xbytes)) ((((xrange)) (256))))
                        (((unsupported)) ((xi)) ((xp)))
                          seq
                            xb.write (((xbytes)) ((((unsupported)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertMatch)) (((((xre).xescape)) ((xb)))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertMatch)) ((("[".add ((((xre).xescape)) ((xb)))).add "]")) ((xb)))
                            bogusForceDataize.write ((((xself).xassertMatch)) (("(?x)".add ((((xre).xescape)) ((xb))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertMatch)) (((((xre).xescape)) ((xp)))) ((xp)))
                        (((unsupported)) ((xi)) ("-.]{}"))
                          seq
                            xb.write (((xbytes)) ((((unsupported)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xre).xescape)) ((xb)))) ((((unsupported)) (1))))) ("\\"))
                        xliteral_chars.write (((((xself).xLITERAL_CHARS).xencode)) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xescape)) ((xliteral_chars)))) ((xliteral_chars)))
                xtest_re_escape_non_ascii.write
                  [xself]
                    memory > xs
                    memory > xs_escaped
                    seq > @
                      seq
                        xs.write "xxxu2620u2620u2620xxx"
                        xs_escaped.write ((((xre).xescape)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs_escaped)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertMatch)) ((xs_escaped)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertMatch)) ((".%s+.".mod ((((xre).xescape)) ("u2620")))) ((xs)) ("xu2620u2620u2620x") ((((unsupported)) (2) (7))) (((xre).xsearch)))
                xtest_re_escape_non_ascii_bytes.write
                  [xself]
                    memory > xres
                    memory > xb
                    memory > xb_escaped
                    seq > @
                      seq
                        xb.write ((("yu2620yu2620y".xencode)) ("utf-8"))
                        xb_escaped.write ((((xre).xescape)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xb_escaped)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertMatch)) ((xb_escaped)) ((xb)))
                        xres.write ((((xre).xfindall)) (((((xre).xescape)) (((("u2620".xencode)) ("utf-8"))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xres)))) (2))
                xtest_pickling.write
                  [xself]
                    memory > xoldpat
                    memory > xnewpat
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xoldpat.write ((((xre).xcompile)) ("a(?:b|(c|e){1,2}?|d)+?(.)") (((xre).xUNICODE)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)) ((xoldpat)) ((xproto)))
                            xnewpat.write ((((xpickle).xloads)) ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xnewpat)) ((xoldpat)))
                        (((unsupported)) 0)
                xtest_copying.write
                  [xself]
                    memory > xp
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xp.write ((((xre).xcompile)) ("(?P<int>d+)(?:.(?P<frac>d*))?"))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xcopy).xcopy)) ((xp)))) ((xp)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xcopy).xdeepcopy)) ((xp)))) ((xp)))
                        xm.write ((((xp).xmatch)) ("12.34"))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xcopy).xcopy)) ((xm)))) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xcopy).xdeepcopy)) ((xm)))) ((xm)))
                xtest_constants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xre).xI)) (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xre).xL)) (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xre).xM)) (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xre).xS)) (((xre).xDOTALL)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xre).xX)) (((xre).xVERBOSE)))
                xtest_flags.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xflag)) ((((unsupported)) (((xre).xI)) (((xre).xM)) (((xre).xX)) (((xre).xS)) (((xre).xA)) (((xre).xU)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xcompile)) ("^pattern$") ((xflag)))))
                        (((unsupported)) ((xflag)) ((((unsupported)) (((xre).xI)) (((xre).xM)) (((xre).xX)) (((xre).xS)) (((xre).xA)) (((xre).xL)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xcompile)) ("^pattern$") ((xflag)))))
                xtest_sre_character_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((unsupported)) (0) (8) (16) (32) (64) (127) (128) (255) (256) (65535) (65536) (1114111))))
                          seq
                            ((xi).less 256).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("%03o".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("%03o0".mod (xi))) (((((xchr)) ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("%03o8".mod (xi))) (((((xchr)) ((xi))).add "8")))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("x%02x".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("x%02x0".mod (xi))) (((((xchr)) ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("x%02xz".mod (xi))) (((((xchr)) ((xi))).add "z")))))
                            ((xi).less 65536).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("u%04x".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("u%04x0".mod (xi))) (((((xchr)) ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("u%04xz".mod (xi))) (((((xchr)) ((xi))).add "z")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("U%08x".mod (xi))) ((((xchr)) ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("U%08x0".mod (xi))) (((((xchr)) ((xi))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("U%08xz".mod (xi))) (((((xchr)) ((xi))).add "z")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("0") ("000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("08") ("0008"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("01") ("001"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("018") ("0018"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("567") ("octal escape value 567 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("911") ("invalid group reference 91") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("x1") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("x1z") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("u123") ("incomplete escape u123") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("u123z") ("incomplete escape u123") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("U0001234") ("incomplete escape U0001234") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("U0001234z") ("incomplete escape U0001234") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("U00110000") ("bad escape U00110000") (0))
                xtest_sre_character_class_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((unsupported)) (0) (8) (16) (32) (64) (127) (128) (255) (256) (65535) (65536) (1114111))))
                          seq
                            ((xi).less 256).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[%o]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[%o8]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[%03o]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[%03o0]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[%03o8]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[x%02x]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[x%02x0]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[x%02xz]".mod (xi))) ((((xchr)) ((xi)))))))
                            ((xi).less 65536).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[u%04x]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[u%04x0]".mod (xi))) ((((xchr)) ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[u%04xz]".mod (xi))) ((((xchr)) ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[U%08x]".mod (xi))) ((((xchr)) ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[U%08x0]".mod (xi))) (((((xchr)) ((xi))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("[U%08xz]".mod (xi))) (((((xchr)) ((xi))).add "z")))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[567]") ("octal escape value 567 outside of range 0-0o377") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[911]") ("bad escape 9") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[x1z]") ("incomplete escape x1") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[u123z]") ("incomplete escape u123") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[U0001234z]") ("incomplete escape U0001234") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[U00110000]") ("bad escape U00110000") (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("[U0001d49c-U0001d4b5]") ("U0001d49e"))))
                xtest_sre_byte_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((unsupported)) (0) (8) (16) (32) (64) (127) (128) (255))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("%03o".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("%03o0".mod (xi)).xencode)) 0)) (((((xbytes)) ((((unsupported)) ((xi))))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("%03o8".mod (xi)).xencode)) 0)) (((((xbytes)) ((((unsupported)) ((xi))))).add "8")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("x%02x".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("x%02x0".mod (xi)).xencode)) 0)) (((((xbytes)) ((((unsupported)) ((xi))))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("x%02xz".mod (xi)).xencode)) 0)) (((((xbytes)) ((((unsupported)) ((xi))))).add "z")))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("u1234"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("U00012345"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("0") ("000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("08") ("0008"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("01") ("001"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("018") ("0018"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("567") ("octal escape value 567 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("911") ("invalid group reference 91") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("x1") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("x1z") ("incomplete escape x1") (0))
                xtest_sre_byte_class_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xi)) ((((unsupported)) (0) (8) (16) (32) (64) (127) (128) (255))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[%o]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[%o8]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[%03o]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[%03o0]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[%03o8]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[x%02x]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[x%02x0]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((((("[x%02xz]".mod (xi)).xencode)) 0)) ((((xbytes)) ((((unsupported)) ((xi)))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("[u1234]"))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("[U00012345]"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[567]") ("octal escape value 567 outside of range 0-0o377") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[911]") ("bad escape 9") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[x1z]") ("incomplete escape x1") (1))
                xtest_character_set_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[^") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[a") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[a-") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[w-b]") ("bad character range w-b") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[a-w]") ("bad character range a-w") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("[b-a]") ("bad character range b-a") (1))
                xtest_bug_113254.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)|(b)") ("b")).xstart)) (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)|(b)") ("b")).xend)) (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)|(b)") ("b")).xspan)) (1))) ((((unsupported)) ((1.neg)) ((1.neg)))))
                xtest_bug_527371.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((((xre).xmatch)) ("(a)?a") ("a")).xlastindex)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(a)(b)?b") ("ab")).xlastindex)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(?P<a>a)(?P<b>b)?b") ("ab")).xlastgroup)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("(?P<a>a(b))") ("ab")).xlastgroup)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xmatch)) ("((a))") ("a")).xlastindex)) (1))
                xtest_bug_418626.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".*?c") (((10000.mul "ab").add "cd"))).xend)) (0))) (20001))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".*?cd") (((((5000.mul "ab").add "c").add (5000.mul "ab")).add "cde"))).xend)) (0))) (20003))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".*?cd") (((20000.mul "abc").add "de"))).xend)) (0))) (60001))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ("(a|b)*?c") (((10000.mul "ab").add "cd"))).xend)) (0))) (20001))
                xtest_bug_612074.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write (("[".add ((((xre).xescape)) ("u2039"))).add "]")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xre).xcompile)) ((xpat))).and 1)) (1))
                xtest_stack_overflow.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(x)*") ((50000.mul "x"))).xgroup)) (1))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(x)*y") (((50000.mul "x").add "y"))).xgroup)) (1))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(x)*?y") (((50000.mul "x").add "y"))).xgroup)) (1))) ("x"))
                xtest_nothing_to_repeat.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xreps)) ((((unsupported)) ("*") ("+") ("?") ("{1,2}"))))
                        (((unsupported)) ((xmod)) ((((unsupported)) ("") ("?"))))
                          seq
                            bogusForceDataize.write ((((xself).xcheckPatternError)) (("%s%s".mod (((unsupported)) ((xreps)) ((xmod))))) ("nothing to repeat") (0))
                            bogusForceDataize.write ((((xself).xcheckPatternError)) (("(?:%s%s)".mod (((unsupported)) ((xreps)) ((xmod))))) ("nothing to repeat") (3))
                xtest_multiple_repeat.write
                  [xself]
                    memory > xinner_op
                    memory > xouter_op
                    seq > @
                      (((unsupported)) ((xouter_reps)) ((((unsupported)) ("*") ("+") ("{1,2}"))))
                        (((unsupported)) ((xouter_mod)) ((((unsupported)) ("") ("?"))))
                          seq
                            xouter_op.write ((xouter_reps).add (xouter_mod))
                            (((unsupported)) ((xinner_reps)) ((((unsupported)) ("*") ("+") ("?") ("{1,2}"))))
                              (((unsupported)) ((xinner_mod)) ((((unsupported)) ("") ("?"))))
                                seq
                                  xinner_op.write ((xinner_reps).add (xinner_mod))
                                  bogusForceDataize.write ((((xself).xcheckPatternError)) (("x%s%s".mod (((unsupported)) ((xinner_op)) ((xouter_op))))) ("multiple repeat") ((1.add (((xlen)) ((xinner_op))))))
                xtest_unlimited_zero_width_repeat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?)*y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?)+y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?){2,}y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?)*?y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?)+?y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?:a?){2,}?y") ("z"))))
                xtest_scanner.write
                  [xself]
                    memory > xs_int
                    memory > xs_ident
                    memory > xs_float
                    memory > xs_operator
                    memory > xscanner
                    seq > @
                      seq
                        xs_ident.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)) ((xtoken)))
                        xs_operator.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)) (("op%s".mod (xtoken))))
                        xs_float.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)) ((((xfloat)) ((xtoken)))))
                        xs_int.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)) ((((xint)) ((xtoken)))))
                        xscanner.write (((xScanner)) ((((unsupported)) ((((unsupported)) ("[a-zA-Z_]w*") ((xs_ident)))) ((((unsupported)) ("d+.d*") ((xs_float)))) ((((unsupported)) ("d+") ((xs_int)))) ((((unsupported)) ("=|+|-|*|/") ((xs_operator)))) ((((unsupported)) ("s+") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((((xscanner).xscanner).xscanner)) ("")).xpattern)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xscanner).xscan)) ("sum = 3*foo + 312.50 + bar"))) ((((unsupported)) ((((unsupported)) ("sum") ("op=") (3) ("op*") ("foo") ("op+") (312.5) ("op+") ("bar"))) (""))))
                xtest_bug_448951.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xop)) ((((unsupported)) ("") ("?") ("*"))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("((.%s):)?z".mod (xop))) ("z")).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (("((.%s):)?z".mod (xop))) ("a:z")).xgroups)) 0)) ((((unsupported)) ("a:") ("a"))))
                xtest_bug_725106.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((a)|b)*") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(([ab])|c)*") ("abc")).xgroups)) 0)) ((((unsupported)) ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((d)|[ab])*") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((a)c|[ab])*") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((a)|b)*?c") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^(([ab])|c)*?d") ("abcd")).xgroups)) 0)) ((((unsupported)) ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((d)|[ab])*?c") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^((a)c|[ab])*?c") ("abc")).xgroups)) 0)) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?"))))
                xtest_bug_725149.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)(?:(?=(b)*)c)*") ("abb")).xgroups)) 0)) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(a)((?!(b)*))*") ("abb")).xgroups)) 0)) ((((unsupported)) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_bug_764548.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)) ((xstr)))
                        xpat.write ((((xre).xcompile)) ((((xmy_unicode)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xyz"))))
                xtest_finditer.write
                  [xself]
                    memory > xiter
                    memory > xpat
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)) (":+") ("a:b::c:::d"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xitem).xgroup)) (0))) ((xitem)) ((xiter)))) ((((unsupported)) (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)) (":+"))
                        xiter.write ((((xpat).xfinditer)) ("a:b::c:::d") (1) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xitem).xgroup)) (0))) ((xitem)) ((xiter)))) ((((unsupported)) (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)) (":+"))
                        xiter.write (((unsupported)) (((xpat).xfinditer)) ("a:b::c:::d") (1) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xitem).xgroup)) (0))) ((xitem)) ((xiter)))) ((((unsupported)) (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)) (":+"))
                        xiter.write (((unsupported)) (((xpat).xfinditer)) ("a:b::c:::d") (10) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xitem).xgroup)) (0))) ((xitem)) ((xiter)))) ((((unsupported)) (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)) (":+"))
                        xiter.write (((unsupported)) (((xpat).xfinditer)) ("a:b::c:::d") (3) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xitem).xgroup)) (0))) ((xitem)) ((xiter)))) ((((unsupported)) ("::") ("::"))))
                xtest_bug_926075.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsNot)) (((((xre).xcompile)) ("bug_926075"))) (((((xre).xcompile)) ("bug_926075"))))
                xtest_bug_931848.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write "[u002Eu3002uFF0EuFF61]"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xcompile)) ((xpattern))).xsplit)) ("a.b.c"))) ((((unsupported)) ("a") ("b") ("c"))))
                xtest_bug_581080.write
                  [xself]
                    memory > xiter
                    memory > xscanner
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)) ("s") ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xnext)) ((xiter))).xspan)) 0)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xiter)))
                        xscanner.write (((((((xre).xcompile)) ("s")).xscanner)) ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xscanner).xsearch)) 0).xspan)) 0)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xscanner).xsearch)) 0)))
                xtest_bug_817234.write
                  [xself]
                    memory > xiter
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)) (".*") ("asdf"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xnext)) ((xiter))).xspan)) 0)) ((((unsupported)) (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xnext)) ((xiter))).xspan)) 0)) ((((unsupported)) (4) (4))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xiter)))
                xtest_bug_6561.write
                  [xself]
                    memory > xdecimal_digits
                    memory > xnot_decimal_digits
                    seq > @
                      seq
                        xdecimal_digits.write (((unsupported)) ("u0037") ("u0e58") ("uff10"))
                        (((unsupported)) ((xx)) ((xdecimal_digits)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("^d$") ((xx))).xgroup)) (0))) ((xx)))
                        xnot_decimal_digits.write (((unsupported)) ("u2165") ("u3039") ("u2082") ("u32b4"))
                        (((unsupported)) ((xx)) ((xnot_decimal_digits)))
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("^d$") ((xx)))))
                xtest_empty_array.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xtypecode)) ("bBuhHiIlLfd"))
                          seq
                            xa.write ((((xarray).xarray)) ((xtypecode)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) ((((((((xre).xcompile)) ("bla")).xmatch)) ((xa)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((((((((xre).xcompile)) ("")).xmatch)) ((xa))).xgroups)) 0)) ((((unsupported)) 0)))
                xtest_inline_flags.write
                  [xself]
                    memory > xp
                    memory > xupper_char
                    memory > xlower_char
                    memory > xq
                    seq > @
                      seq
                        xupper_char.write "u1ea0"
                        xlower_char.write "u1ea1"
                        xp.write ((((xre).xcompile)) ((".".add (xupper_char))) ((((xre).xI).or ((xre).xS))))
                        xq.write ((((xp).xmatch)) (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) ((".".add (xlower_char))) ((((xre).xI).or ((xre).xS))))
                        xq.write ((((xp).xmatch)) (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?i).".add (xupper_char))) (((xre).xS)))
                        xq.write ((((xp).xmatch)) (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?i).".add (xlower_char))) (((xre).xS)))
                        xq.write ((((xp).xmatch)) (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?is).".add (xupper_char))))
                        xq.write ((((xp).xmatch)) (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?is).".add (xlower_char))))
                        xq.write ((((xp).xmatch)) (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?s)(?i).".add (xupper_char))))
                        xq.write ((((xp).xmatch)) (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        xp.write ((((xre).xcompile)) (("(?s)(?i).".add (xlower_char))))
                        xq.write ((((xp).xmatch)) (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("(?ix) ".add (xupper_char))) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("(?ix) ".add (xlower_char))) ((xupper_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((" (?i) ".add (xupper_char))) ((xlower_char)) (((xre).xX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("(?x) (?i) ".add (xupper_char))) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((" (?x) (?i) ".add (xupper_char))) ((xlower_char)) (((xre).xX)))))
                        xp.write ((xupper_char).add "(?i)")
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((xp)) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r".mod (xp))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        xp.write ((xupper_char).add ("(?i)%s".mod (".?".mul 100)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((xp)) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r (truncated)".mod (((unsupported)) ((xp)) ((((unsupported)) (20)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xBytesWarning)))
                            xp.write "A(?i)"
                            (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((xp)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r".mod (xp))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("(?s).(?i)".add (xupper_char))) (("n".add (xlower_char))))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((("(?i) ".add (xupper_char)).add " (?x)")) ((xlower_char)))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((" (?x) (?i) ".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("^(?i)".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) (("$|(?i)".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ((("(?:(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xfullmatch)) ((("(^)?(?(1)(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xfullmatch)) ((("($)?(?(1)|(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                xtest_dollar_matches_twice.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        unsupported
                        xpattern.write ((((xre).xcompile)) ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("anbn"))) ("anb#n#"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("anbnc"))) ("anbnc#"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("n"))) ("#n#"))
                        xpattern.write ((((xre).xcompile)) ("$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("anbn"))) ("a#nb#n#"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("anbnc"))) ("a#nb#nc#"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpattern).xsub)) ("#") ("n"))) ("#n#"))
                xtest_bytes_str_mixing.write
                  [xself]
                    memory > xbpat
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)) ("."))
                        xbpat.write ((((xre).xcompile)) ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpat).xmatch)) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbpat).xmatch)) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                xtest_ascii_and_unicode_flag.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)) ((xflags)) ((((unsupported)) (0) (((xre).xUNICODE)))))
                          seq
                            xpat.write ((((xre).xcompile)) ("xc0") (((xflags).or ((xre).xIGNORECASE))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ("xe0"))))
                            xpat.write ((((xre).xcompile)) ("w") ((xflags)))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ("xe0"))))
                        xpat.write ((((xre).xcompile)) ("xc0") ((((xre).xASCII).or ((xre).xIGNORECASE))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                        xpat.write ((((xre).xcompile)) ("(?a)xc0") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                        xpat.write ((((xre).xcompile)) ("w") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                        xpat.write ((((xre).xcompile)) ("(?a)w"))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                        (((unsupported)) ((xflags)) ((((unsupported)) (0) (((xre).xASCII)))))
                          seq
                            xpat.write ((((xre).xcompile)) ("xc0") (((xflags).or ((xre).xIGNORECASE))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                            xpat.write ((((xre).xcompile)) ("w") ((xflags)))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ("xe0"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("w") (((xre).xUNICODE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(?u)w"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("w") ((((xre).xUNICODE).or ((xre).xASCII))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("(?u)w") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("(?a)w") (((xre).xUNICODE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(?au)w"))
                xtest_locale_flag.write
                  [xself]
                    memory > xc
                    memory > xbletter
                    memory > xsletter
                    memory > xbpat
                    memory > xpat
                    memory > xenc
                    seq > @
                      seq
                        xenc.write ((((xlocale).xgetpreferredencoding)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (128) (256))))
                          (((unsupported)) ((((unsupported)) ((xUnicodeError)) ((xTypeError)))))
                            seq
                              xc.write ((((((xbytes)) ((((unsupported)) ((xi))))).xdecode)) ((xenc)))
                              xsletter.write ((((xc).xlower)) 0)
                              ((xsletter).eq (xc)).if
                                (((unsupported)) 0)
                              xbletter.write ((((xsletter).xencode)) ((xenc)))
                              ((((xlen)) ((xbletter))).neq 1).if
                                (((unsupported)) 0)
                              (((((xbletter).xdecode)) ((xenc))).neq (xsletter)).if
                                (((unsupported)) 0)
                              xbpat.write ((((xre).xescape)) ((((xbytes)) ((((unsupported)) ((xi)))))))
                              (((unsupported)) 0)
                          seq
                            xbletter.write "None: is there a None literal in the EO language?"
                            xbpat.write "A"
                        xpat.write ((((xre).xcompile)) ((xbpat)) ((((xre).xLOCALE).or ((xre).xIGNORECASE))))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ((xbletter)))))
                        xpat.write ((((xre).xcompile)) (("(?L)".add (xbpat))) (((xre).xIGNORECASE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ((xbletter)))))
                        xpat.write ((((xre).xcompile)) ((xbpat)) (((xre).xIGNORECASE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ((xbletter)))))
                        xpat.write ((((xre).xcompile)) ("w") (((xre).xLOCALE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ((xbletter)))))
                        xpat.write ((((xre).xcompile)) ("(?L)w"))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)) (((((xpat).xmatch)) ((xbletter)))))
                        xpat.write ((((xre).xcompile)) ("w"))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertIsNone)) (((((xpat).xmatch)) ((xbletter)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("") (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(?L)"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("") ((((xre).xLOCALE).or ((xre).xASCII))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("(?L)") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xre).xcompile)) ("(?a)") (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xre).xerror)) (((xre).xcompile)) ("(?aL)"))
                xtest_scoped_flags.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?i:a)b") ("Ab"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?i:a)b") ("aB"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?-i:a)b") ("Ab") (((xre).xIGNORECASE)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?-i:a)b") ("aB") (((xre).xIGNORECASE)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?i:(?-i:a)b)") ("Ab"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?i:(?-i:a)b)") ("aB"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?x: a) b") ("a b"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?x: a) b") (" a b"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?-x: a) b") (" ab") (((xre).xVERBOSE)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?-x: a) b") ("ab") (((xre).xVERBOSE)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("w(?a:W)w") ("xe0xe0xe0"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?a:W(?u:w)W)") ("xe0xe0xe0"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("W(?u:w)W") ("xe0xe0xe0") (((xre).xASCII)))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?a)(?-a:w)") ("bad inline flags: cannot turn off flags 'a', 'u' and 'L'") (8))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?i-i:a)") ("bad inline flags: flag turned on and off") (5))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?au:a)") ("bad inline flags: flags 'a', 'u' and 'L' are incompatible") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?aL:a)") ("bad inline flags: flags 'a', 'u' and 'L' are incompatible") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-") ("missing flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-+") ("missing flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-z") ("unknown flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-i") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-i)") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-i+") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?-iz") ("unknown flag") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?i:") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?i") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?i+") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?iz") ("unknown flag") (3))
                xtest_bug_6509.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)) ("a(w)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) 0)) ("ac"))) ("bc"))
                        xpat.write ((((xre).xcompile)) ("a(.)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) 0)) ("au1234"))) ("bu1234"))
                        xpat.write ((((xre).xcompile)) (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) ("str"))) ("a5"))) ("str"))
                        xpat.write ((((xre).xcompile)) ("a(w)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) 0)) ("ac"))) ("bc"))
                        xpat.write ((((xre).xcompile)) ("a(.)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) 0)) ("axCD"))) ("bxCD"))
                        xpat.write ((((xre).xcompile)) (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xpat).xsub)) ((((unsupported)) ("bytes"))) ("a5"))) ("bytes"))
                xtest_dealloc.write
                  [xself]
                    memory > xlong_overflow
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xlong_overflow.write (((unsupported)) (2) (128))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xre).xfinditer)) ("a") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOverflowError)))))
                          bogusForceDataize.write ((((x_sre).xcompile)) ("abc") (0) ((((unsupported)) ((xlong_overflow)))) (0) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((x_sre).xcompile)) ((((unsupported)) 0)) (0) ((((unsupported)) 0)) (0) ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_search_dot_unicode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("123.*-") ("123abc-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("123.*-") ("123xe9-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("123.*-") ("123u20ac-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("123.*-") ("123U0010ffff-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xsearch)) ("123.*-") ("123xe9u20acU0010ffff-"))))
                xtest_compile.write
                  [xself]
                    memory > xsame_pattern
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ((((xre).xcompile)) ("random pattern"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xpattern)) (((xre).xPattern)))
                        xsame_pattern.write ((((xre).xcompile)) ((xpattern)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsame_pattern)) (((xre).xPattern)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xsame_pattern)) ((xpattern)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xre).xcompile)) (0))
                xtest_large_search.write
                  [xself xsize]
                    memory > xs
                    memory > xm
                    seq > @
                      (((unsupported)) 0)
                        xs.write ("a".mul (xsize))
                        xm.write ((((xre).xsearch)) ("$") ((xs)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xstart)) 0)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xend)) 0)) ((xsize)))
                xtest_large_subn.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ("a".mul (xsize))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xn)))) (((((xre).xsubn)) ("") ("") ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xn)) (((xsize).add 1)))
                xtest_bug_16688.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("(?i)(a)1") ("aa u0100"))) ((((unsupported)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ("(?s).{1,3}") ("u0100u0100")).xspan)) 0)) ((((unsupported)) (0) (2))))
                xtest_repeat_minmax_overflow.write
                  [xself]
                    memory > xstring
                    seq > @
                      seq
                        xstring.write ("x".mul 100000)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{65535}") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{,65535}") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{65535,}?") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{65536}") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{,65536}") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) (".{65536,}?") ((xstring))).xspan)) 0)) ((((unsupported)) (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{%d}".mod (((unsupported)) (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{,%d}".mod (((unsupported)) (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{%d,}?".mod (((unsupported)) (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{%d,%d}".mod (((unsupported)) ((((unsupported)) (2) (129))) ((((unsupported)) (2) (128)))))))
                xtest_repeat_minmax_overflow_maxrepeat.write
                  [xself]
                    memory > xstring
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xImportError)))
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("requires _sre.MAXREPEAT constant"))
                        xstring.write ("x".mul 100000)
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ((".{%d}".mod ((xMAXREPEAT).sub 1))) ((xstring)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xmatch)) ((".{,%d}".mod ((xMAXREPEAT).sub 1))) ((xstring))).xspan)) 0)) ((((unsupported)) (0) (100000))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ((".{%d,}?".mod ((xMAXREPEAT).sub 1))) ((xstring)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{%d}".mod (xMAXREPEAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{,%d}".mod (xMAXREPEAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) (((xre).xcompile)) ((".{%d,}?".mod (xMAXREPEAT))))
                xtest_backref_group_name_in_exception.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P=<foo>)") ("bad character in group name '<foo>'") (4))
                xtest_group_name_in_exception.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P<?foo>)") ("bad character in group name '?foo'") (4))
                xtest_issue17998.write
                  [xself]
                    memory > xpattern
                    seq > @
                      (((unsupported)) ((xreps)) ((((unsupported)) ("*") ("+") ("?") ("{1}"))))
                        (((unsupported)) ((xmod)) ((((unsupported)) ("") ("?"))))
                          seq
                            xpattern.write (((".".add (xreps)).add (xmod)).add "yz")
                            (((unsupported)) (((xself).xassertEqual)) ((((((((xre).xcompile)) ((xpattern)) (((xre).xS))).xfindall)) ("xyz"))) ((((unsupported)) ("xyz"))) ((xpattern)))
                            xpattern.write ((((xpattern).xencode)) 0)
                            (((unsupported)) (((xself).xassertEqual)) ((((((((xre).xcompile)) ((xpattern)) (((xre).xS))).xfindall)) ("xyz"))) ((((unsupported)) ("xyz"))) ((xpattern)))
                xtest_match_repr.write
                  [xself]
                    memory > xm
                    memory > xpattern
                    seq > @
                      seq
                        (((unsupported)) ((xstring)) ((((unsupported)) ("[abracadabra]") ((((xS)) ("[abracadabra]"))))))
                          seq
                            xm.write ((((xre).xsearch)) ("(.+)(.*?)1") ((xstring)))
                            xpattern.write ("<(%s.)?%s object; span=(1, 12), match='abracadabra'>".mod (((unsupported)) (((((xtype)) ((xm))).x__module__)) (((((xtype)) ((xm))).x__qualname__))))
                            bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xm)))) ((xpattern)))
                        (((unsupported)) ((xstring)) ((((unsupported)) ("[abracadabra]") ((((xB)) ("[abracadabra]"))) ((((xbytearray)) ("[abracadabra]"))) ((((xmemoryview)) ("[abracadabra]"))))))
                          seq
                            xm.write ((((xre).xsearch)) ("(.+)(.*?)1") ((xstring)))
                            xpattern.write ("<(%s.)?%s object; span=(1, 12), match=b'abracadabra'>".mod (((unsupported)) (((((xtype)) ((xm))).x__module__)) (((((xtype)) ((xm))).x__qualname__))))
                            bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xm)))) ((xpattern)))
                        (((unsupported)) ((((unsupported)) ((xfirst)) ((xsecond)))) ((((xlist)) (((((xre).xfinditer)) ("(aa)|(bb)") ("aa bb"))))))
                        xpattern.write ("<(%s.)?%s object; span=(0, 2), match='aa'>".mod (((unsupported)) (((((xtype)) ((xsecond))).x__module__)) (((((xtype)) ((xsecond))).x__qualname__))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xfirst)))) ((xpattern)))
                        xpattern.write ("<(%s.)?%s object; span=(3, 5), match='bb'>".mod (((unsupported)) (((((xtype)) ((xsecond))).x__module__)) (((((xtype)) ((xsecond))).x__qualname__))))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xsecond)))) ((xpattern)))
                xtest_zerowidth.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("b") ("a::bc"))) ((((unsupported)) ("") ("a") ("::") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("b|:+") ("a::bc"))) ((((unsupported)) ("") ("a") ("") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(?<!w)(?=w)|:+") ("a::bc"))) ((((unsupported)) ("") ("a") ("") ("bc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsplit)) ("(?<=w)(?!w)|:+") ("a::bc"))) ((((unsupported)) ("a") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("b") ("-") ("a::bc"))) ("-a-::-bc-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("b|:+") ("-") ("a::bc"))) ("-a---bc-"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xsub)) ("(b|:+)") ("[1]") ("a::bc"))) ("[]a[][::][]bc[]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("b|:+") ("a::bc"))) ((((unsupported)) ("") ("") ("::") ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ("b|w+") ("a::bc"))) ((((unsupported)) ("") ("a") ("") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xspan)) 0)) ((xm)) (((((xre).xfinditer)) ("b|:+") ("a::bc"))))) ((((unsupported)) ((((unsupported)) (0) (0))) ((((unsupported)) (1) (1))) ((((unsupported)) (1) (3))) ((((unsupported)) (3) (3))) ((((unsupported)) (5) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xspan)) 0)) ((xm)) (((((xre).xfinditer)) ("b|w+") ("a::bc"))))) ((((unsupported)) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (1))) ((((unsupported)) (1) (1))) ((((unsupported)) (3) (3))) ((((unsupported)) (3) (5))) ((((unsupported)) (5) (5))))))
                xtest_bug_2537.write
                  [xself]
                    memory > xr
                    memory > xm
                    seq > @
                      (((unsupported)) ((xouter_op)) ((((unsupported)) ("{0,}") ("*") ("+") ("{1,187}"))))
                        (((unsupported)) ((xinner_op)) ((((unsupported)) ("{0,}") ("*") ("?"))))
                          seq
                            xr.write ((((xre).xcompile)) (("^((x|y)%s)%s".mod (((unsupported)) ((xinner_op)) ((xouter_op))))))
                            xm.write ((((xr).xmatch)) ("xyyzy"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (0))) ("xyy"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (1))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) (2))) ("y"))
                xtest_debug_flag.write
                  [xself]
                    memory > xpat
                    memory > xdump
                    seq > @
                      (((unsupported)) 0)
                        xpat.write "(.)(?:[ch]|py)(?(1)$|: )"
                        (((unsupported)) ((((xcaptured_stdout)) 0)) ((xout)))
                          bogusForceDataize.write ((((xre).xcompile)) ((xpat)) (((xre).xDEBUG)))
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        xdump.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xout).xgetvalue)) 0)) ((xdump)))
                        (((unsupported)) ((((xcaptured_stdout)) 0)) ((xout)))
                          bogusForceDataize.write ((((xre).xcompile)) ((xpat)) (((xre).xDEBUG)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xout).xgetvalue)) 0)) ((xdump)))
                xtest_keyword_parameters.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)) ("(ab)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) (((xpat).xmatch)) ("abracadabra") (7) (10)).xspan)) 0)) ((((unsupported)) (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) (((xpat).xfullmatch)) ("abracadabra") (7) (9)).xspan)) 0)) ((((unsupported)) (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) (((xpat).xsearch)) ("abracadabra") (3) (10)).xspan)) 0)) ((((unsupported)) (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xpat).xfindall)) ("abracadabra") (3) (10))) ((((unsupported)) ("ab"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xpat).xsplit)) ("abracadabra") (1))) ((((unsupported)) ("") ("ab") ("racadabra"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((((unsupported)) (((xpat).xscanner)) ("abracadabra") (3) (10)).xsearch)) 0).xspan)) 0)) ((((unsupported)) (7) (9))))
                xtest_bug_20998.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xfullmatch)) ("[a-c]+") ("ABC") (((xre).xI))).xspan)) 0)) ((((unsupported)) (0) (3))))
                xtest_locale_caching.write
                  [xself]
                    memory > xoldlocale
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)) ((xloc)) ((((unsupported)) ("en_US.iso88591") ("en_US.utf8"))))
                          (((unsupported)) (((xlocale).xError)))
                            bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xloc)))
                            bogusForceDataize.write ((((xself).xskipTest)) (("test needs %s locale".mod (xloc))))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        bogusForceDataize.write ((((xself).xcheck_en_US_iso88591)) 0)
                        bogusForceDataize.write ((((xself).xcheck_en_US_utf8)) 0)
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        bogusForceDataize.write ((((xself).xcheck_en_US_utf8)) 0)
                        bogusForceDataize.write ((((xself).xcheck_en_US_iso88591)) 0)
                xcheck_en_US_iso88591.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("en_US.iso88591"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("xc5xe5") ("xc5xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("xc5") ("xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("xe5") ("xc5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?Li)xc5xe5") ("xc5xe5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?Li)xc5") ("xe5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?Li)xe5") ("xc5"))))
                xcheck_en_US_utf8.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("en_US.utf8"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("xc5xe5") ("xc5xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("xc5") ("xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("xe5") ("xc5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xre).xmatch)) ("(?Li)xc5xe5") ("xc5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?Li)xc5") ("xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xre).xmatch)) ("(?Li)xe5") ("xc5"))))
                xtest_locale_compiled.write
                  [xself]
                    memory > xp2
                    memory > xp4
                    memory > xoldlocale
                    memory > xp3
                    memory > xp1
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)) ((xloc)) ((((unsupported)) ("en_US.iso88591") ("en_US.utf8"))))
                          (((unsupported)) (((xlocale).xError)))
                            bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xloc)))
                            bogusForceDataize.write ((((xself).xskipTest)) (("test needs %s locale".mod (xloc))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("en_US.iso88591"))
                        xp1.write ((((xre).xcompile)) ("xc5xe5") ((((xre).xL).or ((xre).xI))))
                        xp2.write ((((xre).xcompile)) ("[axc5][axe5]") ((((xre).xL).or ((xre).xI))))
                        xp3.write ((((xre).xcompile)) ("[azxc5][azxe5]") ((((xre).xL).or ((xre).xI))))
                        xp4.write ((((xre).xcompile)) ("[^xc5][^xe5]") ((((xre).xL).or ((xre).xI))))
                        (((unsupported)) ((xp)) ((((unsupported)) ((xp1)) ((xp2)) ((xp3)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ("xc5xe5"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ("xe5xe5"))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ("xc5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp4).xmatch)) ("xe5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp4).xmatch)) ("xe5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp4).xmatch)) ("xc5xc5"))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ("en_US.utf8"))
                        (((unsupported)) ((xp)) ((((unsupported)) ((xp1)) ((xp2)) ((xp3)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ("xc5xe5"))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp).xmatch)) ("xe5xe5"))))
                            bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp).xmatch)) ("xc5xc5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xp4).xmatch)) ("xe5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp4).xmatch)) ("xe5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((xp4).xmatch)) ("xc5xc5"))))
                xtest_error.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)) ("(u20ac))"))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xerr).xpattern)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpattern)) ("(u20ac))"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpos)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xcolno)) (4))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xerr).xmsg)) ((((xstr)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)) (" at position 3") ((((xstr)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (" at position 3") (((xerr).xmsg)))
                        (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)) ("(xa4))"))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xerr).xpattern)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpattern)) ("(xa4))"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpos)) (3))
                        (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)) ((((unsupported)) 0)) (((xre).xVERBOSE)))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xpos)) (77))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xlineno)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xerr).xcolno)) (17))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xerr).xmsg)) ((((xstr)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)) (" at position 77") ((((xstr)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("(line 5, column 17)") ((((xstr)) ((xerr)))))
                xtest_misc_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("((a|b)") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(a|b))") ("unbalanced parenthesis") (5))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?P") ("unexpected end of pattern") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?z)") ("unknown extension ?z") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?iz)") ("unknown flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?i") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?#abc") ("missing ), unterminated comment") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?<") ("unexpected end of pattern") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?<>)") ("unknown extension ?<>") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)) ("(?") ("unexpected end of pattern") (2))
                xtest_enum.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)) ("ASCII") ((((xstr)) (((xre).xA)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("DOTALL") ((((xstr)) (((xre).xS)))))
                xtest_pattern_compare.write
                  [xself]
                    memory > xpattern3
                    memory > xpattern4
                    memory > xpattern1
                    memory > xpattern2
                    seq > @
                      seq
                        xpattern1.write ((((xre).xcompile)) ("abc") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpattern1)) ((xpattern1)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xpattern1).neq (xpattern1))))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        xpattern2.write ((((xre).xcompile)) ("abc") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xpattern2)))) ((((xhash)) ((xpattern1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpattern2)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        xpattern3.write ((((xre).xcompile)) ("XYZ") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xpattern3)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        xpattern4.write ((((xre).xcompile)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xpattern4)) ((xpattern1)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          unsupported
                xtest_pattern_compare_bytes.write
                  [xself]
                    memory > xpattern3
                    memory > xpattern1
                    memory > xpattern2
                    seq > @
                      seq
                        xpattern1.write ((((xre).xcompile)) ("abc"))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        xpattern2.write ((((xre).xcompile)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xpattern2)))) ((((xhash)) ((xpattern1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xpattern2)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)) 0)
                        xpattern3.write ((((xre).xcompile)) ("abc"))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xBytesWarning)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xpattern3)) ((xpattern1)))
                xtest_bug_29444.write
                  [xself]
                    memory > xs
                    memory > xm
                    memory > xm2
                    seq > @
                      seq
                        xs.write (((xbytearray)) ("abcdefgh"))
                        xm.write ((((xre).xsearch)) ("[a-h]+") ((xs)))
                        xm2.write ((((xre).xsearch)) ("[e-h]+") ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) 0)) ("abcdefgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm2).xgroup)) 0)) ("efgh"))
                        (((unsupported)) ((((unsupported)) ((xs)) ((((unsupported)) 0)))) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm).xgroup)) 0)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xm2).xgroup)) 0)) (""))
                xtest_bug_34294.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write "atx"
                        xp.write "b(?=(t)|(x))x"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((((xre).xsearch)) ((xp)) ((xs))).xgroups)) 0)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("x"))))
                        xs.write "ab"
                        xp.write "(?=(.)(.)?)"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ((xp)) ((xs)))) ((((unsupported)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("b") (""))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xgroups)) 0)) ((xm)) (((((xre).xfinditer)) ((xp)) ((xs)))))) ((((unsupported)) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("b") ("None: is there a None literal in the EO language?"))))))
                        xp.write "(?=<(?P<tag>w+)/?>(?:(?P<text>.+?)</(?P=tag)>)?)"
                        xs.write "<test><foo2/></test>"
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xre).xfindall)) ((xp)) ((xs)))) ((((unsupported)) ((((unsupported)) ("test") ("<foo2/>"))) ((((unsupported)) ("foo2") (""))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xgroupdict)) 0)) ((xm)) (((((xre).xfinditer)) ((xp)) ((xs)))))) ((((unsupported)) ((((unsupported)) ("tag") ("test") ("text") ("<foo2/>"))) ((((unsupported)) ("tag") ("foo2") ("text") ("None: is there a None literal in the EO language?"))))))
                        xs.write "<test>Hello</test><foo/>"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xgroupdict)) 0)) ((xm)) (((((xre).xfinditer)) ((xp)) ((xs)))))) ((((unsupported)) ((((unsupported)) ("tag") ("test") ("text") ("Hello"))) ((((unsupported)) ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))))))
                        xs.write "<test>Hello</test><foo/><foo/>"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xm).xgroupdict)) 0)) ((xm)) (((((xre).xfinditer)) ((xp)) ((xs)))))) ((((unsupported)) ((((unsupported)) ("tag") ("test") ("text") ("Hello"))) ((((unsupported)) ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))) ((((unsupported)) ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck.write
                  [xself xpattern xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xre).xcompile)) ((xpattern)))))) ((xexpected)))
                xcheck_flags.write
                  [xself xpattern xflags xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xre).xcompile)) ((xpattern)) ((xflags)))))) ((xexpected)))
                xtest_without_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)) ("random pattern") ("re.compile('random pattern')"))
                xtest_single_flag.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") (((xre).xIGNORECASE)) ("re.compile('random pattern', re.IGNORECASE)"))
                xtest_multiple_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") (((((xre).xI).or ((xre).xS)).or ((xre).xX))) ("re.compile('random pattern', re.IGNORECASE|re.DOTALL|re.VERBOSE)"))
                xtest_unicode_flag.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") (((xre).xU)) ("re.compile('random pattern')"))
                        bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") (((((xre).xI).or ((xre).xS)).or ((xre).xU))) ("re.compile('random pattern', re.IGNORECASE|re.DOTALL)"))
                xtest_inline_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)) ("(?i)pattern") ("re.compile('(?i)pattern', re.IGNORECASE)"))
                xtest_unknown_flags.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") (1191936) ("re.compile('random pattern', 0x123000)"))
                        bogusForceDataize.write ((((xself).xcheck_flags)) ("random pattern") ((1191936.or ((xre).xI))) ("re.compile('random pattern', re.IGNORECASE|0x123000)"))
                xtest_bytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("bytes pattern") ("re.compile(b'bytes pattern')"))
                        bogusForceDataize.write ((((xself).xcheck_flags)) ("bytes pattern") (((xre).xA)) ("re.compile(b'bytes pattern', re.ASCII)"))
                xtest_locale.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)) ("bytes pattern") (((xre).xL)) ("re.compile(b'bytes pattern', re.LOCALE)"))
                xtest_quotes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)) ("random \"double quoted\" pattern") ("re.compile('random \"double quoted\" pattern')"))
                        bogusForceDataize.write ((((xself).xcheck)) ("random 'single quoted' pattern") ("re.compile(\"random 'single quoted' pattern\")"))
                        bogusForceDataize.write ((((xself).xcheck)) ("both 'single' and \"double\" quotes") ("re.compile('both \\'single\\' and \"double\" quotes')"))
                xtest_long_pattern.write
                  [xself]
                    memory > xr
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ("Very %spattern".mod ("long ".mul 1000))
                        xr.write (((xrepr)) (((((xre).xcompile)) ((xpattern)))))
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xr)))) (300))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xr)) ((((unsupported)) (30))))) ("re.compile('Very long long lon"))
                        xr.write (((xrepr)) (((((xre).xcompile)) ((xpattern)) (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xr)))) (300))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xr)) ((((unsupported)) (30))))) ("re.compile('Very long long lon"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xr)) ((((unsupported)) ((16.neg)))))) (", re.IGNORECASE)"))
                xtest_flags_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xre).xI)))) ("re.IGNORECASE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((xre).xI).or ((xre).xS)).or ((xre).xX))))) ("re.IGNORECASE|re.DOTALL|re.VERBOSE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((((xre).xI).or ((xre).xS)).or ((xre).xX)).or (((unsupported)) (1) (20)))))) ("re.IGNORECASE|re.DOTALL|re.VERBOSE|0x100000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xre).xI).neg)))) ("~re.IGNORECASE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((((xre).xI).or ((xre).xS)).or ((xre).xX)).neg)))) ("~(re.IGNORECASE|re.DOTALL|re.VERBOSE)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((((((xre).xI).or ((xre).xS)).or ((xre).xX)).or (((unsupported)) (1) (20))).neg)))) ("~(re.IGNORECASE|re.DOTALL|re.VERBOSE|0x100000)"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_overlap_table.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((xsre_compile).x_generate_overlap_table)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (""))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("a"))) ((((unsupported)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("abcd"))) ((((unsupported)) (0) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("aaaa"))) ((((unsupported)) (0) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("ababba"))) ((((unsupported)) (0) (0) (1) (2) (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ("abcabdac"))) ((((unsupported)) (0) (0) (0) (1) (2) (0) (1) (0))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_re_benchmarks.write
                  [xself]
                    memory > xp
                    memory > xs2
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xpattern)) ((xs)))) ((xbenchmarks)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xpattern)) ((xs)))))
                            seq
                              xp.write ((((xre).xcompile)) ((xpattern)))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xsearch)) ((xs)))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ((xs)))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xfullmatch)) ((xs)))))
                              xs2.write (((" ".mul 10000).add (xs)).add (" ".mul 10000))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xsearch)) ((xs2)))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ((xs2)) (10000))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xmatch)) ((xs2)) (10000) ((10000.add (((xlen)) ((xs))))))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xp).xfullmatch)) ((xs2)) (10000) ((10000.add (((xlen)) ((xs))))))))
                xtest_re_tests.write
                  [xself]
                    memory > xexpected
                    memory > xgi
                    memory > xoutcome
                    memory > xbpat
                    memory > xrepl
                    memory > xobj
                    memory > xresult
                    memory > xvardict
                    memory > xbs
                    memory > xpattern
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        seq
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                          (((unsupported)) 0)
                        (((unsupported)) ((xt)) ((xtests)))
                          seq
                            (((unsupported)) ((xpattern)) ((xs)) ((xoutcome)) ((xrepl)) ((xexpected)) ("None: is there a None literal in the EO language?"))
                            ((((xlen)) ((xt))).eq 5).if
                              (((unsupported)) ((((unsupported)) ((xpattern)) ((xs)) ((xoutcome)) ((xrepl)) ((xexpected)))) ((xt)))
                              ((((xlen)) ((xt))).eq 3).if
                                (((unsupported)) ((((unsupported)) ((xpattern)) ((xs)) ((xoutcome)))) ((xt)))
                                (((unsupported)) ((((xValueError)) ("Test tuples should have 3 or 5 fields") ((xt)))))
                            (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xpattern)) ((xs)))))
                              seq
                                ((xoutcome).eq (xSYNTAX_ERROR)).if
                                  seq
                                    (((unsupported)) (((((xself).xassertRaises)) (((xre).xerror)))))
                                      bogusForceDataize.write ((((xre).xcompile)) ((xpattern)))
                                    (((unsupported)) 0)
                                xobj.write ((((xre).xcompile)) ((xpattern)))
                                xresult.write ((((xobj).xsearch)) ((xs)))
                                ((xoutcome).eq (xFAIL)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsNone)) ((xresult)) ("Succeeded incorrectly"))
                                    (((unsupported)) 0)
                                (((unsupported)) (((((xself).xsubTest)) 0)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((xresult)) ("Failed incorrectly"))
                                    (((unsupported)) ((((unsupported)) ((xstart)) ((xend)))) (((((xresult).xspan)) (0))))
                                    xvardict.write (((unsupported)) ("found") (((((xresult).xgroup)) (0))) ("groups") (((((xresult).xgroup)) 0)) ("flags") ((((xresult).xre).xflags)))
                                    (((unsupported)) ((xi)) ((((xrange)) (1) (100))))
                                      seq
                                        (((unsupported)) ((xIndexError)))
                                          seq
                                            xgi.write ((((xresult).xgroup)) ((xi)))
                                            (((unsupported)) ((xgi)) ("None: is there a None literal in the EO language?")).if
                                              xgi.write "None"
                                          xgi.write "Error"
                                        (((unsupported)) ((((unsupported)) ((xvardict)) (("g%d".mod (xi))))) ((xgi)))
                                    (((unsupported)) ((xi)) (((((((xresult).xre).xgroupindex).xkeys)) 0)))
                                      seq
                                        (((unsupported)) ((xIndexError)))
                                          seq
                                            xgi.write ((((xresult).xgroup)) ((xi)))
                                            (((unsupported)) ((xgi)) ("None: is there a None literal in the EO language?")).if
                                              xgi.write "None"
                                          xgi.write "Error"
                                        (((unsupported)) ((((unsupported)) ((xvardict)) ((xi)))) ((xgi)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((xrepl)) ((xvardict)))) ((xexpected)) ("grouping error"))
                                (((unsupported)) ((xUnicodeEncodeError)))
                                  seq
                                    xbpat.write (((xbytes)) ((xpattern)) ("ascii"))
                                    xbs.write (((xbytes)) ((xs)) ("ascii"))
                                  seq
                                    (((unsupported)) (((((xself).xsubTest)) ("bytes pattern match"))))
                                      seq
                                        xobj.write ((((xre).xcompile)) ((xbpat)))
                                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xobj).xsearch)) ((xbs)))))
                                    (((unsupported)) (((((xself).xsubTest)) ("locale-sensitive match"))))
                                      seq
                                        xobj.write ((((xre).xcompile)) ((xbpat)) (((xre).xLOCALE)))
                                        xresult.write ((((xobj).xsearch)) ((xbs)))
                                        (((unsupported)) ((xresult)) ("None: is there a None literal in the EO language?")).if
                                          bogusForceDataize.write (((xprint)) ("=== Fails on locale-sensitive match") ((xt)))
                                ((((((unsupported)) ((xpattern)) ((((unsupported)) (2)))).neq "B").and ((((unsupported)) ((xpattern)) ((((unsupported)) ((2.neg))))).neq "B")).and (((unsupported)) ((xresult)) ("None: is there a None literal in the EO language?"))).if
                                  (((unsupported)) (((((xself).xsubTest)) ("range-limited match"))))
                                    seq
                                      xobj.write ((((xre).xcompile)) ((xpattern)))
                                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xobj).xsearch)) ((xs)) ((xstart)) (((xend).add 1)))))
                                (((unsupported)) (((((xself).xsubTest)) ("case-insensitive match"))))
                                  seq
                                    xobj.write ((((xre).xcompile)) ((xpattern)) (((xre).xIGNORECASE)))
                                    bogusForceDataize.write ((((xself).xassertTrue)) (((((xobj).xsearch)) ((xs)))))
                                (((unsupported)) (((((xself).xsubTest)) ("unicode-sensitive match"))))
                                  seq
                                    xobj.write ((((xre).xcompile)) ((xpattern)) (((xre).xUNICODE)))
                                    bogusForceDataize.write ((((xself).xassertTrue)) (((((xobj).xsearch)) ((xs)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)