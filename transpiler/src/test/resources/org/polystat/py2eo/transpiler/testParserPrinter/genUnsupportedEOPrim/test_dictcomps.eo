memory > xk
memory > xrange
memory > xcompile
memory > x__name__
memory > xv
memory > xSyntaxError
memory > xzip
memory > xunittest
[] > test_dictcomps
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_illegal_assignment
        memory > xtest_scope_isolation_from_global
        memory > xtest_local_visibility
        memory > xg
        memory > xtest_scope_isolation
        memory > xtest_basics
        memory > xtest_evaluation_order
        memory > xtest_global_visibility
        seq > @
          seq
            (((unsupported)) 0)
            xg.write "Global variable"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)) (0) (10) (1) (11) (2) (12) (3) (13) (4) (14) (5) (15) (6) (16) (7) (17) (8) (18) (9) (19))
                        xactual.write (((unsupported)) ((xk)) (((xk).add 10)) ((xk)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        xexpected.write (((unsupported)) (0) (0) (1) (1) (2) (2) (3) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9))
                        xactual.write (((unsupported)) ((xk)) ((xv)) ((xk)) ((((xrange)) (10))) ((xv)) ((((xrange)) (10))) (((xk).eq (xv))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_scope_isolation.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xk
                    seq > @
                      seq
                        xk.write "Local Variable"
                        xexpected.write (((unsupported)) (0) ("None: is there a None literal in the EO language?") (1) ("None: is there a None literal in the EO language?") (2) ("None: is there a None literal in the EO language?") (3) ("None: is there a None literal in the EO language?") (4) ("None: is there a None literal in the EO language?") (5) ("None: is there a None literal in the EO language?") (6) ("None: is there a None literal in the EO language?") (7) ("None: is there a None literal in the EO language?") (8) ("None: is there a None literal in the EO language?") (9) ("None: is there a None literal in the EO language?"))
                        xactual.write (((unsupported)) ((xk)) ("None: is there a None literal in the EO language?") ((xk)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ("Local Variable"))
                        xexpected.write (((unsupported)) (9) (1) (18) (2) (19) (2) (27) (3) (28) (3) (29) (3) (36) (4) (37) (4) (38) (4) (39) (4) (45) (5) (46) (5) (47) (5) (48) (5) (49) (5) (54) (6) (55) (6) (56) (6) (57) (6) (58) (6) (59) (6) (63) (7) (64) (7) (65) (7) (66) (7) (67) (7) (68) (7) (69) (7) (72) (8) (73) (8) (74) (8) (75) (8) (76) (8) (77) (8) (78) (8) (79) (8) (81) (9) (82) (9) (83) (9) (84) (9) (85) (9) (86) (9) (87) (9) (88) (9) (89) (9))
                        xactual.write (((unsupported)) ((xk)) ((xv)) ((xv)) ((((xrange)) (10))) ((xk)) ((((xrange)) (((xv).mul 9)) (((xv).mul 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ("Local Variable"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_scope_isolation_from_global.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)) (0) ("None: is there a None literal in the EO language?") (1) ("None: is there a None literal in the EO language?") (2) ("None: is there a None literal in the EO language?") (3) ("None: is there a None literal in the EO language?") (4) ("None: is there a None literal in the EO language?") (5) ("None: is there a None literal in the EO language?") (6) ("None: is there a None literal in the EO language?") (7) ("None: is there a None literal in the EO language?") (8) ("None: is there a None literal in the EO language?") (9) ("None: is there a None literal in the EO language?"))
                        xactual.write (((unsupported)) ((xg)) ("None: is there a None literal in the EO language?") ((xg)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ("Global variable"))
                        xexpected.write (((unsupported)) (9) (1) (18) (2) (19) (2) (27) (3) (28) (3) (29) (3) (36) (4) (37) (4) (38) (4) (39) (4) (45) (5) (46) (5) (47) (5) (48) (5) (49) (5) (54) (6) (55) (6) (56) (6) (57) (6) (58) (6) (59) (6) (63) (7) (64) (7) (65) (7) (66) (7) (67) (7) (68) (7) (69) (7) (72) (8) (73) (8) (74) (8) (75) (8) (76) (8) (77) (8) (78) (8) (79) (8) (81) (9) (82) (9) (83) (9) (84) (9) (85) (9) (86) (9) (87) (9) (88) (9) (89) (9))
                        xactual.write (((unsupported)) ((xg)) ((xv)) ((xv)) ((((xrange)) (10))) ((xg)) ((((xrange)) (((xv).mul 9)) (((xv).mul 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ("Global variable"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_global_visibility.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)) (0) ("Global variable") (1) ("Global variable") (2) ("Global variable") (3) ("Global variable") (4) ("Global variable") (5) ("Global variable") (6) ("Global variable") (7) ("Global variable") (8) ("Global variable") (9) ("Global variable"))
                        xactual.write (((unsupported)) ((xk)) ((xg)) ((xk)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                xtest_local_visibility.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xv
                    seq > @
                      seq
                        xv.write "Local variable"
                        xexpected.write (((unsupported)) (0) ("Local variable") (1) ("Local variable") (2) ("Local variable") (3) ("Local variable") (4) ("Local variable") (5) ("Local variable") (6) ("Local variable") (7) ("Local variable") (8) ("Local variable") (9) ("Local variable"))
                        xactual.write (((unsupported)) ((xk)) ((xv)) ((xk)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ("Local variable"))
                xtest_illegal_assignment.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("cannot assign"))))
                          bogusForceDataize.write (((xcompile)) ("{x: y for y, x in ((1, 2), (3, 4))} = 5") ("<test>") ("exec"))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xSyntaxError)) ("cannot assign"))))
                          bogusForceDataize.write (((xcompile)) ("{x: y for y, x in ((1, 2), (3, 4))} += 5") ("<test>") ("exec"))
                xtest_evaluation_order.write
                  [xself]
                    memory > xexpected
                    memory > xactual_calls
                    memory > xactual
                    memory > xadd_call
                    memory > xexpected_calls
                    seq > @
                      seq
                        xexpected.write (((unsupported)) ("H") ("W") ("e") ("o") ("l") ("l") ("o") ("d"))
                        xexpected_calls.write (((unsupported)) ((((unsupported)) ("key") ("H"))) ((((unsupported)) ("value") ("W"))) ((((unsupported)) ("key") ("e"))) ((((unsupported)) ("value") ("o"))) ((((unsupported)) ("key") ("l"))) ((((unsupported)) ("value") ("r"))) ((((unsupported)) ("key") ("l"))) ((((unsupported)) ("value") ("l"))) ((((unsupported)) ("key") ("o"))) ((((unsupported)) ("value") ("d"))))
                        xactual_calls.write (((unsupported)) 0)
                        xadd_call.write
                          [xpos xvalue]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xactual_calls).xappend)) ((((unsupported)) ((xpos)) ((xvalue)))))
                                (((unsupported)) ((xvalue)))
                        xactual.write (((unsupported)) ((((xadd_call)) ("key") ((xk)))) ((((xadd_call)) ("value") ((xv)))) ((((unsupported)) ((xk)) ((xv)))) ((((xzip)) ("Hello") ("World"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual_calls)) ((xexpected_calls)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)