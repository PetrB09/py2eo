memory > xEEXIST
memory > xrange
memory > xIOError
memory > xtype
memory > xSubOSErrorWithStandaloneInit
memory > xgetattr
memory > xunittest
memory > xexc
memory > xn
memory > xSubOSErrorCombinedNewFirst
memory > xAttributeError
memory > xEnvironmentError
memory > xSubOSErrorCombinedInitFirst
memory > xerrname
memory > xerrno
memory > xstr
memory > xFileNotFoundError
memory > xsocket
memory > xselect
memory > x_
memory > xSubOSErrorWithNew
memory > xSubOSErrorWithInit
memory > xSubOSError
memory > xopen
memory > xerrnames
memory > xset
memory > xbuiltins
memory > xsuper
memory > xOSError
memory > xos
memory > xdir
memory > xerrcode
memory > xfilter
memory > xBlockingIOError
memory > xFileExistsError
memory > xexcname
memory > x__name__
[] > test_exception_hierarchy
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_pep_map
        memory > xtest_init_standalone
        memory > xtest_errno_translation
        memory > x_make_map
        memory > xtest_errno_mapping
        memory > xtest_new_overridden
        memory > xtest_blockingioerror
        memory > xtest_try_except
        memory > xtest_select_error
        memory > xtest_init_new_overridden
        memory > x__new__
        memory > xtest_windows_error
        memory > xtest_builtin_errors
        memory > xtest_init_kwdargs
        memory > xtest_new_kwdargs
        memory > xtest_socket_errors
        memory > x__init__
        memory > xtest_posix_error
        memory > xtest_init_overridden
        memory > x_map
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xOSError)))
            (((unsupported)) ((xOSError)))
              x__init__.write
                [xself xmessage xbar]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xbar)) ((xbar)))
                      bogusForceDataize.write ((((((xsuper)) 0).x__init__)) ((xmessage)))
            (((unsupported)) ((xOSError)))
              x__new__.write
                [xcls xmessage xbaz]
                  memory > xself
                  seq > @
                    seq
                      xself.write ((((((xsuper)) 0).x__new__)) ((xcls)) ((xmessage)))
                      (((unsupported)) (((xself).xbaz)) ((xbaz)))
                      (((unsupported)) ((xself)))
            (((unsupported)) ((xSubOSErrorWithInit)) ((xSubOSErrorWithNew)))
            (((unsupported)) ((xSubOSErrorWithNew)) ((xSubOSErrorWithInit)))
            (((unsupported)) ((xOSError)))
              x__init__.write
                [xself]
                  seq > @
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_builtin_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xOSError).x__name__)) ("OSError"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xIOError)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((xEnvironmentError)) ((xOSError)))
                xtest_socket_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)) (((xsocket).xerror)) ((xIOError)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xsocket).xgaierror).x__base__)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xsocket).xherror).x__base__)) ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xsocket).xtimeout).x__base__)) ((xOSError)))
                xtest_select_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)) (((xselect).xerror)) ((xOSError)))
                x_pep_map.write (((unsupported)) 0)
                x_make_map.write
                  [xs]
                    memory > x_map
                    memory > xline
                    seq > @
                      seq
                        x_map.write (((unsupported)) 0)
                        (((unsupported)) ((xline)) (((((xs).xsplitlines)) 0)))
                          seq
                            xline.write ((((xline).xstrip)) ("+- "))
                            ((xline).not).if
                              (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xexcname)) ((x_)) ((xerrnames)))) (((((xline).xpartition)) (" "))))
                            (((unsupported)) ((xerrname)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((((((((xerrnames).xstrip)) 0).xsplit)) (", "))))))
                              (((unsupported)) ((((unsupported)) ((x_map)) ((((xgetattr)) ((xerrno)) ((xerrname)))))) ((((xgetattr)) ((xbuiltins)) ((xexcname)))))
                        (((unsupported)) ((x_map)))
                x_map.write (((x_make_map)) ((x_pep_map)))
                xtest_errno_mapping.write
                  [xself]
                    memory > xe
                    memory > xothercodes
                    seq > @
                      seq
                        xe.write (((xOSError)) ((xEEXIST)) ("Bad file descriptor"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xe)))) ((xFileExistsError)))
                        (((unsupported)) ((((unsupported)) ((xerrcode)) ((xexc)))) ((((((xself).x_map).xitems)) 0)))
                          seq
                            xe.write (((xOSError)) ((xerrcode)) ("Some message"))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xe)))) ((xexc)))
                        xothercodes.write ((((xset)) (((xerrno).xerrorcode))).sub (((xset)) (((xself).x_map))))
                        (((unsupported)) ((xerrcode)) ((xothercodes)))
                          seq
                            xe.write (((xOSError)) ((xerrcode)) ("Some message"))
                            bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xe)))) ((xOSError)))
                xtest_try_except.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write "some_hopefully_non_existing_file"
                        (((unsupported)) ((xFileNotFoundError)))
                          bogusForceDataize.write (((xopen)) ((xfilename)))
                          bogusForceDataize.write ((((xself).xfail)) ("should have raised a FileNotFoundError"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) ((xfilename)))))
                        (((unsupported)) ((xFileNotFoundError)))
                          bogusForceDataize.write ((((xos).xunlink)) ((xfilename)))
                          bogusForceDataize.write ((((xself).xfail)) ("should have raised a FileNotFoundError"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_windows_error.write
                  [xself]
                    seq > @
                      (((xos).xname).eq "nt").if
                        bogusForceDataize.write ((((xself).xassertIn)) ("winerror") ((((xdir)) ((xOSError)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("winerror") ((((xdir)) ((xOSError)))))
                xtest_posix_error.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xOSError)) ((xEEXIST)) ("File already exists") ("foo.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xerrno)) ((xEEXIST)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ((xEEXIST)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xstrerror)) ("File already exists"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xfilename)) ("foo.txt"))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xwinerror)) ("None: is there a None literal in the EO language?"))
                xtest_errno_translation.write
                  [xself]
                    memory > xe
                    seq > @
                      (((unsupported)) 0)
                        xe.write (((xOSError)) (0) ("File already exists") ("foo.txt") (183))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xwinerror)) (183))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xerrno)) ((xEEXIST)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xe).xargs)) (0))) ((xEEXIST)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xstrerror)) ("File already exists"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xfilename)) ("foo.txt"))
                xtest_blockingioerror.write
                  [xself]
                    memory > xe
                    memory > xargs
                    seq > @
                      seq
                        xargs.write (((unsupported)) ("a") ("b") ("c") ("d") ("e"))
                        (((unsupported)) ((xn)) ((((xrange)) (6))))
                          seq
                            xe.write (((xBlockingIOError)) ((((unsupported)) ((((unsupported)) ((xargs)) ((((unsupported)) ((xn)))))))))
                            (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              unsupported
                            (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              (((unsupported)) ((((unsupported)) (((xe).xcharacters_written)))))
                        xe.write (((xBlockingIOError)) ("a") ("b") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xcharacters_written)) (3))
                        (((unsupported)) (((xe).xcharacters_written)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xcharacters_written)) (5))
                        (((unsupported)) ((((unsupported)) (((xe).xcharacters_written)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          unsupported
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_errno_mapping.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xSubOSError)) ((xEEXIST)) ("Bad file descriptor"))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xe)))) ((xSubOSError)))
                xtest_init_overridden.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xSubOSErrorWithInit)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbar)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                xtest_init_kwdargs.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)) ((xSubOSErrorWithInit)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbar)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                xtest_new_overridden.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xSubOSErrorWithNew)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbaz)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                xtest_new_kwdargs.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)) ((xSubOSErrorWithNew)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbaz)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                xtest_init_new_overridden.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xSubOSErrorCombinedInitFirst)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbar)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbaz)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                        xe.write (((xSubOSErrorCombinedNewFirst)) ("some message") ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbar)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xbaz)) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) ("some message"))))
                xtest_init_standalone.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xSubOSErrorWithStandaloneInit)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xe).xargs)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xe)))) (""))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)