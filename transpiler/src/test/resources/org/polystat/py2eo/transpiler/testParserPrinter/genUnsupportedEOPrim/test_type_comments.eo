memory > xc
memory > xstr
memory > xt
memory > xrange
memory > xset
memory > xsys
memory > xbool
memory > xSyntaxError
memory > xti
memory > xast
memory > xlen
memory > x__name__
memory > xindex
memory > xenumerate
memory > xtree
memory > xerr
memory > xversion
memory > xord
memory > xunittest
[] > test_type_comments
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlongargs
        memory > xhighest
        memory > xforstmt
        memory > xunderscorednumber
        memory > xtest_func_type_input
        memory > xlowest
        memory > xasyncdef
        memory > xasyncvar
        memory > xtest_underscorednumber
        memory > xtest_redundantdef
        memory > xtest_vardecl
        memory > xtest_fstring
        memory > xtest_asyncvar
        memory > xfstring
        memory > xwithstmt
        memory > xignores
        memory > xtest_nonasciidef
        memory > xnonasciidef
        memory > xparse
        memory > xtest_forstmt
        memory > xtest_longargs
        memory > xclassic_parse
        memory > xtest_asyncdef
        memory > xasynccomp
        memory > xtest_ignores
        memory > xfuncdef
        memory > xredundantdef
        memory > xmatmul
        memory > xtest_matmul
        memory > xparse_all
        memory > xtest_funcdef
        memory > xtest_withstmt
        memory > xvardecl
        memory > xtest_inappropriate_type_comments
        memory > xtest_asynccomp
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xfuncdef.write (((unsupported)) 0)
            xasyncdef.write (((unsupported)) 0)
            xasyncvar.write (((unsupported)) 0)
            xasynccomp.write (((unsupported)) 0)
            xmatmul.write (((unsupported)) 0)
            xfstring.write (((unsupported)) 0)
            xunderscorednumber.write (((unsupported)) 0)
            xredundantdef.write (((unsupported)) 0)
            xnonasciidef.write (((unsupported)) 0)
            xforstmt.write (((unsupported)) 0)
            xwithstmt.write (((unsupported)) 0)
            xvardecl.write (((unsupported)) 0)
            xignores.write (((unsupported)) 0)
            xlongargs.write (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xlowest.write 4
                xhighest.write (((unsupported)) (((xsys).xversion_info)) (1))
                xparse.write
                  [xself xsource xfeature_version]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xast).xparse)) ((xsource)) (TRUE) ((xfeature_version)))))
                xparse_all.write
                  [xself xsource xminver xmaxver xexpected_regex]
                    memory > xfeature_version
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xversion)) ((((xrange)) (((xself).xlowest)) ((((xself).xhighest).add 1)))))
                          seq
                            xfeature_version.write (((unsupported)) (3) ((xversion)))
                            (((unsupported)) ((xminver)) ((xversion)) ((xmaxver))).if
                              (((unsupported)) ((xSyntaxError)))
                                (((unsupported)) (((((xself).xparse)) ((xsource)) ((xfeature_version)))))
                                (((unsupported)) ((((xSyntaxError)) (((((xstr)) ((xerr))).add " feature_version={feature_version}")))))
                              (((unsupported)) ((((unsupported)) (((xself).xassertRaisesRegex)) ((xSyntaxError)) ((xexpected_regex)) ("feature_version={feature_version}"))))
                                bogusForceDataize.write ((((xself).xparse)) ((xsource)) ((xfeature_version)))
                xclassic_parse.write
                  [xself xsource]
                    seq > @
                      (((unsupported)) (((((xast).xparse)) ((xsource)))))
                xtest_funcdef.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xfuncdef)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("() -> int"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (1)).xtype_comment)) ("() -> None"))
                        xtree.write ((((xself).xclassic_parse)) ((xfuncdef)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (1)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                xtest_asyncdef.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xasyncdef)) (5))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("() -> int"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (1)).xtype_comment)) ("() -> int"))
                        xtree.write ((((xself).xclassic_parse)) ((xasyncdef)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (1)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                xtest_asyncvar.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xasyncvar)) (6))))
                xtest_asynccomp.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xasynccomp)) (6))))
                xtest_matmul.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xmatmul)) (5))))
                xtest_fstring.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xfstring)) (6))))
                xtest_underscorednumber.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xunderscorednumber)) (6))))
                xtest_redundantdef.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xredundantdef)) (0) ("^Cannot have two type comments on def"))))
                xtest_nonasciidef.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xnonasciidef)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("() -> àçčéñt"))
                xtest_forstmt.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xforstmt)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("int"))
                        xtree.write ((((xself).xclassic_parse)) ((xforstmt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                xtest_withstmt.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xwithstmt)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("int"))
                        xtree.write ((((xself).xclassic_parse)) ((xwithstmt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                xtest_vardecl.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xvardecl)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("int"))
                        xtree.write ((((xself).xclassic_parse)) ((xvardecl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xbody)) (0)).xtype_comment)) ("None: is there a None literal in the EO language?"))
                xtest_ignores.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xignores)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) (((xti).xlineno)) (((xti).xtag)))) ((xti)) (((xtree).xtype_ignores)))) ((((unsupported)) ((((unsupported)) (2) (""))) ((((unsupported)) (5) (""))) ((((unsupported)) (8) ("[excuse]"))) ((((unsupported)) (9) ("=excuse"))) ((((unsupported)) (10) (" [excuse]"))) ((((unsupported)) (11) (" whatever"))))))
                        xtree.write ((((xself).xclassic_parse)) ((xignores)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtree).xtype_ignores)) ((((unsupported)) 0)))
                xtest_longargs.write
                  [xself]
                    memory > xtree
                    memory > xarg
                    memory > xtodo
                    seq > @
                      seq
                        (((unsupported)) ((xtree)) (((((xself).xparse_all)) ((xlongargs)))))
                          (((unsupported)) ((xt)) (((xtree).xbody)))
                            seq
                              xtodo.write (((xset)) ((((unsupported)) (((xt).xname)) ((((unsupported)) (1))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xlen)) ((((xt).xargs).xargs))).add (((xlen)) ((((xt).xargs).xposonlyargs))))) ((((((xlen)) ((xtodo))).sub (((xbool)) ((((xt).xargs).xvararg)))).sub (((xbool)) ((((xt).xargs).xkwarg))))))
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((((xt).xname).xstartswith)) ("f"))) (((xt).xname)))
                              (((unsupported)) ((((unsupported)) ((xindex)) ((xc)))) ((((xenumerate)) ((((unsupported)) (((xt).xname)) ((((unsupported)) (1))))))))
                                seq
                                  bogusForceDataize.write ((((xtodo).xremove)) ((xc)))
                                  ((xc).eq "v").if
                                    xarg.write (((xt).xargs).xvararg)
                                    ((xc).eq "k").if
                                      xarg.write (((xt).xargs).xkwarg)
                                      seq
                                        (((unsupported)) ((((unsupported)) (0) (((((xord)) ((xc))).sub (((xord)) ("a")))) ((((xlen)) (((((xt).xargs).xposonlyargs).add (((xt).xargs).xargs))))))))
                                        ((xindex).less (((xlen)) ((((xt).xargs).xposonlyargs)))).if
                                          xarg.write (((unsupported)) ((((xt).xargs).xposonlyargs)) (((((xord)) ((xc))).sub (((xord)) ("a")))))
                                          xarg.write (((unsupported)) ((((xt).xargs).xargs)) ((((((xord)) ((xc))).sub (((xord)) ("a"))).sub (((xlen)) ((((xt).xargs).xposonlyargs))))))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((xarg).xarg)) ((xc)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((xarg).xtype_comment)) ((((((xarg).xarg).xupper)) 0)))
                              (((unsupported)) (((xtodo).not)))
                        xtree.write ((((xself).xclassic_parse)) ((xlongargs)))
                        (((unsupported)) ((xt)) (((xtree).xbody)))
                          (((unsupported)) ((xarg)) (((((xt).xargs).xargs).add (((unsupported)) ((((xt).xargs).xvararg)) ((((xt).xargs).xkwarg))))))
                            (((unsupported)) ((xarg)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertIsNone)) (((xarg).xtype_comment)) (("%s(%s:%r)".mod (((unsupported)) (((xt).xname)) (((xarg).xarg)) (((xarg).xtype_comment))))))
                xtest_inappropriate_type_comments.write
                  [xself]
                    memory > xcheck_both_ways
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcheck_both_ways.write
                          [xsource]
                            seq > @
                              seq
                                (((unsupported)) (((xast).xparse)) ((xsource)) (FALSE))
                                (((unsupported)) ((xtree)) ((((unsupported)) (((xself).xparse_all)) ((xsource)) (0))))
                        bogusForceDataize.write (((xcheck_both_ways)) ("pass  # type: intn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("foo()  # type: intn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("x += 1  # type: intn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("while True:  # type: intn  continuen"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("while True:n  continue  # type: intn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("try:  # type: intn  passnfinally:n  passn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("try:n  passnfinally:  # type: intn  passn"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("pass  # type: ignorewhatevern"))
                        bogusForceDataize.write (((xcheck_both_ways)) ("pass  # type: ignoreén"))
                xtest_func_type_input.write
                  [xself]
                    memory > xtree
                    memory > xparse_func_type_input
                    memory > xarg
                    seq > @
                      seq
                        xparse_func_type_input.write
                          [xsource]
                            seq > @
                              (((unsupported)) (((((xast).xparse)) ((xsource)) ("<unknown>") ("func_type"))))
                        xtree.write (((xparse_func_type_input)) ("() -> int"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtree).xargtypes)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtree).xreturns).xid)) ("int"))
                        xtree.write (((xparse_func_type_input)) ("(int) -> List[str]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xtree).xargtypes)))) (1))
                        xarg.write (((unsupported)) (((xtree).xargtypes)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xarg).xid)) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xtree).xreturns).xvalue).xid)) ("List"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xtree).xreturns).xslice).xvalue).xid)) ("str"))
                        xtree.write (((xparse_func_type_input)) ("(int, *str, **Any) -> float"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xargtypes)) (0)).xid)) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xargtypes)) (1)).xid)) ("str"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) (((xtree).xargtypes)) (2)).xid)) ("Any"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtree).xreturns).xid)) ("float"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          xtree.write (((xparse_func_type_input)) ("(int, *str, *Any) -> float"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          xtree.write (((xparse_func_type_input)) ("(int, **str, Any) -> float"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          xtree.write (((xparse_func_type_input)) ("(**int, **str) -> float"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)