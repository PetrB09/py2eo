memory > xcompressed
memory > xSMALLEST
memory > xValueError
memory > xstr
memory > xLARGEST
memory > xrange
memory > xlhs
memory > xproto
memory > xrhs
memory > xtype
memory > xsorted
memory > xobject
memory > xNetmaskTestMixin_v6
memory > xipaddress
memory > xuncompressed
memory > xpickle
memory > xlist
memory > xNetmaskTestMixin_v4
memory > xNotImplementedError
memory > xIndexError
memory > xrepr
memory > xint
memory > xre
memory > xx
memory > xoperator
memory > xi
memory > xbytes
memory > xNotImplemented
memory > xargs
memory > xobj
memory > xCommonTestMixin_v6
memory > xCommonTestMixin_v4
memory > xweakref
memory > xIPv7Address
memory > xCommonTestMixin
memory > xunittest
memory > xexc
memory > xhash
memory > xBaseTestCase
memory > xaddress
memory > xhex
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_ipaddress
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_netmask_errors
        memory > xtest_same_type_equality
        memory > xtest_address_errors
        memory > xtestGetNum_Addresses
        memory > xtest_mixed_type_ordering
        memory > xtestContains
        memory > xtest_weakref
        memory > xtest_network_passed_as_address
        memory > xtest_bad_address_split_v6_too_many_parts
        memory > xtestIpFromPacked
        memory > xtestGetPrefixlen
        memory > xtest_bad_packed_length
        memory > xtestGetSubnetForSingle128
        memory > xv4_objects
        memory > xtest_pickle
        memory > xtestTeredo
        memory > xtestIPv4Net
        memory > xtest_empty_octet
        memory > xtestIPv4Tuple
        memory > xtest_no_mask
        memory > xtestIntRepresentation
        memory > xtestGetSupernet
        memory > xtestNetworkElementCaching
        memory > xtestAddrExclude
        memory > xfactory
        memory > xpickle_test
        memory > xtestCollapsing
        memory > xv6net2
        memory > xtestGetitem
        memory > xtestIPVersion
        memory > xobjects
        memory > xv6_addresses
        memory > xtestFancySubnetting
        memory > xtestIpType
        memory > xtest_leading_zeros
        memory > xtestGetSubnets3
        memory > xassertCleanError
        memory > xv4addr2
        memory > xassertAddressError
        memory > xtestIPv6AddressTooLarge
        memory > xtestV6HashIsNotConstant
        memory > xtest_octet_limit
        memory > xv6addr2
        memory > xtestInvalidIntToBytes
        memory > xtest_bad_address_split_v6_not_enough_parts
        memory > xassertFactoryError
        memory > xtestReservedIpv6
        memory > xv4net
        memory > xtestGetIp
        memory > xtest_invalid_characters
        memory > xtest_bad_address_split
        memory > xv6intf2
        memory > xsetUp
        memory > xtestInternals
        memory > xtest_bad_address_split_v6_leading_colon
        memory > xtestSubnetFailsForNegativeCidrDiff
        memory > xtestIpv4Mapped
        memory > xtest_supernet_of
        memory > xtestAddressIntMath
        memory > xtestIPBases
        memory > xtestsixtofour
        memory > xtestIpFromInt
        memory > xtestNth
        memory > xtest_part_length
        memory > xtestSlash32Constructor
        memory > xtestWithStar
        memory > xtest_bad_address_split_v6_repeated_double_colon
        memory > xtest_subnet_of_mixed_types
        memory > xtestIPv4NetworkHelpers
        memory > xtestCompressIPv6Address
        memory > xtestForceVersion
        memory > xtest_ip_address
        memory > xassertNetmaskError
        memory > xtest_mixed_type_equality
        memory > xtestGetSubnets
        memory > xtestIPv6Tuple
        memory > xtest_foreign_type_ordering
        memory > xtestGetSupernet3
        memory > xtest_foreign_type_equality
        memory > xtestIPv6NetworkHelpers
        memory > xv4_addresses
        memory > xtestMaxPrefixLength
        memory > xtest_valid_netmask
        memory > xtest_same_type_ordering
        memory > xtest_ip_network
        memory > xv6addr
        memory > xtestHosts
        memory > xtest_split_netmask
        memory > xtest_containment
        memory > xv6_objects
        memory > xv6intf
        memory > xtest_int
        memory > xtest_octet_length
        memory > xtestV4HashIsNotConstant
        memory > xtestSubnetFailsForLargeCidrDiff
        memory > xtestOverlaps
        memory > xtest_floats_rejected
        memory > xtest_bad_address_split_v6_too_many_colons
        memory > xtestGetNetmask
        memory > xassertInstancesEqual
        memory > xtestSubnet2
        memory > xtestGetSubnetForSingle32
        memory > xtestStrictNetworks
        memory > xtest_ip_interface
        memory > xtestNetworkComparison
        memory > xtestHash
        memory > xtest_bad_address_split_v6_trailing_colon
        memory > xtest_bad_v4_part_in
        memory > xtestNotEqual
        memory > xtestSlash0Constructor
        memory > xv4addr
        memory > xtestAddressComparison
        memory > xtestGetBroadcast
        memory > xtest_large_ints_rejected
        memory > xv6net
        memory > xtestZeroNetmask
        memory > xtestRepr
        memory > xtest_incompatible_versions
        memory > xtest_packed
        memory > xtestSummarizing
        memory > xtestReservedIpv4
        memory > xtestPacked
        memory > xtestSlash128Constructor
        memory > xtest_negative_ints_rejected
        memory > xtestCopyConstructor
        memory > xtestGetSupernet4
        memory > xtestEmbeddedIpv4
        memory > xtestGetNetwork
        memory > xv4intf2
        memory > xtest_mixed_type_key
        memory > xtest_bad_address_split_v6_too_many_parts_with_double_colon
        memory > xtest_empty_address
        memory > xtest_netmask_in_tuple_errors
        memory > xtestEqual
        memory > xtestReversePointer
        memory > xtestSupernetFailsForLargeCidrDiff
        memory > xtest_subnet_of
        memory > xtest_not_an_index_issue15559
        memory > xv4net2
        memory > xtestInterfaceComparison
        memory > xv4intf
        memory > xtestExplodeShortHandIpStr
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xfactory.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xNotImplementedError)))
                xassertCleanError.write
                  [xself xexc_type xdetails]
                    memory > xcm
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (xargs).if
                          xdetails.write ((xdetails).mod (xargs))
                        xcm.write ((((xself).xassertRaisesRegex)) ((xexc_type)) ((xdetails)))
                        (((unsupported)) ((xcm)) ((xexc)))
                          (((unsupported)) ((xexc)))
                        (((unsupported)) ((((xexc).xexception).x__context__)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertTrue)) ((((xexc).xexception).x__suppress_context__)))
                xassertAddressError.write
                  [xself xdetails]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) (((((xself).xassertCleanError)) (((xipaddress).xAddressValueError)) ((xdetails)) ((((unsupported)) ((xargs)))))))
                xassertNetmaskError.write
                  [xself xdetails]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) (((((xself).xassertCleanError)) (((xipaddress).xNetmaskValueError)) ((xdetails)) ((((unsupported)) ((xargs)))))))
                xassertInstancesEqual.write
                  [xself xlhs xrhs]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xfactory)) ((xlhs)))) (((((xself).xfactory)) ((xrhs)))))
            (((unsupported)) 0)
              seq
                xtest_empty_address.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertAddressError)) ("Address cannot be empty"))))
                        bogusForceDataize.write ((((xself).xfactory)) (""))
                xtest_floats_rejected.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((((xrepr)) ("1.0"))))))))
                        bogusForceDataize.write ((((xself).xfactory)) (1.0))
                xtest_not_an_index_issue15559.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xoperator).xindex)) (((((xself).xfactory)) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhex)) (((((xself).xfactory)) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xbytes)) (((((xself).xfactory)) (1))))
                xpickle_test.write
                  [xself xaddr]
                    memory > xx
                    memory > xy
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xproto)))))
                          seq
                            xx.write ((((xself).xfactory)) ((xaddr)))
                            xy.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xx)) ((xproto)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xy)) ((xx)))
            (((unsupported)) ((xCommonTestMixin)))
              seq
                xtest_leading_zeros.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("000.000.000.000") ("0.0.0.0"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("192.168.000.001") ("192.168.0.1"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("016.016.016.016") ("16.16.16.16"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("001.000.008.016") ("1.0.8.16"))
                xtest_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) (0) ("0.0.0.0"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ((((unsupported)) 0)) ("192.168.0.1"))
                xtest_packed.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) (((((xbytes).xfromhex)) ("00000000"))) ("0.0.0.0"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) (((((xbytes).xfromhex)) ("c0a80001"))) ("192.168.0.1"))
                xtest_negative_ints_rejected.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "-1 (< 0) is not permitted as an IPv4 address"
                        (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((xmsg)))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((1.neg)))
                xtest_large_ints_rejected.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "%d (>= 2**32) is not permitted as an IPv4 address"
                        (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) (((xmsg).mod (((unsupported)) (2) (32)))))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((((unsupported)) (2) (32))))
                xtest_bad_packed_length.write
                  [xself]
                    memory > xassertBadLength
                    seq > @
                      seq
                        xassertBadLength.write
                          [xlength]
                            memory > xaddr
                            memory > xmsg
                            seq > @
                              seq
                                xaddr.write ("0".mul (xlength))
                                xmsg.write "%r (len %d != 4) is not permitted as an IPv4 address"
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) (((xmsg).mod (((unsupported)) ((xaddr)) ((xlength))))))))))
                                  bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadLength)) (3))
                        bogusForceDataize.write (((xassertBadLength)) (5))
            (((unsupported)) ((xCommonTestMixin)))
              seq
                xtest_leading_zeros.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("0000::0000") ("::"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ("000::c0a8:0001") ("::c0a8:1"))
                xtest_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) (0) ("::"))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ((((unsupported)) 0)) ("::c0a8:1"))
                xtest_packed.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        xaddr.write (("0".mul 12).add ((((xbytes).xfromhex)) ("00000000")))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ((xaddr)) ("::"))
                        xaddr.write (("0".mul 12).add ((((xbytes).xfromhex)) ("c0a80001")))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ((xaddr)) ("::c0a8:1"))
                        xaddr.write (((((xbytes).xfromhex)) ("c0a80001")).add ("0".mul 12))
                        bogusForceDataize.write ((((xself).xassertInstancesEqual)) ((xaddr)) ("c0a8:1::"))
                xtest_negative_ints_rejected.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "-1 (< 0) is not permitted as an IPv6 address"
                        (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((xmsg)))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((1.neg)))
                xtest_large_ints_rejected.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "%d (>= 2**128) is not permitted as an IPv6 address"
                        (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) (((xmsg).mod (((unsupported)) (2) (128)))))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((((unsupported)) (2) (128))))
                xtest_bad_packed_length.write
                  [xself]
                    memory > xassertBadLength
                    seq > @
                      seq
                        xassertBadLength.write
                          [xlength]
                            memory > xaddr
                            memory > xmsg
                            seq > @
                              seq
                                xaddr.write ("0".mul (xlength))
                                xmsg.write "%r (len %d != 16) is not permitted as an IPv6 address"
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) (((xmsg).mod (((unsupported)) ((xaddr)) ((xlength))))))))))
                                  seq
                                    bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                                    bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadLength)) (15))
                        bogusForceDataize.write (((xassertBadLength)) (17))
            (((unsupported)) ((xBaseTestCase)) ((xCommonTestMixin_v4)))
              seq
                xfactory.write ((xipaddress).xIPv4Address)
                xtest_network_passed_as_address.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        xaddr.write "127.0.0.1/24"
                        (((unsupported)) (((((xself).xassertAddressError)) ("Unexpected '/' in %r") ((xaddr)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                xtest_bad_address_split.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            seq > @
                              (((unsupported)) (((((xself).xassertAddressError)) ("Expected 4 octets in %r") ((xaddr)))))
                                bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("127.0.1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42.42.42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42..42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("42.42.42.42."))
                        bogusForceDataize.write (((xassertBadSplit)) ("42.42.42.42..."))
                        bogusForceDataize.write (((xassertBadSplit)) (".42.42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("...42.42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("016.016.016"))
                        bogusForceDataize.write (((xassertBadSplit)) ("016.016"))
                        bogusForceDataize.write (((xassertBadSplit)) ("016"))
                        bogusForceDataize.write (((xassertBadSplit)) ("000"))
                        bogusForceDataize.write (((xassertBadSplit)) ("0x0a.0x0a.0x0a"))
                        bogusForceDataize.write (((xassertBadSplit)) ("0x0a.0x0a"))
                        bogusForceDataize.write (((xassertBadSplit)) ("0x0a"))
                        bogusForceDataize.write (((xassertBadSplit)) ("."))
                        bogusForceDataize.write (((xassertBadSplit)) ("bogus"))
                        bogusForceDataize.write (((xassertBadSplit)) ("bogus.com"))
                        bogusForceDataize.write (((xassertBadSplit)) ("1000"))
                        bogusForceDataize.write (((xassertBadSplit)) ("1000000000000000"))
                        bogusForceDataize.write (((xassertBadSplit)) ("192.168.0.1.com"))
                xtest_empty_octet.write
                  [xself]
                    memory > xassertBadOctet
                    seq > @
                      seq
                        xassertBadOctet.write
                          [xaddr]
                            seq > @
                              (((unsupported)) (((((xself).xassertAddressError)) ("Empty octet not permitted in %r") ((xaddr)))))
                                bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadOctet)) ("42..42.42"))
                        bogusForceDataize.write (((xassertBadOctet)) ("..."))
                xtest_invalid_characters.write
                  [xself]
                    memory > xassertBadOctet
                    seq > @
                      seq
                        xassertBadOctet.write
                          [xaddr xoctet]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("Only decimal digits permitted in %r in %r".mod (((unsupported)) ((xoctet)) ((xaddr))))
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadOctet)) ("0x0a.0x0a.0x0a.0x0a") ("0x0a"))
                        bogusForceDataize.write (((xassertBadOctet)) ("0xa.0x0a.0x0a.0x0a") ("0xa"))
                        bogusForceDataize.write (((xassertBadOctet)) ("42.42.42.-0") ("-0"))
                        bogusForceDataize.write (((xassertBadOctet)) ("42.42.42.+0") ("+0"))
                        bogusForceDataize.write (((xassertBadOctet)) ("42.42.42.-42") ("-42"))
                        bogusForceDataize.write (((xassertBadOctet)) ("+1.+2.+3.4") ("+1"))
                        bogusForceDataize.write (((xassertBadOctet)) ("1.2.3.4e0") ("4e0"))
                        bogusForceDataize.write (((xassertBadOctet)) ("1.2.3.4::") ("4::"))
                        bogusForceDataize.write (((xassertBadOctet)) ("1.a.2.3") ("a"))
                xtest_octet_length.write
                  [xself]
                    memory > xassertBadOctet
                    seq > @
                      seq
                        xassertBadOctet.write
                          [xaddr xoctet]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "At most 3 characters permitted in %r in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) (((xmsg).mod (((unsupported)) ((xoctet)) ((xaddr))))))))))
                                  bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadOctet)) ("0000.000.000.000") ("0000"))
                        bogusForceDataize.write (((xassertBadOctet)) ("12345.67899.-54321.-98765") ("12345"))
                xtest_octet_limit.write
                  [xself]
                    memory > xassertBadOctet
                    seq > @
                      seq
                        xassertBadOctet.write
                          [xaddr xoctet]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("Octet %d (> 255) not permitted in %r".mod (((unsupported)) ((xoctet)) ((xaddr))))
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xipaddress).xIPv4Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadOctet)) ("257.0.0.0") (257))
                        bogusForceDataize.write (((xassertBadOctet)) ("192.168.0.999") (999))
                xtest_pickle.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpickle_test)) ("192.0.2.1"))
                xtest_weakref.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xweakref).xref)) (((((xself).xfactory)) ("192.0.2.1"))))
            (((unsupported)) ((xBaseTestCase)) ((xCommonTestMixin_v6)))
              seq
                xfactory.write ((xipaddress).xIPv6Address)
                xtest_network_passed_as_address.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        xaddr.write "::1/24"
                        (((unsupported)) (((((xself).xassertAddressError)) ("Unexpected '/' in %r") ((xaddr)))))
                          bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                xtest_bad_address_split_v6_not_enough_parts.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "At least 3 parts expected in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) (":"))
                        bogusForceDataize.write (((xassertBadSplit)) (":1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("FEDC:9878"))
                xtest_bad_address_split_v6_too_many_colons.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "At most 8 colons permitted in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("9:8:7:6:5:4:3::2:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("10:9:8:7:6:5:4:3:2:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("::8:7:6:5:4:3:2:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("8:7:6:5:4:3:2:1::"))
                        bogusForceDataize.write (((xassertBadSplit)) ("10:9:8:7:6:5:4:3:42.42.42.42"))
                xtest_bad_address_split_v6_too_many_parts.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "Exactly 8 parts expected without '::' in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("3ffe:0:0:0:0:0:0:0:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("9:8:7:6:5:4:3:2:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("7:6:5:4:3:2:1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("9:8:7:6:5:4:3:42.42.42.42"))
                        bogusForceDataize.write (((xassertBadSplit)) ("7:6:5:4:3:42.42.42.42"))
                xtest_bad_address_split_v6_too_many_parts_with_double_colon.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "Expected at most 7 other parts with '::' in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("1:2:3:4::5:6:7:8"))
                xtest_bad_address_split_v6_repeated_double_colon.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "At most one '::' permitted in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("3ffe::1::1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("1::2::3::4:5"))
                        bogusForceDataize.write (((xassertBadSplit)) ("2001::db:::1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("3ffe::1::"))
                        bogusForceDataize.write (((xassertBadSplit)) ("::3ffe::1"))
                        bogusForceDataize.write (((xassertBadSplit)) (":3ffe::1::1"))
                        bogusForceDataize.write (((xassertBadSplit)) ("3ffe::1::1:"))
                        bogusForceDataize.write (((xassertBadSplit)) (":3ffe::1::1:"))
                        bogusForceDataize.write (((xassertBadSplit)) (":::"))
                        bogusForceDataize.write (((xassertBadSplit)) ("2001:db8:::1"))
                xtest_bad_address_split_v6_leading_colon.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "Leading ':' only permitted as part of '::' in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) (":2001:db8::1"))
                        bogusForceDataize.write (((xassertBadSplit)) (":1:2:3:4:5:6:7"))
                        bogusForceDataize.write (((xassertBadSplit)) (":1:2:3:4:5:6:"))
                        bogusForceDataize.write (((xassertBadSplit)) (":6:5:4:3:2:1::"))
                xtest_bad_address_split_v6_trailing_colon.write
                  [xself]
                    memory > xassertBadSplit
                    seq > @
                      seq
                        xassertBadSplit.write
                          [xaddr]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "Trailing ':' only permitted as part of '::' in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadSplit)) ("2001:db8::1:"))
                        bogusForceDataize.write (((xassertBadSplit)) ("1:2:3:4:5:6:7:"))
                        bogusForceDataize.write (((xassertBadSplit)) ("::1.2.3.4:"))
                        bogusForceDataize.write (((xassertBadSplit)) ("::7:6:5:4:3:2:"))
                xtest_bad_v4_part_in.write
                  [xself]
                    memory > xassertBadAddressPart
                    seq > @
                      seq
                        xassertBadAddressPart.write
                          [xaddr xv4_error]
                            seq > @
                              (((unsupported)) (((((xself).xassertAddressError)) ("%s in %r") ((xv4_error)) ((xaddr)))))
                                bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadAddressPart)) ("3ffe::1.net") ("Expected 4 octets in '1.net'"))
                        bogusForceDataize.write (((xassertBadAddressPart)) ("3ffe::127.0.1") ("Expected 4 octets in '127.0.1'"))
                        bogusForceDataize.write (((xassertBadAddressPart)) ("::1.2.3") ("Expected 4 octets in '1.2.3'"))
                        bogusForceDataize.write (((xassertBadAddressPart)) ("::1.2.3.4.5") ("Expected 4 octets in '1.2.3.4.5'"))
                        bogusForceDataize.write (((xassertBadAddressPart)) ("3ffe::1.1.1.net") ("Only decimal digits permitted in 'net' in '1.1.1.net'"))
                xtest_invalid_characters.write
                  [xself]
                    memory > xassertBadPart
                    seq > @
                      seq
                        xassertBadPart.write
                          [xaddr xpart]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("Only hex digits permitted in %r in %r".mod (((unsupported)) ((xpart)) ((xaddr))))
                                (((unsupported)) (((((xself).xassertAddressError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadPart)) ("3ffe::goog") ("goog"))
                        bogusForceDataize.write (((xassertBadPart)) ("3ffe::-0") ("-0"))
                        bogusForceDataize.write (((xassertBadPart)) ("3ffe::+0") ("+0"))
                        bogusForceDataize.write (((xassertBadPart)) ("3ffe::-1") ("-1"))
                        bogusForceDataize.write (((xassertBadPart)) ("1.2.3.4::") ("1.2.3.4"))
                        bogusForceDataize.write (((xassertBadPart)) ("1234:axy::b") ("axy"))
                xtest_part_length.write
                  [xself]
                    memory > xassertBadPart
                    seq > @
                      seq
                        xassertBadPart.write
                          [xaddr xpart]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write "At most 4 characters permitted in %r in %r"
                                (((unsupported)) (((((xself).xassertAddressError)) ((xmsg)) ((xpart)) ((xaddr)))))
                                  bogusForceDataize.write ((((xipaddress).xIPv6Address)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadPart)) ("::00000") ("00000"))
                        bogusForceDataize.write (((xassertBadPart)) ("3ffe::10000") ("10000"))
                        bogusForceDataize.write (((xassertBadPart)) ("02001:db8::") ("02001"))
                        bogusForceDataize.write (((xassertBadPart)) ("2001:888888::1") ("888888"))
                xtest_pickle.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xpickle_test)) ("2001:db8::"))
                xtest_weakref.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xweakref).xref)) (((((xself).xfactory)) ("2001:db8::"))))
            (((unsupported)) ((xCommonTestMixin_v4)))
              seq
                unsupported
                xtest_no_mask.write
                  [xself]
                    memory > xnet
                    seq > @
                      (((unsupported)) ((xaddress)) ((((unsupported)) ("1.2.3.4") (16909060) ("x01x02x03x04"))))
                        seq
                          xnet.write ((((xself).xfactory)) ((xaddress)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xnet)))) ("1.2.3.4/32"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xnet).xnetmask)))) ("255.255.255.255"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xnet).xhostmask)))) ("0.0.0.0"))
                xtest_split_netmask.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        xaddr.write "1.2.3.4/32/24"
                        (((unsupported)) (((((xself).xassertAddressError)) (("Only one '/' permitted in %r".mod (xaddr))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                xtest_address_errors.write
                  [xself]
                    memory > xassertBadAddress
                    seq > @
                      seq
                        xassertBadAddress.write
                          [xaddr xdetails]
                            seq > @
                              (((unsupported)) (((((xself).xassertAddressError)) ((xdetails)))))
                                bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadAddress)) ("/") ("Address cannot be empty"))
                        bogusForceDataize.write (((xassertBadAddress)) ("/8") ("Address cannot be empty"))
                        bogusForceDataize.write (((xassertBadAddress)) ("bogus") ("Expected 4 octets"))
                        bogusForceDataize.write (((xassertBadAddress)) ("google.com") ("Expected 4 octets"))
                        bogusForceDataize.write (((xassertBadAddress)) ("10/8") ("Expected 4 octets"))
                        bogusForceDataize.write (((xassertBadAddress)) ("::1.2.3.4") ("Only decimal digits"))
                        bogusForceDataize.write (((xassertBadAddress)) ("1.2.3.256") (((((xre).xescape)) ("256 (> 255)"))))
                xtest_valid_netmask.write
                  [xself]
                    memory > xnet_str
                    memory > xnet
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) ("192.0.2.0/255.255.255.0"))))) ("192.0.2.0/24"))
                        (((unsupported)) ((xi)) ((((xrange)) (0) (33))))
                          seq
                            xnet_str.write ("0.0.0.0/%d".mod (xi))
                            xnet.write ((((xself).xfactory)) ((xnet_str)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xnet)))) ((xnet_str)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) (("0.0.0.0/%s".mod ((xnet).xnetmask))))))) ((xnet_str)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) (("0.0.0.0/0%d".mod (xi))))))) ((xnet_str)))
                            (((unsupported)) ((xi)) ((((unsupported)) (32) (0)))).if
                              xnet_str.write ("0.0.0.0/%d".mod (32.sub (xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) (("0.0.0.0/%s".mod ((xnet).xhostmask))))))) ((xnet_str)))
                xtest_netmask_errors.write
                  [xself]
                    memory > xassertBadNetmask
                    seq > @
                      seq
                        xassertBadNetmask.write
                          [xaddr xnetmask]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("%r is not a valid netmask".mod (xnetmask))
                                (((unsupported)) (((((xself).xassertNetmaskError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xself).xfactory)) (("%s/%s".mod (((unsupported)) ((xaddr)) ((xnetmask))))))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") (""))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("-1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("+1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") (" 1 "))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("0x1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("33"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("254.254.255.256"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.2.3.4") ("1.a.2.3"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("254.xyz.2.3"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("240.255.0.0"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("255.254.128.0"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("0.1.127.255"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("pudding"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ("::"))
                xtest_netmask_in_tuple_errors.write
                  [xself]
                    memory > xassertBadNetmask
                    seq > @
                      seq
                        xassertBadNetmask.write
                          [xaddr xnetmask]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("%r is not a valid netmask".mod (xnetmask))
                                (((unsupported)) (((((xself).xassertNetmaskError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xself).xfactory)) ((((unsupported)) ((xaddr)) ((xnetmask)))))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") ((1.neg)))
                        bogusForceDataize.write (((xassertBadNetmask)) ("1.1.1.1") (33))
                xtest_pickle.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpickle_test)) ("192.0.2.0/27"))
                        bogusForceDataize.write ((((xself).xpickle_test)) ("192.0.2.0/31"))
                        bogusForceDataize.write ((((xself).xpickle_test)) ("192.0.2.0"))
            (((unsupported)) ((xBaseTestCase)) ((xNetmaskTestMixin_v4)))
              xfactory.write ((xipaddress).xIPv4Interface)
            (((unsupported)) ((xBaseTestCase)) ((xNetmaskTestMixin_v4)))
              seq
                xfactory.write ((xipaddress).xIPv4Network)
                xtest_subnet_of.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsubnet_of)) (((((xself).xfactory)) ("10.0.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsubnet_of)) (((((xself).xfactory)) ("10.0.0.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsubnet_of)) (((((xself).xfactory)) ("10.0.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.1.0/24")).xsubnet_of)) (((((xself).xfactory)) ("10.0.0.0/30"))))))
                xtest_supernet_of.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsupernet_of)) (((((xself).xfactory)) ("10.0.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsupernet_of)) (((((xself).xfactory)) ("10.0.0.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("10.0.0.0/30")).xsupernet_of)) (((((xself).xfactory)) ("10.0.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xself).xfactory)) ("10.0.0.0/24")).xsupernet_of)) (((((xself).xfactory)) ("10.0.0.0/30"))))))
                xtest_subnet_of_mixed_types.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((((((xipaddress).xIPv4Network)) ("10.0.0.0/30")).xsupernet_of)) (((((xipaddress).xIPv6Network)) ("::1/128"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((((((xipaddress).xIPv6Network)) ("::1/128")).xsupernet_of)) (((((xipaddress).xIPv4Network)) ("10.0.0.0/30"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((((((xipaddress).xIPv4Network)) ("10.0.0.0/30")).xsubnet_of)) (((((xipaddress).xIPv6Network)) ("::1/128"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((((((xipaddress).xIPv6Network)) ("::1/128")).xsubnet_of)) (((((xipaddress).xIPv4Network)) ("10.0.0.0/30"))))
            (((unsupported)) ((xCommonTestMixin_v6)))
              seq
                unsupported
                xtest_no_mask.write
                  [xself]
                    memory > xnet
                    seq > @
                      (((unsupported)) ((xaddress)) ((((unsupported)) ("::1") (1) ((("x00".mul 15).add "x01")))))
                        seq
                          xnet.write ((((xself).xfactory)) ((xaddress)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xnet)))) ("::1/128"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xnet).xnetmask)))) ("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xnet).xhostmask)))) ("::"))
                xtest_split_netmask.write
                  [xself]
                    memory > xaddr
                    seq > @
                      seq
                        xaddr.write "cafe:cafe::/128/190"
                        (((unsupported)) (((((xself).xassertAddressError)) (("Only one '/' permitted in %r".mod (xaddr))))))
                          bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                xtest_address_errors.write
                  [xself]
                    memory > xassertBadAddress
                    seq > @
                      seq
                        xassertBadAddress.write
                          [xaddr xdetails]
                            seq > @
                              (((unsupported)) (((((xself).xassertAddressError)) ((xdetails)))))
                                bogusForceDataize.write ((((xself).xfactory)) ((xaddr)))
                        bogusForceDataize.write (((xassertBadAddress)) ("/") ("Address cannot be empty"))
                        bogusForceDataize.write (((xassertBadAddress)) ("/8") ("Address cannot be empty"))
                        bogusForceDataize.write (((xassertBadAddress)) ("google.com") ("At least 3 parts"))
                        bogusForceDataize.write (((xassertBadAddress)) ("1.2.3.4") ("At least 3 parts"))
                        bogusForceDataize.write (((xassertBadAddress)) ("10/8") ("At least 3 parts"))
                        bogusForceDataize.write (((xassertBadAddress)) ("1234:axy::b") ("Only hex digits"))
                xtest_valid_netmask.write
                  [xself]
                    memory > xnet_str
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) ("2001:db8::/32"))))) ("2001:db8::/32"))
                        (((unsupported)) ((xi)) ((((xrange)) (0) (129))))
                          seq
                            xnet_str.write ("::/%d".mod (xi))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) ((xnet_str)))))) ((xnet_str)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xself).xfactory)) (("::/0%d".mod (xi))))))) ((xnet_str)))
                xtest_netmask_errors.write
                  [xself]
                    memory > xassertBadNetmask
                    seq > @
                      seq
                        xassertBadNetmask.write
                          [xaddr xnetmask]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("%r is not a valid netmask".mod (xnetmask))
                                (((unsupported)) (((((xself).xassertNetmaskError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xself).xfactory)) (("%s/%s".mod (((unsupported)) ((xaddr)) ((xnetmask))))))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") (""))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("::1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("1::"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("-1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("+1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") (" 1 "))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("0x1"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("129"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("1.2.3.4"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ("pudding"))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::") ("::"))
                xtest_netmask_in_tuple_errors.write
                  [xself]
                    memory > xassertBadNetmask
                    seq > @
                      seq
                        xassertBadNetmask.write
                          [xaddr xnetmask]
                            memory > xmsg
                            seq > @
                              seq
                                xmsg.write ("%r is not a valid netmask".mod (xnetmask))
                                (((unsupported)) (((((xself).xassertNetmaskError)) (((((xre).xescape)) ((xmsg)))))))
                                  bogusForceDataize.write ((((xself).xfactory)) ((((unsupported)) ((xaddr)) ((xnetmask)))))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") ((1.neg)))
                        bogusForceDataize.write (((xassertBadNetmask)) ("::1") (129))
                xtest_pickle.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpickle_test)) ("2001:db8::1000/124"))
                        bogusForceDataize.write ((((xself).xpickle_test)) ("2001:db8::1000/127"))
                        bogusForceDataize.write ((((xself).xpickle_test)) ("2001:db8::1000"))
            (((unsupported)) ((xBaseTestCase)) ((xNetmaskTestMixin_v6)))
              xfactory.write ((xipaddress).xIPv6Interface)
            (((unsupported)) ((xBaseTestCase)) ((xNetmaskTestMixin_v6)))
              seq
                xfactory.write ((xipaddress).xIPv6Network)
                xtest_subnet_of.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:999::/56")).xsubnet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xself).xfactory)) ("2000:aaa::/56")).xsubnet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:bbb::/56")).xsubnet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:aaa::/48")).xsubnet_of)) (((((xself).xfactory)) ("2000:aaa::/56"))))))
                xtest_supernet_of.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:999::/56")).xsupernet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:aaa::/56")).xsupernet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xself).xfactory)) ("2000:bbb::/56")).xsupernet_of)) (((((xself).xfactory)) ("2000:aaa::/48"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xself).xfactory)) ("2000:aaa::/48")).xsupernet_of)) (((((xself).xfactory)) ("2000:aaa::/56"))))))
            (((unsupported)) ((xBaseTestCase)))
              seq
                xassertFactoryError.write
                  [xself xfactory xkind]
                    memory > xaddr
                    memory > xmsg
                    seq > @
                      seq
                        unsupported
                        xaddr.write "camelot"
                        xmsg.write "%r does not appear to be an IPv4 or IPv6 %s"
                        (((unsupported)) (((((xself).xassertCleanError)) ((xValueError)) ((xmsg)) ((xaddr)) ((xkind)))))
                          bogusForceDataize.write (((xfactory)) ((xaddr)))
                xtest_ip_address.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFactoryError)) (((xipaddress).xip_address)) ("address"))
                xtest_ip_interface.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFactoryError)) (((xipaddress).xip_interface)) ("interface"))
                xtest_ip_network.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFactoryError)) (((xipaddress).xip_network)) ("network"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xv4addr.write ((((xipaddress).xIPv4Address)) (1))
                xv4net.write ((((xipaddress).xIPv4Network)) (1))
                xv4intf.write ((((xipaddress).xIPv4Interface)) (1))
                xv6addr.write ((((xipaddress).xIPv6Address)) (1))
                xv6net.write ((((xipaddress).xIPv6Network)) (1))
                xv6intf.write ((((xipaddress).xIPv6Interface)) (1))
                xv4_addresses.write (((unsupported)) ((xv4addr)) ((xv4intf)))
                xv4_objects.write ((xv4_addresses).add (((unsupported)) ((xv4net))))
                xv6_addresses.write (((unsupported)) ((xv6addr)) ((xv6intf)))
                xv6_objects.write ((xv6_addresses).add (((unsupported)) ((xv6net))))
                xobjects.write ((xv4_objects).add (xv6_objects))
                xv4addr2.write ((((xipaddress).xIPv4Address)) (2))
                xv4net2.write ((((xipaddress).xIPv4Network)) (2))
                xv4intf2.write ((((xipaddress).xIPv4Interface)) (2))
                xv6addr2.write ((((xipaddress).xIPv6Address)) (2))
                xv6net2.write ((((xipaddress).xIPv6Network)) (2))
                xv6intf2.write ((((xipaddress).xIPv6Interface)) (2))
                xtest_foreign_type_equality.write
                  [xself]
                    memory > xother
                    seq > @
                      seq
                        xother.write (((xobject)) 0)
                        (((unsupported)) ((xobj)) (((xself).xobjects)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xobj)) ((xother)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xobj).eq (xother))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xobj).x__eq__)) ((xother)))) ((xNotImplemented)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xobj).x__ne__)) ((xother)))) ((xNotImplemented)))
                xtest_mixed_type_equality.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xlhs)) (((xself).xobjects)))
                        (((unsupported)) ((xrhs)) (((xself).xobjects)))
                          seq
                            (((unsupported)) ((xlhs)) ((xrhs))).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertNotEqual)) ((xlhs)) ((xrhs)))
                xtest_same_type_equality.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xobj)) (((xself).xobjects)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xobj)) ((xobj)))
                          bogusForceDataize.write ((((xself).xassertLessEqual)) ((xobj)) ((xobj)))
                          bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xobj)) ((xobj)))
                xtest_same_type_ordering.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xlhs)) ((xrhs)))) ((((unsupported)) ((((unsupported)) (((xself).xv4addr)) (((xself).xv4addr2)))) ((((unsupported)) (((xself).xv4net)) (((xself).xv4net2)))) ((((unsupported)) (((xself).xv4intf)) (((xself).xv4intf2)))) ((((unsupported)) (((xself).xv6addr)) (((xself).xv6addr2)))) ((((unsupported)) (((xself).xv6net)) (((xself).xv6net2)))) ((((unsupported)) (((xself).xv6intf)) (((xself).xv6intf2)))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertNotEqual)) ((xlhs)) ((xrhs)))
                          bogusForceDataize.write ((((xself).xassertLess)) ((xlhs)) ((xrhs)))
                          bogusForceDataize.write ((((xself).xassertLessEqual)) ((xlhs)) ((xrhs)))
                          bogusForceDataize.write ((((xself).xassertGreater)) ((xrhs)) ((xlhs)))
                          bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xrhs)) ((xlhs)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xlhs).greater (xrhs))))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xrhs).less (xlhs))))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xlhs).geq (xrhs))))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((xrhs).leq (xlhs))))
                xtest_containment.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((xobj)) (((xself).xv4_addresses)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xobj)) (((xself).xv4net)))
                        (((unsupported)) ((xobj)) (((xself).xv6_addresses)))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xobj)) (((xself).xv6net)))
                        (((unsupported)) ((xobj)) ((((xself).xv4_objects).add (((unsupported)) (((xself).xv6net))))))
                          bogusForceDataize.write ((((xself).xassertNotIn)) ((xobj)) (((xself).xv6net)))
                        (((unsupported)) ((xobj)) ((((xself).xv6_objects).add (((unsupported)) (((xself).xv4net))))))
                          bogusForceDataize.write ((((xself).xassertNotIn)) ((xobj)) (((xself).xv4net)))
                xtest_mixed_type_ordering.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xlhs)) (((xself).xobjects)))
                        (((unsupported)) ((xrhs)) (((xself).xobjects)))
                          seq
                            ((((xisinstance)) ((xlhs)) ((((xtype)) ((xrhs))))).or (((xisinstance)) ((xrhs)) ((((xtype)) ((xlhs)))))).if
                              (((unsupported)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) (((xlhs).less (xrhs))))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) (((xlhs).greater (xrhs))))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) (((xlhs).leq (xrhs))))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((unsupported)) (((xlhs).geq (xrhs))))))
                xtest_foreign_type_ordering.write
                  [xself]
                    memory > xother
                    seq > @
                      seq
                        xother.write (((xobject)) 0)
                        (((unsupported)) ((xobj)) (((xself).xobjects)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              unsupported
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              unsupported
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              unsupported
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              unsupported
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xobj).less (xLARGEST))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xobj).greater (xLARGEST))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xobj).leq (xLARGEST))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xobj).geq (xLARGEST))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xobj).less (xSMALLEST))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xobj).greater (xSMALLEST))))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xobj).leq (xSMALLEST))))
                            bogusForceDataize.write ((((xself).xassertTrue)) (((xobj).geq (xSMALLEST))))
                xtest_mixed_type_key.write
                  [xself]
                    memory > xv6_ordered
                    memory > xv4_ordered
                    seq > @
                      seq
                        xv4_ordered.write (((unsupported)) (((xself).xv4addr)) (((xself).xv4net)) (((xself).xv4intf)))
                        xv6_ordered.write (((unsupported)) (((xself).xv6addr)) (((xself).xv6net)) (((xself).xv6intf)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xv4_ordered)) ((((unsupported)) ((xsorted)) (((xself).xv4_objects)) (((xipaddress).xget_mixed_type_key)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xv6_ordered)) ((((unsupported)) ((xsorted)) (((xself).xv6_objects)) (((xipaddress).xget_mixed_type_key)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xv4_ordered).add (xv6_ordered))) ((((unsupported)) ((xsorted)) (((xself).xobjects)) (((xipaddress).xget_mixed_type_key)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xNotImplemented)) (((((xipaddress).xget_mixed_type_key)) ((xobject)))))
                xtest_incompatible_versions.write
                  [xself]
                    memory > xv6net
                    memory > xv6addr
                    memory > xv4net
                    memory > xv4addr
                    seq > @
                      seq
                        xv4addr.write ((((xipaddress).xip_address)) ("1.1.1.1"))
                        xv4net.write ((((xipaddress).xip_network)) ("1.1.1.1"))
                        xv6addr.write ((((xipaddress).xip_address)) ("::1"))
                        xv6net.write ((((xipaddress).xip_network)) ("::1"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv4addr).x__lt__)) ((xv6addr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv4addr).x__gt__)) ((xv6addr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv4net).x__lt__)) ((xv6net)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv4net).x__gt__)) ((xv6net)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv6addr).x__lt__)) ((xv4addr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv6addr).x__gt__)) ((xv4addr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv6net).x__lt__)) ((xv4net)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xv6net).x__gt__)) ((xv4net)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xipv4_address)) (((((xipaddress).xIPv4Address)) ("1.2.3.4"))))
                        (((unsupported)) (((xself).xipv4_interface)) (((((xipaddress).xIPv4Interface)) ("1.2.3.4/24"))))
                        (((unsupported)) (((xself).xipv4_network)) (((((xipaddress).xIPv4Network)) ("1.2.3.0/24"))))
                        (((unsupported)) (((xself).xipv6_address)) (((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200:0:0:1"))))
                        (((unsupported)) (((xself).xipv6_interface)) (((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200:0:0:1/64"))))
                        (((unsupported)) (((xself).xipv6_network)) (((((xipaddress).xIPv6Network)) ("2001:658:22a:cafe::/64"))))
                xtestRepr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ("IPv4Interface('1.2.3.4/32')") ((((xrepr)) (((((xipaddress).xIPv4Interface)) ("1.2.3.4"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("IPv6Interface('::1/128')") ((((xrepr)) (((((xipaddress).xIPv6Interface)) ("::1"))))))
                xtestIPv4Tuple.write
                  [xself]
                    memory > xip
                    memory > xnet
                    seq > @
                      seq
                        xip.write ((((xipaddress).xIPv4Address)) ("192.0.2.1"))
                        xnet.write ((((xipaddress).xIPv4Network)) ("192.0.2.1/32"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") (32))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) (32))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) (32))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") ("255.255.255.255"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) ("255.255.255.255"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) ("255.255.255.255"))))) ((xnet)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") (24))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) (24))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) (24))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") ("255.255.255.0"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) ("255.255.255.0"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) ("255.255.255.0"))))
                        xnet.write ((((xipaddress).xIPv4Network)) ("192.0.2.0/24"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") (24))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) (24))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) (24))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.1") ("255.255.255.0"))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) ("255.255.255.0"))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) ("255.255.255.0"))) (FALSE))) ((xnet)))
                        xip.write ((((xipaddress).xIPv4Address)) ("192.0.2.0"))
                        xnet.write ((((xipaddress).xIPv4Network)) ("192.0.2.0/24"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.0") ("255.255.255.0"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) ("255.255.255.0"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) ("255.255.255.0"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ("192.0.2.0") (24))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((xip)) (24))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Network)) ((((unsupported)) ((((unsupported)) 0)) (24))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Interface)) ((((unsupported)) ("192.0.2.1") (24))))) (((((xipaddress).xIPv4Interface)) ("192.0.2.1/24"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Interface)) ((((unsupported)) ((((unsupported)) 0)) (24))))) (((((xipaddress).xIPv4Interface)) ("192.0.2.1/24"))))
                xtestIPv6Tuple.write
                  [xself]
                    memory > xip
                    memory > xnet
                    seq > @
                      seq
                        xip.write ((((xipaddress).xIPv6Address)) ("2001:db8::"))
                        xnet.write ((((xipaddress).xIPv6Network)) ("2001:db8::/128"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ("2001:db8::") ("128"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ((((unsupported)) 0)) (128))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ((xip)) ("128"))))) ((xnet)))
                        xip.write ((((xipaddress).xIPv6Address)) ("2001:db8::"))
                        xnet.write ((((xipaddress).xIPv6Network)) ("2001:db8::/96"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ("2001:db8::") ("96"))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ((((unsupported)) 0)) (96))))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Network)) ((((unsupported)) ((xip)) ("96"))))) ((xnet)))
                        xip.write ((((xipaddress).xIPv6Address)) ("2001:db8::1"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv6Network)) ((((unsupported)) ("2001:db8::1") (96))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv6Network)) ((((unsupported)) ((((unsupported)) 0)) (96))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xipaddress).xIPv6Network)) ((((unsupported)) ((xip)) (96))))
                        xnet.write ((((xipaddress).xIPv6Network)) ("2001:db8::/96"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv6Network)) ((((unsupported)) ("2001:db8::1") (96))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv6Network)) ((((unsupported)) ((((unsupported)) 0)) (96))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xipaddress).xIPv6Network)) ((((unsupported)) ((xip)) (96))) (FALSE))) ((xnet)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Interface)) ((((unsupported)) ("2001:db8::1") ("96"))))) (((((xipaddress).xIPv6Interface)) ("2001:db8::1/96"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Interface)) ((((unsupported)) ((((unsupported)) 0)) ("96"))))) (((((xipaddress).xIPv6Interface)) ("2001:db8::1/96"))))
                xtestAddressIntMath.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv4Address)) ("1.1.1.1")).add 255)) (((((xipaddress).xIPv4Address)) ("1.1.2.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv4Address)) ("1.1.1.1")).sub 256)) (((((xipaddress).xIPv4Address)) ("1.1.0.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv6Address)) ("::1")).add ((((unsupported)) (2) (16)).sub 2))) (((((xipaddress).xIPv6Address)) ("::ffff"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv6Address)) ("::ffff")).sub ((((unsupported)) (2) (16)).sub 2))) (((((xipaddress).xIPv6Address)) ("::1"))))
                xtestInvalidIntToBytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xv4_int_to_packed)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xv4_int_to_packed)) ((((unsupported)) (2) (((xipaddress).xIPV4LENGTH)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xv6_int_to_packed)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xv6_int_to_packed)) ((((unsupported)) (2) (((xipaddress).xIPV6LENGTH)))))
                xtestInternals.write
                  [xself]
                    memory > xip2
                    memory > xip3
                    memory > xip1
                    seq > @
                      seq
                        xip1.write ((((xipaddress).xIPv4Address)) ("10.10.10.10"))
                        xip2.write ((((xipaddress).xIPv4Address)) ("10.10.10.11"))
                        xip3.write ((((xipaddress).xIPv4Address)) ("10.10.10.12"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xipaddress).x_find_address_range)) ((((unsupported)) ((xip1)))))))) ((((unsupported)) ((((unsupported)) ((xip1)) ((xip1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xipaddress).x_find_address_range)) ((((unsupported)) ((xip1)) ((xip3)))))))) ((((unsupported)) ((((unsupported)) ((xip1)) ((xip1)))) ((((unsupported)) ((xip3)) ((xip3)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xipaddress).x_find_address_range)) ((((unsupported)) ((xip1)) ((xip2)) ((xip3)))))))) ((((unsupported)) ((((unsupported)) ((xip1)) ((xip3)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (128) (((((xipaddress).x_count_righthand_zero_bits)) (0) (128))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("IPv4Network('1.2.3.0/24')") ((((xrepr)) (((xself).xipv4_network)))))
                xtestGetNetwork.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv4_network).xnetwork_address)))) (16909056))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv4_network).xnetwork_address)))) ("1.2.3.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv6_network).xnetwork_address)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv6_network).xnetwork_address)))) ("2001:658:22a:cafe::"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv6_network).xhostmask)))) ("::ffff:ffff:ffff:ffff"))
                xtestIpFromInt.write
                  [xself]
                    memory > xipv4
                    memory > xv6_int
                    memory > xipv6
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).x_ip)) ((((((xipaddress).xIPv4Interface)) (16909060)).x_ip)))
                        xipv4.write ((((xipaddress).xip_network)) ("1.2.3.4"))
                        xipv6.write ((((xipaddress).xip_network)) ("2001:658:22a:cafe:200:0:0:1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xipv4)) (((((xipaddress).xip_network)) ((((xint)) (((xipv4).xnetwork_address)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xipv6)) (((((xipaddress).xip_network)) ((((xint)) (((xipv6).xnetwork_address)))))))
                        xv6_int.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).x_ip)) ((((((xipaddress).xIPv6Interface)) ((xv6_int))).x_ip)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_network)) ((((xself).xipv4_address).x_ip))).xversion)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_network)) ((((xself).xipv6_address).x_ip))).xversion)) (6))
                xtestIpFromPacked.write
                  [xself]
                    memory > xaddress
                    seq > @
                      seq
                        xaddress.write ((xipaddress).xip_address)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).x_ip)) ((((((xipaddress).xip_interface)) ("x01x02x03x04")).x_ip)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xaddress)) ("255.254.253.252"))) ((((xaddress)) ("xffxfexfdxfc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).xip)) ((((((xipaddress).xip_interface)) ("x20x01x06x58x02x2axcaxfex02x00x00x00x00x00x00x01")).xip)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xaddress)) ("ffff:2:3:4:ffff::"))) ((((xaddress)) ((("xffxffx00x02x00x03x00x04".add "xffxff").add ("x00".mul 6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xaddress)) ("::"))) ((((xaddress)) (("x00".mul 16)))))
                xtestGetIp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv4_interface).xip)))) (16909060))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv4_interface).xip)))) ("1.2.3.4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv6_interface).xip)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv6_interface).xip)))) ("2001:658:22a:cafe:200::1"))
                xtestGetNetmask.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv4_network).xnetmask)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv4_network).xnetmask)))) ("255.255.255.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv6_network).xnetmask)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_network).xprefixlen)) (64))
                xtestZeroNetmask.write
                  [xself]
                    memory > xipv6_zero_netmask
                    memory > xipv4_zero_netmask
                    seq > @
                      seq
                        xipv4_zero_netmask.write ((((xipaddress).xIPv4Interface)) ("1.2.3.4/0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xipv4_zero_netmask).xnetwork).xnetmask)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipv4_zero_netmask).x_prefix_from_prefix_string)) ("0"))) (0))
                        xipv6_zero_netmask.write ((((xipaddress).xIPv6Interface)) ("::1/0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xipv6_zero_netmask).xnetwork).xnetmask)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipv6_zero_netmask).x_prefix_from_prefix_string)) ("0"))) (0))
                xtestIPv4Net.write
                  [xself]
                    memory > xnet
                    seq > @
                      seq
                        xnet.write ((((xipaddress).xIPv4Network)) ("127.0.0.0/0.0.0.255"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xnet).xprefixlen)) (24))
                xtestGetBroadcast.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv4_network).xbroadcast_address)))) (16909311))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv4_network).xbroadcast_address)))) ("1.2.3.255"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) ((((xself).xipv6_network).xbroadcast_address)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xself).xipv6_network).xbroadcast_address)))) ("2001:658:22a:cafe:ffff:ffff:ffff:ffff"))
                xtestGetPrefixlen.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xipv4_interface).xnetwork).xprefixlen)) (24))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xipv6_interface).xnetwork).xprefixlen)) (64))
                xtestGetSupernet.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv4_network).xsupernet)) 0).xprefixlen)) (23))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xself).xipv4_network).xsupernet)) 0).xnetwork_address)))) ("1.2.2.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xipaddress).xIPv4Interface)) ("0.0.0.0/0")).xnetwork).xsupernet)) 0)) (((((xipaddress).xIPv4Network)) ("0.0.0.0/0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv6_network).xsupernet)) 0).xprefixlen)) (63))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xself).xipv6_network).xsupernet)) 0).xnetwork_address)))) ("2001:658:22a:cafe::"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((((xipaddress).xIPv6Interface)) ("::0/0")).xnetwork).xsupernet)) 0)) (((((xipaddress).xIPv6Network)) ("::0/0"))))
                xtestGetSupernet3.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv4_network).xsupernet)) (3)).xprefixlen)) (21))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xself).xipv4_network).xsupernet)) (3)).xnetwork_address)))) ("1.2.0.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv6_network).xsupernet)) (3)).xprefixlen)) (61))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((((xself).xipv6_network).xsupernet)) (3)).xnetwork_address)))) ("2001:658:22a:caf8::"))
                xtestGetSupernet4.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((((xself).xipv4_network).xsupernet)) (2) (1))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((((xself).xipv4_network).xsupernet)) (25))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xself).xipv4_network).xsupernet)) (2))) ((((unsupported)) ((((xself).xipv4_network).xsupernet)) (22))))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((((xself).xipv6_network).xsupernet)) (2) (1))
                        (((unsupported)) (((xself).xassertRaises)) ((xValueError)) ((((xself).xipv6_network).xsupernet)) (65))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xself).xipv6_network).xsupernet)) (2))) ((((unsupported)) ((((xself).xipv6_network).xsupernet)) (62))))
                xtestHosts.write
                  [xself]
                    memory > xaddrs
                    memory > xhosts
                    memory > xtpl_args
                    memory > xstr_args
                    memory > xipv6_network
                    seq > @
                      seq
                        xhosts.write (((xlist)) ((((((xself).xipv4_network).xhosts)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (254) ((((xlen)) ((xhosts)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Address)) ("1.2.3.1"))) ((((unsupported)) ((xhosts)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Address)) ("1.2.3.254"))) ((((unsupported)) ((xhosts)) ((1.neg)))))
                        xipv6_network.write ((((xipaddress).xIPv6Network)) ("2001:658:22a:cafe::/120"))
                        xhosts.write (((xlist)) (((((xipv6_network).xhosts)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (255) ((((xlen)) ((xhosts)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::1"))) ((((unsupported)) ((xhosts)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::ff"))) ((((unsupported)) ((xhosts)) ((1.neg)))))
                        xaddrs.write (((unsupported)) (((((xipaddress).xIPv4Address)) ("2.0.0.0"))) (((((xipaddress).xIPv4Address)) ("2.0.0.1"))))
                        xstr_args.write "2.0.0.0/31"
                        xtpl_args.write (((unsupported)) ("2.0.0.0") (31))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        xaddrs.write (((unsupported)) (((((xipaddress).xIPv4Address)) ("1.2.3.4"))))
                        xstr_args.write "1.2.3.4/32"
                        xtpl_args.write (((unsupported)) ("1.2.3.4") (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        xaddrs.write (((unsupported)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::"))) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::1"))))
                        xstr_args.write "2001:658:22a:cafe::/127"
                        xtpl_args.write (((unsupported)) ("2001:658:22a:cafe::") (127))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        xaddrs.write (((unsupported)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::1"))))
                        xstr_args.write "2001:658:22a:cafe::1/128"
                        xtpl_args.write (((unsupported)) ("2001:658:22a:cafe::1") (128))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddrs)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((((((xipaddress).xip_network)) ((xstr_args))).xhosts)) 0)))) ((((xlist)) ((((((((xipaddress).xip_network)) ((xtpl_args))).xhosts)) 0)))))
                xtestFancySubnetting.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((((unsupported)) ((((xself).xipv4_network).xsubnets)) (3))))) ((((xsorted)) ((((unsupported)) ((((xself).xipv4_network).xsubnets)) (27))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((unsupported)) ((((xself).xipv4_network).xsubnets)) (23))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((unsupported)) ((((xself).xipv4_network).xsubnets)) (3) (27))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((((unsupported)) ((((xself).xipv6_network).xsubnets)) (4))))) ((((xsorted)) ((((unsupported)) ((((xself).xipv6_network).xsubnets)) (68))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((unsupported)) ((((xself).xipv6_network).xsubnets)) (63))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((unsupported)) ((((xself).xipv6_network).xsubnets)) (4) (68))))
                xtestGetSubnets.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((((xlist)) ((((((xself).xipv4_network).xsubnets)) 0)))) (0)).xprefixlen)) (25))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((unsupported)) ((((xlist)) ((((((xself).xipv4_network).xsubnets)) 0)))) (0)).xnetwork_address)))) ("1.2.3.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((unsupported)) ((((xlist)) ((((((xself).xipv4_network).xsubnets)) 0)))) (1)).xnetwork_address)))) ("1.2.3.128"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((((xlist)) ((((((xself).xipv6_network).xsubnets)) 0)))) (0)).xprefixlen)) (65))
                xtestGetSubnetForSingle32.write
                  [xself]
                    memory > xsubnets2
                    memory > xip
                    memory > xsubnets1
                    seq > @
                      seq
                        xip.write ((((xipaddress).xIPv4Network)) ("1.2.3.4/32"))
                        xsubnets1.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) (((((xip).xsubnets)) 0)))
                        xsubnets2.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) (((((xip).xsubnets)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsubnets1)) ((((unsupported)) ("1.2.3.4/32"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsubnets1)) ((xsubnets2)))
                xtestGetSubnetForSingle128.write
                  [xself]
                    memory > xsubnets2
                    memory > xip
                    memory > xsubnets1
                    seq > @
                      seq
                        xip.write ((((xipaddress).xIPv6Network)) ("::1/128"))
                        xsubnets1.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) (((((xip).xsubnets)) 0)))
                        xsubnets2.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) (((((xip).xsubnets)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsubnets1)) ((((unsupported)) ("::1/128"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsubnets1)) ((xsubnets2)))
                xtestSubnet2.write
                  [xself]
                    memory > xips
                    memory > xipsv6
                    seq > @
                      seq
                        xips.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) ((((((xself).xipv4_network).xsubnets)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xips)) ((((unsupported)) ("1.2.3.0/26") ("1.2.3.64/26") ("1.2.3.128/26") ("1.2.3.192/26"))))
                        xipsv6.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) ((((((xself).xipv6_network).xsubnets)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xipsv6)) ((((unsupported)) ("2001:658:22a:cafe::/66") ("2001:658:22a:cafe:4000::/66") ("2001:658:22a:cafe:8000::/66") ("2001:658:22a:cafe:c000::/66"))))
                xtestGetSubnets3.write
                  [xself]
                    memory > xipv6_network
                    memory > xsubnets
                    seq > @
                      seq
                        xsubnets.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) ((((((xself).xipv4_network).xsubnets)) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsubnets)) ((((unsupported)) (3))))) ((((unsupported)) ("1.2.3.0/32") ("1.2.3.1/32") ("1.2.3.2/32"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsubnets)) ((((unsupported)) ((3.neg)))))) ((((unsupported)) ("1.2.3.253/32") ("1.2.3.254/32") ("1.2.3.255/32"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xsubnets)))) (256))
                        xipv6_network.write ((((xipaddress).xIPv6Network)) ("2001:658:22a:cafe::/120"))
                        xsubnets.write (((unsupported)) ((((xstr)) ((xx)))) ((xx)) (((((xipv6_network).xsubnets)) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsubnets)) ((((unsupported)) (3))))) ((((unsupported)) ("2001:658:22a:cafe::/128") ("2001:658:22a:cafe::1/128") ("2001:658:22a:cafe::2/128"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsubnets)) ((((unsupported)) ((3.neg)))))) ((((unsupported)) ("2001:658:22a:cafe::fd/128") ("2001:658:22a:cafe::fe/128") ("2001:658:22a:cafe::ff/128"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xsubnets)))) (256))
                xtestSubnetFailsForLargeCidrDiff.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) (((((((xself).xipv4_interface).xnetwork).xsubnets)) (9))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((((xself).xipv4_network).xsubnets)) (9))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) (((((((xself).xipv6_interface).xnetwork).xsubnets)) (65))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((((xself).xipv6_network).xsubnets)) (65))))
                xtestSupernetFailsForLargeCidrDiff.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xself).xipv4_interface).xnetwork).xsupernet)) (25))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((((xself).xipv6_interface).xnetwork).xsupernet)) (65))
                xtestSubnetFailsForNegativeCidrDiff.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) (((((((xself).xipv4_interface).xnetwork).xsubnets)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((((xself).xipv4_network).xsubnets)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) (((((((xself).xipv6_interface).xnetwork).xsubnets)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((((xself).xipv6_network).xsubnets)) ((1.neg)))))
                xtestGetNum_Addresses.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_network).xnum_addresses)) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((((xlist)) ((((((xself).xipv4_network).xsubnets)) 0)))) (0)).xnum_addresses)) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv4_network).xsupernet)) 0).xnum_addresses)) (512))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_network).xnum_addresses)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((((xlist)) ((((((xself).xipv6_network).xsubnets)) 0)))) (0)).xnum_addresses)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xself).xipv6_network).xsupernet)) 0).xnum_addresses)) ((((unsupported)) 0)))
                xtestContains.write
                  [xself]
                    memory > xaddr1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)) (((((xipaddress).xIPv4Interface)) ("1.2.3.128/25"))) (((xself).xipv4_network)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((((xipaddress).xIPv4Interface)) ("1.2.4.1/24"))) (((xself).xipv4_network)))
                        xaddr1.write ((((xipaddress).xIPv4Address)) ("1.2.3.37"))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xaddr1)) (((xself).xipv4_network)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((((xipaddress).xIPv4Network)) ("1.1.0.0/16")).x__contains__)) (((((xipaddress).xIPv4Network)) ("1.0.0.0/15"))))))
                xtestNth.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xself).xipv4_network)) (5))))) ("1.2.3.5"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) ((((xself).xipv4_network).x__getitem__)) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) (((xself).xipv6_network)) (5))))) ("2001:658:22a:cafe::5"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) ((((xself).xipv6_network).x__getitem__)) ((((unsupported)) (1) (64))))
                xtestGetitem.write
                  [xself]
                    memory > xaddr
                    memory > xaddr_list
                    seq > @
                      seq
                        xaddr.write ((((xipaddress).xIPv4Network)) ("172.31.255.128/255.255.255.240"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (28) (((xaddr).xprefixlen)))
                        xaddr_list.write (((xlist)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("172.31.255.128") ((((xstr)) ((((unsupported)) ((xaddr_list)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("172.31.255.128") ((((xstr)) ((((unsupported)) ((xaddr)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("172.31.255.143") ((((xstr)) ((((unsupported)) ((xaddr_list)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("172.31.255.143") ((((xstr)) ((((unsupported)) ((xaddr)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xaddr_list)) ((1.neg)))) ((((unsupported)) ((xaddr)) ((1.neg)))))
                xtestEqual.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).eq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/24")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).eq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/23")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).eq ((((xipaddress).xIPv6Interface)) ("::1.2.3.4/24")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).eq "")))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).eq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).eq 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).eq ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200::1/64")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).eq ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200::1/63")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).eq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/23")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).eq "")))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).eq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).eq 2)))
                xtestNotEqual.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv4_interface).neq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).neq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/23")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).neq ((((xipaddress).xIPv6Interface)) ("::1.2.3.4/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).neq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).neq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_interface).neq 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_address).neq ((((xipaddress).xIPv4Address)) ("1.2.3.5")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_address).neq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_address).neq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv4_address).neq 2)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xself).xipv6_interface).neq ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200::1/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).neq ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200::1/63")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).neq ((((xipaddress).xIPv4Interface)) ("1.2.3.4/23")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).neq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).neq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_interface).neq 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_address).neq ((((xipaddress).xIPv4Address)) ("1.2.3.4")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_address).neq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_address).neq (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xself).xipv6_address).neq 2)))
                xtestSlash32Constructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xipaddress).xIPv4Interface)) ("1.2.3.4/255.255.255.255"))))) ("1.2.3.4/32"))
                xtestSlash128Constructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xipaddress).xIPv6Interface)) ("::1/128"))))) ("::1/128"))
                xtestSlash0Constructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((((xipaddress).xIPv4Interface)) ("1.2.3.4/0.0.0.0"))))) ("1.2.3.4/0"))
                xtestCollapsing.write
                  [xself]
                    memory > xaddr_tuples
                    memory > xip1
                    memory > xcollapsed
                    memory > xip5
                    memory > xip6
                    memory > xip2
                    memory > xip3
                    memory > xip_same1
                    memory > xip4
                    memory > xip_same2
                    seq > @
                      seq
                        xip1.write ((((xipaddress).xIPv4Address)) ("1.1.1.0"))
                        xip2.write ((((xipaddress).xIPv4Address)) ("1.1.1.1"))
                        xip3.write ((((xipaddress).xIPv4Address)) ("1.1.1.2"))
                        xip4.write ((((xipaddress).xIPv4Address)) ("1.1.1.3"))
                        xip5.write ((((xipaddress).xIPv4Address)) ("1.1.1.4"))
                        xip6.write ((((xipaddress).xIPv4Address)) ("1.1.1.0"))
                        xcollapsed.write ((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)) ((xip3)) ((xip4)) ((xip5)) ((xip6)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xcollapsed)))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.1.0/30"))) (((((xipaddress).xIPv4Network)) ("1.1.1.4/32"))))))
                        xip1.write ((((xipaddress).xIPv4Address)) ("1.1.1.0"))
                        xip2.write ((((xipaddress).xIPv4Address)) ("1.1.1.1"))
                        xip3.write ((((xipaddress).xIPv4Address)) ("1.1.1.2"))
                        xip4.write ((((xipaddress).xIPv4Address)) ("1.1.1.3"))
                        xcollapsed.write ((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)) ((xip3)) ((xip4)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xcollapsed)))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.1.0/30"))))))
                        xip1.write ((((xipaddress).xIPv4Network)) ("1.1.0.0/24"))
                        xip2.write ((((xipaddress).xIPv4Network)) ("1.1.1.0/24"))
                        xip3.write ((((xipaddress).xIPv4Network)) ("1.1.2.0/24"))
                        xip4.write ((((xipaddress).xIPv4Network)) ("1.1.3.0/24"))
                        xip5.write ((((xipaddress).xIPv4Network)) ("1.1.4.0/24"))
                        xip6.write ((((xipaddress).xIPv4Network)) ("1.1.0.0/22"))
                        xcollapsed.write ((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)) ((xip3)) ((xip4)) ((xip5)) ((xip6)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xcollapsed)))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.0.0/22"))) (((((xipaddress).xIPv4Network)) ("1.1.4.0/24"))))))
                        xcollapsed.write ((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xcollapsed)))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.0.0/23"))))))
                        (((unsupported)) ((xip_same1)) ((xip_same2)) (((((xipaddress).xIPv4Network)) ("1.1.1.1/32"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip_same1)) ((xip_same2)))))))) ((((unsupported)) ((xip_same1)))))
                        (((unsupported)) ((xip_same1)) ((xip_same2)) (((((xipaddress).xIPv4Address)) ("1.1.1.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip_same1)) ((xip_same2)))))))) ((((unsupported)) (((((xipaddress).xip_network)) ("1.1.1.1/32"))))))
                        xip1.write ((((xipaddress).xIPv6Network)) ("2001::/100"))
                        xip2.write ((((xipaddress).xIPv6Network)) ("2001::/120"))
                        xip3.write ((((xipaddress).xIPv6Network)) ("2001::/96"))
                        xcollapsed.write ((((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)) ((xip3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xcollapsed)))) ((((unsupported)) ((xip3)))))
                        xaddr_tuples.write (((unsupported)) ((((unsupported)) (((((xipaddress).xip_address)) ("1.1.1.1"))) (((((xipaddress).xip_address)) ("::1"))))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.0.0/24"))) (((((xipaddress).xIPv6Network)) ("2001::/120"))))) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("1.1.0.0/32"))) (((((xipaddress).xIPv6Network)) ("2001::/128"))))))
                        (((unsupported)) ((((unsupported)) ((xip1)) ((xip2)))) ((xaddr_tuples)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xipaddress).xcollapse_addresses)) ((((unsupported)) ((xip1)) ((xip2)))))
                xtestSummarizing.write
                  [xself]
                    memory > xip_invalid1
                    memory > xip1
                    memory > xsummarize
                    memory > xip_invalid2
                    memory > xversion
                    memory > xip2
                    seq > @
                      seq
                        xsummarize.write ((xipaddress).xsummarize_address_range)
                        xip1.write ((((xipaddress).xip_address)) ("1.1.1.0"))
                        xip2.write ((((xipaddress).xip_address)) ("1.1.1.255"))
                        (((unsupported)) (((xipaddress).xIPv6Address)))
                          xversion.write
                            [xself]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) (7))
                        xip_invalid1.write (((xIPv7Address)) ("::1"))
                        xip_invalid2.write (((xIPv7Address)) ("::1"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((xsummarize)) ((xip_invalid1)) ((xip_invalid2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xsummarize)) ((xip1)) (((((xipaddress).xIPv6Address)) ("::1"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((((xsummarize)) ((xip1)) ((xip2)))))) (0))) (((((xipaddress).xip_network)) ("1.1.1.0/24"))))
                        xip2.write ((((xipaddress).xip_address)) ("1.1.1.8"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xsummarize)) ((xip1)) ((xip2)))))) ((((unsupported)) (((((xipaddress).xip_network)) ("1.1.1.0/29"))) (((((xipaddress).xip_network)) ("1.1.1.8"))))))
                        xip1.write ((((xipaddress).xIPv4Address)) (0))
                        xip2.write ((((xipaddress).xIPv4Address)) ((((xipaddress).xIPv4Address).x_ALL_ONES)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xipaddress).xIPv4Network)) ("0.0.0.0/0"))))) ((((xlist)) ((((xsummarize)) ((xip1)) ((xip2)))))))
                        xip1.write ((((xipaddress).xip_address)) ("1::"))
                        xip2.write ((((xipaddress).xip_address)) ("1:ffff:ffff:ffff:ffff:ffff:ffff:ffff"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((((xsummarize)) ((xip1)) ((xip2)))))) (0))) (((((xipaddress).xip_network)) ("1::/16"))))
                        xip2.write ((((xipaddress).xip_address)) ("2::"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xsummarize)) ((xip1)) ((xip2)))))) ((((unsupported)) (((((xipaddress).xip_network)) ("1::/16"))) (((((xipaddress).xip_network)) ("2::/128"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((xsummarize)) (((((xipaddress).xip_address)) ("1.1.1.0"))) (((((xipaddress).xip_address)) ("1.1.0.0"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xsummarize)) (((((xipaddress).xip_network)) ("1.1.1.0"))) (((((xipaddress).xip_network)) ("1.1.0.0"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xsummarize)) (((((xipaddress).xip_network)) ("1.1.1.0"))) (((((xipaddress).xip_network)) ("1.1.0.0"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xsummarize)) (((((xipaddress).xip_address)) ("::"))) (((((xipaddress).xip_network)) ("1.1.0.0"))))))
                xtestAddressComparison.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_address)) ("1.1.1.1")).leq ((((xipaddress).xip_address)) ("1.1.1.1")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_address)) ("1.1.1.1")).leq ((((xipaddress).xip_address)) ("1.1.1.2")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_address)) ("::1")).leq ((((xipaddress).xip_address)) ("::1")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_address)) ("::1")).leq ((((xipaddress).xip_address)) ("::2")))))
                xtestInterfaceComparison.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.1/24")).eq ((((xipaddress).xip_interface)) ("1.1.1.1/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.1/16")).less ((((xipaddress).xip_interface)) ("1.1.1.1/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.1/24")).less ((((xipaddress).xip_interface)) ("1.1.1.2/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.2/16")).less ((((xipaddress).xip_interface)) ("1.1.1.1/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.1/24")).greater ((((xipaddress).xip_interface)) ("1.1.1.1/16")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.2/24")).greater ((((xipaddress).xip_interface)) ("1.1.1.1/24")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("1.1.1.1/24")).greater ((((xipaddress).xip_interface)) ("1.1.1.2/16")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::1/64")).eq ((((xipaddress).xip_interface)) ("::1/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::1/64")).less ((((xipaddress).xip_interface)) ("::1/80")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::1/64")).less ((((xipaddress).xip_interface)) ("::2/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::2/48")).less ((((xipaddress).xip_interface)) ("::1/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::1/80")).greater ((((xipaddress).xip_interface)) ("::1/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::2/64")).greater ((((xipaddress).xip_interface)) ("::1/64")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_interface)) ("::1/64")).greater ((((xipaddress).xip_interface)) ("::2/48")))))
                xtestNetworkComparison.write
                  [xself]
                    memory > xip4
                    memory > xip1
                    memory > xipv4
                    memory > xunsorted
                    memory > xip2
                    memory > xsorted
                    memory > xip3
                    memory > xipv6
                    seq > @
                      seq
                        xip1.write ((((xipaddress).xIPv4Network)) ("1.1.1.0/24"))
                        xip2.write ((((xipaddress).xIPv4Network)) ("1.1.1.0/32"))
                        xip3.write ((((xipaddress).xIPv4Network)) ("1.1.2.0/24"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip1).less (xip3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip3).greater (xip2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip1).xcompare_networks)) ((xip1)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip1).xcompare_networks)) ((xip2)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip2).xcompare_networks)) ((xip1)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip1).xcompare_networks)) ((xip3)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip3).xcompare_networks)) ((xip1)))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xip1).x_get_networks_key)) 0).less ((((xip3).x_get_networks_key)) 0))))
                        xip1.write ((((xipaddress).xIPv6Network)) ("2001:2000::/96"))
                        xip2.write ((((xipaddress).xIPv6Network)) ("2001:2001::/96"))
                        xip3.write ((((xipaddress).xIPv6Network)) ("2001:ffff:2000::/96"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip1).less (xip3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip3).greater (xip2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xip1).xcompare_networks)) ((xip3)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xip1).x_get_networks_key)) 0).less ((((xip3).x_get_networks_key)) 0))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((((xself).xipv4_network).xcompare_networks)) (((xself).xipv6_network)))
                        xipv6.write ((((xipaddress).xIPv6Interface)) ("::/0"))
                        xipv4.write ((((xipaddress).xIPv4Interface)) ("0.0.0.0/0"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xipv4).x__lt__)) ((xipv6)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xipv4).x__gt__)) ((xipv6)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xipv6).x__lt__)) ((xipv4)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xipv6).x__gt__)) ((xipv4)))
                        xip1.write ((((xipaddress).xip_network)) ("10.1.2.128/25"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip1).less (xip1))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip1).greater (xip1))))
                        xip2.write ((((xipaddress).xip_network)) ("10.1.3.0/24"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip1).less (xip2))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip2).less (xip1))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip1).greater (xip2))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip2).greater (xip1))))
                        xip3.write ((((xipaddress).xip_network)) ("10.1.3.0/25"))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip2).less (xip3))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip3).less (xip2))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xip2).greater (xip3))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xip3).greater (xip2))))
                        xip1.write ((((xipaddress).xip_network)) ("10.10.10.0/31"))
                        xip2.write ((((xipaddress).xip_network)) ("10.10.10.0"))
                        xip3.write ((((xipaddress).xip_network)) ("10.10.10.2/31"))
                        xip4.write ((((xipaddress).xip_network)) ("10.10.10.2"))
                        xsorted.write (((unsupported)) ((xip1)) ((xip2)) ((xip3)) ((xip4)))
                        xunsorted.write (((unsupported)) ((xip2)) ((xip4)) ((xip1)) ((xip3)))
                        bogusForceDataize.write ((((xunsorted).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsorted)) ((xunsorted)))
                        xunsorted.write (((unsupported)) ((xip4)) ((xip1)) ((xip3)) ((xip2)))
                        bogusForceDataize.write ((((xunsorted).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xsorted)) ((xunsorted)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xip1).x__lt__)) (((((xipaddress).xip_address)) ("10.10.10.0"))))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((((xip2).x__lt__)) (((((xipaddress).xip_address)) ("10.10.10.0"))))) ((xNotImplemented)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_network)) ("1.1.1.1")).leq ((((xipaddress).xip_network)) ("1.1.1.1")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_network)) ("1.1.1.1")).leq ((((xipaddress).xip_network)) ("1.1.1.2")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xipaddress).xip_network)) ("1.1.1.2")).leq ((((xipaddress).xip_network)) ("1.1.1.1")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_network)) ("::1")).leq ((((xipaddress).xip_network)) ("::1")))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_network)) ("::1")).leq ((((xipaddress).xip_network)) ("::2")))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xipaddress).xip_network)) ("::2")).leq ((((xipaddress).xip_network)) ("::1")))))
                xtestStrictNetworks.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xip_network)) ("192.168.1.1/24"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xipaddress).xip_network)) ("::1/120"))
                xtestOverlaps.write
                  [xself]
                    memory > xother3
                    memory > xother
                    memory > xother2
                    seq > @
                      seq
                        xother.write ((((xipaddress).xIPv4Network)) ("1.2.3.0/30"))
                        xother2.write ((((xipaddress).xIPv4Network)) ("1.2.2.0/24"))
                        xother3.write ((((xipaddress).xIPv4Network)) ("1.2.2.64/26"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xself).xipv4_network).xoverlaps)) ((xother)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xself).xipv4_network).xoverlaps)) ((xother2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xother2).xoverlaps)) ((xother3)))))
                xtestEmbeddedIpv4.write
                  [xself]
                    memory > xipv4
                    memory > xv4mapped_ipv6
                    memory > xv4compat_ipv6
                    memory > xipv4_string
                    seq > @
                      seq
                        xipv4_string.write "192.168.0.1"
                        xipv4.write ((((xipaddress).xIPv4Interface)) ((xipv4_string)))
                        xv4compat_ipv6.write ((((xipaddress).xIPv6Interface)) (("::%s".mod (xipv4_string))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xint)) (((xv4compat_ipv6).xip)))) ((((xint)) (((xipv4).xip)))))
                        xv4mapped_ipv6.write ((((xipaddress).xIPv6Interface)) (("::ffff:%s".mod (xipv4_string))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xv4mapped_ipv6).xip)) (((xipv4).xip)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xipaddress).xAddressValueError)) (((xipaddress).xIPv6Interface)) ("2001:1.1.1.1:1.1.1.1"))
                xtestIPv6AddressTooLarge.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xip_address)) ("::FFFF:192.0.2.1"))) (((((xipaddress).xip_address)) ("::FFFF:c000:201"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xip_address)) ("FFFF::192.0.2.1"))) (((((xipaddress).xip_address)) ("FFFF::c000:201"))))
                xtestIPVersion.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_address).xversion)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_address).xversion)) (6))
                xtestMaxPrefixLength.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).xmax_prefixlen)) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).xmax_prefixlen)) (128))
                xtestPacked.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_address).xpacked)) ("x01x02x03x04"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv4Interface)) ("255.254.253.252")).xpacked)) ("xffxfexfdxfc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_address).xpacked)) ("x20x01x06x58x02x2axcaxfex02x00x00x00x00x00x00x01"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv6Interface)) ("ffff:2:3:4:ffff::")).xpacked)) (("xffxffx00x02x00x03x00x04xffxff".add ("x00".mul 6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv6Interface)) ("::1:0:0:0:0")).xpacked)) (((("x00".mul 6).add "x00x01").add ("x00".mul 8))))
                xtestIpType.write
                  [xself]
                    memory > xipv6addr
                    memory > xipv4net
                    memory > xipv4addr
                    memory > xipv6net
                    seq > @
                      seq
                        xipv4net.write ((((xipaddress).xip_network)) ("1.2.3.4"))
                        xipv4addr.write ((((xipaddress).xip_address)) ("1.2.3.4"))
                        xipv6net.write ((((xipaddress).xip_network)) ("::1.2.3.4"))
                        xipv6addr.write ((((xipaddress).xip_address)) ("::1.2.3.4"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xipaddress).xIPv4Network)) ((((xtype)) ((xipv4net)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xipaddress).xIPv4Address)) ((((xtype)) ((xipv4addr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xipaddress).xIPv6Network)) ((((xtype)) ((xipv6net)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xipaddress).xIPv6Address)) ((((xtype)) ((xipv6addr)))))
                xtestReservedIpv4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_interface)) ("224.1.1.1/31")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("240.0.0.0")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("240.0.0.0")).xis_reserved)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_interface)) ("192.168.1.1/17")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("192.169.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("10.255.255.255")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("11.0.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("11.0.0.0")).xis_reserved)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("172.31.255.255")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("172.32.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("169.254.1.0/24")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_interface)) ("169.254.100.200/24")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_interface)) ("169.255.100.200/24")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("127.100.200.254/32")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("127.42.0.0/16")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("128.0.0.0")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("100.64.0.0/10")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("100.64.0.0/10")).xis_global)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("192.0.2.128/25")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("192.0.3.0/24")).xis_global)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("0.0.0.0")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("224.1.1.1")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("240.0.0.0")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("240.0.0.1")).xis_reserved)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("239.255.255.255")).xis_reserved)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("192.168.1.1")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("192.169.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("10.255.255.255")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("11.0.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("172.31.255.255")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("172.32.0.0")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("169.254.100.200")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("169.255.100.200")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xipaddress).xip_address)) ("192.0.7.1")).xis_global)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xipaddress).xip_address)) ("203.0.113.1")).xis_global)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("127.100.200.254")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("127.42.0.0")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("128.0.0.0")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("0.0.0.0")).xis_unspecified)))
                xtestReservedIpv6.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("ffff::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) (((((unsupported)) (2) (128)).sub 1))).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("ff00::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fdff::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("fecf::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("feff:ffff:ffff:ffff::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fbf:ffff::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("ff00::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("fc00::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("fc00:ffff:ffff:ffff::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fbff:ffff::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fe00::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("fea0::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("febf:ffff::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fe7f:ffff::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("fec0::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_interface)) ("0:0::0:01")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_interface)) ("::1/127")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("::")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("::2")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("0::0")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("::1")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_network)) ("::/127")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("2001::1/128")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("200::1/128")).xis_global)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("ffff::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) (((((unsupported)) (2) (128)).sub 1))).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("ff00::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fdff::")).xis_multicast)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("fecf::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("feff:ffff:ffff:ffff::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fbf:ffff::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("ff00::")).xis_site_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("fc00::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("fc00:ffff:ffff:ffff::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fbff:ffff::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fe00::")).xis_private)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("fea0::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("febf:ffff::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fe7f:ffff::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("fec0::")).xis_link_local)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("0:0::0:01")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("::1")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("::2")).xis_loopback)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("0::0")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((((xipaddress).xip_address)) ("::1")).xis_unspecified)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_address)) ("100::")).xis_reserved)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) ((((((xipaddress).xip_network)) ("4000::1/128")).xis_reserved)))
                xtestIpv4Mapped.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_address)) ("::ffff:192.168.1.1")).xipv4_mapped)) (((((xipaddress).xip_address)) ("192.168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_address)) ("::c0a8:101")).xipv4_mapped)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_address)) ("::ffff:c0a8:101")).xipv4_mapped)) (((((xipaddress).xip_address)) ("192.168.1.1"))))
                xtestAddrExclude.write
                  [xself]
                    memory > xaddr4
                    memory > xaddr3
                    memory > xaddr2
                    memory > xaddr6
                    memory > xaddr1
                    memory > xaddr5
                    seq > @
                      seq
                        xaddr1.write ((((xipaddress).xip_network)) ("10.1.1.0/24"))
                        xaddr2.write ((((xipaddress).xip_network)) ("10.1.1.0/26"))
                        xaddr3.write ((((xipaddress).xip_network)) ("10.2.1.0/24"))
                        xaddr4.write ((((xipaddress).xip_address)) ("10.1.1.0"))
                        xaddr5.write ((((xipaddress).xip_network)) ("2001:db8::0/32"))
                        xaddr6.write ((((xipaddress).xip_network)) ("10.1.1.5/32"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr2)))))))) ((((unsupported)) (((((xipaddress).xip_network)) ("10.1.1.64/26"))) (((((xipaddress).xip_network)) ("10.1.1.128/25"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr3)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr4)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr1)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((((xlist)) (((((xaddr1).xaddress_exclude)) ((xaddr6)))))))) ((((unsupported)) (((((xipaddress).xip_network)) ("10.1.1.0/30"))) (((((xipaddress).xip_network)) ("10.1.1.4/32"))) (((((xipaddress).xip_network)) ("10.1.1.6/31"))) (((((xipaddress).xip_network)) ("10.1.1.8/29"))) (((((xipaddress).xip_network)) ("10.1.1.16/28"))) (((((xipaddress).xip_network)) ("10.1.1.32/27"))) (((((xipaddress).xip_network)) ("10.1.1.64/26"))) (((((xipaddress).xip_network)) ("10.1.1.128/25"))))))
                xtestHash.write
                  [xself]
                    memory > xdummy
                    memory > xip2
                    memory > xip1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((((xipaddress).xip_interface)) ("10.1.1.0/24"))))) ((((xhash)) (((((xipaddress).xip_interface)) ("10.1.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((((xipaddress).xip_network)) ("10.1.1.0/24"))))) ((((xhash)) (((((xipaddress).xip_network)) ("10.1.1.0/24"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((((xipaddress).xip_address)) ("10.1.1.0"))))) ((((xhash)) (((((xipaddress).xip_address)) ("10.1.1.0"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((((xipaddress).xip_address)) ("1.2.3.4"))))) ((((xhash)) (((((xipaddress).xip_address)) ((((xint)) ((((((xipaddress).xip_address)) ("1.2.3.4")).x_ip)))))))))
                        xip1.write ((((xipaddress).xip_address)) ("10.1.1.0"))
                        xip2.write ((((xipaddress).xip_address)) ("1::"))
                        xdummy.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xdummy)) (((xself).xipv4_address)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((unsupported)) ((xdummy)) (((xself).xipv6_address)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((unsupported)) ((xdummy)) ((xip1)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((unsupported)) ((xdummy)) ((xip2)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIn)) (((xself).xipv4_address)) ((xdummy)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xip2)) ((xdummy)))
                xtestIPBases.write
                  [xself]
                    memory > xnet
                    seq > @
                      seq
                        xnet.write ((xself).xipv4_network)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.0/24") (((xnet).xcompressed)))
                        xnet.write ((xself).xipv6_network)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xnet).x_string_from_ip_int)) (((((unsupported)) (2) (128)).add 1)))
                xtestIPv6NetworkHelpers.write
                  [xself]
                    memory > xnet
                    seq > @
                      seq
                        xnet.write ((xself).xipv6_network)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:658:22a:cafe::/64") (((xnet).xwith_prefixlen)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:658:22a:cafe::/ffff:ffff:ffff:ffff::") (((xnet).xwith_netmask)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:658:22a:cafe::/::ffff:ffff:ffff:ffff") (((xnet).xwith_hostmask)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:658:22a:cafe::/64") ((((xstr)) ((xnet)))))
                xtestIPv4NetworkHelpers.write
                  [xself]
                    memory > xnet
                    seq > @
                      seq
                        xnet.write ((xself).xipv4_network)
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.0/24") (((xnet).xwith_prefixlen)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.0/255.255.255.0") (((xnet).xwith_netmask)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.0/0.0.0.255") (((xnet).xwith_hostmask)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.2.3.0/24") ((((xstr)) ((xnet)))))
                xtestCopyConstructor.write
                  [xself]
                    memory > xaddr4
                    memory > xaddr3
                    memory > xaddr2
                    memory > xaddr6
                    memory > xaddr1
                    memory > xaddr5
                    seq > @
                      seq
                        xaddr1.write ((((xipaddress).xip_network)) ("10.1.1.0/24"))
                        xaddr2.write ((((xipaddress).xip_network)) ((xaddr1)))
                        xaddr3.write ((((xipaddress).xip_interface)) ("2001:658:22a:cafe:200::1/64"))
                        xaddr4.write ((((xipaddress).xip_interface)) ((xaddr3)))
                        xaddr5.write ((((xipaddress).xIPv4Address)) ("1.1.1.1"))
                        xaddr6.write ((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe:200::1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddr1)) ((xaddr2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddr3)) ((xaddr4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddr5)) (((((xipaddress).xIPv4Address)) ((xaddr5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xaddr6)) (((((xipaddress).xIPv6Address)) ((xaddr6)))))
                xtestCompressIPv6Address.write
                  [xself]
                    memory > xtest_addresses
                    seq > @
                      seq
                        xtest_addresses.write (((unsupported)) ("1:2:3:4:5:6:7:8") ("1:2:3:4:5:6:7:8/128") ("2001:0:0:4:0:0:0:8") ("2001:0:0:4::8/128") ("2001:0:0:4:5:6:7:8") ("2001::4:5:6:7:8/128") ("2001:0:3:4:5:6:7:8") ("2001:0:3:4:5:6:7:8/128") ("0:0:3:0:0:0:0:ffff") ("0:0:3::ffff/128") ("0:0:0:4:0:0:0:ffff") ("::4:0:0:0:ffff/128") ("0:0:0:0:5:0:0:ffff") ("::5:0:0:ffff/128") ("1:0:0:4:0:0:7:8") ("1::4:0:0:7:8/128") ("0:0:0:0:0:0:0:0") ("::/128") ("0:0:0:0:0:0:0:0/0") ("::/0") ("0:0:0:0:0:0:0:1") ("::1/128") ("2001:0658:022a:cafe:0000:0000:0000:0000/66") ("2001:658:22a:cafe::/66") ("::1.2.3.4") ("::102:304/128") ("1:2:3:4:5:ffff:1.2.3.4") ("1:2:3:4:5:ffff:102:304/128") ("::7:6:5:4:3:2:1") ("0:7:6:5:4:3:2:1/128") ("::7:6:5:4:3:2:0") ("0:7:6:5:4:3:2:0/128") ("7:6:5:4:3:2:1::") ("7:6:5:4:3:2:1:0/128") ("0:6:5:4:3:2:1::") ("0:6:5:4:3:2:1:0/128"))
                        (((unsupported)) ((((unsupported)) ((xuncompressed)) ((xcompressed)))) ((((xlist)) (((((xtest_addresses).xitems)) 0)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xcompressed)) ((((xstr)) (((((xipaddress).xIPv6Interface)) ((xuncompressed)))))))
                xtestExplodeShortHandIpStr.write
                  [xself]
                    memory > xaddr4
                    memory > xaddr3
                    memory > xaddr1
                    memory > xaddr2
                    seq > @
                      seq
                        xaddr1.write ((((xipaddress).xIPv6Interface)) ("2001::1"))
                        xaddr2.write ((((xipaddress).xIPv6Address)) ("2001:0:5ef5:79fd:0:59d:a0e5:ba1"))
                        xaddr3.write ((((xipaddress).xIPv6Network)) ("2001::/96"))
                        xaddr4.write ((((xipaddress).xIPv4Address)) ("192.168.178.1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:0000:0000:0000:0000:0000:0000:0001/128") (((xaddr1).xexploded)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("0000:0000:0000:0000:0000:0000:0000:0001/128") ((((((xipaddress).xIPv6Interface)) ("::1/128")).xexploded)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:0000:5ef5:79fd:0000:059d:a0e5:0ba1") (((xaddr2).xexploded)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("2001:0000:0000:0000:0000:0000:0000:0000/96") (((xaddr3).xexploded)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("192.168.178.1") (((xaddr4).xexploded)))
                xtestReversePointer.write
                  [xself]
                    memory > xaddr1
                    memory > xaddr2
                    seq > @
                      seq
                        xaddr1.write ((((xipaddress).xIPv4Address)) ("127.0.0.1"))
                        xaddr2.write ((((xipaddress).xIPv6Address)) ("2001:db8::1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("1.0.0.127.in-addr.arpa") (((xaddr1).xreverse_pointer)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.".add "b.d.0.1.0.0.2.ip6.arpa")) (((xaddr2).xreverse_pointer)))
                xtestIntRepresentation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (16909060) ((((xint)) (((xself).xipv4_address)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) ((((xint)) (((xself).xipv6_address)))))
                xtestForceVersion.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xip_network)) (1)).xversion)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xipaddress).xIPv6Network)) (1)).xversion)) (6))
                xtestWithStar.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).xwith_prefixlen)) ("1.2.3.4/24"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).xwith_netmask)) ("1.2.3.4/255.255.255.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_interface).xwith_hostmask)) ("1.2.3.4/0.0.0.255"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).xwith_prefixlen)) ("2001:658:22a:cafe:200::1/64"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).xwith_netmask)) ("2001:658:22a:cafe:200::1/ffff:ffff:ffff:ffff::"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_interface).xwith_hostmask)) ("2001:658:22a:cafe:200::1/::ffff:ffff:ffff:ffff"))
                xtestNetworkElementCaching.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("broadcast_address") ((((xself).xipv4_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("hostmask") ((((xself).xipv4_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_network).xbroadcast_address)) (((((xipaddress).xIPv4Address)) ("1.2.3.255"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv4_network).xhostmask)) (((((xipaddress).xIPv4Address)) ("0.0.0.255"))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("broadcast_address") ((((xself).xipv4_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("hostmask") ((((xself).xipv4_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("broadcast_address") ((((xself).xipv6_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("hostmask") ((((xself).xipv6_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_network).xnetwork_address)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xipv6_interface).xnetwork).xnetwork_address)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe::"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_network).xbroadcast_address)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe:ffff:ffff:ffff:ffff"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xself).xipv6_network).xhostmask)) (((((xipaddress).xIPv6Address)) ("::ffff:ffff:ffff:ffff"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xipv6_interface).xnetwork).xbroadcast_address)) (((((xipaddress).xIPv6Address)) ("2001:658:22a:cafe:ffff:ffff:ffff:ffff"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xipv6_interface).xnetwork).xhostmask)) (((((xipaddress).xIPv6Address)) ("::ffff:ffff:ffff:ffff"))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("broadcast_address") ((((xself).xipv6_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("hostmask") ((((xself).xipv6_network).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("broadcast_address") (((((xself).xipv6_interface).xnetwork).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("hostmask") (((((xself).xipv6_interface).xnetwork).x__dict__)))
                xtestTeredo.write
                  [xself]
                    memory > xbad_addr
                    memory > xserver
                    memory > xclient
                    memory > xteredo_addr
                    seq > @
                      seq
                        xserver.write ((((xipaddress).xIPv4Address)) ("65.54.227.120"))
                        xclient.write ((((xipaddress).xIPv4Address)) ("192.0.2.45"))
                        xteredo_addr.write "2001:0000:4136:e378:8000:63bf:3fff:fdd2"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xserver)) ((xclient)))) ((((((xipaddress).xip_address)) ((xteredo_addr))).xteredo)))
                        xbad_addr.write "2000::4136:e378:8000:63bf:3fff:fdd2"
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xipaddress).xip_address)) ((xbad_addr))).xteredo)))
                        xbad_addr.write "2001:0001:4136:e378:8000:63bf:3fff:fdd2"
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xipaddress).xip_address)) ((xbad_addr))).xteredo)))
                        xteredo_addr.write ((((xipaddress).xIPv6Address)) ("2001:0:5ef5:79fd:0:59d:a0e5:ba1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xipaddress).xIPv4Address)) ("94.245.121.253"))) (((((xipaddress).xIPv4Address)) ("95.26.244.94"))))) (((xteredo_addr).xteredo)))
                xtestsixtofour.write
                  [xself]
                    memory > xbad_addr
                    memory > xsixtofouraddr
                    seq > @
                      seq
                        xsixtofouraddr.write ((((xipaddress).xip_address)) ("2002:ac1d:2d64::1"))
                        xbad_addr.write ((((xipaddress).xip_address)) ("2000:ac1d:2d64::1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xipaddress).xIPv4Address)) ("172.29.45.100"))) (((xsixtofouraddr).xsixtofour)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xbad_addr).xsixtofour)))
                xtestV4HashIsNotConstant.write
                  [xself]
                    memory > xipv4_address1
                    memory > xipv4_address2
                    seq > @
                      seq
                        xipv4_address1.write ((((xipaddress).xIPv4Interface)) ("1.2.3.4"))
                        xipv4_address2.write ((((xipaddress).xIPv4Interface)) ("2.3.4.5"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xipv4_address1).x__hash__)) 0)) (((((xipv4_address2).x__hash__)) 0)))
                xtestV6HashIsNotConstant.write
                  [xself]
                    memory > xipv6_address2
                    memory > xipv6_address1
                    seq > @
                      seq
                        xipv6_address1.write ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200:0:0:1"))
                        xipv6_address2.write ((((xipaddress).xIPv6Interface)) ("2001:658:22a:cafe:200:0:0:2"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xipv6_address1).x__hash__)) 0)) (((((xipv6_address2).x__hash__)) 0)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)