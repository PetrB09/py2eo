memory > xstdout
memory > xdispatcherwithsend_noread
memory > xResourceWarning
memory > xselect
memory > xFileDispatcher
memory > xopen
memory > xi
memory > xbytes
memory > xe
memory > xasyncore
memory > xobject
memory > x__name__
memory > xthreading
memory > xBaseServer
memory > xBytesIO
memory > xdummysocket
memory > xTestAPI_UseIPv4Sockets
memory > xreal_v
memory > xerrno
memory > xTestHandler
memory > xconn
memory > xexitingdummy
memory > xTestClient
memory > xinfo
memory > xfile
memory > xt
memory > xsocket
memory > xexpectedattr
memory > xrange
memory > xsock
memory > xflag
memory > xtestobj
memory > xZeroDivisionError
memory > xf
memory > xw
memory > xreal_t
memory > xrepr
memory > xdummychannel
memory > xException
memory > xr
memory > xtime
memory > xTestAPI_UseUnixSockets
memory > xBaseClient
memory > xhasattr
memory > xstruct
memory > xs
memory > xsupport
memory > xsys
memory > xstderr
memory > xfloat
memory > xchr
memory > xOSError
memory > xBaseTestHandler
memory > xTestAPI_UseIPv6Sockets
memory > xos
memory > xgetattr
memory > xv
memory > xid
memory > xfunction
memory > xreal_tb
memory > xunittest
memory > xattr
memory > xcrashingdummy
memory > xTestListener
memory > xBaseTestAPI
memory > xline
memory > xlen
[] > test_asyncore
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xhandle_close
        memory > xtest_strerror
        memory > xtest_set_reuse_addr
        memory > xhandle_accepted
        memory > xtest_close_twice
        memory > xTIMEOUT
        memory > xhandle_connect
        memory > xbind_af_aware
        memory > x__init__
        memory > xtest_resource_warning
        memory > xhandle_error
        memory > xtest_bind
        memory > xfileno
        memory > xhandle_expt
        memory > xtest_handle_connect
        memory > xtest_handle_close_after_conn_broken
        memory > xtest_unhandled
        memory > xreadable
        memory > xtest_handle_expt
        memory > xcloseall_check
        memory > xHAS_UNIX_SOCKETS
        memory > xtest_create_socket
        memory > xclose
        memory > xtest_send
        memory > xhandle_expt_event
        memory > xloop_waiting_for_flag
        memory > xtest_repr
        memory > xsetUp
        memory > xtest_compact_traceback
        memory > xcapture_server
        memory > xtest_readwriteexc
        memory > xfamily
        memory > xtest_handle_accepted
        memory > xuse_poll
        memory > xtest_basic
        memory > xtest_recv
        memory > xtest_handle_close
        memory > xtest_handle_accept
        memory > xtest_connection_attributes
        memory > xtest_log
        memory > xtest_log_info
        memory > xtest_closeall
        memory > xaddr
        memory > xtearDown
        memory > xtest_quick_connect
        memory > xaddress
        memory > xtest_handle_write
        memory > xtest_handle_error
        memory > xtest_handle_read
        memory > xhandle_read_event
        memory > xtest_closeall_default
        memory > xhandle_write_event
        memory > xtest_readwrite
        memory > xhandle_accept
        memory > xtest_dispatcher
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            ((xsupport).xPGO).if
              (((unsupported)) (((((xunittest).xSkipTest)) ("test is not helpful for PGO"))))
            xTIMEOUT.write 3
            xHAS_UNIX_SOCKETS.write (((xhasattr)) ((xsocket)) ("AF_UNIX"))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xclosed)) (FALSE))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xclosed)) (TRUE))
                xfileno.write
                  [xself]
                    seq > @
                      (((unsupported)) (42))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xsocket)) ((((xdummysocket)) 0)))
                xclose.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xsocket).xclose)) 0)
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                xhandle_read_event.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xasyncore).xExitNow)) 0)))
                xhandle_write_event.write (xhandle_read_event)
                xhandle_close.write (xhandle_read_event)
                xhandle_expt_event.write (xhandle_read_event)
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xerror_handled)) (FALSE))
                xhandle_read_event.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) 0)))
                xhandle_write_event.write (xhandle_read_event)
                xhandle_close.write (xhandle_read_event)
                xhandle_expt_event.write (xhandle_read_event)
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xerror_handled)) (TRUE))
            xcapture_server.write
              [xevt xbuf xserv]
                memory > xn
                memory > xstart
                memory > xdata
                seq > @
                  (((unsupported)) (((xsocket).xtimeout)))
                    seq
                      bogusForceDataize.write ((((xserv).xlisten)) 0)
                      (((unsupported)) ((((unsupported)) ((xconn)) ((xaddr)))) (((((xserv).xaccept)) 0)))
                    seq
                      xn.write 200
                      xstart.write ((((xtime).xmonotonic)) 0)
                      while.
                        (((xn).greater 0).and ((((((xtime).xmonotonic)) 0).sub (xstart)).less 3.0))
                        [unused]
                          seq > @
                            seq
                              (((unsupported)) ((((unsupported)) ((xr)) ((xw)) ((xe)))) (((((xselect).xselect)) ((((unsupported)) ((xconn)))) ((((unsupported)) 0)) ((((unsupported)) 0)) (0.1))))
                              (xr).if
                                seq
                                  (((unsupported)) ((xn)) (1))
                                  xdata.write ((((xconn).xrecv)) (10))
                                  bogusForceDataize.write ((((xbuf).xwrite)) (((((xdata).xreplace)) ("n") (""))))
                                  (((unsupported)) ("n") ((xdata))).if
                                    (((unsupported)) 0)
                              bogusForceDataize.write ((((xtime).xsleep)) (0.01))
                      bogusForceDataize.write ((((xconn).xclose)) 0)
                    seq
                      bogusForceDataize.write ((((xserv).xclose)) 0)
                      bogusForceDataize.write ((((xevt).xset)) 0)
            xbind_af_aware.write
              [xsock xaddr]
                seq > @
                  seq
                    unsupported
                    ((xHAS_UNIX_SOCKETS).and (((xsock).xfamily).eq ((xsocket).xAF_UNIX))).if
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) ((xaddr)))
                        bogusForceDataize.write ((((xsupport).xbind_unix_socket)) ((xsock)) ((xaddr)))
                      bogusForceDataize.write ((((xsock).xbind)) ((xaddr)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_readwriteexc.write
                  [xself]
                    memory > xtr2
                    memory > xtr1
                    seq > @
                      seq
                        xtr1.write (((xexitingdummy)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xasyncore).xExitNow)) (((xasyncore).xread)) ((xtr1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xasyncore).xExitNow)) (((xasyncore).xwrite)) ((xtr1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xasyncore).xExitNow)) (((xasyncore).x_exception)) ((xtr1)))
                        xtr2.write (((xcrashingdummy)) 0)
                        bogusForceDataize.write ((((xasyncore).xread)) ((xtr2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtr2).xerror_handled)) (TRUE))
                        xtr2.write (((xcrashingdummy)) 0)
                        bogusForceDataize.write ((((xasyncore).xwrite)) ((xtr2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtr2).xerror_handled)) (TRUE))
                        xtr2.write (((xcrashingdummy)) 0)
                        bogusForceDataize.write ((((xasyncore).x_exception)) ((xtr2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xtr2).xerror_handled)) (TRUE))
                xtest_readwrite.write
                  [xself]
                    memory > xhandle_error
                    memory > xhandle_expt_event
                    memory > xattributes
                    memory > xtr2
                    memory > x__init__
                    memory > xhandle_read_event
                    memory > xhandle_write_event
                    memory > xhandle_close
                    memory > xexpected
                    memory > xtr1
                    memory > xtobj
                    seq > @
                      (((unsupported)) 0)
                        xattributes.write (((unsupported)) ("read") ("expt") ("write") ("closed") ("error_handled"))
                        xexpected.write (((unsupported)) ((((unsupported)) (((xselect).xPOLLIN)) ("read"))) ((((unsupported)) (((xselect).xPOLLPRI)) ("expt"))) ((((unsupported)) (((xselect).xPOLLOUT)) ("write"))) ((((unsupported)) (((xselect).xPOLLERR)) ("closed"))) ((((unsupported)) (((xselect).xPOLLHUP)) ("closed"))) ((((unsupported)) (((xselect).xPOLLNVAL)) ("closed"))))
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xread)) (FALSE))
                                    (((unsupported)) (((xself).xwrite)) (FALSE))
                                    (((unsupported)) (((xself).xclosed)) (FALSE))
                                    (((unsupported)) (((xself).xexpt)) (FALSE))
                                    (((unsupported)) (((xself).xerror_handled)) (FALSE))
                            xhandle_read_event.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xread)) (TRUE))
                            xhandle_write_event.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xwrite)) (TRUE))
                            xhandle_close.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xclosed)) (TRUE))
                            xhandle_expt_event.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xexpt)) (TRUE))
                            xhandle_error.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xerror_handled)) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xflag)) ((xexpectedattr)))) ((xexpected)))
                          seq
                            xtobj.write (((xtestobj)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xtobj)) ((xexpectedattr)))) (FALSE))
                            bogusForceDataize.write ((((xasyncore).xreadwrite)) ((xtobj)) ((xflag)))
                            (((unsupported)) ((xattr)) ((xattributes)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xtobj)) ((xattr)))) (((xattr).eq (xexpectedattr))))
                            xtr1.write (((xexitingdummy)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) (((xasyncore).xExitNow)) (((xasyncore).xreadwrite)) ((xtr1)) ((xflag)))
                            xtr2.write (((xcrashingdummy)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xtr2).xerror_handled)) (FALSE))
                            bogusForceDataize.write ((((xasyncore).xreadwrite)) ((xtr2)) ((xflag)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xtr2).xerror_handled)) (TRUE))
                xtest_closeall.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcloseall_check)) (FALSE))
                xtest_closeall_default.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcloseall_check)) (TRUE))
                xcloseall_check.write
                  [xself xusedefault]
                    memory > xtestmap
                    memory > xc
                    memory > xsocketmap
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)) 0)
                        xtestmap.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) (10))))
                          seq
                            xc.write (((xdummychannel)) 0)
                            bogusForceDataize.write ((((xl).xappend)) ((xc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xsocket).xclosed)) (FALSE))
                            (((unsupported)) ((((unsupported)) ((xtestmap)) ((xi)))) ((xc)))
                        (xusedefault).if
                          seq
                            xsocketmap.write ((xasyncore).xsocket_map)
                            (((unsupported)) 0)
                              seq
                                (((unsupported)) (((xasyncore).xsocket_map)) ((xtestmap)))
                                bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                              (((unsupported)) ((((unsupported)) ((xtestmap)) (((xasyncore).xsocket_map)))) ((((unsupported)) (((xasyncore).xsocket_map)) ((xsocketmap)))))
                          bogusForceDataize.write ((((xasyncore).xclose_all)) ((xtestmap)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xtestmap)))) (0))
                        (((unsupported)) ((xc)) ((xl)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xc).xsocket).xclosed)) (TRUE))
                xtest_compact_traceback.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        (((unsupported)) 0)
                          (((unsupported)) ((((xException)) ("I don't like spam!"))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xreal_t)) ((xreal_v)) ((xreal_tb)))) (((((xsys).xexc_info)) 0)))
                            xr.write ((((xasyncore).xcompact_traceback)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("Expected exception"))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xf)) ((xfunction)) ((xline)))) ((xt)) ((xv)) ((xinfo)))) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((((xos).xpath).xsplit)) ((xf)))) ((1.neg)))) ("test_asyncore.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfunction)) ("test_compact_traceback"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((xreal_t)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((xreal_v)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xinfo)) (("[%s|%s|%s]".mod (((unsupported)) ((xf)) ((xfunction)) ((xline))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                xtest_basic.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xasyncore).xdispatcher)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xreadable)) 0)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xd).xwritable)) 0)) (TRUE))
                xtest_repr.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xasyncore).xdispatcher)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xd)))) (("<asyncore.dispatcher at %#x>".mod (((xid)) ((xd))))))
                xtest_log.write
                  [xself]
                    memory > xd
                    memory > xl2
                    memory > xlines
                    memory > xl1
                    seq > @
                      seq
                        xd.write ((((xasyncore).xdispatcher)) 0)
                        xl1.write "Lovely spam! Wonderful spam!"
                        xl2.write "I don't like spam!"
                        (((unsupported)) (((((xsupport).xcaptured_stderr)) 0)) ((xstderr)))
                          seq
                            bogusForceDataize.write ((((xd).xlog)) ((xl1)))
                            bogusForceDataize.write ((((xd).xlog)) ((xl2)))
                        xlines.write (((((((xstderr).xgetvalue)) 0).xsplitlines)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((((unsupported)) (("log: %s".mod (xl1))) (("log: %s".mod (xl2))))))
                xtest_log_info.write
                  [xself]
                    memory > xd
                    memory > xlines
                    memory > xexpected
                    memory > xl2
                    memory > xl1
                    memory > xl3
                    seq > @
                      seq
                        xd.write ((((xasyncore).xdispatcher)) 0)
                        xl1.write "Have you got anything without spam?"
                        xl2.write "Why can't she have egg bacon spam and sausage?"
                        xl3.write "THAT'S got spam in it!"
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xd).xlog_info)) ((xl1)) ("EGGS"))
                            bogusForceDataize.write ((((xd).xlog_info)) ((xl2)))
                            bogusForceDataize.write ((((xd).xlog_info)) ((xl3)) ("SPAM"))
                        xlines.write (((((((xstdout).xgetvalue)) 0).xsplitlines)) 0)
                        xexpected.write (((unsupported)) (("EGGS: %s".mod (xl1))) (("info: %s".mod (xl2))) (("SPAM: %s".mod (xl3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((xexpected)))
                xtest_unhandled.write
                  [xself]
                    memory > xd
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xd.write ((((xasyncore).xdispatcher)) 0)
                        (((unsupported)) (((xd).xignore_log_types)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xd).xhandle_expt)) 0)
                            bogusForceDataize.write ((((xd).xhandle_read)) 0)
                            bogusForceDataize.write ((((xd).xhandle_write)) 0)
                            bogusForceDataize.write ((((xd).xhandle_connect)) 0)
                        xlines.write (((((((xstdout).xgetvalue)) 0).xsplitlines)) 0)
                        xexpected.write (((unsupported)) ("warning: unhandled incoming priority event") ("warning: unhandled read event") ("warning: unhandled write event") ("warning: unhandled connect event"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xlines)) ((xexpected)))
                xtest_strerror.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xasyncore).x_strerror)) (((xerrno).xEPERM)))
                        (((xhasattr)) ((xos)) ("strerror")).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xerr)) (((((xos).xstrerror)) (((xerrno).xEPERM)))))
                        xerr.write ((((xasyncore).x_strerror)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xerr).neq "")))
            (((unsupported)) (((xasyncore).xdispatcher_with_send)))
              seq
                xreadable.write
                  [xself]
                    seq > @
                      (((unsupported)) (FALSE))
                xhandle_connect.write
                  [xself]
                    seq > @
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xasyncore).xclose_all)) 0)
                xtest_send.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xcap
                    memory > xt
                    memory > xsock
                    memory > xevt
                    memory > xargs
                    memory > xport
                    memory > xn
                    seq > @
                      (((unsupported)) 0)
                        xevt.write ((((xthreading).xEvent)) 0)
                        xsock.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xsock).xsettimeout)) (3))
                        xport.write ((((xsupport).xbind_port)) ((xsock)))
                        xcap.write (((xBytesIO)) 0)
                        xargs.write (((unsupported)) ((xevt)) ((xcap)) ((xsock)))
                        xt.write (((unsupported)) (((xthreading).xThread)) ((xcapture_server)) ((xargs)))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xtime).xsleep)) (0.2))
                            xdata.write "Suppose there isn't a 16-ton weight?"
                            xd.write (((xdispatcherwithsend_noread)) 0)
                            bogusForceDataize.write ((((xd).xcreate_socket)) 0)
                            bogusForceDataize.write ((((xd).xconnect)) ((((unsupported)) (((xsupport).xHOST)) ((xport)))))
                            bogusForceDataize.write ((((xtime).xsleep)) (0.1))
                            bogusForceDataize.write ((((xd).xsend)) ((xdata)))
                            bogusForceDataize.write ((((xd).xsend)) ((xdata)))
                            bogusForceDataize.write ((((xd).xsend)) ("n"))
                            xn.write 1000
                            while.
                              (((xd).xout_buffer).and ((xn).greater 0))
                              [unused]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xasyncore).xpoll)) 0)
                                    (((unsupported)) ((xn)) (1))
                            bogusForceDataize.write ((((xevt).xwait)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xcap).xgetvalue)) 0)) (((xdata).mul 2)))
                          (((unsupported)) (((xsupport).xjoin_thread)) ((xt)) ((xTIMEOUT)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xasyncore)) ("file_wrapper"))) ("asyncore.file_wrapper required"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xd)) ("It's not dead, it's sleeping!"))
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("wb"))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)) (((xself).xd)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)) (((xsupport).xTESTFN)))
                xtest_recv.write
                  [xself]
                    memory > xw
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xw.write ((((xasyncore).xfile_wrapper)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xw).xfd)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xw).xfileno)) 0)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xw).xrecv)) (13))) ("It's not dead"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xw).xread)) (6))) (", it's"))
                        bogusForceDataize.write ((((xw).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xw).xread)) (1))
                xtest_send.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    memory > xw
                    memory > xfd
                    seq > @
                      seq
                        xd1.write "Come again?"
                        xd2.write "I want to buy some cheese."
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_APPEND))))
                        xw.write ((((xasyncore).xfile_wrapper)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xw).xwrite)) ((xd1)))
                        bogusForceDataize.write ((((xw).xsend)) ((xd2)))
                        bogusForceDataize.write ((((xw).xclose)) 0)
                        (((unsupported)) ((((xopen)) (((xsupport).xTESTFN)) ("rb"))) ((xfile)))
                          bogusForceDataize.write ((((xself).xassertEqual)) (((((xfile).xread)) 0)) (((((xself).xd).add (xd1)).add (xd2))))
                xtest_dispatcher.write
                  [xself]
                    memory > xs
                    memory > xhandle_read
                    memory > xfd
                    memory > xdata
                    seq > @
                      (((unsupported)) 0)
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xdata.write (((unsupported)) 0)
                        (((unsupported)) (((xasyncore).xfile_dispatcher)))
                          xhandle_read.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((xdata).xappend)) (((((xself).xrecv)) (29))))
                        xs.write (((xFileDispatcher)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        (((unsupported)) (((xasyncore).xloop)) (0.01) (TRUE) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((xdata)))) (((xself).xd)))
                xtest_resource_warning.write
                  [xself]
                    memory > xfd
                    memory > xf
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xf.write ((((xasyncore).xfile_wrapper)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) ("") ((xResourceWarning)))))))
                          seq
                            xf.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                xtest_close_twice.write
                  [xself]
                    memory > xfd
                    memory > xf
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)) (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        xf.write ((((xasyncore).xfile_wrapper)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)) (((xf).xfd)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))))
                          bogusForceDataize.write ((((xf).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xf).xfd)) ((1.neg)))
                        bogusForceDataize.write ((((xf).xclose)) 0)
            (((unsupported)) (((xasyncore).xdispatcher)))
              seq
                x__init__.write
                  [xself xsock]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)) ((xself)) ((xsock)))
                        (((unsupported)) (((xself).xflag)) (FALSE))
                xhandle_accept.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) ("handle_accept not supposed to be called"))))
                xhandle_accepted.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) ("handle_accepted not supposed to be called"))))
                xhandle_connect.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) ("handle_connect not supposed to be called"))))
                xhandle_expt.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) ("handle_expt not supposed to be called"))))
                xhandle_close.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xException)) ("handle_close not supposed to be called"))))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
            (((unsupported)) (((xasyncore).xdispatcher)))
              seq
                (((unsupported)) 0)
                x__init__.write
                  [xself xfamily xaddr xhandler]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)) ((xself)))
                        bogusForceDataize.write ((((xself).xcreate_socket)) ((xfamily)))
                        bogusForceDataize.write ((((xself).xset_reuse_addr)) 0)
                        bogusForceDataize.write (((xbind_af_aware)) (((xself).xsocket)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xlisten)) (5))
                        (((unsupported)) (((xself).xhandler)) ((xhandler)))
                xaddress.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((((xself).xsocket).xgetsockname)) 0)))
                xhandle_accepted.write
                  [xself xsock xaddr]
                    seq > @
                      bogusForceDataize.write ((((xself).xhandler)) ((xsock)))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
            (((unsupported)) ((xBaseTestHandler)))
              seq
                x__init__.write
                  [xself xfamily xaddress]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)))
                        bogusForceDataize.write ((((xself).xcreate_socket)) ((xfamily)))
                        bogusForceDataize.write ((((xself).xconnect)) ((xaddress)))
                xhandle_connect.write
                  [xself]
                    seq > @
            (((unsupported)) 0)
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xasyncore).xclose_all)) (TRUE))
                xloop_waiting_for_flag.write
                  [xself xinstance xtimeout]
                    memory > xcount
                    seq > @
                      (((unsupported)) 0)
                        xtimeout.write ((((xfloat)) ((xtimeout))).div 100)
                        xcount.write 100
                        while.
                          (((xasyncore).xsocket_map).and ((xcount).greater 0))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)) (((xasyncore).xloop)) (0.01) (1) (((xself).xuse_poll)))
                                ((xinstance).xflag).if
                                  (((unsupported)) 0)
                                (((unsupported)) ((xcount)) (1))
                                bogusForceDataize.write ((((xtime).xsleep)) ((xtimeout)))
                        bogusForceDataize.write ((((xself).xfail)) ("flag not set"))
                xtest_handle_connect.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    memory > xhandle_connect
                    seq > @
                      seq
                        (((unsupported)) ((xBaseClient)))
                          xhandle_connect.write
                            [xself]
                              seq > @
                                (((unsupported)) (((xself).xflag)) (TRUE))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_accept.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    memory > x__init__
                    memory > xhandle_accept
                    seq > @
                      seq
                        (((unsupported)) ((xBaseTestHandler)))
                          seq
                            x__init__.write
                              [xself xfamily xaddr]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)))
                                    bogusForceDataize.write ((((xself).xcreate_socket)) ((xfamily)))
                                    bogusForceDataize.write (((xbind_af_aware)) (((xself).xsocket)) ((xaddr)))
                                    bogusForceDataize.write ((((xself).xlisten)) (5))
                                    (((unsupported)) (((xself).xaddress)) ((((((xself).xsocket).xgetsockname)) 0)))
                            xhandle_accept.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xflag)) (TRUE))
                        xserver.write (((xTestListener)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xBaseClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xserver)))
                xtest_handle_accepted.write
                  [xself]
                    memory > xclient
                    memory > xhandle_accepted
                    memory > x__init__
                    memory > xserver
                    memory > xhandle_accept
                    seq > @
                      seq
                        (((unsupported)) ((xBaseTestHandler)))
                          seq
                            x__init__.write
                              [xself xfamily xaddr]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)))
                                    bogusForceDataize.write ((((xself).xcreate_socket)) ((xfamily)))
                                    bogusForceDataize.write (((xbind_af_aware)) (((xself).xsocket)) ((xaddr)))
                                    bogusForceDataize.write ((((xself).xlisten)) (5))
                                    (((unsupported)) (((xself).xaddress)) ((((((xself).xsocket).xgetsockname)) 0)))
                            xhandle_accept.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write (((((xasyncore).xdispatcher).xhandle_accept)) ((xself)))
                            xhandle_accepted.write
                              [xself xsock xaddr]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xsock).xclose)) 0)
                                    (((unsupported)) (((xself).xflag)) (TRUE))
                        xserver.write (((xTestListener)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xBaseClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xserver)))
                xtest_handle_read.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    memory > xhandle_read
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) ((xBaseClient)))
                          xhandle_read.write
                            [xself]
                              seq > @
                                (((unsupported)) (((xself).xflag)) (TRUE))
                        (((unsupported)) ((xBaseTestHandler)))
                          x__init__.write
                            [xself xconn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)) ((xconn)))
                                  bogusForceDataize.write ((((xself).xsend)) (("x".mul 1024)))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)) ((xTestHandler)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_write.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    memory > xhandle_write
                    seq > @
                      seq
                        (((unsupported)) ((xBaseClient)))
                          xhandle_write.write
                            [xself]
                              seq > @
                                (((unsupported)) (((xself).xflag)) (TRUE))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_close.write
                  [xself]
                    memory > xclient
                    memory > xhandle_close
                    memory > xhandle_read
                    memory > x__init__
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)) ((xBaseClient)))
                          seq
                            xhandle_read.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xself).xrecv)) (1024))
                            xhandle_close.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xflag)) (TRUE))
                                    bogusForceDataize.write ((((xself).xclose)) 0)
                        (((unsupported)) ((xBaseTestHandler)))
                          x__init__.write
                            [xself xconn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)) ((xconn)))
                                  bogusForceDataize.write ((((xself).xclose)) 0)
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)) ((xTestHandler)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_close_after_conn_broken.write
                  [xself]
                    memory > xwritable
                    memory > xhandle_read
                    memory > xhandle_write
                    memory > xserver
                    memory > xhandle_expt
                    memory > xclient
                    memory > xhandle_close
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ("0".mul 128)
                        (((unsupported)) ((xBaseClient)))
                          seq
                            xhandle_write.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xself).xsend)) ((xdata)))
                            xhandle_close.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xflag)) (TRUE))
                                    bogusForceDataize.write ((((xself).xclose)) 0)
                            xhandle_expt.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xflag)) (TRUE))
                                    bogusForceDataize.write ((((xself).xclose)) 0)
                        (((unsupported)) ((xBaseTestHandler)))
                          seq
                            xhandle_read.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).xrecv)) ((((xlen)) ((xdata)))))
                                    bogusForceDataize.write ((((xself).xclose)) 0)
                            xwritable.write
                              [xself]
                                seq > @
                                  (((unsupported)) (FALSE))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)) ((xTestHandler)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_expt.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    memory > xhandle_expt
                    memory > x__init__
                    seq > @
                      (((unsupported)) 0)
                        ((xHAS_UNIX_SOCKETS).and (((xself).xfamily).eq ((xsocket).xAF_UNIX))).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("Not applicable to AF_UNIX sockets."))
                        ((((xsys).xplatform).eq "darwin").and ((xself).xuse_poll)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("poll may fail on macOS; see issue #28087"))
                        (((unsupported)) ((xBaseClient)))
                          xhandle_expt.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write (((((xself).xsocket).xrecv)) (1024) (((xsocket).xMSG_OOB)))
                                  (((unsupported)) (((xself).xflag)) (TRUE))
                        (((unsupported)) ((xBaseTestHandler)))
                          x__init__.write
                            [xself xconn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xBaseTestHandler).x__init__)) ((xself)) ((xconn)))
                                  bogusForceDataize.write (((((xself).xsocket).xsend)) ((((xbytes)) ((((xchr)) (244))) ("latin-1"))) (((xsocket).xMSG_OOB)))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)) ((xTestHandler)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_handle_error.write
                  [xself]
                    memory > xserver
                    memory > xhandle_error
                    memory > xclient
                    memory > xhandle_write
                    seq > @
                      seq
                        (((unsupported)) ((xBaseClient)))
                          seq
                            xhandle_write.write
                              [xself]
                                seq > @
                                  unsupported
                            xhandle_error.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xflag)) (TRUE))
                                    (((unsupported)) ((xZeroDivisionError)))
                                      (((unsupported)) 0)
                                      (((unsupported)) ((((xException)) ("exception not raised"))))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xTestClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xloop_waiting_for_flag)) ((xclient)))
                xtest_connection_attributes.write
                  [xself]
                    memory > xserver
                    memory > xclient
                    seq > @
                      seq
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)))
                        xclient.write (((xBaseClient)) (((xself).xfamily)) (((xserver).xaddress)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xconnected)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xserver).xaccepting)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xclient).xaccepting)))
                        (((unsupported)) (((xasyncore).xloop)) (0.01) (((xself).xuse_poll)) (100))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xconnected)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xserver).xaccepting)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xclient).xconnected)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xclient).xaccepting)))
                        bogusForceDataize.write ((((xclient).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xconnected)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xserver).xaccepting)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xclient).xconnected)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xclient).xaccepting)))
                        bogusForceDataize.write ((((xserver).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xconnected)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xserver).xaccepting)))
                xtest_create_socket.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xasyncore).xdispatcher)) 0)
                        bogusForceDataize.write ((((xs).xcreate_socket)) (((xself).xfamily)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xs).xsocket).xtype)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xs).xsocket).xfamily)) (((xself).xfamily)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xs).xsocket).xgettimeout)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xs).xsocket).xget_inheritable)) 0)))
                xtest_bind.write
                  [xself]
                    memory > xs1
                    memory > xport
                    memory > xs2
                    seq > @
                      seq
                        ((xHAS_UNIX_SOCKETS).and (((xself).xfamily).eq ((xsocket).xAF_UNIX))).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("Not applicable to AF_UNIX sockets."))
                        xs1.write ((((xasyncore).xdispatcher)) 0)
                        bogusForceDataize.write ((((xs1).xcreate_socket)) (((xself).xfamily)))
                        bogusForceDataize.write ((((xs1).xbind)) (((xself).xaddr)))
                        bogusForceDataize.write ((((xs1).xlisten)) (5))
                        xport.write (((unsupported)) ((((((xs1).xsocket).xgetsockname)) 0)) (1))
                        xs2.write ((((xasyncore).xdispatcher)) 0)
                        bogusForceDataize.write ((((xs2).xcreate_socket)) (((xself).xfamily)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xs2).xbind)) ((((unsupported)) ((((unsupported)) (((xself).xaddr)) (0))) ((xport)))))
                xtest_set_reuse_addr.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        ((xHAS_UNIX_SOCKETS).and (((xself).xfamily).eq ((xsocket).xAF_UNIX))).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("Not applicable to AF_UNIX sockets."))
                        (((unsupported)) (((((xsocket).xsocket)) (((xself).xfamily)))) ((xsock)))
                          (((unsupported)) ((xOSError)))
                            bogusForceDataize.write ((((xsock).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)) (1))
                            bogusForceDataize.write ((((xunittest).xskip)) ("SO_REUSEADDR not supported on this platform"))
                            seq
                              xs.write ((((xasyncore).xdispatcher)) (((((xsocket).xsocket)) (((xself).xfamily)))))
                              bogusForceDataize.write ((((xself).xassertFalse)) ((((((xs).xsocket).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)))))
                              bogusForceDataize.write (((((xs).xsocket).xclose)) 0)
                              bogusForceDataize.write ((((xs).xcreate_socket)) (((xself).xfamily)))
                              bogusForceDataize.write ((((xs).xset_reuse_addr)) 0)
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((((xs).xsocket).xgetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_REUSEADDR)))))
                xtest_quick_connect.write
                  [xself]
                    memory > xt
                    memory > xserver
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xfamily)) ((((unsupported)) (((xsocket).xAF_INET)) ((((xgetattr)) ((xsocket)) ("AF_INET6") ((((xobject)) 0))))))).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("test specific to AF_INET and AF_INET6"))
                        xserver.write (((xBaseServer)) (((xself).xfamily)) (((xself).xaddr)))
                        xt.write (((unsupported)) (((xthreading).xThread)) ((((unsupported)) ((((unsupported)) (((xasyncore).xloop)) (0.1) (5))))))
                        bogusForceDataize.write ((((xt).xstart)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) (((((xsocket).xsocket)) (((xself).xfamily)) (((xsocket).xSOCK_STREAM)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xsettimeout)) ((((unsupported)) 0)))
                              bogusForceDataize.write ((((xs).xsetsockopt)) (((xsocket).xSOL_SOCKET)) (((xsocket).xSO_LINGER)) (((((xstruct).xpack)) ("ii") (1) (0))))
                              (((unsupported)) ((xOSError)))
                                bogusForceDataize.write ((((xs).xconnect)) (((xserver).xaddress)))
                          (((unsupported)) (((xsupport).xjoin_thread)) ((xt)) ((xTIMEOUT)))
            (((unsupported)) ((xBaseTestAPI)))
              seq
                xfamily.write ((xsocket).xAF_INET)
                xaddr.write (((unsupported)) (((xsupport).xHOST)) (0))
            (((unsupported)) ((xBaseTestAPI)) (((((xunittest).xskipUnless)) (((xsupport).xIPV6_ENABLED)) ("IPv6 support required"))))
              seq
                xfamily.write ((xsocket).xAF_INET6)
                xaddr.write (((unsupported)) (((xsupport).xHOSTv6)) (0))
            (((unsupported)) ((xBaseTestAPI)) (((((xunittest).xskipUnless)) ((xHAS_UNIX_SOCKETS)) ("Unix sockets required"))))
              seq
                (xHAS_UNIX_SOCKETS).if
                  xfamily.write ((xsocket).xAF_UNIX)
                xaddr.write ((xsupport).xTESTFN)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)) (((xself).xaddr)))
                        bogusForceDataize.write ((((xBaseTestAPI).xtearDown)) ((xself)))
            (((unsupported)) ((xTestAPI_UseIPv4Sockets)) (((xunittest).xTestCase)))
              xuse_poll.write FALSE
            (((unsupported)) ((xTestAPI_UseIPv4Sockets)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselect)) ("poll"))) ("select.poll required"))))
              xuse_poll.write TRUE
            (((unsupported)) ((xTestAPI_UseIPv6Sockets)) (((xunittest).xTestCase)))
              xuse_poll.write FALSE
            (((unsupported)) ((xTestAPI_UseIPv6Sockets)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselect)) ("poll"))) ("select.poll required"))))
              xuse_poll.write TRUE
            (((unsupported)) ((xTestAPI_UseUnixSockets)) (((xunittest).xTestCase)))
              xuse_poll.write FALSE
            (((unsupported)) ((xTestAPI_UseUnixSockets)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselect)) ("poll"))) ("select.poll required"))))
              xuse_poll.write TRUE
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)