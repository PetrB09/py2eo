memory > xcm
memory > xstr
memory > xcompile
memory > xSyntaxError
memory > x__name__
memory > x__future__
memory > xunittest
[] > test_flufl
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_barry_as_bdfl
        memory > xtest_guido_as_bdfl
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_barry_as_bdfl.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "from __future__ import barry_as_FLUFLn2 {0} 3"
                        bogusForceDataize.write (((xcompile)) (((((xcode).xformat)) ("<>"))) ("<BDFL test>") ("exec") (((x__future__).xCO_FUTURE_BARRY_AS_BDFL)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)) (((((xcode).xformat)) ("!="))) ("<FLUFL test>") ("exec") (((x__future__).xCO_FUTURE_BARRY_AS_BDFL)))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((xcm).xexception)))) ("with Barry as BDFL, use '<>' instead of '!='"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xtext)) ("2 != 3n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xfilename)) ("<FLUFL test>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xoffset)) (4))
                xtest_guido_as_bdfl.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "2 {0} 3"
                        bogusForceDataize.write (((xcompile)) (((((xcode).xformat)) ("!="))) ("<BDFL test>") ("exec"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)) (((((xcode).xformat)) ("<>"))) ("<FLUFL test>") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) (((xcm).xexception)))) ("invalid syntax"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xtext)) ("2 <> 3n"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xfilename)) ("<FLUFL test>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xoffset)) (4))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)