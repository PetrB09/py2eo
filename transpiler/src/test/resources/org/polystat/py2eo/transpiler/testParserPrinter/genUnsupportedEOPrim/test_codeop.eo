memory > xcompile_command
memory > xio
memory > xwarnings
memory > xexec
memory > xeval
memory > xw
memory > xDeprecationWarning
memory > xunittest
memory > xPyCF_DONT_IMPLY_DEDENT
memory > xn
memory > xSyntaxWarning
memory > xlen
memory > x__name__
memory > xhasattr
memory > xOverflowError
memory > xcompile
memory > xsupport
memory > xsys
memory > xv
memory > xSyntaxError
[] > test_codeop
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_incomplete
        memory > xassertValid
        memory > xassertInvalid
        memory > xtest_filename
        memory > xunify_callables
        memory > xtest_invalid
        memory > xtest_warning
        memory > xassertIncomplete
        memory > xtest_valid
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            ((xsupport).xis_jython).if
              seq
                (((unsupported)) 0)
                xunify_callables.write
                  [xd]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xn)) ((xv)))) (((((xd).xitems)) 0)))
                          (((xhasattr)) ((xv)) ("__call__")).if
                            (((unsupported)) ((((unsupported)) ((xd)) ((xn)))) (TRUE))
                        (((unsupported)) ((xd)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xassertValid.write
                  [xself xstr xsymbol]
                    memory > xd
                    memory > xexpected
                    memory > xctx
                    memory > xsaved_stdout
                    memory > xr
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        ((xsupport).xis_jython).if
                          seq
                            xcode.write (((xcompile_command)) ((xstr)) ("<input>") ((xsymbol)))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((xcode)))
                            ((xsymbol).eq "single").if
                              seq
                                (((unsupported)) ((((unsupported)) ((xd)) ((xr)))) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))))
                                xsaved_stdout.write ((xsys).xstdout)
                                (((unsupported)) (((xsys).xstdout)) (((((xio).xStringIO)) 0)))
                                (((unsupported)) 0)
                                  seq
                                    bogusForceDataize.write (((xexec)) ((xcode)) ((xd)))
                                    bogusForceDataize.write (((xexec)) ((((xcompile)) ((xstr)) ("<input>") ("single"))) ((xr)))
                                  (((unsupported)) (((xsys).xstdout)) ((xsaved_stdout)))
                              ((xsymbol).eq "eval").if
                                seq
                                  xctx.write (((unsupported)) ("a") (2))
                                  xd.write (((unsupported)) ("value") ((((xeval)) ((xcode)) ((xctx)))))
                                  xr.write (((unsupported)) ("value") ((((xeval)) ((xstr)) ((xctx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xunify_callables)) ((xr)))) ((((xunify_callables)) ((xd)))))
                          seq
                            xexpected.write (((xcompile)) ((xstr)) ("<input>") ((xsymbol)) ((xPyCF_DONT_IMPLY_DEDENT)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xcompile_command)) ((xstr)) ("<input>") ((xsymbol)))) ((xexpected)))
                xassertIncomplete.write
                  [xself xstr xsymbol]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xcompile_command)) ((xstr)) ((xsymbol)))) ("None: is there a None literal in the EO language?"))
                xassertInvalid.write
                  [xself xstr xsymbol xis_syntax]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) ((xSyntaxError)) ((xOverflowError)))
                          seq
                            (((unsupported)) ((xcompile_command)) ((xstr)) ((xsymbol)))
                            bogusForceDataize.write ((((xself).xfail)) ("No exception raised for invalid code"))
                          bogusForceDataize.write ((((xself).xassertTrue)) ((xis_syntax)))
                          bogusForceDataize.write ((((xself).xassertTrue)) (((xis_syntax).not)))
                xtest_valid.write
                  [xself]
                    memory > xav
                    seq > @
                      seq
                        xav.write ((xself).xassertValid)
                        (((xsupport).xis_jython).not).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xcompile_command)) (""))) ((((xcompile)) ("pass") ("<input>") ("single") ((xPyCF_DONT_IMPLY_DEDENT)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xcompile_command)) ("n"))) ((((xcompile)) ("pass") ("<input>") ("single") ((xPyCF_DONT_IMPLY_DEDENT)))))
                          seq
                            bogusForceDataize.write (((xav)) (""))
                            bogusForceDataize.write (((xav)) ("n"))
                        bogusForceDataize.write (((xav)) ("a = 1"))
                        bogusForceDataize.write (((xav)) ("na = 1"))
                        bogusForceDataize.write (((xav)) ("a = 1n"))
                        bogusForceDataize.write (((xav)) ("a = 1nn"))
                        bogusForceDataize.write (((xav)) ("nna = 1nn"))
                        bogusForceDataize.write (((xav)) ("def x():n  passn"))
                        bogusForceDataize.write (((xav)) ("if 1:n passn"))
                        bogusForceDataize.write (((xav)) ("nnif 1: passn"))
                        bogusForceDataize.write (((xav)) ("nnif 1: passnn"))
                        bogusForceDataize.write (((xav)) ("def x():nn passn"))
                        bogusForceDataize.write (((xav)) ("def x():n  passn  n"))
                        bogusForceDataize.write (((xav)) ("def x():n  passn n"))
                        bogusForceDataize.write (((xav)) ("passn"))
                        bogusForceDataize.write (((xav)) ("3**3n"))
                        bogusForceDataize.write (((xav)) ("if 9==3:n   passnelse:n   passn"))
                        bogusForceDataize.write (((xav)) ("if 1:n passn if 1:n  passn else:n  passn"))
                        bogusForceDataize.write (((xav)) ("#an#bna = 3n"))
                        bogusForceDataize.write (((xav)) ("#ann   na=3n"))
                        bogusForceDataize.write (((xav)) ("a=3nn"))
                        bogusForceDataize.write (((xav)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xav)) ("3**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("(lambda z: n z**3)") ("eval"))
                        bogusForceDataize.write (((xav)) ((((unsupported)) 0)) ("eval"))
                        bogusForceDataize.write (((xav)) ((((unsupported)) 0)) ("eval"))
                        bogusForceDataize.write (((xav)) ("nna**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("n na**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("#an#bna**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("nna = 1nn"))
                        bogusForceDataize.write (((xav)) ("nnif 1: a=1nn"))
                        bogusForceDataize.write (((xav)) ("if 1:n passn if 1:n  passn else:n  passn"))
                        bogusForceDataize.write (((xav)) ("#ann   na=3nn"))
                        bogusForceDataize.write (((xav)) ("nna**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("n na**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("#an#bna**3") ("eval"))
                        bogusForceDataize.write (((xav)) ("def f():n try: passn finally: [x for x in (1,2)]n"))
                        bogusForceDataize.write (((xav)) ("def f():n passn#foon"))
                        bogusForceDataize.write (((xav)) ("@a.b.cndef f():n passn"))
                xtest_incomplete.write
                  [xself]
                    memory > xai
                    seq > @
                      seq
                        xai.write ((xself).xassertIncomplete)
                        bogusForceDataize.write (((xai)) ("(a **"))
                        bogusForceDataize.write (((xai)) ("(a,b,"))
                        bogusForceDataize.write (((xai)) ("(a,b,("))
                        bogusForceDataize.write (((xai)) ("(a,b,("))
                        bogusForceDataize.write (((xai)) ("a = ("))
                        bogusForceDataize.write (((xai)) ("a = {"))
                        bogusForceDataize.write (((xai)) ("b + {"))
                        bogusForceDataize.write (((xai)) ("if 9==3:n   passnelse:"))
                        bogusForceDataize.write (((xai)) ("if 9==3:n   passnelse:n"))
                        bogusForceDataize.write (((xai)) ("if 9==3:n   passnelse:n   pass"))
                        bogusForceDataize.write (((xai)) ("if 1:"))
                        bogusForceDataize.write (((xai)) ("if 1:n"))
                        bogusForceDataize.write (((xai)) ("if 1:n passn if 1:n  passn else:"))
                        bogusForceDataize.write (((xai)) ("if 1:n passn if 1:n  passn else:n"))
                        bogusForceDataize.write (((xai)) ("if 1:n passn if 1:n  passn else:n  pass"))
                        bogusForceDataize.write (((xai)) ("def x():"))
                        bogusForceDataize.write (((xai)) ("def x():n"))
                        bogusForceDataize.write (((xai)) ("def x():nn"))
                        bogusForceDataize.write (((xai)) ("def x():n  pass"))
                        bogusForceDataize.write (((xai)) ("def x():n  passn "))
                        bogusForceDataize.write (((xai)) ("def x():n  passn  "))
                        bogusForceDataize.write (((xai)) ("nndef x():n  pass"))
                        bogusForceDataize.write (((xai)) ("a = 9+ \\"))
                        bogusForceDataize.write (((xai)) ("a = 'a\\"))
                        bogusForceDataize.write (((xai)) ("a = '''xy"))
                        bogusForceDataize.write (((xai)) ("") ("eval"))
                        bogusForceDataize.write (((xai)) ("n") ("eval"))
                        bogusForceDataize.write (((xai)) ("(") ("eval"))
                        bogusForceDataize.write (((xai)) ("(nnn") ("eval"))
                        bogusForceDataize.write (((xai)) ("(9+") ("eval"))
                        bogusForceDataize.write (((xai)) ("9+ \\") ("eval"))
                        bogusForceDataize.write (((xai)) ("lambda z: \\") ("eval"))
                        bogusForceDataize.write (((xai)) ("if True:n if True:n  if True:   n"))
                        bogusForceDataize.write (((xai)) ("@a("))
                        bogusForceDataize.write (((xai)) ("@a(b"))
                        bogusForceDataize.write (((xai)) ("@a(b,"))
                        bogusForceDataize.write (((xai)) ("@a(b,c"))
                        bogusForceDataize.write (((xai)) ("@a(b,c,"))
                        bogusForceDataize.write (((xai)) ("from a import ("))
                        bogusForceDataize.write (((xai)) ("from a import (b"))
                        bogusForceDataize.write (((xai)) ("from a import (b,"))
                        bogusForceDataize.write (((xai)) ("from a import (b,c"))
                        bogusForceDataize.write (((xai)) ("from a import (b,c,"))
                        bogusForceDataize.write (((xai)) ("["))
                        bogusForceDataize.write (((xai)) ("[a"))
                        bogusForceDataize.write (((xai)) ("[a,"))
                        bogusForceDataize.write (((xai)) ("[a,b"))
                        bogusForceDataize.write (((xai)) ("[a,b,"))
                        bogusForceDataize.write (((xai)) ("{"))
                        bogusForceDataize.write (((xai)) ("{a"))
                        bogusForceDataize.write (((xai)) ("{a:"))
                        bogusForceDataize.write (((xai)) ("{a:b"))
                        bogusForceDataize.write (((xai)) ("{a:b,"))
                        bogusForceDataize.write (((xai)) ("{a:b,c"))
                        bogusForceDataize.write (((xai)) ("{a:b,c:"))
                        bogusForceDataize.write (((xai)) ("{a:b,c:d"))
                        bogusForceDataize.write (((xai)) ("{a:b,c:d,"))
                        bogusForceDataize.write (((xai)) ("a("))
                        bogusForceDataize.write (((xai)) ("a(b"))
                        bogusForceDataize.write (((xai)) ("a(b,"))
                        bogusForceDataize.write (((xai)) ("a(b,c"))
                        bogusForceDataize.write (((xai)) ("a(b,c,"))
                        bogusForceDataize.write (((xai)) ("a["))
                        bogusForceDataize.write (((xai)) ("a[b"))
                        bogusForceDataize.write (((xai)) ("a[b,"))
                        bogusForceDataize.write (((xai)) ("a[b:"))
                        bogusForceDataize.write (((xai)) ("a[b:c"))
                        bogusForceDataize.write (((xai)) ("a[b:c:"))
                        bogusForceDataize.write (((xai)) ("a[b:c:d"))
                        bogusForceDataize.write (((xai)) ("def a("))
                        bogusForceDataize.write (((xai)) ("def a(b"))
                        bogusForceDataize.write (((xai)) ("def a(b,"))
                        bogusForceDataize.write (((xai)) ("def a(b,c"))
                        bogusForceDataize.write (((xai)) ("def a(b,c,"))
                        bogusForceDataize.write (((xai)) ("("))
                        bogusForceDataize.write (((xai)) ("(a"))
                        bogusForceDataize.write (((xai)) ("(a,"))
                        bogusForceDataize.write (((xai)) ("(a,b"))
                        bogusForceDataize.write (((xai)) ("(a,b,"))
                        bogusForceDataize.write (((xai)) ("if a:n passnelif b:"))
                        bogusForceDataize.write (((xai)) ("if a:n passnelif b:n passnelse:"))
                        bogusForceDataize.write (((xai)) ("while a:"))
                        bogusForceDataize.write (((xai)) ("while a:n passnelse:"))
                        bogusForceDataize.write (((xai)) ("for a in b:"))
                        bogusForceDataize.write (((xai)) ("for a in b:n passnelse:"))
                        bogusForceDataize.write (((xai)) ("try:"))
                        bogusForceDataize.write (((xai)) ("try:n passnexcept:"))
                        bogusForceDataize.write (((xai)) ("try:n passnfinally:"))
                        bogusForceDataize.write (((xai)) ("try:n passnexcept:n passnfinally:"))
                        bogusForceDataize.write (((xai)) ("with a:"))
                        bogusForceDataize.write (((xai)) ("with a as b:"))
                        bogusForceDataize.write (((xai)) ("class a:"))
                        bogusForceDataize.write (((xai)) ("class a("))
                        bogusForceDataize.write (((xai)) ("class a(b"))
                        bogusForceDataize.write (((xai)) ("class a(b,"))
                        bogusForceDataize.write (((xai)) ("class a():"))
                        bogusForceDataize.write (((xai)) ("[x for"))
                        bogusForceDataize.write (((xai)) ("[x for x in"))
                        bogusForceDataize.write (((xai)) ("[x for x in ("))
                        bogusForceDataize.write (((xai)) ("(x for"))
                        bogusForceDataize.write (((xai)) ("(x for x in"))
                        bogusForceDataize.write (((xai)) ("(x for x in ("))
                xtest_invalid.write
                  [xself]
                    memory > xai
                    seq > @
                      seq
                        xai.write ((xself).xassertInvalid)
                        bogusForceDataize.write (((xai)) ("a b"))
                        bogusForceDataize.write (((xai)) ("a @"))
                        bogusForceDataize.write (((xai)) ("a b @"))
                        bogusForceDataize.write (((xai)) ("a ** @"))
                        bogusForceDataize.write (((xai)) ("a = "))
                        bogusForceDataize.write (((xai)) ("a = 9 +"))
                        bogusForceDataize.write (((xai)) ("def x():nnpassn"))
                        bogusForceDataize.write (((xai)) ("nn if 1: passnnpass"))
                        bogusForceDataize.write (((xai)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xai)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xai)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xai)) ("a = 1") ("eval"))
                        bogusForceDataize.write (((xai)) ("a = (") ("eval"))
                        bogusForceDataize.write (((xai)) ("]") ("eval"))
                        bogusForceDataize.write (((xai)) ("())") ("eval"))
                        bogusForceDataize.write (((xai)) ("[}") ("eval"))
                        bogusForceDataize.write (((xai)) ("9+") ("eval"))
                        bogusForceDataize.write (((xai)) ("lambda z:") ("eval"))
                        bogusForceDataize.write (((xai)) ("a b") ("eval"))
                        bogusForceDataize.write (((xai)) ("return 2.3"))
                        bogusForceDataize.write (((xai)) ("if (a == 1 and b = 2): pass"))
                        bogusForceDataize.write (((xai)) ("del 1"))
                        bogusForceDataize.write (((xai)) ("del (1,)"))
                        bogusForceDataize.write (((xai)) ("del [1]"))
                        bogusForceDataize.write (((xai)) ("del '1'"))
                        bogusForceDataize.write (((xai)) ("[i for i in range(10)] = (1, 2, 3)"))
                xtest_filename.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcompile_command)) ("a = 1n") ("abc")).xco_filename)) (((((xcompile)) ("a = 1n") ("abc") ("single")).xco_filename)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((((xcompile_command)) ("a = 1n") ("abc")).xco_filename)) (((((xcompile)) ("a = 1n") ("def") ("single")).xco_filename)))
                xtest_warning.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcheck_warnings)) ((((unsupported)) (".*literal") ((xSyntaxWarning)))) ((((unsupported)) (".*invalid") ((xDeprecationWarning)))))) ((xw)))
                          seq
                            bogusForceDataize.write (((xcompile_command)) ("'e' is 0"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xw).xwarnings)))) (2))
                        (((unsupported)) (((((xwarnings).xcatch_warnings)) 0)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)) ("error") ((xSyntaxWarning)))
                            (((unsupported)) ((xcompile_command)) ("1 is 1") ("exec"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)