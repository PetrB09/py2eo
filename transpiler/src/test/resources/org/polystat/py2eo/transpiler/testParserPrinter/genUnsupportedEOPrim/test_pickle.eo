memory > xAbstractHookTests
memory > xCDumpPickle_LoadPickle
memory > xResourceWarning
memory > xValueError
memory > xPyPicklerHookTests
memory > xAbstractPersistentPicklerTests
memory > xPersPickler
memory > xPyPicklerTests
memory > xCPicklerHookTests
memory > xCPicklerTests
memory > xImportError
memory > xPyIdPersPicklerTests
memory > xAttributeError
memory > xAbstractCustomPicklerClass
memory > xpickle
memory > xCChainDispatchTableTests
memory > xCPickleTests
memory > xname3
memory > xio
memory > xerrors
memory > xAbstractDispatchTableTests
memory > xCompatPickleTests
memory > xmodule3
memory > xrange
memory > xBigmemPickleTests
memory > xIndexError
memory > xmodule2
memory > xPyPickleTests
memory > xcollections
memory > xKeyError
memory > xStopAsyncIteration
memory > xNAME_MAPPING
memory > xproto
memory > xCPersPicklerTests
memory > xPyUnpicklerTests
memory > xprint
memory > xInMemoryPickleTests
memory > xtype
memory > xCustomPyPicklerClass
memory > xset
memory > x_pickle
memory > xname2
memory > xn3
memory > xAbstractUnpickleTests
memory > xIMPORT_MAPPING
memory > xi
memory > xstruct
memory > xbuiltins
memory > xmodule
memory > xsupport
memory > xCPicklerUnpicklerObjectTests
memory > xsys
memory > xkwds
memory > xbytes
memory > xBaseException
memory > xPyChainDispatchTableTests
memory > xissubclass
memory > xRecursionError
memory > xSizeofTests
memory > xAbstractPickleModuleTests
memory > xAbstractPickleTests
memory > xchr
memory > xOSError
memory > xdir
memory > xDumpPickle_CLoadPickle
memory > xencoding
memory > xAbstractIdentityPersistentPicklerTests
memory > xAbstractPicklerUnpicklerObjectTests
memory > xweakref
memory > xCUnpicklerTests
memory > xgetattr
memory > xCIdPersPicklerTests
memory > xREVERSE_NAME_MAPPING
memory > xCDispatchTableTests
memory > xPyDispatchTableTests
memory > xPersistentPicklerUnpicklerMixin
memory > xPyPersPicklerTests
memory > xPyPicklerUnpicklerObjectTests
memory > xname
memory > xunittest
memory > xexc
memory > xREVERSE_IMPORT_MAPPING
memory > xEOFError
memory > xstaticmethod
memory > xCustomCPicklerClass
memory > xn2
memory > xPersUnpickler
memory > xn
memory > xobject
memory > x__import__
memory > xkwargs
memory > xm2
memory > xisinstance
memory > xlen
memory > xm3
memory > xBlockingIOError
memory > xTypeError
memory > x__name__
[] > test_pickle
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xreverse_mapping
        memory > xhas_c_implementation
        memory > xtest_exceptions
        memory > xget_dispatch_table
        memory > xtest_import
        memory > xtest_issue18339
        memory > xtest_pickler
        memory > xunpickler_class
        memory > xpickler
        memory > xdump
        memory > xtest_import_mapping
        memory > xbad_stack_errors
        memory > xload
        memory > xtest_pickler_reference_cycle
        memory > xtest_unpickler_reference_cycle
        memory > xunpickler
        memory > xgetattribute
        memory > xALT_IMPORT_MAPPING
        memory > xtest_multiprocessing_exceptions
        memory > xALT_NAME_MAPPING
        memory > xtest_main
        memory > xgetmodule
        memory > xtest_framed_write_sizes_with_delayed_writer
        memory > xdumps
        memory > xtest_unpickler
        memory > xtruncated_errors
        memory > xget_exceptions
        memory > xtest_reverse_import_mapping
        memory > xtest_reverse_name_mapping
        memory > xUnpickler
        memory > xtest_name_mapping
        memory > xcheck_sizeof
        memory > xPickler
        memory > xpickler_class
        memory > xmapping
        memory > xloads
        seq > @
          seq
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                xhas_c_implementation.write TRUE
              xhas_c_implementation.write FALSE
            (((unsupported)) ((xAbstractPickleModuleTests)))
              seq
                xdump.write (((xstaticmethod)) (((xpickle).x_dump)))
                xdumps.write (((xstaticmethod)) (((xpickle).x_dumps)))
                xload.write (((xstaticmethod)) (((xpickle).x_load)))
                xloads.write (((xstaticmethod)) (((xpickle).x_loads)))
                xPickler.write ((xpickle).x_Pickler)
                xUnpickler.write ((xpickle).x_Unpickler)
            (((unsupported)) ((xAbstractUnpickleTests)))
              seq
                xunpickler.write ((xpickle).x_Unpickler)
                xbad_stack_errors.write (((unsupported)) ((xIndexError)))
                xtruncated_errors.write (((unsupported)) (((xpickle).xUnpicklingError)) ((xEOFError)) ((xAttributeError)) ((xValueError)) (((xstruct).xerror)) ((xIndexError)) ((xImportError)))
                xloads.write
                  [xself xbuf]
                    memory > xu
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write ((((xio).xBytesIO)) ((xbuf)))
                        xu.write ((((xself).xunpickler)) ((xf)) ((((unsupported)) ((xkwds)))))
                        (((unsupported)) (((((xu).xload)) 0)))
            (((unsupported)) ((xAbstractPickleTests)))
              seq
                xpickler.write ((xpickle).x_Pickler)
                xunpickler.write ((xpickle).x_Unpickler)
                xdumps.write
                  [xself xarg xproto]
                    memory > xp
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write ((((xio).xBytesIO)) 0)
                        xp.write ((((xself).xpickler)) ((xf)) ((xproto)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xp).xdump)) ((xarg)))
                        bogusForceDataize.write ((((xf).xseek)) (0))
                        (((unsupported)) ((((xbytes)) (((((xf).xread)) 0)))))
                xloads.write
                  [xself xbuf]
                    memory > xu
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        xf.write ((((xio).xBytesIO)) ((xbuf)))
                        xu.write ((((xself).xunpickler)) ((xf)) ((((unsupported)) ((xkwds)))))
                        (((unsupported)) (((((xu).xload)) 0)))
            (((unsupported)) ((xAbstractPickleTests)) ((xAbstractUnpickleTests)) ((xBigmemPickleTests)))
              seq
                xbad_stack_errors.write (((unsupported)) (((xpickle).xUnpicklingError)) ((xIndexError)))
                xtruncated_errors.write (((unsupported)) (((xpickle).xUnpicklingError)) ((xEOFError)) ((xAttributeError)) ((xValueError)) (((xstruct).xerror)) ((xIndexError)) ((xImportError)))
                xdumps.write
                  [xself xarg xprotocol]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xpickle).xdumps)) ((xarg)) ((xprotocol)) ((((unsupported)) ((xkwargs)))))))
                xloads.write
                  [xself xbuf]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xpickle).xloads)) ((xbuf)) ((((unsupported)) ((xkwds)))))))
                xtest_framed_write_sizes_with_delayed_writer.write "None: is there a None literal in the EO language?"
            (((unsupported)) ((xobject)))
              seq
                xdumps.write
                  [xself xarg xproto]
                    memory > xpersistent_id
                    memory > xp
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xpickler)))
                          xpersistent_id.write
                            [xsubself xobj]
                              seq > @
                                (((unsupported)) (((((xself).xpersistent_id)) ((xobj)))))
                        xf.write ((((xio).xBytesIO)) 0)
                        xp.write (((xPersPickler)) ((xf)) ((xproto)))
                        bogusForceDataize.write ((((xp).xdump)) ((xarg)))
                        (((unsupported)) (((((xf).xgetvalue)) 0)))
                xloads.write
                  [xself xbuf]
                    memory > xpersistent_load
                    memory > xu
                    memory > xf
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xunpickler)))
                          xpersistent_load.write
                            [xsubself xobj]
                              seq > @
                                (((unsupported)) (((((xself).xpersistent_load)) ((xobj)))))
                        xf.write ((((xio).xBytesIO)) ((xbuf)))
                        xu.write (((xPersUnpickler)) ((xf)) ((((unsupported)) ((xkwds)))))
                        (((unsupported)) (((((xu).xload)) 0)))
            (((unsupported)) ((xAbstractPersistentPicklerTests)) ((xPersistentPicklerUnpicklerMixin)))
              seq
                xpickler.write ((xpickle).x_Pickler)
                xunpickler.write ((xpickle).x_Unpickler)
            (((unsupported)) ((xAbstractIdentityPersistentPicklerTests)) ((xPersistentPicklerUnpicklerMixin)))
              seq
                xpickler.write ((xpickle).x_Pickler)
                xunpickler.write ((xpickle).x_Unpickler)
                xtest_pickler_reference_cycle.write
                  [xself]
                    memory > xpersistent_id
                    memory > xcheck
                    seq > @
                      (((unsupported)) 0)
                        xcheck.write
                          [xPickler]
                            memory > xr
                            memory > xf
                            memory > xpickler
                            seq > @
                              seq
                                (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  seq
                                    xf.write ((((xio).xBytesIO)) 0)
                                    xpickler.write (((xPickler)) ((xf)) ((xproto)))
                                    bogusForceDataize.write ((((xpickler).xdump)) ("abc"))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xloads)) (((((xf).xgetvalue)) 0)))) ("abc"))
                                xpickler.write (((xPickler)) (((((xio).xBytesIO)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xpickler).xpersistent_id)) ("def"))) ("def"))
                                xr.write ((((xweakref).xref)) ((xpickler)))
                                (((unsupported)) ((((unsupported)) ((xpickler)))))
                                bogusForceDataize.write ((((xself).xassertIsNone)) ((((xr)) 0)))
                        (((unsupported)) (((xself).xpickler)))
                          xpersistent_id.write
                            [xsubself xobj]
                              seq > @
                                (((unsupported)) ((xobj)))
                        bogusForceDataize.write (((xcheck)) ((xPersPickler)))
                        (((unsupported)) (((xself).xpickler)))
                          xpersistent_id.write
                            [xcls xobj]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((xobj)))
                        bogusForceDataize.write (((xcheck)) ((xPersPickler)))
                        (((unsupported)) (((xself).xpickler)))
                          xpersistent_id.write
                            [xobj]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((xobj)))
                        bogusForceDataize.write (((xcheck)) ((xPersPickler)))
                xtest_unpickler_reference_cycle.write
                  [xself]
                    memory > xpersistent_load
                    memory > xcheck
                    seq > @
                      (((unsupported)) 0)
                        xcheck.write
                          [xUnpickler]
                            memory > xunpickler
                            memory > xr
                            seq > @
                              seq
                                (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  seq
                                    xunpickler.write (((xUnpickler)) (((((xio).xBytesIO)) (((((xself).xdumps)) ("abc") ((xproto)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) (((((xunpickler).xload)) 0)) ("abc"))
                                xunpickler.write (((xUnpickler)) (((((xio).xBytesIO)) 0)))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xunpickler).xpersistent_load)) ("def"))) ("def"))
                                xr.write ((((xweakref).xref)) ((xunpickler)))
                                (((unsupported)) ((((unsupported)) ((xunpickler)))))
                                bogusForceDataize.write ((((xself).xassertIsNone)) ((((xr)) 0)))
                        (((unsupported)) (((xself).xunpickler)))
                          xpersistent_load.write
                            [xsubself xpid]
                              seq > @
                                (((unsupported)) ((xpid)))
                        bogusForceDataize.write (((xcheck)) ((xPersUnpickler)))
                        (((unsupported)) (((xself).xunpickler)))
                          xpersistent_load.write
                            [xcls xpid]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((xpid)))
                        bogusForceDataize.write (((xcheck)) ((xPersUnpickler)))
                        (((unsupported)) (((xself).xunpickler)))
                          xpersistent_load.write
                            [xpid]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((xpid)))
                        bogusForceDataize.write (((xcheck)) ((xPersUnpickler)))
            (((unsupported)) ((xAbstractPicklerUnpicklerObjectTests)))
              seq
                xpickler_class.write ((xpickle).x_Pickler)
                xunpickler_class.write ((xpickle).x_Unpickler)
            (((unsupported)) ((xAbstractDispatchTableTests)))
              seq
                xpickler_class.write ((xpickle).x_Pickler)
                xget_dispatch_table.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((((xpickle).xdispatch_table).xcopy)) 0)))
            (((unsupported)) ((xAbstractDispatchTableTests)))
              seq
                xpickler_class.write ((xpickle).x_Pickler)
                xget_dispatch_table.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xcollections).xChainMap)) ((((unsupported)) 0)) (((xpickle).xdispatch_table)))))
            (((unsupported)) ((xAbstractHookTests)))
              seq
                (((unsupported)) (((xpickle).x_Pickler)) ((xAbstractCustomPicklerClass)))
                xpickler_class.write (xCustomPyPicklerClass)
            (xhas_c_implementation).if
              seq
                (((unsupported)) ((xAbstractPickleModuleTests)))
                  seq
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                    (((unsupported)) 0)
                (((unsupported)) ((xPyUnpicklerTests)))
                  seq
                    xunpickler.write ((x_pickle).xUnpickler)
                    xbad_stack_errors.write (((unsupported)) (((xpickle).xUnpicklingError)))
                    xtruncated_errors.write (((unsupported)) (((xpickle).xUnpicklingError)))
                (((unsupported)) ((xPyPicklerTests)))
                  seq
                    xpickler.write ((x_pickle).xPickler)
                    xunpickler.write ((x_pickle).xUnpickler)
                (((unsupported)) ((xPyPersPicklerTests)))
                  seq
                    xpickler.write ((x_pickle).xPickler)
                    xunpickler.write ((x_pickle).xUnpickler)
                (((unsupported)) ((xPyIdPersPicklerTests)))
                  seq
                    xpickler.write ((x_pickle).xPickler)
                    xunpickler.write ((x_pickle).xUnpickler)
                (((unsupported)) ((xPyPicklerTests)))
                  seq
                    xpickler.write ((x_pickle).xPickler)
                    xunpickler.write ((xpickle).x_Unpickler)
                (((unsupported)) ((xPyPicklerTests)))
                  seq
                    xpickler.write ((xpickle).x_Pickler)
                    xunpickler.write ((x_pickle).xUnpickler)
                (((unsupported)) ((xAbstractPicklerUnpicklerObjectTests)))
                  seq
                    xpickler_class.write ((x_pickle).xPickler)
                    xunpickler_class.write ((x_pickle).xUnpickler)
                    xtest_issue18339.write
                      [xself]
                        memory > xunpickler
                        seq > @
                          seq
                            xunpickler.write ((((xself).xunpickler_class)) (((((xio).xBytesIO)) 0)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((unsupported)) (((xunpickler).xmemo)) ((xobject)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                              (((unsupported)) (((xunpickler).xmemo)) ((((unsupported)) ((1.neg)) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)) (((xunpickler).xmemo)) ((((unsupported)) (1) ("None: is there a None literal in the EO language?"))))
                (((unsupported)) ((xAbstractDispatchTableTests)))
                  seq
                    xpickler_class.write ((xpickle).xPickler)
                    xget_dispatch_table.write
                      [xself]
                        seq > @
                          (((unsupported)) ((((((xpickle).xdispatch_table).xcopy)) 0)))
                (((unsupported)) ((xAbstractDispatchTableTests)))
                  seq
                    xpickler_class.write ((xpickle).xPickler)
                    xget_dispatch_table.write
                      [xself]
                        seq > @
                          (((unsupported)) (((((xcollections).xChainMap)) ((((unsupported)) 0)) (((xpickle).xdispatch_table)))))
                (((unsupported)) ((xAbstractHookTests)))
                  seq
                    (((unsupported)) (((x_pickle).xPickler)) ((xAbstractCustomPicklerClass)))
                    xpickler_class.write (xCustomCPicklerClass)
                (((unsupported)) (((xunittest).xTestCase)) (((xsupport).xcpython_only)))
                  seq
                    xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                    xtest_pickler.write
                      [xself]
                        memory > xME_size
                        memory > xcheck
                        memory > xbasesize
                        memory > xp
                        memory > xMT_size
                        seq > @
                          seq
                            xbasesize.write ((((xsupport).xcalcobjsize)) ("7P2n3i2n3i2P"))
                            xp.write ((((x_pickle).xPickler)) (((((xio).xBytesIO)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xobject).x__sizeof__)) ((xp)))) ((xbasesize)))
                            xMT_size.write ((((xstruct).xcalcsize)) ("3nP0n"))
                            xME_size.write ((((xstruct).xcalcsize)) ("Pn0P"))
                            xcheck.write ((xself).xcheck_sizeof)
                            bogusForceDataize.write (((xcheck)) ((xp)) (((((xbasesize).add (xMT_size)).add (8.mul (xME_size))).add ((((xsys).xgetsizeof)) (("x".mul 4096))))))
                            (((unsupported)) ((xi)) ((((xrange)) (6))))
                              bogusForceDataize.write ((((xp).xdump)) ((((xchr)) ((xi)))))
                            bogusForceDataize.write (((xcheck)) ((xp)) (((((xbasesize).add (xMT_size)).add (32.mul (xME_size))).add 0)))
                    xtest_unpickler.write
                      [xself]
                        memory > xcheck
                        memory > xbasesize
                        memory > xP
                        memory > xrecurse
                        memory > xcheck_unpickler
                        memory > xn
                        memory > xstdsize
                        memory > xunpickler
                        memory > xu
                        seq > @
                          seq
                            xbasesize.write ((((xsupport).xcalcobjsize)) ("2P2n2P 2P2n2i5P 2P3n8P2n2i"))
                            xunpickler.write ((x_pickle).xUnpickler)
                            xP.write ((((xstruct).xcalcsize)) ("P"))
                            xn.write ((((xstruct).xcalcsize)) ("n"))
                            xcheck.write ((xself).xcheck_sizeof)
                            (((unsupported)) ((xencoding)) ((((unsupported)) ("ASCII") ("UTF-16") ("latin-1"))))
                              (((unsupported)) ((xerrors)) ((((unsupported)) ("strict") ("replace"))))
                                seq
                                  xu.write (((unsupported)) ((xunpickler)) (((((xio).xBytesIO)) 0)) ((xencoding)) ((xerrors)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((((xobject).x__sizeof__)) ((xu)))) ((xbasesize)))
                                  bogusForceDataize.write (((xcheck)) ((xu)) (((((((xbasesize).add (32.mul (xP))).add (((xlen)) ((xencoding)))).add 1).add (((xlen)) ((xerrors)))).add 1)))
                            xstdsize.write (((((xbasesize).add (((xlen)) ("ASCII"))).add 1).add (((xlen)) ("strict"))).add 1)
                            xcheck_unpickler.write
                              [xdata xmemo_size xmarks_size]
                                memory > xdump
                                memory > xu
                                seq > @
                                  seq
                                    xdump.write ((((xpickle).xdumps)) ((xdata)))
                                    xu.write (((unsupported)) ((xunpickler)) (((((xio).xBytesIO)) ((xdump)))) ("ASCII") ("strict"))
                                    bogusForceDataize.write ((((xu).xload)) 0)
                                    bogusForceDataize.write (((xcheck)) ((xu)) ((((xstdsize).add ((xmemo_size).mul (xP))).add ((xmarks_size).mul (xn)))))
                            bogusForceDataize.write (((xcheck_unpickler)) (0) (32) (0))
                            bogusForceDataize.write (((xcheck_unpickler)) (((((unsupported)) (0)).mul 100)) (32) (20))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((unsupported)) ((((xchr)) ((xi)))) ((xi)) ((((xrange)) (100))))) (128) (20))
                            xrecurse.write
                              [xdeep]
                                memory > xdata
                                seq > @
                                  seq
                                    xdata.write 0
                                    (((unsupported)) ((xi)) ((((xrange)) ((xdeep)))))
                                      xdata.write (((unsupported)) ((xdata)) ((xdata)))
                                    (((unsupported)) ((xdata)))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((xrecurse)) (0))) (32) (0))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((xrecurse)) (1))) (32) (20))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((xrecurse)) (20))) (32) (20))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((xrecurse)) (50))) (64) (60))
                            bogusForceDataize.write (((xcheck_unpickler)) ((((xrecurse)) (100))) (128) (140))
                            xu.write (((unsupported)) ((xunpickler)) (((((xio).xBytesIO)) (((((xpickle).xdumps)) ("a") (0))))) ("ASCII") ("strict"))
                            bogusForceDataize.write ((((xu).xload)) 0)
                            bogusForceDataize.write (((xcheck)) ((xu)) (((((xstdsize).add (32.mul (xP))).add 2).add 1)))
            xALT_IMPORT_MAPPING.write (((unsupported)) ((((unsupported)) ("_elementtree") ("xml.etree.ElementTree"))) ((((unsupported)) ("cPickle") ("pickle"))) ((((unsupported)) ("StringIO") ("io"))) ((((unsupported)) ("cStringIO") ("io"))))
            xALT_NAME_MAPPING.write (((unsupported)) ((((unsupported)) ("__builtin__") ("basestring") ("builtins") ("str"))) ((((unsupported)) ("exceptions") ("StandardError") ("builtins") ("Exception"))) ((((unsupported)) ("UserDict") ("UserDict") ("collections") ("UserDict"))) ((((unsupported)) ("socket") ("_socketobject") ("socket") ("SocketType"))))
            xmapping.write
              [xmodule xname]
                seq > @
                  seq
                    (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((xNAME_MAPPING))).if
                      (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((((unsupported)) ((xNAME_MAPPING)) ((((unsupported)) ((xmodule)) ((xname)))))))
                      (((unsupported)) ((xmodule)) ((xIMPORT_MAPPING))).if
                        xmodule.write (((unsupported)) ((xIMPORT_MAPPING)) ((xmodule)))
                    (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))))
            xreverse_mapping.write
              [xmodule xname]
                seq > @
                  seq
                    (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((xREVERSE_NAME_MAPPING))).if
                      (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((((unsupported)) ((xREVERSE_NAME_MAPPING)) ((((unsupported)) ((xmodule)) ((xname)))))))
                      (((unsupported)) ((xmodule)) ((xREVERSE_IMPORT_MAPPING))).if
                        xmodule.write (((unsupported)) ((xREVERSE_IMPORT_MAPPING)) ((xmodule)))
                    (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))))
            xgetmodule.write
              [xmodule]
                seq > @
                  (((unsupported)) ((xKeyError)))
                    (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xmodule)))))
                    seq
                      (((unsupported)) ((xAttributeError)) ((xImportError)))
                        bogusForceDataize.write (((x__import__)) ((xmodule)))
                        seq
                          ((xsupport).xverbose).if
                            bogusForceDataize.write (((xprint)) (("Can't import module %r: %s".mod (((unsupported)) ((xmodule)) ((xexc))))))
                          (((unsupported)) ((xImportError)))
                        seq
                          ((xsupport).xverbose).if
                            bogusForceDataize.write (((xprint)) ((xexc)))
                          (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) (((xsys).xmodules)) ((xmodule)))))
            xgetattribute.write
              [xmodule xname]
                memory > xobj
                seq > @
                  seq
                    xobj.write (((xgetmodule)) ((xmodule)))
                    (((unsupported)) ((xn)) (((((xname).xsplit)) ("."))))
                      xobj.write (((xgetattr)) ((xobj)) ((xn)))
                    (((unsupported)) ((xobj)))
            xget_exceptions.write
              [xmod]
                memory > xattr
                seq > @
                  (((unsupported)) ((xname)) ((((xdir)) ((xmod)))))
                    seq
                      xattr.write (((xgetattr)) ((xmod)) ((xname)))
                      ((((xisinstance)) ((xattr)) ((xtype))).and (((xissubclass)) ((xattr)) ((xBaseException)))).if
                        (((unsupported)) ((((unsupported)) ((xname)) ((xattr)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_import.write
                  [xself]
                    memory > xmodules
                    seq > @
                      seq
                        xmodules.write (((xset)) (((((xIMPORT_MAPPING).xvalues)) 0)))
                        (((unsupported)) ((xmodules)) ((((xset)) ((xREVERSE_IMPORT_MAPPING)))))
                        (((unsupported)) ((xmodules)) ((((unsupported)) ((xmodule)) ((((unsupported)) ((xmodule)) ((xname)))) ((xREVERSE_NAME_MAPPING)))))
                        (((unsupported)) ((xmodules)) ((((unsupported)) ((xmodule)) ((((unsupported)) ((xmodule)) ((xname)))) (((((xNAME_MAPPING).xvalues)) 0)))))
                        (((unsupported)) ((xmodule)) ((xmodules)))
                          (((unsupported)) ((xImportError)))
                            bogusForceDataize.write (((xgetmodule)) ((xmodule)))
                xtest_import_mapping.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xmodule3)) ((xmodule2)))) (((((xREVERSE_IMPORT_MAPPING).xitems)) 0)))
                        (((unsupported)) (((((xself).xsubTest)) ((((unsupported)) ((xmodule3)) ((xmodule2)))))))
                          seq
                            (((unsupported)) ((xImportError)))
                              bogusForceDataize.write (((xgetmodule)) ((xmodule3)))
                            ((((unsupported)) ((xmodule3)) ((((unsupported)) (1)))).neq "_").if
                              seq
                                bogusForceDataize.write ((((xself).xassertIn)) ((xmodule2)) ((xIMPORT_MAPPING)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xIMPORT_MAPPING)) ((xmodule2)))) ((xmodule3)))
                xtest_name_mapping.write
                  [xself]
                    memory > xattr
                    seq > @
                      (((unsupported)) ((((unsupported)) ((((unsupported)) ((xmodule3)) ((xname3)))) ((((unsupported)) ((xmodule2)) ((xname2)))))) (((((xREVERSE_NAME_MAPPING).xitems)) 0)))
                        (((unsupported)) (((((xself).xsubTest)) ((((unsupported)) ((((unsupported)) ((xmodule3)) ((xname3)))) ((((unsupported)) ((xmodule2)) ((xname2)))))))))
                          ((((unsupported)) ((xmodule2)) ((xname2))).eq (((unsupported)) ("exceptions") ("OSError"))).if
                            seq
                              xattr.write (((xgetattribute)) ((xmodule3)) ((xname3)))
                              bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xattr)) ((xOSError)))))
                            ((((unsupported)) ((xmodule2)) ((xname2))).eq (((unsupported)) ("exceptions") ("ImportError"))).if
                              seq
                                xattr.write (((xgetattribute)) ((xmodule3)) ((xname3)))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xattr)) ((xImportError)))))
                              seq
                                (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((((xmapping)) ((xmodule2)) ((xname2)))))
                                ((((unsupported)) ((xmodule3)) ((((unsupported)) (1)))).neq "_").if
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmodule)) ((xname)))) ((((unsupported)) ((xmodule3)) ((xname3)))))
                                (((unsupported)) ((xImportError)))
                                  xattr.write (((xgetattribute)) ((xmodule3)) ((xname3)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattribute)) ((xmodule)) ((xname)))) ((xattr)))
                xtest_reverse_import_mapping.write
                  [xself]
                    memory > xmodule
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xmodule2)) ((xmodule3)))) (((((xIMPORT_MAPPING).xitems)) 0)))
                        (((unsupported)) (((((xself).xsubTest)) ((((unsupported)) ((xmodule2)) ((xmodule3)))))))
                          seq
                            (((unsupported)) ((xImportError)))
                              bogusForceDataize.write (((xgetmodule)) ((xmodule3)))
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((xprint)) ((xexc)))
                            ((((unsupported)) ((((unsupported)) ((xmodule2)) ((xmodule3)))) ((xALT_IMPORT_MAPPING))).and (((((xREVERSE_IMPORT_MAPPING).xget)) ((xmodule3)) ("None: is there a None literal in the EO language?")).neq (xmodule2))).if
                              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xm3)) ((xn3)))) ((((unsupported)) ((xm2)) ((xn2)))))) (((((xREVERSE_NAME_MAPPING).xitems)) 0)))
                                ((((unsupported)) ((xmodule3)) ((xmodule2))).eq (((unsupported)) ((xm3)) ((xm2)))).if
                                  (((unsupported)) 0)
                                bogusForceDataize.write ((((xself).xfail)) (("No reverse mapping from %r to %r".mod (((unsupported)) ((xmodule3)) ((xmodule2))))))
                            xmodule.write ((((xREVERSE_IMPORT_MAPPING).xget)) ((xmodule3)) ((xmodule3)))
                            xmodule.write ((((xIMPORT_MAPPING).xget)) ((xmodule)) ((xmodule)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xmodule)) ((xmodule3)))
                xtest_reverse_name_mapping.write
                  [xself]
                    memory > xattr
                    seq > @
                      (((unsupported)) ((((unsupported)) ((((unsupported)) ((xmodule2)) ((xname2)))) ((((unsupported)) ((xmodule3)) ((xname3)))))) (((((xNAME_MAPPING).xitems)) 0)))
                        (((unsupported)) (((((xself).xsubTest)) ((((unsupported)) ((((unsupported)) ((xmodule2)) ((xname2)))) ((((unsupported)) ((xmodule3)) ((xname3)))))))))
                          seq
                            (((unsupported)) ((xImportError)))
                              xattr.write (((xgetattribute)) ((xmodule3)) ((xname3)))
                            (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((((xreverse_mapping)) ((xmodule3)) ((xname3)))))
                            (((unsupported)) ((((unsupported)) ((xmodule2)) ((xname2)) ((xmodule3)) ((xname3)))) ((xALT_NAME_MAPPING))).if
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmodule)) ((xname)))) ((((unsupported)) ((xmodule2)) ((xname2)))))
                            (((unsupported)) ((((unsupported)) ((xmodule)) ((xname)))) ((((xmapping)) ((xmodule)) ((xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmodule)) ((xname)))) ((((unsupported)) ((xmodule3)) ((xname3)))))
                xtest_exceptions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("exceptions") ("StandardError"))) ((((unsupported)) ("builtins") ("Exception"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("exceptions") ("Exception"))) ((((unsupported)) ("builtins") ("Exception"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("builtins") ("Exception"))) ((((unsupported)) ("exceptions") ("Exception"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("exceptions") ("OSError"))) ((((unsupported)) ("builtins") ("OSError"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("builtins") ("OSError"))) ((((unsupported)) ("exceptions") ("OSError"))))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xexc)))) ((((xget_exceptions)) ((xbuiltins)))))
                          (((unsupported)) (((((xself).xsubTest)) ((xname)))))
                            seq
                              (((unsupported)) ((xexc)) ((((unsupported)) ((xBlockingIOError)) ((xResourceWarning)) ((xStopAsyncIteration)) ((xRecursionError))))).if
                                (((unsupported)) 0)
                              ((((unsupported)) ((xexc)) ((xOSError))).and (((xissubclass)) ((xexc)) ((xOSError)))).if
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("builtins") ((xname)))) ((((unsupported)) ("exceptions") ("OSError"))))
                                ((((unsupported)) ((xexc)) ((xImportError))).and (((xissubclass)) ((xexc)) ((xImportError)))).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("builtins") ((xname)))) ((((unsupported)) ("exceptions") ("ImportError"))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("exceptions") ((xname)))) ((((unsupported)) ("exceptions") ((xname)))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("builtins") ((xname)))) ((((unsupported)) ("exceptions") ((xname)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("exceptions") ((xname)))) ((((unsupported)) ("builtins") ((xname)))))
                xtest_multiprocessing_exceptions.write
                  [xself]
                    memory > xmodule
                    seq > @
                      seq
                        xmodule.write ((((xsupport).ximport_module)) ("multiprocessing.context"))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xexc)))) ((((xget_exceptions)) ((xmodule)))))
                          (((unsupported)) (((((xself).xsubTest)) ((xname)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xreverse_mapping)) ("multiprocessing.context") ((xname)))) ((((unsupported)) ("multiprocessing") ((xname)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xmapping)) ("multiprocessing") ((xname)))) ((((unsupported)) ("multiprocessing.context") ((xname)))))
            xtest_main.write
              []
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)) ((xPyPickleTests)) ((xPyUnpicklerTests)) ((xPyPicklerTests)) ((xPyPersPicklerTests)) ((xPyIdPersPicklerTests)) ((xPyDispatchTableTests)) ((xPyChainDispatchTableTests)) ((xCompatPickleTests)) ((xPyPicklerHookTests)))
                    (xhas_c_implementation).if
                      bogusForceDataize.write ((((xtests).xextend)) ((((unsupported)) ((xCPickleTests)) ((xCUnpicklerTests)) ((xCPicklerTests)) ((xCPersPicklerTests)) ((xCIdPersPicklerTests)) ((xCDumpPickle_LoadPickle)) ((xDumpPickle_CLoadPickle)) ((xPyPicklerUnpicklerObjectTests)) ((xCPicklerUnpicklerObjectTests)) ((xCDispatchTableTests)) ((xCChainDispatchTableTests)) ((xCPicklerHookTests)) ((xInMemoryPickleTests)) ((xSizeofTests)))))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtests)))))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)) ((xpickle)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)