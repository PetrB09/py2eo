memory > xstdout
memory > xImportError
memory > xprocess
memory > xrange
memory > xspawn_python
memory > xstatistics
memory > xrfd
memory > xrandom
memory > xtuple
memory > xstderr
memory > xe
memory > xmap
memory > xsignals
memory > xlen
memory > xcm
memory > xthreading
memory > xKeyboardInterrupt
memory > xhandler
memory > xassert_python_ok
memory > xw2
memory > xValueError
memory > xsignal
memory > xerrno
memory > xstr
memory > xr1
memory > xsocket
memory > xsig
memory > xprint
memory > xw
memory > xset
memory > xint
memory > xException
memory > xr
memory > xhasattr
memory > xtime
memory > xr2
memory > xi
memory > xw1
memory > xsupport
memory > xsys
memory > xOSError
memory > xsubprocess
memory > xos
memory > xdir
memory > xwfd
memory > xpow
memory > xgetattr
memory > x__file__
memory > xname
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_signal
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_sigtimedwait_negative_timeout
        memory > xtest_out_of_range_signal_number_raises_error
        memory > xtest_setitimer_tiny
        memory > xtest_handler
        memory > xtest_sigpending
        memory > xtest_sigtimedwait_timeout
        memory > xtest_valid_signals
        memory > xtest_stress_delivery_dependent
        memory > xtest_itimer_virtual
        memory > xtest_itimer_exc
        memory > xtest_issue9324
        memory > xtest_stress_modifying_handlers
        memory > xtest_invalid_socket
        memory > xsig_prof
        memory > xtest_sigtimedwait
        memory > xtest_sigwaitinfo
        memory > xtest_strsignal
        memory > xcheck_wakeup
        memory > xtest_setting_signal_handler_to_none_raises_error
        memory > xtest_send_error
        memory > xtest_pthread_kill
        memory > xsig_vtalrm
        memory > xtest_itimer_real
        memory > xtest_sigwait_thread
        memory > xtest_set_wakeup_fd_blocking
        memory > xtest_wakeup_write_error
        memory > xtest_pthread_sigmask_valid_signals
        memory > x_testcapi
        memory > xtest_warn_on_full_buffer
        memory > xtest_invalid_call
        memory > xtest_getsignal
        memory > xtest_socket
        memory > xtearDownModule
        memory > xtest_invalid_fd
        memory > xsetUp
        memory > xtrivial_signal_handler
        memory > xsig_alrm
        memory > xtest_sigwait
        memory > xtest_sigint
        memory > xtest_wakeup_fd_during
        memory > xtest_pthread_sigmask_arguments
        memory > xdecide_itimer_count
        memory > xwait_helper
        memory > xtest_enums
        memory > xtest_invalid_argument
        memory > xtest_siginterrupt_on
        memory > xtest_wakeup_fd_early
        memory > xtest_pending
        memory > xtest_sigtimedwait_poll
        memory > xtest_pthread_kill_main_thread
        memory > xtest_stress_delivery_simultaneous
        memory > xtest_signum
        memory > xtest_set_wakeup_fd_socket_result
        memory > xtest_keyboard_interrupt_exit_code
        memory > xsetsig
        memory > xmeasure_itimer_resolution
        memory > xtest_set_wakeup_fd_result
        memory > xtest_sigpending_empty
        memory > xreadpipe_interrupted
        memory > xtearDown
        memory > xtest_without_siginterrupt
        memory > xtest_interprocess_signal
        memory > xtest_siginterrupt_off
        memory > xtest_itimer_prof
        memory > xtest_pthread_sigmask
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              x_testcapi.write "None: is there a None literal in the EO language?"
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_enums.write
                [xself]
                  memory > xsig
                  seq > @
                    (((unsupported)) ((xname)) ((((xdir)) ((xsignal)))))
                      seq
                        xsig.write (((xgetattr)) ((xsignal)) ((xname)))
                        (((unsupported)) ((xname)) ((((unsupported)) ("SIG_DFL") ("SIG_IGN")))).if
                          bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsig)) (((xsignal).xHandlers)))
                          (((unsupported)) ((xname)) ((((unsupported)) ("SIG_BLOCK") ("SIG_UNBLOCK") ("SIG_SETMASK")))).if
                            bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsig)) (((xsignal).xSigmasks)))
                            (((((xname).xstartswith)) ("SIG")).and (((((xname).xstartswith)) ("SIG_")).not)).if
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsig)) (((xsignal).xSignals)))
                              ((((xname).xstartswith)) ("CTRL_")).if
                                seq
                                  bogusForceDataize.write ((((xself).xassertIsInstance)) ((xsig)) (((xsignal).xSignals)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) (((xsys).xplatform)) ("win32"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Not valid on Windows"))))
              seq
                xtrivial_signal_handler.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                xtest_out_of_range_signal_number_raises_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsignal).xgetsignal)) (4242))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsignal).xsignal)) (4242) (((xself).xtrivial_signal_handler)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsignal).xstrsignal)) (4242))
                xtest_setting_signal_handler_to_none_raises_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ("None: is there a None literal in the EO language?"))
                xtest_getsignal.write
                  [xself]
                    memory > xhup
                    seq > @
                      seq
                        xhup.write ((((xsignal).xsignal)) (((xsignal).xSIGHUP)) (((xself).xtrivial_signal_handler)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xhup)) (((xsignal).xHandlers)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xgetsignal)) (((xsignal).xSIGHUP)))) (((xself).xtrivial_signal_handler)))
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGHUP)) ((xhup)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xgetsignal)) (((xsignal).xSIGHUP)))) ((xhup)))
                xtest_strsignal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)) ("Interrupt") (((((xsignal).xstrsignal)) (((xsignal).xSIGINT)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("Terminated") (((((xsignal).xstrsignal)) (((xsignal).xSIGTERM)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("Hangup") (((((xsignal).xstrsignal)) (((xsignal).xSIGHUP)))))
                xtest_interprocess_signal.write
                  [xself]
                    memory > xscript
                    memory > xdirname
                    seq > @
                      seq
                        xdirname.write (((((xos).xpath).xdirname)) ((x__file__)))
                        xscript.write (((((xos).xpath).xjoin)) ((xdirname)) ("signalinterproctester.py"))
                        bogusForceDataize.write (((xassert_python_ok)) ((xscript)))
                xtest_valid_signals.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsignal).xvalid_signals)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xs)) ((xset)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xsignal).xSignals).xSIGINT)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xsignal).xSignals).xSIGALRM)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (0) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((xsignal).xNSIG)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xs)))) (((xsignal).xNSIG)))
                xtest_keyboard_interrupt_exit_code.write
                  [xself]
                    memory > xprocess
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xprocess.write (((unsupported)) (((xsubprocess).xrun)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import os, signal, timenos.kill(os.getpid(), signal.SIGINT)nfor _ in range(999): time.sleep(0.01)"))) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("KeyboardInterrupt") (((xprocess).xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xprocess).xreturncode)) ((((xsignal).xSIGINT).neg)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("Windows specific"))))
              seq
                xtest_valid_signals.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsignal).xvalid_signals)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xs)) ((xset)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((((xlen)) ((xs)))) (6))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((xsignal).xSignals).xSIGINT)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (0) ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) (((xsignal).xNSIG)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertLess)) ((((xlen)) ((xs)))) (((xsignal).xNSIG)))
                xtest_issue9324.write
                  [xself]
                    memory > xhandler
                    memory > xchecked
                    seq > @
                      seq
                        xhandler.write (((unsupported)) ("None: is there a None literal in the EO language?"))
                        xchecked.write (((xset)) 0)
                        (((unsupported)) ((xsig)) ((((unsupported)) (((xsignal).xSIGABRT)) (((xsignal).xSIGBREAK)) (((xsignal).xSIGFPE)) (((xsignal).xSIGILL)) (((xsignal).xSIGINT)) (((xsignal).xSIGSEGV)) (((xsignal).xSIGTERM)))))
                          (((unsupported)) (((((xsignal).xgetsignal)) ((xsig)))) ("None: is there a None literal in the EO language?")).if
                            seq
                              bogusForceDataize.write ((((xsignal).xsignal)) ((xsig)) (((((xsignal).xsignal)) ((xsig)) ((xhandler)))))
                              bogusForceDataize.write ((((xchecked).xadd)) ((xsig)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xchecked)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsignal).xsignal)) ((1.neg)) ((xhandler)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsignal).xsignal)) (7) ((xhandler)))
                xtest_keyboard_interrupt_exit_code.write
                  [xself]
                    memory > xSTATUS_CONTROL_C_EXIT
                    memory > xprocess
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xprocess.write (((unsupported)) (((xsubprocess).xrun)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("raise KeyboardInterrupt"))) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("KeyboardInterrupt") (((xprocess).xstderr)))
                        xSTATUS_CONTROL_C_EXIT.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xprocess).xreturncode)) ((xSTATUS_CONTROL_C_EXIT)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_invalid_call.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xsignal).xset_wakeup_fd)) (((xsignal).xSIGINT)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) (((xsignal).xSIGINT)) (FALSE))
                xtest_invalid_fd.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xsupport).xmake_bad_fd)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xValueError)) ((xOSError)))) (((xsignal).xset_wakeup_fd)) ((xfd)))
                xtest_invalid_socket.write
                  [xself]
                    memory > xfd
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)) 0)
                        xfd.write ((((xsock).xfileno)) 0)
                        bogusForceDataize.write ((((xsock).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xValueError)) ((xOSError)))) (((xsignal).xset_wakeup_fd)) ((xfd)))
                xtest_set_wakeup_fd_result.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xr1)) ((xw1)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xw1)))
                        (((unsupported)) ((((unsupported)) ((xr2)) ((xw2)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr2)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xw2)))
                        (((xhasattr)) ((xos)) ("set_blocking")).if
                          seq
                            bogusForceDataize.write ((((xos).xset_blocking)) ((xw1)) (FALSE))
                            bogusForceDataize.write ((((xos).xset_blocking)) ((xw2)) (FALSE))
                        bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) ((xw1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((xw2)))) ((xw1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((1.neg)))) ((xw2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((1.neg)))) ((1.neg)))
                xtest_set_wakeup_fd_socket_result.write
                  [xself]
                    memory > xsock1
                    memory > xfd2
                    memory > xfd1
                    memory > xsock2
                    seq > @
                      seq
                        xsock1.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock1).xclose)))
                        bogusForceDataize.write ((((xsock1).xsetblocking)) (FALSE))
                        xfd1.write ((((xsock1).xfileno)) 0)
                        xsock2.write ((((xsocket).xsocket)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsock2).xclose)))
                        bogusForceDataize.write ((((xsock2).xsetblocking)) (FALSE))
                        xfd2.write ((((xsock2).xfileno)) 0)
                        bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) ((xfd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((xfd2)))) ((xfd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((1.neg)))) ((xfd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xset_wakeup_fd)) ((1.neg)))) ((1.neg)))
                xtest_set_wakeup_fd_blocking.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xrfd)) ((xwfd)))) (((((xos).xpipe)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xrfd)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xwfd)))
                        bogusForceDataize.write ((((xos).xset_blocking)) ((xwfd)) (TRUE))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) ((xwfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xcm).xexception)))) (("the fd %s must be in non-blocking mode".mod (xwfd))))
                        bogusForceDataize.write ((((xos).xset_blocking)) ((xwfd)) (FALSE))
                        bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) ((xwfd)))
                        bogusForceDataize.write ((((xsignal).xset_wakeup_fd)) ((1.neg)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Not valid on Windows"))))
              seq
                xcheck_wakeup.write
                  [xself xtest_body xordered]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write ((((((unsupported)) 0).xformat)) ((((xtuple)) ((((xmap)) ((xint)) ((xsignals)))))) ((xordered)) ((xtest_body)))
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_wakeup_write_error.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((xOSError)))
                          bogusForceDataize.write ((((xos).xwrite)) ((xr)) ("x"))
                          bogusForceDataize.write ((((xself).xskipTest)) ("OS doesn't report write() error on the read end of a pipe"))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_wakeup_fd_early.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_wakeup)) ((((unsupported)) 0)) (((xsignal).xSIGALRM)))
                xtest_wakeup_fd_during.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_wakeup)) ((((unsupported)) 0)) (((xsignal).xSIGALRM)))
                xtest_signum.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_wakeup)) ((((unsupported)) 0)) (((xsignal).xSIGUSR1)) (((xsignal).xSIGALRM)))
                xtest_pending.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xcheck_wakeup)) ((((unsupported)) 0)) (((xsignal).xSIGUSR1)) (((xsignal).xSIGUSR2)) (FALSE))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xsocket)) ("socketpair"))) ("need socket.socketpair"))))
              seq
                xtest_socket.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_send_error.write
                  [xself]
                    memory > xcode
                    memory > xaction
                    seq > @
                      (((unsupported)) 0)
                        (((xos).xname).eq "nt").if
                          xaction.write "send"
                          xaction.write "write"
                        xcode.write (((unsupported)) (((((unsupported)) 0).xformat)) ((xaction)))
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_warn_on_full_buffer.write
                  [xself]
                    memory > xcode
                    memory > xaction
                    seq > @
                      (((unsupported)) 0)
                        (((xos).xname).eq "nt").if
                          xaction.write "send"
                          xaction.write "write"
                        xcode.write (((unsupported)) (((((unsupported)) 0).xformat)) ((xaction)))
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Not valid on Windows"))))
              seq
                xreadpipe_interrupted.write
                  [xself xinterrupt]
                    memory > xcode
                    memory > xstdout
                    memory > xexitcode
                    memory > xfirst_line
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcode.write ((((unsupported)) 0).mod (((unsupported)) ((xinterrupt))))
                        (((unsupported)) ((((xspawn_python)) ("-c") ((xcode)))) ((xprocess)))
                          (((unsupported)) (((xsubprocess).xTimeoutExpired)))
                            seq
                              xfirst_line.write (((((xprocess).xstdout).xreadline)) 0)
                              (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) ((((unsupported)) (((xprocess).xcommunicate)) (5.0))))
                            seq
                              bogusForceDataize.write ((((xprocess).xkill)) 0)
                              (((unsupported)) (FALSE))
                            seq
                              xstdout.write ((xfirst_line).add (xstdout))
                              xexitcode.write ((((xprocess).xwait)) 0)
                              (((unsupported)) ((xexitcode)) ((((unsupported)) (2) (3)))).if
                                (((unsupported)) ((((xException)) (("Child error (exit code %s): %r".mod (((unsupported)) ((xexitcode)) ((xstdout))))))))
                              (((unsupported)) (((xexitcode).eq 3)))
                xtest_without_siginterrupt.write
                  [xself]
                    memory > xinterrupted
                    seq > @
                      seq
                        xinterrupted.write ((((xself).xreadpipe_interrupted)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xinterrupted)))
                xtest_siginterrupt_on.write
                  [xself]
                    memory > xinterrupted
                    seq > @
                      seq
                        xinterrupted.write ((((xself).xreadpipe_interrupted)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xinterrupted)))
                xtest_siginterrupt_off.write
                  [xself]
                    memory > xinterrupted
                    seq > @
                      seq
                        xinterrupted.write ((((xself).xreadpipe_interrupted)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xinterrupted)))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)) ((((xsys).xplatform).eq "win32")) ("Not valid on Windows"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xhndl_called)) (FALSE))
                        (((unsupported)) (((xself).xhndl_count)) (0))
                        (((unsupported)) (((xself).xitimer)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xold_alarm)) (((((xsignal).xsignal)) (((xsignal).xSIGALRM)) (((xself).xsig_alrm)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) (((xself).xold_alarm)))
                        (((unsupported)) (((xself).xitimer)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xsignal).xsetitimer)) (((xself).xitimer)) (0))
                xsig_alrm.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhndl_called)) (TRUE))
                xsig_vtalrm.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhndl_called)) (TRUE))
                        (((xself).xhndl_count).greater 3).if
                          (((unsupported)) (((((xsignal).xItimerError)) ("setitimer didn't disable ITIMER_VIRTUAL timer."))))
                          (((xself).xhndl_count).eq 3).if
                            bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_VIRTUAL)) (0))
                        (((unsupported)) (((xself).xhndl_count)) (1))
                xsig_prof.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xhndl_called)) (TRUE))
                        bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_PROF)) (0))
                xtest_itimer_exc.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) (((xsignal).xItimerError)) (((xsignal).xsetitimer)) ((1.neg)) (0))
                        0.if
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xsignal).xItimerError)) (((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) ((1.neg)))
                xtest_itimer_real.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xitimer)) (((xsignal).xITIMER_REAL)))
                        bogusForceDataize.write ((((xsignal).xsetitimer)) (((xself).xitimer)) (1.0))
                        bogusForceDataize.write ((((xsignal).xpause)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xhndl_called)) (TRUE))
                xtest_itimer_virtual.write
                  [xself]
                    memory > x_
                    memory > xstart_time
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xitimer)) (((xsignal).xITIMER_VIRTUAL)))
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGVTALRM)) (((xself).xsig_vtalrm)))
                        bogusForceDataize.write ((((xsignal).xsetitimer)) (((xself).xitimer)) (0.3) (0.2))
                        xstart_time.write ((((xtime).xmonotonic)) 0)
                        (((unsupported)) (((((((xtime).xmonotonic)) 0).sub (xstart_time)).less 60.0)))
                          seq
                            x_.write (((xpow)) (12345) (67890) (10000019))
                            (((((xsignal).xgetitimer)) (((xself).xitimer))).eq (((unsupported)) (0.0) (0.0))).if
                              (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("timeout: likely cause: machine too slow or load too high"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xgetitimer)) (((xself).xitimer)))) ((((unsupported)) (0.0) (0.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xhndl_called)) (TRUE))
                xtest_itimer_prof.write
                  [xself]
                    memory > x_
                    memory > xstart_time
                    seq > @
                      seq
                        (((unsupported)) (((xself).xitimer)) (((xsignal).xITIMER_PROF)))
                        bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGPROF)) (((xself).xsig_prof)))
                        bogusForceDataize.write ((((xsignal).xsetitimer)) (((xself).xitimer)) (0.2) (0.2))
                        xstart_time.write ((((xtime).xmonotonic)) 0)
                        (((unsupported)) (((((((xtime).xmonotonic)) 0).sub (xstart_time)).less 60.0)))
                          seq
                            x_.write (((xpow)) (12345) (67890) (10000019))
                            (((((xsignal).xgetitimer)) (((xself).xitimer))).eq (((unsupported)) (0.0) (0.0))).if
                              (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xskipTest)) ("timeout: likely cause: machine too slow or load too high"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xgetitimer)) (((xself).xitimer)))) ((((unsupported)) (0.0) (0.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xhndl_called)) (TRUE))
                xtest_setitimer_tiny.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xitimer)) (((xsignal).xITIMER_REAL)))
                        bogusForceDataize.write ((((xsignal).xsetitimer)) (((xself).xitimer)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xtime).xsleep)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xself).xhndl_called)) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xtest_sigpending_empty.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsignal).xsigpending)) 0)) ((((xset)) 0)))
                xtest_sigpending.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_pthread_kill.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xwait_helper.write
                  [xself xblocked xtest]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xcode.write ((((unsupported)) 0).mod (((unsupported)) (((((xtest).xstrip)) 0)) ((xblocked))))
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_sigwait.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xwait_helper)) (((xsignal).xSIGALRM)) ((((unsupported)) 0)))
                xtest_sigwaitinfo.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xwait_helper)) (((xsignal).xSIGALRM)) ((((unsupported)) 0)))
                xtest_sigtimedwait.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xwait_helper)) (((xsignal).xSIGALRM)) ((((unsupported)) 0)))
                xtest_sigtimedwait_poll.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xwait_helper)) (((xsignal).xSIGALRM)) ((((unsupported)) 0)))
                xtest_sigtimedwait_timeout.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xwait_helper)) (((xsignal).xSIGALRM)) ((((unsupported)) 0)))
                xtest_sigtimedwait_negative_timeout.write
                  [xself]
                    memory > xsignum
                    seq > @
                      (((unsupported)) 0)
                        xsignum.write ((xsignal).xSIGALRM)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xsignal).xsigtimedwait)) ((((unsupported)) ((xsignum)))) ((1.0.neg)))
                xtest_sigwait_thread.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((((unsupported)) 0)))
                xtest_pthread_sigmask_arguments.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsignal).xpthread_sigmask)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsignal).xpthread_sigmask)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xsignal).xpthread_sigmask)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOSError)) (((xsignal).xpthread_sigmask)) (1700) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_BLOCK)) ((((unsupported)) (((xsignal).xNSIG)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_BLOCK)) ((((unsupported)) (0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_BLOCK)) ((((unsupported)) ((((unsupported)) (1) (1000))))))
                xtest_pthread_sigmask_valid_signals.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_BLOCK)) (((((xsignal).xvalid_signals)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xpthread_sigmask)) (((xsignal).xSIG_SETMASK)) ((xs)))
                        xs.write ((((xsignal).xpthread_sigmask)) (((xsignal).xSIG_UNBLOCK)) (((((xsignal).xvalid_signals)) 0)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)) ((xs)) (((((xsignal).xvalid_signals)) 0)))
                xtest_pthread_sigmask.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        bogusForceDataize.write (((xassert_python_ok)) ("-c") ((xcode)))
                xtest_pthread_kill_main_thread.write
                  [xself]
                    memory > xcode
                    memory > xexitcode
                    seq > @
                      (((unsupported)) 0)
                        xcode.write (((unsupported)) 0)
                        (((unsupported)) ((((xspawn_python)) ("-c") ((xcode)))) ((xprocess)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xprocess).xcommunicate)) 0)))
                            xexitcode.write ((((xprocess).xwait)) 0)
                            ((xexitcode).neq 3).if
                              (((unsupported)) ((((xException)) (("Child error (exit code %s): %s".mod (((unsupported)) ((xexitcode)) ((xstdout))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xsetsig.write
                  [xself xsignum xhandler]
                    memory > xold_handler
                    seq > @
                      seq
                        xold_handler.write ((((xsignal).xsignal)) ((xsignum)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) ((xsignum)) ((xold_handler)))
                xmeasure_itimer_resolution.write
                  [xself]
                    memory > xtimes
                    memory > xhandler
                    memory > xmed
                    memory > xdurations
                    memory > xN
                    seq > @
                      seq
                        xN.write 20
                        xtimes.write (((unsupported)) 0)
                        xhandler.write
                          [xsignum xframe]
                            seq > @
                              (((unsupported)) 0)
                                ((((xlen)) ((xtimes))).less (xN)).if
                                  seq
                                    bogusForceDataize.write ((((xtimes).xappend)) (((((xtime).xperf_counter)) 0)))
                                    bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) (0))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGALRM)) ((xhandler)))
                        bogusForceDataize.write (((xhandler)) 0)
                        while.
                          ((((xlen)) ((xtimes))).less (xN))
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xtime).xsleep)) ((((unsupported)) 0)))
                        xdurations.write (((unsupported)) (((((unsupported)) ((xtimes)) (((xi).add 1))).sub (((unsupported)) ((xtimes)) ((xi))))) ((xi)) ((((xrange)) (((((xlen)) ((xtimes))).sub 1)))))
                        xmed.write ((((xstatistics).xmedian)) ((xdurations)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)) (("detected median itimer() resolution: %.6f s.".mod (((unsupported)) ((xmed))))))
                        (((unsupported)) ((xmed)))
                xdecide_itimer_count.write
                  [xself]
                    memory > xreso
                    seq > @
                      seq
                        xreso.write ((((xself).xmeasure_itimer_resolution)) 0)
                        ((xreso).leq (((unsupported)) 0)).if
                          (((unsupported)) (10000))
                          ((xreso).leq (((unsupported)) 0)).if
                            (((unsupported)) (100))
                            bogusForceDataize.write ((((xself).xskipTest)) (("detected itimer resolution (%.3f s.) too high (> 10 ms.) on this platform (or system too busy)".mod (((unsupported)) ((xreso))))))
                xtest_stress_delivery_dependent.write
                  [xself]
                    memory > xexpected_sigs
                    memory > xsecond_handler
                    memory > xsigs
                    memory > xdeadline
                    memory > xN
                    memory > xfirst_handler
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xN.write ((((xself).xdecide_itimer_count)) 0)
                        xsigs.write (((unsupported)) 0)
                        xfirst_handler.write
                          [xsignum xframe]
                            seq > @
                              bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) (((((unsupported)) 0).add (((((xrandom).xrandom)) 0).mul (((unsupported)) 0)))))
                        xsecond_handler.write
                          [xsignum xframe]
                            seq > @
                              (((unsupported)) 0)
                                bogusForceDataize.write ((((xsigs).xappend)) ((xsignum)))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGPROF)) ((xfirst_handler)))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGUSR1)) ((xfirst_handler)))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGALRM)) ((xsecond_handler)))
                        xexpected_sigs.write 0
                        xdeadline.write (((((xtime).xmonotonic)) 0).add 15.0)
                        while.
                          ((xexpected_sigs).less (xN))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xos).xkill)) (((((xos).xgetpid)) 0)) (((xsignal).xSIGPROF)))
                                (((unsupported)) ((xexpected_sigs)) (1))
                                while.
                                  (((((xlen)) ((xsigs))).less (xexpected_sigs)).and (((((xtime).xmonotonic)) 0).less (xdeadline)))
                                  [unused]
                                    seq > @
                                      bogusForceDataize.write ((((xtime).xsleep)) ((((unsupported)) 0)))
                                bogusForceDataize.write ((((xos).xkill)) (((((xos).xgetpid)) 0)) (((xsignal).xSIGUSR1)))
                                (((unsupported)) ((xexpected_sigs)) (1))
                                while.
                                  (((((xlen)) ((xsigs))).less (xexpected_sigs)).and (((((xtime).xmonotonic)) 0).less (xdeadline)))
                                  [unused]
                                    seq > @
                                      bogusForceDataize.write ((((xtime).xsleep)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xsigs)))) ((xN)) ("Some signals were lost"))
                xtest_stress_delivery_simultaneous.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_sigs
                    memory > xsigs
                    memory > xdeadline
                    memory > xN
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xN.write ((((xself).xdecide_itimer_count)) 0)
                        xsigs.write (((unsupported)) 0)
                        xhandler.write
                          [xsignum xframe]
                            seq > @
                              bogusForceDataize.write ((((xsigs).xappend)) ((xsignum)))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGUSR1)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xsetsig)) (((xsignal).xSIGALRM)) ((xhandler)))
                        xexpected_sigs.write 0
                        xdeadline.write (((((xtime).xmonotonic)) 0).add 15.0)
                        while.
                          ((xexpected_sigs).less (xN))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xsignal).xsetitimer)) (((xsignal).xITIMER_REAL)) (((((unsupported)) 0).add (((((xrandom).xrandom)) 0).mul (((unsupported)) 0)))))
                                bogusForceDataize.write ((((xos).xkill)) (((((xos).xgetpid)) 0)) (((xsignal).xSIGUSR1)))
                                (((unsupported)) ((xexpected_sigs)) (2))
                                while.
                                  (((((xlen)) ((xsigs))).less (xexpected_sigs)).and (((((xtime).xmonotonic)) 0).less (xdeadline)))
                                  [unused]
                                    seq > @
                                      bogusForceDataize.write ((((xtime).xsleep)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xsigs)))) ((xN)) ("Some signals were lost"))
                xtest_stress_modifying_handlers.write
                  [xself]
                    memory > xt
                    memory > xcycle_handlers
                    memory > xsignum
                    memory > xnum_received_signals
                    memory > xset_interrupts
                    memory > xold_handler
                    memory > xnum_sent_signals
                    memory > xcustom_handler
                    memory > xignored
                    memory > xdo_stop
                    seq > @
                      (((unsupported)) 0)
                        xsignum.write ((xsignal).xSIGUSR1)
                        xnum_sent_signals.write 0
                        xnum_received_signals.write 0
                        xdo_stop.write FALSE
                        xcustom_handler.write
                          [xsignum xframe]
                            seq > @
                              seq
                                (((unsupported)) 0)
                                (((unsupported)) ((xnum_received_signals)) (1))
                        xset_interrupts.write
                          []
                            seq > @
                              seq
                                (((unsupported)) 0)
                                while.
                                  ((xdo_stop).not)
                                  [unused]
                                    seq > @
                                      seq
                                        bogusForceDataize.write ((((xsignal).xraise_signal)) ((xsignum)))
                                        (((unsupported)) ((xnum_sent_signals)) (1))
                        xcycle_handlers.write
                          []
                            seq > @
                              while.
                                ((xnum_sent_signals).less 100)
                                [unused]
                                  seq > @
                                    (((unsupported)) ((xi)) ((((xrange)) (20000))))
                                      (((unsupported)) ((xhandler)) ((((unsupported)) ((xcustom_handler)) (((xsignal).xSIG_IGN)))))
                                        bogusForceDataize.write ((((xsignal).xsignal)) ((xsignum)) ((xhandler)))
                        xold_handler.write ((((xsignal).xsignal)) ((xsignum)) ((xcustom_handler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) ((xsignum)) ((xold_handler)))
                        xt.write (((unsupported)) (((xthreading).xThread)) ((xset_interrupts)))
                        (((unsupported)) 0)
                          seq
                            xignored.write FALSE
                            (((unsupported)) (((((xsupport).xcatch_unraisable_exception)) 0)) ((xcm)))
                              seq
                                bogusForceDataize.write ((((xt).xstart)) 0)
                                bogusForceDataize.write (((xcycle_handlers)) 0)
                                xdo_stop.write TRUE
                                bogusForceDataize.write ((((xt).xjoin)) 0)
                                (((unsupported)) (((xcm).xunraisable)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsInstance)) ((((xcm).xunraisable).xexc_value)) ((xOSError)))
                                    bogusForceDataize.write ((((xself).xassertIn)) ("Signal {signum} ignored due to race condition") ((((xstr)) ((((xcm).xunraisable).xexc_value)))))
                                    xignored.write TRUE
                            ((xignored).not).if
                              bogusForceDataize.write ((((xself).xassertGreater)) ((xnum_received_signals)) (0))
                            bogusForceDataize.write ((((xself).xassertLess)) ((xnum_received_signals)) ((xnum_sent_signals)))
                          seq
                            xdo_stop.write TRUE
                            bogusForceDataize.write ((((xt).xjoin)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_sigint.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaises)) ((xKeyboardInterrupt)))))
                        bogusForceDataize.write ((((xsignal).xraise_signal)) (((xsignal).xSIGINT)))
                xtest_invalid_argument.write
                  [xself]
                    memory > xSIGHUP
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xOSError)))
                          seq
                            xSIGHUP.write 1
                            bogusForceDataize.write ((((xsignal).xraise_signal)) ((xSIGHUP)))
                            bogusForceDataize.write ((((xself).xfail)) ("OSError (Invalid argument) expected"))
                          (((xe).xerrno).eq ((xerrno).xEINVAL)).if
                            (((unsupported)) 0)
                xtest_handler.write
                  [xself]
                    memory > xis_ok
                    memory > xhandler
                    memory > xold_signal
                    seq > @
                      seq
                        xis_ok.write FALSE
                        xhandler.write
                          [xa xb]
                            memory > xis_ok
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xis_ok.write TRUE
                        xold_signal.write ((((xsignal).xsignal)) (((xsignal).xSIGINT)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGINT)) ((xold_signal)))
                        bogusForceDataize.write ((((xsignal).xraise_signal)) (((xsignal).xSIGINT)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xis_ok)))
            xtearDownModule.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xreap_children)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)