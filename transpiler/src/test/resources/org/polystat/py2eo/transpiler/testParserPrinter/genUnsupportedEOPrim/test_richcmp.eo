memory > xopname
memory > xenumerate
memory > xtypea
memory > xSpam
memory > xint
memory > xsupport
memory > xbool
memory > xRecursionError
memory > xargs
memory > xUserList
memory > xtypeb
memory > xk
memory > xMisb
memory > xlist
memory > xVector
memory > xValueError
memory > xfunc
memory > xrange
memory > xb
memory > xops
memory > xtest
memory > xExc
memory > xrandom
memory > xNumber
memory > xException
memory > xGood
memory > xoperator
memory > xi
memory > xgetattr
memory > xv
memory > xzip
memory > xunittest
memory > xBad
memory > xop
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
memory > xa
[] > test_richcmp
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__getitem__
        memory > xtest_coverage
        memory > xcheckfail
        memory > x__cmp__
        memory > xtest_exception_message
        memory > x__init__
        memory > xtest_misbehavin
        memory > xtest_recursion
        memory > x__eq__
        memory > x__repr__
        memory > xcheckvalue
        memory > xtest_dicts
        memory > x__le__
        memory > x__lt__
        memory > x__ne__
        memory > xtest_goodentry
        memory > x__gt__
        memory > xtest_basic
        memory > xopmap
        memory > xtest_not
        memory > x__cast
        memory > x__setitem__
        memory > x__hash__
        memory > xtest_mixed
        memory > x__len__
        memory > xtest_values
        memory > x__bool__
        memory > xcheckequal
        memory > xtest_badentry
        memory > x__ge__
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xx]
                    seq > @
                      (((unsupported)) (((xself).xx)) ((xx)))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).less (xother))))
                x__le__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).leq (xother))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).eq (xother))))
                x__ne__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).neq (xother))))
                x__gt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).greater (xother))))
                x__ge__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xself).xx).geq (xother))))
                x__cmp__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (((((xsupport).xTestFailed)) ("Number.__cmp__() should not be called"))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)) (("Number(%r)".mod (((unsupported)) (((xself).xx))))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xdata]
                    seq > @
                      (((unsupported)) (((xself).xdata)) ((xdata)))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlen)) (((xself).xdata)))))
                x__getitem__.write
                  [xself xi]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))))
                x__setitem__.write
                  [xself xi xv]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xdata)) ((xi)))) ((xv)))
                x__hash__.write "None: is there a None literal in the EO language?"
                x__bool__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xTypeError)) ("Vectors cannot be used in Boolean contexts"))))
                x__cmp__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) (((((xsupport).xTestFailed)) ("Vector.__cmp__() should not be called"))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)) (("Vector(%r)".mod (((unsupported)) (((xself).xdata))))))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).less (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__le__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).leq (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).eq (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__ne__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).neq (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__gt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).greater (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__ge__.write
                  [xself xother]
                    seq > @
                      (((unsupported)) ((((xVector)) ((((unsupported)) (((xa).geq (xb))) ((((unsupported)) ((xa)) ((xb)))) ((((xzip)) (((xself).xdata)) (((((xself).x__cast)) ((xother)))))))))))
                x__cast.write
                  [xself xother]
                    seq > @
                      seq
                        (((xisinstance)) ((xother)) ((xVector))).if
                          xother.write ((xother).xdata)
                        ((((xlen)) (((xself).xdata))).neq (((xlen)) ((xother)))).if
                          (((unsupported)) ((((xValueError)) ("Cannot compare vectors of different length"))))
                        (((unsupported)) ((xother)))
            xopmap.write (((unsupported)) ("lt") ((((unsupported)) ((((unsupported)) (((xa).less (xb))))) (((xoperator).xlt)) (((xoperator).x__lt__)))) ("le") ((((unsupported)) ((((unsupported)) (((xa).leq (xb))))) (((xoperator).xle)) (((xoperator).x__le__)))) ("eq") ((((unsupported)) ((((unsupported)) (((xa).eq (xb))))) (((xoperator).xeq)) (((xoperator).x__eq__)))) ("ne") ((((unsupported)) ((((unsupported)) (((xa).neq (xb))))) (((xoperator).xne)) (((xoperator).x__ne__)))) ("gt") ((((unsupported)) ((((unsupported)) (((xa).greater (xb))))) (((xoperator).xgt)) (((xoperator).x__gt__)))) ("ge") ((((unsupported)) ((((unsupported)) (((xa).geq (xb))))) (((xoperator).xge)) (((xoperator).x__ge__)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheckfail.write
                  [xself xerror xopname]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ((xopname)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xerror)) ((xop)) ((((unsupported)) ((xargs)))))
                xcheckequal.write
                  [xself xopname xa xb xexpres]
                    memory > xrealres
                    seq > @
                      (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ((xopname)))))
                        seq
                          xrealres.write (((xop)) ((xa)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xrealres)))) ((((xlen)) ((xexpres)))))
                          (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xrealres)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xrealres)) ((xi)))) ((((unsupported)) ((xexpres)) ((xi)))))))
                xtest_mixed.write
                  [xself]
                    memory > xargs
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((xVector)) ((((xrange)) (2))))
                        xb.write (((xVector)) ((((xrange)) (3))))
                        (((unsupported)) ((xopname)) ((xopmap)))
                          bogusForceDataize.write ((((xself).xcheckfail)) ((xValueError)) ((xopname)) ((xa)) ((xb)))
                        xa.write (((xlist)) ((((xrange)) (5))))
                        xb.write (5.mul (((unsupported)) (2)))
                        xargs.write (((unsupported)) ((((unsupported)) ((xa)) ((((xVector)) ((xb)))))) ((((unsupported)) ((((xVector)) ((xa)))) ((xb)))) ((((unsupported)) ((((xVector)) ((xa)))) ((((xVector)) ((xb)))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((xargs)))
                          seq
                            bogusForceDataize.write ((((xself).xcheckequal)) ("lt") ((xa)) ((xb)) ((((unsupported)) (TRUE) (TRUE) (FALSE) (FALSE) (FALSE))))
                            bogusForceDataize.write ((((xself).xcheckequal)) ("le") ((xa)) ((xb)) ((((unsupported)) (TRUE) (TRUE) (TRUE) (FALSE) (FALSE))))
                            bogusForceDataize.write ((((xself).xcheckequal)) ("eq") ((xa)) ((xb)) ((((unsupported)) (FALSE) (FALSE) (TRUE) (FALSE) (FALSE))))
                            bogusForceDataize.write ((((xself).xcheckequal)) ("ne") ((xa)) ((xb)) ((((unsupported)) (TRUE) (TRUE) (FALSE) (TRUE) (TRUE))))
                            bogusForceDataize.write ((((xself).xcheckequal)) ("gt") ((xa)) ((xb)) ((((unsupported)) (FALSE) (FALSE) (FALSE) (TRUE) (TRUE))))
                            bogusForceDataize.write ((((xself).xcheckequal)) ("ge") ((xa)) ((xb)) ((((unsupported)) (FALSE) (FALSE) (TRUE) (TRUE) (TRUE))))
                            (((unsupported)) ((xops)) (((((xopmap).xvalues)) 0)))
                              (((unsupported)) ((xop)) ((xops)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xbool)) ((((xop)) ((xa)) ((xb)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xrealoutcome
                    memory > xtb
                    memory > xtestoutcome
                    memory > xta
                    seq > @
                      (((unsupported)) ((xa)) ((((xrange)) (3))))
                        (((unsupported)) ((xb)) ((((xrange)) (3))))
                          (((unsupported)) ((xtypea)) ((((unsupported)) ((xint)) ((xNumber)))))
                            (((unsupported)) ((xtypeb)) ((((unsupported)) ((xint)) ((xNumber)))))
                              seq
                                (((unsupported)) ((xtypea)) ((xtypeb)) ((xint))).if
                                  (((unsupported)) 0)
                                xta.write (((xtypea)) ((xa)))
                                xtb.write (((xtypeb)) ((xb)))
                                (((unsupported)) ((xops)) (((((xopmap).xvalues)) 0)))
                                  (((unsupported)) ((xop)) ((xops)))
                                    seq
                                      xrealoutcome.write (((xop)) ((xa)) ((xb)))
                                      xtestoutcome.write (((xop)) ((xta)) ((xtb)))
                                      bogusForceDataize.write ((((xself).xassertEqual)) ((xrealoutcome)) ((xtestoutcome)))
                xcheckvalue.write
                  [xself xopname xa xb xexpres]
                    memory > xrealres
                    memory > xtb
                    memory > xta
                    seq > @
                      (((unsupported)) ((xtypea)) ((((unsupported)) ((xint)) ((xNumber)))))
                        (((unsupported)) ((xtypeb)) ((((unsupported)) ((xint)) ((xNumber)))))
                          seq
                            xta.write (((xtypea)) ((xa)))
                            xtb.write (((xtypeb)) ((xb)))
                            (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ((xopname)))))
                              seq
                                xrealres.write (((xop)) ((xta)) ((xtb)))
                                xrealres.write (((xgetattr)) ((xrealres)) ("x") ((xrealres)))
                                bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xrealres)) ((xexpres)))))
                xtest_values.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("lt") (0) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("le") (0) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("eq") (0) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ne") (0) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("gt") (0) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ge") (0) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("lt") (0) (1) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("le") (0) (1) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("eq") (0) (1) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ne") (0) (1) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("gt") (0) (1) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ge") (0) (1) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("lt") (1) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("le") (1) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("eq") (1) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ne") (1) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("gt") (1) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xcheckvalue)) ("ge") (1) (0) (TRUE))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_misbehavin.write
                  [xself]
                    memory > x__eq__
                    memory > xb
                    memory > x__ne__
                    memory > x__gt__
                    memory > x__le__
                    memory > x__lt__
                    memory > x__ge__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__lt__.write
                              [xself_ xother]
                                seq > @
                                  (((unsupported)) (0))
                            x__gt__.write
                              [xself_ xother]
                                seq > @
                                  (((unsupported)) (0))
                            x__eq__.write
                              [xself_ xother]
                                seq > @
                                  (((unsupported)) (0))
                            x__le__.write
                              [xself_ xother]
                                seq > @
                                  bogusForceDataize.write ((((xself).xfail)) ("This shouldn't happen"))
                            x__ge__.write
                              [xself_ xother]
                                seq > @
                                  bogusForceDataize.write ((((xself).xfail)) ("This shouldn't happen"))
                            x__ne__.write
                              [xself_ xother]
                                seq > @
                                  bogusForceDataize.write ((((xself).xfail)) ("This shouldn't happen"))
                        xa.write (((xMisb)) 0)
                        xb.write (((xMisb)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).less (xb))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).eq (xb))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xa).greater (xb))) (0))
                xtest_not.write
                  [xself]
                    memory > xdo
                    memory > x__bool__
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xException)))
                        (((unsupported)) 0)
                          x__bool__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xExc)))
                        xdo.write
                          [xbad]
                            seq > @
                              unsupported
                        (((unsupported)) ((xfunc)) ((((unsupported)) ((xdo)) (((xoperator).xnot_)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xExc)) ((xfunc)) ((((xBad)) 0)))
                xtest_recursion.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xa.write (((xUserList)) 0)
                        xb.write (((xUserList)) 0)
                        bogusForceDataize.write ((((xa).xappend)) ((xb)))
                        bogusForceDataize.write ((((xb).xappend)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xeq)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xne)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xlt)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xle)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xgt)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xge)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xb).xappend)) (17))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).eq (xb)).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xa).neq (xb))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xlt)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xle)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xgt)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xge)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xa).xappend)) (17))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xeq)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) (((xoperator).xne)) ((xa)) ((xb)))
                        bogusForceDataize.write ((((xa).xinsert)) (0) (11))
                        bogusForceDataize.write ((((xb).xinsert)) (0) (12))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xa).eq (xb)).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xa).neq (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xa).less (xb))))
                xtest_exception_message.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xtests.write (((unsupported)) ((((unsupported)) ((((unsupported)) ((42.less "None: is there a None literal in the EO language?")))) ("'<' .* of 'int' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) (("None: is there a None literal in the EO language?".less 42)))) ("'<' .* of 'NoneType' and 'int'"))) ((((unsupported)) ((((unsupported)) ((42.greater "None: is there a None literal in the EO language?")))) ("'>' .* of 'int' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) (("foo".less "None: is there a None literal in the EO language?")))) ("'<' .* of 'str' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) (("foo".geq 666)))) ("'>=' .* of 'str' and 'int'"))) ((((unsupported)) ((((unsupported)) ((42.leq "None: is there a None literal in the EO language?")))) ("'<=' .* of 'int' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) ((42.geq "None: is there a None literal in the EO language?")))) ("'>=' .* of 'int' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) ((42.less (((unsupported)) 0))))) ("'<' .* of 'int' and 'list'"))) ((((unsupported)) ((((unsupported)) (((((unsupported)) 0).greater (((unsupported)) 0))))) ("'>' .* of 'tuple' and 'list'"))) ((((unsupported)) ((((unsupported)) (("None: is there a None literal in the EO language?".geq "None: is there a None literal in the EO language?")))) ("'>=' .* of 'NoneType' and 'NoneType'"))) ((((unsupported)) ((((unsupported)) (((((xSpam)) 0).less 42)))) ("'<' .* of 'Spam' and 'int'"))) ((((unsupported)) ((((unsupported)) ((42.less (((xSpam)) 0))))) ("'<' .* of 'int' and 'Spam'"))) ((((unsupported)) ((((unsupported)) (((((xSpam)) 0).leq (((xSpam)) 0))))) ("'<=' .* of 'Spam' and 'Spam'"))))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xtest)))) ((((xenumerate)) ((xtests)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xi)))))
                            (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((((unsupported)) ((xtest)) (1))))))
                              bogusForceDataize.write (((((unsupported)) ((xtest)) (0))) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_dicts.write
                [xself]
                  memory > ximag1b
                  memory > ximag1a
                  memory > xitems
                  memory > ximag2
                  seq > @
                    seq
                      (((unsupported)) 0)
                      ximag1a.write (((unsupported)) 0)
                      (((unsupported)) ((xi)) ((((xrange)) (50))))
                        (((unsupported)) ((((unsupported)) ((ximag1a)) ((((((xrandom).xrandrange)) (100)).mul (((unsupported)) 0))))) ((((((xrandom).xrandrange)) (100)).mul (((unsupported)) 0))))
                      xitems.write (((xlist)) (((((ximag1a).xitems)) 0)))
                      bogusForceDataize.write ((((xrandom).xshuffle)) ((xitems)))
                      ximag1b.write (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) ((xitems)))
                        (((unsupported)) ((((unsupported)) ((ximag1b)) ((xk)))) ((xv)))
                      ximag2.write ((((ximag1b).xcopy)) 0)
                      (((unsupported)) ((((unsupported)) ((ximag2)) ((xk)))) (((xv).add 1.0)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((ximag1a)) ((ximag1a)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((ximag1a)) ((ximag1b)))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((ximag2)) ((ximag2)))
                      bogusForceDataize.write ((((xself).xassertTrue)) (((ximag1a).neq (ximag2))))
                      (((unsupported)) ((xopname)) ((((unsupported)) ("lt") ("le") ("gt") ("ge"))))
                        (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ((xopname)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xop)) ((ximag1a)) ((ximag2)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_coverage.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write (((unsupported)) (42))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).less (xx))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).leq (xx))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).eq (xx))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).neq (xx))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).greater (xx))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).geq (xx))) (TRUE))
                        xy.write (((unsupported)) (42) (42))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).less (xy))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).leq (xy))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).eq (xy))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).neq (xy))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).greater (xy))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).geq (xy))) (FALSE))
                xtest_badentry.write
                  [xself]
                    memory > xy
                    memory > xx
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)) ((xException)))
                        (((unsupported)) 0)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) ((xExc)))
                        xx.write (((unsupported)) ((((xBad)) 0)))
                        xy.write (((unsupported)) ((((xBad)) 0)))
                        (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ("eq"))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xExc)) ((xop)) ((xx)) ((xy)))
                xtest_goodentry.write
                  [xself]
                    memory > xx
                    memory > x__lt__
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)) 0)
                          x__lt__.write
                            [xself xother]
                              seq > @
                                (((unsupported)) (TRUE))
                        xx.write (((unsupported)) ((((xGood)) 0)))
                        xy.write (((unsupported)) ((((xGood)) 0)))
                        (((unsupported)) ((xop)) ((((unsupported)) ((xopmap)) ("lt"))))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((xop)) ((xx)) ((xy)))) (TRUE))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)