memory > xModuleNotFoundError
memory > xcm
memory > xSequenceWithoutALength
memory > x__debug__
memory > xtypes
memory > xD
memory > xcheck_warnings
memory > xTestFailingIter
memory > xplatform
memory > xround
memory > xexp_result
memory > xC
memory > xmin
memory > xAsyncGeneratorType
memory > xImportError
memory > xAttributeError
memory > xfd
memory > xC3
memory > xnum
memory > xrc
memory > xbin
memory > xc
memory > xHugeNegativeLen
memory > xexpected
memory > xall
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xdecimal
memory > xmode
memory > xdelattr
memory > xenumerate
memory > xassert_python_ok
memory > xz
memory > xFunctionType
memory > xValueError
memory > xTestFailingBool
memory > xfrozenset
memory > xTestNoRound
memory > xZ
memory > xstr
memory > xNoLenMethod
memory > xio
memory > xout
memory > xIter
memory > xSquares
memory > xwarnings
memory > xTestRound
memory > xproduct
memory > xDerivedFromA
memory > xAbsClass
memory > xB
memory > xexec
memory > xpid
memory > xrpipe
memory > x__builtins__
memory > xfrozendict
memory > xrange
memory > xmaybe_get_event_loop_policy
memory > xBuiltinTest
memory > xG
memory > xT
memory > xcollections
memory > xdivmod
memory > xeval
memory > xbreakpoint
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xl
memory > xKeyError
memory > xDerivedFromStr
memory > xproto
memory > xCO_COROUTINE
memory > xdenom
memory > xmax
memory > xBitBucket
memory > xRuntimeWarning
memory > xerr
memory > xrandom
memory > xHugeLen
memory > xpatch
memory > xSimple
memory > xopen
memory > xFoo
memory > xcallable
memory > xEnvironmentVarGuard
memory > xreversed
memory > xdedent
memory > xprint
memory > xany
memory > xtype
memory > xw
memory > xset
memory > xrepr
memory > xint
memory > xre
memory > xException
memory > xr
memory > xBadIterable
memory > xX
memory > xhasattr
memory > xcode
memory > xproperty
memory > xOverflowError
memory > xdoc
memory > xsum
memory > xx
memory > xImportWarning
memory > xI
memory > xstmt
memory > xi
memory > xneg
memory > xcompile
memory > xbuiltins
memory > xfrozendict_error
memory > xNegativeLen
memory > xsys
memory > xInvalidLen
memory > xbool
memory > xascii
memory > xM
memory > xtuple
memory > xNotImplemented
memory > xissubclass
memory > xglobals
memory > xsorted
memory > xBadSeq
memory > xlocale
memory > xfloat
memory > xchr
memory > xunlink
memory > xcls
memory > xgc
memory > xargs
memory > xOSError
memory > xBadFormatResult
memory > xmock
memory > xos
memory > xDerivedFromSimple2
memory > xC1
memory > xdir
memory > xtraceback
memory > xfractions
memory > xTESTFN
memory > xpow
memory > xgetattr
memory > xv
memory > xExitStack
memory > xid
memory > xSyntaxError
memory > xvars
memory > xUnicodeEncodeError
memory > xoct
memory > xDocTestSuite
memory > xinput
memory > xiter
memory > xcode_sample
memory > xpartial
memory > xe
memory > xenvar
memory > xformat
memory > xE
memory > x__file__
memory > xoptval
memory > xord
memory > xsetattr
memory > xSystemExit
memory > xelem
memory > xname
memory > xzip
memory > xunittest
memory > xEOFError
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xobject
memory > xA
memory > xast
memory > xmemoryview
memory > xMagicMock
memory > xwpipe
memory > xC2
memory > xfilter
memory > x__import__
memory > xhex
memory > xabs
memory > xisinstance
memory > xNameError
memory > xconst
memory > xlen
memory > xswap_attr
memory > xdict
memory > xSpreadSheet
memory > xEllipsis
memory > xTypeError
memory > x__name__
memory > xkey
memory > xasyncio
memory > xFloatLen
memory > xDerivedFromSimple
[] > test_builtin
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_round_large
        memory > xtest_hex
        memory > xtest_map_pickle
        memory > xtest_inputtypes
        memory > xtest_compile_top_level_await_no_coro
        memory > x_run_child
        memory > xtest_conv_sign
        memory > xhandle_sighup
        memory > xtest_zip
        memory > xtest_format
        memory > xtest_iter
        memory > xtest_open_non_inheritable
        memory > xtest_envar_good_path_empty_string
        memory > xtest_chr
        memory > xtest_zip_result_gc
        memory > xtest_filter
        memory > xtest_envar_unimportable
        memory > xtest_bug_27936
        memory > xsignal
        memory > xlinux_alpha
        memory > xtest_cleanup
        memory > xcheck_iter_pickle
        memory > xtest_type
        memory > xtest_all
        memory > xtest_input_tty_non_ascii_unicode_errors
        memory > xmap_char
        memory > xtest_input
        memory > x__iter__
        memory > xtest_neg
        memory > xtest_import
        memory > xtest_hash
        memory > xfilter_char
        memory > xtest_hasattr
        memory > xtest_breakpoint_with_passthru_error
        memory > xtest_type_qualname
        memory > xtest_getattr
        memory > xsystem_round_bug
        memory > xtest_repr
        memory > xtest_issubclass
        memory > xtest_dir
        memory > xtest_bad_arguments
        memory > x__getitem__
        memory > xgetDict
        memory > xtest_namespace_order
        memory > xtest_construct_singletons
        memory > xwrite_testfile
        memory > xtest_isinstance
        memory > xtest_envar_good_path_builtin
        memory > xtest_sum
        memory > xsetUp
        memory > xtest_bytearray_translate
        memory > xtest_envar_good_path_noop_0
        memory > xtest_input_no_stdout_fileno
        memory > xtest_exec_redirected
        memory > xtest_open
        memory > xget_vars_f0
        memory > xtest_min
        memory > xrun_child
        memory > xtest_eval
        memory > xtest_setattr
        memory > xtest_envar_good_path_other
        memory > xtest_any
        memory > xtest_compile
        memory > xtest_exec
        memory > xtest_breakpoint
        memory > xtest_compile_top_level_await
        memory > xcheck_input_tty
        memory > xtest_compile_top_level_await_invalid_cases
        memory > xtest_input_tty
        memory > xtest_ascii
        memory > xtest_type_nokwargs
        memory > xtest_pow
        memory > xtest_basic
        memory > xload_tests
        memory > xtest_baddecorator
        memory > xtest_input_tty_non_ascii
        memory > xtest_oct
        memory > xtest_bad_args
        memory > xtest_breakpoint_with_breakpointhook_reset
        memory > xtest_type_name
        memory > xtest_ord
        memory > xtest_id
        memory > x__init__
        memory > xtest_map
        memory > xtest_next
        memory > xpty
        memory > xtest_breakpoint_with_args_and_keywords
        memory > xtest_new_type
        memory > xtest_delattr
        memory > xtest_envar_ignored_when_hook_is_set
        memory > x__len__
        memory > xtest_bad_slots
        memory > xget_vars_f2
        memory > xwrite
        memory > xtest_compile_async_generator
        memory > xtest_bin
        memory > xtest_general_eval
        memory > xtest_divmod
        memory > xtest_max
        memory > xtest_callable
        memory > xtest_len
        memory > xtest_filter_pickle
        memory > xtest_round
        memory > x__bool__
        memory > xtest_type_doc
        memory > xtest_zip_pickle
        memory > xtest_cmp
        memory > xtest_breakpoint_with_breakpointhook_set
        memory > x__dict__
        memory > xtest_vars
        memory > xtest_open_default_encoding
        memory > xtest_exec_globals
        memory > xtest_abs
        memory > xtest_zip_bad_iterable
        memory > xtest_bytearray_extend_error
        memory > xtest_conv_no_sign
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((xpty)) ((xsignal)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xmax]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xmax)) ((xmax)))
                        (((unsupported)) (((xself).xsofar)) ((((unsupported)) 0)))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlen)) (((xself).xsofar)))))
                x__getitem__.write
                  [xself xi]
                    memory > xn
                    seq > @
                      seq
                        ((((unsupported)) (0) ((xi)) (((xself).xmax))).not).if
                          (((unsupported)) ((xIndexError)))
                        xn.write (((xlen)) (((xself).xsofar)))
                        while.
                          ((xn).leq (xi))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xself).xsofar).xappend)) (((xn).mul (xn))))
                                (((unsupported)) ((xn)) (1))
                        (((unsupported)) ((((unsupported)) (((xself).xsofar)) ((xi)))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xmax]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xmax)) ((xmax)))
                        (((unsupported)) (((xself).xsofar)) ((((unsupported)) 0)))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xlen)) (((xself).xsofar)))))
                x__getitem__.write
                  [xself xi]
                    memory > xn
                    seq > @
                      seq
                        ((((unsupported)) (0) ((xi)) (((xself).xmax))).not).if
                          (((unsupported)) ((xIndexError)))
                        xn.write (((xlen)) (((xself).xsofar)))
                        while.
                          ((xn).leq (xi))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xself).xsofar).xappend)) ((((xstr)) (((xn).mul (xn))))))
                                (((unsupported)) ((xn)) (1))
                        (((unsupported)) ((((unsupported)) (((xself).xsofar)) ((xi)))))
            (((unsupported)) 0)
              xwrite.write
                [xself xline]
                  seq > @
            xtest_conv_no_sign.write (((unsupported)) ((((unsupported)) ("0") (0))) ((((unsupported)) ("1") (1))) ((((unsupported)) ("9") (9))) ((((unsupported)) ("10") (10))) ((((unsupported)) ("99") (99))) ((((unsupported)) ("100") (100))) ((((unsupported)) ("314") (314))) ((((unsupported)) (" 314") (314))) ((((unsupported)) ("314 ") (314))) ((((unsupported)) ("  tt  314  tt  ") (314))) ((((unsupported)) ((((xrepr)) (((xsys).xmaxsize)))) (((xsys).xmaxsize)))) ((((unsupported)) ("  1x") ((xValueError)))) ((((unsupported)) ("  1  ") (1))) ((((unsupported)) ("  102  ") ((xValueError)))) ((((unsupported)) ("") ((xValueError)))) ((((unsupported)) (" ") ((xValueError)))) ((((unsupported)) ("  tt  ") ((xValueError)))) ((((unsupported)) ((((xstr)) ("u0663u0661u0664 ") ("raw-unicode-escape"))) (314))) ((((unsupported)) ((((xchr)) (512))) ((xValueError)))))
            xtest_conv_sign.write (((unsupported)) ((((unsupported)) ("0") (0))) ((((unsupported)) ("1") (1))) ((((unsupported)) ("9") (9))) ((((unsupported)) ("10") (10))) ((((unsupported)) ("99") (99))) ((((unsupported)) ("100") (100))) ((((unsupported)) ("314") (314))) ((((unsupported)) (" 314") ((xValueError)))) ((((unsupported)) ("314 ") (314))) ((((unsupported)) ("  tt  314  tt  ") ((xValueError)))) ((((unsupported)) ((((xrepr)) (((xsys).xmaxsize)))) (((xsys).xmaxsize)))) ((((unsupported)) ("  1x") ((xValueError)))) ((((unsupported)) ("  1  ") ((xValueError)))) ((((unsupported)) ("  102  ") ((xValueError)))) ((((unsupported)) ("") ((xValueError)))) ((((unsupported)) (" ") ((xValueError)))) ((((unsupported)) ("  tt  ") ((xValueError)))) ((((unsupported)) ((((xstr)) ("u0663u0661u0664 ") ("raw-unicode-escape"))) (314))) ((((unsupported)) ((((xchr)) (512))) ((xValueError)))))
            (((unsupported)) 0)
              x__bool__.write
                [xself]
                  seq > @
                    (((unsupported)) ((xRuntimeError)))
            (((unsupported)) 0)
              x__iter__.write
                [xself]
                  seq > @
                    (((unsupported)) ((xRuntimeError)))
            xfilter_char.write
              [xarg]
                seq > @
                  (((unsupported)) (((((xord)) ((xarg))).greater (((xord)) ("d")))))
            xmap_char.write
              [xarg]
                seq > @
                  (((unsupported)) ((((xchr)) (((((xord)) ((xarg))).add 1)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_iter_pickle.write
                  [xself xit xseq xproto]
                    memory > xd
                    memory > xitorg
                    seq > @
                      seq
                        xitorg.write (xit)
                        xd.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
                        xit.write ((((xpickle).xloads)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xitorg)))) ((((xtype)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((xseq)))
                        xit.write ((((xpickle).xloads)) ((xd)))
                        (((unsupported)) ((xStopIteration)))
                          bogusForceDataize.write (((xnext)) ((xit)))
                          (((unsupported)) 0)
                        xd.write ((((xpickle).xdumps)) ((xit)) ((xproto)))
                        xit.write ((((xpickle).xloads)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((unsupported)) ((xseq)) ((((unsupported)) (1))))))
                xtest_import.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((x__import__)) ("sys"))
                        bogusForceDataize.write (((x__import__)) ("time"))
                        bogusForceDataize.write (((x__import__)) ("string"))
                        (((unsupported)) ((x__import__)) ("sys"))
                        (((unsupported)) ((x__import__)) ("time") (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xImportError)) ((x__import__)) ("spamspam"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((x__import__)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((x__import__)) (""))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((x__import__)) ("sys") ("sys"))
                        (((unsupported)) (((((xself).xassertWarns)) ((xImportWarning)))))
                          (((unsupported)) (((xself).xassertRaises)) ((xImportError)) ((x__import__)) ("") ((((unsupported)) ("__package__") ("None: is there a None literal in the EO language?") ("__spec__") ("None: is there a None literal in the EO language?") ("__name__") ("__main__"))) ((((unsupported)) 0)) ((((unsupported)) ("foo"))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xModuleNotFoundError)) ((x__import__)) ("stringx00"))
                xtest_abs.write
                  [xself]
                    memory > x__abs__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (1234))) (1234))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) ((1234.neg)))) (1234))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xabs)) (((((xsys).xmaxsize).neg).sub 1))).greater 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (0.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (3.14))) (3.14))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) ((3.14.neg)))) (3.14))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xabs)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (TRUE))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) (FALSE))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xabs)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xabs)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xobject)))
                          x__abs__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((5.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xabs)) ((((xAbsClass)) 0)))) ((5.neg)))
                xtest_all.write
                  [xself]
                    memory > xS
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) (2) (4) (6))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) (2) ("None: is there a None literal in the EO language?") (6))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xall)) ((((unsupported)) (2) ((((xTestFailingBool)) 0)) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xall)) ((((xTestFailingIter)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xall)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xall)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xall)) ((((unsupported)) (2) (4) (6))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) 0)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) (0) ((((xTestFailingBool)) 0)))))) (FALSE))
                        xS.write (((unsupported)) (50) (60))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) (((xx).greater 42)) ((xx)) ((xS)))))) (TRUE))
                        xS.write (((unsupported)) (50) (40) (60))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xall)) ((((unsupported)) (((xx).greater 42)) ((xx)) ((xS)))))) (FALSE))
                xtest_any.write
                  [xself]
                    memory > xS
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) ("None: is there a None literal in the EO language?") (4) ("None: is there a None literal in the EO language?"))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xany)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((xTestFailingBool)) 0)) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xany)) ((((xTestFailingIter)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xany)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xany)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xany)) ((((unsupported)) (2) (4) (6))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) 0)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) (1) ((((xTestFailingBool)) 0)))))) (TRUE))
                        xS.write (((unsupported)) (40) (60) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) (((xx).greater 42)) ((xx)) ((xS)))))) (TRUE))
                        xS.write (((unsupported)) (10) (20) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xany)) ((((unsupported)) (((xx).greater 42)) ((xx)) ((xS)))))) (FALSE))
                xtest_ascii.write
                  [xself]
                    memory > xs
                    memory > x_check_uni
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) (""))) ("''"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) (0))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((((unsupported)) 0)))) ("()"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((((unsupported)) 0)))) ("[]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((((unsupported)) 0)))) ("{}"))
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xa).xappend)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((xa)))) ("[[...]]"))
                        xa.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xa)) (0))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((xa)))) ("{0: {...}}"))
                        x_check_uni.write
                          [xs]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((xs)))) ((((xrepr)) ((xs)))))
                        bogusForceDataize.write (((x_check_uni)) ("'"))
                        bogusForceDataize.write (((x_check_uni)) ("\""))
                        bogusForceDataize.write (((x_check_uni)) ("\"'"))
                        bogusForceDataize.write (((x_check_uni)) ("0"))
                        bogusForceDataize.write (((x_check_uni)) ("rnt ."))
                        bogusForceDataize.write (((x_check_uni)) ("x85"))
                        bogusForceDataize.write (((x_check_uni)) ("u1fff"))
                        bogusForceDataize.write (((x_check_uni)) ("U00012fff"))
                        bogusForceDataize.write (((x_check_uni)) ("ud800"))
                        bogusForceDataize.write (((x_check_uni)) ("udfff"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ("U0001d121"))) ((((unsupported)) 0)))
                        xs.write "'0\"nrt abcdx85éU00012fffuD800U0001D121xxx."
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xascii)) ((xs)))) ("''x00\"nrt abcdx85xe9U00012fffud800U0001d121xxx.'"))
                xtest_neg.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xsys).xmaxsize).neg).sub 1)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xx)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xx).neg)) ((((xsys).xmaxsize).add 1)))
                xtest_callable.write
                  [xself]
                    memory > xc
                    memory > xmeth
                    memory > xc2
                    memory > xf
                    memory > x__call__
                    memory > xc3
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xlen)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xcallable)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((((unsupported)) (((xx).add (xy))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ((x__builtins__)))))
                        xf.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xf)))))
                        (((unsupported)) 0)
                          xmeth.write
                            [xself]
                              seq > @
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xC1)))))
                        xc.write (((xC1)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) (((xc).xmeth)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ((xc)))))
                        (((unsupported)) (((xc).x__call__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ((xc)))))
                        (((unsupported)) (((xc).x__call__)) ((((unsupported)) (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ((xc)))))
                        (((unsupported)) ((((unsupported)) (((xc).x__call__)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xcallable)) ((xc)))))
                        (((unsupported)) ((xobject)))
                          x__call__.write
                            [xself]
                              seq > @
                        xc2.write (((xC2)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xc2)))))
                        (((unsupported)) (((xc2).x__call__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xc2)))))
                        (((unsupported)) ((xC2)))
                        xc3.write (((xC3)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xcallable)) ((xc3)))))
                xtest_chr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (32))) (" "))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (65))) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (97))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (255))) ("xff"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xchr)) ((((unsupported)) (1) (24))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (((xsys).xmaxunicode)))) ((((xstr)) (((((((unsupported)) 0).xencode)) ("ascii"))) ("unicode-escape"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xchr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (65535))) ("U0000FFFF"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (65536))) ("U00010000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (65537))) ("U00010001"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1048574))) ("U000FFFFE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1048575))) ("U000FFFFF"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1048576))) ("U00100000"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1048577))) ("U00100001"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1114110))) ("U0010FFFE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xchr)) (1114111))) ("U0010FFFF"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xchr)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xchr)) (1114112))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xValueError)))) ((xchr)) ((((unsupported)) (2) (32))))
                xtest_cmp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) (((((xhasattr)) ((xbuiltins)) ("cmp")).not)))
                xtest_compile.write
                  [xself]
                    memory > xvalues
                    memory > xbom
                    memory > xcodestr
                    memory > xtree
                    memory > xcodeobjs
                    memory > xf
                    memory > xns
                    memory > xrv
                    seq > @
                      seq
                        bogusForceDataize.write (((xcompile)) ("print(1)n") ("") ("exec"))
                        xbom.write "xefxbbxbf"
                        bogusForceDataize.write (((xcompile)) (((xbom).add "print(1)n")) ("") ("exec"))
                        (((unsupported)) ((xcompile)) ("pass") ("?") ("exec"))
                        (((unsupported)) ((xcompile)) (0) ("tmp") ("0") ("eval"))
                        (((unsupported)) ((xcompile)) ("pass") ("?") (1) ("exec"))
                        bogusForceDataize.write (((xcompile)) ((((xmemoryview)) ("text"))) ("name") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompile)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcompile)) ("print(42)n") ("<string>") ("badmode"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcompile)) ("print(42)n") ("<string>") ("single") (255))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcompile)) ((((xchr)) (0))) ("f") ("exec"))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xcompile)) ("pass") ("?") ("exec") ("eval") ("0") ("tmp"))
                        bogusForceDataize.write (((xcompile)) ("print(\"xe5\")n") ("") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcompile)) ((((xchr)) (0))) ("f") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcompile)) ((((xstr)) ("a = 1"))) ("f") ("bad"))
                        xcodestr.write (((unsupported)) 0)
                        xf.write
                          []
                            seq > @
                              unsupported
                        xvalues.write (((unsupported)) ((((unsupported)) ((1.neg)) ((x__debug__)) (((xf).x__doc__)) ((x__debug__)) ((x__debug__)))) ((((unsupported)) (0) (TRUE) ("doc") (TRUE) (TRUE))) ((((unsupported)) (1) (FALSE) ("doc") (FALSE) (FALSE))) ((((unsupported)) (2) (FALSE) ("None: is there a None literal in the EO language?") (FALSE) (FALSE))))
                        (((unsupported)) ((((unsupported)) ((xoptval)) ((((unsupported)) ((xexpected)))))) ((xvalues)))
                          seq
                            xcodeobjs.write (((unsupported)) 0)
                            bogusForceDataize.write ((((xcodeobjs).xappend)) ((((unsupported)) ((xcompile)) ((xcodestr)) ("<test>") ("exec") ((xoptval)))))
                            xtree.write ((((xast).xparse)) ((xcodestr)))
                            bogusForceDataize.write ((((xcodeobjs).xappend)) ((((unsupported)) ((xcompile)) ((xtree)) ("<test>") ("exec") ((xoptval)))))
                            (((unsupported)) ((xcode)) ((xcodeobjs)))
                              seq
                                xns.write (((unsupported)) 0)
                                bogusForceDataize.write (((xexec)) ((xcode)) ((xns)))
                                xrv.write (((((unsupported)) ((xns)) ("f"))) 0)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xrv)) ((((xtuple)) ((xexpected)))))
                xtest_compile_top_level_await_no_coro.write
                  [xself]
                    memory > xcode_samples
                    memory > xsource
                    memory > xco
                    memory > xmodes
                    seq > @
                      seq
                        unsupported
                        xmodes.write (((unsupported)) ("single") ("exec"))
                        xcode_samples.write (((unsupported)) ("def f():passn") ("[x for x in l]") ("{x for x in l}") ("(x for x in l)") ("{x:x for x in l}"))
                        (((unsupported)) ((((unsupported)) ((xmode)) ((xcode_sample)))) ((((xproduct)) ((xmodes)) ((xcode_samples)))))
                          seq
                            xsource.write (((xdedent)) ((xcode_sample)))
                            xco.write (((unsupported)) ((xcompile)) ((xsource)) ("?") ((xmode)) (((xast).xPyCF_ALLOW_TOP_LEVEL_AWAIT)))
                            (((unsupported)) (((xself).xassertNotEqual)) ((((xco).xco_flags).and (xCO_COROUTINE))) ((xCO_COROUTINE)) ("source={source} mode={mode}"))
                xtest_compile_top_level_await.write
                  [xself]
                    memory > xcode_samples
                    memory > xco
                    memory > xarange
                    memory > xpolicy
                    memory > xsource
                    memory > xglobals_
                    memory > xasync_f
                    memory > xmodes
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xarange.write
                          [xn]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                                  (((unsupported)) ((xi)))
                        xmodes.write (((unsupported)) ("single") ("exec"))
                        xcode_samples.write (((unsupported)) ("a = await asyncio.sleep(0, result=1)") ((((unsupported)) 0)) ((((unsupported)) 0)) ("a = [x async for x in arange(2)][1]") ("a = 1 in {x async for x in arange(2)}") ("a = {x:1 async for x in arange(1)}[0]") ("a = [x async for x in arange(2) async for x in arange(2)][1]") ("a = [x async for x in (x async for x in arange(5))][1]") ("a, = [1 for x in {x async for x in arange(1)}]") ("a = [await asyncio.sleep(0, x) async for x in arange(2)][1]"))
                        xpolicy.write (((xmaybe_get_event_loop_policy)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) ((((unsupported)) ((xmode)) ((xcode_sample)))) ((((xproduct)) ((xmodes)) ((xcode_samples)))))
                            seq
                              xsource.write (((xdedent)) ((xcode_sample)))
                              (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xSyntaxError)) ("source={source} mode={mode}"))))
                                bogusForceDataize.write (((xcompile)) ((xsource)) ("?") ((xmode)))
                              xco.write (((unsupported)) ((xcompile)) ((xsource)) ("?") ((xmode)) (((xast).xPyCF_ALLOW_TOP_LEVEL_AWAIT)))
                              (((unsupported)) (((xself).xassertEqual)) ((((xco).xco_flags).and (xCO_COROUTINE))) ((xCO_COROUTINE)) ("source={source} mode={mode}"))
                              xglobals_.write (((unsupported)) ("asyncio") ((xasyncio)) ("a") (0) ("arange") ((xarange)))
                              xasync_f.write (((xFunctionType)) ((xco)) ((xglobals_)))
                              bogusForceDataize.write ((((xasyncio).xrun)) ((((xasync_f)) 0)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xglobals_)) ("a"))) (1))
                              xglobals_.write (((unsupported)) ("asyncio") ((xasyncio)) ("a") (0) ("arange") ((xarange)))
                              bogusForceDataize.write ((((xasyncio).xrun)) ((((xeval)) ((xco)) ((xglobals_)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xglobals_)) ("a"))) (1))
                          bogusForceDataize.write ((((xasyncio).xset_event_loop_policy)) ((xpolicy)))
                xtest_compile_top_level_await_invalid_cases.write
                  [xself]
                    memory > xcode_samples
                    memory > xmodes
                    memory > xco
                    memory > xarange
                    memory > xpolicy
                    memory > xsource
                    seq > @
                      seq
                        xarange.write
                          [xn]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                                  (((unsupported)) ((xi)))
                        xmodes.write (((unsupported)) ("single") ("exec"))
                        xcode_samples.write (((unsupported)) ("def f():  await arange(10)n") ("def f():  [x async for x in arange(10)]n") ("def f():  [await x async for x in arange(10)]n") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        xpolicy.write (((xmaybe_get_event_loop_policy)) 0)
                        (((unsupported)) 0)
                          (((unsupported)) ((((unsupported)) ((xmode)) ((xcode_sample)))) ((((xproduct)) ((xmodes)) ((xcode_samples)))))
                            seq
                              xsource.write (((xdedent)) ((xcode_sample)))
                              (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xSyntaxError)) ("source={source} mode={mode}"))))
                                bogusForceDataize.write (((xcompile)) ((xsource)) ("?") ((xmode)))
                              (((unsupported)) ((((unsupported)) (((xself).xassertRaises)) ((xSyntaxError)) ("source={source} mode={mode}"))))
                                xco.write (((unsupported)) ((xcompile)) ((xsource)) ("?") ((xmode)) (((xast).xPyCF_ALLOW_TOP_LEVEL_AWAIT)))
                          bogusForceDataize.write ((((xasyncio).xset_event_loop_policy)) ((xpolicy)))
                xtest_compile_async_generator.write
                  [xself]
                    memory > xglob
                    memory > xcode
                    memory > xco
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xcode.write (((xdedent)) ((((unsupported)) 0)))
                        xco.write (((unsupported)) ((xcompile)) ((xcode)) ("?") ("exec") (((xast).xPyCF_ALLOW_TOP_LEVEL_AWAIT)))
                        xglob.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ((xco)) ((xglob)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((((unsupported)) ((xglob)) ("ticker"))) 0)))) ((xAsyncGeneratorType)))
                xtest_delattr.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xsys).xspam)) (1))
                        bogusForceDataize.write (((xdelattr)) ((xsys)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdelattr)))
                xtest_dir.write
                  [xself]
                    memory > xlocal_var
                    memory > xf
                    memory > x__slots__
                    memory > x__init__
                    memory > x__dict__
                    memory > x__dir__
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdir)) (42) (42))
                        xlocal_var.write 1
                        bogusForceDataize.write ((((xself).xassertIn)) ("local_var") ((((xdir)) 0)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("exit") ((((xdir)) ((xsys)))))
                        (((unsupported)) (((xtypes).xModuleType)))
                          x__dict__.write 8
                        xf.write (((xFoo)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdir)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("strip") ((((xdir)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("__mro__") ((((xdir)) ((xstr)))))
                        (((unsupported)) ((xobject)))
                          x__init__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) (((xself).xx)) (7))
                                  (((unsupported)) (((xself).xy)) (8))
                                  (((unsupported)) (((xself).xz)) (9))
                        xf.write (((xFoo)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("y") ((((xdir)) ((xf)))))
                        (((unsupported)) ((xobject)))
                          x__slots__.write (((unsupported)) 0)
                        xf.write (((xFoo)) 0)
                        bogusForceDataize.write ((((xself).xassertIn)) ("__repr__") ((((xdir)) ((xf)))))
                        (((unsupported)) ((xobject)))
                          seq
                            x__slots__.write (((unsupported)) ("__class__") ("__dict__"))
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xbar)) ("wow"))
                        xf.write (((xFoo)) 0)
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("__repr__") ((((xdir)) ((xf)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("bar") ((((xdir)) ((xf)))))
                        (((unsupported)) ((xobject)))
                          x__dir__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((unsupported)) ("kan") ("ga") ("roo"))))
                        xf.write (((xFoo)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xdir)) ((xf))).eq (((unsupported)) ("ga") ("kan") ("roo")))))
                        (((unsupported)) ((xobject)))
                          x__dir__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((unsupported)) ("b") ("c") ("a"))))
                        xres.write (((xdir)) ((((xFoo)) 0)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xres)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xres).eq (((unsupported)) ("a") ("b") ("c")))))
                        (((unsupported)) ((xobject)))
                          x__dir__.write
                            [xself]
                              seq > @
                                (((unsupported)) (7))
                        xf.write (((xFoo)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdir)) ((xf)))
                        (((unsupported)) 0)
                          (((unsupported)) ((xIndexError)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xdir)) ((((unsupported)) (((((xsys).xexc_info)) 0)) (2))))))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) (((((((unsupported)) 0).x__dir__)) 0)))) ((((xdir)) ((((unsupported)) 0)))))
                xtest_divmod.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) (12) (7))) ((((unsupported)) (1) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) ((12.neg)) (7))) ((((unsupported)) ((2.neg)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) (12) ((7.neg)))) ((((unsupported)) ((2.neg)) ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) ((12.neg)) ((7.neg)))) ((((unsupported)) (1) ((5.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xdivmod)) (((((xsys).xmaxsize).neg).sub 1)) ((1.neg)))) ((((unsupported)) ((((xsys).xmaxsize).add 1)) (0))))
                        (((unsupported)) ((((unsupported)) ((xnum)) ((xdenom)) ((xexp_result)))) ((((unsupported)) ((((unsupported)) (3.25) (1.0) ((((unsupported)) (3.0) (0.25))))) ((((unsupported)) ((3.25.neg)) (1.0) ((((unsupported)) ((4.0.neg)) (0.75))))) ((((unsupported)) (3.25) ((1.0.neg)) ((((unsupported)) ((4.0.neg)) ((0.75.neg)))))) ((((unsupported)) ((3.25.neg)) ((1.0.neg)) ((((unsupported)) (3.0) ((0.25.neg)))))))))
                          seq
                            xresult.write (((xdivmod)) ((xnum)) ((xdenom)))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((unsupported)) ((xresult)) (0))) ((((unsupported)) ((xexp_result)) (0))))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((unsupported)) ((xresult)) (1))) ((((unsupported)) ((xexp_result)) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdivmod)))
                xtest_eval.write
                  [xself]
                    memory > xglobals
                    memory > x__getitem__
                    memory > xlocals
                    memory > xbom
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("1+1"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) (" 1+1n"))) (2))
                        xglobals.write (((unsupported)) ("a") (1) ("b") (2))
                        xlocals.write (((unsupported)) ("b") (200) ("c") (300))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("a") ((xglobals)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("a") ((xglobals)) ((xlocals)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("b") ((xglobals)) ((xlocals)))) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("c") ((xglobals)) ((xlocals)))) (300))
                        xglobals.write (((unsupported)) ("a") (1) ("b") (2))
                        xlocals.write (((unsupported)) ("b") (200) ("c") (300))
                        xbom.write "xefxbbxbf"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) (((xbom).add "a")) ((xglobals)) ((xlocals)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("\"xe5\"") ((xglobals)))) ("xe5"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) ((xeval)) (((((unsupported)) ((xbom)) ((((unsupported)) (2)))).add "a")))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xeval)) ("foo") ((((unsupported)) 0)) ((((xX)) 0)))
                xtest_general_eval.write
                  [xself]
                    memory > xd
                    memory > xss
                    memory > x__getitem__
                    memory > x_cells
                    memory > xg
                    memory > xkeys
                    memory > xm
                    memory > x__setitem__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            unsupported
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  seq
                                    ((xkey).eq "a").if
                                      (((unsupported)) (12))
                                    (((unsupported)) ((xKeyError)))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xlist)) ("xyz"))))
                        xm.write (((xM)) 0)
                        xg.write (((xglobals)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("a") ((xg)) ((xm)))) (12))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNameError)) ((xeval)) ("b") ((xg)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("dir()") ((xg)) ((xm)))) ((((xlist)) ("xyz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("globals()") ((xg)) ((xm)))) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("locals()") ((xg)) ((xm)))) ((xm)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("a") ((xm)))
                        (((unsupported)) 0)
                          seq
                            unsupported
                        xm.write (((xA)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("a") ((xg)) ((xm)))
                        (((unsupported)) ((xdict)))
                          seq
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  seq
                                    ((xkey).eq "a").if
                                      (((unsupported)) (12))
                                    (((unsupported)) (((((xdict).x__getitem__)) ((xself)) ((xkey)))))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((((xlist)) ("xyz"))))
                        xd.write (((xD)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("a") ((xg)) ((xd)))) (12))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xNameError)) ((xeval)) ("b") ((xg)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("dir()") ((xg)) ((xd)))) ((((xlist)) ("xyz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("globals()") ((xg)) ((xd)))) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ("locals()") ((xg)) ((xd)))) ((xd)))
                        bogusForceDataize.write (((xeval)) ("[locals() for i in (2,3)]") ((xg)) ((xd)))
                        bogusForceDataize.write (((xeval)) ("[locals() for i in (2,3)]") ((xg)) (((((xcollections).xUserDict)) 0)))
                        (((unsupported)) 0)
                          seq
                            unsupported
                            x_cells.write (((unsupported)) 0)
                            x__setitem__.write
                              [xself xkey xformula]
                                seq > @
                                  (((unsupported)) ((((unsupported)) (((xself).x_cells)) ((xkey)))) ((xformula)))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)) ((((xeval)) ((((unsupported)) (((xself).x_cells)) ((xkey)))) ((((xglobals)) 0)) ((xself)))))
                        xss.write (((xSpreadSheet)) 0)
                        (((unsupported)) ((((unsupported)) ((xss)) ("a1"))) ("5"))
                        (((unsupported)) ((((unsupported)) ((xss)) ("a2"))) ("a1*6"))
                        (((unsupported)) ((((unsupported)) ((xss)) ("a3"))) ("a2*7"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xss)) ("a3"))) (210))
                        (((unsupported)) 0)
                          seq
                            x__getitem__.write
                              [xself xitem]
                                seq > @
                                  (((unsupported)) ((((xKeyError)) ((xitem)))))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xeval)) ("dir()") ((((xglobals)) 0)) ((((xC)) 0)))
                xtest_exec.write
                  [xself]
                    memory > xg
                    memory > xl
                    seq > @
                      seq
                        xg.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ("z = 1") ((xg)))
                        (((unsupported)) ("__builtins__") ((xg))).if
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xg)) ("__builtins__"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ((((unsupported)) ("z") (1))))
                        bogusForceDataize.write (((xexec)) ("z = 1+1") ((xg)))
                        (((unsupported)) ("__builtins__") ((xg))).if
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xg)) ("__builtins__"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xg)) ((((unsupported)) ("z") (2))))
                        xg.write (((unsupported)) 0)
                        xl.write (((unsupported)) 0)
                        (((unsupported)) ((((xcheck_warnings)) 0)))
                          seq
                            (((unsupported)) (((xwarnings).xfilterwarnings)) ("ignore") ("global statement") ("<string>"))
                            bogusForceDataize.write (((xexec)) ("global a; a = 1; b = 2") ((xg)) ((xl)))
                        (((unsupported)) ("__builtins__") ((xg))).if
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xg)) ("__builtins__"))))))
                        (((unsupported)) ("__builtins__") ((xl))).if
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xl)) ("__builtins__"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xg)) ((xl)))) ((((unsupported)) ((((unsupported)) ("a") (1))) ((((unsupported)) ("b") (2))))))
                xtest_exec_globals.write
                  [xself]
                    memory > xcode
                    memory > x__setitem__
                    memory > xfrozen_builtins
                    memory > xnamespace
                    seq > @
                      seq
                        xcode.write (((xcompile)) ("print('Hello World!')") ("") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xNameError)) ("name 'print' is not defined") ((xexec)) ((xcode)) ((((unsupported)) ("__builtins__") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xexec)) ((xcode)) ((((unsupported)) ("__builtins__") (123))))
                        xcode.write (((xcompile)) ("class A: pass") ("") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)) ((xNameError)) ("__build_class__ not found") ((xexec)) ((xcode)) ((((unsupported)) ("__builtins__") ((((unsupported)) 0)))))
                        (((unsupported)) ((xException)))
                        (((unsupported)) ((xdict)))
                          x__setitem__.write
                            [xself xkey xvalue]
                              seq > @
                                (((unsupported)) ((((xfrozendict_error)) ("frozendict is readonly"))))
                        (((xisinstance)) ((x__builtins__)) (((xtypes).xModuleType))).if
                          xfrozen_builtins.write (((xfrozendict)) (((x__builtins__).x__dict__)))
                          xfrozen_builtins.write (((xfrozendict)) ((x__builtins__)))
                        xcode.write (((xcompile)) ("__builtins__['superglobal']=2; print(superglobal)") ("test") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xfrozendict_error)) ((xexec)) ((xcode)) ((((unsupported)) ("__builtins__") ((xfrozen_builtins)))))
                        xnamespace.write (((xfrozendict)) ((((unsupported)) 0)))
                        xcode.write (((xcompile)) ("x=1") ("test") ("exec"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xfrozendict_error)) ((xexec)) ((xcode)) ((xnamespace)))
                xtest_exec_redirected.write
                  [xself]
                    memory > xsavestdout
                    seq > @
                      seq
                        xsavestdout.write ((xsys).xstdout)
                        (((unsupported)) (((xsys).xstdout)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xNameError)))
                          bogusForceDataize.write (((xexec)) ("a"))
                          (((unsupported)) (((xsys).xstdout)) ((xsavestdout)))
                xtest_filter.write
                  [xself]
                    memory > xbadfunc
                    memory > x__getitem__
                    memory > xidentity
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((((unsupported)) ((((unsupported)) ("a") ((xc)) ("z"))))) ("Hello World"))))) ((((xlist)) ("elloorld"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((((unsupported)) (1) ("hello") ((((unsupported)) 0)) ((((unsupported)) (3))) ("") ("None: is there a None literal in the EO language?") (9) (0))))))) ((((unsupported)) (1) ("hello") ((((unsupported)) (3))) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((((unsupported)) (((xx).greater 0)))) ((((unsupported)) (1) ((3.neg)) (9) (0) (2))))))) ((((unsupported)) (1) (9) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((((xSquares)) (10))))))) ((((unsupported)) (1) (4) (9) (16) (25) (36) (49) (64) (81))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((((unsupported)) (((xx).mod 2)))) ((((xSquares)) (10))))))) ((((unsupported)) (1) (9) (25) (49) (81))))
                        xidentity.write
                          [xitem]
                            seq > @
                              (((unsupported)) (1))
                        bogusForceDataize.write (((xfilter)) ((xidentity)) ((((xSquares)) (5))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)))
                        (((unsupported)) ((xobject)))
                          x__getitem__.write
                            [xself xindex]
                              seq > @
                                seq
                                  ((xindex).less 4).if
                                    (((unsupported)) (42))
                                  (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((xfilter)) ((((unsupported)) ((xx)))) ((((xBadSeq)) 0)))))
                        xbadfunc.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xfilter)) ((xbadfunc)) ((((xrange)) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((((unsupported)) (1) (2))))))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((((unsupported)) (((xx).geq 3)))) ((((unsupported)) (1) (2) (3) (4))))))) ((((unsupported)) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xfilter)) (42) ((((unsupported)) (1) (2))))))
                xtest_filter_pickle.write
                  [xself]
                    memory > xf2
                    memory > xf1
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xf1.write (((xfilter)) ((xfilter_char)) ("abcdeabcde"))
                          xf2.write (((xfilter)) ((xfilter_char)) ("abcdeabcde"))
                          bogusForceDataize.write ((((xself).xcheck_iter_pickle)) ((xf1)) ((((xlist)) ((xf2)))) ((xproto)))
                xtest_getattr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xgetattr)) ((xsys)) ("stdout"))) (((xsys).xstdout)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgetattr)) ((xsys)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgetattr)) ((xsys)) (1) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgetattr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) ((xsys)) ((((xchr)) (((xsys).xmaxunicode)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAttributeError)) ((xgetattr)) (1) ("uDAD1uD51E"))
                xtest_hasattr.write
                  [xself]
                    memory > x__getattr__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xsys)) ("stdout"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhasattr)) ((xsys)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhasattr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (FALSE) ((((xhasattr)) ((xsys)) ((((xchr)) (((xsys).xmaxunicode)))))))
                        (((unsupported)) 0)
                          x__getattr__.write
                            [xself xwhat]
                              seq > @
                                (((unsupported)) ((xSystemExit)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSystemExit)) ((xhasattr)) ((((xA)) 0)) ("b"))
                        (((unsupported)) 0)
                          x__getattr__.write
                            [xself xwhat]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xhasattr)) ((((xB)) 0)) ("b"))
                xtest_hash.write
                  [xself]
                    memory > x__hash__
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write (((xhash)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (1))) ((((xhash)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (1))) ((((xhash)) (1.0))))
                        bogusForceDataize.write (((xhash)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ("spam"))) ((((xhash)) ("spam"))))
                        bogusForceDataize.write (((xhash)) ((((unsupported)) (0) (1) (2) (3))))
                        xf.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) ((((unsupported)) 0)))
                        (((unsupported)) 0)
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((unsupported)) (2) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xhash)) ((((xX)) 0)))))) ((xint)))
                        (((unsupported)) ((xint)))
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xself)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xZ)) (42))))) ((((xhash)) (42))))
                xtest_hex.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhex)) (16))) ("0x10"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xhex)) ((16.neg)))) ("-0x10"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhex)) ((((unsupported)) 0)))
                xtest_id.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xid)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xid)) (1))
                        bogusForceDataize.write (((xid)) (1.0))
                        bogusForceDataize.write (((xid)) ("spam"))
                        bogusForceDataize.write (((xid)) ((((unsupported)) (0) (1) (2) (3))))
                        bogusForceDataize.write (((xid)) ((((unsupported)) (0) (1) (2) (3))))
                        bogusForceDataize.write (((xid)) ((((unsupported)) ("spam") (1) ("eggs") (2) ("ham") (3))))
                xtest_iter.write
                  [xself]
                    memory > xlists
                    memory > xi
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xiter)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xiter)) (42) (42))
                        xlists.write (((unsupported)) ((((unsupported)) ("1") ("2"))) ((((unsupported)) ("1") ("2"))) ("12"))
                        (((unsupported)) ((xl)) ((xlists)))
                          seq
                            xi.write (((xiter)) ((xl)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xi)))) ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xi)))) ("2"))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xi)))
                xtest_isinstance.write
                  [xself]
                    memory > xc
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xC)))
                        (((unsupported)) 0)
                        xc.write (((xC)) 0)
                        xd.write (((xD)) 0)
                        xe.write (((xE)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xc)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xd)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xisinstance)) ((xe)) ((xC))).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xisinstance)) ((xc)) ((xD))).not)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xisinstance)) ("foo") ((xE))).not)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xisinstance)) ((xE)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xisinstance)))
                xtest_issubclass.write
                  [xself]
                    memory > xc
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) ((xC)))
                        (((unsupported)) 0)
                        xc.write (((xC)) 0)
                        xd.write (((xD)) 0)
                        xe.write (((xE)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xD)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xissubclass)) ((xC)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xissubclass)) ((xC)) ((xD))).not)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xissubclass)) ("foo") ((xE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xissubclass)) ((xE)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xissubclass)))
                xtest_len.write
                  [xself]
                    memory > x__len__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ("123"))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) 0)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (1) (2) (3) (4))))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) (1) (2) (3) (4))))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) 0)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ("a") (1) ("b") (2))))) (2))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlen)) ((((xBadSeq)) 0)))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlen)) ((((xInvalidLen)) 0)))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) (4.5))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlen)) ((((xFloatLen)) 0)))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((10.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlen)) ((((xNegativeLen)) 0)))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((((xsys).xmaxsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xOverflowError)) ((xlen)) ((((xHugeLen)) 0)))
                        (((unsupported)) 0)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)) (((((xsys).xmaxsize).neg).sub 10)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlen)) ((((xHugeNegativeLen)) 0)))
                        (((unsupported)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlen)) ((((xNoLenMethod)) 0)))
                xtest_map.write
                  [xself]
                    memory > xsqrt
                    memory > x__iter__
                    memory > xbadfunc
                    memory > xMax
                    memory > xplus
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((((unsupported)) (((xx).mul (xx))))) ((((xrange)) (1) (4))))))) ((((unsupported)) (1) (4) (9))))
                        (((unsupported)) ((xImportError)))
                          (((unsupported)) 0)
                          xsqrt.write
                            [xx]
                              seq > @
                                (((unsupported)) ((((xpow)) ((xx)) (0.5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((((unsupported)) ((((xlist)) ((((xmap)) ((xsqrt)) ((xx)))))))) ((((unsupported)) ((((unsupported)) (16) (4))) ((((unsupported)) (81) (9))))))))) ((((unsupported)) ((((unsupported)) (4.0) (2.0))) ((((unsupported)) (9.0) (3.0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((((unsupported)) (((xx).add (xy))))) ((((unsupported)) (1) (3) (2))) ((((unsupported)) (9) (1) (4))))))) ((((unsupported)) (10) (4) (6))))
                        xplus.write
                          []
                            memory > xaccu
                            seq > @
                              (((unsupported)) 0)
                                xaccu.write 0
                                (((unsupported)) ((xi)) ((xv)))
                                  xaccu.write ((xaccu).add (xi))
                                (((unsupported)) ((xaccu)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xplus)) ((((unsupported)) (1) (3) (7))))))) ((((unsupported)) (1) (3) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xplus)) ((((unsupported)) (1) (3) (7))) ((((unsupported)) (4) (9) (2))))))) ((((unsupported)) ((1.add 4)) ((3.add 9)) ((7.add 2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xplus)) ((((unsupported)) (1) (3) (7))) ((((unsupported)) (4) (9) (2))) ((((unsupported)) (1) (1) (0))))))) ((((unsupported)) (((1.add 4).add 1)) (((3.add 9).add 1)) (((7.add 2).add 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xint)) ((((xSquares)) (10))))))) ((((unsupported)) (0) (1) (4) (9) (16) (25) (36) (49) (64) (81))))
                        xMax.write
                          [xa xb]
                            seq > @
                              seq
                                (((unsupported)) ((xa)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) ((xb)))
                                (((unsupported)) ((xb)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) ((xa)))
                                (((unsupported)) ((((xmax)) ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xMax)) ((((xSquares)) (3))) ((((xSquares)) (2))))))) ((((unsupported)) (0) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)) ((((unsupported)) ((xx)))) (42))
                        (((unsupported)) 0)
                          x__iter__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)) ((xValueError)))
                                  (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((xmap)) ((((unsupported)) ((xx)))) ((((xBadSeq)) 0)))))
                        xbadfunc.write
                          [xx]
                            seq > @
                              (((unsupported)) ((xRuntimeError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xlist)) ((((xmap)) ((xbadfunc)) ((((xrange)) (5))))))
                xtest_map_pickle.write
                  [xself]
                    memory > xm1
                    memory > xm2
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xm1.write (((xmap)) ((xmap_char)) ("Is this the real life?"))
                          xm2.write (((xmap)) ((xmap_char)) ("Is this the real life?"))
                          bogusForceDataize.write ((((xself).xcheck_iter_pickle)) ((xm1)) ((((xlist)) ((xm2)))) ((xproto)))
                xtest_max.write
                  [xself]
                    memory > xkeys
                    memory > x__getitem__
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) ("123123"))) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) (1) (2) (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) ((((unsupported)) (1) (2) (3) (1) (2) (3))))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) ((((unsupported)) (1) (2) (3) (1) (2) (3))))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) (1) (2) (3.0))) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) (1) (2.0) (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmax)) (1.0) (2) (3))) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmax)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmax)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmax)) ((((unsupported)) 0)))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xindex]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmax)) ((((xBadSeq)) 0)))
                        (((unsupported)) ((xstmt)) ((((unsupported)) ("max(key=int)") ("max(default=None)") ("max(1, 2, default=None)") ("max(default=None, key=int)") ("max(1, key=int)") ("max(1, 2, keystone=int)") ("max(1, 2, key=int, abc=int)") ("max(1, 2, key=1)"))))
                          (((unsupported)) ((xTypeError)))
                            bogusForceDataize.write (((xexec)) ((xstmt)) ((((xglobals)) 0)))
                            bogusForceDataize.write ((((xself).xfail)) ((xstmt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1))) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1) (2))) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) (1) (2) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1))) ("None: is there a None literal in the EO language?"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1) (2))) ("None: is there a None literal in the EO language?"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) 0)) (1) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1) (2))) (3) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((((unsupported)) (1) (2))) ("None: is there a None literal in the EO language?"))) (2))
                        xdata.write (((unsupported)) (((((xrandom).xrandrange)) (200))) ((xi)) ((((xrange)) (100))))
                        xkeys.write (((xdict)) ((((unsupported)) ((((unsupported)) ((xelem)) (((((xrandom).xrandrange)) (50))))) ((xelem)) ((xdata)))))
                        xf.write ((xkeys).x__getitem__)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmax)) ((xdata)) ((xf)))) ((((unsupported)) ((((unsupported)) ((xsorted)) ((((xreversed)) ((xdata)))) ((xf)))) ((1.neg)))))
                xtest_min.write
                  [xself]
                    memory > xkeys
                    memory > x__getitem__
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) ("123123"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) (1) (2) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) ((((unsupported)) (1) (2) (3) (1) (2) (3))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) ((((unsupported)) (1) (2) (3) (1) (2) (3))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) (1) (2) (3.0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) (1) (2.0) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) (1.0) (2) (3))) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmin)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmin)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmin)) ((((unsupported)) 0)))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xindex]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xmin)) ((((xBadSeq)) 0)))
                        (((unsupported)) ((xstmt)) ((((unsupported)) ("min(key=int)") ("min(default=None)") ("min(1, 2, default=None)") ("min(default=None, key=int)") ("min(1, key=int)") ("min(1, 2, keystone=int)") ("min(1, 2, key=int, abc=int)") ("min(1, 2, key=1)"))))
                          (((unsupported)) ((xTypeError)))
                            bogusForceDataize.write (((xexec)) ((xstmt)) ((((xglobals)) 0)))
                            bogusForceDataize.write ((((xself).xfail)) ((xstmt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1))) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1) (2))) ((xneg)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) (1) (2) ((xneg)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1))) ("None: is there a None literal in the EO language?"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1) (2))) ("None: is there a None literal in the EO language?"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) 0)) (1) ((xneg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1) (2))) (1) ((xneg)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((((unsupported)) (1) (2))) ("None: is there a None literal in the EO language?"))) (1))
                        xdata.write (((unsupported)) (((((xrandom).xrandrange)) (200))) ((xi)) ((((xrange)) (100))))
                        xkeys.write (((xdict)) ((((unsupported)) ((((unsupported)) ((xelem)) (((((xrandom).xrandrange)) (50))))) ((xelem)) ((xdata)))))
                        xf.write ((xkeys).x__getitem__)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmin)) ((xdata)) ((xf)))) ((((unsupported)) ((((unsupported)) ((xsorted)) ((xdata)) ((xf)))) (0))))
                xtest_next.write
                  [xself]
                    memory > x__next__
                    memory > xgen
                    memory > xit
                    memory > x__iter__
                    seq > @
                      seq
                        xit.write (((xiter)) ((((xrange)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)) (42))) (42))
                        (((unsupported)) ((xobject)))
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xStopIteration)))
                        xit.write (((xiter)) ((((xIter)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xit)))
                        xgen.write
                          []
                            seq > @
                              seq
                                (((unsupported)) (1))
                                (((unsupported)) 0)
                        xit.write (((xgen)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)) (42))) (42))
                xtest_oct.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xoct)) (100))) ("0o144"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xoct)) ((100.neg)))) ("-0o144"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xoct)) ((((unsupported)) 0)))
                xwrite_testfile.write
                  [xself]
                    memory > xfp
                    seq > @
                      seq
                        xfp.write (((xopen)) ((xTESTFN)) ("w"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((xunlink)) ((xTESTFN)))
                        (((unsupported)) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xwrite)) ("1+1n"))
                            bogusForceDataize.write ((((xfp).xwrite)) ("The quick brown fox jumps over the lazy dog"))
                            bogusForceDataize.write ((((xfp).xwrite)) (".n"))
                            bogusForceDataize.write ((((xfp).xwrite)) ("Dear Johnn"))
                            bogusForceDataize.write ((((xfp).xwrite)) (("XXX".mul 100)))
                            bogusForceDataize.write ((((xfp).xwrite)) (("YYY".mul 100)))
                xtest_open.write
                  [xself]
                    memory > xfp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_testfile)) 0)
                        xfp.write (((xopen)) ((xTESTFN)) ("r"))
                        (((unsupported)) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) (4))) ("1+1n"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) 0)) ("The quick brown fox jumps over the lazy dog.n"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) (4))) ("Dear"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xreadline)) (100))) (" Johnn"))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xread)) (300))) (("XXX".mul 100)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xfp).xread)) (1000))) (("YYY".mul 100)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xopen)) ("ax00b"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xopen)) ("ax00b"))
                xtest_open_default_encoding.write
                  [xself]
                    memory > xcurrent_locale_encoding
                    memory > xfp
                    memory > xold_environ
                    seq > @
                      (((unsupported)) 0)
                        xold_environ.write (((xdict)) (((xos).xenviron)))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xkey)) ((((unsupported)) ("LC_ALL") ("LANG") ("LC_CTYPE"))))
                              (((unsupported)) ((xkey)) (((xos).xenviron))).if
                                (((unsupported)) ((((unsupported)) ((((unsupported)) (((xos).xenviron)) ((xkey)))))))
                            bogusForceDataize.write ((((xself).xwrite_testfile)) 0)
                            xcurrent_locale_encoding.write ((((xlocale).xgetpreferredencoding)) (FALSE))
                            xfp.write (((xopen)) ((xTESTFN)) ("w"))
                            (((unsupported)) ((xfp)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xfp).xencoding)) ((xcurrent_locale_encoding)))
                          seq
                            bogusForceDataize.write (((((xos).xenviron).xclear)) 0)
                            bogusForceDataize.write (((((xos).xenviron).xupdate)) ((xold_environ)))
                xtest_open_non_inheritable.write
                  [xself]
                    memory > xfileobj
                    seq > @
                      seq
                        xfileobj.write (((xopen)) ((x__file__)))
                        (((unsupported)) ((xfileobj)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xos).xget_inheritable)) (((((xfileobj).xfileno)) 0)))))
                xtest_ord.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) (" "))) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("A"))) (65))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("a"))) (97))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("x80"))) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("xff"))) (255))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) (" "))) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("A"))) (65))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("a"))) (97))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("x80"))) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("xff"))) (255))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ((((xchr)) (((xsys).xmaxunicode)))))) (((xsys).xmaxunicode)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xord)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ((((xchr)) (1114111))))) (1114111))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U0000FFFF"))) (65535))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U00010000"))) (65536))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U00010001"))) (65537))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U000FFFFE"))) (1048574))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U000FFFFF"))) (1048575))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U00100000"))) (1048576))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U00100001"))) (1048577))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U0010FFFE"))) (1114110))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xord)) ("U0010FFFF"))) (1114111))
                xtest_pow.write
                  [xself]
                    memory > xtwopow
                    memory > xfifth_power
                    memory > xmod10
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (0) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (0) (1))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (1) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (1) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (2) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (2) (10))) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (2) (20))) ((1024.mul 1024)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) (2) (30))) (((1024.mul 1024).mul 1024)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((2.neg)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((2.neg)) (1))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((2.neg)) (2))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((2.neg)) (3))) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (1))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (1))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (10))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (20))) (((((unsupported)) 0).mul (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((((unsupported)) 0)) (30))) ((((((unsupported)) 0).mul (((unsupported)) 0)).mul (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) (((((unsupported)) 0).neg)) (0))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) (((((unsupported)) 0).neg)) (1))) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) (((((unsupported)) 0).neg)) (2))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) (((((unsupported)) 0).neg)) (3))) (((((unsupported)) 0).neg)))
                        (((unsupported)) ((xx)) ((((unsupported)) (2) (2.0))))
                          (((unsupported)) ((xy)) ((((unsupported)) (10) (10.0))))
                            (((unsupported)) ((xz)) ((((unsupported)) (1000) (1000.0))))
                              (((((xisinstance)) ((xx)) ((xfloat))).or (((xisinstance)) ((xy)) ((xfloat)))).or (((xisinstance)) ((xz)) ((xfloat)))).if
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpow)) ((xx)) ((xy)) ((xz)))
                                bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((xx)) ((xy)) ((xz)))) (24.0))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((1.neg)) (0.5))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)) ((((xpow)) ((1.neg)) ((1.div 3)))) ((0.5.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xpow)) ((1.neg)) ((2.neg)) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xpow)) (1) (2) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpow)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpow)) (0) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpow)) (2) (4))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpow)) (5) (2) (14))) (11))
                        xtwopow.write (((unsupported)) ((xpartial)) ((xpow)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xtwopow)) (5))) (32))
                        xfifth_power.write (((unsupported)) ((xpartial)) ((xpow)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xfifth_power)) (2))) (32))
                        xmod10.write (((unsupported)) ((xpartial)) ((xpow)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmod10)) (2) (6))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmod10)) (6) (2))) (4))
                xtest_input.write
                  [xself]
                    memory > xsavestdout
                    memory > xfp
                    memory > xsavestdin
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_testfile)) 0)
                        xfp.write (((xopen)) ((xTESTFN)) ("r"))
                        xsavestdin.write ((xsys).xstdin)
                        xsavestdout.write ((xsys).xstdout)
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) (((xsys).xstdin)) ((xfp)))
                            (((unsupported)) (((xsys).xstdout)) ((((xBitBucket)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xinput)) 0)) ("1+1"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xinput)) 0)) ("The quick brown fox jumps over the lazy dog."))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xinput)) ("testingn"))) ("Dear John"))
                            (((unsupported)) (((xsys).xstdout)) ((xsavestdout)))
                            bogusForceDataize.write (((((xsys).xstdin).xclose)) 0)
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xinput)))
                            (((unsupported)) (((xsys).xstdout)) ((((xBitBucket)) 0)))
                            (((unsupported)) (((xsys).xstdin)) (((((xio).xStringIO)) ("NULL0"))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xinput)) (42) (42))
                            (((unsupported)) (((xsys).xstdin)) (((((xio).xStringIO)) ("    'whitespace'"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xinput)) 0)) ("    'whitespace'"))
                            (((unsupported)) (((xsys).xstdin)) (((((xio).xStringIO)) 0)))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xEOFError)) ((xinput)))
                            (((unsupported)) ((((unsupported)) (((xsys).xstdout)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xinput)) ("prompt"))
                            (((unsupported)) ((((unsupported)) (((xsys).xstdin)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xinput)) ("prompt"))
                          seq
                            (((unsupported)) (((xsys).xstdin)) ((xsavestdin)))
                            (((unsupported)) (((xsys).xstdout)) ((xsavestdout)))
                            bogusForceDataize.write ((((xfp).xclose)) 0)
                xtest_repr.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (""))) ("''"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (0))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((unsupported)) 0)))) ("()"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((unsupported)) 0)))) ("[]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((unsupported)) 0)))) ("{}"))
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xa).xappend)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xa)))) ("[[...]]"))
                        xa.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xa)) (0))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xa)))) ("{0: {...}}"))
                xtest_round.write
                  [xself]
                    memory > xt
                    memory > x__round__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (0.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) (0.0))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (1.0))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (10.0))) (10.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (1000000000.0))) (1000000000.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((1.0.neg)))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((10.0.neg)))) ((10.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((1000000000.0.neg)))) ((1000000000.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (((((unsupported)) 0).neg)))) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (0.1))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (1.1))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (10.1))) (10.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (1000000000.1))) (1000000000.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((1.1.neg)))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((10.1.neg)))) ((10.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((1000000000.1.neg)))) ((1000000000.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (0.9))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (9.9))) (10.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (999999999.9))) (1000000000.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((0.9.neg)))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((9.9.neg)))) ((10.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((999999999.9.neg)))) ((1000000000.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((8.0.neg)) ((1.neg)))) ((10.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.0.neg)) ((1.neg)))))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.0.neg)) (0))))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.0.neg)) (1))))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (5.5))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (6.5))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((5.5.neg)))) ((6.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((6.5.neg)))) ((6.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (8))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((8.neg)))) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) (0))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.neg)) ((1.neg)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.neg)) (0))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((8.neg)) (1))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xround)) ((8.0.neg)) ((1.neg)))) ((10.0.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xround)))
                        (((unsupported)) 0)
                          x__round__.write
                            [xself]
                              seq > @
                                (((unsupported)) (23))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((((xTestRound)) 0)))) (23))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xround)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xround)) ((((xTestNoRound)) 0)))
                        xt.write (((xTestNoRound)) 0)
                        (((unsupported)) (((xt).x__round__)) ((((unsupported)) ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xround)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xround)) ((xt)) (0))
                xlinux_alpha.write ((((((((xplatform).xsystem)) 0).xstartswith)) ("Linux")).and (((((((xplatform).xmachine)) 0).xstartswith)) ("alpha")))
                xsystem_round_bug.write ((((xround)) (((((unsupported)) 0).add 1))).neq ((((unsupported)) 0).add 1))
                xtest_round_large.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (((((unsupported)) 0).sub 1)))) (((((unsupported)) 0).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((((unsupported)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (((((unsupported)) 0).add 1)))) (((((unsupported)) 0).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (((((unsupported)) 0).add 2)))) (((((unsupported)) 0).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) (((((unsupported)) 0).add 3)))) (((((unsupported)) 0).add 3)))
                xtest_bug_27936.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xx)) ((((unsupported)) (1234) (1234.56) (((((xdecimal).xDecimal)) ("1234.56"))) (((((xfractions).xFraction)) (123456) (100))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xround)) ((xx)) ("None: is there a None literal in the EO language?"))) ((((xround)) ((xx)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xround)) ((xx)) ("None: is there a None literal in the EO language?"))))) ((((xtype)) ((((xround)) ((xx)))))))
                xtest_setattr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xsetattr)) ((xsys)) ("spam") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsys).xspam)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)) ((xsys)) (1) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsetattr)))
                xtest_sum.write
                  [xself]
                    memory > xempty
                    memory > x__getitem__
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) 0)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((xlist)) ((((xrange)) (2) (8))))))) (27))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((xiter)) ((((xlist)) ((((xrange)) (2) (8))))))))) (27))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((xSquares)) (10))))) (285))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((xiter)) ((((xSquares)) (10))))))) (285))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((unsupported)) ((((unsupported)) (1))) ((((unsupported)) (2))) ((((unsupported)) (3))))) ((((unsupported)) 0)))) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xsum)) ((((xrange)) (10))) (1000))) (1045))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xsum)) ((((xrange)) (10))) (1000))) (1045))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((((unsupported)) ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((((unsupported)) ("a") ("b") ("c"))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((((unsupported)) ("a") ("c"))) (""))
                        xvalues.write (((unsupported)) ((((xbytearray)) ("a"))) ((((xbytearray)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((xvalues)) ((((xbytearray)) (""))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((((unsupported)) ((((unsupported)) (1))) ((((unsupported)) (2))) ((((unsupported)) (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) ((((unsupported)) ((((unsupported)) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsum)) (((((unsupported)) ((((unsupported)) (2) (3)))).mul 2)) ((((unsupported)) (2) (3))))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xindex]
                              seq > @
                                (((unsupported)) ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xsum)) ((((xBadSeq)) 0)))
                        xempty.write (((unsupported)) 0)
                        bogusForceDataize.write (((xsum)) ((((unsupported)) ((((unsupported)) ((xx)))) ((xx)) ((((xrange)) (10))))) ((xempty)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xempty)) ((((unsupported)) 0)))
                xtest_type.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) (""))) ((((xtype)) ("123"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xtype)) (""))) ((((xtype)) ((((unsupported)) 0)))))
                xget_vars_f0.write
                  []
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xvars)) 0)))
                xget_vars_f2.write
                  []
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xBuiltinTest).xget_vars_f0)) 0)
                        xa.write 1
                        xb.write 2
                        (((unsupported)) ((((xvars)) 0)))
                (((unsupported)) ((xobject)))
                  seq
                    xgetDict.write
                      [xself]
                        seq > @
                          (((unsupported)) ((((unsupported)) ("a") (2))))
                    x__dict__.write (((unsupported)) ((xproperty)) ((xgetDict)))
                xtest_vars.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xvars)) 0)))) ((((xset)) ((((xdir)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((((xvars)) ((xsys)))))) ((((xset)) ((((xdir)) ((xsys)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xget_vars_f0)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xself).xget_vars_f2)) 0)) ((((unsupported)) ("a") (1) ("b") (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xvars)) (42) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xvars)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xvars)) (((((xself).xC_get_vars)) 0)))) ((((unsupported)) ("a") (2))))
                xtest_zip.write
                  [xself]
                    memory > xt
                    memory > x__getitem__
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) (1) (2) (3))
                        xb.write (((unsupported)) (4) (5) (6))
                        xt.write (((unsupported)) ((((unsupported)) (1) (4))) ((((unsupported)) (2) (5))) ((((unsupported)) (3) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((xa)) ((xb)))))) ((xt)))
                        xb.write (((unsupported)) (4) (5) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((xa)) ((xb)))))) ((xt)))
                        xb.write (((unsupported)) (4) (5) (6) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((xa)) ((xb)))))) ((xt)))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xi]
                              seq > @
                                seq
                                  (((xi).less 0).or ((xi).greater 2)).if
                                    (((unsupported)) ((xIndexError)))
                                  (((unsupported)) (((xi).add 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((xa)) ((((xI)) 0)))))) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) 0)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((((unsupported)) ((((unsupported)) 0)))))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) ((xa)) ((((xG)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xzip)) ((xa)) ((((xTestFailingIter)) 0)))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xi]
                              seq > @
                                ((xi).eq 5).if
                                  (((unsupported)) ((xIndexError)))
                                  (((unsupported)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((((xSequenceWithoutALength)) 0)) ((((xrange)) ((((unsupported)) (2) (30))))))))) ((((xlist)) ((((xenumerate)) ((((xrange)) (5))))))))
                        (((unsupported)) 0)
                          x__getitem__.write
                            [xself xi]
                              seq > @
                                ((xi).eq 5).if
                                  (((unsupported)) ((xValueError)))
                                  (((unsupported)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xlist)) ((((xzip)) ((((xBadSeq)) 0)) ((((xBadSeq)) 0)))))
                xtest_zip_pickle.write
                  [xself]
                    memory > xt
                    memory > xz1
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) (1) (2) (3))
                        xb.write (((unsupported)) (4) (5) (6))
                        xt.write (((unsupported)) ((((unsupported)) (1) (4))) ((((unsupported)) (2) (5))) ((((unsupported)) (3) (6))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xz1.write (((xzip)) ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xcheck_iter_pickle)) ((xz1)) ((xt)) ((xproto)))
                xtest_zip_bad_iterable.write
                  [xself]
                    memory > xexception
                    memory > x__iter__
                    seq > @
                      seq
                        xexception.write (((xTypeError)) 0)
                        (((unsupported)) 0)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xexception)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xzip)) ((((xBadIterable)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcm).xexception)) ((xexception)))
                xtest_zip_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xzip)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
                xtest_format.write
                  [xself]
                    memory > x__format__
                    memory > xclasses_new
                    memory > xclass_test
                    memory > xobj
                    memory > xx
                    memory > xempty_format_spec
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) (3) (""))) ("3"))
                        xclasses_new.write
                          []
                            memory > x__format__
                            memory > x__init__
                            seq > @
                              seq
                                (((unsupported)) ((xobject)))
                                  seq
                                    x__init__.write
                                      [xself xx]
                                        seq > @
                                          (((unsupported)) (((xself).xx)) ((xx)))
                                    x__format__.write
                                      [xself xformat_spec]
                                        seq > @
                                          (((unsupported)) (((((xstr)) (((xself).xx))).add (xformat_spec))))
                                (((unsupported)) ((xA)))
                                (((unsupported)) ((xobject)))
                                (((unsupported)) ((xSimple)))
                                  seq
                                    x__init__.write
                                      [xself xx]
                                        seq > @
                                          (((unsupported)) (((xself).xx)) ((xx)))
                                    x__format__.write
                                      [xself xformat_spec]
                                        seq > @
                                          (((unsupported)) (((((xstr)) (((xself).xx))).add (xformat_spec))))
                                (((unsupported)) ((xDerivedFromSimple)))
                                (((unsupported)) ((((unsupported)) ((xA)) ((xDerivedFromA)) ((xDerivedFromSimple)) ((xDerivedFromSimple2)))))
                        xclass_test.write
                          [xA xDerivedFromA xDerivedFromSimple xDerivedFromSimple2]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xA)) (3))) ("spec"))) ("3spec"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDerivedFromA)) (4))) ("spec"))) ("4spec"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDerivedFromSimple)) (5))) ("abc"))) ("5abc"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xDerivedFromSimple2)) (10))) ("abcdef"))) ("10abcdef"))
                        bogusForceDataize.write (((xclass_test)) ((((unsupported)) ((((xclasses_new)) 0)))))
                        xempty_format_spec.write
                          [xvalue]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((xvalue)) (""))) ((((xstr)) ((xvalue)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((xvalue)))) ((((xstr)) ((xvalue)))))
                        bogusForceDataize.write (((xempty_format_spec)) ((((unsupported)) (17) (13))))
                        bogusForceDataize.write (((xempty_format_spec)) (1.0))
                        bogusForceDataize.write (((xempty_format_spec)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xempty_format_spec)) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write (((xempty_format_spec)) ((((unsupported)) 0)))
                        bogusForceDataize.write (((xempty_format_spec)) (((((unsupported)) 0).neg)))
                        bogusForceDataize.write (((xempty_format_spec)) ((xobject)))
                        bogusForceDataize.write (((xempty_format_spec)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          x__format__.write
                            [xself xformat_spec]
                              seq > @
                                (((unsupported)) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xformat)) ((((xBadFormatResult)) 0)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xformat)) ((((xobject)) 0)) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xformat)) ((((xobject)) 0)) ((((xobject)) 0)))
                        xx.write ((((((xobject)) 0).x__format__)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xx).xstartswith)) ("<object object at"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xobject)) 0).x__format__)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xobject)) 0).x__format__)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xobject)) 0).x__format__)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                          x__format__.write
                            [xself xfmt_str]
                              seq > @
                                (((unsupported)) ((((xformat)) ("") ((xfmt_str)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xA)) 0)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xA)) 0)) (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((((xA)) 0)) ("s"))) (""))
                        (((unsupported)) 0)
                        (((unsupported)) ((xobject)))
                        (((unsupported)) ((xcls)) ((((unsupported)) ((xobject)) ((xB)) ((xC)))))
                          seq
                            xobj.write (((xcls)) 0)
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((xobj)))) ((((xstr)) ((xobj)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) ((xobj)) (""))) ((((xstr)) ((xobj)))))
                            (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) (("b%sb".mod ((((xre).xescape)) (((xcls).x__name__))))))))
                              bogusForceDataize.write (((xformat)) ((xobj)) ("s"))
                        (((unsupported)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xformat)) (0) ((((xDerivedFromStr)) ("10"))))) ("         0"))
                xtest_bin.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) (0))) ("0b0"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) (1))) ("0b1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) ((1.neg)))) ("-0b1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) ((((unsupported)) (2) (65))))) (("0b1".add ("0".mul 65))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) (((((unsupported)) (2) (65)).sub 1)))) (("0b".add ("1".mul 65))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) (((((unsupported)) (2) (65)).neg)))) (("-0b1".add ("0".mul 65))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xbin)) ((((((unsupported)) (2) (65)).sub 1).neg)))) (("-0b".add ("1".mul 65))))
                xtest_bytearray_translate.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xbytearray)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xx).xtranslate)) ("1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xx).xtranslate)) (("1".mul 256)) (1))
                xtest_bytearray_extend_error.write
                  [xself]
                    memory > xarray
                    memory > xbad_iter
                    seq > @
                      seq
                        xarray.write (((xbytearray)) 0)
                        xbad_iter.write (((xmap)) ((xint)) ("X"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xarray).xextend)) ((xbad_iter)))
                xtest_construct_singletons.write
                  [xself]
                    memory > xtp
                    seq > @
                      (((unsupported)) ((xconst)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((xEllipsis)) ((xNotImplemented)))))
                        seq
                          xtp.write (((xtype)) ((xconst)))
                          bogusForceDataize.write ((((xself).xassertIs)) ((((xtp)) 0)) ((xconst)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtp)) (1) (2))
                          (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xtp)) (1) (2))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xresources)) ((((xExitStack)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xself).xresources).xclose)))
                        (((unsupported)) (((xself).xenv)) ((((((xself).xresources).xenter_context)) ((((xEnvironmentVarGuard)) 0)))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))))))
                        bogusForceDataize.write (((((xself).xresources).xenter_context)) ((((xswap_attr)) ((xsys)) ("breakpointhook") (((xsys).x__breakpointhook__)))))
                xtest_breakpoint.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((xpatch)) ("pdb.set_trace"))) ((xmock)))
                          bogusForceDataize.write (((xbreakpoint)) 0)
                        bogusForceDataize.write ((((xmock).xassert_called_once)) 0)
                xtest_breakpoint_with_breakpointhook_set.write
                  [xself]
                    memory > xmy_breakpointhook
                    seq > @
                      seq
                        xmy_breakpointhook.write (((xMagicMock)) 0)
                        (((unsupported)) (((xsys).xbreakpointhook)) ((xmy_breakpointhook)))
                        bogusForceDataize.write (((xbreakpoint)) 0)
                        bogusForceDataize.write ((((xmy_breakpointhook).xassert_called_once_with)) 0)
                xtest_breakpoint_with_breakpointhook_reset.write
                  [xself]
                    memory > xmy_breakpointhook
                    seq > @
                      seq
                        xmy_breakpointhook.write (((xMagicMock)) 0)
                        (((unsupported)) (((xsys).xbreakpointhook)) ((xmy_breakpointhook)))
                        bogusForceDataize.write (((xbreakpoint)) 0)
                        bogusForceDataize.write ((((xmy_breakpointhook).xassert_called_once_with)) 0)
                        (((unsupported)) (((xsys).xbreakpointhook)) (((xsys).x__breakpointhook__)))
                        (((unsupported)) ((((xpatch)) ("pdb.set_trace"))) ((xmock)))
                          seq
                            bogusForceDataize.write (((xbreakpoint)) 0)
                            bogusForceDataize.write ((((xmock).xassert_called_once_with)) 0)
                        bogusForceDataize.write ((((xmy_breakpointhook).xassert_called_once_with)) 0)
                xtest_breakpoint_with_args_and_keywords.write
                  [xself]
                    memory > xmy_breakpointhook
                    seq > @
                      seq
                        xmy_breakpointhook.write (((xMagicMock)) 0)
                        (((unsupported)) (((xsys).xbreakpointhook)) ((xmy_breakpointhook)))
                        (((unsupported)) ((xbreakpoint)) (1) (2) (3) (4) (5))
                        (((unsupported)) (((xmy_breakpointhook).xassert_called_once_with)) (1) (2) (3) (4) (5))
                xtest_breakpoint_with_passthru_error.write
                  [xself]
                    memory > xmy_breakpointhook
                    seq > @
                      seq
                        xmy_breakpointhook.write
                          []
                            seq > @
                        (((unsupported)) (((xsys).xbreakpointhook)) ((xmy_breakpointhook)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xbreakpoint)) (1) (2) (3) (4) (5))
                xtest_envar_good_path_builtin.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) ("int"))
                        (((unsupported)) ((((xpatch)) ("builtins.int"))) ((xmock)))
                          seq
                            bogusForceDataize.write (((xbreakpoint)) ("7"))
                            bogusForceDataize.write ((((xmock).xassert_called_once_with)) ("7"))
                xtest_envar_good_path_other.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) ("sys.exit"))
                        (((unsupported)) ((((xpatch)) ("sys.exit"))) ((xmock)))
                          seq
                            bogusForceDataize.write (((xbreakpoint)) 0)
                            bogusForceDataize.write ((((xmock).xassert_called_once_with)) 0)
                xtest_envar_good_path_noop_0.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) ("0"))
                        (((unsupported)) ((((xpatch)) ("pdb.set_trace"))) ((xmock)))
                          seq
                            bogusForceDataize.write (((xbreakpoint)) 0)
                            bogusForceDataize.write ((((xmock).xassert_not_called)) 0)
                xtest_envar_good_path_empty_string.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) (""))
                        (((unsupported)) ((((xpatch)) ("pdb.set_trace"))) ((xmock)))
                          seq
                            bogusForceDataize.write (((xbreakpoint)) 0)
                            bogusForceDataize.write ((((xmock).xassert_called_once_with)) 0)
                xtest_envar_unimportable.write
                  [xself]
                    memory > xmock
                    memory > xw
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xenvar)) ((((unsupported)) (".") ("..") (".foo") ("foo.") (".int") ("int.") (".foo.bar") ("..foo.bar") ("/./") ("nosuchbuiltin") ("nosuchmodule.nosuchcallable"))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xenvar)))))
                            seq
                              (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) ((xenvar)))
                              xmock.write (((((xself).xresources).xenter_context)) ((((xpatch)) ("pdb.set_trace"))))
                              xw.write (((((xself).xresources).xenter_context)) ((((unsupported)) ((xcheck_warnings)) (TRUE))))
                              bogusForceDataize.write (((xbreakpoint)) 0)
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xw).xmessage)))) ("Ignoring unimportable $PYTHONBREAKPOINT: \"{envar}\""))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xw).xcategory)) ((xRuntimeWarning)))
                              bogusForceDataize.write ((((xmock).xassert_not_called)) 0)
                xtest_envar_ignored_when_hook_is_set.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) (((xself).xenv)) ("PYTHONBREAKPOINT"))) ("sys.exit"))
                        (((unsupported)) ((((xpatch)) ("sys.exit"))) ((xmock)))
                          seq
                            (((unsupported)) (((xsys).xbreakpointhook)) ((xint)))
                            bogusForceDataize.write (((xbreakpoint)) 0)
                            bogusForceDataize.write ((((xmock).xassert_not_called)) 0)
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((xpty)) ("the pty and signal modules must be available"))))
              seq
                (((unsupported)) 0)
                xhandle_sighup.write
                  [xsignum xframe]
                    seq > @
                      (((unsupported)) 0)
                xrun_child.write
                  [xself xchild xterminal_input]
                    memory > xold_sighup
                    seq > @
                      seq
                        xold_sighup.write ((((xsignal).xsignal)) (((xsignal).xSIGHUP)) (((xself).xhandle_sighup)))
                        (((unsupported)) 0)
                          (((unsupported)) (((((xself).x_run_child)) ((xchild)) ((xterminal_input)))))
                          bogusForceDataize.write ((((xsignal).xsignal)) (((xsignal).xSIGHUP)) ((xold_sighup)))
                x_run_child.write
                  [xself xchild xterminal_input]
                    memory > xchild_output
                    memory > xlines
                    memory > xchunk
                    memory > xline
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) (((((xos).xpipe)) 0)))
                        (((unsupported)) ((((unsupported)) ((xOSError)) ((xAttributeError)))))
                          (((unsupported)) ((((unsupported)) ((xpid)) ((xfd)))) (((((xpty).xfork)) 0)))
                          seq
                            bogusForceDataize.write ((((xos).xclose)) ((xr)))
                            bogusForceDataize.write ((((xos).xclose)) ((xw)))
                            bogusForceDataize.write ((((xself).xskipTest)) (((("pty.fork() raised {}".xformat)) ((xe)))))
                            (((unsupported)) 0)
                        ((xpid).eq 0).if
                          (((unsupported)) 0)
                            seq
                              bogusForceDataize.write ((((xsignal).xalarm)) (2))
                              bogusForceDataize.write ((((xos).xclose)) ((xr)))
                              (((unsupported)) ((((xopen)) ((xw)) ("w"))) ((xwpipe)))
                                bogusForceDataize.write (((xchild)) ((xwpipe)))
                            bogusForceDataize.write ((((xtraceback).xprint_exc)) 0)
                            bogusForceDataize.write ((((xos).x_exit)) (0))
                        bogusForceDataize.write ((((xos).xclose)) ((xw)))
                        bogusForceDataize.write ((((xos).xwrite)) ((xfd)) ((xterminal_input)))
                        (((unsupported)) ((((xopen)) ((xr)) ("r"))) ((xrpipe)))
                          seq
                            xlines.write (((unsupported)) 0)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xline.write (((((((xrpipe).xreadline)) 0).xstrip)) 0)
                                    ((xline).eq "").if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xlines).xappend)) ((xline)))
                        ((((xlen)) ((xlines))).neq 2).if
                          seq
                            xchild_output.write (((xbytearray)) 0)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)) ((xOSError)))
                                      xchunk.write ((((xos).xread)) ((xfd)) (3000))
                                      (((unsupported)) 0)
                                    ((xchunk).not).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write ((((xchild_output).xextend)) ((xchunk)))
                            bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                            xchild_output.write ((((xchild_output).xdecode)) ("ascii") ("ignore"))
                            bogusForceDataize.write ((((xself).xfail)) (("got %d lines in pipe but expected 2, child output was:n%s".mod (((unsupported)) ((((xlen)) ((xlines)))) ((xchild_output))))))
                        bogusForceDataize.write ((((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xos).xwaitpid)) ((xpid)) (0))
                        (((unsupported)) ((xlines)))
                xcheck_input_tty.write
                  [xself xprompt xterminal_input xstdio_encoding]
                    memory > xchild
                    memory > xexpected
                    memory > xinput_result
                    memory > xlines
                    seq > @
                      (((unsupported)) 0)
                        (((((((xsys).xstdin).xisatty)) 0).not).or ((((((xsys).xstdout).xisatty)) 0).not)).if
                          bogusForceDataize.write ((((xself).xskipTest)) ("stdin and stdout must be ttys"))
                        xchild.write
                          [xwpipe]
                            seq > @
                              seq
                                (xstdio_encoding).if
                                  seq
                                    (((unsupported)) (((xsys).xstdin)) ((((unsupported)) (((xio).xTextIOWrapper)) ((((((xsys).xstdin).xdetach)) 0)) ((xstdio_encoding)) ("surrogateescape"))))
                                    (((unsupported)) (((xsys).xstdout)) ((((unsupported)) (((xio).xTextIOWrapper)) ((((((xsys).xstdout).xdetach)) 0)) ((xstdio_encoding)) ("replace"))))
                                (((unsupported)) ((xprint)) ("tty =") (((((((xsys).xstdin).xisatty)) 0).and (((((xsys).xstdout).xisatty)) 0))) ((xwpipe)))
                                (((unsupported)) ((xprint)) ((((xascii)) ((((xinput)) ((xprompt)))))) ((xwpipe)))
                        xlines.write ((((xself).xrun_child)) ((xchild)) (((xterminal_input).add "rn")))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ((xlines)) (0))) ((((unsupported)) ("tty = True") ("tty = False"))))
                        ((((unsupported)) ((xlines)) (0)).neq "tty = True").if
                          bogusForceDataize.write ((((xself).xskipTest)) ("standard IO in should have been a tty"))
                        xinput_result.write (((xeval)) ((((unsupported)) ((xlines)) (1))))
                        (xstdio_encoding).if
                          xexpected.write ((((xterminal_input).xdecode)) ((xstdio_encoding)) ("surrogateescape"))
                          xexpected.write ((((xterminal_input).xdecode)) ((((xsys).xstdin).xencoding)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xinput_result)) ((xexpected)))
                xtest_input_tty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_input_tty)) ("prompt") ("quux"))
                xtest_input_tty_non_ascii.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_input_tty)) ("prompté") ("quuxxe9") ("utf-8"))
                xtest_input_tty_non_ascii_unicode_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_input_tty)) ("prompté") ("quuxxe9") ("ascii"))
                xtest_input_no_stdout_fileno.write
                  [xself]
                    memory > xchild
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xchild.write
                          [xwpipe]
                            seq > @
                              seq
                                (((unsupported)) ((xprint)) ("stdin.isatty():") ((((((xsys).xstdin).xisatty)) 0)) ((xwpipe)))
                                (((unsupported)) (((xsys).xstdout)) (((((xio).xStringIO)) 0)))
                                bogusForceDataize.write (((xinput)) ("prompt"))
                                (((unsupported)) ((xprint)) ("captured:") ((((xascii)) ((((((xsys).xstdout).xgetvalue)) 0)))) ((xwpipe)))
                        xlines.write ((((xself).xrun_child)) ((xchild)) ("quuxr"))
                        xexpected.write (((unsupported)) ("stdin.isatty(): True") ("captured: 'prompt'"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)) ((xlines)) ((xexpected)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xcopy
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)) ((((xrange)) (100))))
                        xcopy.write (((unsupported)) ((xdata)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xcopy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((xsorted)) ((xcopy)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata)) ((xcopy)))
                        bogusForceDataize.write ((((xdata).xreverse)) 0)
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xcopy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) ((xsorted)) ((xcopy)) ((((unsupported)) (((xx).neg)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata)) ((xcopy)))
                        bogusForceDataize.write ((((xrandom).xshuffle)) ((xcopy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xdata)) ((((unsupported)) ((xsorted)) ((xcopy)) (1))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xdata)) ((xcopy)))
                xtest_bad_arguments.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xsorted)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xsorted)) ((((unsupported)) 0)))
                        (((unsupported)) ((xsorted)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xsorted)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))
                xtest_inputtypes.write
                  [xself]
                    memory > xs
                    memory > xtypes
                    seq > @
                      seq
                        xs.write "abracadabra"
                        xtypes.write (((unsupported)) ((xlist)) ((xtuple)) ((xstr)))
                        (((unsupported)) ((xT)) ((xtypes)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((xs)))) ((((xsorted)) ((((xT)) ((xs)))))))
                        xs.write ((("".xjoin)) ((((xset)) ((xs)))))
                        xtypes.write (((unsupported)) ((xstr)) ((xset)) ((xfrozenset)) ((xlist)) ((xtuple)) (((xdict).xfromkeys)))
                        (((unsupported)) ((xT)) ((xtypes)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xsorted)) ((xs)))) ((((xsorted)) ((((xT)) ((xs)))))))
                xtest_baddecorator.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((("The quick Brown fox Jumped over The lazy Dog".xsplit)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xsorted)) ((xdata)) ("None: is there a None literal in the EO language?") ((((unsupported)) (0))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_cleanup.write
                [xself]
                  memory > xcode
                  seq > @
                    seq
                      xcode.write (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((unsupported)) ((xassert_python_ok)) ("-c") ((xcode)) ("ascii"))))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("before") ("after"))) ((((((((xout).xdecode)) 0).xsplitlines)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_new_type.write
                  [xself]
                    memory > xx
                    memory > xham
                    memory > xC
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__bases__)) ((((unsupported)) ((xobject)))))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xA).x__base__)) ((xobject)))
                        xx.write (((xA)) 0)
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((xA)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).x__class__)) ((xA)))
                        (((unsupported)) 0)
                          xham.write
                            [xself]
                              seq > @
                                (((unsupported)) (("ham%d".mod (xself))))
                        xC.write (((xtype)) ("C") ((((unsupported)) ((xB)) ((xint)))) ((((unsupported)) ("spam") ((((unsupported)) (("spam%s".mod (xself))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__name__)) ("C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__qualname__)) ("C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__bases__)) ((((unsupported)) ((xB)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xC).x__base__)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("spam") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("ham") (((xC).x__dict__)))
                        xx.write (((xC)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xx)) (42))
                        bogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xx)))) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xx).x__class__)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xham)) 0)) ("ham42"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xspam)) 0)) ("spam42"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xto_bytes)) (2) ("little"))) ("x2ax00"))
                xtest_type_nokwargs.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xtype)) ("a") ((((unsupported)) 0)) ((((unsupported)) 0)) (5))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xtype)) ("a") ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_type_name.write
                  [xself]
                    memory > xC
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)) ((xname)) ((((unsupported)) ("A") ("xc4") ("U0001f40d") ("B.A") ("42") (""))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)))))
                            seq
                              xA.write (((xtype)) ((xname)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ((xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ((xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__module__)) ((x__name__)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write (((xtype)) ("Ax00B") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write (((xtype)) ("AudcdcB") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        xC.write (((xtype)) ("C") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) ((xname)) ((((unsupported)) ("A") ("xc4") ("U0001f40d") ("B.A") ("42") (""))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)))))
                            seq
                              (((unsupported)) (((xC).x__name__)) ((xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__name__)) ((xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__qualname__)) ("C"))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__module__)) ((x__name__)))
                        xA.write (((xtype)) ("C") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xA).x__name__)) ("Ax00B"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("C"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          (((unsupported)) (((xA).x__name__)) ("AudcdcB"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("C"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xA).x__name__)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("C"))
                xtest_type_qualname.write
                  [xself]
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__qualname__") ("B.C"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ("B.C"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__module__)) ((x__name__)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__qualname__") ("B"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ("B.C"))
                        (((unsupported)) (((xA).x__qualname__)) ("D.E"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__name__)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ("D.E"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) (((xA).x__qualname__)) ("B"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__qualname__)) ("D.E"))
                xtest_type_doc.write
                  [xself]
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)) ((xdoc)) ((((unsupported)) ("x") ("xc4") ("U0001f40d") ("xx00y") ("x") (42) ("None: is there a None literal in the EO language?"))))
                          seq
                            xA.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__doc__") ((xdoc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__doc__)) ((xdoc)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeEncodeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__doc__") ("xudcdcy"))))
                        xA.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__doc__)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xdoc)) ((((unsupported)) ("x") ("xc4") ("U0001f40d") ("xx00y") ("xudcdcy") ("x") (42) ("None: is there a None literal in the EO language?"))))
                          seq
                            (((unsupported)) (((xA).x__doc__)) ((xdoc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__doc__)) ((xdoc)))
                xtest_bad_args.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) (((((xtypes).xMappingProxyType)) ((((unsupported)) 0)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ("None: is there a None literal in the EO language?"))) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ((xbool)))) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ((xint)) ((xstr)))) ((((unsupported)) 0)))
                xtest_bad_slots.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ("x"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ((xint)))) ((((unsupported)) ("__slots__") ("x"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") (""))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ("42"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ("xx00y"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ("x") ("x") (0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ((((unsupported)) ("__dict__") ("__dict__"))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) 0)) ((((unsupported)) ("__slots__") ((((unsupported)) ("__weakref__") ("__weakref__"))))))
                        (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ((xB)))) ((((unsupported)) ("__slots__") ("__dict__"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xtype)) ("A") ((((unsupported)) ((xB)))) ((((unsupported)) ("__slots__") ("__weakref__"))))
                xtest_namespace_order.write
                  [xself]
                    memory > xexpected
                    memory > xC
                    memory > xod
                    seq > @
                      seq
                        xod.write ((((xcollections).xOrderedDict)) ((((unsupported)) ((((unsupported)) ("a") (1))) ((((unsupported)) ("b") (2))))))
                        bogusForceDataize.write ((((xod).xmove_to_end)) ("a"))
                        xexpected.write (((xlist)) (((((xod).xitems)) 0)))
                        xC.write (((xtype)) ("C") ((((unsupported)) 0)) ((xod)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((((((xC).x__dict__).xitems)) 0)))) ((((unsupported)) (2))))) ((((unsupported)) ((((unsupported)) ("b") (2))) ((((unsupported)) ("a") (1))))))
            xload_tests.write
              [xloader xtests xpattern]
                seq > @
                  seq
                    (((unsupported)) 0)
                    bogusForceDataize.write ((((xtests).xaddTest)) ((((xDocTestSuite)) ((xbuiltins)))))
                    (((unsupported)) ((xtests)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)