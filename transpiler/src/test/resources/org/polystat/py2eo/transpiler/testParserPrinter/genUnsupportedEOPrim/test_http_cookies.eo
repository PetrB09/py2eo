memory > xk
memory > xAttributeError
memory > xstr
memory > xrange
memory > xCookieTests
memory > xcase
memory > xproto
memory > xMorselTests
memory > xrepr
memory > xcookies
memory > xi
memory > xs
memory > xsorted
memory > xunittest
memory > xrun_doctest
memory > xrun_unittest
memory > xcopy
memory > xpickle
memory > xlist
memory > xval
memory > xv
memory > xdict
memory > xcase_b
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_http_cookies
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_eq
        memory > xtest_extra_spaces
        memory > xtest_pickle
        memory > xtest_illegal_chars
        memory > xtest_samesite_attrs
        memory > xtest_load
        memory > xtest_extended_encode
        memory > xtest_secure_httponly_false_if_not_present
        memory > xtest_setitem
        memory > xtest_invalid_cookies
        memory > xtest_special_attrs
        memory > xtest_setdefault
        memory > xtest_defaults
        memory > xtest_quoted_meta
        memory > xtest_setter
        memory > xtest_set_properties
        memory > xtest_set_secure_httponly_attrs
        memory > xtest_secure_httponly_true_if_present
        memory > xtest_update
        memory > xtest_main
        memory > xtest_repr
        memory > xtest_reserved_keys
        memory > xtest_basic
        memory > xtest_secure_httponly_true_if_have_value
        memory > xtest_comment_quoting
        memory > xtest_copy
        seq > @
          seq
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xcases
                    memory > xC
                    seq > @
                      seq
                        xcases.write (((unsupported)) ((((unsupported)) ("data") ("chips=ahoy; vienna=finger") ("dict") ((((unsupported)) ("chips") ("ahoy") ("vienna") ("finger"))) ("repr") ("<SimpleCookie: chips='ahoy' vienna='finger'>") ("output") ("Set-Cookie: chips=ahoynSet-Cookie: vienna=finger"))) ((((unsupported)) ("data") ((((unsupported)) 0)) ("dict") ((((unsupported)) ("keebler") ("E=mc2; L=\"Loves\"; fudge=012;"))) ("repr") ((((unsupported)) 0)) ("output") ((((unsupported)) 0)))) ((((unsupported)) ("data") ("keebler=E=mc2") ("dict") ((((unsupported)) ("keebler") ("E=mc2"))) ("repr") ("<SimpleCookie: keebler='E=mc2'>") ("output") ("Set-Cookie: keebler=E=mc2"))) ((((unsupported)) ("data") ("key:term=value:term") ("dict") ((((unsupported)) ("key:term") ("value:term"))) ("repr") ("<SimpleCookie: key:term='value:term'>") ("output") ("Set-Cookie: key:term=value:term"))) ((((unsupported)) ("data") ("a=b; c=[; d=r; f=h") ("dict") ((((unsupported)) ("a") ("b") ("c") ("[") ("d") ("r") ("f") ("h"))) ("repr") ("<SimpleCookie: a='b' c='[' d='r' f='h'>") ("output") (((("n".xjoin)) ((((unsupported)) ("Set-Cookie: a=b") ("Set-Cookie: c=[") ("Set-Cookie: d=r") ("Set-Cookie: f=h"))))))))
                        (((unsupported)) ((xcase)) ((xcases)))
                          seq
                            xC.write ((((xcookies).xSimpleCookie)) 0)
                            bogusForceDataize.write ((((xC).xload)) ((((unsupported)) ((xcase)) ("data"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xC)))) ((((unsupported)) ((xcase)) ("repr"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xC).xoutput)) ("n"))) ((((unsupported)) ((xcase)) ("output"))))
                            (((unsupported)) ((((unsupported)) ((xk)) ((xv)))) ((((xsorted)) (((((((unsupported)) ((xcase)) ("dict")).xitems)) 0)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xC)) ((xk))).xvalue)) ((xv)))
                xtest_load.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("Customer=\"WILE_E_COYOTE\"; Version=1; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xC)) ("Customer")).xvalue)) ("WILE_E_COYOTE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("version"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("path"))) ("/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) ((((unsupported)) ("path"))))) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xjs_output)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xjs_output)) ((((unsupported)) ("path"))))) ((((unsupported)) 0)))
                xtest_extended_encode.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        (((unsupported)) ((((unsupported)) ((xC)) ("val"))) ("some,funky;stuff"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) ((((unsupported)) ("val"))))) ((((unsupported)) 0)))
                xtest_special_attrs.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xC).xoutput)) 0).xendswith)) ("GMT"))))
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("Customer=\"W\"; expires=Wed, 01 Jan 2010 00:00:00 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("expires"))) ("Wed, 01 Jan 2010 00:00:00 GMT"))
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("Customer=\"W\"; expires=Wed, 01 Jan 98 00:00:00 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("expires"))) ("Wed, 01 Jan 98 00:00:00 GMT"))
                        xC.write ((((xcookies).xSimpleCookie)) ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("max-age"))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Max-Age=10"))
                xtest_set_secure_httponly_attrs.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("secure"))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("httponly"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; HttpOnly; Secure"))
                xtest_samesite_attrs.write
                  [xself]
                    memory > xC
                    memory > xsamesite_values
                    seq > @
                      seq
                        xsamesite_values.write (((unsupported)) ("Strict") ("Lax") ("strict") ("lax"))
                        (((unsupported)) ((xval)) ((xsamesite_values)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xval)))))
                            seq
                              xC.write ((((xcookies).xSimpleCookie)) ("Customer=\"WILE_E_COYOTE\""))
                              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("samesite"))) ((xval)))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) (("Set-Cookie: Customer=\"WILE_E_COYOTE\"; SameSite=%s".mod (xval))))
                              xC.write ((((xcookies).xSimpleCookie)) 0)
                              bogusForceDataize.write ((((xC).xload)) (("Customer=\"WILL_E_COYOTE\"; SameSite=%s".mod (xval))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("samesite"))) ((xval)))
                xtest_secure_httponly_false_if_not_present.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("eggs=scrambled; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("secure"))))
                xtest_secure_httponly_true_if_present.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("eggs=scrambled; httponly; secure; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("secure"))))
                xtest_secure_httponly_true_if_have_value.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("eggs=scrambled; httponly=foo; secure=bar; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("secure"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("httponly"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("eggs"))) ("secure"))) ("bar"))
                xtest_extra_spaces.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("eggs  =  scrambled  ;  secure  ;  path  =  bar   ; foo=foo   "))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) ("Set-Cookie: eggs=scrambled; Path=bar; SecurernSet-Cookie: foo=foo"))
                xtest_quoted_meta.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ("Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((unsupported)) ((xC)) ("Customer")).xvalue)) ("WILE_E_COYOTE"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("version"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xC)) ("Customer"))) ("path"))) ("/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) ((((unsupported)) ("path"))))) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xjs_output)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xjs_output)) ((((unsupported)) ("path"))))) ((((unsupported)) 0)))
                xtest_invalid_cookies.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        (((unsupported)) ((xs)) ((((unsupported)) ("]foo=x") ("[foo=x") ("blah]foo=x") ("blah[foo=x") ("Set-Cookie: foo=bar") ("Set-Cookie: foo") ("foo=bar; baz") ("baz; foo=bar") ("secure;foo=bar") ("Version=1;foo=bar"))))
                          seq
                            bogusForceDataize.write ((((xC).xload)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xdict)) ((xC)))) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) (""))
                xtest_pickle.write
                  [xself]
                    memory > xC
                    memory > xC1
                    memory > xexpected_output
                    memory > xrawdata
                    seq > @
                      seq
                        xrawdata.write "Customer=\"WILE_E_COYOTE\"; Path=/acme; Version=1"
                        xexpected_output.write ("Set-Cookie: %s".mod (xrawdata))
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        bogusForceDataize.write ((((xC).xload)) ((xrawdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xC).xoutput)) 0)) ((xexpected_output)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xproto)))))
                            seq
                              xC1.write ((((xpickle).xloads)) ((((unsupported)) (((xpickle).xdumps)) ((xC)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) (((((xC1).xoutput)) 0)) ((xexpected_output)))
                xtest_illegal_chars.write
                  [xself]
                    memory > xC
                    memory > xrawdata
                    seq > @
                      seq
                        xrawdata.write "a=b; c,d=e"
                        xC.write ((((xcookies).xSimpleCookie)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xC).xload)) ((xrawdata)))
                xtest_comment_quoting.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write ((((xcookies).xSimpleCookie)) 0)
                        (((unsupported)) ((((unsupported)) ((xc)) ("foo"))) ("N{COPYRIGHT SIGN}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) ((xc)) ("foo"))))) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xc)) ("foo"))) ("comment"))) ("comment N{COPYRIGHT SIGN}"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((unsupported)) ((xc)) ("foo"))))) ((((unsupported)) 0)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_defaults.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xmorsel).xkey)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xmorsel).xvalue)))
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((xmorsel).xcoded_value)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmorsel).xkeys)) 0)) (((((((xcookies).xMorsel).x_reserved).xkeys)) 0)))
                        (((unsupported)) ((((unsupported)) ((xkey)) ((xval)))) (((((xmorsel).xitems)) 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xval)) ("") ((xkey)))
                xtest_reserved_keys.write
                  [xself]
                    memory > xM
                    seq > @
                      seq
                        xM.write ((((xcookies).xMorsel)) 0)
                        (((unsupported)) ((xi)) (((xM).x_reserved)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xM).xisReservedKey)) ((xi)))))
                            (((unsupported)) ((((unsupported)) ((xM)) ((xi)))) (("%s_value".mod (xi))))
                        (((unsupported)) ((xi)) (((xM).x_reserved)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xM)) ((xi)))) (("%s_value".mod (xi))))
                        (((unsupported)) ((xi)) (((("the holy hand grenade".xsplit)) 0)))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xcookies).xCookieError)) (((xM).x__setitem__)) ((xi)) (("%s_value".mod (xi))))
                xtest_setter.write
                  [xself]
                    memory > xexpected_js_output
                    memory > xM
                    seq > @
                      seq
                        xM.write ((((xcookies).xMorsel)) 0)
                        (((unsupported)) ((xi)) (((xM).x_reserved)))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xcookies).xCookieError)) (((xM).xset)) ((xi)) (("%s_value".mod (xi))) (("%s_value".mod (xi))))
                        (((unsupported)) ((xi)) (((("thou cast _the- !holy! ^hand| +*grenade~".xsplit)) 0)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xM)) ("path"))) ("/foo"))
                            bogusForceDataize.write ((((xM).xset)) ((xi)) (("%s_val".mod (xi))) (("%s_coded_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xM).xkey)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xM).xvalue)) (("%s_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xM).xcoded_value)) (("%s_coded_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xM).xoutput)) 0)) (("Set-Cookie: %s=%s; Path=/foo".mod (((unsupported)) ((xi)) (("%s_coded_val".mod (xi)))))))
                            xexpected_js_output.write ((((unsupported)) 0).mod (((unsupported)) ((xi)) (("%s_coded_val".mod (xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xM).xjs_output)) 0)) ((xexpected_js_output)))
                        (((unsupported)) ((xi)) ((((unsupported)) ("foo bar") ("foo@bar"))))
                          bogusForceDataize.write ((((xself).xassertRaises)) (((xcookies).xCookieError)) (((xM).xset)) ((xi)) (("%s_value".mod (xi))) (("%s_value".mod (xi))))
                xtest_set_properties.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xmorsel).xkey)) (""))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xmorsel).xvalue)) (""))
                        (((unsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                          (((unsupported)) (((xmorsel).xcoded_value)) (""))
                xtest_eq.write
                  [xself]
                    memory > xitems
                    memory > xmorsel_b
                    memory > xbase_case
                    memory > xmorsel
                    memory > xcases
                    memory > xattribs
                    memory > xmorsel_a
                    seq > @
                      seq
                        xbase_case.write (((unsupported)) ("key") ("value") ("\"value\""))
                        xattribs.write (((unsupported)) ("path") ("/") ("comment") ("foo") ("domain") ("example.com") ("version") (2))
                        xmorsel_a.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel_a).xupdate)) ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_a).xset)) ((((unsupported)) ((xbase_case)))))
                        xmorsel_b.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel_b).xupdate)) ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_b).xset)) ((((unsupported)) ((xbase_case)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmorsel_a).eq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xmorsel_a).neq (xmorsel_b))))
                        xcases.write (((unsupported)) ((((unsupported)) ("key") ("value") ("mismatch"))) ((((unsupported)) ("key") ("mismatch") ("\"value\""))) ((((unsupported)) ("mismatch") ("value") ("\"value\""))))
                        (((unsupported)) ((xcase_b)) ((xcases)))
                          (((unsupported)) (((((xself).xsubTest)) ((xcase_b)))))
                            seq
                              xmorsel_b.write ((((xcookies).xMorsel)) 0)
                              bogusForceDataize.write ((((xmorsel_b).xupdate)) ((xattribs)))
                              bogusForceDataize.write ((((xmorsel_b).xset)) ((((unsupported)) ((xcase_b)))))
                              bogusForceDataize.write ((((xself).xassertFalse)) (((xmorsel_a).eq (xmorsel_b))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((xmorsel_a).neq (xmorsel_b))))
                        xmorsel_b.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel_b).xupdate)) ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_b).xset)) ((((unsupported)) ((xbase_case)))))
                        (((unsupported)) ((((unsupported)) ((xmorsel_b)) ("comment"))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xmorsel_a).eq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmorsel_a).neq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xcookies).xMorsel)) 0).eq 1)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xcookies).xMorsel)) 0).neq 1)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xcookies).xMorsel)) 0).eq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xcookies).xMorsel)) 0).neq "")))
                        xitems.write (((xlist)) ((((((((xcookies).xMorsel)) 0).xitems)) 0)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xcookies).xMorsel)) 0).eq (xitems))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xcookies).xMorsel)) 0).neq (xitems))))
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xset)) ((((unsupported)) ((xbase_case)))))
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((xattribs)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmorsel).eq (((xdict)) ((xmorsel))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xmorsel).neq (((xdict)) ((xmorsel))))))
                xtest_copy.write
                  [xself]
                    memory > xmorsel_b
                    memory > xmorsel_a
                    seq > @
                      seq
                        xmorsel_a.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel_a).xset)) ("foo") ("bar") ("baz"))
                        bogusForceDataize.write ((((xmorsel_a).xupdate)) ((((unsupported)) ("version") (2) ("comment") ("foo"))))
                        xmorsel_b.write ((((xmorsel_a).xcopy)) 0)
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmorsel_b)) (((xcookies).xMorsel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xmorsel_a)) ((xmorsel_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmorsel_a)) ((xmorsel_b)))
                        xmorsel_b.write ((((xcopy).xcopy)) ((xmorsel_a)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmorsel_b)) (((xcookies).xMorsel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)) ((xmorsel_a)) ((xmorsel_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xmorsel_a)) ((xmorsel_b)))
                xtest_setitem.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("expires"))) (0))
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("Version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("version"))) (2))
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("DOMAIN"))) ("example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcookies).xCookieError)))))
                          (((unsupported)) ((((unsupported)) ((xmorsel)) ("invalid"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("invalid") ((xmorsel)))
                xtest_setdefault.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((((unsupported)) ("domain") ("example.com") ("version") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmorsel).xsetdefault)) ("expires") ("value"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("expires"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmorsel).xsetdefault)) ("Version") (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xmorsel).xsetdefault)) ("DOMAIN") ("value"))) ("example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xmorsel).xsetdefault)) ("invalid") ("value"))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("invalid") ((xmorsel)))
                xtest_update.write
                  [xself]
                    memory > xattribs
                    memory > xmorsel
                    seq > @
                      seq
                        xattribs.write (((unsupported)) ("expires") (1) ("Version") (2) ("DOMAIN") ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((xattribs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("domain"))) ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((((xlist)) (((((xattribs).xitems)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("domain"))) ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((((unsupported)) ((((unsupported)) ((xk)) ((xv)))) ((((unsupported)) ((xk)) ((xv)))) (((((xattribs).xitems)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)) (((((xself).xassertRaises)) (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xmorsel).xupdate)) ((((unsupported)) ("invalid") ("value"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("invalid") ((xmorsel)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xmorsel).xupdate)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xmorsel).xupdate)) (0))
                xtest_pickle.write
                  [xself]
                    memory > xmorsel_b
                    memory > xmorsel_a
                    seq > @
                      seq
                        xmorsel_a.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel_a).xset)) ("foo") ("bar") ("baz"))
                        bogusForceDataize.write ((((xmorsel_a).xupdate)) ((((unsupported)) ("version") (2) ("comment") ("foo"))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xproto)))))
                            seq
                              xmorsel_b.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xmorsel_a)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertIsInstance)) ((xmorsel_b)) (((xcookies).xMorsel)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xmorsel_b)) ((xmorsel_a)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xmorsel_b)))) ((((xstr)) ((xmorsel_a)))))
                xtest_repr.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xmorsel)))) ("<Morsel: None=None>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xmorsel)))) ("Set-Cookie: None=None"))
                        bogusForceDataize.write ((((xmorsel).xset)) ("key") ("val") ("coded_val"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xmorsel)))) ("<Morsel: key=coded_val>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xmorsel)))) ("Set-Cookie: key=coded_val"))
                        bogusForceDataize.write ((((xmorsel).xupdate)) ((((unsupported)) ("path") ("/") ("comment") ("foo") ("domain") ("example.com") ("max-age") (0) ("secure") (0) ("version") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xmorsel)))) ("<Morsel: key=coded_val; Comment=foo; Domain=example.com; Max-Age=0; Path=/; Version=1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xmorsel)))) ("Set-Cookie: key=coded_val; Comment=foo; Domain=example.com; Max-Age=0; Path=/; Version=1"))
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("secure"))) (TRUE))
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("httponly"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xmorsel)))) ("<Morsel: key=coded_val; Comment=foo; Domain=example.com; HttpOnly; Max-Age=0; Path=/; Secure; Version=1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((xmorsel)))) ("Set-Cookie: key=coded_val; Comment=foo; Domain=example.com; HttpOnly; Max-Age=0; Path=/; Secure; Version=1"))
                        xmorsel.write ((((xcookies).xMorsel)) 0)
                        bogusForceDataize.write ((((xmorsel).xset)) ("key") ("val") ("coded_val"))
                        (((unsupported)) ((((unsupported)) ((xmorsel)) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xrepr)) ((xmorsel)))) ("<Morsel: key=coded_val; expires=w+, d+ w+ d+ d+:d+:d+ w+>"))
                        bogusForceDataize.write ((((xself).xassertRegex)) ((((xstr)) ((xmorsel)))) ("Set-Cookie: key=coded_val; expires=w+, d+ w+ d+ d+:d+:d+ w+"))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write (((xrun_unittest)) ((xCookieTests)) ((xMorselTests)))
                    bogusForceDataize.write (((xrun_doctest)) ((xcookies)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)