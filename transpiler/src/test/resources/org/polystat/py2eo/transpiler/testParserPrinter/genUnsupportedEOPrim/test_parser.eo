memory > xassert_python_failure
memory > xwhy
memory > xelt
memory > xrange
memory > xparser
memory > xtuple
memory > xUnicodeEncodeError
memory > xunittest
memory > xcopy
memory > xfilename
memory > xmin
memory > xrc
memory > xc
memory > xpickle
memory > xlist
memory > xstr
memory > xout
memory > xt
memory > xexec
memory > xeval
memory > xbytearray
memory > xl
memory > xproto
memory > xmax
memory > xst
memory > xerr
memory > xx
memory > xoperator
memory > xstruct
memory > xsupport
memory > xsorted
memory > xDeprecationWarning
memory > xchild
memory > xSyntaxError
memory > xn
memory > xmemoryview
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_parser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_import_from_statement
        memory > xtest_async_for_statement
        memory > xtest_var_annot
        memory > xtest_missing_import_source
        memory > xtest_dict_comprehensions
        memory > xtest_a_comma_comma_c
        memory > xtest_set_comprehensions
        memory > xtest_assert
        memory > xtest_await_statement
        memory > xtest_illegal_operator
        memory > xtest_flags_passed
        memory > xtest_if_stmt
        memory > xroundtrip
        memory > xtest_function_defs
        memory > xtest_compile_badunicode
        memory > xtest_nonlocal_statement
        memory > xtest_basic_import_statement
        memory > xtest_invalid_node_id
        memory > xtest_illegal_terminal
        memory > xtest_list_displays
        memory > xtest_illegal_yield_1
        memory > xtest_async_with_statement
        memory > xtest_ParserError_message
        memory > xtest_simple_augmented_assignments
        memory > xtest_named_expressions
        memory > xtest_malformed_global
        memory > xtest_yield_statement
        memory > xcheck_bad_tree
        memory > xtest_simple_assignments
        memory > xtest_relative_imports
        memory > xtest_illegal_encoding
        memory > xtest_compile_suite
        memory > xcheck_suite
        memory > xtest_comparisons
        memory > xtest_class_defs
        memory > xtest_trigger_memory_error
        memory > xtest_compile_error
        memory > xtest_set_displays
        memory > xtest_illegal_yield_2
        memory > xtest_two_args_to_expr
        memory > xtest_position
        memory > xcheck_expr
        memory > xtest_deeply_nested_list
        memory > xtest_sizeof
        memory > xtest_with
        memory > xtest_argument_unpacking
        memory > xtest_expressions
        memory > xtest_pep263
        memory > xtest_junk
        memory > xtest_raise_statement
        memory > xcheck_sizeof
        memory > xtest_issue_9011
        memory > xtest_dict_displays
        memory > x_nested_expression
        memory > xtest_simple_expression
        memory > xtest_extended_unpacking
        memory > xtest_compile_filename
        memory > xtest_compile_expr
        memory > xtest_try_stmt
        memory > xtest_copy_pickle
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xroundtrip.write
                  [xself xf xs]
                    memory > xt
                    memory > xst2
                    memory > xst1
                    seq > @
                      seq
                        xst1.write (((xf)) ((xs)))
                        xt.write ((((xst1).xtotuple)) 0)
                        (((unsupported)) (((xparser).xParserError)))
                          xst2.write ((((xparser).xsequence2st)) ((xt)))
                          bogusForceDataize.write ((((xself).xfail)) (("could not roundtrip %r: %s".mod (((unsupported)) ((xs)) ((xwhy))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xt)) (((((xst2).xtotuple)) 0)) ("could not re-generate syntax tree"))
                xcheck_expr.write
                  [xself xs]
                    seq > @
                      bogusForceDataize.write ((((xself).xroundtrip)) (((xparser).xexpr)) ((xs)))
                xtest_flags_passed.write
                  [xself]
                    memory > xcode
                    memory > xscope
                    memory > xsuite
                    seq > @
                      seq
                        xsuite.write ((((xparser).xsuite)) ("from __future__ import unicode_literals; x = ''"))
                        xcode.write ((((xsuite).xcompile)) 0)
                        xscope.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ((xcode)) ((((unsupported)) 0)) ((xscope)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((((unsupported)) ((xscope)) ("x"))) ((xstr)))
                xcheck_suite.write
                  [xself xs]
                    seq > @
                      bogusForceDataize.write ((((xself).xroundtrip)) (((xparser).xsuite)) ((xs)))
                xtest_yield_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): yield 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): yield"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x += yield"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x = yield 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x = y = yield 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x = yield"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x = y = yield"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): 1 + (yield)*2"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): (yield 1)*2"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): return; yield 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): yield 1; return"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): yield from 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): x = yield from 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): f((yield from 1))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): yield 1; return 1"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f():n    for x in range(30):n        yield xn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f():n    if (yield):n        yield xn"))
                xtest_await_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n await smth()"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n foo = await smth()"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n foo, bar = await smth()"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n (await smth())"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n foo((await smth()))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n await foo(); return 42"))
                xtest_async_with_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n async with 1: pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n async with a as b, c as d: pass"))
                xtest_async_for_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n async for i in (): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("async def f():n async for i, b in (): pass"))
                xtest_nonlocal_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f():n    x = 0n    def g():n        nonlocal xn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f():n    x = y = 0n    def g():n        nonlocal x, yn"))
                xtest_expressions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(1)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[1, 2, 3]"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[x**3 for x in range(20)]"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[x**3 for x in range(20) if x % 3]"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[x**3 for x in range(20) if x % 2 if x % 3]"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("list(x**3 for x in range(20))"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("list(x**3 for x in range(20) if x % 3)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("list(x**3 for x in range(20) if x % 2 if x % 3)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(*args)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(*args, **kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(**kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(key=value)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(key=value, *args)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(key=value, *args, **kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(key=value, **kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(a, b, c, *args)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(a, b, c, *args, **kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(a, b, c, **kw)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(a, *args, keyword=23)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo + bar"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo - bar"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo * bar"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo / bar"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo // bar"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("(foo := 1)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda x: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda *y: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda *y, **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda x, y: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda foo=bar: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda foo=bar, spaz=nifty+spit: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda foo=bar, **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda foo=bar, blaz=blat+2, **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda foo=bar, blaz=blat+2, *y, **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("lambda x, *y, **z: 0"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("(x for x in range(10))"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("foo(x for x in range(10))"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("..."))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("a[...]"))
                xtest_simple_expression.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_suite)) ("a"))
                xtest_simple_assignments.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a = b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a = b = c = d = e"))
                xtest_var_annot.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x: int = 5"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("y: List[T] = []; z: [list] = fun()"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x: tuple = (1, 2)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("d[f()]: int = 42"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("f(d[x]): str = 'abc'"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x.y.z.w: complex = 42j"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x: int"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f():n    x: strn    y: int = 5n"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("class C:n    x: strn    y: int = 5n"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("class C:n    def __init__(self, x: int) -> None:n        self.x: int = xn"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("2+2: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("[]: int = 5") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("x, *y, z: int = range(5)") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("x: int = 1, y = 2") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("u = v: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("False: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("x.False: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("x.y,: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("[0]: int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                          bogusForceDataize.write (((xexec)) ("f(): int") ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_simple_augmented_assignments.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a += b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a -= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a *= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a /= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a //= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a %= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a &= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a |= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a ^= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a <<= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a >>= b"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("a **= b"))
                xtest_function_defs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(**kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(foo=bar): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(foo=bar, *args): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(foo=bar, *args, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(foo=bar, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, *args): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, *args, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, foo=bar): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, foo=bar, *args): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, foo=bar, *args, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, foo=bar, **kw): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@staticmethodndef f(): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@staticmethodn@funcattrs(x, y)ndef f(): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@funcattrs()ndef f(): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a = 5, b): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a, b = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a, b = 5, **kwds): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, a): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, a = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, a = 5, b): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, a, b = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args, a, b = 5, **kwds): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, /): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, /,): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /, c): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /, c = 6): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /, c, *, d): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /, c = 1, *, d): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b, /, c, *, d = 1): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a, b=1, /, c=2, *, d = 3): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a=0, b=1, /, c=2, *, d = 3): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a: int): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(a: int = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*args: list): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(**kwds: dict): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a: int): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f(*, a: int = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def f() -> int: pass"))
                xtest_class_defs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("class foo():pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("class foo(object):pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@class_decoratornclass foo():pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@class_decorator(arg)nclass foo():pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("@decorator1n@decorator2nclass foo():pass"))
                xtest_import_from_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import *"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import dirname"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname,)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import dirname as my_dirname"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname as my_dirname)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname as my_dirname,)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import dirname, basename"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname, basename)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname, basename,)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import dirname as my_dirname, basename"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname as my_dirname, basename)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname as my_dirname, basename,)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import dirname, basename as my_basename"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname, basename as my_basename)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from sys.path import (dirname, basename as my_basename,)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from .bogus import x"))
                xtest_basic_import_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("import sys"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("import sys as system"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("import sys, math"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("import sys as system, math"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("import sys, math as my_math"))
                xtest_relative_imports.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from . import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from .. import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from ... import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from .... import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from .pkg import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from ..pkg import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from ...pkg import name"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("from ....pkg import name"))
                xtest_pep263.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_suite)) ("# -*- coding: iso-8859-1 -*-npassn"))
                xtest_assert.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_suite)) ("assert alo < ahi and blo < bhin"))
                xtest_with.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("with open('x'): passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("with open('x') as f: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("with open('x') as f, open('y') as g: passn"))
                xtest_try_stmt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnexcept: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnfinally: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnexcept A: passnfinally: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnexcept A: passnexcept: passnfinally: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnexcept: passnelse: passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try: passnexcept: passnelse: passnfinally: passn"))
                xtest_if_stmt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if True:n  passnelse:n  passn"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if True:n  passnelif True:n  passnelse:n  passn"))
                xtest_position.write
                  [xself]
                    memory > xst
                    memory > xcode
                    memory > xexpected
                    memory > xwalk
                    seq > @
                      seq
                        xcode.write "def f(x):n    return x + 1"
                        xst.write ((((xparser).xsuite)) ((xcode)))
                        xwalk.write
                          [xtree]
                            memory > xnode_type
                            memory > xnext
                            seq > @
                              seq
                                xnode_type.write (((unsupported)) ((xtree)) (0))
                                xnext.write (((unsupported)) ((xtree)) (1))
                                (((xisinstance)) ((xnext)) ((((unsupported)) ((xtuple)) ((xlist))))).if
                                  (((unsupported)) ((xelt)) ((((unsupported)) ((xtree)) ((((unsupported)) (1))))))
                                    (((unsupported)) ((xx)) ((((xwalk)) ((xelt)))))
                                      (((unsupported)) ((xx)))
                                  (((unsupported)) ((xtree)))
                        xexpected.write (((unsupported)) ((((unsupported)) (1) ("def") (1) (0))) ((((unsupported)) (1) ("f") (1) (4))) ((((unsupported)) (7) ("(") (1) (5))) ((((unsupported)) (1) ("x") (1) (6))) ((((unsupported)) (8) (")") (1) (7))) ((((unsupported)) (11) (":") (1) (8))) ((((unsupported)) (4) ("") (1) (9))) ((((unsupported)) (5) ("") (2) ((1.neg)))) ((((unsupported)) (1) ("return") (2) (4))) ((((unsupported)) (1) ("x") (2) (11))) ((((unsupported)) (14) ("+") (2) (13))) ((((unsupported)) (2) ("1") (2) (15))) ((((unsupported)) (4) ("") (2) (16))) ((((unsupported)) (6) ("") (2) ((1.neg)))) ((((unsupported)) (4) ("") (2) ((1.neg)))) ((((unsupported)) (0) ("") (2) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xst).xtotuple)) (TRUE) (TRUE))))))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) (((((xst).xtotuple)) 0)))))) ((((unsupported)) ((((unsupported)) ((xt)) ((xn)))) ((((unsupported)) ((xt)) ((xn)) ((xl)) ((xc)))) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xst).xtotuple)) (TRUE))))))) ((((unsupported)) ((((unsupported)) ((xt)) ((xn)) ((xl)))) ((((unsupported)) ((xt)) ((xn)) ((xl)) ((xc)))) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xst).xtotuple)) (TRUE))))))) ((((unsupported)) ((((unsupported)) ((xt)) ((xn)) ((xc)))) ((((unsupported)) ((xt)) ((xn)) ((xl)) ((xc)))) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xst).xtolist)) (TRUE) (TRUE))))))) ((((unsupported)) ((((xlist)) ((xx)))) ((xx)) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xparser).xst2tuple)) ((xst)) (TRUE) (TRUE))))))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xwalk)) ((((unsupported)) (((xparser).xst2list)) ((xst)) (TRUE) (TRUE))))))) ((((unsupported)) ((((xlist)) ((xx)))) ((xx)) ((xexpected)))))
                xtest_extended_unpacking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("*a = y"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x, *b, = m"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("[*a, *b] = y"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("for [*x, b] in x: pass"))
                xtest_raise_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("raisen"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("raise en"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("try:n    suitenexcept Exception as e:n    raise ValueError from en"))
                xtest_list_displays.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[]"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("[*{2}, 3, *[4]]"))
                xtest_set_displays.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{*{2}, 3, *[4]}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{2}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{2,}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{2, 3}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{2, 3,}"))
                xtest_dict_displays.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{a:b}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{a:b,}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{a:b, c:d}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{a:b, c:d,}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{**{}}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{**{}, 3:4, **{5:6, 7:8}}"))
                xtest_argument_unpacking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("f(*a, **b)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("f(a, *b, *c, *d)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("f(**a, **b)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("f(2, *a, *b, **b, **c, **d)"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("f(*b, *() or () and (), **{} and {}, **() or {})"))
                xtest_set_comprehensions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{x for x in seq}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{f(x) for x in seq}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{f(x) for x in seq if condition(x)}"))
                xtest_dict_comprehensions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{x:x for x in seq}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{x**2:x[3] for x in seq if condition(x)}"))
                        bogusForceDataize.write ((((xself).xcheck_expr)) ("{x:x for x in seq1 for y in seq2 if condition(x, y)}"))
                xtest_named_expressions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(a := 1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(a := a)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if (match := pattern.search(data)) is None: pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("while match := pattern.search(f.read()): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("[y := f(x), y**2, y**3]"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("filtered_data = [y for x in data if (y := f(x)) is None]"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(y := f(x))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("y0 = (y1 := f(x))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(x=(y := f(x)))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def foo(answer=(p := 42)): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("def foo(answer: (p := 42) = 5): pass"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("lambda: (x := 1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(x := lambda: 1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(x := lambda: (y := 1))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("lambda line: (m := re.match(pattern, line)) and m.group(1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("x = (y := 0)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(z:=(y:=(x:=0)))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(info := (name, phone, *rest))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(x:=1,2)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("(total := total + tax)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("len(lines := f.readlines())"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(x := 3, cat='vector')"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(cat=(category := 'vector'))"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if any(len(longline := l) >= 100 for l in lines): print(longline)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if env_base := os.environ.get('PYTHONUSERBASE', None): return env_base"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("if self._is_special and (ans := self._check_nans(context=context)): return ans"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(b := 2, a=1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(b := 2, a=1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo((b := 2), a=1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("foo(c=(b := 2), a=1)"))
                        bogusForceDataize.write ((((xself).xcheck_suite)) ("{(x := C(i)).q: x for i in y}"))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xcheck_bad_tree.write
                  [xself xtree xlabel]
                    seq > @
                      (((unsupported)) (((xparser).xParserError)))
                        bogusForceDataize.write ((((xparser).xsequence2st)) ((xtree)))
                        bogusForceDataize.write ((((xself).xfail)) (("did not detect invalid tree for %r".mod (xlabel))))
                xtest_junk.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((((unsupported)) (1) (2) (3))) ("<junk>"))
                xtest_illegal_terminal.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (270) ((((unsupported)) (271) ((((unsupported)) (277) ((((unsupported)) (1))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("too small items in terminal node"))
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (270) ((((unsupported)) (271) ((((unsupported)) (277) ((((unsupported)) (1) ("pass"))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("non-string second item in terminal node"))
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (270) ((((unsupported)) (271) ((((unsupported)) (277) ((((unsupported)) (1) ("pass") ("0") (0))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("non-integer third item in terminal node"))
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (270) ((((unsupported)) (271) ((((unsupported)) (277) ((((unsupported)) (1) ("pass") (0) (0))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("too many items in terminal node"))
                xtest_illegal_yield_1.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (264) ((((unsupported)) (285) ((((unsupported)) (259) ((((unsupported)) (1) ("def"))) ((((unsupported)) (1) ("f"))) ((((unsupported)) (260) ((((unsupported)) (7) ("("))) ((((unsupported)) (8) (")"))))) ((((unsupported)) (11) (":"))) ((((unsupported)) (291) ((((unsupported)) (4) (""))) ((((unsupported)) (5) (""))) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (272) ((((unsupported)) (275) ((((unsupported)) (1) ("return"))) ((((unsupported)) (313) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (295) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (305) ((((unsupported)) (2) ("1"))))))))))))))))))))))))))))))))))))) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (272) ((((unsupported)) (276) ((((unsupported)) (1) ("yield"))) ((((unsupported)) (313) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (295) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (305) ((((unsupported)) (2) ("1"))))))))))))))))))))))))))))))))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (6) (""))))))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("def f():n  return 1n  yield 1"))
                xtest_illegal_yield_2.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (278) ((((unsupported)) (1) ("from"))) ((((unsupported)) (281) ((((unsupported)) (1) ("__future__"))))) ((((unsupported)) (1) ("import"))) ((((unsupported)) (279) ((((unsupported)) (1) ("generators"))))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (264) ((((unsupported)) (285) ((((unsupported)) (259) ((((unsupported)) (1) ("def"))) ((((unsupported)) (1) ("f"))) ((((unsupported)) (260) ((((unsupported)) (7) ("("))) ((((unsupported)) (8) (")"))))) ((((unsupported)) (11) (":"))) ((((unsupported)) (291) ((((unsupported)) (4) (""))) ((((unsupported)) (5) (""))) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (272) ((((unsupported)) (275) ((((unsupported)) (1) ("return"))) ((((unsupported)) (313) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (295) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (305) ((((unsupported)) (2) ("1"))))))))))))))))))))))))))))))))))))) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (272) ((((unsupported)) (276) ((((unsupported)) (1) ("yield"))) ((((unsupported)) (313) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (295) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (305) ((((unsupported)) (2) ("1"))))))))))))))))))))))))))))))))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (6) (""))))))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("def f():n  return 1n  yield 1"))
                xtest_a_comma_comma_c.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (258) ((((unsupported)) (311) ((((unsupported)) (290) ((((unsupported)) (291) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (295) ((((unsupported)) (296) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (1) ("a"))))))))))))))))))))))))))))) ((((unsupported)) (12) (","))) ((((unsupported)) (12) (","))) ((((unsupported)) (290) ((((unsupported)) (291) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (295) ((((unsupported)) (296) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (1) ("c"))))))))))))))))))))))))))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("a,,c"))
                xtest_illegal_operator.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (267) ((((unsupported)) (312) ((((unsupported)) (291) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (296) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (1) ("a"))))))))))))))))))))))))))))))) ((((unsupported)) (268) ((((unsupported)) (37) ("$="))))) ((((unsupported)) (312) ((((unsupported)) (291) ((((unsupported)) (292) ((((unsupported)) (293) ((((unsupported)) (294) ((((unsupported)) (296) ((((unsupported)) (297) ((((unsupported)) (298) ((((unsupported)) (299) ((((unsupported)) (300) ((((unsupported)) (301) ((((unsupported)) (302) ((((unsupported)) (303) ((((unsupported)) (304) ((((unsupported)) (1) ("b"))))))))))))))))))))))))))))))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("a $= b"))
                xtest_malformed_global.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (264) ((((unsupported)) (265) ((((unsupported)) (266) ((((unsupported)) (282) ((((unsupported)) (1) ("foo"))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("malformed global ast"))
                xtest_missing_import_source.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (268) ((((unsupported)) (269) ((((unsupported)) (270) ((((unsupported)) (282) ((((unsupported)) (284) ((((unsupported)) (1) ("from"))) ((((unsupported)) (1) ("import"))) ((((unsupported)) (287) ((((unsupported)) (285) ((((unsupported)) (1) ("fred"))))))))))))) ((((unsupported)) (4) (""))))))) ((((unsupported)) (4) (""))) ((((unsupported)) (0) (""))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("from import fred"))
                xtest_illegal_encoding.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (341) ((((unsupported)) (257) ((((unsupported)) (0) (""))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("missed encoding"))
                        xtree.write (((unsupported)) (341) ((((unsupported)) (257) ((((unsupported)) (0) (""))))) ("iso-8859-1"))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("non-string encoding"))
                        xtree.write (((unsupported)) (341) ((((unsupported)) (257) ((((unsupported)) (0) (""))))) ("udcff"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xUnicodeEncodeError)))))
                          bogusForceDataize.write ((((xparser).xsequence2st)) ((xtree)))
                xtest_invalid_node_id.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) ((7.neg)) (""))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("negative node id"))
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (99) (""))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("invalid token id"))
                        xtree.write (((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (9999) ((((unsupported)) (0) (""))))))))
                        bogusForceDataize.write ((((xself).xcheck_bad_tree)) ((xtree)) ("invalid symbol id"))
                xtest_ParserError_message.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xparser).xParserError)))
                        bogusForceDataize.write ((((xparser).xsequence2st)) ((((unsupported)) (257) ((((unsupported)) (269) ((((unsupported)) (257) ((((unsupported)) (0) (""))))))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertIn)) ("compound_stmt") ((((xstr)) ((xwhy)))))
                          bogusForceDataize.write ((((xself).xassertIn)) ("file_input") ((((xstr)) ((xwhy)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_compile_expr.write
                  [xself]
                    memory > xst
                    memory > xcode
                    seq > @
                      seq
                        xst.write ((((xparser).xexpr)) ("2 + 3"))
                        xcode.write ((((xparser).xcompilest)) ((xst)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((xcode)))) (5))
                xtest_compile_suite.write
                  [xself]
                    memory > xst
                    memory > xcode
                    memory > xglobs
                    seq > @
                      seq
                        xst.write ((((xparser).xsuite)) ("x = 2; y = x + 3"))
                        xcode.write ((((xparser).xcompilest)) ((xst)))
                        xglobs.write (((unsupported)) 0)
                        bogusForceDataize.write (((xexec)) ((xcode)) ((xglobs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xglobs)) ("y"))) (5))
                xtest_compile_error.write
                  [xself]
                    memory > xst
                    seq > @
                      seq
                        xst.write ((((xparser).xsuite)) ("1 = 3 + 4"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) (((xparser).xcompilest)) ((xst)))
                xtest_compile_badunicode.write
                  [xself]
                    memory > xst
                    seq > @
                      seq
                        xst.write ((((xparser).xsuite)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) (((xparser).xcompilest)) ((xst)))
                        xst.write ((((xparser).xsuite)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) (((xparser).xcompilest)) ((xst)))
                xtest_issue_9011.write
                  [xself]
                    memory > xst
                    memory > xcode1
                    memory > xcode2
                    seq > @
                      seq
                        xst.write ((((xparser).xexpr)) ("-3"))
                        xcode1.write ((((xparser).xcompilest)) ((xst)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((xcode1)))) ((3.neg)))
                        xcode2.write ((((xparser).xcompilest)) ((xst)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xeval)) ((xcode2)))) ((3.neg)))
                xtest_compile_filename.write
                  [xself]
                    memory > xst
                    memory > xcode
                    seq > @
                      seq
                        xst.write ((((xparser).xexpr)) ("a + 5"))
                        xcode.write ((((xparser).xcompilest)) ((xst)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("<syntax-tree>"))
                        xcode.write ((((xst).xcompile)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("<syntax-tree>"))
                        (((unsupported)) ((xfilename)) ((((unsupported)) ("file.py") ("file.py"))))
                          seq
                            xcode.write ((((xparser).xcompilest)) ((xst)) ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("file.py"))
                            xcode.write ((((xst).xcompile)) ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("file.py"))
                        (((unsupported)) ((xfilename)) ((((unsupported)) ((((xbytearray)) ("file.py"))) ((((xmemoryview)) ("file.py"))))))
                          seq
                            (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                              xcode.write ((((xparser).xcompilest)) ((xst)) ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("file.py"))
                            (((unsupported)) (((((xself).xassertWarns)) ((xDeprecationWarning)))))
                              xcode.write ((((xst).xcompile)) ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xcode).xco_filename)) ("file.py"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xparser).xcompilest)) ((xst)) ((((xlist)) ("file.py"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xst).xcompile)) ((((xlist)) ("file.py"))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                x_nested_expression.write
                  [xself xlevel]
                    seq > @
                      (((unsupported)) ((("[".mul (xlevel)).add ("]".mul (xlevel)))))
                xtest_deeply_nested_list.write
                  [xself]
                    memory > xst
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_nested_expression)) (99))
                        xst.write ((((xparser).xexpr)) ((xe)))
                        bogusForceDataize.write ((((xst).xcompile)) 0)
                xtest_trigger_memory_error.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xself).x_nested_expression)) (100))
                        (((unsupported)) ((((unsupported)) ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)) ("-c") ((xe)))))
                        bogusForceDataize.write ((((xself).xassertIn)) ("s_push: parser stack overflow") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("MemoryError") ((xerr)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_comparisons.write
                  [xself]
                    memory > xst2
                    memory > xbottom
                    memory > xst1_copy
                    memory > xst3_copy
                    memory > xst3
                    memory > xmid
                    memory > xtop
                    memory > xst1
                    memory > xst2_copy
                    seq > @
                      seq
                        xst1.write ((((xparser).xexpr)) ("2 + 3"))
                        xst2.write ((((xparser).xsuite)) ("x = 2; y = x + 3"))
                        xst3.write ((((xparser).xexpr)) ("list(x**3 for x in range(20))"))
                        xst1_copy.write ((((xparser).xexpr)) ("2 + 3"))
                        xst2_copy.write ((((xparser).xsuite)) ("x = 2; y = x + 3"))
                        xst3_copy.write ((((xparser).xexpr)) ("list(x**3 for x in range(20))"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).eq (xst1))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).eq (xst2))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst3).eq (xst3))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xst1)) ((xst1_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xst2)) ((xst2_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xst3)) ((xst3_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).eq (xst2))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).eq (xst3))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).eq (xst3))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).neq (xst1))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).neq (xst2))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst3).neq (xst3))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).neq (xst1_copy))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).neq (xst2_copy))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst3).neq (xst3_copy))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).neq (xst1))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).neq (xst3))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst3).neq (xst2))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).less (xst2))) ((((xst2).leq (xst1)).not)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).less (xst3))) ((((xst3).leq (xst1)).not)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).less (xst3))) ((((xst3).leq (xst2)).not)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).less (xst2))) (((xst2).greater (xst1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).less (xst3))) (((xst3).greater (xst1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).less (xst3))) (((xst3).greater (xst2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).leq (xst2))) (((xst2).geq (xst1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst3).leq (xst1))) (((xst1).geq (xst3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst2).leq (xst3))) (((xst3).geq (xst2))))
                        xbottom.write (((xmin)) ((xst1)) ((xst2)) ((xst3)))
                        xtop.write (((xmax)) ((xst1)) ((xst2)) ((xst3)))
                        xmid.write (((unsupported)) ((((xsorted)) ((((unsupported)) ((xst1)) ((xst2)) ((xst3)))))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbottom).less (xmid))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbottom).less (xtop))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmid).less (xtop))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbottom).leq (xmid))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbottom).leq (xtop))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmid).leq (xtop))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xbottom).leq (xbottom))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xmid).leq (xmid))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xtop).leq (xtop))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xst1).eq 1588.602459)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)) (("spanish armada".neq (xst2))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xoperator).xge)) ((xst3)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xoperator).xle)) (FALSE) ((xst1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xoperator).xlt)) ((xst1)) (1815))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xoperator).xgt)) ("waterloo") ((xst2)))
                xtest_copy_pickle.write
                  [xself]
                    memory > xsts
                    memory > xst_copy
                    seq > @
                      seq
                        xsts.write (((unsupported)) (((((xparser).xexpr)) ("2 + 3"))) (((((xparser).xsuite)) ("x = 2; y = x + 3"))) (((((xparser).xexpr)) ("list(x**3 for x in range(20))"))))
                        (((unsupported)) ((xst)) ((xsts)))
                          seq
                            xst_copy.write ((((xcopy).xcopy)) ((xst)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xst_copy).xtotuple)) 0)) (((((xst).xtotuple)) 0)))
                            xst_copy.write ((((xcopy).xdeepcopy)) ((xst)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((((xst_copy).xtotuple)) 0)) (((((xst).xtotuple)) 0)))
                            (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xst_copy.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xst)) ((xproto)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) (((((xst_copy).xtotuple)) 0)) (((((xst).xtotuple)) 0)))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_sizeof.write
                  [xself]
                    memory > xXXXROUNDUP
                    memory > xsizeofchildren
                    memory > xnodesize
                    memory > xcheck_st_sizeof
                    memory > xbasesize
                    seq > @
                      (((unsupported)) 0)
                        xXXXROUNDUP.write
                          [xn]
                            seq > @
                              seq
                                ((xn).leq 1).if
                                  (((unsupported)) ((xn)))
                                ((xn).leq 128).if
                                  (((unsupported)) ((((xn).add 3).and (3.neg))))
                                (((unsupported)) ((((unsupported)) (1) ((((((xn).sub 1).xbit_length)) 0)))))
                        xbasesize.write ((((xsupport).xcalcobjsize)) ("Piii"))
                        xnodesize.write ((((xstruct).xcalcsize)) ("hP3iP0h2i"))
                        xsizeofchildren.write
                          [xnode]
                            memory > xres
                            memory > xchildren
                            memory > xhasstr
                            seq > @
                              seq
                                (((unsupported)) ((xnode)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)) (0))
                                xres.write 0
                                xhasstr.write (((((xlen)) ((xnode))).greater 1).and (((xisinstance)) ((((unsupported)) ((xnode)) ((1.neg)))) ((xstr))))
                                (xhasstr).if
                                  (((unsupported)) ((xres)) (((((xlen)) ((((unsupported)) ((xnode)) ((1.neg))))).add 1)))
                                xchildren.write ((xhasstr).if (((unsupported)) ((xnode)) ((((unsupported)) (1) ((1.neg))))) (((unsupported)) ((xnode)) ((((unsupported)) (1)))))
                                (xchildren).if
                                  seq
                                    (((unsupported)) ((xres)) (((((xXXXROUNDUP)) ((((xlen)) ((xchildren))))).mul (xnodesize))))
                                    (((unsupported)) ((xchild)) ((xchildren)))
                                      (((unsupported)) ((xres)) ((((xsizeofchildren)) ((xchild)))))
                                (((unsupported)) ((xres)))
                        xcheck_st_sizeof.write
                          [xst]
                            seq > @
                              bogusForceDataize.write ((((xself).xcheck_sizeof)) ((xst)) ((((xbasesize).add (xnodesize)).add (((xsizeofchildren)) (((((xst).xtotuple)) 0))))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xexpr)) ("2 + 3"))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xexpr)) ("2 + 3 + 4"))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xsuite)) ("x = 2 + 3"))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xsuite)) (""))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xsuite)) ("# -*- coding: utf-8 -*-"))))
                        bogusForceDataize.write (((xcheck_st_sizeof)) (((((xparser).xexpr)) ((("[".add ("2,".mul 1000)).add "]")))))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_two_args_to_expr.write
                [xself]
                  seq > @
                    (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                      bogusForceDataize.write ((((xparser).xexpr)) ("a") ("b"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)