memory > xlist
memory > xstr
memory > xrange
memory > xwords
memory > xerr
memory > xnums
memory > xFoo
memory > xkwarg
memory > xX
memory > xi
memory > xsorted
memory > xSyntaxError
memory > xunittest
memory > xkwargs
memory > xNameError
memory > xcompile
memory > xarg
memory > xExample
memory > xexc
memory > xTypeError
memory > x__name__
[] > test_keywordonlyarg
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsortwords
        memory > xtestKwDefaults
        memory > x__email__
        memory > xtestSyntaxErrorForFunctionCall
        memory > xtestSyntaxForManyArguments
        memory > xkeywordonly_nodefaults_sum
        memory > xset
        memory > xposonly_sum
        memory > xtestTooManyPositionalErrorMessage
        memory > x__author__
        memory > xtest_mangling
        memory > xmixedargs_sum2
        memory > xmixedargs_sum
        memory > xkeywordonly_and_kwarg_sum
        memory > xtest_kwonly_methods
        memory > xsum
        memory > xtestRaiseErrorFuncallWithUnexpectedKeywordArgument
        memory > xtest_issue13343
        memory > xtestSyntaxErrorForFunctionDefinition
        memory > xkeywordonly_sum
        memory > x__init__
        memory > xtest_default_evaluation_order
        memory > xtestFunctionCall
        memory > xassertRaisesSyntaxError
        memory > xsortnum
        seq > @
          seq
            unsupported
            x__author__.write "Jiwon Seo"
            x__email__.write "seojiwon at gmail dot com"
            (((unsupported)) 0)
            xposonly_sum.write
              [xpos_arg1]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((xpos_arg1).add (((xsum)) ((xarg)))).add (((xsum)) (((((xkwarg).xvalues)) 0))))))
            xkeywordonly_sum.write
              [xk1 xk2]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) (((xk1).add (xk2))))
            xkeywordonly_nodefaults_sum.write
              [xk1 xk2]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) (((xk1).add (xk2))))
            xkeywordonly_and_kwarg_sum.write
              [xk1 xk2]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((xk1).add (xk2)).add (((xsum)) (((((xkwarg).xvalues)) 0))))))
            xmixedargs_sum.write
              [xa xb xk1 xk2]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((((xa).add (xb)).add (xk1)).add (xk2)).add (((xsum)) ((xarg))))))
            xmixedargs_sum2.write
              [xa xb xk1 xk2]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) (((((((xa).add (xb)).add (xk1)).add (xk2)).add (((xsum)) ((xarg)))).add (((xsum)) (((((xkwargs).xvalues)) 0))))))
            xsortnum.write
              [xreverse]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xsorted)) ((((xlist)) ((xnums)))) ((xreverse)))))
            xsortwords.write
              [xreverse]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xsorted)) ((((xlist)) ((xwords)))) ((xreverse)))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xk1 xk2]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xk1)) ((xk1)))
                        (((unsupported)) (((xself).xk2)) ((xk2)))
                xset.write
                  [xself xp1 xk1 xk2]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((xself).xk1)) ((xk1)))
                        (((unsupported)) (((xself).xk2)) ((xk2)))
                xsum.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((xself).xk1).add ((xself).xk2))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xassertRaisesSyntaxError.write
                  [xself xcodestr]
                    memory > xshouldRaiseSyntaxError
                    seq > @
                      seq
                        xshouldRaiseSyntaxError.write
                          [xs]
                            seq > @
                              bogusForceDataize.write (((xcompile)) ((xs)) ("<test>") ("single"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xSyntaxError)) ((xshouldRaiseSyntaxError)) ((xcodestr)))
                xtestSyntaxErrorForFunctionDefinition.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p, *):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *, p1=100):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *k1, k1=100):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *, k1, k1=100):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *, **k1):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *, k1, **k1):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p1, *, None, **k1):n  passn"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("def f(p, *, (k1, k2), **kw):n  passn"))
                xtestSyntaxForManyArguments.write
                  [xself]
                    memory > xfundef
                    seq > @
                      seq
                        xfundef.write ("def f(%s):n  passn".mod (((", ".xjoin)) ((((unsupported)) (("i%d".mod (xi))) ((xi)) ((((xrange)) (300)))))))
                        bogusForceDataize.write (((xcompile)) ((xfundef)) ("<test>") ("single"))
                        xfundef.write ("def f(*, %s):n  passn".mod (((", ".xjoin)) ((((unsupported)) (("i%d".mod (xi))) ((xi)) ((((xrange)) (300)))))))
                        bogusForceDataize.write (((xcompile)) ((xfundef)) ("<test>") ("single"))
                xtestTooManyPositionalErrorMessage.write
                  [xself]
                    memory > xexpected
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xexc)))
                          bogusForceDataize.write (((xf)) (1) (2) (3))
                        xexpected.write "f() takes from 1 to 2 positional arguments but 3 were given"
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xexc).xexception)))) ((xexpected)))
                xtestSyntaxErrorForFunctionCall.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("f(p, k=1, p2)"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)) ("f(p, k1=50, *(1,2), k1=100)"))
                xtestRaiseErrorFuncallWithUnexpectedKeywordArgument.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xkeywordonly_sum)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xkeywordonly_nodefaults_sum)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xFoo)) ((((unsupported)) 0)))
                        (((unsupported)) ((xTypeError)))
                          seq
                            (((unsupported)) ((xkeywordonly_sum)) (100) (200))
                            bogusForceDataize.write ((((xself).xfail)) ("should raise TypeError"))
                        (((unsupported)) ((xTypeError)))
                          seq
                            (((unsupported)) ((xkeywordonly_nodefaults_sum)) (2))
                            bogusForceDataize.write ((((xself).xfail)) ("should raise TypeError"))
                xtestFunctionCall.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xposonly_sum)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) ((((xposonly_sum)) (1) ((((unsupported)) ((((unsupported)) ("2") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((1.add 2).add 3)) ((((xposonly_sum)) (1) ((((unsupported)) ((((unsupported)) (2) (3))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((1.add 2).add 3).add 4)) ((((xposonly_sum)) (1) ((((unsupported)) ((((unsupported)) (2) (3))))) ((((unsupported)) ((((unsupported)) ("4") (4))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((unsupported)) ((xkeywordonly_sum)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) ((((unsupported)) ((xkeywordonly_sum)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) ((((unsupported)) ((xkeywordonly_and_kwarg_sum)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((1.add 2).add 3)) ((((unsupported)) ((xkeywordonly_and_kwarg_sum)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((1.add 2).add 3).add 4)) ((((unsupported)) ((xkeywordonly_and_kwarg_sum)) (1) (2) ((((unsupported)) ((((unsupported)) ("a") (3) ("b") (4))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) ((((unsupported)) ((xmixedargs_sum)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((1.add 2).add 3)) ((((unsupported)) ((xmixedargs_sum)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((1.add 2).add 3).add 4)) ((((unsupported)) ((xmixedargs_sum)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((1.add 2).add 3).add 4).add 5)) ((((unsupported)) ((xmixedargs_sum)) (1) (2) (3) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((1.add 2).add 3)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((1.add 2).add 3).add 4)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((1.add 2).add 3).add 4).add 5)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2) (3) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((1.add 2).add 3).add 4).add 5).add 6)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2) (3) (4) (5) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((1.add 2).add 3).add 4).add 5).add 6)) ((((unsupported)) ((xmixedargs_sum2)) (1) (2) (3) (4) ((((unsupported)) ((((unsupported)) ("k2") (5) ("k3") (6))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) (((((((unsupported)) ((xFoo)) (1)).xsum)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((1.add 2)) (((((((unsupported)) ((xFoo)) (1) (2)).xsum)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (1) (2) (3))) ((((xsortnum)) (3) (2) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (3) (2) (1))) ((((unsupported)) ((xsortnum)) (1) (2) (3) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("a") ("b") ("c"))) ((((xsortwords)) ("a") ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("c") ("b") ("a"))) ((((unsupported)) ((xsortwords)) ("a") ("c") ("b") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("c") ("b") ("a"))) ((((unsupported)) ((xsortwords)) ("a") ("c") ("b") (TRUE) ("ignore"))))
                xtestKwDefaults.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xp1 xp2 xk1 xk2]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) (((((xp1).add (xp2)).add (xk1)).add (xk2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xfoo).x__code__).xco_kwonlyargcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ("k2") (0))) (((xfoo).x__kwdefaults__)))
                        (((unsupported)) (((xfoo).x__kwdefaults__)) ((((unsupported)) ("k1") (0))))
                        (((unsupported)) ((xTypeError)))
                          seq
                            (((unsupported)) ((xfoo)) (1) (10))
                            bogusForceDataize.write ((((xself).xfail)) ("__kwdefaults__ is not properly changed"))
                xtest_kwonly_methods.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xf.write
                            [xself xk1 xk2]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((((unsupported)) ((xk1)) ((xk2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((((xExample)) 0).xf)) (1) (2))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xExample).xf)) ((((xExample)) 0)) (1) (2))) ((((unsupported)) (1) (2))))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) (((xExample).xf)) (1) (2))
                xtest_issue13343.write
                  [xself]
                    seq > @
                      (((unsupported)) ("None: is there a None literal in the EO language?"))
                xtest_mangling.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xf.write
                            [xself x__a]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((x__a)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xX)) 0).xf)) 0)) (42))
                xtest_default_evaluation_order.write
                  [xself]
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xa.write 42
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          xf.write
                            [xv xx xy xz]
                              seq > @
                                (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xerr).xexception)))) ("name 'b' is not defined"))
                        (((unsupported)) (((((xself).xassertRaises)) ((xNameError)))) ((xerr)))
                          xf.write (((unsupported)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xerr).xexception)))) ("name 'b' is not defined"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)