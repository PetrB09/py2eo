memory > xBaseStrTest
memory > xslen
memory > xmemuse
memory > xValueError
memory > xstr
memory > xTupleTest
memory > xrange
memory > xMemoryError
memory > xremainder
memory > xtype
memory > xBytearrayTest
memory > xchr
memory > xdir
memory > xhash
memory > xfilter
memory > xAttributeError
memory > xc
memory > xdivmod
memory > xIndexError
memory > xbytearray
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xoperator
memory > xi
memory > xsupport
memory > xsys
memory > xascii
memory > xbytes
memory > xtuple
memory > xitem
memory > xgetattr
memory > xBytesTest
memory > xiter
memory > xord
memory > xStrTest
memory > xname
memory > xunittest
memory > xobject
memory > xListTest
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_bigmem
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_repr_small
        memory > xbasic_test_inplace_repeat
        memory > xtest_main
        memory > xtest_translate
        memory > xtest_repeat_small
        memory > xtest_inplace_repeat_large
        memory > xtest_lstrip
        memory > xtest_center
        memory > xtest_islower
        memory > xtest_format
        memory > xtest_unicode_repr_wide
        memory > xbasic_test_concat
        memory > xtest_insert
        memory > xtest_extend_large
        memory > xtest_strip
        memory > xtest_rjust
        memory > xtest_encode_utf7
        memory > x_test_swapcase
        memory > xucs2_char_size
        memory > xtest_slice_and_getitem
        memory > xtest_inplace_concat_small
        memory > xtest_rstrip
        memory > xtest_decode
        memory > xtest_append
        memory > xtest_isdigit
        memory > xtest_repeat_large
        memory > xtest_index_and_slice
        memory > xtest_lower
        memory > xtest_inplace_repeat_small
        memory > xtest_concat_large
        memory > xtest_concat_small
        memory > xtest_title
        memory > xtest_from_2G_generator
        memory > xbasic_test_repeat
        memory > xtest_isalnum
        memory > xtest_hash
        memory > xascii_char_size
        memory > xtest_rfind
        memory > xtest_rindex
        memory > xtest_expandtabs
        memory > xtest_encode_utf32
        memory > xtest_index
        memory > xtest_extend_small
        memory > xtest_pop
        memory > xtest_istitle
        memory > xtest_split_small
        memory > xtest_from_almost_2G_generator
        memory > xtest_remove
        memory > xtest_split_large
        memory > xucs4_char_size
        memory > xsetUp
        memory > xtest_ljust
        memory > xtest_count
        memory > xtest_unicode_repr
        memory > xbasic_test_inplace_concat
        memory > x_test_capitalize
        memory > xtest_upper
        memory > xtest_repeat
        memory > xbasic_test_repr
        memory > xbasic_test_extend
        memory > xtest_isalpha
        memory > xpointer_size
        memory > xtest_replace
        memory > xtest_inplace_concat_large
        memory > xtest_encode_raw_unicode_escape
        memory > xtest_join
        memory > xtest_swapcase
        memory > xtest_capitalize
        memory > xtest_sort
        memory > xtest_contains
        memory > xtest_zfill
        memory > xtest_compare
        memory > xtest_concat
        memory > xfrom_latin1
        memory > xtest_find
        memory > xtest_startswith
        memory > xtest_reverse
        memory > xtest_splitlines
        memory > xtest_isupper
        memory > xtest_repr_large
        memory > x_test_title
        memory > xbasic_encode_test
        memory > xtest_encode_ascii
        memory > xtearDown
        memory > xbasic_concat_test
        memory > xtest_encode
        memory > xtest_endswith
        memory > xtest_isspace
        memory > xtest_repeat_large_2
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xascii_char_size.write 1
            xucs2_char_size.write 2
            xucs4_char_size.write 4
            xpointer_size.write ((((xsys).xmaxsize).less (((unsupported)) (2) (32))).if 4 8)
            (((unsupported)) 0)
              seq
                x_test_capitalize.write
                  [xself xsize]
                    memory > xs
                    memory > xcaps
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write ((((xself).xfrom_latin1)) (" abc def ghi"))
                        xs.write (((((x_)) ("-")).mul (xsize)).add (xSUBSTR))
                        xcaps.write ((((xs).xcapitalize)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xcaps)) ((((unsupported)) (((((xlen)) ((xSUBSTR))).neg)))))) (((((xSUBSTR).xcapitalize)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xcaps).xlstrip)) ((((x_)) ("-"))))) ((xSUBSTR)))
                xtest_center.write
                  [xself xsize]
                    memory > xs
                    memory > xrpadsize
                    memory > xSUBSTR
                    memory > xlpadsize
                    seq > @
                      (((unsupported)) 0)
                        xSUBSTR.write ((((xself).xfrom_latin1)) (" abc def ghi"))
                        xs.write ((((xSUBSTR).xcenter)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        (((unsupported)) ((xlpadsize)) ((xrpadsize)) ((((unsupported)) (((((xlen)) ((xs))).sub (((xlen)) ((xSUBSTR))))) (2))))
                        ((((xlen)) ((xs))).mod 2).if
                          (((unsupported)) ((xlpadsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((xlpadsize)) (((xrpadsize).neg)))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xstrip)) 0)) (((((xSUBSTR).xstrip)) 0)))
                xtest_count.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write (((((x_)) (".")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) ((xsize)))
                        (((unsupported)) ((xs)) ((((x_)) ("."))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) (" "))))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("i"))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("j"))))) (0))
                xtest_endswith.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xs2
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write (((((x_)) ("-")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xendswith)) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xendswith)) ((xs)))))
                        xs2.write ((((x_)) ("...")).add (xs))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs2).xendswith)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xendswith)) (((((x_)) ("a")).add (xSUBSTR))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xSUBSTR).xendswith)) ((xs)))))
                xtest_expandtabs.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xtabsize
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) ("-")).mul (xsize))
                        xtabsize.write 8
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((((xs).xexpandtabs)) 0).eq (xs))))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        (((unsupported)) ((((unsupported)) ((xslen)) ((xremainder)))) ((((xdivmod)) ((xsize)) ((xtabsize)))))
                        xs.write ((((x_)) ("       t")).mul (xslen))
                        xs.write ((((xs).xexpandtabs)) ((xtabsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).sub (xremainder))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xs).xstrip)) ((((x_)) (" "))))))) (0))
                xtest_find.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((xSUBSTR)) (((((x_)) ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((xSUBSTR)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) (" "))) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((xSUBSTR)) ((((xlen)) ((xSUBSTR)))))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) ("i"))))) (((((xSUBSTR).xfind)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) ("i"))) ((xsublen)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xfind)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) ("i"))) ((xsize)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xfind)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xfind)) ((((x_)) ("j"))))) ((1.neg)))
                xtest_index.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((xSUBSTR)) (((((x_)) ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((((x_)) (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((xSUBSTR)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((((x_)) (" "))) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((xSUBSTR)) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((((x_)) ("i"))))) (((((xSUBSTR).xindex)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((((x_)) ("i"))) ((xsublen)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xindex)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xindex)) ((((x_)) ("i"))) ((xsize)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xindex)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xindex)) ((((x_)) ("j"))))
                xtest_isalnum.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("123456"))
                        xs.write (((((x_)) ("a")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xisalnum)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("."))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xisalnum)) 0)))
                xtest_isalpha.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("zzzzzzz"))
                        xs.write (((((x_)) ("a")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xisalpha)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("."))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xisalpha)) 0)))
                xtest_isdigit.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("123456"))
                        xs.write (((((x_)) ("9")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xisdigit)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("z"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xisdigit)) 0)))
                xtest_islower.write
                  [xself xsize]
                    memory > xchars
                    memory > xs
                    memory > xrepeats
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xchars.write (((x_)) (((("".xjoin)) ((((unsupported)) ((((xchr)) ((xc)))) ((xc)) ((((xrange)) (255))) ((((((((xchr)) ((xc))).xisupper)) 0).not)))))))
                        xrepeats.write ((((unsupported)) ((xsize)) ((((xlen)) ((xchars))))).add 2)
                        xs.write ((xchars).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xislower)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("A"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xislower)) 0)))
                xtest_isspace.write
                  [xself xsize]
                    memory > xs
                    memory > xrepeats
                    memory > xwhitespace
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xwhitespace.write (((x_)) (" fnrtv"))
                        xrepeats.write ((((unsupported)) ((xsize)) ((((xlen)) ((xwhitespace))))).add 2)
                        xs.write ((xwhitespace).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xisspace)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("j"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xisspace)) 0)))
                xtest_istitle.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("123456"))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((((x_)) ("A"))) (((((x_)) ("a")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xistitle)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("A"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xistitle)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("aA"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xistitle)) 0)))
                xtest_isupper.write
                  [xself xsize]
                    memory > xchars
                    memory > xs
                    memory > xrepeats
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xchars.write (((x_)) (((("".xjoin)) ((((unsupported)) ((((xchr)) ((xc)))) ((xc)) ((((xrange)) (255))) ((((((((xchr)) ((xc))).xislower)) 0).not)))))))
                        xrepeats.write ((((unsupported)) ((xsize)) ((((xlen)) ((xchars))))).add 2)
                        xs.write ((xchars).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xisupper)) 0)))
                        (((unsupported)) ((xs)) ((((x_)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xisupper)) 0)))
                xtest_join.write
                  [xself xsize]
                    memory > x_
                    memory > xx
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) ("A")).mul (xsize))
                        xx.write ((((xs).xjoin)) ((((unsupported)) ((((x_)) ("aaaaa"))) ((((x_)) ("bbbbb"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xcount)) ((((x_)) ("a"))))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xx).xcount)) ((((x_)) ("b"))))) (5))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xx).xstartswith)) ((((x_)) ("aaaaaA"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xx).xendswith)) ((((x_)) ("Abbbbb"))))))
                xtest_ljust.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) (((xSUBSTR).add (((x_)) ("  ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xstrip)) 0)) (((((xSUBSTR).xstrip)) 0)))
                xtest_lower.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) ("A")).mul (xsize))
                        xs.write ((((xs).xlower)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("a"))))) ((xsize)))
                xtest_lstrip.write
                  [xself xsize]
                    memory > xs
                    memory > xstripped
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("abc def ghi"))
                        xs.write ((((xSUBSTR).xrjust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xlstrip)) 0)) (((((xSUBSTR).xlstrip)) 0)))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        xs.write ((((xSUBSTR).xljust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        (((xisinstance)) ((xs)) ((((unsupported)) ((xstr)) ((xbytes))))).if
                          seq
                            xstripped.write ((((xs).xlstrip)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xstripped)) ((xs)))))
                xtest_replace.write
                  [xself xsize]
                    memory > xs
                    memory > xreplacement
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xreplacement.write (((x_)) ("a"))
                        xs.write ((((x_)) (" ")).mul (xsize))
                        xs.write ((((xs).xreplace)) ((((x_)) (" "))) ((xreplacement)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((xreplacement)))) ((xsize)))
                        xs.write ((((xs).xreplace)) ((xreplacement)) ((((x_)) (" "))) (((xsize).sub 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((xreplacement)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((10.neg)))))) ((((x_)) ("      aaaa"))))
                xtest_rfind.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((xSUBSTR)) (((((x_)) ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) (" "))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrfind)) ((((x_)) (" ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((xSUBSTR)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) (" "))) (0) ((xsize)))) (((((xSUBSTR).xrfind)) ((((x_)) (" "))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((xSUBSTR)) (0) (((xsublen).add (xsize))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) ("i"))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrfind)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) ("i"))) (0) ((xsublen)))) (((((xSUBSTR).xrfind)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) ("i"))) (0) (((xsublen).add (xsize))))) (((((xSUBSTR).xrfind)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrfind)) ((((x_)) ("j"))))) ((1.neg)))
                xtest_rindex.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((xSUBSTR)) (((((x_)) ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((((x_)) (" "))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrindex)) ((((x_)) (" ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((xSUBSTR)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((((x_)) (" "))) (0) ((((xsublen).add (xsize)).sub 1)))) (((((xSUBSTR).xrindex)) ((((x_)) (" "))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((xSUBSTR)) (0) (((xsublen).add (xsize))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((((x_)) ("i"))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrindex)) ((((x_)) ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((((x_)) ("i"))) (0) ((xsublen)))) (((((xSUBSTR).xrindex)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrindex)) ((((x_)) ("i"))) (0) (((xsublen).add (xsize))))) (((((xSUBSTR).xrindex)) ((((x_)) ("i"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xrindex)) ((((x_)) ("j"))))
                xtest_rjust.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) (((xSUBSTR).add (((x_)) ("  ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xstrip)) 0)) (((((xSUBSTR).xstrip)) 0)))
                xtest_rstrip.write
                  [xself xsize]
                    memory > xs
                    memory > xstripped
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xrstrip)) 0)) (((((xSUBSTR).xrstrip)) 0)))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        xs.write ((((xSUBSTR).xrjust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        (((xisinstance)) ((xs)) ((((unsupported)) ((xstr)) ((xbytes))))).if
                          seq
                            xstripped.write ((((xs).xrstrip)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xstripped)) ((xs)))))
                xtest_split_small.write
                  [xself xsize]
                    memory > x_
                    memory > xl
                    memory > xs
                    memory > xSUBSTR
                    memory > xchunksize
                    memory > xexpected
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xchunksize.write (((xint)) (((((unsupported)) ((xsize)) (0.5)).add 2)))
                        xSUBSTR.write ((((x_)) ("a")).add ((((x_)) (" ")).mul (xchunksize)))
                        xs.write ((xSUBSTR).mul (xchunksize))
                        xl.write ((((xs).xsplit)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xchunksize)))
                        xexpected.write (((x_)) ("a"))
                        (((unsupported)) ((xitem)) ((xl)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ((xexpected)))
                        (((unsupported)) ((((unsupported)) ((xl)))))
                        xl.write ((((xs).xsplit)) ((((x_)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xchunksize).add 1)))
                        xexpected.write ((((x_)) (" ")).mul (xchunksize))
                        (((unsupported)) ((xitem)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((xl)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ((xexpected)))
                xtest_split_large.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write (((((x_)) (" a")).mul (xsize)).add (((x_)) (" ")))
                        xl.write ((((xs).xsplit)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xl)))) ((((xset)) ((((unsupported)) ((((x_)) ("a"))))))))
                        (((unsupported)) ((((unsupported)) ((xl)))))
                        xl.write ((((xs).xsplit)) ((((x_)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xl)))) ((((xset)) ((((unsupported)) ((((x_)) (" "))))))))
                xtest_splitlines.write
                  [xself xsize]
                    memory > x_
                    memory > xl
                    memory > xs
                    memory > xSUBSTR
                    memory > xchunksize
                    memory > xexpected
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xchunksize.write (((unsupported)) ((((xint)) (((((unsupported)) ((xsize)) (0.5)).add 2)))) (2))
                        xSUBSTR.write (((((((x_)) (" ")).mul (xchunksize)).add (((x_)) ("n"))).add ((((x_)) (" ")).mul (xchunksize))).add (((x_)) ("rn")))
                        xs.write ((xSUBSTR).mul ((xchunksize).mul 2))
                        xl.write ((((xs).xsplitlines)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xchunksize).mul 4)))
                        xexpected.write ((((x_)) (" ")).mul (xchunksize))
                        (((unsupported)) ((xitem)) ((xl)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ((xexpected)))
                xtest_startswith.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) (" abc def ghi"))
                        xs.write (((((x_)) ("-")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) (((((x_)) ("-")).mul (xsize))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xstartswith)) ((xSUBSTR)))))
                xtest_strip.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("   abc def ghi   "))
                        xs.write ((((xSUBSTR).xrjust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xstrip)) 0)) (((((xSUBSTR).xstrip)) 0)))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        xs.write ((((xSUBSTR).xljust)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xstrip)) 0)) (((((xSUBSTR).xstrip)) 0)))
                x_test_swapcase.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("aBcDeFG12.'xa9x00"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xrepeats.write ((((unsupported)) ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xswapcase)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsublen).mul (xrepeats))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((xsublen).mul 3)))))) ((((((xSUBSTR).xswapcase)) 0).mul 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((((xsublen).neg).mul 3)))))) ((((((xSUBSTR).xswapcase)) 0).mul 3)))
                x_test_title.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("SpaaHAaaAaham"))
                        xs.write ((xSUBSTR).mul ((((unsupported)) ((xsize)) ((((xlen)) ((xSUBSTR))))).add 2))
                        xs.write ((((xs).xtitle)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) ((((((xSUBSTR).mul 3).xtitle)) 0)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xendswith)) ((((((xSUBSTR).xlower)) 0).mul 3)))))
                xtest_translate.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xtrans
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("aZz.z.Aaz."))
                        xtrans.write ((((xbytes).xmaketrans)) (".aZ") ("-!$"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xrepeats.write ((((unsupported)) ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xtranslate)) ((xtrans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xrepeats).mul (xsublen))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((xsublen)))))) (((((xSUBSTR).xtranslate)) ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((xsublen).neg)))))) (((((xSUBSTR).xtranslate)) ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("!"))))) (((xrepeats).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("z"))))) (((xrepeats).mul 3)))
                xtest_upper.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) ("a")).mul (xsize))
                        xs.write ((((xs).xupper)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("A"))))) ((xsize)))
                xtest_zfill.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("-568324723598234"))
                        xs.write ((((xSUBSTR).xzfill)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xendswith)) (((((x_)) ("0")).add (((unsupported)) ((xSUBSTR)) ((((unsupported)) (1)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xs).xstartswith)) ((((x_)) ("-0"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("0"))))) (((xsize).sub (((xlen)) ((xSUBSTR))))))
                xtest_concat.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        xs.write ((xs).add (xs))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) (((xsize).mul 2)))
                xtest_repeat.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsize)))
                        xs.write ((xs).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) (((xsize).mul 2)))
                xtest_slice_and_getitem.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xs
                    memory > xstepsize
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("0123456789"))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xs.write ((xSUBSTR).mul (((unsupported)) ((xsize)) ((xsublen))))
                        xstepsize.write (((unsupported)) ((((xlen)) ((xs)))) (100))
                        xstepsize.write ((xstepsize).sub ((xstepsize).mod (xsublen)))
                        (((unsupported)) ((xi)) ((((xrange)) (0) (((((xlen)) ((xs))).sub (xstepsize))) ((xstepsize)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((xi)))) ((((unsupported)) ((xSUBSTR)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((xi)) (((xi).add (xsublen))))))) ((xSUBSTR)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((xi)) (((xi).add (xsublen))) (2))))) ((((unsupported)) ((xSUBSTR)) ((((unsupported)) (2))))))
                            ((xi).greater 0).if
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((((xi).add (xsublen)).sub 1)) (((xi).sub 1)) ((3.neg)))))) ((((unsupported)) ((xSUBSTR)) ((((unsupported)) ((xsublen)) ((3.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (((((xlen)) ((xs))).sub 1)))) ((((unsupported)) ((xSUBSTR)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((1.neg)))) ((((unsupported)) ((xSUBSTR)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (((((xlen)) ((xs))).sub 10)))) ((((unsupported)) ((xSUBSTR)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (((xsublen).neg)))) ((((unsupported)) ((xSUBSTR)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((((xlen)) ((xs)))))))) ((((x_)) (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((((xlen)) ((xs))).sub 1)))))) ((((unsupported)) ((xSUBSTR)) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((1.neg)))))) ((((unsupported)) ((xSUBSTR)) ((((unsupported)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((((xlen)) ((xs))).sub (xsublen))))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((xsublen).neg)))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xs)) ((((unsupported)) 0)))))) ((((xlen)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xs)) ((((unsupported)) (((((xlen)) ((xs))).sub 5)))))))) (((((xlen)) ((xs))).sub 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((unsupported)) ((xs)) ((((unsupported)) (5) ((5.neg)))))))) (((((xlen)) ((xs))).sub 10)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xgetitem)) ((xs)) ((((xlen)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xgetitem)) ((xs)) (((((xlen)) ((xs))).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xgetitem)) ((xs)) ((((unsupported)) (((((xlen)) ((xs))).add 1)) (31))))
                xtest_contains.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    memory > xedge
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("0123456789"))
                        xedge.write ((((x_)) ("-")).mul (((unsupported)) ((xsize)) (2)))
                        xs.write ((((((x_)) ("")).xjoin)) ((((unsupported)) ((xedge)) ((xSUBSTR)) ((xedge)))))
                        (((unsupported)) ((((unsupported)) ((xedge)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xSUBSTR)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (((xSUBSTR).mul 2)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((x_)) ("-"))) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((x_)) ("a"))) ((xs)))))
                        (((unsupported)) ((xs)) ((((x_)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((x_)) ("a"))) ((xs)))))
                xtest_compare.write
                  [xself xsize]
                    memory > xs1
                    memory > x_
                    memory > xs2
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs1.write ((((x_)) ("-")).mul (xsize))
                        xs2.write ((((x_)) ("-")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xs1).eq (xs2))))
                        (((unsupported)) ((((unsupported)) ((xs2)))))
                        xs2.write ((xs1).add (((x_)) ("a")))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xs1).eq (xs2))))
                        (((unsupported)) ((((unsupported)) ((xs2)))))
                        xs2.write ((((x_)) (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xs1).eq (xs2))))
                xtest_hash.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xh1
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)) ("x00")).mul (xsize))
                        xh1.write (((xhash)) ((xs)))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        xs.write ((((x_)) ("x00")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((xh1)) ((((xhash)) ((xs)))))
            (((unsupported)) (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)) ((xs)))
                xbasic_encode_test.write
                  [xself xsize xenc xc xexpectedsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xexpectedsize)) ("None: is there a None literal in the EO language?")).if
                          xexpectedsize.write (xsize)
                        (((unsupported)) 0)
                          seq
                            xs.write ((xc).mul (xsize))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xs).xencode)) ((xenc)))))) ((xexpectedsize)))
                          xs.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xmeth
                    memory > xmemuse
                    seq > @
                      seq
                        (((unsupported)) (((xself).x_adjusted)) ((((unsupported)) 0)))
                        (((unsupported)) ((xname)) ((((xdir)) ((xBaseStrTest)))))
                          seq
                            (((((xname).xstartswith)) ("test_")).not).if
                              (((unsupported)) 0)
                            xmeth.write (((xgetattr)) ((((xtype)) ((xself)))) ((xname)))
                            (((unsupported)) ((xAttributeError)))
                              xmemuse.write ((xmeth).xmemuse)
                              (((unsupported)) 0)
                            (((unsupported)) (((xmeth).xmemuse)) (((xascii_char_size).mul (xmemuse))))
                            (((unsupported)) ((((unsupported)) (((xself).x_adjusted)) ((xname)))) ((xmemuse)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xname)) ((xmemuse)))) ((((((xself).x_adjusted).xitems)) 0)))
                        (((unsupported)) (((((xgetattr)) ((((xtype)) ((xself)))) ((xname))).xmemuse)) ((xmemuse)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_capitalize)) ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_title)) ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_swapcase)) ((xsize)))
                xtest_encode.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_encode_test)) ((xsize)) ("utf-8"))))
                xtest_encode_raw_unicode_escape.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xMemoryError)))
                          (((unsupported)) (((((xself).xbasic_encode_test)) ((xsize)) ("raw_unicode_escape"))))
                xtest_encode_utf7.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xMemoryError)))
                          (((unsupported)) (((((xself).xbasic_encode_test)) ((xsize)) ("utf7"))))
                xtest_encode_utf32.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xMemoryError)))
                          (((unsupported)) ((((unsupported)) (((xself).xbasic_encode_test)) ((xsize)) ("utf32") (((4.mul (xsize)).add 4)))))
                xtest_encode_ascii.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) (((xself).xbasic_encode_test)) ((xsize)) ("ascii") ("A"))))
                xtest_format.write
                  [xself xsize]
                    memory > xs
                    memory > xsf
                    memory > xedge
                    seq > @
                      (((unsupported)) 0)
                        xs.write ("-".mul (xsize))
                        xsf.write ("%s".mod (((unsupported)) ((xs))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xs).eq (xsf))))
                        (((unsupported)) ((((unsupported)) ((xsf)))))
                        xsf.write ("..%s..".mod (((unsupported)) ((xs))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xsf)))) (((((xlen)) ((xs))).add 4)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xsf).xstartswith)) ("..-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xsf).xendswith)) ("-.."))))
                        (((unsupported)) ((((unsupported)) ((xs)) ((xsf)))))
                        (((unsupported)) ((xsize)) (2))
                        xedge.write ("-".mul (xsize))
                        xs.write ((("".xjoin)) ((((unsupported)) ((xedge)) ("%s") ((xedge)))))
                        (((unsupported)) ((((unsupported)) ((xedge)))))
                        xs.write ((xs).mod "...")
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((((xsize).mul 2).add 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("."))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("-"))) (((xsize).mul 2)))
                xtest_repr_small.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ("-".mul (xsize))
                        xs.write (((xrepr)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("-"))) ((xsize)))
                        (((unsupported)) ((((unsupported)) ((xs)))))
                        xsize.write ((((unsupported)) ((xsize)) (5)).mul 2)
                        xs.write ("x00".mul (xsize))
                        xs.write (((xrepr)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((((xsize).mul 4).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("\\"))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("0"))) (((xsize).mul 2)))
                xtest_repr_large.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ("x00".mul (xsize))
                        xs.write (((xrepr)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((((xsize).mul 4).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("\\"))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("0"))) (((xsize).mul 2)))
                xtest_unicode_repr.write
                  [xself xsize]
                    memory > xs
                    memory > xr
                    memory > xchar
                    seq > @
                      (((unsupported)) 0)
                        xchar.write "uDCBA"
                        xs.write ((xchar).mul (xsize))
                        (((unsupported)) 0)
                          (((unsupported)) ((xf)) ((((unsupported)) ((xrepr)) ((xascii)))))
                            seq
                              xr.write (((xf)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xr)))) ((2.add (((((xlen)) ((((xf)) ((xchar))))).sub 2).mul (xsize)))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xendswith)) ("udcba'"))) ((((unsupported)) ((xr)) ((((unsupported)) ((10.neg)))))))
                              xr.write "None: is there a None literal in the EO language?"
                          (((unsupported)) ((xr)) ((xs)) ("None: is there a None literal in the EO language?"))
                xtest_unicode_repr_wide.write
                  [xself xsize]
                    memory > xs
                    memory > xr
                    memory > xchar
                    seq > @
                      (((unsupported)) 0)
                        xchar.write "U0001DCBA"
                        xs.write ((xchar).mul (xsize))
                        (((unsupported)) 0)
                          (((unsupported)) ((xf)) ((((unsupported)) ((xrepr)) ((xascii)))))
                            seq
                              xr.write (((xf)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xr)))) ((2.add (((((xlen)) ((((xf)) ((xchar))))).sub 2).mul (xsize)))))
                              bogusForceDataize.write ((((xself).xassertTrue)) (((((xr).xendswith)) ("U0001dcba'"))) ((((unsupported)) ((xr)) ((((unsupported)) ((12.neg)))))))
                              xr.write "None: is there a None literal in the EO language?"
                          (((unsupported)) ((xr)) ((xs)) ("None: is there a None literal in the EO language?"))
                xtest_translate.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xtrans
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)) 0)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)) ("aZz.z.Aaz."))
                        xtrans.write (((unsupported)) ((((xord)) ((((x_)) ("."))))) ((((x_)) ("-"))) ((((xord)) ((((x_)) ("a"))))) ((((x_)) ("!"))) ((((xord)) ((((x_)) ("Z"))))) ((((x_)) ("$"))))
                        xsublen.write (((xlen)) ((xSUBSTR)))
                        xrepeats.write ((((unsupported)) ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xtranslate)) ((xtrans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xrepeats).mul (xsublen))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((xsublen)))))) (((((xSUBSTR).xtranslate)) ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (((xsublen).neg)))))) (((((xSUBSTR).xtranslate)) ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("."))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("!"))))) (((xrepeats).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ((((x_)) ("z"))))) (((xrepeats).mul 3)))
            (((unsupported)) (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)) (((((xs).xencode)) ("latin-1"))))
                xtest_decode.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write (((((xself).xfrom_latin1)) (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xs).xdecode)) ("utf-8"))))) ((xsize)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_capitalize)) ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_title)) ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_swapcase)) ((xsize)))
            (((unsupported)) (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)) ((((xbytearray)) (((((xs).xencode)) ("latin-1"))))))
                xtest_decode.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write (((((xself).xfrom_latin1)) (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xs).xdecode)) ("utf-8"))))) ((xsize)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_capitalize)) ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_title)) ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).x_test_swapcase)) ((xsize)))
                xtest_hash.write "None: is there a None literal in the EO language?"
                xtest_split_large.write "None: is there a None literal in the EO language?"
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_compare.write
                  [xself xsize]
                    memory > xt1
                    memory > xt2
                    seq > @
                      (((unsupported)) 0)
                        xt1.write ((((unsupported)) ("")).mul (xsize))
                        xt2.write ((((unsupported)) ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xt1).eq (xt2))))
                        (((unsupported)) ((((unsupported)) ((xt2)))))
                        xt2.write ((((unsupported)) ("")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xt1).eq (xt2))))
                        (((unsupported)) ((((unsupported)) ((xt2)))))
                        xt2.write ((((unsupported)) (1)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xt1).eq (xt2))))
                xbasic_concat_test.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((unsupported)) ((((unsupported)) 0))).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) ((xsize)))
                        xt.write ((xt).add (xt))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) (((xsize).mul 2)))
                xtest_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_concat_test)) ((xsize)))))
                xtest_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_concat_test)) ((xsize)))))
                xtest_contains.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        xt.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (5) ((xt)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((unsupported)) (1) (2) (3) (4) (5))) ((xt)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (0) ((xt)))))
                xtest_hash.write
                  [xself xsize]
                    memory > xt1
                    memory > xt2
                    memory > xh1
                    seq > @
                      (((unsupported)) 0)
                        xt1.write ((((unsupported)) (0)).mul (xsize))
                        xh1.write (((xhash)) ((xt1)))
                        (((unsupported)) ((((unsupported)) ((xt1)))))
                        xt2.write ((((unsupported)) (0)).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xh1).eq (((xhash)) ((xt2))))))
                xtest_index_and_slice.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        xt.write ((((unsupported)) ("None: is there a None literal in the EO language?")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((1.neg)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) (5))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) (((xsize).sub 1)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xgetitem)) ((xt)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (5))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((5.neg)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (20) (25))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((25.neg)) ((20.neg)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (((xsize).sub 5)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (((xsize).sub 5)) ((xsize)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (((xsize).sub 6)) (((xsize).sub 2)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((xsize)) ((xsize)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((xsize)) (((xsize).add 5)))))) ((((unsupported)) 0)))
                xbasic_test_repeat.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((unsupported)) ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) ((xsize)))
                        xt.write ((xt).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) (((xsize).mul 2)))
                xtest_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repeat)) ((xsize)))))
                xtest_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repeat)) ((xsize)))))
                xtest_repeat_large_2.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repeat)) ((xsize)))))
                xtest_from_2G_generator.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xMemoryError)))
                          xt.write (((xtuple)) ((((xiter)) (((((unsupported)) (42)).mul (xsize))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) ((xsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (10))))) (((((unsupported)) (42)).mul 10)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((10.neg)))))) (((((unsupported)) (42)).mul 10)))
                xtest_from_almost_2G_generator.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xMemoryError)))
                          xt.write (((xtuple)) ((((xiter)) (((((unsupported)) (42)).mul (xsize))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xt)))) ((xsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) (10))))) (((((unsupported)) (42)).mul 10)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xt)) ((((unsupported)) ((10.neg)))))) (((((unsupported)) (42)).mul 10)))
                xbasic_test_repr.write
                  [xself xsize]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xt.write ((((unsupported)) (FALSE)).mul (xsize))
                        xs.write (((xrepr)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).mul 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (10))))) ("(False, Fa"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((10.neg)))))) ("se, False)"))
                xtest_repr_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repr)) ((xsize)))))
                xtest_repr_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repr)) ((xsize)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_compare.write
                  [xself xsize]
                    memory > xl2
                    memory > xl1
                    seq > @
                      (((unsupported)) 0)
                        xl1.write ((((unsupported)) ("")).mul (xsize))
                        xl2.write ((((unsupported)) ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xl1).eq (xl2))))
                        (((unsupported)) ((((unsupported)) ((xl2)))))
                        xl2.write ((((unsupported)) ("")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xl1).eq (xl2))))
                        (((unsupported)) ((((unsupported)) ((xl2)))))
                        xl2.write ((((unsupported)) (2)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((xl1).eq (xl2))))
                xbasic_test_concat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)) ((((unsupported)) 0))).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        xl.write ((xl).add (xl))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 2)))
                xtest_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_concat)) ((xsize)))))
                xtest_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_concat)) ((xsize)))))
                xbasic_test_inplace_concat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)) (((xsys).xstdout))).mul (xsize))
                        (((unsupported)) ((xl)) ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (0))) ((((unsupported)) ((xl)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (((xsize).sub 1)))) ((((unsupported)) ((xl)) (((xsize).add 1)))))))
                xtest_inplace_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_inplace_concat)) ((xsize)))))
                xtest_inplace_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_inplace_concat)) ((xsize)))))
                xtest_contains.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (5) ((xl)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((unsupported)) (1) (2) (3) (4) (5))) ((xl)))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) (0) ((xl)))))
                xtest_hash.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (0)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xhash)) ((xl)))
                xtest_index_and_slice.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) ("None: is there a None literal in the EO language?")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((1.neg)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) (5))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) (((xsize).sub 1)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xgetitem)) ((xl)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (5))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((5.neg)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (20) (25))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((25.neg)) ((20.neg)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (((xsize).sub 5)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (((xsize).sub 5)) ((xsize)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (((xsize).sub 6)) (((xsize).sub 2)))))) (((((unsupported)) ("None: is there a None literal in the EO language?")).mul 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((xsize)) ((xsize)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((xsize)) (((xsize).add 5)))))) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xl)) (((xsize).sub 2)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((3.neg)))))) ((((unsupported)) ("None: is there a None literal in the EO language?") (5) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xcount)) (5))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xIndexError)) (((xoperator).xsetitem)) ((xl)) ((xsize)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        (((unsupported)) ((((unsupported)) ((xl)) ((((unsupported)) (((xsize).sub 7)))))) ((((unsupported)) (1) (2) (3) (4) (5))))
                        (((unsupported)) ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((7.neg)))))) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (1) (2) (3) (4) (5))))
                        (((unsupported)) ((((unsupported)) ((xl)) ((((unsupported)) (7))))) ((((unsupported)) (1) (2) (3) (4) (5))))
                        (((unsupported)) ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (7))))) ((((unsupported)) (1) (2) (3) (4) (5) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xl)) (((xsize).sub 1)))))))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((1.neg)))) (4))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xl)) ((((unsupported)) ((2.neg)))))))))
                        (((unsupported)) ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((1.neg)))) (2))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xl)) (0))))))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) (0))) (2))
                        (((unsupported)) ((((unsupported)) ((((unsupported)) ((xl)) ((((unsupported)) (2))))))))
                        (((unsupported)) ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) (0))) (4))
                xbasic_test_repeat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)) 0).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xl)))
                        xl.write ((((unsupported)) ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        xl.write ((xl).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 2)))
                xtest_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repeat)) ((xsize)))))
                xtest_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repeat)) ((xsize)))))
                xbasic_test_inplace_repeat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)) (""))
                        (((unsupported)) ((xl)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (0))) ((((unsupported)) ((xl)) ((1.neg)))))))
                        (((unsupported)) ((((unsupported)) ((xl)))))
                        xl.write ((((unsupported)) ("")).mul (xsize))
                        (((unsupported)) ((xl)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (((xsize).sub 1)))) ((((unsupported)) ((xl)) ((1.neg)))))))
                xtest_inplace_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_inplace_repeat)) ((xsize)))))
                xtest_inplace_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_inplace_repeat)) ((xsize)))))
                xbasic_test_repr.write
                  [xself xsize]
                    memory > xs
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)) (FALSE)).mul (xsize))
                        xs.write (((xrepr)) ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) (((xsize).mul 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) (10))))) ("[False, Fa"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xs)) ((((unsupported)) ((10.neg)))))) ("se, False]"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xs).xcount)) ("F"))) ((xsize)))
                xtest_repr_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repr)) ((xsize)))))
                xtest_repr_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_repr)) ((xsize)))))
                xtest_append.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) ((((xobject)) 0))).mul (xsize))
                        bogusForceDataize.write ((((xl).xappend)) ((((xobject)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) ((3.neg)))) ((((unsupported)) ((xl)) ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((unsupported)) ((((unsupported)) ((xl)) ((2.neg)))) ((((unsupported)) ((xl)) ((1.neg)))))))
                xtest_count.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xcount)) (1))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xcount)) ("1"))) (0))
                xbasic_test_extend.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)) ((xobject))).mul (xsize))
                        bogusForceDataize.write ((((xl).xextend)) ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (0))) ((((unsupported)) ((xl)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((unsupported)) ((xl)) (((xsize).sub 1)))) ((((unsupported)) ((xl)) (((xsize).add 1)))))))
                xtest_extend_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_extend)) ((xsize)))))
                xtest_extend_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xbasic_test_extend)) ((xsize)))))
                xtest_index.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        (((unsupported)) ((xsize)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xindex)) (1))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xindex)) (5) (((xsize).sub 5)))) (((xsize).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xindex)) (5) (((xsize).sub 5)) ((xsize)))) (((xsize).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xl).xindex)) (1) (((xsize).sub 4)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xl).xindex)) (6))
                xtest_insert.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1.0)).mul (xsize))
                        bogusForceDataize.write ((((xl).xinsert)) (((xsize).sub 1)) ("A"))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((3.neg)))))) ((((unsupported)) (1.0) ("A") (1.0))))
                        bogusForceDataize.write ((((xl).xinsert)) (((xsize).add 1)) ("B"))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((3.neg)))))) ((((unsupported)) ("A") (1.0) ("B"))))
                        bogusForceDataize.write ((((xl).xinsert)) (1) ("C"))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (3))))) ((((unsupported)) (1.0) ("C") (1.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (((xsize).sub 3)))))) ((((unsupported)) ("A") (1.0) ("B"))))
                xtest_pop.write
                  [xself xsize]
                    memory > xl
                    memory > xitem
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) ("a") ("b") ("c") ("d") ("e")).mul (xsize))
                        (((unsupported)) ((xsize)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        xitem.write ((((xl).xpop)) 0)
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((2.neg)))))) ((((unsupported)) ("c") ("d"))))
                        xitem.write ((((xl).xpop)) (0))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (2))))) ((((unsupported)) ("b") ("c"))))
                        xitem.write ((((xl).xpop)) (((xsize).sub 2)))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xitem)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((2.neg)))))) ((((unsupported)) ("b") ("d"))))
                xtest_remove.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (10)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xl).xremove)) (10))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xl).xappend)) (5))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((2.neg)))))) ((((unsupported)) (10) (5))))
                        bogusForceDataize.write ((((xl).xremove)) (5))
                        (((unsupported)) ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((2.neg)))))) ((((unsupported)) (10) (10))))
                xtest_reverse.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xl).xreverse)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((5.neg)))))) ((((unsupported)) (5) (4) (3) (2) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (5))))) ((((unsupported)) (5) (4) (3) (2) (1))))
                xtest_sort.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)) 0)
                        xl.write ((((unsupported)) (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xl).xsort)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xl).xcount)) (1))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) (10))))) (((((unsupported)) (1)).mul 10)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xl)) ((((unsupported)) ((10.neg)))))) (((((unsupported)) (5)).mul 10)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)) ((xStrTest)) ((xBytesTest)) ((xBytearrayTest)) ((xTupleTest)) ((xListTest)))
            ((x__name__).eq "__main__").if
              seq
                ((((xlen)) (((xsys).xargv))).greater 1).if
                  bogusForceDataize.write ((((xsupport).xset_memlimit)) ((((unsupported)) (((xsys).xargv)) (1))))
                bogusForceDataize.write (((xtest_main)) 0)