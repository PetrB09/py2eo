memory > xC
memory > xpickle
memory > xcheck_syntax_error
memory > xrange
memory > xb
memory > xint
memory > xX
memory > xi
memory > xargs
memory > xSyntaxError
memory > xe
memory > xunittest
memory > xkwargs
memory > xdis
memory > xStopIteration
memory > xcompile
memory > xsuper
memory > xExample
memory > xnext
memory > xobject
memory > xA
memory > xTypeError
memory > x__name__
memory > xa
[] > test_positional_only_arg
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_module_function
        memory > xtest_too_many_arguments
        memory > xtest_super
        memory > xglobal_pos_only_and_normal
        memory > xtest_positional_only_and_arg_invalid_calls
        memory > xtest_mangling
        memory > xtest_no_standard_args_usage
        memory > xtest_serialization
        memory > xtest_pos_only_definition
        memory > xglobal_pos_only_f
        memory > xtest_closures
        memory > xtest_use_positional_as_keyword
        memory > xtest_positional_only_and_optional_arg_invalid_calls
        memory > xtest_lambdas
        memory > xtest_positional_only_with_optional_invalid_calls
        memory > xtest_pos_only_call_via_unpacking
        memory > xtest_invalid_syntax_errors_async
        memory > xglobal_pos_only_defaults
        memory > xtest_same_keyword_as_positional_with_kwargs
        memory > xtest_annotations
        memory > xtest_generator
        memory > xtest_positional_only_and_kwonlyargs_invalid_calls
        memory > xtest_async
        memory > xtest_change_default_pos_only
        memory > xglobal_inner_has_pos_only
        memory > xtest_syntax_for_many_positional_only
        memory > xtest_invalid_syntax_lambda
        memory > xtest_posonly_methods
        memory > xtest_annotations_constant_fold
        memory > xtest_positional_only_invalid_calls
        memory > xtest_optional_positional_only_args
        memory > xtest_invalid_syntax_errors
        memory > xassertRaisesSyntaxError
        seq > @
          seq
            unsupported
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xglobal_pos_only_f.write
              [xa xb]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
            xglobal_pos_only_and_normal.write
              [xa xb]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
            xglobal_pos_only_defaults.write
              [xa xb]
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
            xglobal_inner_has_pos_only.write
              []
                memory > xf
                seq > @
                  seq
                    xf.write
                      [xx]
                        seq > @
                          (((unsupported)) 0)
                            (((unsupported)) 0)
                    (((unsupported)) ((xf)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xassertRaisesSyntaxError.write
                  [xself xcodestr xregex]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xSyntaxError)) ((xregex)))))
                          bogusForceDataize.write (((xcompile)) (((xcodestr).add "n")) ("<test>") ("single"))
                xtest_invalid_syntax_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, b = 5, /, c): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a = 5, b, /, c): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a = 5, b=1, /, c, *, d=2): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a = 5, b, /): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(*args, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(*args, a, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(**kwargs, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(/, a = 1): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(/, a): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(/): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(*, a, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(*, /, a): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, /, a): pass") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, /, *, a): pass") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, b/2, c): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, /, c, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, /, c, /, d): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, /, c, /, d, *, e): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("def f(a, *, c, /, d, e): pass"))
                xtest_invalid_syntax_errors_async.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, b = 5, /, c): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a = 5, b, /, c): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a = 5, b=1, /, c, d=2): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a = 5, b, /): pass") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(*args, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(*args, a, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(**kwargs, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(/, a = 1): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(/, a): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(/): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(*, a, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(*, /, a): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, /, a): pass") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, /, *, a): pass") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, b/2, c): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, /, c, /): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, /, c, /, d): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, /, c, /, d, *, e): pass"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("async def f(a, *, c, /, d, e): pass"))
                xtest_optional_positional_only_args.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xa).add (xb)).add (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (1) (2) (3))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (1) (2) (3))) (6))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'b'"))))
                          (((unsupported)) ((xf)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (1) (2))) (103))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'b'"))))
                          (((unsupported)) ((xf)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (1) (2))) (13))
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xa).add (xb)).add (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (1) (2) (3))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (1) (2) (3))) (6))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'b'"))))
                          (((unsupported)) ((xf)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (1) (2))) (103))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'b'"))))
                          (((unsupported)) ((xf)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (1) (2))) (13))
                xtest_syntax_for_many_positional_only.write
                  [xself]
                    memory > xfundef
                    seq > @
                      seq
                        xfundef.write ("def f(%s, /):n  passn".mod (((", ".xjoin)) ((((unsupported)) (("i%d".mod (xi))) ((xi)) ((((xrange)) (300)))))))
                        bogusForceDataize.write (((xcompile)) ((xfundef)) ("<test>") ("single"))
                xtest_pos_only_definition.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc xd xe xf xg]
                            seq > @
                              (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (5) ((((xf).x__code__).xco_argcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) ((((xf).x__code__).xco_posonlyargcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (1))) (((xf).x__defaults__)))
                        xf.write
                          [xa xb xc xd xe xf xg]
                            seq > @
                              (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (5) ((((xf).x__code__).xco_argcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) ((((xf).x__code__).xco_posonlyargcount)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (1) (2) (3))) (((xf).x__defaults__)))
                xtest_pos_only_call_via_unpacking.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)) (((xa).add (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) ((((unsupported)) ((((unsupported)) (1) (2))))))) (3))
                xtest_use_positional_as_keyword.write
                  [xself]
                    memory > xexpected
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa]
                            seq > @
                        xexpected.write "f() got some positional-only arguments passed as keyword arguments: 'a'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xf)) (1))
                        xf.write
                          [xa xb]
                            seq > @
                        xexpected.write "f() got some positional-only arguments passed as keyword arguments: 'a'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xf)) (1) (2))
                        xf.write
                          [xa xb]
                            seq > @
                        xexpected.write "f() got some positional-only arguments passed as keyword arguments: 'a, b'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xf)) (1) (2))
                xtest_positional_only_and_arg_invalid_calls.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'c'"))))
                          bogusForceDataize.write (((xf)) (1) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 2 required positional arguments: 'b' and 'c'"))))
                          bogusForceDataize.write (((xf)) (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 3 required positional arguments: 'a', 'b', and 'c'"))))
                          bogusForceDataize.write (((xf)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() takes 3 positional arguments but 4 were given"))))
                          bogusForceDataize.write (((xf)) (1) (2) (3) (4))
                xtest_positional_only_and_optional_arg_invalid_calls.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                        bogusForceDataize.write (((xf)) (1) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'b'"))))
                          bogusForceDataize.write (((xf)) (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 2 required positional arguments: 'a' and 'b'"))))
                          bogusForceDataize.write (((xf)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() takes from 2 to 3 positional arguments but 4 were given"))))
                          bogusForceDataize.write (((xf)) (1) (2) (3) (4))
                xtest_positional_only_and_kwonlyargs_invalid_calls.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc xd xe]
                            seq > @
                              (((unsupported)) 0)
                        (((unsupported)) ((xf)) (1) (2) (3) (1) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("missing 1 required keyword-only argument: 'd'"))))
                          (((unsupported)) ((xf)) (1) (2) (3) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("missing 2 required keyword-only arguments: 'd' and 'e'"))))
                          bogusForceDataize.write (((xf)) (1) (2) (3))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'c'"))))
                          bogusForceDataize.write (((xf)) (1) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 2 required positional arguments: 'b' and 'c'"))))
                          bogusForceDataize.write (((xf)) (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) (" missing 3 required positional arguments: 'a', 'b', and 'c'"))))
                          bogusForceDataize.write (((xf)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() takes 3 positional arguments but 6 positional arguments (and 2 keyword-only arguments) were given"))))
                          (((unsupported)) ((xf)) (1) (2) (3) (4) (5) (6) (7) (8))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got an unexpected keyword argument 'f'"))))
                          (((unsupported)) ((xf)) (1) (2) (3) (1) (4) (56))
                xtest_positional_only_invalid_calls.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                        bogusForceDataize.write (((xf)) (1) (2))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'b'"))))
                          bogusForceDataize.write (((xf)) (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 2 required positional arguments: 'a' and 'b'"))))
                          bogusForceDataize.write (((xf)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() takes 2 positional arguments but 3 were given"))))
                          bogusForceDataize.write (((xf)) (1) (2) (3))
                xtest_positional_only_with_optional_invalid_calls.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)) 0)
                        bogusForceDataize.write (((xf)) (1))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'a'"))))
                          bogusForceDataize.write (((xf)) 0)
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() takes from 1 to 2 positional arguments but 3 were given"))))
                          bogusForceDataize.write (((xf)) (1) (2) (3))
                xtest_no_standard_args_usage.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                        (((unsupported)) ((xf)) (1) (2) (3))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((xf)) (1) (2) (3))
                xtest_change_default_pos_only.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((xa).add (xb)).add (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (2) (3))) (((xf).x__defaults__)))
                        (((unsupported)) (((xf).x__defaults__)) ((((unsupported)) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (1) (2) (3))) (6))
                xtest_lambdas.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((unsupported)) (((xa).add (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xx)) (1) (2))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xx)) (1) (2))) (3))
                        xx.write (((unsupported)) (((xa).add (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xx)) (1))) (3))
                        xx.write (((unsupported)) (((xa).add (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xx)) (1) (2))) (3))
                        xx.write (((unsupported)) (((xa).add (xb))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xx)) (1) (2))) (3))
                xtest_invalid_syntax_lambda.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, b = 5, /, c: None") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a = 5, b, /, c: None") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a = 5, b, /: None") ("non-default argument follows default argument"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda *args, /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda *args, a, /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda **kwargs, /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda /, a = 1: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda /, a: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda *, a, /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda *, /, a: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, /, a: None") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, /, *, a: None") ("duplicate argument 'a' in function definition"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, /, b, /: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, /, b, /, c: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, /, b, /, c, *, d: None"))
                        bogusForceDataize.write (((xcheck_syntax_error)) ((xself)) ("lambda a, *, b, /, c: None"))
                xtest_posonly_methods.write
                  [xself]
                    memory > xexpected
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xf.write
                            [xself xa xb]
                              seq > @
                                (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xExample)) 0).xf)) (1) (2))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xExample).xf)) ((((xExample)) 0)) (1) (2))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((xExample).xf)) (1) (2))
                        xexpected.write "f() got some positional-only arguments passed as keyword arguments: 'b'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) (((((xExample)) 0).xf)) (1) (2))
                xtest_mangling.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                          xf.write
                            [xself x__a]
                              seq > @
                                (((unsupported)) 0)
                                  (((unsupported)) ((x__a)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xX)) 0).xf)) 0)) (42))
                xtest_module_function.write
                  [xself]
                    seq > @
                      (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 2 required positional arguments: 'a' and 'b'"))))
                        bogusForceDataize.write (((xglobal_pos_only_f)) 0)
                xtest_closures.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx xy]
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  [xx2 xy2]
                                    seq > @
                                      (((unsupported)) (((((xx).add (xy)).add (xx2)).add (xy2))))
                                (((unsupported)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xf)) (1) (2))) (3) (4))) (10))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("g() missing 1 required positional argument: 'y2'"))))
                          bogusForceDataize.write (((((xf)) (1) (2))) (3))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("g() takes 2 positional arguments but 3 were given"))))
                          bogusForceDataize.write (((((xf)) (1) (2))) (3) (4) (5))
                        xf.write
                          [xx xy]
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  [xx2 xy2]
                                    seq > @
                                      (((unsupported)) (((((xx).add (xy)).add (xx2)).add (xy2))))
                                (((unsupported)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xf)) (1) (2))) (3) (4))) (10))
                        xf.write
                          [xx xy]
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  [xx2 xy2]
                                    seq > @
                                      (((unsupported)) (((((xx).add (xy)).add (xx2)).add (xy2))))
                                (((unsupported)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xf)) (1) (2))) (3) (4))) (10))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("g() missing 1 required positional argument: 'y2'"))))
                          bogusForceDataize.write (((((xf)) (1) (2))) (3))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("g() takes 2 positional arguments but 3 were given"))))
                          bogusForceDataize.write (((((xf)) (1) (2))) (3) (4) (5))
                xtest_same_keyword_as_positional_with_kwargs.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xsomething]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xsomething)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xf)) (42) (42))) ((((unsupported)) (42) ((((unsupported)) ("something") (42))))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() missing 1 required positional argument: 'something'"))))
                          (((unsupported)) ((xf)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xf)) (42))) ((((unsupported)) (42) ((((unsupported)) 0)))))
                xtest_mangling.write
                  [xself]
                    memory > xf3
                    memory > xf2
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            xf.write
                              [xself x__a]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((x__a)))
                            xf2.write
                              [xself x__a x__b]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) ((x__a)) ((x__b)))))
                            xf3.write
                              [xself x__a x__b x__c]
                                seq > @
                                  (((unsupported)) 0)
                                    (((unsupported)) ((((unsupported)) ((x__a)) ((x__b)) ((x__c)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xX)) 0).xf)) 0)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xX)) 0).xf2)) 0)) ((((unsupported)) (42) (43))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xX)) 0).xf3)) 0)) ((((unsupported)) (42) (43) (44))))
                xtest_too_many_arguments.write
                  [xself]
                    memory > xfundef
                    seq > @
                      seq
                        xfundef.write ("def f(%s, /):n  passn".mod (((", ".xjoin)) ((((unsupported)) (("i%d".mod (xi))) ((xi)) ((((xrange)) (300)))))))
                        bogusForceDataize.write (((xcompile)) ((xfundef)) ("<test>") ("single"))
                xtest_serialization.write
                  [xself]
                    memory > xunpickled_optional
                    memory > xpickled_posonly
                    memory > xpickled_optional
                    memory > xunpickled_defaults
                    memory > xpickled_defaults
                    memory > xunpickled_posonly
                    memory > xexpected
                    seq > @
                      seq
                        xpickled_posonly.write ((((xpickle).xdumps)) ((xglobal_pos_only_f)))
                        xpickled_optional.write ((((xpickle).xdumps)) ((xglobal_pos_only_and_normal)))
                        xpickled_defaults.write ((((xpickle).xdumps)) ((xglobal_pos_only_defaults)))
                        xunpickled_posonly.write ((((xpickle).xloads)) ((xpickled_posonly)))
                        xunpickled_optional.write ((((xpickle).xloads)) ((xpickled_optional)))
                        xunpickled_defaults.write ((((xpickle).xloads)) ((xpickled_defaults)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xunpickled_posonly)) (1) (2))) ((((unsupported)) (1) (2))))
                        xexpected.write "global_pos_only_f() got some positional-only arguments passed as keyword arguments: 'a, b'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xunpickled_posonly)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xunpickled_optional)) (1) (2))) ((((unsupported)) (1) (2))))
                        xexpected.write "global_pos_only_and_normal() got some positional-only arguments passed as keyword arguments: 'a'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xunpickled_optional)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xunpickled_defaults)) 0)) ((((unsupported)) (1) (2))))
                        xexpected.write "global_pos_only_defaults() got some positional-only arguments passed as keyword arguments: 'a'"
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ((xexpected)))))
                          (((unsupported)) ((xunpickled_defaults)) (1) (2))
                xtest_async.write
                  [xself]
                    memory > x_check_call
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'a'"))))
                          (((unsupported)) ((xf)) (1) (2))
                        x_check_call.write
                          []
                            memory > xresult
                            memory > xcoro
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xStopIteration)))
                                  seq
                                    xcoro.write (((xf)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((xkwargs)))))
                                    bogusForceDataize.write ((((xcoro).xsend)) ("None: is there a None literal in the EO language?"))
                                  xresult.write ((xe).xvalue)
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write (((x_check_call)) (1) (2))
                        (((unsupported)) ((x_check_call)) (1) (2))
                        bogusForceDataize.write (((x_check_call)) (1))
                        bogusForceDataize.write (((x_check_call)) 0)
                xtest_generator.write
                  [xself]
                    memory > xgen
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xa)) ((xb)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("f() got some positional-only arguments passed as keyword arguments: 'a'"))))
                          (((unsupported)) ((xf)) (1) (2))
                        xgen.write (((xf)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgen)))) ((((unsupported)) (1) (2))))
                        xgen.write (((unsupported)) ((xf)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgen)))) ((((unsupported)) (1) (2))))
                        xgen.write (((xf)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgen)))) ((((unsupported)) (1) (2))))
                        xgen.write (((xf)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xgen)))) ((((unsupported)) (1) (2))))
                xtest_super.write
                  [xself]
                    memory > xmethod
                    memory > xsentinel
                    seq > @
                      seq
                        xsentinel.write (((xobject)) 0)
                        (((unsupported)) 0)
                          xmethod.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xsentinel)))
                        (((unsupported)) ((xA)))
                          xmethod.write
                            [xself]
                              seq > @
                                (((unsupported)) (((((((xsuper)) 0).xmethod)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((xC)) 0).xmethod)) 0)) ((xsentinel)))
                xtest_annotations.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((((xglobal_inner_has_pos_only)) 0).x__annotations__).eq (((unsupported)) ("x") ((xint))))))
                xtest_annotations_constant_fold.write
                  [xself]
                    memory > xcodes
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            memory > xf
                            seq > @
                              xf.write
                                [xx]
                                  seq > @
                                    (((unsupported)) 0)
                                      (((unsupported)) 0)
                        xcodes.write (((unsupported)) ((((unsupported)) (((xi).xopname)) (((xi).xargval)))) ((xi)) (((((xdis).xget_instructions)) ((xg)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ((((unsupported)) ("UNARY_NOT") ("None: is there a None literal in the EO language?"))) ((xcodes)))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) ("COMPARE_OP") ("is not"))) ((xcodes)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)