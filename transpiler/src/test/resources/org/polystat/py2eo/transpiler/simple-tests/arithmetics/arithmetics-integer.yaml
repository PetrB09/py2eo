enabled: True
python: |
  def arithmetics_integer():
    pow = 10 ** 2 == 100
    uminus = (-1) == (0 - 1)
    uplus = 1 == (+1)
    uneg = (~1) & 7 == 6
    mul = (10 * 10 == 100)
    div = (100 // 11 == 9)
    rem = (100 % 11 == 1)
    add = (1 + 10 == 11)
    sub = (10 - 1 == 9)
    shl = (1 << 1 == 2)
    shr = (3 >> 1 == 1)
    andd = (0b1101 & 0b0110) == 0b100
    orr = (0b1010 | 0b1100) == 0b1110
    xorr = 0b10 ^ 0b11 == 1
    # de Morgan is used here to test logical not and or together with and
    return not ((not pow) or (not uminus)) and uplus and uneg and mul and div and rem and add and sub and shl and shr and andd and orr and xorr

  # assert(arithmetics_integer())
