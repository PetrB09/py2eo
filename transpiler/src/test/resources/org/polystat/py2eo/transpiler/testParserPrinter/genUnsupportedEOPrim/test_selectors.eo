memory > xcm
memory > xlist
memory > xBaseSelectorTestCase
memory > xsoft
memory > xrange
memory > xhard
memory > xtempfile
memory > xrandom
memory > xKqueueSelectorTestCase
memory > xunittest
memory > xevents
memory > xInterruptSelect
memory > xmin
memory > xImportError
memory > xRuntimeError
memory > xSelectSelectorTestCase
memory > xwr2
memory > xValueError
memory > xsignal
memory > xerrno
memory > xDefaultSelectorTestCase
memory > xwr
memory > xsocket
memory > xDevpollSelectorTestCase
memory > xIOError
memory > xZeroDivisionError
memory > xsleep
memory > xl
memory > xKeyError
memory > xf
memory > xw
memory > xint
memory > xException
memory > xr
memory > xhasattr
memory > xScalableSelectorMixIn
memory > xi
memory > xsupport
memory > xsys
memory > xsel
memory > xm
memory > xrd2
memory > xOSError
memory > xEpollSelectorTestCase
memory > xos
memory > xrd
memory > xgetattr
memory > xPollSelectorTestCase
memory > xe
memory > xobject
memory > xaddr
memory > xisinstance
memory > xlen
memory > xselectors
memory > xTypeError
memory > x__name__
memory > xkey
memory > xa
[] > test_selectors
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_unregister
        memory > xtest_unregister_after_socket_close
        memory > xtest_main
        memory > xfind_ready_matching
        memory > xtest_modify
        memory > xtime
        memory > xtest_above_fd_setsize
        memory > xtest_modify_unregister
        memory > xtest_unregister_after_fd_close
        memory > xtest_select_interrupt_noraise
        memory > xtest_selector
        memory > xtest_timeout
        memory > xtest_fileno
        memory > xtest_register_bad_fd
        memory > xtest_select
        memory > xtest_empty_select
        memory > xmake_socketpair
        memory > xtest_close
        memory > xtest_register
        memory > xtest_select_interrupt_exc
        memory > xtest_unregister_after_fd_close_and_reuse
        memory > xresource
        memory > xtest_context_manager
        memory > xtest_register_file
        memory > xsocketpair
        memory > xSELECTOR
        memory > xtest_get_key
        memory > xtest_get_map
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) ((xImportError)))
              (((unsupported)) 0)
              xresource.write "None: is there a None literal in the EO language?"
            (((xhasattr)) ((xsocket)) ("socketpair")).if
              xsocketpair.write ((xsocket).xsocketpair)
              xsocketpair.write
                [xfamily xtype xproto]
                  memory > xc
                  memory > xcaddr
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) (((((xsocket).xsocket)) ((xfamily)) ((xtype)) ((xproto)))) ((xl)))
                        seq
                          bogusForceDataize.write ((((xl).xbind)) ((((unsupported)) (((xsupport).xHOST)) (0))))
                          bogusForceDataize.write ((((xl).xlisten)) 0)
                          xc.write ((((xsocket).xsocket)) ((xfamily)) ((xtype)) ((xproto)))
                          (((unsupported)) ((xOSError)))
                            seq
                              bogusForceDataize.write ((((xc).xconnect)) (((((xl).xgetsockname)) 0)))
                              xcaddr.write ((((xc).xgetsockname)) 0)
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    seq
                                      (((unsupported)) ((((unsupported)) ((xa)) ((xaddr)))) (((((xl).xaccept)) 0)))
                                      ((xaddr).eq (xcaddr)).if
                                        (((unsupported)) ((((unsupported)) ((xc)) ((xa)))))
                                      bogusForceDataize.write ((((xa).xclose)) 0)
                            seq
                              bogusForceDataize.write ((((xc).xclose)) 0)
                              (((unsupported)) 0)
            xfind_ready_matching.write
              [xready xflag]
                memory > xmatch
                seq > @
                  seq
                    xmatch.write (((unsupported)) 0)
                    (((unsupported)) ((((unsupported)) ((xkey)) ((xevents)))) ((xready)))
                      ((xevents).and (xflag)).if
                        bogusForceDataize.write ((((xmatch).xappend)) (((xkey).xfileobj)))
                    (((unsupported)) ((xmatch)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmake_socketpair.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) ((((xsocketpair)) 0)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xrd).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xwr).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))))
                xtest_register.write
                  [xself]
                    memory > xs
                    memory > xkey
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        xkey.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)) ("data"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) ((xkey)) (((xselectors).xSelectorKey)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey).xfileobj)) ((xrd)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey).xfd)) (((((xrd).xfileno)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey).xevents)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey).xdata)) ("data"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xregister)) (0) (999999))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) (((xs).xregister)) ((10.neg)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xregister)) (((((xrd).xfileno)) 0)) (((xselectors).xEVENT_READ)))
                xtest_unregister.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xs).xunregister)) ((xrd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xunregister)) (999999))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xunregister)) ((xrd)))
                xtest_unregister_after_fd_close.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) ((((unsupported)) (((((xrd).xfileno)) 0)) (((((xwr).xfileno)) 0)))))
                        bogusForceDataize.write ((((xs).xregister)) ((xr)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xs).xregister)) ((xw)) (((xselectors).xEVENT_WRITE)))
                        bogusForceDataize.write ((((xrd).xclose)) 0)
                        bogusForceDataize.write ((((xwr).xclose)) 0)
                        bogusForceDataize.write ((((xs).xunregister)) ((xr)))
                        bogusForceDataize.write ((((xs).xunregister)) ((xw)))
                xtest_unregister_after_fd_close_and_reuse.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        (((unsupported)) ((((unsupported)) ((xr)) ((xw)))) ((((unsupported)) (((((xrd).xfileno)) 0)) (((((xwr).xfileno)) 0)))))
                        bogusForceDataize.write ((((xs).xregister)) ((xr)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xs).xregister)) ((xw)) (((xselectors).xEVENT_WRITE)))
                        (((unsupported)) ((((unsupported)) ((xrd2)) ((xwr2)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xrd).xclose)) 0)
                        bogusForceDataize.write ((((xwr).xclose)) 0)
                        bogusForceDataize.write ((((xos).xdup2)) (((((xrd2).xfileno)) 0)) ((xr)))
                        bogusForceDataize.write ((((xos).xdup2)) (((((xwr2).xfileno)) 0)) ((xw)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xr)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xos).xclose)) ((xw)))
                        bogusForceDataize.write ((((xs).xunregister)) ((xr)))
                        bogusForceDataize.write ((((xs).xunregister)) ((xw)))
                xtest_unregister_after_socket_close.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                        bogusForceDataize.write ((((xrd).xclose)) 0)
                        bogusForceDataize.write ((((xwr).xclose)) 0)
                        bogusForceDataize.write ((((xs).xunregister)) ((xrd)))
                        bogusForceDataize.write ((((xs).xunregister)) ((xwr)))
                xtest_modify.write
                  [xself]
                    memory > xkey2
                    memory > xd2
                    memory > xd3
                    memory > xs
                    memory > xd1
                    memory > xkey
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        xkey.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        xkey2.write ((((xs).xmodify)) ((xrd)) (((xselectors).xEVENT_WRITE)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xkey).xevents)) (((xkey2).xevents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkey2)) (((((xs).xget_key)) ((xrd)))))
                        bogusForceDataize.write ((((xs).xunregister)) ((xrd)))
                        xd1.write (((xobject)) 0)
                        xd2.write (((xobject)) 0)
                        xkey.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)) ((xd1)))
                        xkey2.write ((((xs).xmodify)) ((xrd)) (((xselectors).xEVENT_READ)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey).xevents)) (((xkey2).xevents)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) (((xkey).xdata)) (((xkey2).xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkey2)) (((((xs).xget_key)) ((xrd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xkey2).xdata)) ((xd2)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xmodify)) (999999) (((xselectors).xEVENT_READ)))
                        xd3.write (((xobject)) 0)
                        (((unsupported)) (((xs).xregister)) ((((((xunittest).xmock).xMock)) 0)))
                        (((unsupported)) (((xs).xunregister)) ((((((xunittest).xmock).xMock)) 0)))
                        bogusForceDataize.write ((((xs).xmodify)) ((xrd)) (((xselectors).xEVENT_READ)) ((xd3)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xs).xregister).xcalled)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((xs).xunregister).xcalled)))
                xtest_modify_unregister.write
                  [xself]
                    memory > xs
                    memory > xpatch
                    seq > @
                      seq
                        ((((xself).xSELECTOR).x__name__).eq "EpollSelector").if
                          xpatch.write (((((xunittest).xmock).xpatch)) ("selectors.EpollSelector._selector_cls"))
                          ((((xself).xSELECTOR).x__name__).eq "PollSelector").if
                            xpatch.write (((((xunittest).xmock).xpatch)) ("selectors.PollSelector._selector_cls"))
                            ((((xself).xSELECTOR).x__name__).eq "DevpollSelector").if
                              xpatch.write (((((xunittest).xmock).xpatch)) ("selectors.DevpollSelector._selector_cls"))
                              (((unsupported)) (((((xself).xskipTest)) (""))))
                        (((unsupported)) ((xpatch)) ((xm)))
                          seq
                            (((unsupported)) ((((xm).xreturn_value).xmodify)) ((((unsupported)) ((((xunittest).xmock).xMock)) ((xZeroDivisionError)))))
                            xs.write ((((xself).xSELECTOR)) 0)
                            bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                            (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                            bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xs).x_map)))) (1))
                            (((unsupported)) (((((xself).xassertRaises)) ((xZeroDivisionError)))))
                              bogusForceDataize.write ((((xs).xmodify)) ((xrd)) (((xselectors).xEVENT_WRITE)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((xs).x_map)))) (0))
                xtest_close.write
                  [xself]
                    memory > xs
                    memory > xmapping
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        xmapping.write ((((xs).xget_map)) 0)
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                        bogusForceDataize.write ((((xs).xclose)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xget_key)) ((xrd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xget_key)) ((xwr)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xmapping).x__getitem__)) ((xrd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xmapping).x__getitem__)) ((xwr)))
                xtest_get_key.write
                  [xself]
                    memory > xs
                    memory > xkey
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        xkey.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)) ("data"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkey)) (((((xs).xget_key)) ((xrd)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xKeyError)) (((xs).xget_key)) (999999))
                xtest_get_map.write
                  [xself]
                    memory > xkeys
                    memory > xs
                    memory > xkey
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        xkeys.write ((((xs).xget_map)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xkeys)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xkeys)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xkeys)))) ((((unsupported)) 0)))
                        xkey.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)) ("data"))
                        bogusForceDataize.write ((((xself).xassertIn)) ((xrd)) ((xkeys)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xkey)) ((((unsupported)) ((xkeys)) ((xrd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xkeys)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xkeys)))) ((((unsupported)) (((((xrd).xfileno)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xkeys).xvalues)) 0)))) ((((unsupported)) ((xkey)))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                          (((unsupported)) ((xkeys)) (999999))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          (((unsupported)) ((((unsupported)) ((((unsupported)) ((xkeys)) ((xrd)))))))
                xtest_select.write
                  [xself]
                    memory > xs
                    memory > xresult
                    memory > xwr_key
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        xwr_key.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                        xresult.write ((((xs).xselect)) 0)
                        (((unsupported)) ((((unsupported)) ((xkey)) ((xevents)))) ((xresult)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xkey)) (((xselectors).xSelectorKey)))))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((xevents)))
                            bogusForceDataize.write ((((xself).xassertFalse)) (((xevents).and ((((xselectors).xEVENT_READ).or ((xselectors).xEVENT_WRITE)).neg))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xwr_key)) (((xselectors).xEVENT_WRITE)))))) ((xresult)))
                xtest_context_manager.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        (((unsupported)) ((xs)) ((xsel)))
                          seq
                            bogusForceDataize.write ((((xsel).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                            bogusForceDataize.write ((((xsel).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xget_key)) ((xrd)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) (((xs).xget_key)) ((xwr)))
                xtest_fileno.write
                  [xself]
                    memory > xs
                    memory > xfd
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((xhasattr)) ((xs)) ("fileno")).if
                          seq
                            xfd.write ((((xs).xfileno)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((xisinstance)) ((xfd)) ((xint)))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) ((xfd)) (0))
                xtest_selector.write
                  [xself]
                    memory > xwr
                    memory > xready_readers
                    memory > xready
                    memory > xreaders
                    memory > xbuf
                    memory > xrd
                    memory > xMSG
                    memory > xw2r
                    memory > xMSG_LEN
                    memory > xNUM_SOCKETS
                    memory > xready_writers
                    memory > xr2w
                    memory > xwriters
                    memory > xbufs
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        xNUM_SOCKETS.write 12
                        xMSG.write " This is a test."
                        xMSG_LEN.write (((xlen)) ((xMSG)))
                        xreaders.write (((unsupported)) 0)
                        xwriters.write (((unsupported)) 0)
                        xr2w.write (((unsupported)) 0)
                        xw2r.write (((unsupported)) 0)
                        (((unsupported)) ((xi)) ((((xrange)) ((xNUM_SOCKETS)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                            bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                            bogusForceDataize.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                            bogusForceDataize.write ((((xreaders).xappend)) ((xrd)))
                            bogusForceDataize.write ((((xwriters).xappend)) ((xwr)))
                            (((unsupported)) ((((unsupported)) ((xr2w)) ((xrd)))) ((xwr)))
                            (((unsupported)) ((((unsupported)) ((xw2r)) ((xwr)))) ((xrd)))
                        xbufs.write (((unsupported)) 0)
                        while.
                          (xwriters)
                          [unused]
                            seq > @
                              seq
                                xready.write ((((xs).xselect)) 0)
                                xready_writers.write (((xfind_ready_matching)) ((xready)) (((xselectors).xEVENT_WRITE)))
                                ((xready_writers).not).if
                                  bogusForceDataize.write ((((xself).xfail)) ("no sockets ready for writing"))
                                xwr.write ((((xrandom).xchoice)) ((xready_writers)))
                                bogusForceDataize.write ((((xwr).xsend)) ((xMSG)))
                                (((unsupported)) ((xi)) ((((xrange)) (10))))
                                  seq
                                    xready.write ((((xs).xselect)) 0)
                                    xready_readers.write (((xfind_ready_matching)) ((xready)) (((xselectors).xEVENT_READ)))
                                    (xready_readers).if
                                      (((unsupported)) 0)
                                    bogusForceDataize.write (((xsleep)) (0.1))
                                  bogusForceDataize.write ((((xself).xfail)) ("no sockets ready for reading"))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((unsupported)) ((xw2r)) ((xwr)))))) ((xready_readers)))
                                xrd.write (((unsupported)) ((xready_readers)) (0))
                                xbuf.write ((((xrd).xrecv)) ((xMSG_LEN)))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xbuf)))) ((xMSG_LEN)))
                                bogusForceDataize.write ((((xbufs).xappend)) ((xbuf)))
                                bogusForceDataize.write ((((xs).xunregister)) ((((unsupported)) ((xr2w)) ((xrd)))))
                                bogusForceDataize.write ((((xs).xunregister)) ((xrd)))
                                bogusForceDataize.write ((((xwriters).xremove)) ((((unsupported)) ((xr2w)) ((xrd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xbufs)) (((((unsupported)) ((xMSG))).mul (xNUM_SOCKETS))))
                xtest_empty_select.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) (((xs).xselect)) (0))) ((((unsupported)) 0)))
                xtest_timeout.write
                  [xself]
                    memory > xt
                    memory > xdt
                    memory > xs
                    memory > xt0
                    memory > xt1
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        bogusForceDataize.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                        xt.write (((xtime)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((((xs).xselect)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((((xs).xselect)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xtime)) 0).sub (xt))) (0.5))
                        bogusForceDataize.write ((((xs).xunregister)) ((xwr)))
                        bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                        xt.write (((xtime)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xselect)) (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xselect)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertLess)) (((((xtime)) 0).sub (xt))) (0.5))
                        xt0.write (((xtime)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xselect)) (1))))
                        xt1.write (((xtime)) 0)
                        xdt.write ((xt1).sub (xt0))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) (0.8) ((xdt)) (2.0))) ((xdt)))
                xtest_select_interrupt_exc.write
                  [xself]
                    memory > xs
                    memory > xhandler
                    memory > xorig_alrm_handler
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        (((unsupported)) ((xException)))
                        xhandler.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xInterruptSelect)))
                        xorig_alrm_handler.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xhandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xorig_alrm_handler)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                            xt.write (((xtime)) 0)
                            (((unsupported)) (((((xself).xassertRaises)) ((xInterruptSelect)))))
                              bogusForceDataize.write ((((xs).xselect)) (30))
                            bogusForceDataize.write ((((xself).xassertLess)) (((((xtime)) 0).sub (xt))) (5.0))
                          bogusForceDataize.write ((((xsignal).xalarm)) (0))
                xtest_select_interrupt_noraise.write
                  [xself]
                    memory > xs
                    memory > xorig_alrm_handler
                    memory > xt
                    seq > @
                      (((unsupported)) 0)
                        xs.write ((((xself).xSELECTOR)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                        (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                        xorig_alrm_handler.write ((((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)) (((xsignal).xsignal)) (((xsignal).xSIGALRM)) ((xorig_alrm_handler)))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)) (1))
                            bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                            xt.write (((xtime)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) (((((xs).xselect)) (1.5))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)) (((((xtime)) 0).sub (xt))) (1.0))
                          bogusForceDataize.write ((((xsignal).xalarm)) (0))
            (((unsupported)) 0)
              xtest_above_fd_setsize.write
                [xself]
                  memory > xs
                  memory > xNUM_FDS
                  memory > xfds
                  seq > @
                    (((unsupported)) 0)
                      (((unsupported)) ((((unsupported)) ((xsoft)) ((xhard)))) (((((xresource).xgetrlimit)) (((xresource).xRLIMIT_NOFILE)))))
                      (((unsupported)) ((((unsupported)) ((xOSError)) ((xValueError)))))
                        seq
                          bogusForceDataize.write ((((xresource).xsetrlimit)) (((xresource).xRLIMIT_NOFILE)) ((((unsupported)) ((xhard)) ((xhard)))))
                          bogusForceDataize.write ((((xself).xaddCleanup)) (((xresource).xsetrlimit)) (((xresource).xRLIMIT_NOFILE)) ((((unsupported)) ((xsoft)) ((xhard)))))
                          xNUM_FDS.write (((xmin)) ((xhard)) ((((unsupported)) (2) (16))))
                        xNUM_FDS.write (xsoft)
                      (((unsupported)) ((xNUM_FDS)) (32))
                      xs.write ((((xself).xSELECTOR)) 0)
                      bogusForceDataize.write ((((xself).xaddCleanup)) (((xs).xclose)))
                      (((unsupported)) ((xi)) ((((xrange)) ((((unsupported)) ((xNUM_FDS)) (2))))))
                        seq
                          (((unsupported)) ((xOSError)))
                            (((unsupported)) ((((unsupported)) ((xrd)) ((xwr)))) (((((xself).xmake_socketpair)) 0)))
                            bogusForceDataize.write ((((xself).xskipTest)) ("FD limit reached"))
                          (((unsupported)) ((xOSError)))
                            seq
                              bogusForceDataize.write ((((xs).xregister)) ((xrd)) (((xselectors).xEVENT_READ)))
                              bogusForceDataize.write ((((xs).xregister)) ((xwr)) (((xselectors).xEVENT_WRITE)))
                            seq
                              (((xe).xerrno).eq ((xerrno).xENOSPC)).if
                                bogusForceDataize.write ((((xself).xskipTest)) ("FD limit reached"))
                              (((unsupported)) 0)
                      (((unsupported)) ((xOSError)))
                        xfds.write ((((xs).xselect)) 0)
                        seq
                          ((((xe).xerrno).eq ((xerrno).xEINVAL)).and (((xsys).xplatform).eq "darwin")).if
                            bogusForceDataize.write ((((xself).xskipTest)) ("Invalid argument error calling poll()"))
                          (((unsupported)) 0)
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xNUM_FDS)) (2))) ((((xlen)) ((xfds)))))
            (((unsupported)) ((xBaseSelectorTestCase)))
              xSELECTOR.write ((xselectors).xDefaultSelector)
            (((unsupported)) ((xBaseSelectorTestCase)))
              xSELECTOR.write ((xselectors).xSelectSelector)
            (((unsupported)) ((xBaseSelectorTestCase)) ((xScalableSelectorMixIn)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselectors)) ("PollSelector"))) ("Test needs selectors.PollSelector"))))
              xSELECTOR.write (((xgetattr)) ((xselectors)) ("PollSelector") ("None: is there a None literal in the EO language?"))
            (((unsupported)) ((xBaseSelectorTestCase)) ((xScalableSelectorMixIn)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselectors)) ("EpollSelector"))) ("Test needs selectors.EpollSelector"))))
              seq
                xSELECTOR.write (((xgetattr)) ((xselectors)) ("EpollSelector") ("None: is there a None literal in the EO language?"))
                xtest_register_file.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        (((unsupported)) (((((xtempfile).xNamedTemporaryFile)) 0)) ((xf)))
                          seq
                            (((unsupported)) (((((xself).xassertRaises)) ((xIOError)))))
                              bogusForceDataize.write ((((xs).xregister)) ((xf)) (((xselectors).xEVENT_READ)))
                            (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                              bogusForceDataize.write ((((xs).xget_key)) ((xf)))
            (((unsupported)) ((xBaseSelectorTestCase)) ((xScalableSelectorMixIn)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselectors)) ("KqueueSelector"))) ("Test needs selectors.KqueueSelector)"))))
              seq
                xSELECTOR.write (((xgetattr)) ((xselectors)) ("KqueueSelector") ("None: is there a None literal in the EO language?"))
                xtest_register_bad_fd.write
                  [xself]
                    memory > xs
                    memory > xbad_f
                    seq > @
                      seq
                        xs.write ((((xself).xSELECTOR)) 0)
                        xbad_f.write ((((xsupport).xmake_bad_fd)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xs).xregister)) ((xbad_f)) (((xselectors).xEVENT_READ)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xcm).xexception).xerrno)) (((xerrno).xEBADF)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xKeyError)))))
                          bogusForceDataize.write ((((xs).xget_key)) ((xbad_f)))
            (((unsupported)) ((xBaseSelectorTestCase)) ((xScalableSelectorMixIn)) (((((xunittest).xskipUnless)) ((((xhasattr)) ((xselectors)) ("DevpollSelector"))) ("Test needs selectors.DevpollSelector"))))
              xSELECTOR.write (((xgetattr)) ((xselectors)) ("DevpollSelector") ("None: is there a None literal in the EO language?"))
            xtest_main.write
              []
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)) ((xDefaultSelectorTestCase)) ((xSelectSelectorTestCase)) ((xPollSelectorTestCase)) ((xEpollSelectorTestCase)) ((xKqueueSelectorTestCase)) ((xDevpollSelectorTestCase)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtests)))))
                    bogusForceDataize.write ((((xsupport).xreap_children)) 0)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)) 0)