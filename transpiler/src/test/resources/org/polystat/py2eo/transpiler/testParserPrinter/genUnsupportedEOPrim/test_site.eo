memory > xcopy
memory > xImportError
memory > xdata
memory > xlicense
memory > xrange
memory > xhasattr
memory > xmock_isdir
memory > xPermissionError
memory > xexc
memory > xsite
memory > xpth_file
memory > xabs_dir
memory > xpth_dir
memory > xstr
memory > xerr_out
memory > xvalue
memory > xtest
memory > xmock_addsitedir
memory > xeval
memory > x_
memory > xurllib
memory > xentry
memory > xPthFile
memory > xtempfile
memory > xglob
memory > xopen
memory > xpath
memory > xEnvironmentVarGuard
memory > xprint
memory > xenviron
memory > xf
memory > xset
memory > xrepr
memory > xre
memory > xbuiltins
memory > xsupport
memory > xsys
memory > xstderr
memory > xlocale
memory > xsubprocess
memory > xmock
memory > xos
memory > x_winapi
memory > xe
memory > xnorm_dir
memory > xshutil
memory > xunittest
memory > xobject
memory > xsysconfig
memory > xisinstance
memory > xcaptured_stderr
memory > xline
memory > xlen
memory > xpth_fn
memory > xencodings
memory > x__name__
[] > test_site
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_makepath
        memory > xOLD_SYS_PATH
        memory > xtest_s_option
        memory > xtest_setting_quit
        memory > x_calc_sys_path_for_underpth_nosite
        memory > xtest_startup_interactivehook_isolated_explicit
        memory > xtest_license_exists_at_url
        memory > xtest_addpackage_import_bad_syntax
        memory > xsetUpModule
        memory > xtest_underpth_nosite_file
        memory > xtest_startup_imports
        memory > xtest_no_duplicate_paths
        memory > x_create_underpth_exe
        memory > xtest_setting_help
        memory > xtest_get_path
        memory > xtest_aliasing_mbcs
        memory > xtest_underpth_file
        memory > xtearDownModule
        memory > xsetUp
        memory > xtest_sitecustomize_executed
        memory > xtest_abs_paths_cached_None
        memory > xtest_addpackage
        memory > xtest_getusersitepackages
        memory > xtest_getuserbase
        memory > xtest_init_pathinfo
        memory > xtest_setting_copyright
        memory > xtest_add_build_dir
        memory > xtest_startup_interactivehook
        memory > xtest_addpackage_import_bad_exec
        memory > xtest_addpackage_import_bad_pth_file
        memory > x__init__
        memory > xtest_no_home_directory
        memory > xtest_startup_interactivehook_isolated
        memory > xcleanup
        memory > xtest__getuserbase
        memory > xtest_underpth_dll_file
        memory > xtest_getsitepackages
        memory > xcreate
        memory > xtearDown
        memory > xtest_addsitedir
        memory > xpth_file_tests
        memory > xmake_pth
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            seq
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
              (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((xsys).xflags).xno_site).if
              (((unsupported)) (((((xunittest).xSkipTest)) ("Python was invoked with -S"))))
            (((unsupported)) 0)
            xOLD_SYS_PATH.write "None: is there a None literal in the EO language?"
            xsetUpModule.write
              []
                memory > xOLD_SYS_PATH
                seq > @
                  seq
                    (((unsupported)) 0)
                    xOLD_SYS_PATH.write (((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))
                    (((xsite).xENABLE_USER_SITE).and ((((((xos).xpath).xisdir)) (((xsite).xUSER_SITE))).not)).if
                      (((unsupported)) ((xPermissionError)))
                        seq
                          bogusForceDataize.write ((((xos).xmakedirs)) (((xsite).xUSER_SITE)))
                          bogusForceDataize.write ((((xsite).xaddsitedir)) (((xsite).xUSER_SITE)))
                        (((unsupported)) (((((xunittest).xSkipTest)) (("unable to create user site directory (%r): %s".mod (((unsupported)) (((xsite).xUSER_SITE)) ((xexc))))))))
            xtearDownModule.write
              []
                seq > @
                  (((unsupported)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))) ((xOLD_SYS_PATH)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                (((unsupported)) 0)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).xsys_path)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))))
                        (((unsupported)) (((xself).xold_base)) (((xsite).xUSER_BASE)))
                        (((unsupported)) (((xself).xold_site)) (((xsite).xUSER_SITE)))
                        (((unsupported)) (((xself).xold_prefixes)) (((xsite).xPREFIXES)))
                        (((unsupported)) (((xself).xoriginal_vars)) (((xsysconfig).x_CONFIG_VARS)))
                        (((unsupported)) (((xself).xold_vars)) ((((xcopy)) (((xsysconfig).x_CONFIG_VARS)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))) (((xself).xsys_path)))
                        (((unsupported)) (((xsite).xUSER_BASE)) (((xself).xold_base)))
                        (((unsupported)) (((xsite).xUSER_SITE)) (((xself).xold_site)))
                        (((unsupported)) (((xsite).xPREFIXES)) (((xself).xold_prefixes)))
                        (((unsupported)) (((xsysconfig).x_CONFIG_VARS)) (((xself).xoriginal_vars)))
                        bogusForceDataize.write (((((xsysconfig).x_CONFIG_VARS).xclear)) 0)
                        bogusForceDataize.write (((((xsysconfig).x_CONFIG_VARS).xupdate)) (((xself).xold_vars)))
                xtest_makepath.write
                  [xself]
                    memory > xoriginal_dir
                    memory > xpath_parts
                    seq > @
                      seq
                        xpath_parts.write (((unsupported)) ("Beginning") ("End"))
                        xoriginal_dir.write (((((xos).xpath).xjoin)) ((((unsupported)) ((xpath_parts)))))
                        (((unsupported)) ((((unsupported)) ((xabs_dir)) ((xnorm_dir)))) (((((xsite).xmakepath)) ((((unsupported)) ((xpath_parts)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xabspath)) ((xoriginal_dir)))) ((xabs_dir)))
                        ((xoriginal_dir).eq (((((xos).xpath).xnormcase)) ((xoriginal_dir)))).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xabs_dir)) ((xnorm_dir)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((((xos).xpath).xnormcase)) ((xabs_dir)))) ((xnorm_dir)))
                xtest_init_pathinfo.write
                  [xself]
                    memory > xdir_set
                    seq > @
                      seq
                        xdir_set.write ((((xsite).x_init_pathinfo)) 0)
                        (((unsupported)) ((xentry)) ((((unsupported)) ((((unsupported)) (((((xsite).xmakepath)) ((xpath)))) (1))) ((xpath)) (((xsys).xpath)) (((xpath).and (((((xos).xpath).xexists)) ((xpath))))))))
                          bogusForceDataize.write ((((xself).xassertIn)) ((xentry)) ((xdir_set)) (("%s from sys.path not found in set returned by _init_pathinfo(): %s".mod (((unsupported)) ((xentry)) ((xdir_set))))))
                xpth_file_tests.write
                  [xself xpth_file]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIn)) (((xpth_file).ximported)) (((xsys).xmodules)) (("%s not in sys.modules".mod ((xpth_file).ximported))))
                        bogusForceDataize.write ((((xself).xassertIn)) ((((unsupported)) (((((xsite).xmakepath)) (((xpth_file).xgood_dir_path)))) (0))) (((xsys).xpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)) ((((((xos).xpath).xexists)) (((xpth_file).xbad_dir_path)))))
                xtest_addpackage.write
                  [xself]
                    memory > xpth_file
                    seq > @
                      seq
                        xpth_file.write (((xPthFile)) 0)
                        (((unsupported)) (((xpth_file).xcleanup)) (TRUE))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xpth_file).xcreate)) 0)
                            bogusForceDataize.write ((((xsite).xaddpackage)) (((xpth_file).xbase_dir)) (((xpth_file).xfilename)) ((((xset)) 0)))
                            bogusForceDataize.write ((((xself).xpth_file_tests)) ((xpth_file)))
                          bogusForceDataize.write ((((xpth_file).xcleanup)) 0)
                xmake_pth.write
                  [xself xcontents xpth_dir xpth_name]
                    memory > xpth_basename
                    memory > xpth_fn
                    seq > @
                      (((unsupported)) 0)
                        xpth_dir.write (((((xos).xpath).xabspath)) ((xpth_dir)))
                        xpth_basename.write ((xpth_name).add ".pth")
                        xpth_fn.write (((((xos).xpath).xjoin)) ((xpth_dir)) ((xpth_basename)))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xpth_fn)) ("w") ("utf-8"))) ((xpth_file)))
                          seq
                            bogusForceDataize.write ((((xself).xaddCleanup)) ((((unsupported)) (((((xos).xremove)) ((xpth_fn)))))))
                            bogusForceDataize.write ((((xpth_file).xwrite)) ((xcontents)))
                        (((unsupported)) ((((unsupported)) ((xpth_dir)) ((xpth_basename)))))
                xtest_addpackage_import_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)) ("import bad-syntaxn"))))
                        (((unsupported)) ((((xcaptured_stderr)) 0)) ((xerr_out)))
                          bogusForceDataize.write ((((xsite).xaddpackage)) ((xpth_dir)) ((xpth_fn)) ((((xset)) 0)))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("line 1"))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) (((((xre).xescape)) ((((((xos).xpath).xjoin)) ((xpth_dir)) ((xpth_fn)))))))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("Traceback"))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("import bad-syntax"))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("SyntaxError"))
                xtest_addpackage_import_bad_exec.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)) ("randompathnimport nosuchmodulen"))))
                        (((unsupported)) ((((xcaptured_stderr)) 0)) ((xerr_out)))
                          bogusForceDataize.write ((((xsite).xaddpackage)) ((xpth_dir)) ((xpth_fn)) ((((xset)) 0)))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("line 2"))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) (((((xre).xescape)) ((((((xos).xpath).xjoin)) ((xpth_dir)) ((xpth_fn)))))))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("Traceback"))
                        bogusForceDataize.write ((((xself).xassertRegex)) (((((xerr_out).xgetvalue)) 0)) ("ModuleNotFoundError"))
                xtest_addpackage_import_bad_pth_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)) ("abcx00defn"))))
                        (((unsupported)) ((((xcaptured_stderr)) 0)) ((xerr_out)))
                          bogusForceDataize.write ((((xself).xassertFalse)) (((((xsite).xaddpackage)) ((xpth_dir)) ((xpth_fn)) ((((xset)) 0)))))
                        (((unsupported)) (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xerr_out).xgetvalue)) 0)) (""))
                        (((unsupported)) ((xpath)) (((xsys).xpath)))
                          (((xisinstance)) ((xpath)) ((xstr))).if
                            bogusForceDataize.write ((((xself).xassertNotIn)) ("abcx00def") ((xpath)))
                xtest_addsitedir.write
                  [xself]
                    memory > xpth_file
                    seq > @
                      seq
                        xpth_file.write (((xPthFile)) 0)
                        (((unsupported)) (((xpth_file).xcleanup)) (TRUE))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xpth_file).xcreate)) 0)
                            bogusForceDataize.write ((((xsite).xaddsitedir)) (((xpth_file).xbase_dir)) ((((xset)) 0)))
                            bogusForceDataize.write ((((xself).xpth_file_tests)) ((xpth_file)))
                          bogusForceDataize.write ((((xpth_file).xcleanup)) 0)
                xtest__getuserbase.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((((xsite).x_getuserbase)) 0)) (((((xsysconfig).x_getuserbase)) 0)))
                xtest_get_path.write
                  [xself]
                    memory > xscheme
                    seq > @
                      seq
                        ((((xsys).xplatform).eq "darwin").and ((xsys).x_framework)).if
                          xscheme.write "osx_framework_user"
                          xscheme.write (((xos).xname).add "_user")
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xsite).x_get_path)) (((((xsite).x_getuserbase)) 0)))) (((((xsysconfig).xget_path)) ("purelib") ((xscheme)))))
                xtest_s_option.write
                  [xself]
                    memory > xenv
                    memory > xusersite
                    memory > xrc
                    seq > @
                      (((unsupported)) 0)
                        xusersite.write ((xsite).xUSER_SITE)
                        bogusForceDataize.write ((((xself).xassertIn)) ((xusersite)) (((xsys).xpath)))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-s") ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        ((xusersite).eq (((unsupported)) (((((xsite).xgetsitepackages)) 0)) (0))).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (0) ("User site still added to path with -s"))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONNOUSERSITE"))) ("1"))
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        ((xusersite).eq (((unsupported)) (((((xsite).xgetsitepackages)) 0)) (0))).if
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (0) ("User site still added to path with PYTHONNOUSERSITE"))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONUSERBASE"))) ("/tmp"))
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys, site; sys.exit(site.USER_BASE.startswith(\"/tmp\"))"))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xrc)) (1) ("User base not set by PYTHONUSERBASE"))
                xtest_getuserbase.write
                  [xself]
                    memory > xuser_base
                    seq > @
                      seq
                        (((unsupported)) (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        xuser_base.write ((((xsite).xgetuserbase)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsite).xUSER_BASE)) ((xuser_base)))
                        (((unsupported)) (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) 0)
                        (((unsupported)) (((xsysconfig).x_CONFIG_VARS)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((xEnvironmentVarGuard)) 0)) ((xenviron)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xenviron)) ("PYTHONUSERBASE"))) ("xoxo"))
                            bogusForceDataize.write ((((xself).xassertTrue)) ((((((((xsite).xgetuserbase)) 0).xstartswith)) ("xoxo"))) (((((xsite).xgetuserbase)) 0)))
                xtest_getusersitepackages.write
                  [xself]
                    memory > xuser_site
                    seq > @
                      seq
                        (((unsupported)) (((xsite).xUSER_SITE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        xuser_site.write ((((xsite).xgetusersitepackages)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsite).xUSER_SITE)) ((xuser_site)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xuser_site).xstartswith)) (((xsite).xUSER_BASE)))) ((xuser_site)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsite).xUSER_BASE)) (((((xsite).xgetuserbase)) 0)))
                xtest_getsitepackages.write
                  [xself]
                    memory > xdirs
                    memory > xwanted
                    seq > @
                      seq
                        (((unsupported)) (((xsite).xPREFIXES)) ((((unsupported)) ("xoxo"))))
                        xdirs.write ((((xsite).xgetsitepackages)) 0)
                        (((xos).xsep).eq "/").if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdirs)))) (1))
                            xwanted.write (((((xos).xpath).xjoin)) ("xoxo") ("lib") (("python%d.%d".mod (((unsupported)) (((xsys).xversion_info)) ((((unsupported)) (2)))))) ("site-packages"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdirs)) (0))) ((xwanted)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xdirs)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdirs)) (0))) ("xoxo"))
                            xwanted.write (((((xos).xpath).xjoin)) ("xoxo") ("lib") ("site-packages"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xdirs)) (1))) ((xwanted)))
                xtest_no_home_directory.write
                  [xself]
                    memory > xuser_site
                    memory > xuser_base
                    memory > xknown_paths
                    seq > @
                      seq
                        (((unsupported)) (((xsite).xUSER_SITE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((((xEnvironmentVarGuard)) 0)) ((xenviron)) (((((xmock).xpatch)) ("os.path.expanduser") ((((unsupported)) ((xpath)))))))
                          seq
                            (((unsupported)) ((((unsupported)) ((((unsupported)) ((xenviron)) ("PYTHONUSERBASE"))))))
                            (((unsupported)) ((((unsupported)) ((((unsupported)) ((xenviron)) ("APPDATA"))))))
                            xuser_base.write ((((xsite).xgetuserbase)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xuser_base).xstartswith)) (("~".add ((xos).xsep))))) ((xuser_base)))
                            xuser_site.write ((((xsite).xgetusersitepackages)) 0)
                            bogusForceDataize.write ((((xself).xassertTrue)) (((((xuser_site).xstartswith)) ((xuser_base)))) ((xuser_site)))
                        (((unsupported)) ((((unsupported)) (((xmock).xpatch)) ("os.path.isdir") (FALSE))) ((xmock_isdir)) ((((((xmock).xpatch).xobject)) ((xsite)) ("addsitedir"))) ((xmock_addsitedir)) (((((xsupport).xswap_attr)) ((xsite)) ("ENABLE_USER_SITE") (TRUE))))
                          seq
                            xknown_paths.write (((xset)) 0)
                            bogusForceDataize.write ((((xsite).xaddusersitepackages)) ((xknown_paths)))
                            bogusForceDataize.write ((((xmock_isdir).xassert_called_once_with)) ((xuser_site)))
                            bogusForceDataize.write ((((xmock_addsitedir).xassert_not_called)) 0)
                            bogusForceDataize.write ((((xself).xassertFalse)) ((xknown_paths)))
            (((unsupported)) ((xobject)))
              seq
                unsupported
                x__init__.write
                  [xself xfilename_base ximported xgood_dirname xbad_dirname]
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        (((unsupported)) (((xself).xfilename)) (((xfilename_base).add ".pth")))
                        (((unsupported)) (((xself).xbase_dir)) ((((((xos).xpath).xabspath)) (""))))
                        (((unsupported)) (((xself).xfile_path)) ((((((xos).xpath).xjoin)) (((xself).xbase_dir)) (((xself).xfilename)))))
                        (((unsupported)) (((xself).ximported)) ((ximported)))
                        (((unsupported)) (((xself).xgood_dirname)) ((xgood_dirname)))
                        (((unsupported)) (((xself).xbad_dirname)) ((xbad_dirname)))
                        (((unsupported)) (((xself).xgood_dir_path)) ((((((xos).xpath).xjoin)) (((xself).xbase_dir)) (((xself).xgood_dirname)))))
                        (((unsupported)) (((xself).xbad_dir_path)) ((((((xos).xpath).xjoin)) (((xself).xbase_dir)) (((xself).xbad_dirname)))))
                xcreate.write
                  [xself]
                    memory > xFILE
                    seq > @
                      seq
                        (((unsupported)) 0)
                        xFILE.write (((xopen)) (((xself).xfile_path)) ("w"))
                        (((unsupported)) 0)
                          seq
                            (((unsupported)) ((xprint)) ("#import @bad module name") ((xFILE)))
                            (((unsupported)) ((xprint)) ("n") ((xFILE)))
                            (((unsupported)) ((xprint)) (("import %s".mod ((xself).ximported))) ((xFILE)))
                            (((unsupported)) ((xprint)) (((xself).xgood_dirname)) ((xFILE)))
                            (((unsupported)) ((xprint)) (((xself).xbad_dirname)) ((xFILE)))
                          bogusForceDataize.write ((((xFILE).xclose)) 0)
                        bogusForceDataize.write ((((xos).xmkdir)) (((xself).xgood_dir_path)))
                xcleanup.write
                  [xself xprep]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        (((((xos).xpath).xexists)) (((xself).xfile_path))).if
                          bogusForceDataize.write ((((xos).xremove)) (((xself).xfile_path)))
                        (xprep).if
                          seq
                            (((unsupported)) (((xself).ximported_module)) ((((((xsys).xmodules).xget)) (((xself).ximported)))))
                            ((xself).ximported_module).if
                              (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xmodules)) (((xself).ximported)))))))
                          ((xself).ximported_module).if
                            (((unsupported)) ((((unsupported)) (((xsys).xmodules)) (((xself).ximported)))) (((xself).ximported_module)))
                        (((((xos).xpath).xexists)) (((xself).xgood_dir_path))).if
                          bogusForceDataize.write ((((xos).xrmdir)) (((xself).xgood_dir_path)))
                        (((((xos).xpath).xexists)) (((xself).xbad_dir_path))).if
                          bogusForceDataize.write ((((xos).xrmdir)) (((xself).xbad_dir_path)))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) (((xself).xsys_path)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)) ((((unsupported)) (((xsys).xpath)) ((((unsupported)) 0)))) (((xself).xsys_path)))
                xtest_abs_paths_cached_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) 0)
                        (((unsupported)) (((((unsupported)) (((xsys).xmodules)) ("test")).x__cached__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xsite).xabs_paths)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) (((((unsupported)) (((xsys).xmodules)) ("test")).x__cached__)))
                xtest_no_duplicate_paths.write
                  [xself]
                    memory > xseen_paths
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsite).xremoveduppaths)) 0)
                        xseen_paths.write (((xset)) 0)
                        (((unsupported)) ((xpath)) (((xsys).xpath)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotIn)) ((xpath)) ((xseen_paths)))
                            bogusForceDataize.write ((((xseen_paths).xadd)) ((xpath)))
                xtest_add_build_dir.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                xtest_setting_quit.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("quit"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("exit"))))
                xtest_setting_copyright.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("copyright"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("credits"))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("license"))))
                xtest_setting_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)) ((((xhasattr)) ((xbuiltins)) ("help"))))
                xtest_aliasing_mbcs.write
                  [xself]
                    seq > @
                      (((xsys).xplatform).eq "win32").if
                        seq
                          (((unsupported)) 0)
                          ((((((unsupported)) (((((xlocale).xgetdefaultlocale)) 0)) (1)).xstartswith)) ("cp")).if
                            (((unsupported)) ((xvalue)) (((((((xencodings).xaliases).xaliases).xvalues)) 0)))
                              ((xvalue).eq "mbcs").if
                                (((unsupported)) 0)
                              bogusForceDataize.write ((((xself).xfail)) ("did not alias mbcs"))
                xtest_sitecustomize_executed.write
                  [xself]
                    seq > @
                      (((unsupported)) ("sitecustomize") (((xsys).xmodules))).if
                        (((unsupported)) ((xImportError)))
                          (((unsupported)) 0)
                          bogusForceDataize.write ((((xself).xfail)) ("sitecustomize not imported automatically"))
                xtest_license_exists_at_url.write
                  [xself]
                    memory > xreq
                    memory > xcode
                    memory > xurl
                    seq > @
                      (((unsupported)) 0)
                        xurl.write (((unsupported)) ((((((xlicense).x_Printer__data).xsplit)) 0)) (1))
                        xreq.write (((unsupported)) ((((xurllib).xrequest).xRequest)) ((xurl)) ("HEAD"))
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xurllib).xrequest).xurlcleanup)))
                        (((unsupported)) ((((xurllib).xerror).xHTTPError)))
                          (((unsupported)) ((((((xtest).xsupport).xtransient_internet)) ((xurl)))))
                            (((unsupported)) ((((((xurllib).xrequest).xurlopen)) ((xreq)))) ((xdata)))
                              xcode.write ((((xdata).xgetcode)) 0)
                          xcode.write ((xe).xcode)
                        (((unsupported)) (((xself).xassertEqual)) ((xcode)) (200) (("Can't find ".add (xurl))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_startup_imports.write
                  [xself]
                    memory > xcollection_mods
                    memory > xmodules
                    memory > xisolated_paths
                    memory > xre_mods
                    memory > xpopen
                    memory > xpth_files
                    memory > xstdout
                    seq > @
                      seq
                        xpopen.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-I") ("-c") ("import sys; print(repr(sys.path))"))) (((xsubprocess).xPIPE)) ("utf-8"))
                        xstdout.write (((unsupported)) (((((xpopen).xcommunicate)) 0)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xpopen).xreturncode)) (0) ((((xrepr)) ((xstdout)))))
                        xisolated_paths.write (((xeval)) ((xstdout)))
                        (((unsupported)) ((xpath)) ((xisolated_paths)))
                          seq
                            xpth_files.write ((((xglob).xglob)) ((((((xos).xpath).xjoin)) (((((xglob).xescape)) ((xpath)))) ("*.pth"))))
                            (xpth_files).if
                              bogusForceDataize.write ((((xself).xskipTest)) ("found {len(pth_files)} .pth files in: {path}"))
                        xpopen.write (((unsupported)) (((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-I") ("-v") ("-c") ("import sys; print(set(sys.modules))"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ("utf-8"))
                        (((unsupported)) ((((unsupported)) ((xstdout)) ((xstderr)))) (((((xpopen).xcommunicate)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xpopen).xreturncode)) (0) ((((unsupported)) ((xstdout)) ((xstderr)))))
                        xmodules.write (((xeval)) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)) ("site") ((xmodules)))
                        xre_mods.write (((unsupported)) ("re") ("_sre") ("sre_compile") ("sre_constants") ("sre_parse"))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xmodules).xintersection)) ((xre_mods)))) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("locale") ((xmodules)) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)) ("copyreg") ((xmodules)) ((xstderr)))
                        xcollection_mods.write ((((((unsupported)) ("_collections") ("collections") ("functools") ("heapq") ("itertools") ("keyword") ("operator") ("reprlib") ("types") ("weakref")).xdifference)) (((xsys).xbuiltin_module_names)))
                        bogusForceDataize.write ((((xself).xassertFalse)) (((((xmodules).xintersection)) ((xcollection_mods)))) ((xstderr)))
                xtest_startup_interactivehook.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xr)) ("'__interactivehook__' not added by site"))
                xtest_startup_interactivehook_isolated.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-I") ("-c") ("import sys; sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertFalse)) ((xr)) ("'__interactivehook__' added in isolated mode"))
                xtest_startup_interactivehook_isolated_explicit.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)) ((((unsupported)) (((xsys).xexecutable)) ("-I") ("-c") ("import site, sys; site.enablerlcompleter(); sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xr)) ("'__interactivehook__' not added by enablerlcompleter()"))
            (((unsupported)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)) ((((xsys).xplatform).eq "win32")) ("only supported on Windows"))))
              seq
                x_create_underpth_exe.write
                  [xself xlines xexe_pth]
                    memory > x_pth_file
                    memory > xexe_file
                    memory > xdll_file
                    memory > xdll_src_file
                    memory > xtemp_dir
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) 0)
                        xtemp_dir.write ((((xtempfile).xmkdtemp)) 0)
                        bogusForceDataize.write ((((xself).xaddCleanup)) ((((xtest).xsupport).xrmtree)) ((xtemp_dir)))
                        xexe_file.write (((((xos).xpath).xjoin)) ((xtemp_dir)) ((((unsupported)) ((((((xos).xpath).xsplit)) (((xsys).xexecutable)))) (1))))
                        xdll_src_file.write ((((x_winapi).xGetModuleFileName)) (((xsys).xdllhandle)))
                        xdll_file.write (((((xos).xpath).xjoin)) ((xtemp_dir)) ((((unsupported)) ((((((xos).xpath).xsplit)) ((xdll_src_file)))) (1))))
                        bogusForceDataize.write ((((xshutil).xcopy)) (((xsys).xexecutable)) ((xexe_file)))
                        bogusForceDataize.write ((((xshutil).xcopy)) ((xdll_src_file)) ((xdll_file)))
                        (xexe_pth).if
                          x_pth_file.write ((((unsupported)) ((((((xos).xpath).xsplitext)) ((xexe_file)))) (0)).add "._pth")
                          x_pth_file.write ((((unsupported)) ((((((xos).xpath).xsplitext)) ((xdll_file)))) (0)).add "._pth")
                        (((unsupported)) ((((xopen)) ((x_pth_file)) ("w"))) ((xf)))
                          (((unsupported)) ((xline)) ((xlines)))
                            (((unsupported)) ((xprint)) ((xline)) ((xf)))
                        (((unsupported)) ((xexe_file)))
                x_calc_sys_path_for_underpth_nosite.write
                  [xself xsys_prefix xlines]
                    memory > xsys_path
                    memory > xabs_path
                    seq > @
                      seq
                        xsys_path.write (((unsupported)) 0)
                        (((unsupported)) ((xline)) ((xlines)))
                          seq
                            (((xline).not).or ((((unsupported)) ((xline)) (0)).eq "#")).if
                              (((unsupported)) 0)
                            xabs_path.write (((((xos).xpath).xabspath)) ((((((xos).xpath).xjoin)) ((xsys_prefix)) ((xline)))))
                            bogusForceDataize.write ((((xsys_path).xappend)) ((xabs_path)))
                        (((unsupported)) ((xsys_path)))
                xtest_underpth_nosite_file.write
                  [xself]
                    memory > xlibpath
                    memory > xpth_lines
                    memory > xsys_path
                    memory > xenv
                    memory > xactual_sys_path
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xoutput
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)) ((((((xos).xpath).xdirname)) (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)) (((xsys).xexecutable)))
                        xpth_lines.write (((unsupported)) ("fake-path-name") ((((unsupported)) ((((unsupported)) ((xlibpath)) ((x_)) ((((xrange)) (200))))))) ("") ("# comment"))
                        xexe_file.write ((((xself).x_create_underpth_exe)) ((xpth_lines)))
                        xsys_path.write ((((xself).x_calc_sys_path_for_underpth_nosite)) ((((((xos).xpath).xdirname)) ((xexe_file)))) ((xpth_lines)))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PATH"))) (((("{};{}".xformat)) ((xexe_prefix)) (((((xos).xgetenv)) ("PATH"))))))
                        xoutput.write (((unsupported)) (((xsubprocess).xcheck_output)) ((((unsupported)) ((xexe_file)) ("-c") ((((unsupported)) 0)))) ((xenv)) ("ansi"))
                        xactual_sys_path.write (((((((xoutput).xrstrip)) 0).xsplit)) ("n"))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xactual_sys_path)) ("sys.flags.no_site was False"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xactual_sys_path)) ((xsys_path)) ("sys.path is incorrect"))
                xtest_underpth_file.write
                  [xself]
                    memory > xrc
                    memory > xlibpath
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xsys_prefix
                    memory > xenv
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)) ((((((xos).xpath).xdirname)) (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)) (((xsys).xexecutable)))
                        xexe_file.write ((((xself).x_create_underpth_exe)) ((((unsupported)) ("fake-path-name") ((((unsupported)) ((((unsupported)) ((xlibpath)) ((x_)) ((((xrange)) (200))))))) ("") ("# comment") ("import site"))))
                        xsys_prefix.write (((((xos).xpath).xdirname)) ((xexe_file)))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PATH"))) (((("{};{}".xformat)) ((xexe_prefix)) (((((xos).xgetenv)) ("PATH"))))))
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) ((xexe_file)) ("-c") (((((unsupported)) 0).mod (((unsupported)) ((((((xos).xpath).xjoin)) ((xsys_prefix)) ("fake-path-name"))) ((xlibpath)) ((((((xos).xpath).xjoin)) ((xsys_prefix)) ("from-env")))))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xrc)) ("sys.path is incorrect"))
                xtest_underpth_dll_file.write
                  [xself]
                    memory > xrc
                    memory > xlibpath
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xsys_prefix
                    memory > xenv
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)) ((((((xos).xpath).xdirname)) (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)) (((xsys).xexecutable)))
                        xexe_file.write (((unsupported)) (((xself).x_create_underpth_exe)) ((((unsupported)) ("fake-path-name") ((((unsupported)) ((((unsupported)) ((xlibpath)) ((x_)) ((((xrange)) (200))))))) ("") ("# comment") ("import site"))) (FALSE))
                        xsys_prefix.write (((((xos).xpath).xdirname)) ((xexe_file)))
                        xenv.write (((((xos).xenviron).xcopy)) 0)
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)) ((((unsupported)) ((xenv)) ("PATH"))) (((("{};{}".xformat)) ((xexe_prefix)) (((((xos).xgetenv)) ("PATH"))))))
                        xrc.write (((unsupported)) (((xsubprocess).xcall)) ((((unsupported)) ((xexe_file)) ("-c") (((((unsupported)) 0).mod (((unsupported)) ((((((xos).xpath).xjoin)) ((xsys_prefix)) ("fake-path-name"))) ((xlibpath)) ((((((xos).xpath).xjoin)) ((xsys_prefix)) ("from-env")))))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((xrc)) ("sys.path is incorrect"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)