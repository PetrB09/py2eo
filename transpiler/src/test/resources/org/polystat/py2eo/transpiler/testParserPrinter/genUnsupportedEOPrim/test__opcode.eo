memory > xrange
memory > xdis
memory > xstack_effect
memory > xmax
memory > xset
memory > xcode
memory > x__name__
memory > xValueError
memory > ximport_module
memory > xname
memory > xunittest
[] > test__opcode
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_stack_effect_jump
        memory > x_opcode
        memory > xtest_stack_effect
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            x_opcode.write (((ximport_module)) ("_opcode"))
            (((unsupported)) 0)
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_stack_effect.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("POP_TOP"))))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("DUP_TOP_TWO"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("BUILD_SLICE"))) (0))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("BUILD_SLICE"))) (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("BUILD_SLICE"))) (3))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) (30000))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("BUILD_SLICE"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((((unsupported)) (((xdis).xopmap)) ("POP_TOP"))) (0))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xcode)))) ((((((xdis).xopmap).xitems)) 0)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)))))
                            ((xcode).less ((xdis).xHAVE_ARGUMENT)).if
                              seq
                                bogusForceDataize.write (((xstack_effect)) ((xcode)))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((xcode)) (0))
                              seq
                                bogusForceDataize.write (((xstack_effect)) ((xcode)) (0))
                                bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((xcode)))
                        (((unsupported)) ((xcode)) (((((xset)) ((((xrange)) (256)))).sub (((xset)) ((((((xdis).xopmap).xvalues)) 0))))))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xcode)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((xcode)))
                              bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xstack_effect)) ((xcode)) (0))
                xtest_stack_effect_jump.write
                  [xself]
                    memory > xhas_jump
                    memory > xFOR_ITER
                    memory > xjump
                    memory > xnojump
                    memory > xJUMP_FORWARD
                    memory > xJUMP_IF_TRUE_OR_POP
                    memory > xcommon
                    seq > @
                      seq
                        xJUMP_IF_TRUE_OR_POP.write (((unsupported)) (((xdis).xopmap)) ("JUMP_IF_TRUE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((xJUMP_IF_TRUE_OR_POP)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xJUMP_IF_TRUE_OR_POP)) (0) (TRUE))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xJUMP_IF_TRUE_OR_POP)) (0) (FALSE))) ((1.neg)))
                        xFOR_ITER.write (((unsupported)) (((xdis).xopmap)) ("FOR_ITER"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((xFOR_ITER)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xFOR_ITER)) (0) (TRUE))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xFOR_ITER)) (0) (FALSE))) (1))
                        xJUMP_FORWARD.write (((unsupported)) (((xdis).xopmap)) ("JUMP_FORWARD"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xstack_effect)) ((xJUMP_FORWARD)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xJUMP_FORWARD)) (0) (TRUE))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xstack_effect)) ((xJUMP_FORWARD)) (0) (FALSE))) (0))
                        xhas_jump.write (((xdis).xhasjabs).add ((xdis).xhasjrel))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xcode)))) ((((((xdis).xopmap).xitems)) 0)))
                          (((unsupported)) ((((unsupported)) (((xself).xsubTest)) ((xname)))))
                            seq
                              ((xcode).less ((xdis).xHAVE_ARGUMENT)).if
                                seq
                                  xcommon.write (((xstack_effect)) ((xcode)))
                                  xjump.write (((unsupported)) ((xstack_effect)) ((xcode)) (TRUE))
                                  xnojump.write (((unsupported)) ((xstack_effect)) ((xcode)) (FALSE))
                                seq
                                  xcommon.write (((xstack_effect)) ((xcode)) (0))
                                  xjump.write (((unsupported)) ((xstack_effect)) ((xcode)) (0) (TRUE))
                                  xnojump.write (((unsupported)) ((xstack_effect)) ((xcode)) (0) (FALSE))
                              (((unsupported)) ((xcode)) ((xhas_jump))).if
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xcommon)) ((((xmax)) ((xjump)) ((xnojump)))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xjump)) ((xcommon)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xnojump)) ((xcommon)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)