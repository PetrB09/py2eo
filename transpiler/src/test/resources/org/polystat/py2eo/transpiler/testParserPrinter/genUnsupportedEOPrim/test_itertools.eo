memory > xd
memory > xcm
memory > xk
memory > xthreading
memory > xSubclassWithKwargsTest
memory > xcopy
memory > xgroupby
memory > xindices
memory > xmin
memory > xcomplex
memory > xTestVariousIteratorArgs
memory > xzip_longest
memory > xRepeater
memory > xstep
memory > xc
memory > xcount
memory > xig
memory > xunused
memory > xall
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xrepeat
memory > xcombinations_with_replacement
memory > xenumerate
memory > xlocals
memory > xRegressionTests
memory > xSubclass
memory > xelement
memory > xTestPurePythonRoughEquivalents
memory > xK
memory > xValueError
memory > xsb
memory > xstr
memory > xforward
memory > xpool
memory > xq
memory > xIntLike
memory > xg
memory > xproduct
memory > xAssertionError
memory > xresult1
memory > xt
memory > xcombinations
memory > xpermutations
memory > xpair
memory > xrange
memory > xS
memory > xaccumulate
memory > xb
memory > xG
memory > xvalue
memory > xZeroDivisionError
memory > xstop
memory > xT
memory > xg3
memory > xeval
memory > x_
memory > xt2
memory > xStopIteration
memory > xMemoryError
memory > xik
memory > xcycle
memory > xstart
memory > xproto
memory > xmax
memory > xDummyCmp
memory > xerr
memory > xrandom
memory > xp
memory > xfilterfalse
memory > xdropwhile
memory > xresult2
memory > xit1
memory > xreversed
memory > xprint
memory > xany
memory > xtype
memory > xf
memory > xFraction
memory > xstarmap
memory > xset
memory > xrepr
memory > xint
memory > xit
memory > xException
memory > xr
memory > xBadIterable
memory > xX
memory > xhasattr
memory > xOverflowError
memory > xbackward
memory > xtee
memory > xx
memory > xI
memory > xExpectedError
memory > xi
memory > xstmt
memory > xoperator
memory > xstruct
memory > xarg
memory > xTestExamples
memory > xSizeofTest
memory > xchain
memory > xs
memory > xsupport
memory > xsys
memory > xkwds
memory > xbool
memory > xglobals
memory > xtuple
memory > xoper
memory > xsorted
memory > xTestGC
memory > xfloat
memory > xLengthTransparency
memory > xchr
memory > xIg
memory > xcls
memory > xgc
memory > xargs
memory > xg2
memory > xtakewhile
memory > xslice
memory > xweakref
memory > xpow
memory > xval
memory > xgetattr
memory > xv
memory > xid
memory > xtgtargs
memory > xiter
memory > xe
memory > xE
memory > xDecimal
memory > xelem
memory > xTestBasicOps
memory > xzip
memory > xunittest
memory > xresult
memory > xit2
memory > xy
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xtyp
memory > xReferenceError
memory > xfilter
memory > xN
memory > xop
memory > xiterables
memory > xStopNow
memory > xlen
memory > xdict
memory > xcompress
memory > xreduce
memory > xj
memory > xisinstance
memory > xg1
memory > xTypeError
memory > xt1
memory > x__name__
memory > xa
[] > test_itertools
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xunderten
        memory > xtest_main
        memory > x__getitem__
        memory > xlibreftest
        memory > xtest_takewhile
        memory > xtest_product
        memory > xtest_StopIteration
        memory > xtest_zip
        memory > xtest_combinations_result_gc
        memory > xtest_zip_longest
        memory > xmakecycle
        memory > xtest_count_with_stride
        memory > xlzip
        memory > xtest_compress
        memory > xtest_combinations
        memory > xtest_combinations_with_replacement_result_gc
        memory > xtest_tee_del_backward
        memory > xtest_tee
        memory > xtest_groupby
        memory > xtest_product_overflow
        memory > xtest_zip_longest_bad_iterable
        memory > xtest_permutations_overflow
        memory > xtest_combinatorics
        memory > xtest_accumulate_reducible
        memory > xtest_tee_concurrent
        memory > xtest_ziplongest
        memory > xtestR
        memory > xtest_filter
        memory > xtest_bug_7244
        memory > xtest_issue30347_2
        memory > xisEven
        memory > xgen3
        memory > x__iter__
        memory > xtest_combinations_sizeof
        memory > xtest_filterfalse
        memory > xtest_chain_reducible
        memory > xtestR2
        memory > xtest_accumulate_reducible_none
        memory > xtest_chain
        memory > xL
        memory > xsetUp
        memory > xtest_stapmap
        memory > xtest_issue30347_1
        memory > xtupleize
        memory > xtest_islice_recipe
        memory > xfact
        memory > xtest_count
        memory > xtest_zip_tuple_reuse
        memory > xislice
        memory > xtest_repeat
        memory > xerrfunc
        memory > xtest_combinations_with_replacement_tuple_reuse
        memory > xtest_zip_longest_tuple_reuse
        memory > xmaxsize
        memory > xtest_tee_reenter
        memory > x__next__
        memory > xtest_sf_950057
        memory > xtest_islice
        memory > xtest_combinations_with_replacement_overflow
        memory > xtest_repeat_with_negative_times
        memory > xpickletest
        memory > xtest_long_chain_of_empty_iterables
        memory > xR
        memory > xpicklecopiers
        memory > xtest_product_tuple_reuse
        memory > xtest_product_pickling
        memory > xisOdd
        memory > xtest_permutations_result_gc
        memory > xtest_product_sizeof
        memory > xtest_accumulate
        memory > xtest_cycle
        memory > xtest_combinations_tuple_reuse
        memory > xprod
        memory > xtest_issue2246
        memory > xtest_product_issue_25021
        memory > xtest_chain_setstate
        memory > x__init__
        memory > xtest_map
        memory > xtest_zip_longest_result_gc
        memory > xtest_chain_from_iterable
        memory > xtest_combinations_overflow
        memory > xtest_combinations_with_replacement_sizeof
        memory > xtest_keywords_in_subclass
        memory > xirange
        memory > xtest_sf_793826
        memory > xtest_permutations_sizeof
        memory > xtest_permutations_tuple_reuse
        memory > xtest_dropwhile
        memory > xtest_zip_longest_pickling
        memory > xcheck_sizeof
        memory > x__test__
        memory > xtest_permutations
        memory > xtest_starmap
        memory > xtest_cycle_setstate
        memory > xtest_combinations_with_replacement
        memory > xtest_product_result_gc
        memory > xtake
        memory > xminsize
        memory > xonearg
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xmaxsize.write ((xsupport).xMAX_Py_ssize_t)
            xminsize.write (((xmaxsize).neg).sub 1)
            xlzip.write
              []
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((((xlist)) ((((xzip)) ((((unsupported)) ((xargs)))))))))
            xonearg.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((2.mul (xx))))
            xerrfunc.write
              []
                seq > @
                  (((unsupported)) 0)
                    unsupported
                    (((unsupported)) ((xValueError)))
            xgen3.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xi)) ((((unsupported)) (0) (1) (2))))
                      (((unsupported)) ((xi)))
            xisEven.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xx).mod 2).eq 0)))
            xisOdd.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xx).mod 2).eq 1)))
            xtupleize.write
              []
                seq > @
                  (((unsupported)) 0)
                    (((unsupported)) ((xargs)))
            xirange.write
              [xn]
                seq > @
                  (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                    (((unsupported)) ((xi)))
            (((unsupported)) 0)
              seq
                unsupported
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xStopIteration)))
            xtake.write
              [xn xseq]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xlist)) ((((xislice)) ((xseq)) ((xn)))))))
            xprod.write
              [xiterable]
                seq > @
                  (((unsupported)) ((((xreduce)) (((xoperator).xmul)) ((xiterable)) (1))))
            xfact.write
              [xn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xprod)) ((((xrange)) (1) (((xn).add 1)))))))
            xtestR.write
              [xr]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xr)) (0))))
            xtestR2.write
              [xr]
                seq > @
                  (((unsupported)) ((((unsupported)) ((xr)) (2))))
            xunderten.write
              [xx]
                seq > @
                  (((unsupported)) (((xx).less 10)))
            xpicklecopiers.write (((unsupported)) ((((unsupported)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xs)) ((xproto)))))))) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xpickletest.write
                  [xself xprotocol xit xstop xtake xcompare]
                    memory > xc
                    memory > xtook
                    memory > xi3
                    memory > xexpand
                    memory > xdump
                    memory > xi4
                    memory > xi2
                    seq > @
                      (((unsupported)) 0)
                        unsupported
                        xexpand.write
                          [xit xi]
                            memory > xl
                            seq > @
                              (((unsupported)) 0)
                                ((xi).greater 10).if
                                  (((unsupported)) ((((xRuntimeError)) ("infinite recursion encountered"))))
                                (((xisinstance)) ((xit)) ((xstr))).if
                                  (((unsupported)) ((xit)))
                                (((unsupported)) ((xTypeError)))
                                  xl.write (((xlist)) ((((xislice)) ((xit)) ((xstop)))))
                                  (((unsupported)) ((xit)))
                                (((unsupported)) ((((unsupported)) ((((xexpand)) ((xe)) (((xi).add 1)))) ((xe)) ((xl)))))
                        xdump.write ((((xpickle).xdumps)) ((xit)) ((xprotocol)))
                        xi2.write ((((xpickle).xloads)) ((xdump)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xit)))) ((((xtype)) ((xi2)))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xexpand)) ((xit)))) ((((xexpand)) ((xi2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        (xcompare).if
                          seq
                            xc.write (((xexpand)) ((xcompare)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xc)))
                        xi3.write ((((xpickle).xloads)) ((xdump)))
                        xtook.write 0
                        (((unsupported)) ((xStopIteration)))
                          (((unsupported)) ((xi)) ((((xrange)) ((xtake)))))
                            seq
                              bogusForceDataize.write (((xnext)) ((xi3)))
                              (((unsupported)) ((xtook)) (1))
                        xdump.write ((((xpickle).xdumps)) ((xi3)) ((xprotocol)))
                        xi4.write ((((xpickle).xloads)) ((xdump)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((unsupported)) ((((xexpand)) ((xi3)))) ((((xexpand)) ((xi4)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xb)))
                        (xcompare).if
                          seq
                            xc.write (((xexpand)) ((((unsupported)) ((xcompare)) ((((unsupported)) ((xtook)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xc)))
                xtest_accumulate.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((xrange)) (10))))))) ((((unsupported)) (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xaccumulate)) ((((xrange)) (10))))))) ((((unsupported)) (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))
                        (((unsupported)) ((xtyp)) ((((unsupported)) ((xint)) ((xcomplex)) ((xDecimal)) ((xFraction)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((xmap)) ((xtyp)) ((((xrange)) (10))))))))) ((((xlist)) ((((xmap)) ((xtyp)) ((((unsupported)) (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ("abc"))))) ((((unsupported)) ("a") ("ab") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((unsupported)) (7))))))) ((((unsupported)) (7))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)) ((((xrange)) (10))) (5) (6))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)))
                        (((unsupported)) (((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xaccumulate)) ((((unsupported)) (1) ((((unsupported)) 0)))))))
                        xs.write (((unsupported)) (2) (8) (9) (5) (7) (0) (3) (4) (1) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((xs)) ((xmin)))))) ((((unsupported)) (2) (2) (2) (2) (2) (0) (0) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((xs)) ((xmax)))))) ((((unsupported)) (2) (8) (9) (9) (9) (9) (9) (9) (9) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((xs)) (((xoperator).xmul)))))) ((((unsupported)) (2) (16) (144) (720) (5040) (0) (0) (0) (0) (0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xlist)) ((((xaccumulate)) ((xs)) ((xchr)))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xaccumulate)) ((((xrange)) (10))))))
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((unsupported)) ((xaccumulate)) ((((xrange)) (10))) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xaccumulate)) ((((unsupported)) (10) (5) (1))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)) (10) (15) (16))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xaccumulate)) ((((unsupported)) (10) (5) (1))) (100))))) ((((unsupported)) (100) (110) (115) (116))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xaccumulate)) ((((unsupported)) 0)) (100))))) ((((unsupported)) (100))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write (((xlist)) ((((xaccumulate)) ((((unsupported)) (10) (20))) (100))))
                xtest_chain.write
                  [xself]
                    memory > xchain2
                    seq > @
                      seq
                        xchain2.write
                          []
                            seq > @
                              (((unsupported)) 0)
                                unsupported
                                (((unsupported)) ((xit)) ((xiterables)))
                                  (((unsupported)) ((xelement)) ((xit)))
                                    (((unsupported)) ((xelement)))
                        (((unsupported)) ((xc)) ((((unsupported)) ((xchain)) ((xchain2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xc)) ("abc") ("def"))))) ((((xlist)) ("abcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xc)) ("abc"))))) ((((xlist)) ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xc)) (""))))) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (4) ((((xc)) ("abc") ("def"))))) ((((xlist)) ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xc)) (2) (3))))
                xtest_chain_from_iterable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xchain).xfrom_iterable)) ((((unsupported)) ("abc") ("def"))))))) ((((xlist)) ("abcdef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xchain).xfrom_iterable)) ((((unsupported)) ("abc"))))))) ((((xlist)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xchain).xfrom_iterable)) ((((unsupported)) (""))))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (4) (((((xchain).xfrom_iterable)) ((((unsupported)) ("abc") ("def"))))))) ((((xlist)) ("abcd"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) (((((xchain).xfrom_iterable)) ((((unsupported)) (2) (3))))))
                xtest_chain_reducible.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        (((unsupported)) ((xoper)) (((((unsupported)) (((xcopy).xdeepcopy))).add (xpicklecopiers))))
                          seq
                            xit.write (((xchain)) ("abc") ("def"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xoper)) ((xit)))))) ((((xlist)) ("abcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xoper)) ((xit)))))) ((((xlist)) ("bcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xoper)) ((((xchain)) (""))))))) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (4) ((((xoper)) ((((xchain)) ("abc") ("def"))))))) ((((xlist)) ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xoper)) ((((xchain)) (2) (3))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)) (((xself).xpickletest)) ((xproto)) ((((xchain)) ("abc") ("def"))) ((((xlist)) ("abcdef"))))
                xtest_chain_setstate.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xchain)) 0).x__setstate__)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xchain)) 0).x__setstate__)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xchain)) 0).x__setstate__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xchain)) 0).x__setstate__)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xchain)) 0).x__setstate__)) ((((unsupported)) ((((xiter)) ((((unsupported)) 0)))) ((((unsupported)) 0)))))
                        xit.write (((xchain)) 0)
                        bogusForceDataize.write ((((xit).x__setstate__)) ((((unsupported)) ((((xiter)) ((((unsupported)) ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((unsupported)) ("a") ("b") ("c") ("d") ("e") ("f"))))
                        xit.write (((xchain)) 0)
                        bogusForceDataize.write ((((xit).x__setstate__)) ((((unsupported)) ((((xiter)) ((((unsupported)) ("abc") ("def"))))) ((((xiter)) ((((unsupported)) ("ghi"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((unsupported)) ("ghi") ("a") ("b") ("c") ("d") ("e") ("f"))))
                xtest_combinations.write
                  [xself]
                    memory > xvalues
                    memory > xtestIntermediate
                    memory > xresult
                    memory > xcombinations3
                    memory > xcombinations2
                    memory > xcombinations1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcombinations)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcombinations)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcombinations)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcombinations)) ("abc") ((2.neg)))
                        (((unsupported)) ((xop)) (((((unsupported)) ((((unsupported)) ((xa))))).add (xpicklecopiers))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((xcombinations)) ("abc") (32))))))) ((((unsupported)) 0)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((xcombinations)) ("ABCD") (2))))))) ((((unsupported)) ((((unsupported)) ("A") ("B"))) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("A") ("D"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("B") ("D"))) ((((unsupported)) ("C") ("D"))))))
                            xtestIntermediate.write (((xcombinations)) ("ABCD") (2))
                            bogusForceDataize.write (((xnext)) ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((xtestIntermediate)))))) ((((unsupported)) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("A") ("D"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("B") ("D"))) ((((unsupported)) ("C") ("D"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((xcombinations)) ((((xrange)) (4))) (3))))))) ((((unsupported)) ((((unsupported)) (0) (1) (2))) ((((unsupported)) (0) (1) (3))) ((((unsupported)) (0) (2) (3))) ((((unsupported)) (1) (2) (3))))))
                            xtestIntermediate.write (((xcombinations)) ((((xrange)) (4))) (3))
                            bogusForceDataize.write (((xnext)) ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((xtestIntermediate)))))) ((((unsupported)) ((((unsupported)) (0) (1) (3))) ((((unsupported)) (0) (2) (3))) ((((unsupported)) (1) (2) (3))))))
                        xcombinations1.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            memory > xindices
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                ((xr).greater (xn)).if
                                  (((unsupported)) 0)
                                xindices.write (((xlist)) ((((xrange)) ((xr)))))
                                (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)) ((xi)) ((((xreversed)) ((((xrange)) ((xr)))))))
                                          ((((unsupported)) ((xindices)) ((xi))).neq (((xi).add (xn)).sub (xr))).if
                                            (((unsupported)) 0)
                                          (((unsupported)) 0)
                                        (((unsupported)) ((((unsupported)) ((xindices)) ((xi)))) (1))
                                        (((unsupported)) ((xj)) ((((xrange)) (((xi).add 1)) ((xr)))))
                                          (((unsupported)) ((((unsupported)) ((xindices)) ((xj)))) (((((unsupported)) ((xindices)) (((xj).sub 1))).add 1)))
                                        (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcombinations2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                (((unsupported)) ((xindices)) ((((xpermutations)) ((((xrange)) ((xn)))) ((xr)))))
                                  ((((xsorted)) ((xindices))).eq (((xlist)) ((xindices)))).if
                                    (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcombinations3.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                (((unsupported)) ((xindices)) ((((xcombinations_with_replacement)) ((((xrange)) ((xn)))) ((xr)))))
                                  ((((xlen)) ((((xset)) ((xindices))))).eq (xr)).if
                                    (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        (((unsupported)) ((xn)) ((((xrange)) (7))))
                          seq
                            xvalues.write (((unsupported)) (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)) ((xn)))))
                            (((unsupported)) ((xr)) ((((xrange)) (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)) ((((xcombinations)) ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xr).greater (xn)).if 0 (((((xfact)) ((xn))).div (((xfact)) ((xr)))).div (((xfact)) (((xn).sub (xr))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xlen)) ((((xset)) ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xsorted)) ((xresult)))))
                                (((unsupported)) ((xc)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xc)))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((xc)))))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xc)))) ((((xsorted)) ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) ((((unsupported)) ((xe)) ((xvalues)))) ((xe)) ((xc)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xc)))) ((((unsupported)) ((xe)) ((xe)) ((xvalues)) ((((unsupported)) ((xe)) ((xc)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xcombinations1)) ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xcombinations2)) ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xcombinations3)) ((xvalues)) ((xr)))))))
                                (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xcombinations)) ((xvalues)) ((xr)))))
                xtest_combinations_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xcombinations)) ("AA") ((((unsupported)) (2) (29))))
                xtest_combinations_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xcombinations)) ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xlist)) ((((xcombinations)) ("abcde") (3))))))))))) (1))
                xtest_combinations_with_replacement.write
                  [xself]
                    memory > xcwr1
                    memory > xcwr
                    memory > xtestIntermediate
                    memory > xnoruns
                    memory > xcwr2
                    memory > xvalues
                    memory > xregular_combs
                    memory > xnumcombs
                    memory > xresult
                    seq > @
                      seq
                        xcwr.write (xcombinations_with_replacement)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcwr)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcwr)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcwr)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xcwr)) ("abc") ((2.neg)))
                        (((unsupported)) ((xop)) (((((unsupported)) ((((unsupported)) ((xa))))).add (xpicklecopiers))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((xcwr)) ("ABC") (2))))))) ((((unsupported)) ((((unsupported)) ("A") ("A"))) ((((unsupported)) ("A") ("B"))) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("B") ("B"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("C") ("C"))))))
                            xtestIntermediate.write (((xcwr)) ("ABC") (2))
                            bogusForceDataize.write (((xnext)) ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((xtestIntermediate)))))) ((((unsupported)) ((((unsupported)) ("A") ("B"))) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("B") ("B"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("C") ("C"))))))
                        xcwr1.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            memory > xindices
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                (((xn).not).and (xr)).if
                                  (((unsupported)) 0)
                                xindices.write ((((unsupported)) (0)).mul (xr))
                                (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)) ((xi)) ((((xreversed)) ((((xrange)) ((xr)))))))
                                          ((((unsupported)) ((xindices)) ((xi))).neq ((xn).sub 1)).if
                                            (((unsupported)) 0)
                                          (((unsupported)) 0)
                                        (((unsupported)) ((((unsupported)) ((xindices)) ((((unsupported)) ((xi)))))) (((((unsupported)) (((((unsupported)) ((xindices)) ((xi))).add 1))).mul ((xr).sub (xi)))))
                                        (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcwr2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                (((unsupported)) ((xindices)) ((((unsupported)) ((xproduct)) ((((xrange)) ((xn)))) ((xr)))))
                                  ((((xsorted)) ((xindices))).eq (((xlist)) ((xindices)))).if
                                    (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xnumcombs.write
                          [xn xr]
                            seq > @
                              seq
                                ((xn).not).if
                                  (((unsupported)) (((xr).if 0 1)))
                                (((unsupported)) ((((((xfact)) ((((xn).add (xr)).sub 1))).div (((xfact)) ((xr)))).div (((xfact)) (((xn).sub 1))))))
                        (((unsupported)) ((xn)) ((((xrange)) (7))))
                          seq
                            xvalues.write (((unsupported)) (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)) ((xn)))))
                            (((unsupported)) ((xr)) ((((xrange)) (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)) ((((xcwr)) ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xnumcombs)) ((xn)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xlen)) ((((xset)) ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xsorted)) ((xresult)))))
                                xregular_combs.write (((xlist)) ((((xcombinations)) ((xvalues)) ((xr)))))
                                (((xn).eq 0).or ((xr).leq 1)).if
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((xregular_combs)))
                                  bogusForceDataize.write ((((xself).xassertTrue)) (((((xset)) ((xresult))).geq (((xset)) ((xregular_combs))))))
                                (((unsupported)) ((xc)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xc)))) ((xr)))
                                    xnoruns.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xv)))) ((((xgroupby)) ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xnoruns)))) ((((xlen)) ((((xset)) ((xnoruns)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xc)))) ((((xsorted)) ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) ((((unsupported)) ((xe)) ((xvalues)))) ((xe)) ((xc)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xnoruns)) ((((unsupported)) ((xe)) ((xe)) ((xvalues)) ((((unsupported)) ((xe)) ((xc)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xcwr1)) ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xcwr2)) ((xvalues)) ((xr)))))))
                                (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xcwr)) ((xvalues)) ((xr)))))
                xtest_combinations_with_replacement_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xcombinations_with_replacement)) ("AA") ((((unsupported)) (2) (30))))
                xtest_combinations_with_replacement_tuple_reuse.write
                  [xself]
                    memory > xcwr
                    seq > @
                      (((unsupported)) 0)
                        xcwr.write (xcombinations_with_replacement)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xcwr)) ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xlist)) ((((xcwr)) ("abcde") (3))))))))))) (1))
                xtest_permutations.write
                  [xself]
                    memory > xpermutations2
                    memory > xresult
                    memory > xvalues
                    memory > xpermutations1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpermutations)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpermutations)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpermutations)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xpermutations)) ("abc") ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xpermutations)) ("abc") (32))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xpermutations)) ("abc") ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xpermutations)) ((((xrange)) (3))) (2))))) ((((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (0) (2))) ((((unsupported)) (1) (0))) ((((unsupported)) (1) (2))) ((((unsupported)) (2) (0))) ((((unsupported)) (2) (1))))))
                        xpermutations1.write
                          [xiterable xr]
                            memory > xindices
                            memory > xpool
                            memory > xcycles
                            memory > xn
                            memory > xj
                            seq > @
                              (((unsupported)) 0)
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                xr.write ((((unsupported)) ((xr)) ("None: is there a None literal in the EO language?")).if (xn) (xr))
                                ((xr).greater (xn)).if
                                  (((unsupported)) 0)
                                xindices.write (((xlist)) ((((xrange)) ((xn)))))
                                xcycles.write (((unsupported)) ((((xlist)) ((((xrange)) ((((xn).sub (xr)).add 1)) (((xn).add 1)))))) ((((unsupported)) ((1.neg)))))
                                (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((((unsupported)) ((xindices)) ((((unsupported)) ((xr)))))))))))
                                while.
                                  (xn)
                                  [unused]
                                    seq > @
                                      (((unsupported)) ((xi)) ((((xreversed)) ((((xrange)) ((xr)))))))
                                        seq
                                          (((unsupported)) ((((unsupported)) ((xcycles)) ((xi)))) (1))
                                          ((((unsupported)) ((xcycles)) ((xi))).eq 0).if
                                            seq
                                              (((unsupported)) ((((unsupported)) ((xindices)) ((((unsupported)) ((xi)))))) (((((unsupported)) ((xindices)) ((((unsupported)) (((xi).add 1))))).add (((unsupported)) ((xindices)) ((((unsupported)) ((xi)) (((xi).add 1))))))))
                                              (((unsupported)) ((((unsupported)) ((xcycles)) ((xi)))) (((xn).sub (xi))))
                                            seq
                                              xj.write (((unsupported)) ((xcycles)) ((xi)))
                                              (((unsupported)) ((((unsupported)) ((((unsupported)) ((xindices)) ((xi)))) ((((unsupported)) ((xindices)) (((xj).neg)))))) ((((unsupported)) ((((unsupported)) ((xindices)) (((xj).neg)))) ((((unsupported)) ((xindices)) ((xi)))))))
                                              (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((((unsupported)) ((xindices)) ((((unsupported)) ((xr)))))))))))
                                              (((unsupported)) 0)
                                        (((unsupported)) 0)
                        xpermutations2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              (((unsupported)) 0)
                                unsupported
                                xpool.write (((xtuple)) ((xiterable)))
                                xn.write (((xlen)) ((xpool)))
                                xr.write ((((unsupported)) ((xr)) ("None: is there a None literal in the EO language?")).if (xn) (xr))
                                (((unsupported)) ((xindices)) ((((unsupported)) ((xproduct)) ((((xrange)) ((xn)))) ((xr)))))
                                  ((((xlen)) ((((xset)) ((xindices))))).eq (xr)).if
                                    (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        (((unsupported)) ((xn)) ((((xrange)) (7))))
                          seq
                            xvalues.write (((unsupported)) (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)) ((xn)))))
                            (((unsupported)) ((xr)) ((((xrange)) (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)) ((((xpermutations)) ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xr).greater (xn)).if 0 ((((xfact)) ((xn))).div (((xfact)) (((xn).sub (xr))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((((xlen)) ((((xset)) ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xsorted)) ((xresult)))))
                                (((unsupported)) ((xp)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xp)))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((xp)))))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertTrue)) ((((xall)) ((((unsupported)) ((((unsupported)) ((xe)) ((xvalues)))) ((xe)) ((xp)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xpermutations1)) ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xpermutations2)) ((xvalues)) ((xr)))))))
                                ((xr).eq (xn)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xpermutations)) ((xvalues)) ("None: is there a None literal in the EO language?"))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xresult)) ((((xlist)) ((((xpermutations)) ((xvalues)))))))
                                (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xpermutations)) ((xvalues)) ((xr)))))
                xtest_permutations_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xpermutations)) ("A") ((((unsupported)) (2) (30))))
                xtest_permutations_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xpermutations)) ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xlist)) ((((xpermutations)) ("abcde") (3))))))))))) (1))
                xtest_combinatorics.write
                  [xself]
                    memory > xcomb
                    memory > xs
                    memory > xprod
                    memory > xcwr
                    memory > xperm
                    seq > @
                      (((unsupported)) ((xn)) ((((xrange)) (6))))
                        seq
                          xs.write (((unsupported)) ("ABCDEFG") ((((unsupported)) ((xn)))))
                          (((unsupported)) ((xr)) ((((xrange)) (8))))
                            seq
                              xprod.write (((xlist)) ((((unsupported)) ((xproduct)) ((xs)) ((xr)))))
                              xcwr.write (((xlist)) ((((xcombinations_with_replacement)) ((xs)) ((xr)))))
                              xperm.write (((xlist)) ((((xpermutations)) ((xs)) ((xr)))))
                              xcomb.write (((xlist)) ((((xcombinations)) ((xs)) ((xr)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xprod)))) ((((unsupported)) ((xn)) ((xr)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcwr)))) (((xn).if (((((xfact)) ((((xn).add (xr)).sub 1))).div (((xfact)) ((xr)))).div (((xfact)) (((xn).sub 1)))) ((xr).not))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xperm)))) ((((xr).greater (xn)).if 0 ((((xfact)) ((xn))).div (((xfact)) (((xn).sub (xr))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xcomb)))) ((((xr).greater (xn)).if 0 (((((xfact)) ((xn))).div (((xfact)) ((xr)))).div (((xfact)) (((xn).sub (xr))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xprod)) ((((xsorted)) ((((xset)) ((xprod)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcwr)) ((((xsorted)) ((((xset)) ((xcwr)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xperm)) ((((xsorted)) ((((xset)) ((xperm)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((xsorted)) ((((xset)) ((xcomb)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcwr)) ((((unsupported)) ((xt)) ((xt)) ((xprod)) (((((xsorted)) ((xt))).eq (((xlist)) ((xt))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xperm)) ((((unsupported)) ((xt)) ((xt)) ((xprod)) (((((xlen)) ((((xset)) ((xt))))).eq (xr))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((unsupported)) ((xt)) ((xt)) ((xperm)) (((((xsorted)) ((xt))).eq (((xlist)) ((xt))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((unsupported)) ((xt)) ((xt)) ((xcwr)) (((((xlen)) ((((xset)) ((xt))))).eq (xr))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((xlist)) ((((xfilter)) (((((xset)) ((xcwr))).x__contains__)) ((xperm)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((xlist)) ((((xfilter)) (((((xset)) ((xperm))).x__contains__)) ((xcwr)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xcomb)) ((((xsorted)) (((((xset)) ((xcwr))).and (((xset)) ((xperm))))))))
                xtest_compress.write
                  [xself]
                    memory > xn
                    memory > xtestIntermediate
                    memory > xselectors
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xcompress)) ("ABCDEF") ((((unsupported)) (1) (0) (1) (0) (1) (1))))))) ((((xlist)) ("ACEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (1) (0) (1) (0) (1) (1))))))) ((((xlist)) ("ACEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (0) (0) (0) (0) (0) (0))))))) ((((xlist)) (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (1) (1) (1) (1) (1) (1))))))) ((((xlist)) ("ABCDEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (1) (0) (1))))))) ((((xlist)) ("AC"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABC") ((((unsupported)) (0) (1) (1) (1) (1) (1))))))) ((((xlist)) ("BC"))))
                        xn.write 10000
                        xdata.write ((((xchain).xfrom_iterable)) ((((xrepeat)) ((((xrange)) (6))) ((xn)))))
                        xselectors.write ((((xchain).xfrom_iterable)) ((((xrepeat)) ((((unsupported)) (0) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ((xdata)) ((xselectors)))))) (((((unsupported)) (1) (3) (5)).mul (xn))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ("None: is there a None literal in the EO language?") ((((xrange)) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ((((xrange)) (6))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ((((xrange)) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ((((xrange)) (6))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xop)) (((((unsupported)) ((((unsupported)) (((((xcopy).xcopy)) ((xa)))))) ((((unsupported)) (((((xcopy).xdeepcopy)) ((xa))))))).add (xpicklecopiers))))
                          (((unsupported)) ((((unsupported)) ((xdata)) ((xselectors)) ((xresult1)) ((xresult2)))) ((((unsupported)) ((((unsupported)) ("ABCDEF") ((((unsupported)) (1) (0) (1) (0) (1) (1))) ("ACEF") ("CEF"))) ((((unsupported)) ("ABCDEF") ((((unsupported)) (0) (0) (0) (0) (0) (0))) ("") (""))) ((((unsupported)) ("ABCDEF") ((((unsupported)) (1) (1) (1) (1) (1) (1))) ("ABCDEF") ("BCDEF"))) ((((unsupported)) ("ABCDEF") ((((unsupported)) (1) (0) (1))) ("AC") ("C"))) ((((unsupported)) ("ABC") ((((unsupported)) (0) (1) (1) (1) (1) (1))) ("BC") ("C"))))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((unsupported)) ((xcompress)) ((xdata)) ((xselectors)))))))) ((((xlist)) ((xresult1)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((((xcompress)) ((xdata)) ((xselectors)))))))) ((((xlist)) ((xresult1)))))
                              xtestIntermediate.write (((xcompress)) ((xdata)) ((xselectors)))
                              (xresult1).if
                                seq
                                  bogusForceDataize.write (((xnext)) ((xtestIntermediate)))
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xop)) ((xtestIntermediate)))))) ((((xlist)) ((xresult2)))))
                xtest_count.write
                  [xself]
                    memory > xBIGINT
                    memory > xc
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) 0)))) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) (3))))) ((((unsupported)) ((((unsupported)) ("a") (3))) ((((unsupported)) ("b") (4))) ((((unsupported)) ("c") (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) ((((xlzip)) ("abc") ((((xcount)) (3))))))) ((((unsupported)) ((((unsupported)) ("a") (3))) ((((unsupported)) ("b") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) ((((xzip)) ("abc") ((((xcount)) ((1.neg)))))))) ((((unsupported)) ((((unsupported)) ("a") ((1.neg)))) ((((unsupported)) ("b") (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) ((((xzip)) ("abc") ((((xcount)) ((3.neg)))))))) ((((unsupported)) ((((unsupported)) ("a") ((3.neg)))) ((((unsupported)) ("b") ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcount)) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcount)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) ((((xcount)) (((xmaxsize).sub 5)))))) ((((xlist)) ((((xrange)) (((xmaxsize).sub 5)) (((xmaxsize).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) ((((xcount)) ((((xmaxsize).neg).sub 5)))))) ((((xlist)) ((((xrange)) ((((xmaxsize).neg).sub 5)) ((((xmaxsize).neg).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) (3.25))))) ((((unsupported)) (3.25) (4.25) (5.25))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((3.25.sub (((unsupported)) 0))))))) ((((unsupported)) ((3.25.sub (((unsupported)) 0))) ((4.25.sub (((unsupported)) 0))) ((5.25.sub (((unsupported)) 0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((((xDecimal)) ("1.1"))))))) ((((unsupported)) ((((xDecimal)) ("1.1"))) ((((xDecimal)) ("2.1"))) ((((xDecimal)) ("3.1"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((((xFraction)) (2) (3))))))) ((((unsupported)) ((((xFraction)) (2) (3))) ((((xFraction)) (5) (3))) ((((xFraction)) (8) (3))))))
                        xBIGINT.write (((unsupported)) (1) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((xBIGINT)))))) ((((unsupported)) ((xBIGINT)) (((xBIGINT).add 1)) (((xBIGINT).add 2)))))
                        xc.write (((xcount)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(3)"))
                        bogusForceDataize.write (((xnext)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(4)"))
                        xc.write (((xcount)) ((9.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-9)"))
                        bogusForceDataize.write (((xnext)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xc)))) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10.25))))) ("count(10.25)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10.0))))) ("count(10.0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xnext)) ((((xcount)) (10.0))))))) ((xfloat)))
                        (((unsupported)) ((xi)) ((((unsupported)) (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                          seq
                            xr1.write (((xrepr)) ((((xcount)) ((xi)))))
                            xr2.write ((("count(%r)".x__mod__)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xr1)) ((xr2)))
                        (((unsupported)) ((xvalue)) ((((unsupported)) ((3.neg)) (3) (((xmaxsize).sub 5)) (((xmaxsize).add 5)))))
                          seq
                            xc.write (((xcount)) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) (((((xcopy).xcopy)) ((xc)))))) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) (((((xcopy).xdeepcopy)) ((xc)))))) ((xvalue)))
                            (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xcount)) ((xvalue)))))
                        seq
                          bogusForceDataize.write (((xcount)) (1) (((xmaxsize).add 5)))
                          bogusForceDataize.write ((((xsys).xexc_info)) 0)
                xtest_count_with_stride.write
                  [xself]
                    memory > xBIGINT
                    memory > xc
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) (2) (3))))) ((((unsupported)) ((((unsupported)) ("a") (2))) ((((unsupported)) ("b") (5))) ((((unsupported)) ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((unsupported)) ((xcount)) (2) (3))))) ((((unsupported)) ((((unsupported)) ("a") (2))) ((((unsupported)) ("b") (5))) ((((unsupported)) ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((unsupported)) ((xcount)) ((1.neg)))))) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") ((1.neg)))) ((((unsupported)) ("c") ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcount)) ("a") ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) (2) (0))))) ((((unsupported)) ((((unsupported)) ("a") (2))) ((((unsupported)) ("b") (2))) ((((unsupported)) ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) (2) (1))))) ((((unsupported)) ((((unsupported)) ("a") (2))) ((((unsupported)) ("b") (3))) ((((unsupported)) ("c") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ("abc") ((((xcount)) (2) (3))))) ((((unsupported)) ((((unsupported)) ("a") (2))) ((((unsupported)) ("b") (5))) ((((unsupported)) ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((((xcount)) (((xmaxsize).sub 15)) (3))))) ((((xtake)) (20) ((((xrange)) (((xmaxsize).sub 15)) (((xmaxsize).add 100)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((((xcount)) ((((xmaxsize).neg).sub 15)) (3))))) ((((xtake)) (20) ((((xrange)) ((((xmaxsize).neg).sub 15)) ((((xmaxsize).neg).add 100)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) (10) (((xmaxsize).add 5)))))) ((((xlist)) ((((xrange)) (10) ((10.add (3.mul ((xmaxsize).add 5)))) (((xmaxsize).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) (2) (1.25))))) ((((unsupported)) (2) (3.25) (4.5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) (2) ((3.25.sub (((unsupported)) 0))))))) ((((unsupported)) (2) ((5.25.sub (((unsupported)) 0))) ((8.5.sub (((unsupported)) 0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((((xDecimal)) ("1.1"))) ((((xDecimal)) (".1"))))))) ((((unsupported)) ((((xDecimal)) ("1.1"))) ((((xDecimal)) ("1.2"))) ((((xDecimal)) ("1.3"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xcount)) ((((xFraction)) (2) (3))) ((((xFraction)) (1) (7))))))) ((((unsupported)) ((((xFraction)) (2) (3))) ((((xFraction)) (17) (21))) ((((xFraction)) (20) (21))))))
                        xBIGINT.write (((unsupported)) (1) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((unsupported)) ((xcount)) ((xBIGINT)))))) ((((unsupported)) (0) ((xBIGINT)) ((2.mul (xBIGINT))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xtake)) (3) ((((xcount)) (10) (2.5))))))) ((((xrepr)) ((((unsupported)) (10) (12.5) (15.0))))))
                        xc.write (((xcount)) (3) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(3, 5)"))
                        bogusForceDataize.write (((xnext)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(8, 5)"))
                        xc.write (((xcount)) ((9.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-9, 0)"))
                        bogusForceDataize.write (((xnext)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-9, 0)"))
                        xc.write (((xcount)) ((9.neg)) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-9, -3)"))
                        bogusForceDataize.write (((xnext)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-12, -3)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xc)))) ("count(-12, -3)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10.5) (1.25))))) ("count(10.5, 1.25)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10.5) (1))))) ("count(10.5)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10.5) (1.00))))) ("count(10.5, 1.0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xcount)) (10) (1.00))))) ("count(10, 1.0)"))
                        xc.write (((xcount)) (10) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xnext)) ((xc)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((((xnext)) ((xc)))))) ((xfloat)))
                        (((unsupported)) ((xi)) ((((unsupported)) (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                          (((unsupported)) ((xj)) ((((unsupported)) (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (1) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                            seq
                              xr1.write (((xrepr)) ((((xcount)) ((xi)) ((xj)))))
                              ((xj).eq 1).if
                                xr2.write ("count(%r)".mod (xi))
                                xr2.write ("count(%r, %r)".mod (((unsupported)) ((xi)) ((xj))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xr1)) ((xr2)))
                              (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xcount)) ((xi)) ((xj)))))
                xtest_cycle.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > x_
                    memory > xp
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) ((((xcycle)) ("abc"))))) ((((xlist)) ("abcabcabca"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcycle)) (""))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcycle)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcycle)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xcycle)) ((((xgen3)) 0)))) (10))))) ((((unsupported)) (0) (1) (2) (0) (1) (2) (0) (1) (2) (0))))
                        xc.write (((xcycle)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xc)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) (((((xcopy).xdeepcopy)) ((xc)))))) ((((xlist)) ("bcabcabcab"))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xc)) ((xproto)))))))) ((((xlist)) ("bcabcabcab"))))
                            bogusForceDataize.write (((xnext)) ((xc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (10) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xc)) ((xproto)))))))) ((((xlist)) ("cabcabcabc"))))
                            bogusForceDataize.write (((xnext)) ((xc)))
                            bogusForceDataize.write (((xnext)) ((xc)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xcycle)) ("abc"))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xiter)) ("abcde"))
                            xc.write (((xcycle)) ((xit)))
                            x_.write (((unsupported)) ((((xnext)) ((xc)))) ((xi)) ((((xrange)) (2))))
                            xp.write ((((xpickle).xdumps)) ((xc)) ((xproto)))
                            xd.write ((((xpickle).xloads)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((xd)))) ((((xlist)) ("cdeabcdeabcdeabcdeab"))))
                            xit.write (((xiter)) ("abcde"))
                            xc.write (((xcycle)) ((xit)))
                            x_.write (((unsupported)) ((((xnext)) ((xc)))) ((xi)) ((((xrange)) (7))))
                            xp.write ((((xpickle).xdumps)) ((xc)) ((xproto)))
                            xd.write ((((xpickle).xloads)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((xd)))) ((((xlist)) ("cdeabcdeabcdeabcdeab"))))
                xtest_cycle_setstate.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xcycle)) ("defg"))
                        bogusForceDataize.write ((((xc).x__setstate__)) ((((unsupported)) ((((xlist)) ("abc"))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((xc)))) ((((xlist)) ("defgabcdefgabcdefgab"))))
                        xc.write (((xcycle)) ("defg"))
                        bogusForceDataize.write ((((xc).x__setstate__)) ((((unsupported)) ((((xlist)) ("abcdefg"))) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (20) ((xc)))) ((((xlist)) ("defgabcdefgabcdefgab"))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((((xcycle)) ("defg")).x__setstate__)) ((((unsupported)) ((((xlist)) ("abcdefg"))) (0))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          seq
                            xc.write (((xcycle)) ("defg"))
                            bogusForceDataize.write ((((xc).x__setstate__)) ((((unsupported)) ((((xtuple)) ("defg"))) (0))))
                        bogusForceDataize.write (((xtake)) (20) ((xc)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                          bogusForceDataize.write ((((((xcycle)) ("defg")).x__setstate__)) ((((unsupported)) ((((xlist)) ("abcdefg"))) ("x"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xcycle)) ("")).x__setstate__)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) (((((xcycle)) ("")).x__setstate__)) ((((unsupported)) ((((unsupported)) 0)))))
                xtest_groupby.write
                  [xself]
                    memory > x__eq__
                    memory > xkeys
                    memory > xs
                    memory > xexpectedkeys
                    memory > xkeyfunc
                    memory > xdup
                    memory > xdelayed_raise
                    memory > xit
                    memory > xr
                    memory > xgulp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) ((((xlist)) ((((xgroupby)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) 0)) ((((xlist)) ((((unsupported)) ((xgroupby)) ((((unsupported)) 0)) ((xid)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xgroupby)) ("abc") ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgroupby)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgroupby)) ("abc") ((((unsupported)) ((xx)))) (10))
                        xs.write (((unsupported)) ((((unsupported)) (0) (10) (20))) ((((unsupported)) (0) (11) (21))) ((((unsupported)) (0) (12) (21))) ((((unsupported)) (1) (13) (21))) ((((unsupported)) (1) (14) (22))) ((((unsupported)) (2) (15) (22))) ((((unsupported)) (3) (16) (23))) ((((unsupported)) (3) (17) (23))))
                        xdup.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((xs)) ((((unsupported)) ((((unsupported)) ((xr)) (0))))))))
                          (((unsupported)) ((xelem)) ((xg)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ((((unsupported)) ((xelem)) (0))))
                              bogusForceDataize.write ((((xdup).xappend)) ((xelem)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xdup)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdup.write (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xk)) ((xg)))) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((((xgroupby)) ((xs)) ((xtestR)))) ((xproto)))))))
                              (((unsupported)) ((xelem)) ((xg)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ((((unsupported)) ((xelem)) (0))))
                                  bogusForceDataize.write ((((xdup).xappend)) ((xelem)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xdup)))
                        xdup.write (((unsupported)) 0)
                        (((unsupported)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((xs)) ((xtestR)))))
                          (((unsupported)) ((((unsupported)) ((xik)) ((xig)))) ((((xgroupby)) ((xg)) ((xtestR2)))))
                            (((unsupported)) ((xelem)) ((xig)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ((((unsupported)) ((xelem)) (0))))
                                bogusForceDataize.write ((((xself).xassertEqual)) ((xik)) ((((unsupported)) ((xelem)) (2))))
                                bogusForceDataize.write ((((xdup).xappend)) ((xelem)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xdup)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdup.write (((unsupported)) 0)
                            (((unsupported)) ((((unsupported)) ((xk)) ((xg)))) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((((xgroupby)) ((xs)) ((xtestR)))) ((xproto)))))))
                              (((unsupported)) ((((unsupported)) ((xik)) ((xig)))) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((((xgroupby)) ((xg)) ((xtestR2)))) ((xproto)))))))
                                (((unsupported)) ((xelem)) ((xig)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xk)) ((((unsupported)) ((xelem)) (0))))
                                    bogusForceDataize.write ((((xself).xassertEqual)) ((xik)) ((((unsupported)) ((xelem)) (2))))
                                    bogusForceDataize.write ((((xdup).xappend)) ((xelem)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xdup)))
                        xkeys.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((xs)) ((xtestR)))))
                        xexpectedkeys.write (((xset)) ((((unsupported)) ((((unsupported)) ((xr)) (0))) ((xr)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((xkeys)))) ((xexpectedkeys)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xkeys)))) ((((xlen)) ((xexpectedkeys)))))
                        xs.write (((xlist)) ((((xzip)) ("AABBBAAAA") ((((xrange)) (9))))))
                        xit.write (((xgroupby)) ((xs)) ((xtestR)))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xg1)))) ((((xnext)) ((xit)))))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xg2)))) ((((xnext)) ((xit)))))
                        (((unsupported)) ((((unsupported)) ((x_)) ((xg3)))) ((((xnext)) ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xg1)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xg2)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xg3)))) ((((unsupported)) ("A") (5))))
                        bogusForceDataize.write (((xlist)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xg3)))) ((((unsupported)) 0)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xgroupby)) ((xs)) ((xtestR)))
                            (((unsupported)) ((((unsupported)) ((x_)) ((xg)))) ((((xnext)) ((xit)))))
                            bogusForceDataize.write (((xnext)) ((xit)))
                            bogusForceDataize.write (((xnext)) ((xit)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xg)) ((xproto)))))))) ((((unsupported)) 0)))
                        xs.write "abracadabra"
                        xr.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((((xsorted)) ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((unsupported)) ("a") ("b") ("c") ("d") ("r"))))
                        xr.write (((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((((xsorted)) ((xs)))))) ((((xlist)) ((((xislice)) ((xg)) (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((unsupported)) ("a") ("b") ("r"))))
                        xr.write (((unsupported)) ((((unsupported)) ((((xlen)) ((((xlist)) ((xg)))))) ((xk)))) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((((xsorted)) ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((unsupported)) ((((unsupported)) (5) ("a"))) ((((unsupported)) (2) ("b"))) ((((unsupported)) (1) ("c"))) ((((unsupported)) (1) ("d"))) ((((unsupported)) (2) ("r"))))))
                        xr.write (((unsupported)) ((((unsupported)) ((xsorted)) ((((unsupported)) ((((unsupported)) ((((xlen)) ((((xlist)) ((xg)))))) ((xk)))) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((((xsorted)) ((xs)))))))) (TRUE))) ((((unsupported)) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xr)) ((((unsupported)) ((((unsupported)) (5) ("a"))) ((((unsupported)) (2) ("r"))) ((((unsupported)) (2) ("b"))))))
                        (((unsupported)) ((xException)))
                        xdelayed_raise.write
                          [xn]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((xi)) ((((xrange)) ((xn)))))
                                  (((unsupported)) ("yo"))
                                (((unsupported)) ((xExpectedError)))
                        xgulp.write
                          [xiterable xkeyp xfunc]
                            seq > @
                              (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((((xfunc)) ((xg)))) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ((xiterable)) ((xkeyp)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((((xdelayed_raise)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((((xdelayed_raise)) (1))))
                        (((unsupported)) 0)
                          x__eq__.write
                            [xself xdst]
                              seq > @
                                (((unsupported)) ((xExpectedError)))
                        xs.write (((unsupported)) ((((xDummyCmp)) 0)) ((((xDummyCmp)) 0)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((xs)) ((xid)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((xs)))
                        xkeyfunc.write
                          [xobj]
                            seq > @
                              (((xkeyfunc).xskip).greater 0).if
                                seq
                                  (((unsupported)) (((xkeyfunc).xskip)) (1))
                                  (((unsupported)) ((xobj)))
                                (((unsupported)) ((xExpectedError)))
                        (((unsupported)) (((xkeyfunc).xskip)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((((unsupported)) ("None: is there a None literal in the EO language?"))) ((xkeyfunc)))
                        (((unsupported)) (((xkeyfunc).xskip)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((xkeyfunc)))
                xtest_filter.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((xisEven)) ((((xrange)) (6))))))) ((((unsupported)) (0) (2) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ("None: is there a None literal in the EO language?") ((((unsupported)) (0) (1) (0) (2) (0))))))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((xbool)) ((((unsupported)) (0) (1) (0) (2) (0))))))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (4) ((((xfilter)) ((xisEven)) ((((xcount)) 0)))))) ((((unsupported)) (0) (2) (4) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)) ((((unsupported)) ((xx)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)) ((((unsupported)) ((xx)))) ((((xrange)) (6))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)) ((xisEven)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xfilter)) ((((xrange)) (6))) ((((xrange)) (6))))))
                        xans.write (((unsupported)) (0) (2) (4))
                        xc.write (((xfilter)) ((xisEven)) ((((xrange)) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xc)))))) ((xans)))
                        xc.write (((xfilter)) ((xisEven)) ((((xrange)) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xc)))))) ((xans)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xfilter)) ((xisEven)) ((((xrange)) (6))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xc)) ((xproto)))))))) ((xans)))
                            bogusForceDataize.write (((xnext)) ((xc)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xc)) ((xproto)))))))) ((((unsupported)) ((xans)) ((((unsupported)) (1))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xfilter)) ((xisEven)) ((((xrange)) (6))))
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((xc)))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilterfalse)) ((xisEven)) ((((xrange)) (6))))))) ((((unsupported)) (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilterfalse)) ("None: is there a None literal in the EO language?") ((((unsupported)) (0) (1) (0) (2) (0))))))) ((((unsupported)) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilterfalse)) ((xbool)) ((((unsupported)) (0) (1) (0) (2) (0))))))) ((((unsupported)) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (4) ((((xfilterfalse)) ((xisEven)) ((((xcount)) 0)))))) ((((unsupported)) (1) (3) (5) (7))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)) ((((unsupported)) ((xx)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)) ((((unsupported)) ((xx)))) ((((xrange)) (6))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)) ((xisEven)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xfilterfalse)) ((((xrange)) (6))) ((((xrange)) (6))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xfilterfalse)) ((xisEven)) ((((xrange)) (6))))))
                xtest_zip.write
                  [xself]
                    memory > xans
                    seq > @
                      seq
                        xans.write (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) ((xx)) ((xy)))) ((((xzip)) ("abc") ((((xcount)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ("abc") ((((xrange)) (6))))))) ((((xlzip)) ("abc") ((((xrange)) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ("abcdef") ((((xrange)) (3))))))) ((((xlzip)) ("abcdef") ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xzip)) ("abcdef") ((((xcount)) 0)))))) ((((xlzip)) ("abcdef") ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ("abcdef"))))) ((((xlzip)) ("abcdef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) 0)))) ((((xlzip)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) ((((xrange)) (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xtuple)) ((((xlist)) ((xpair)))))) ((xpair)) ((((xzip)) ("abc") ("def"))))) ((((xlzip)) ("abc") ("def"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpair)) ((xpair)) ((((xzip)) ("abc") ("def"))))) ((((xlzip)) ("abc") ("def"))))
                xtest_zip_tuple_reuse.write
                  [xself]
                    memory > xtestIntermediate
                    memory > xids
                    memory > xans
                    seq > @
                      (((unsupported)) 0)
                        xids.write (((xlist)) ((((xmap)) ((xid)) ((((xzip)) ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) ((xids)))) ((((xmax)) ((xids)))))
                        xids.write (((xlist)) ((((xmap)) ((xid)) ((((xlist)) ((((xzip)) ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xdict).xfromkeys)) ((xids)))))) ((((xlen)) ((xids)))))
                        xans.write (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) ((xx)) ((xy)))) (((((xcopy).xcopy)) ((((xzip)) ("abc") ((((xcount)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        xans.write (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) ((xx)) ((xy)))) (((((xcopy).xdeepcopy)) ((((xzip)) ("abc") ((((xcount)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xans.write (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) ((xx)) ((xy)))) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((((xzip)) ("abc") ((((xcount)) 0)))) ((xproto)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xtestIntermediate.write (((xzip)) ("abc") ((((xcount)) 0)))
                            bogusForceDataize.write (((xnext)) ((xtestIntermediate)))
                            xans.write (((unsupported)) ((((unsupported)) ((xx)) ((xy)))) ((((unsupported)) ((xx)) ((xy)))) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xtestIntermediate)) ((xproto)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((xans)) ((((unsupported)) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xzip)) ("abc") ((((xcount)) 0)))))
                xtest_ziplongest.write
                  [xself]
                    memory > xtarget
                    seq > @
                      seq
                        (((unsupported)) ((xargs)) ((((unsupported)) ((((unsupported)) ("abc") ((((xrange)) (6))))) ((((unsupported)) ((((xrange)) (6))) ("abc"))) ((((unsupported)) ((((xrange)) (1000))) ((((xrange)) (2000) (2100))) ((((xrange)) (3000) (3050))))) ((((unsupported)) ((((xrange)) (1000))) ((((xrange)) (0))) ((((xrange)) (3000) (3050))) ((((xrange)) (1200))) ((((xrange)) (1500))))) ((((unsupported)) ((((xrange)) (1000))) ((((xrange)) (0))) ((((xrange)) (3000) (3050))) ((((xrange)) (1200))) ((((xrange)) (1500))) ((((xrange)) (0))))))))
                          seq
                            xtarget.write (((unsupported)) ((((xtuple)) ((((unsupported)) ((((xi).less (((xlen)) ((xarg)))).if (((unsupported)) ((xarg)) ((xi))) "None: is there a None literal in the EO language?")) ((xarg)) ((xargs)))))) ((xi)) ((((xrange)) ((((xmax)) ((((xmap)) ((xlen)) ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((unsupported)) ((xargs)))))))) ((xtarget)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((((unsupported)) 0)))))))) ((xtarget)))
                            xtarget.write (((unsupported)) ((((xtuple)) ((((unsupported)) ((((((unsupported)) ((xe)) ("None: is there a None literal in the EO language?")).and "X").or (xe))) ((xe)) ((xt)))))) ((xt)) ((xtarget)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((((unsupported)) ((xdict)) ("X"))))))))) ((xtarget)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xzip_longest)) ("abcdef") ((((xcount)) 0)))))) ((((xlist)) ((((xzip)) ("abcdef") ((((xrange)) (3))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) 0)))) ((((xlist)) ((((xzip)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((unsupported)) 0)))))) ((((xlist)) ((((xzip)) ((((unsupported)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ("abcdef"))))) ((((xlist)) ((((xzip)) ("abcdef"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ("abc") ("defg") ((((unsupported)) ((((unsupported)) 0)))))))) ((((xlist)) ((((xzip)) (((((xlist)) ("abc")).add (((unsupported)) ("None: is there a None literal in the EO language?")))) ("defg"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip_longest)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip_longest)) ((((xrange)) (3))) (3))
                        (((unsupported)) ((xstmt)) ((((unsupported)) ("zip_longest('abc', fv=1)") ("zip_longest('abc', fillvalue=1, bogus_keyword=None)"))))
                          (((unsupported)) ((xTypeError)))
                            bogusForceDataize.write (((xeval)) ((xstmt)) ((((xglobals)) 0)) ((((xlocals)) 0)))
                            bogusForceDataize.write ((((xself).xfail)) (("Did not raise Type in:  ".add (xstmt))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xtuple)) ((((xlist)) ((xpair)))))) ((xpair)) ((((xzip_longest)) ("abc") ("def"))))) ((((xlist)) ((((xzip)) ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xpair)) ((xpair)) ((((xzip_longest)) ("abc") ("def"))))) ((((xlist)) ((((xzip)) ("abc") ("def"))))))
                xtest_zip_longest_tuple_reuse.write
                  [xself]
                    memory > xids
                    seq > @
                      (((unsupported)) 0)
                        xids.write (((xlist)) ((((xmap)) ((xid)) ((((xzip_longest)) ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xmin)) ((xids)))) ((((xmax)) ((xids)))))
                        xids.write (((xlist)) ((((xmap)) ((xid)) ((((xlist)) ((((xzip_longest)) ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) (((((xdict).xfromkeys)) ((xids)))))) ((((xlen)) ((xids)))))
                xtest_zip_longest_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xzip_longest)) ("abc") ("def"))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xzip_longest)) ("abc") ("defgh"))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((unsupported)) ((xzip_longest)) ("abc") ("defgh") (1))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xzip_longest)) ("") ("defgh"))))
                xtest_zip_longest_bad_iterable.write
                  [xself]
                    memory > xexception
                    memory > x__iter__
                    seq > @
                      seq
                        xexception.write (((xTypeError)) 0)
                        (((unsupported)) 0)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)) ((xexception)))
                        (((unsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xzip_longest)) ((((xBadIterable)) 0)))
                        bogusForceDataize.write ((((xself).xassertIs)) (((xcm).xexception)) ((xexception)))
                xtest_bug_7244.write
                  [xself]
                    memory > x__iter__
                    memory > xr1
                    memory > xit
                    memory > x__next__
                    memory > xr2
                    memory > xrun
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xo xt xe]
                                seq > @
                                  seq
                                    (((unsupported)) (((xself).xo)) ((xo)))
                                    (((unsupported)) (((xself).xt)) ((((xint)) ((xt)))))
                                    (((unsupported)) (((xself).xe)) ((xe)))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((xself).xt).greater 0).if
                                    seq
                                      (((unsupported)) (((xself).xt)) (1))
                                      (((unsupported)) (((xself).xo)))
                                    (((unsupported)) (((xself).xe)))
                        xr1.write (((xRepeater)) (1) (3) ((xStopIteration)))
                        xr2.write (((xRepeater)) (2) (4) ((xStopIteration)))
                        xrun.write
                          [xr1 xr2]
                            memory > xresult
                            seq > @
                              seq
                                xresult.write (((unsupported)) 0)
                                (((unsupported)) ((((unsupported)) ((xi)) ((xj)))) ((((unsupported)) ((xzip_longest)) ((xr1)) ((xr2)) (0))))
                                  seq
                                    (((unsupported)) (((((xsupport).xcaptured_output)) ("stdout"))))
                                      bogusForceDataize.write (((xprint)) ((((unsupported)) ((xi)) ((xj)))))
                                    bogusForceDataize.write ((((xresult).xappend)) ((((unsupported)) ((xi)) ((xj)))))
                                (((unsupported)) ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrun)) ((xr1)) ((xr2)))) ((((unsupported)) ((((unsupported)) (1) (2))) ((((unsupported)) (1) (2))) ((((unsupported)) (1) (2))) ((((unsupported)) (0) (2))))))
                        xr1.write (((xRepeater)) (1) (3) ((xRuntimeError)))
                        xr2.write (((xRepeater)) (2) (4) ((xStopIteration)))
                        xit.write (((unsupported)) ((xzip_longest)) ((xr1)) ((xr2)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ((((unsupported)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xRuntimeError)) ((xnext)) ((xit)))
                xtest_product.write
                  [xself]
                    memory > xproduct2
                    memory > xargtypes
                    memory > xexpected_len
                    memory > xargs
                    memory > xproduct1
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xresult)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) 0)))))) ((((unsupported)) ((((unsupported)) ("ab"))) ((((unsupported)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))))))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (3))))) ((((unsupported)) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (1))) ((((unsupported)) (0) (2))) ((((unsupported)) (1) (0))) ((((unsupported)) (1) (1))) ((((unsupported)) (1) (2))))))) ((((unsupported)) ((((unsupported)) ((((xrange)) (0))) ((((xrange)) (2))) ((((xrange)) (3))))) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (0))) ((((xrange)) (3))))) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (3))) ((((xrange)) (0))))) ((((unsupported)) 0)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))))))) ((xresult)))
                            (((unsupported)) ((xr)) ((((xrange)) (4))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xproduct)) ((((unsupported)) (((xargs).mul (xr))))))))) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))) ((((unsupported)) ((((unsupported)) ((xdict)) ((xr)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlist)) ((((xproduct)) ((((unsupported)) (((((unsupported)) ((((xrange)) (7)))).mul 6)))))))))) ((((unsupported)) (7) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xproduct)) ((((xrange)) (6))) ("None: is there a None literal in the EO language?"))
                        xproduct1.write
                          []
                            memory > xn
                            memory > xindices
                            memory > xpools
                            seq > @
                              (((unsupported)) 0)
                                xpools.write ((((xlist)) ((((xmap)) ((xtuple)) ((xargs))))).mul ((((xkwds).xget)) ("repeat") (1)))
                                xn.write (((xlen)) ((xpools)))
                                ((xn).eq 0).if
                                  seq
                                    (((unsupported)) ((((unsupported)) 0)))
                                    (((unsupported)) 0)
                                (((xany)) ((((unsupported)) (((((xlen)) ((xpool))).eq 0)) ((xpool)) ((xpools))))).if
                                  (((unsupported)) 0)
                                xindices.write ((((unsupported)) (0)).mul (xn))
                                (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((((unsupported)) ((xpool)) ((xi)))) ((((xzip)) ((xpools)) ((xindices)))))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      (((unsupported)) ((xi)) ((((xreversed)) ((((xrange)) ((xn)))))))
                                        seq
                                          ((((unsupported)) ((xindices)) ((xi))).eq ((((xlen)) ((((unsupported)) ((xpools)) ((xi))))).sub 1)).if
                                            (((unsupported)) 0)
                                          (((unsupported)) ((((unsupported)) ((xindices)) ((xi)))) (1))
                                          (((unsupported)) ((xj)) ((((xrange)) (((xi).add 1)) ((xn)))))
                                            (((unsupported)) ((((unsupported)) ((xindices)) ((xj)))) (0))
                                          (((unsupported)) ((((xtuple)) ((((unsupported)) ((((unsupported)) ((xpool)) ((xi)))) ((((unsupported)) ((xpool)) ((xi)))) ((((xzip)) ((xpools)) ((xindices)))))))))
                                          (((unsupported)) 0)
                                        (((unsupported)) 0)
                        xproduct2.write
                          []
                            memory > xresult
                            memory > xpools
                            seq > @
                              (((unsupported)) 0)
                                unsupported
                                xpools.write ((((xlist)) ((((xmap)) ((xtuple)) ((xargs))))).mul ((((xkwds).xget)) ("repeat") (1)))
                                xresult.write (((unsupported)) ((((unsupported)) 0)))
                                (((unsupported)) ((xpool)) ((xpools)))
                                  xresult.write (((unsupported)) (((xx).add (((unsupported)) ((xy))))) ((xx)) ((xresult)) ((xy)) ((xpool)))
                                (((unsupported)) ((xprod)) ((xresult)))
                                  (((unsupported)) ((((xtuple)) ((xprod)))))
                        xargtypes.write (((unsupported)) ("") ("abc") ("") ((((xrange)) (0))) ((((xrange)) (4))) ((((unsupported)) ((xdict)) (1) (2) (3))) ((((xset)) ("abcdefg"))) ((((xrange)) (11))) ((((xtuple)) ((((xrange)) (13))))))
                        (((unsupported)) ((xi)) ((((xrange)) (100))))
                          seq
                            xargs.write (((unsupported)) (((((xrandom).xchoice)) ((xargtypes)))) ((xj)) ((((xrange)) (((((xrandom).xrandrange)) (5))))))
                            xexpected_len.write (((xprod)) ((((xmap)) ((xlen)) ((xargs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))))))))) ((xexpected_len)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))))))) ((((xlist)) ((((xproduct1)) ((((unsupported)) ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))))))) ((((xlist)) ((((xproduct2)) ((((unsupported)) ((xargs)))))))))
                            xargs.write (((xmap)) ((xiter)) ((xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlist)) ((((xproduct)) ((((unsupported)) ((xargs)))))))))) ((xexpected_len)))
                xtest_product_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) (((((xself).xassertRaises)) ((((unsupported)) ((xOverflowError)) ((xMemoryError)))))))
                          (((unsupported)) ((xproduct)) ((((unsupported)) (((((unsupported)) ("ab")).mul (((unsupported)) (2) (5)))))) ((((unsupported)) (2) (25))))
                xtest_product_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xproduct)) ("abc") ("def"))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)) ((((xlen)) ((((xset)) ((((xmap)) ((xid)) ((((xlist)) ((((xproduct)) ("abc") ("def"))))))))))) (1))
                xtest_product_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)) ((((unsupported)) ((xargs)) ((xresult)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) 0)))))) ((((unsupported)) ((((unsupported)) ("ab"))) ((((unsupported)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))))))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (3))))) ((((unsupported)) ((((unsupported)) (0) (0))) ((((unsupported)) (0) (1))) ((((unsupported)) (0) (2))) ((((unsupported)) (1) (0))) ((((unsupported)) (1) (1))) ((((unsupported)) (1) (2))))))) ((((unsupported)) ((((unsupported)) ((((xrange)) (0))) ((((xrange)) (2))) ((((xrange)) (3))))) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (0))) ((((xrange)) (3))))) ((((unsupported)) 0)))) ((((unsupported)) ((((unsupported)) ((((xrange)) (2))) ((((xrange)) (3))) ((((xrange)) (0))))) ((((unsupported)) 0)))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((((xproduct)) ((((unsupported)) ((xargs)))))))))) ((xresult)))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((((xproduct)) ((((unsupported)) ((xargs)))))))))) ((xresult)))
                          (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xproduct)) ((((unsupported)) ((xargs)))))))
                xtest_product_issue_25021.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xproduct)) ((((unsupported)) (1) (2))) ((((unsupported)) (3))))
                        bogusForceDataize.write ((((xp).x__setstate__)) ((((unsupported)) (0) (4096))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xp)))) ((((unsupported)) (2) (3))))
                        xp.write (((xproduct)) ((((unsupported)) (1) (2))) ((((unsupported)) 0)) ((((unsupported)) (3))))
                        bogusForceDataize.write ((((xp).x__setstate__)) ((((unsupported)) (0) (0) (4096))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xp)))
                xtest_repeat.write
                  [xself]
                    memory > xc
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xrepeat)) ("a") (3))))) ((((unsupported)) ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ((((xrange)) (3))) ((((xrepeat)) ("a"))))) ((((unsupported)) ((((unsupported)) (0) ("a"))) ((((unsupported)) (1) ("a"))) ((((unsupported)) (2) ("a"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xrepeat)) ("a") (3))))) ((((unsupported)) ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xrepeat)) ("a"))))) ((((unsupported)) ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xrepeat)) ("a") (0))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xrepeat)) ("a") ((3.neg)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xrepeat)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xrepeat)) ("None: is there a None literal in the EO language?") (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xrepeat)) ("None: is there a None literal in the EO language?") ("a"))
                        xr.write (((xrepeat)) ((1.add (((unsupported)) 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xr)))) ("repeat((1+0j))"))
                        xr.write (((xrepeat)) ((1.add (((unsupported)) 0))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xr)))) ("repeat((1+0j), 5)"))
                        bogusForceDataize.write (((xlist)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xr)))) ("repeat((1+0j), 0)"))
                        xc.write (((unsupported)) ((xrepeat)) ("a") (10))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xc)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) (((((xcopy).xcopy)) ((xc)))))) ((((xlist)) (("a".mul 2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) (((((xcopy).xdeepcopy)) ((xc)))))) ((((xlist)) (("a".mul 2)))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((unsupported)) ((xrepeat)) ("a") (10))))
                xtest_repeat_with_negative_times.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xrepeat)) ("a") ((1.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xrepeat)) ("a") ((2.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((unsupported)) ((xrepeat)) ("a") ((1.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((unsupported)) ((xrepeat)) ("a") ((2.neg)))))) ("repeat('a', 0)"))
                xtest_map.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) (((xoperator).xpow)) ((((xrange)) (3))) ((((xrange)) (1) (7))))))) ((((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (1) (2))) ((((unsupported)) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xtupleize)) ("abc") ((((xrange)) (5))))))) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xtupleize)) ("abc") ((((xcount)) 0)))))) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (2) ((((xmap)) ((xtupleize)) ("abc") ((((xcount)) 0)))))) ((((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) (((xoperator).xpow)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xmap)) ("None: is there a None literal in the EO language?") ((((xrange)) (3))) ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)) (((xoperator).xneg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xmap)) (10) ((((xrange)) (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((((xmap)) ((xerrfunc)) ((((unsupported)) (4))) ((((unsupported)) (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xmap)) ((xonearg)) ((((unsupported)) (4))) ((((unsupported)) (5))))))
                        xans.write (((unsupported)) ((((unsupported)) ("a") (0))) ((((unsupported)) ("b") (1))) ((((unsupported)) ("c") (2))))
                        xc.write (((xmap)) ((xtupleize)) ("abc") ((((xcount)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xc)))))) ((xans)))
                        xc.write (((xmap)) ((xtupleize)) ("abc") ((((xcount)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xc)))))) ((xans)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xmap)) ((xtupleize)) ("abc") ((((xcount)) 0)))
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((xc)))
                xtest_starmap.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((xzip)) ((((xrange)) (3))) ((((xrange)) (1) (7))))))))) ((((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (1) (2))) ((((unsupported)) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xtake)) (3) ((((xstarmap)) (((xoperator).xpow)) ((((xzip)) ((((xcount)) 0)) ((((xcount)) (1))))))))) ((((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (1) (2))) ((((unsupported)) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((unsupported)) ((((xiter)) ((((unsupported)) (4) (5))))))))))) ((((unsupported)) ((((unsupported)) (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((unsupported)) ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xstarmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((unsupported)) ((((unsupported)) (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xstarmap)) (10) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((((xstarmap)) ((xerrfunc)) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xstarmap)) ((xonearg)) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        xans.write (((unsupported)) ((((unsupported)) (0) (1))) ((((unsupported)) (1) (2))) ((((unsupported)) (2) (3))))
                        xc.write (((xstarmap)) (((xoperator).xpow)) ((((xzip)) ((((xrange)) (3))) ((((xrange)) (1) (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xc)))))) ((xans)))
                        xc.write (((xstarmap)) (((xoperator).xpow)) ((((xzip)) ((((xrange)) (3))) ((((xrange)) (1) (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xc)))))) ((xans)))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xstarmap)) (((xoperator).xpow)) ((((xzip)) ((((xrange)) (3))) ((((xrange)) (1) (7))))))
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((xc)))
                xtest_islice.write
                  [xself]
                    memory > xc
                    memory > x__index__
                    memory > xwr
                    memory > xit
                    memory > x__init__
                    memory > xra
                    seq > @
                      seq
                        (((unsupported)) ((xargs)) ((((unsupported)) ((((unsupported)) (10) (20) (3))) ((((unsupported)) (10) (3) (20))) ((((unsupported)) (10) (20))) ((((unsupported)) (10) (10))) ((((unsupported)) (10) (3))) ((((unsupported)) (20))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (100))) ((((unsupported)) ((xargs)))))))) ((((xlist)) ((((xrange)) ((((unsupported)) ((xargs)))))))))
                        (((unsupported)) ((((unsupported)) ((xargs)) ((xtgtargs)))) ((((unsupported)) ((((unsupported)) ((((unsupported)) (10) (110) (3))) ((((unsupported)) (10) (100) (3))))) ((((unsupported)) ((((unsupported)) (10) (110))) ((((unsupported)) (10) (100))))) ((((unsupported)) ((((unsupported)) (110))) ((((unsupported)) (100))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (100))) ((((unsupported)) ((xargs)))))))) ((((xlist)) ((((xrange)) ((((unsupported)) ((xtgtargs)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (10))) ("None: is there a None literal in the EO language?"))))) ((((xlist)) ((((xrange)) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (10))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((xlist)) ((((xrange)) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (10))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((xlist)) ((((xrange)) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (10))) (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)) ((((xrange)) (2) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (10))) (1) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)) ((((xrange)) (1) (10) (2))))))
                        xit.write (((xiter)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((xit)) (3))))) ((((xlist)) ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((xlist)) ((((xrange)) (3) (10))))))
                        xit.write (((xiter)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((xit)) (3) (3))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((xlist)) ((((xrange)) (3) (10))))))
                        xra.write (((xrange)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xislice)) ((xra)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xislice)) ((xra)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) ((5.neg)) (10) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) (1) ((5.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) (1) (10) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) (1) (10) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) (1) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) ("a") (1) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xislice)) ((xra)) (1) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xlist)) ((((xislice)) ((((xcount)) 0)) (1) (10) ((xmaxsize)))))))) (1))
                        xc.write (((xcount)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((xc)) (1) (3) (50))))) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xc)))) (3))
                        (((unsupported)) ((xargs)) ((((unsupported)) ((((unsupported)) (10) (20) (3))) ((((unsupported)) (10) (3) (20))) ((((unsupported)) (10) (20))) ((((unsupported)) (10) (3))) ((((unsupported)) (20))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((((xislice)) ((((xrange)) (100))) ((((unsupported)) ((xargs)))))))))) ((((xlist)) ((((xrange)) ((((unsupported)) ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((((xislice)) ((((xrange)) (100))) ((((unsupported)) ((xargs)))))))))) ((((xlist)) ((((xrange)) ((((unsupported)) ((xargs)))))))))
                            (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xislice)) ((((xrange)) (100))) ((((unsupported)) ((xargs)))))))
                        xit.write (((unsupported)) ((xx)) ((xx)) ((((unsupported)) (1) (2))))
                        xwr.write ((((xweakref).xref)) ((xit)))
                        xit.write (((xislice)) ((xit)) (1))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)) ((((xwr)) 0)))
                        bogusForceDataize.write (((xlist)) ((xit)))
                        bogusForceDataize.write ((((xsupport).xgc_collect)) 0)
                        bogusForceDataize.write ((((xself).xassertIsNone)) ((((xwr)) 0)))
                        (((unsupported)) ((xobject)))
                          seq
                            x__init__.write
                              [xself xval]
                                seq > @
                                  (((unsupported)) (((xself).xval)) ((xval)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)) (((xself).xval)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (100))) ((((xIntLike)) (10))))))) ((((xlist)) ((((xrange)) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (100))) ((((xIntLike)) (10))) ((((xIntLike)) (50))))))) ((((xlist)) ((((xrange)) (10) (50))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xrange)) (100))) ((((xIntLike)) (10))) ((((xIntLike)) (50))) ((((xIntLike)) (5))))))) ((((xlist)) ((((xrange)) (10) (50) (5))))))
                xtest_takewhile.write
                  [xself]
                    memory > xt
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (3) (5) (20) (2) (4) (6) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xtakewhile)) ((xunderten)) ((xdata)))))) ((((unsupported)) (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xtakewhile)) ((xunderten)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtakewhile)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtakewhile)) (((xoperator).xpow)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtakewhile)) (((xoperator).xpow)) ((((unsupported)) ((((unsupported)) (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xtakewhile)) (10) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((((xtakewhile)) ((xerrfunc)) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        xt.write (((xtakewhile)) ((xbool)) ((((unsupported)) (1) (1) (1) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xt)))) ((((unsupported)) (1) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((((xtakewhile)) ((xunderten)) ((xdata)))))))) ((((unsupported)) (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((((xtakewhile)) ((xunderten)) ((xdata)))))))) ((((unsupported)) (1) (3) (5))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xtakewhile)) ((xunderten)) ((xdata)))))
                xtest_dropwhile.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (3) (5) (20) (2) (4) (6) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xdropwhile)) ((xunderten)) ((xdata)))))) ((((unsupported)) (20) (2) (4) (6) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xdropwhile)) ((xunderten)) ((((unsupported)) 0)))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdropwhile)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdropwhile)) (((xoperator).xpow)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdropwhile)) (((xoperator).xpow)) ((((unsupported)) ((((unsupported)) (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xnext)) ((((xdropwhile)) (10) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xnext)) ((((xdropwhile)) ((xerrfunc)) ((((unsupported)) ((((unsupported)) (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((((xdropwhile)) ((xunderten)) ((xdata)))))))) ((((unsupported)) (20) (2) (4) (6) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((((xdropwhile)) ((xunderten)) ((xdata)))))))) ((((unsupported)) (20) (2) (4) (6) (8))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xdropwhile)) ((xunderten)) ((xdata)))))
                xtest_tee.write
                  [xself]
                    memory > xlong_ans
                    memory > xvalue
                    memory > xp
                    memory > xt3
                    memory > xresult
                    memory > xits
                    memory > xtnew
                    memory > xc
                    memory > xans
                    memory > xlists
                    memory > xn
                    memory > xorder
                    seq > @
                      seq
                        xn.write 200
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xirange)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlzip)) ((xa)) ((xb)))) ((((xlzip)) ((((xrange)) ((xn)))) ((((xrange)) ((xn)))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xirange)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((xlist)) ((((xrange)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((xlist)) ((((xrange)) ((xn)))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xirange)) ((xn)))))))
                        (((unsupported)) ((xi)) ((((xrange)) (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xa)))) ((xi)))
                        (((unsupported)) ((((unsupported)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((xlist)) ((((xrange)) ((xn)))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xirange)) ((xn)))))))
                        (((unsupported)) ((xi)) ((((xrange)) (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xa)))) ((xi)))
                        (((unsupported)) ((((unsupported)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((xlist)) ((((xrange)) (100) ((xn)))))))
                        (((unsupported)) ((xj)) ((((xrange)) (5))))
                          seq
                            xorder.write (((((unsupported)) (0)).mul (xn)).add ((((unsupported)) (1)).mul (xn)))
                            bogusForceDataize.write ((((xrandom).xshuffle)) ((xorder)))
                            xlists.write (((unsupported)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                            xits.write (((xtee)) ((((xirange)) ((xn)))))
                            (((unsupported)) ((xi)) ((xorder)))
                              seq
                                xvalue.write (((xnext)) ((((unsupported)) ((xits)) ((xi)))))
                                bogusForceDataize.write ((((((unsupported)) ((xlists)) ((xi))).xappend)) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlists)) (0))) ((((xlist)) ((((xrange)) ((xn)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xlists)) (1))) ((((xlist)) ((((xrange)) ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) ((((unsupported)) (1) (2))) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) ((((unsupported)) (1) (2))) (3) ("x"))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        xc.write (((((xtype)) ((xa)))) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xc)))) ((((xlist)) ("def"))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)) ((xc)))) ((((xtee)) ((((xrange)) (2000))) (3))))
                        (((unsupported)) ((xi)) ((((xrange)) (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xa)))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((xlist)) ((((xrange)) (2000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xnext)) ((xc)))) ((((xnext)) ((xc)))))) ((((xlist)) ((((xrange)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((xlist)) ((((xrange)) (100) (2000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xc)))) ((((xlist)) ((((xrange)) (2) (2000))))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) ("abc") ("invalid"))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xValueError)) ((xtee)) ((((unsupported)) 0)) ((1.neg)))
                        (((unsupported)) ((xn)) ((((xrange)) (5))))
                          seq
                            xresult.write (((xtee)) ("abc") ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xtype)) ((xresult)))) ((xtuple)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xresult)))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xx)))) ((xx)) ((xresult)))) (((((unsupported)) ((((xlist)) ("abc")))).mul (xn))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        (((unsupported)) ((((unsupported)) ((xc)) ((xd)))) ((((xtee)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((xa)) ((xc)))))
                        (((unsupported)) ((((unsupported)) ((xt1)) ((xt2)))) ((((xtee)) ("abc"))))
                        xtnew.write (((xtype)) ((xt1)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtnew)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtnew)) (10))
                        xt3.write (((xtnew)) ((xt1)))
                        bogusForceDataize.write ((((xself).xassertTrue)) ((((unsupported)) ((((xlist)) ((xt1)))) ((((xlist)) ((xt2)))) ((((xlist)) ((xt3)))) ((((xlist)) ("abc"))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xrange)) (10))))))
                        xp.write ((((xweakref).xproxy)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xgetattr)) ((xp)) ("__class__"))) ((((xtype)) ((xb)))))
                        (((unsupported)) ((((unsupported)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xReferenceError)) ((xgetattr)) ((xp)) ("__class__"))
                        xans.write (((xlist)) ("abc"))
                        xlong_ans.write (((xlist)) ((((xrange)) (10000))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xa)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xb)))))) ((xans)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xlist)) ((((xrange)) (10000))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xa)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xb)))))) ((xlong_ans)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        bogusForceDataize.write (((xtake)) (2) ((xa)))
                        bogusForceDataize.write (((xtake)) (1) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xa)))))) ((((unsupported)) ((xans)) ((((unsupported)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xb)))))) ((((unsupported)) ((xans)) ((((unsupported)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((unsupported)) ((xans)) ((((unsupported)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((unsupported)) ((xans)) ((((unsupported)) (1))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xrange)) (10000))))))
                        bogusForceDataize.write (((xtake)) (100) ((xa)))
                        bogusForceDataize.write (((xtake)) (60) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xa)))))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xb)))))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (60))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (60))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xa)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xb)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((xans)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xrange)) (10000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xa)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xb)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((xlong_ans)))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                        bogusForceDataize.write (((xtake)) (2) ((xa)))
                        bogusForceDataize.write (((xtake)) (1) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xa)))))) ((((unsupported)) ((xans)) ((((unsupported)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xb)))))) ((((unsupported)) ((xans)) ((((unsupported)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((unsupported)) ((xans)) ((((unsupported)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((unsupported)) ((xans)) ((((unsupported)) (1))))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xrange)) (10000))))))
                        bogusForceDataize.write (((xtake)) (100) ((xa)))
                        bogusForceDataize.write (((xtake)) (60) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xa)))))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xb)))))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (60))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xa)))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xb)))) ((((unsupported)) ((xlong_ans)) ((((unsupported)) (60))))))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xpickletest)) ((xproto)) ((((xiter)) ((((xtee)) ("abc"))))))
                            (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ("abc"))))
                            (((unsupported)) (((xself).xpickletest)) ((xproto)) ((xa)) ((xans)))
                            (((unsupported)) (((xself).xpickletest)) ((xproto)) ((xb)) ((xans)))
                xtest_tee_del_backward.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)) ((((unsupported)) ((xforward)) ((xbackward)))) ((((xtee)) ((((xrepeat)) ("None: is there a None literal in the EO language?") (20000000))))))
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write (((xany)) ((xforward)))
                            (((unsupported)) ((((unsupported)) ((xbackward)))))
                          seq
                            (((unsupported)) ((((unsupported)) ((xforward)) ((xbackward)))))
                            (((unsupported)) 0)
                xtest_tee_reenter.write
                  [xself]
                    memory > x__next__
                    memory > xfirst
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            xfirst.write TRUE
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                memory > xfirst
                                seq > @
                                  seq
                                    xfirst.write ((xself).xfirst)
                                    (((unsupported)) (((xself).xfirst)) (FALSE))
                                    (xfirst).if
                                      (((unsupported)) ((((xnext)) ((xb)))))
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xI)) 0)))))
                        (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ("tee"))))
                          bogusForceDataize.write (((xnext)) ((xa)))
                xtest_tee_concurrent.write
                  [xself]
                    memory > x__iter__
                    memory > xfinish
                    memory > xstart
                    memory > x__next__
                    memory > xthread
                    seq > @
                      seq
                        xstart.write ((((xthreading).xEvent)) 0)
                        xfinish.write ((((xthreading).xEvent)) 0)
                        (((unsupported)) 0)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)) ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xstart).xset)) 0)
                                    bogusForceDataize.write ((((xfinish).xwait)) 0)
                        (((unsupported)) ((((unsupported)) ((xa)) ((xb)))) ((((xtee)) ((((xI)) 0)))))
                        xthread.write (((unsupported)) (((xthreading).xThread)) ((xnext)) ((((unsupported)) ((xa)))))
                        bogusForceDataize.write ((((xthread).xstart)) 0)
                        (((unsupported)) 0)
                          seq
                            bogusForceDataize.write ((((xstart).xwait)) 0)
                            (((unsupported)) (((((xself).xassertRaisesRegex)) ((xRuntimeError)) ("tee"))))
                              bogusForceDataize.write (((xnext)) ((xb)))
                          seq
                            bogusForceDataize.write ((((xfinish).xset)) 0)
                            bogusForceDataize.write ((((xthread).xjoin)) 0)
                xtest_StopIteration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xzip)) 0)))
                        (((unsupported)) ((xf)) ((((unsupported)) ((xchain)) ((xcycle)) ((xzip)) ((xgroupby)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xf)) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xf)) ((((xStopNow)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xislice)) ((((unsupported)) 0)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xislice)) ((((xStopNow)) 0)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((xtee)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xq)))
                        (((unsupported)) ((((unsupported)) ((xp)) ((xq)))) ((((xtee)) ((((xStopNow)) 0)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xrepeat)) ("None: is there a None literal in the EO language?") (0))))
                        (((unsupported)) ((xf)) ((((unsupported)) ((xfilter)) ((xfilterfalse)) ((xmap)) ((xtakewhile)) ((xdropwhile)) ((xstarmap)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xf)) ((((unsupported)) ((xx)))) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertRaises)) ((xStopIteration)) ((xnext)) ((((xf)) ((((unsupported)) ((xx)))) ((((xStopNow)) 0)))))
                xtest_combinations_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xcombinations)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))) (1))
                        bogusForceDataize.write (((xnext)) ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
                xtest_combinations_with_replacement_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xcombinations_with_replacement)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))) (1))
                        bogusForceDataize.write (((xnext)) ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
                xtest_permutations_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xpermutations)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))) (1))
                        bogusForceDataize.write (((xnext)) ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
                xtest_product_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xproduct)) ((((unsupported)) ("None: is there a None literal in the EO language?") ((((unsupported)) 0)))))
                        bogusForceDataize.write (((xnext)) ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
                xtest_zip_longest_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write (((xzip_longest)) ((((unsupported)) ((((unsupported)) 0)))))
                        bogusForceDataize.write ((((xgc).xcollect)) 0)
                        bogusForceDataize.write ((((xself).xassertTrue)) (((((xgc).xis_tracked)) ((((xnext)) ((xit)))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_accumulate.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((unsupported)) (1) (2) (3) (4) (5))))))) ((((unsupported)) (1) (3) (6) (10) (15))))
                xtest_accumulate_reducible.write
                  [xself]
                    memory > xaccumulated
                    memory > xit
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)) (1) (2) (3) (4) (5))
                        xaccumulated.write (((unsupported)) (1) (3) (6) (10) (15))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xaccumulate)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xit)) ((xproto)))))))) ((((unsupported)) ((xaccumulated)) ((((unsupported)) 0)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xit)) ((xproto)))))))) ((((unsupported)) ((xaccumulated)) ((((unsupported)) (1))))))
                        xit.write (((xaccumulate)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xit)))))) ((((unsupported)) ((xaccumulated)) ((((unsupported)) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xit)))))) ((((unsupported)) ((xaccumulated)) ((((unsupported)) (1))))))
                xtest_accumulate_reducible_none.write
                  [xself]
                    memory > xit
                    memory > xit_copy
                    seq > @
                      seq
                        xit.write (((xaccumulate)) ((((unsupported)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) (((xoperator).xis_)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xit)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit_copy.write ((((xpickle).xloads)) (((((xpickle).xdumps)) ((xit)) ((xproto)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit_copy)))) ((((unsupported)) (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xdeepcopy)) ((xit)))))) ((((unsupported)) (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xcopy).xcopy)) ((xit)))))) ((((unsupported)) (TRUE) (FALSE))))
                xtest_chain.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) ((((xchain)) ("ABC") ("DEF"))))) ("ABCDEF"))
                xtest_chain_from_iterable.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) (((("".xjoin)) (((((xchain).xfrom_iterable)) ((((unsupported)) ("ABC") ("DEF"))))))) ("ABCDEF"))
                xtest_combinations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcombinations)) ("ABCD") (2))))) ((((unsupported)) ((((unsupported)) ("A") ("B"))) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("A") ("D"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("B") ("D"))) ((((unsupported)) ("C") ("D"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcombinations)) ((((xrange)) (4))) (3))))) ((((unsupported)) ((((unsupported)) (0) (1) (2))) ((((unsupported)) (0) (1) (3))) ((((unsupported)) (0) (2) (3))) ((((unsupported)) (1) (2) (3))))))
                xtest_combinations_with_replacement.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcombinations_with_replacement)) ("ABC") (2))))) ((((unsupported)) ((((unsupported)) ("A") ("A"))) ((((unsupported)) ("A") ("B"))) ((((unsupported)) ("A") ("C"))) ((((unsupported)) ("B") ("B"))) ((((unsupported)) ("B") ("C"))) ((((unsupported)) ("C") ("C"))))))
                xtest_compress.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (1) (0) (1) (0) (1) (1))))))) ((((xlist)) ("ACEF"))))
                xtest_count.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xcount)) (10))) (5))))) ((((unsupported)) (10) (11) (12) (13) (14))))
                xtest_cycle.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xcycle)) ("ABCD"))) (12))))) ((((xlist)) ("ABCDABCDABCD"))))
                xtest_dropwhile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xdropwhile)) ((((unsupported)) (((xx).less 5)))) ((((unsupported)) (1) (4) (6) (4) (1))))))) ((((unsupported)) (6) (4) (1))))
                xtest_groupby.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ("AAAABBBCCDAABBB"))))) ((((xlist)) ("ABCDAB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((((xlist)) ((xg)))) ((((unsupported)) ((xk)) ((xg)))) ((((xgroupby)) ("AAAABBBCCD"))))) ((((unsupported)) ((((xlist)) ("AAAA"))) ((((xlist)) ("BBB"))) ((((xlist)) ("CC"))) ((((xlist)) ("D"))))))
                xtest_filter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((((unsupported)) (((xx).mod 2)))) ((((xrange)) (10))))))) ((((unsupported)) (1) (3) (5) (7) (9))))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilterfalse)) ((((unsupported)) (((xx).mod 2)))) ((((xrange)) (10))))))) ((((unsupported)) (0) (2) (4) (6) (8))))
                xtest_map.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xpow)) ((((unsupported)) (2) (3) (10))) ((((unsupported)) (5) (2) (3))))))) ((((unsupported)) (32) (9) (1000))))
                xtest_islice.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ("ABCDEFG") (2))))) ((((xlist)) ("AB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ("ABCDEFG") (2) (4))))) ((((xlist)) ("CD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ("ABCDEFG") (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)) ("CDEFG"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ("ABCDEFG") (0) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)) ("ACEG"))))
                xtest_zip.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ("ABCD") ("xy"))))) ((((unsupported)) ((((unsupported)) ("A") ("x"))) ((((unsupported)) ("B") ("y"))))))
                xtest_zip_longest.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xzip_longest)) ("ABCD") ("xy") ("-"))))) ((((unsupported)) ((((unsupported)) ("A") ("x"))) ((((unsupported)) ("B") ("y"))) ((((unsupported)) ("C") ("-"))) ((((unsupported)) ("D") ("-"))))))
                xtest_permutations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xpermutations)) ("ABCD") (2))))) ((((xlist)) ((((xmap)) ((xtuple)) (((("AB AC AD BA BC BD CA CB CD DA DB DC".xsplit)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xpermutations)) ((((xrange)) (3))))))) ((((unsupported)) ((((unsupported)) (0) (1) (2))) ((((unsupported)) (0) (2) (1))) ((((unsupported)) (1) (0) (2))) ((((unsupported)) (1) (2) (0))) ((((unsupported)) (2) (0) (1))) ((((unsupported)) (2) (1) (0))))))
                xtest_product.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xproduct)) ("ABCD") ("xy"))))) ((((xlist)) ((((xmap)) ((xtuple)) (((("Ax Ay Bx By Cx Cy Dx Dy".xsplit)) 0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((unsupported)) ((xproduct)) ((((xrange)) (2))) (3))))) ((((unsupported)) ((((unsupported)) (0) (0) (0))) ((((unsupported)) (0) (0) (1))) ((((unsupported)) (0) (1) (0))) ((((unsupported)) (0) (1) (1))) ((((unsupported)) (1) (0) (0))) ((((unsupported)) (1) (0) (1))) ((((unsupported)) (1) (1) (0))) ((((unsupported)) (1) (1) (1))))))
                xtest_repeat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xrepeat)) (10) (3))))) ((((unsupported)) (10) (10) (10))))
                xtest_stapmap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xstarmap)) ((xpow)) ((((unsupported)) ((((unsupported)) (2) (5))) ((((unsupported)) (3) (2))) ((((unsupported)) (10) (3))))))))) ((((unsupported)) (32) (9) (1000))))
                xtest_takewhile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xtakewhile)) ((((unsupported)) (((xx).less 5)))) ((((unsupported)) (1) (4) (6) (4) (1))))))) ((((unsupported)) (1) (4))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xislice.write
                  [xiterable]
                    memory > xs
                    memory > xnexti
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xs.write (((xslice)) ((((unsupported)) ((xargs)))))
                        (((unsupported)) ((((unsupported)) ((xstart)) ((xstop)) ((xstep)))) ((((unsupported)) ((((xs).xstart).or 0)) ((((xs).xstop).or ((xsys).xmaxsize))) ((((xs).xstep).or 1)))))
                        xit.write (((xiter)) ((((xrange)) ((xstart)) ((xstop)) ((xstep)))))
                        (((unsupported)) ((xStopIteration)))
                          xnexti.write (((xnext)) ((xit)))
                          seq
                            (((unsupported)) ((((unsupported)) ((xi)) ((xelement)))) ((((xzip)) ((((xrange)) ((xstart)))) ((xiterable)))))
                            (((unsupported)) 0)
                        (((unsupported)) ((xStopIteration)))
                          (((unsupported)) ((((unsupported)) ((xi)) ((xelement)))) ((((xenumerate)) ((xiterable)))))
                            ((xi).eq (xnexti)).if
                              seq
                                (((unsupported)) ((xelement)))
                                xnexti.write (((xnext)) ((xit)))
                          (((unsupported)) ((((unsupported)) ((xi)) ((xelement)))) ((((xzip)) ((((xrange)) (((xi).add 1)) ((xstop)))) ((xiterable)))))
                xtest_islice_recipe.write
                  [xself]
                    memory > xc
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ("ABCDEFG") (2))))) ((((xlist)) ("AB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ("ABCDEFG") (2) (4))))) ((((xlist)) ("CD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ("ABCDEFG") (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)) ("CDEFG"))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ("ABCDEFG") (0) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)) ("ACEG"))))
                        xit.write (((xiter)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ((xit)) (3))))) ((((xlist)) ((((xrange)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((xlist)) ((((xrange)) (3) (10))))))
                        xit.write (((xiter)) ((((xrange)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ((xit)) (3) (3))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit)))) ((((xlist)) ((((xrange)) (3) (10))))))
                        xc.write (((xcount)) 0)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) (((((xself).xislice)) ((xc)) (1) (3) (50))))) ((((unsupported)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xnext)) ((xc)))) (3))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xmakecycle.write
                  [xself xiterator xcontainer]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xcontainer).xappend)) ((xiterator)))
                        bogusForceDataize.write (((xnext)) ((xiterator)))
                        (((unsupported)) ((((unsupported)) ((xcontainer)) ((xiterator)))))
                xtest_accumulate.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xaccumulate)) ((((unsupported)) (1) (2) ((xa)) (3))))) ((xa)))
                xtest_chain.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xchain)) ((xa)))) ((xa)))
                xtest_chain_from_iterable.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) (((((xchain).xfrom_iterable)) ((((unsupported)) ((xa)))))) ((xa)))
                xtest_combinations.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xcombinations)) ((((unsupported)) (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_combinations_with_replacement.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xcombinations_with_replacement)) ((((unsupported)) (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_compress.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xcompress)) ("ABCDEF") ((((unsupported)) (1) (0) (1) (0) (1) (0))))) ((xa)))
                xtest_count.write
                  [xself]
                    memory > xInt
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        xInt.write (((xtype)) ("Int") ((((unsupported)) ((xint)))) ((((unsupported)) ((xdict)) ((xa)))))
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xcount)) ((((xInt)) (0))) ((((xInt)) (1))))) ((xa)))
                xtest_cycle.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xcycle)) (((((unsupported)) ((xa))).mul 2)))) ((xa)))
                xtest_dropwhile.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xdropwhile)) ((xbool)) ((((unsupported)) (0) ((xa)) ((xa)))))) ((xa)))
                xtest_groupby.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xgroupby)) (((((unsupported)) ((xa))).mul 2)) ((((unsupported)) ((xx)))))) ((xa)))
                xtest_issue2246.write
                  [xself]
                    memory > xn
                    memory > xkeyfunc
                    seq > @
                      seq
                        xn.write 10
                        xkeyfunc.write (((unsupported)) ((xx)))
                        (((unsupported)) ((((unsupported)) ((xi)) ((xj)))) ((((unsupported)) ((xgroupby)) ((((xrange)) ((xn)))) ((xkeyfunc)))))
                          bogusForceDataize.write ((((((((xkeyfunc).x__dict__).xsetdefault)) ("x") ((((unsupported)) 0))).xappend)) ((xj)))
                xtest_filter.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xfilter)) ((((unsupported)) (TRUE))) (((((unsupported)) ((xa))).mul 2)))) ((xa)))
                xtest_filterfalse.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xfilterfalse)) ((((unsupported)) (FALSE))) ((xa)))) ((xa)))
                xtest_zip.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xzip)) (((((unsupported)) ((xa))).mul 2)) (((((unsupported)) ((xa))).mul 3)))) ((xa)))
                xtest_zip_longest.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xzip_longest)) (((((unsupported)) ((xa))).mul 2)) (((((unsupported)) ((xa))).mul 3)))) ((xa)))
                        xb.write (((unsupported)) ((xa)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((unsupported)) ((xzip_longest)) (((((unsupported)) ((xa))).mul 2)) (((((unsupported)) ((xa))).mul 3)) ((xb)))) ((xa)))
                xtest_map.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xmap)) ((((unsupported)) ((xx)))) (((((unsupported)) ((xa))).mul 2)))) ((xa)))
                xtest_islice.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xislice)) (((((unsupported)) ((xa))).mul 2)) ("None: is there a None literal in the EO language?"))) ((xa)))
                xtest_permutations.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xpermutations)) ((((unsupported)) (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_product.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((unsupported)) ((xproduct)) ((((unsupported)) (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_repeat.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xrepeat)) ((xa)))) ((xa)))
                xtest_starmap.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xstarmap)) ((((unsupported)) ((xt)))) (((((unsupported)) ((((unsupported)) ((xa)) ((xa))))).mul 2)))) ((xa)))
                xtest_takewhile.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xmakecycle)) ((((xtakewhile)) ((xbool)) ((((unsupported)) (1) (0) ((xa)) ((xa)))))) ((xa)))
            xR.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((xi)) ((xseqn)))
                      (((unsupported)) ((xi)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      (((unsupported)) (((xself).xseqn)) ((xseqn)))
                x__getitem__.write
                  [xself xi]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xseqn)) ((xi)))))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)) (((xself).xseqn)))).if
                          (((unsupported)) ((xStopIteration)))
                        xv.write (((unsupported)) (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)) (((xself).xi)) (1))
                        (((unsupported)) ((xv)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xval)) (((xself).xseqn)))
                        (((unsupported)) ((xval)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)) (((xself).xseqn)))).if
                          (((unsupported)) ((xStopIteration)))
                        xv.write (((unsupported)) (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)) (((xself).xi)) (1))
                        (((unsupported)) ((xv)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)) (((xself).xseqn)) ((xseqn)))
                        (((unsupported)) (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)) (3) (0))
            (((unsupported)) 0)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xStopIteration)))
            xL.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)) ((((xchain)) ((((xmap)) ((((unsupported)) ((xx)))) ((((xR)) ((((xIg)) ((((xG)) ((xseqn)))))))))))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_accumulate.write
                  [xself]
                    memory > xn
                    memory > xs
                    memory > xr
                    seq > @
                      seq
                        xs.write (((unsupported)) (1) (2) (3) (4) (5))
                        xr.write (((unsupported)) (1) (3) (6) (10) (15))
                        xn.write (((xlen)) ((xs)))
                        (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xL)) ((xR)))))
                          bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((xg)) ((xs)))))))) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xaccumulate)) ((((xS)) ((xs)))))))) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)) ((((xX)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)) ((((xN)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xaccumulate)) ((((xE)) ((xs)))))))
                xtest_chain.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xchain)) ((((xg)) ((xs)))))))) ((((xlist)) ((((xg)) ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xchain)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))) (((((xlist)) ((((xg)) ((xs))))).add (((xlist)) ((((xg)) ((xs))))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xchain)) ((((xX)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xlist)) ((((xchain)) ((((xN)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xchain)) ((((xE)) ((xs)))))))
                xtest_compress.write
                  [xself]
                    memory > xn
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          xn.write (((xlen)) ((xs)))
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xcompress)) ((((xg)) ((xs)))) ((((xrepeat)) (1))))))) ((((xlist)) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ((((xX)) ((xs)))) ((((xrepeat)) (1))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcompress)) ((((xN)) ((xs)))) ((((xrepeat)) (1))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xcompress)) ((((xE)) ((xs)))) ((((xrepeat)) (1))))))
                xtest_product.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xproduct)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xproduct)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xproduct)) ((((xE)) ((xs)))))
                xtest_cycle.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xtgtlen
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgtlen.write ((((xlen)) ((xs))).mul 3)
                              xexpected.write ((((xlist)) ((((xg)) ((xs))))).mul 3)
                              xactual.write (((xlist)) ((((xislice)) ((((xcycle)) ((((xg)) ((xs)))))) ((xtgtlen)))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((xactual)) ((xexpected)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcycle)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xcycle)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xcycle)) ((((xE)) ((xs)))))))
                xtest_groupby.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (1000))) ((((unsupported)) (7) (11))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((unsupported)) ((xk)) ((((unsupported)) ((xk)) ((xsb)))) ((((xgroupby)) ((((xg)) ((xs)))))))) ((((xlist)) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgroupby)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xgroupby)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xgroupby)) ((((xE)) ((xs)))))))
                xtest_filter.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (1000))) ((((unsupported)) (7) (11))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilter)) ((xisEven)) ((((xg)) ((xs)))))))) ((((unsupported)) ((xx)) ((xx)) ((((xg)) ((xs)))) ((((xisEven)) ((xx)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)) ((xisEven)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilter)) ((xisEven)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xfilter)) ((xisEven)) ((((xE)) ((xs)))))))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (1000))) ((((unsupported)) (7) (11))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xfilterfalse)) ((xisEven)) ((((xg)) ((xs)))))))) ((((unsupported)) ((xx)) ((xx)) ((((xg)) ((xs)))) ((((xisOdd)) ((xx)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)) ((xisEven)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xfilterfalse)) ((xisEven)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xfilterfalse)) ((xisEven)) ((((xE)) ((xs)))))))
                xtest_zip.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((((xg)) ((xs)))))))) ((((xlzip)) ((((xg)) ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))) ((((xlzip)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xzip)) ((((xE)) ((xs)))))))
                xtest_ziplongest.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((xg)) ((xs)))))))) ((((xlist)) ((((xzip)) ((((xg)) ((xs)))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xzip_longest)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))) ((((xlist)) ((((xzip)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip_longest)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xzip_longest)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xzip_longest)) ((((xE)) ((xs)))))))
                xtest_map.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (100))) ((((unsupported)) (7) (11))) ((((xrange)) (20) (50) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) ((xonearg)) ((((xg)) ((xs)))))))) ((((unsupported)) ((((xonearg)) ((xx)))) ((xx)) ((((xg)) ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xmap)) (((xoperator).xpow)) ((((xg)) ((xs)))) ((((xg)) ((xs)))))))) ((((unsupported)) ((((unsupported)) ((xx)) ((xx)))) ((xx)) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)) ((xonearg)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xmap)) ((xonearg)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xmap)) ((xonearg)) ((((xE)) ((xs)))))))
                xtest_islice.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("12345") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xislice)) ((((xg)) ((xs)))) (1) ("None: is there a None literal in the EO language?") (2))))) ((((unsupported)) ((((xlist)) ((((xg)) ((xs)))))) ((((unsupported)) (1) (2))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xislice)) ((((xX)) ((xs)))) (10))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xislice)) ((((xN)) ((xs)))) (10))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xislice)) ((((xE)) ((xs)))) (10))))
                xtest_starmap.write
                  [xself]
                    memory > xss
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (100))) ((((unsupported)) (7) (11))) ((((xrange)) (20) (50) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xss.write (((xlzip)) ((xs)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((xg)) ((xss)))))))) ((((unsupported)) ((((unsupported)) ((xx)) ((xx)))) ((xx)) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((xX)) ((xss)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((xN)) ((xss)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xstarmap)) (((xoperator).xpow)) ((((xE)) ((xss)))))))
                xtest_takewhile.write
                  [xself]
                    memory > xtgt
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (1000))) ((((unsupported)) (7) (11))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgt.write (((unsupported)) 0)
                              (((unsupported)) ((xelem)) ((((xg)) ((xs)))))
                                seq
                                  ((((xisEven)) ((xelem))).not).if
                                    (((unsupported)) 0)
                                  bogusForceDataize.write ((((xtgt).xappend)) ((xelem)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xtakewhile)) ((xisEven)) ((((xg)) ((xs)))))))) ((xtgt)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtakewhile)) ((xisEven)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtakewhile)) ((xisEven)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xtakewhile)) ((xisEven)) ((((xE)) ((xs)))))))
                xtest_dropwhile.write
                  [xself]
                    memory > xtgt
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ((((xrange)) (10))) ((((xrange)) (0))) ((((xrange)) (1000))) ((((unsupported)) (7) (11))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgt.write (((unsupported)) 0)
                              (((unsupported)) ((xelem)) ((((xg)) ((xs)))))
                                seq
                                  (((xtgt).not).and (((xisOdd)) ((xelem)))).if
                                    (((unsupported)) 0)
                                  bogusForceDataize.write ((((xtgt).xappend)) ((xelem)))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((((xdropwhile)) ((xisOdd)) ((((xg)) ((xs)))))))) ((xtgt)))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdropwhile)) ((xisOdd)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xdropwhile)) ((xisOdd)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((xdropwhile)) ((xisOdd)) ((((xE)) ((xs)))))))
                xtest_tee.write
                  [xself]
                    seq > @
                      (((unsupported)) ((xs)) ((((unsupported)) ("123") ("") ((((xrange)) (1000))) ((((unsupported)) ("do") (1.2))) ((((xrange)) (2000) (2200) (5))))))
                        seq
                          (((unsupported)) ((xg)) ((((unsupported)) ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              (((unsupported)) ((((unsupported)) ((xit1)) ((xit2)))) ((((xtee)) ((((xg)) ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit1)))) ((((xlist)) ((((xg)) ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)) ((((xlist)) ((xit2)))) ((((xlist)) ((((xg)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) ((((xX)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xTypeError)) ((xtee)) ((((xN)) ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)) ((xZeroDivisionError)) ((xlist)) ((((unsupported)) ((((xtee)) ((((xE)) ((xs)))))) (0))))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_repeat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((xrepeat)) ("None: is there a None literal in the EO language?") (50))))) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((xrepeat)) ("None: is there a None literal in the EO language?") (0))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((xrepeat)) ("None: is there a None literal in the EO language?"))) (12))) (12))
                xtest_repeat_with_negative_times.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((xrepeat)) ("None: is there a None literal in the EO language?") ((1.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((xrepeat)) ("None: is there a None literal in the EO language?") ((2.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((unsupported)) ((xrepeat)) ("None: is there a None literal in the EO language?") ((1.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xoperator).xlength_hint)) ((((unsupported)) ((xrepeat)) ("None: is there a None literal in the EO language?") ((2.neg)))))) (0))
            (((unsupported)) (((xunittest).xTestCase)))
              seq
                xtest_sf_793826.write
                  [xself]
                    memory > xfirst
                    memory > xmutatingtuple
                    memory > xf
                    memory > xsecond
                    seq > @
                      seq
                        xmutatingtuple.write
                          [xtuple1 xf xtuple2]
                            memory > xgen
                            memory > xitems
                            memory > xz
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  [xvalue xfirst]
                                    seq > @
                                      (((unsupported)) 0)
                                        (xfirst).if
                                          seq
                                            (((unsupported)) ((((unsupported)) ((((unsupported)) ((xfirst)) ((((unsupported)) 0)))))))
                                            bogusForceDataize.write (((xf)) ((((xnext)) ((xz)))))
                                        (((unsupported)) ((xvalue)))
                                xitems.write (((xlist)) ((xtuple2)))
                                (((unsupported)) ((((unsupported)) ((xitems)) ((((unsupported)) (1) (1))))) ((((xlist)) ((xtuple1)))))
                                xgen.write (((xmap)) ((xg)) ((xitems)))
                                xz.write (((xzip)) ((((unsupported)) (((((unsupported)) ((xgen))).mul (((xlen)) ((xtuple1))))))))
                                bogusForceDataize.write (((xnext)) ((xz)))
                        xf.write
                          [xt]
                            memory > xT
                            seq > @
                              seq
                                (((unsupported)) 0)
                                xT.write (xt)
                                (((unsupported)) ((((unsupported)) ((xfirst)) ((((unsupported)) 0)))) ((((xlist)) ((xT)))))
                        xfirst.write (((unsupported)) 0)
                        bogusForceDataize.write (((xmutatingtuple)) ((((unsupported)) (1) (2) (3))) ((xf)) ((((unsupported)) (4) (5) (6))))
                        xsecond.write (((xlist)) ((xT)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xfirst)) ((xsecond)))
                xtest_sf_950057.write
                  [xself]
                    memory > xhist
                    memory > xgen2
                    memory > xgen1
                    seq > @
                      seq
                        xgen1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhist).xappend)) (0))
                                (((unsupported)) (1))
                                bogusForceDataize.write ((((xhist).xappend)) (1))
                                (((unsupported)) ((xAssertionError)))
                                bogusForceDataize.write ((((xhist).xappend)) (2))
                        xgen2.write
                          [xx]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhist).xappend)) (3))
                                (((unsupported)) (2))
                                bogusForceDataize.write ((((xhist).xappend)) (4))
                        xhist.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) ((xlist)) ((((xchain)) ((((xgen1)) 0)) ((((xgen2)) (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhist)) ((((unsupported)) (0) (1))))
                        xhist.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) ((xlist)) ((((xchain)) ((((xgen1)) 0)) ((((xgen2)) (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhist)) ((((unsupported)) (0) (1))))
                        xhist.write (((unsupported)) 0)
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) ((xlist)) ((((xcycle)) ((((xgen1)) 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xhist)) ((((unsupported)) (0) (1))))
                xtest_long_chain_of_empty_iterables.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)) 0)
                        xit.write ((((xchain).xfrom_iterable)) ((((unsupported)) ((((unsupported)) 0)) ((xunused)) ((((xrange)) (10000000))))))
                        (((unsupported)) (((((xself).xassertRaises)) ((xStopIteration)))))
                          bogusForceDataize.write (((xnext)) ((xit)))
                xtest_issue30347_1.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xn]
                            seq > @
                              seq
                                ((xn).eq 5).if
                                  bogusForceDataize.write (((xlist)) ((xb)))
                                (((unsupported)) (((xn).neq 6)))
                        (((unsupported)) ((((unsupported)) ((xk)) ((xb)))) ((((xgroupby)) ((((xrange)) (10))) ((xf)))))
                          bogusForceDataize.write (((xlist)) ((xb)))
                xtest_issue30347_2.write
                  [xself]
                    memory > x__eq__
                    memory > xi
                    memory > x__init__
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)) 0)
                          seq
                            x__init__.write
                              [xself xv]
                                seq > @
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)) 0)
                                    (((unsupported)) ((xi)) (1))
                                    ((xi).eq 1).if
                                      bogusForceDataize.write (((xnext)) ((xg)) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)) (TRUE))
                        xi.write 0
                        xg.write (((unsupported)) ((((xnext)) ((((xgroupby)) ((((xrange)) (10))) ((xK)))))) (1))
                        (((unsupported)) ((xj)) ((((xrange)) (2))))
                          bogusForceDataize.write (((xnext)) ((xg)) ("None: is there a None literal in the EO language?"))
            (((unsupported)) (((xunittest).xTestCase)))
              xtest_keywords_in_subclass.write
                [xself]
                  memory > x__init__
                  seq > @
                    (((unsupported)) ((xcls)) ((((unsupported)) ((xrepeat)) ((xzip)) ((xfilter)) ((xfilterfalse)) ((xchain)) ((xmap)) ((xstarmap)) ((xislice)) ((xtakewhile)) ((xdropwhile)) ((xcycle)) ((xcompress)))))
                      seq
                        (((unsupported)) ((xcls)))
                          x__init__.write
                            [xself xnewarg]
                              seq > @
                                (((unsupported)) 0)
                                  bogusForceDataize.write ((((xcls).x__init__)) ((xself)) ((((unsupported)) ((xargs)))))
                        (((unsupported)) ((xTypeError)))
                          (((unsupported)) ((xSubclass)) (1))
                          bogusForceDataize.write ((((xself).xassertNotIn)) ("keyword arguments") ((((unsupported)) (((xerr).xargs)) (0))))
            (((unsupported)) (((xunittest).xTestCase)) (((xsupport).xcpython_only)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xssize_t)) (((((xstruct).xcalcsize)) ("n"))))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_product_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)) ("3Pi"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)) ((((xproduct)) ("ab") ("12"))) (((xbasesize).add (2.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xproduct)) ((((unsupported)) (((((unsupported)) ("abc")).mul 10)))))) (((xbasesize).add (10.mul ((xself).xssize_t)))))
                xtest_combinations_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)) ("3Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)) ((((xcombinations)) ("abcd") (3))) (((xbasesize).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xcombinations)) ((((xrange)) (10))) (4))) (((xbasesize).add (4.mul ((xself).xssize_t)))))
                xtest_combinations_with_replacement_sizeof.write
                  [xself]
                    memory > xcwr
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xcwr.write (xcombinations_with_replacement)
                        xbasesize.write ((((xsupport).xcalcobjsize)) ("3Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)) ((((xcwr)) ("abcd") (3))) (((xbasesize).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xcwr)) ((((xrange)) (10))) (4))) (((xbasesize).add (4.mul ((xself).xssize_t)))))
                xtest_permutations_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)) ("4Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)) ((((xpermutations)) ("abcd"))) ((((xbasesize).add (4.mul ((xself).xssize_t))).add (4.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xpermutations)) ("abcd") (3))) ((((xbasesize).add (4.mul ((xself).xssize_t))).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xpermutations)) ("abcde") (3))) ((((xbasesize).add (5.mul ((xself).xssize_t))).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)) ((((xpermutations)) ((((xrange)) (10))) (4))) ((((xbasesize).add (10.mul ((xself).xssize_t))).add (4.mul ((xself).xssize_t)))))
            xlibreftest.write (((unsupported)) 0)
            x__test__.write (((unsupported)) ("libreftest") ((xlibreftest)))
            xtest_main.write
              [xverbose]
                memory > xtest_classes
                memory > xcounts
                seq > @
                  (((unsupported)) 0)
                    xtest_classes.write (((unsupported)) ((xTestBasicOps)) ((xTestVariousIteratorArgs)) ((xTestGC)) ((xRegressionTests)) ((xLengthTransparency)) ((xSubclassWithKwargsTest)) ((xTestExamples)) ((xTestPurePythonRoughEquivalents)) ((xSizeofTest)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtest_classes)))))
                    ((xverbose).and (((xhasattr)) ((xsys)) ("gettotalrefcount"))).if
                      seq
                        (((unsupported)) 0)
                        xcounts.write ((((unsupported)) ("None: is there a None literal in the EO language?")).mul 5)
                        (((unsupported)) ((xi)) ((((xrange)) ((((xlen)) ((xcounts)))))))
                          seq
                            bogusForceDataize.write ((((xsupport).xrun_unittest)) ((((unsupported)) ((xtest_classes)))))
                            bogusForceDataize.write ((((xgc).xcollect)) 0)
                            (((unsupported)) ((((unsupported)) ((xcounts)) ((xi)))) (((((xsys).xgettotalrefcount)) 0)))
                        bogusForceDataize.write (((xprint)) ((xcounts)))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)) ((((unsupported)) (((xsys).xmodules)) ((x__name__)))) ((xverbose)))
            ((x__name__).eq "__main__").if
              (((unsupported)) ((xtest_main)) (TRUE))