memory > xinspect
memory > xstdout
memory > xclinic
memory > xAssertionError
memory > xgroup
memory > xopen
memory > xCopyParser
memory > xFakeConverter
memory > xFakeClinic
memory > xkwargs
memory > x__name__
memory > xInertParser
memory > xDSLParser
memory > xblock
memory > xlist
memory > xTestCase
memory > xtmp_dir
memory > xcollections
memory > xFakeConvertersDict
memory > xf
memory > xFakeConverterFactory
memory > xrepr
memory > xmodule
memory > xsupport
memory > xsys
memory > xargs
memory > xos
memory > xsetattr
memory > xSystemExit
memory > xfunction
memory > x__file__
memory > xname
memory > xunittest
memory > xisinstance
memory > xlen
[] > test_clinic
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xparse
        memory > xtest_solo_newline
        memory > xis_directive
        memory > xtest_range
        memory > xtest_trivial
        memory > xtest_init_with_no_parameters
        memory > xtest_star
        memory > xtest_ludicrous
        memory > x_test_clinic
        memory > xtest_parameters_required_after_star_with_initial_parameters_and_docstring
        memory > xtest_param
        memory > xtest_empty_substitution
        memory > xtest_disallowed_grouping__empty_group_on_right
        memory > xparse_function
        memory > xtest_have_left_options_but_required_is_empty
        memory > xtest_illegal_c_basename
        memory > xtest_group
        memory > xc
        memory > x__call__
        memory > xtest_empty_strings
        memory > xtest_clinic_1
        memory > xtest_single_star
        memory > x_module_and_class
        memory > xget
        memory > xtest_param_default
        memory > xtest_param_default_parameters_out_of_order
        memory > xtest_illegal_module_line
        memory > xtest_round_trip_1
        memory > xtest_external
        memory > xtest_function_not_at_column_0
        memory > xadd_destination
        memory > xtest_ignore_line
        memory > xtest_disallowed_grouping__two_top_groups_on_left
        memory > xtest_multiline_substitution
        memory > xtest_scaffolding
        memory > xtest_disallowed_grouping__group_after_parameter_on_left
        memory > xtest_param_default_expression
        memory > xround_trip
        memory > xtest_right_only
        memory > xget_destination
        memory > xtest_directive
        memory > xdirective
        memory > xtest_explicit_parameters_in_docstring
        memory > xtest_nested_groups
        memory > xdisabled_test_converter_arguments
        memory > xtest_eol
        memory > xtest_disallowed_grouping__parameter_after_group_on_right
        memory > xtest_add_window
        memory > xtest_parameters_required_after_star_without_initial_parameters_or_docstring
        memory > xtest_return_converter
        memory > xtest_parameters_required_after_star_without_initial_parameters_with_docstring
        memory > x_test
        memory > xtest_param_no_docstring
        memory > xclinic_path
        memory > xtest_round_trip_2
        memory > xtest_single_slash
        memory > xmaxDiff
        memory > xtest_parameters_not_permitted_after_slash_for_now
        memory > xtest_mix_star_and_slash
        memory > xtest_parser_regression_special_character_in_parameter_column_of_docstring_first_line
        memory > xtest_function_docstring
        memory > x__init__
        memory > xtest_c_name
        memory > xtest_disallowed_grouping__empty_group_on_left
        memory > xtest_single_line_substitution
        memory > xtest_param_with_continuations
        memory > xparse_function_should_fail
        memory > xtest_disallowed_grouping__two_top_groups_on_right
        memory > xtest_no_parameters
        memory > xtest_no_substitution
        memory > xtest_left_group
        memory > xtest_parameters_required_after_star_with_initial_parameters_without_docstring
        memory > xtest_legacy_converters
        seq > @
          seq
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            (((unsupported)) 0)
            xclinic_path.write (((((xos).xpath).xjoin)) ((((((xos).xpath).xdirname)) ((x__file__)))) ("..") ("..") ("Tools") ("clinic"))
            xclinic_path.write (((((xos).xpath).xnormpath)) ((xclinic_path)))
            ((((((xos).xpath).xexists)) ((xclinic_path))).not).if
              (((unsupported)) (((((xunittest).xSkipTest)) ("{clinic_path!r} path does not exist"))))
            bogusForceDataize.write (((((xsys).xpath).xappend)) ((xclinic_path)))
            (((unsupported)) 0)
              seq
                (((unsupported)) 0)
                (((unsupported)) 0)
              (((unsupported)) ((((unsupported)) ((((unsupported)) (((xsys).xpath)) ((1.neg)))))))
            (((unsupported)) 0)
              x__init__.write
                [xself xname xargs]
                  seq > @
                    seq
                      (((unsupported)) (((xself).xname)) ((xname)))
                      (((unsupported)) (((xself).xargs)) ((xargs)))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)) (((xself).xname)) ((xname)))
                x__call__.write
                  [xself xname xdefault]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((((xFakeConverter)) (((xself).xname)) ((xkwargs)))))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).xused_converters)) ((((unsupported)) 0)))
                xget.write
                  [xself xname xdefault]
                    seq > @
                      (((unsupported)) ((((((xself).xused_converters).xsetdefault)) ((xname)) ((((xFakeConverterFactory)) ((xname)))))))
            xc.write (((unsupported)) (((xclinic).xClinic)) ("C") ("file"))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)) (((xself).xconverters)) ((((xFakeConvertersDict)) 0)))
                        (((unsupported)) (((xself).xlegacy_converters)) ((((xFakeConvertersDict)) 0)))
                        (((unsupported)) (((xself).xlanguage)) (((((xclinic).xCLanguage)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)) (((xself).xfilename)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)) (((xself).xdestination_buffers)) ((((unsupported)) 0)))
                        (((unsupported)) (((xself).xblock_parser)) (((((xclinic).xBlockParser)) ("") (((xself).xlanguage)))))
                        (((unsupported)) (((xself).xmodules)) (((((xcollections).xOrderedDict)) 0)))
                        (((unsupported)) (((xself).xclasses)) (((((xcollections).xOrderedDict)) 0)))
                        (((unsupported)) (((xclinic).xclinic)) ((xself)))
                        (((unsupported)) (((xself).xname)) ("FakeClinic"))
                        (((unsupported)) (((xself).xline_prefix)) (((xself).xline_suffix)) (""))
                        (((unsupported)) (((xself).xdestinations)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xadd_destination)) ("block") ("buffer"))
                        bogusForceDataize.write ((((xself).xadd_destination)) ("file") ("buffer"))
                        bogusForceDataize.write ((((xself).xadd_destination)) ("suppress") ("suppress"))
                        xd.write (((xself).xdestinations).xget)
                        (((unsupported)) (((xself).xfield_destinations)) (((((xcollections).xOrderedDict)) ((((unsupported)) ((((unsupported)) ("docstring_prototype") ((((xd)) ("suppress"))))) ((((unsupported)) ("docstring_definition") ((((xd)) ("block"))))) ((((unsupported)) ("methoddef_define") ((((xd)) ("block"))))) ((((unsupported)) ("impl_prototype") ((((xd)) ("block"))))) ((((unsupported)) ("parser_prototype") ((((xd)) ("suppress"))))) ((((unsupported)) ("parser_definition") ((((xd)) ("block"))))) ((((unsupported)) ("impl_definition") ((((xd)) ("block"))))))))))
                xget_destination.write
                  [xself xname]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((((xself).xdestinations).xget)) ((xname)))
                        ((xd).not).if
                          bogusForceDataize.write ((((xsys).xexit)) (("Destination does not exist: ".add (((xrepr)) ((xname))))))
                        (((unsupported)) ((xd)))
                xadd_destination.write
                  [xself xname xtype]
                    seq > @
                      (((unsupported)) 0)
                        (((unsupported)) ((xname)) (((xself).xdestinations))).if
                          bogusForceDataize.write ((((xsys).xexit)) (("Destination already exists: ".add (((xrepr)) ((xname))))))
                        (((unsupported)) ((((unsupported)) (((xself).xdestinations)) ((xname)))) (((((xclinic).xDestination)) ((xname)) ((xtype)) ((xself)) ((((unsupported)) ((xargs)))))))
                xis_directive.write
                  [xself xname]
                    seq > @
                      (((unsupported)) (((xname).eq "module")))
                xdirective.write
                  [xself xname xargs]
                    seq > @
                      (((unsupported)) ((((unsupported)) (((xself).xcalled_directives)) ((xname)))) ((xargs)))
                x_module_and_class.write (((xclinic).xClinic).x_module_and_class)
            (((unsupported)) ((xTestCase)))
              xtest_eol.write
                [xself]
                  memory > xc
                  memory > xend_line
                  memory > xraw
                  memory > xcooked
                  seq > @
                    seq
                      xc.write (((unsupported)) (((xclinic).xClinic)) (((((xclinic).xCLanguage)) ("None: is there a None literal in the EO language?"))) ("file"))
                      xraw.write "/*[clinic]nfoon[clinic]*/"
                      xcooked.write (((((((xc).xparse)) ((xraw))).xsplitlines)) 0)
                      xend_line.write ((((((unsupported)) ((xcooked)) (2)).xrstrip)) 0)
                      bogusForceDataize.write ((((xself).xassertNotEqual)) ((xend_line)) ("[clinic]*/[clinic]*/"))
                      bogusForceDataize.write ((((xself).xassertEqual)) ((xend_line)) ("[clinic]*/"))
            (((unsupported)) ((xTestCase)))
              seq
                x_test.write
                  [xself xl xm xr xoutput]
                    memory > xcomputed
                    seq > @
                      seq
                        xcomputed.write ((((xclinic).xpermute_optional_groups)) ((xl)) ((xm)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((xcomputed)))
                xtest_range.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ((((unsupported)) ((((unsupported)) ("start"))))) ((((unsupported)) ("stop"))) ((((unsupported)) ((((unsupported)) ("step"))))) ((((unsupported)) ((((unsupported)) ("stop"))) ((((unsupported)) ("start") ("stop"))) ((((unsupported)) ("start") ("stop") ("step"))))))
                xtest_add_window.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ((((unsupported)) ((((unsupported)) ("x") ("y"))))) ((((unsupported)) ("ch"))) ((((unsupported)) ((((unsupported)) ("attr"))))) ((((unsupported)) ((((unsupported)) ("ch"))) ((((unsupported)) ("ch") ("attr"))) ((((unsupported)) ("x") ("y") ("ch"))) ((((unsupported)) ("x") ("y") ("ch") ("attr"))))))
                xtest_ludicrous.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ((((unsupported)) ((((unsupported)) ("a1") ("a2") ("a3"))) ((((unsupported)) ("b1") ("b2"))))) ((((unsupported)) ("c1"))) ((((unsupported)) ((((unsupported)) ("d1") ("d2"))) ((((unsupported)) ("e1") ("e2") ("e3"))))) ((((unsupported)) ((((unsupported)) ("c1"))) ((((unsupported)) ("b1") ("b2") ("c1"))) ((((unsupported)) ("b1") ("b2") ("c1") ("d1") ("d2"))) ((((unsupported)) ("a1") ("a2") ("a3") ("b1") ("b2") ("c1"))) ((((unsupported)) ("a1") ("a2") ("a3") ("b1") ("b2") ("c1") ("d1") ("d2"))) ((((unsupported)) ("a1") ("a2") ("a3") ("b1") ("b2") ("c1") ("d1") ("d2") ("e1") ("e2") ("e3"))))))
                xtest_right_only.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ((((unsupported)) 0)) ((((unsupported)) 0)) ((((unsupported)) ((((unsupported)) ("a"))) ((((unsupported)) ("b"))) ((((unsupported)) ("c"))))) ((((unsupported)) ((((unsupported)) 0)) ((((unsupported)) ("a"))) ((((unsupported)) ("a") ("b"))) ((((unsupported)) ("a") ("b") ("c"))))))
                xtest_have_left_options_but_required_is_empty.write
                  [xself]
                    memory > xfn
                    seq > @
                      seq
                        xfn.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xclinic).xpermute_optional_groups)) ((((unsupported)) ("a"))) ((((unsupported)) 0)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertRaises)) ((xAssertionError)) ((xfn)))
            (((unsupported)) ((xTestCase)))
              seq
                x_test.write
                  [xself xinput xoutput]
                    memory > xcomputed
                    seq > @
                      (((unsupported)) 0)
                        xcomputed.write ((((xclinic).xlinear_format)) ((xinput)) ((((unsupported)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((xcomputed)))
                xtest_empty_strings.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ("") (""))
                xtest_solo_newline.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ("n") ("n"))
                xtest_no_substitution.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)) ((((unsupported)) 0)) ((((unsupported)) 0)))
                xtest_empty_substitution.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ((((unsupported)) 0)) ((((unsupported)) 0)) (""))
                xtest_single_line_substitution.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ((((unsupported)) 0)) ((((unsupported)) 0)) ("GARGLE"))
                xtest_multiline_substitution.write
                  [xself]
                    seq > @
                      (((unsupported)) (((xself).x_test)) ((((unsupported)) 0)) ((((unsupported)) 0)) ("binglenbunglen"))
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xclinic]
                    seq > @
                xparse.write
                  [xself xblock]
                    seq > @
            (((unsupported)) 0)
              seq
                x__init__.write
                  [xself xclinic]
                    seq > @
                xparse.write
                  [xself xblock]
                    seq > @
                      (((unsupported)) (((xblock).xoutput)) (((xblock).xinput)))
            (((unsupported)) ((xTestCase)))
              seq
                x_test.write
                  [xself xinput xoutput]
                    memory > xlanguage
                    memory > xwriter
                    memory > xblocks
                    seq > @
                      seq
                        xlanguage.write ((((xclinic).xCLanguage)) ("None: is there a None literal in the EO language?"))
                        xblocks.write (((xlist)) (((((xclinic).xBlockParser)) ((xinput)) ((xlanguage)))))
                        xwriter.write ((((xclinic).xBlockPrinter)) ((xlanguage)))
                        (((unsupported)) ((xblock)) ((xblocks)))
                          bogusForceDataize.write ((((xwriter).xprint_block)) ((xblock)))
                        xoutput.write (((((xwriter).xf).xgetvalue)) 0)
                        (((unsupported)) (((xoutput).eq (xinput))) (((("output != input!nnoutput ".add (((xrepr)) ((xoutput)))).add "nn input ").add (((xrepr)) ((xinput))))))
                xround_trip.write
                  [xself xinput]
                    seq > @
                      (((unsupported)) (((((xself).x_test)) ((xinput)) ((xinput)))))
                xtest_round_trip_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xround_trip)) ((((unsupported)) 0)))
                xtest_round_trip_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xround_trip)) ((((unsupported)) 0)))
                x_test_clinic.write
                  [xself xinput xoutput]
                    memory > xlanguage
                    memory > xcomputed
                    memory > xc
                    seq > @
                      seq
                        xlanguage.write ((((xclinic).xCLanguage)) ("None: is there a None literal in the EO language?"))
                        xc.write (((unsupported)) (((xclinic).xClinic)) ((xlanguage)) ("file"))
                        (((unsupported)) ((((unsupported)) (((xc).xparsers)) ("inert"))) ((((xInertParser)) ((xc)))))
                        (((unsupported)) ((((unsupported)) (((xc).xparsers)) ("copy"))) ((((xCopyParser)) ((xc)))))
                        xcomputed.write ((((xc).xparse)) ((xinput)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xoutput)) ((xcomputed)))
                xtest_clinic_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_clinic)) ((((unsupported)) 0)) ((((unsupported)) 0)))
            (((unsupported)) ((xTestCase)))
              seq
                xtest_trivial.write
                  [xself]
                    memory > xblock
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xDSLParser)) ((((xFakeClinic)) 0)))
                        xblock.write ((((xclinic).xBlock)) ("module osnos.access"))
                        bogusForceDataize.write ((((xparser).xparse)) ((xblock)))
                        (((unsupported)) ((((unsupported)) ((xmodule)) ((xfunction)))) (((xblock).xsignatures)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("access") (((xfunction).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("os") (((xmodule).xname)))
                xtest_ignore_line.write
                  [xself]
                    memory > xblock
                    seq > @
                      seq
                        xblock.write ((((xself).xparse)) ("#nmodule osnos.access"))
                        (((unsupported)) ((((unsupported)) ((xmodule)) ((xfunction)))) (((xblock).xsignatures)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("access") (((xfunction).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("os") (((xmodule).xname)))
                xtest_param.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.accessn   path: int"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("access") (((xfunction).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (2) ((((xlen)) (((xfunction).xparameters)))))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("path"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("path") (((xp).xname)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xp).xconverter)) (((xclinic).xint_converter)))
                xtest_param_default.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.accessn    follow_symlinks: bool = True"))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("follow_symlinks"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) (((xp).xdefault)))
                xtest_param_with_continuations.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("follow_symlinks"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (TRUE) (((xp).xdefault)))
                xtest_param_default_expression.write
                  [xself]
                    memory > xfunction
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.accessn    follow_symlinks: int(c_default='MAXSIZE') = sys.maxsize"))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("follow_symlinks"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((xsys).xmaxsize)) (((xp).xdefault)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("MAXSIZE") ((((xp).xconverter).xc_default)))
                        xs.write ((((xself).xparse_function_should_fail)) ("module osnos.accessn    follow_symlinks: int = sys.maxsize"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ("Error on line 0:nWhen you specify a named constant ('sys.maxsize') as your default value,nyou MUST specify a valid c_default.n"))
                xtest_param_no_docstring.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("follow_symlinks"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (3) ((((xlen)) (((xfunction).xparameters)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) (((xfunction).xparameters)) ("something_else")).xconverter)) (((xclinic).xstr_converter)))
                xtest_param_default_parameters_out_of_order.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((((unsupported)) 0)))
                xdisabled_test_converter_arguments.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.accessn    path: path_t(allow_fd=1)"))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("path"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((unsupported)) ((((xp).xconverter).xargs)) ("allow_fd"))))
                xtest_function_docstring.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).xstrip)) 0)) (((xfunction).xdocstring)))
                xtest_explicit_parameters_in_docstring.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).xstrip)) 0)) (((xfunction).xdocstring)))
                xtest_parser_regression_special_character_in_parameter_column_of_docstring_first_line.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("stat($module, /, path)n--nnThis/used to break Clinic!") (((xfunction).xdocstring)))
                xtest_c_name.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.stat as os_stat_fn"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("os_stat_fn") (((xfunction).xc_basename)))
                xtest_return_converter.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.stat -> int"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((xfunction).xreturn_converter)) (((xclinic).xint_return_converter)))
                xtest_star.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module osnos.accessn    *n    follow_symlinks: bool = True"))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("follow_symlinks"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xinspect).xParameter).xKEYWORD_ONLY)) (((xp).xkind)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (0) (((xp).xgroup)))
                xtest_group.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ("module windownwindow.bordern [n ls : intn ]n /n"))
                        xp.write (((unsupported)) (((xfunction).xparameters)) ("ls"))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) (((xp).xgroup)))
                xtest_left_group.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xgroup)))) ((((unsupported)) ((((unsupported)) ("y") ((1.neg)))) ((((unsupported)) ("x") ((1.neg)))) ((((unsupported)) ("ch") (0))) ((((unsupported)) ("attr") (1))))))
                          seq
                            xp.write (((unsupported)) (((xfunction).xparameters)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xgroup)) ((xgroup)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xkind)) ((((xinspect).xParameter).xPOSITIONAL_ONLY)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfunction).xdocstring).xstrip)) 0)) (((((((unsupported)) 0).xstrip)) 0)))
                xtest_nested_groups.write
                  [xself]
                    memory > xfunction
                    memory > xp
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        (((unsupported)) ((((unsupported)) ((xname)) ((xgroup)))) ((((unsupported)) ((((unsupported)) ("y1") ((2.neg)))) ((((unsupported)) ("y2") ((2.neg)))) ((((unsupported)) ("x1") ((1.neg)))) ((((unsupported)) ("x2") ((1.neg)))) ((((unsupported)) ("ch") (0))) ((((unsupported)) ("attr1") (1))) ((((unsupported)) ("attr2") (1))) ((((unsupported)) ("attr3") (1))) ((((unsupported)) ("attr4") (2))) ((((unsupported)) ("attr5") (2))) ((((unsupported)) ("attr6") (2))))))
                          seq
                            xp.write (((unsupported)) (((xfunction).xparameters)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xgroup)) ((xgroup)))
                            bogusForceDataize.write ((((xself).xassertEqual)) (((xp).xkind)) ((((xinspect).xParameter).xPOSITIONAL_ONLY)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((((xfunction).xdocstring).xstrip)) 0)) (((((((unsupported)) 0).xstrip)) 0)))
                xparse_function_should_fail.write
                  [xself xs]
                    seq > @
                      seq
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          (((unsupported)) (((((xself).xassertRaises)) ((xSystemExit)))))
                            bogusForceDataize.write ((((xself).xparse_function)) ((xs)))
                        (((unsupported)) (((((xstdout).xgetvalue)) 0)))
                xtest_disallowed_grouping__two_top_groups_on_left.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ("Error on line 0:nFunction two_top_groups_on_left has an unsupported group configuration. (Unexpected state 2.b)n"))
                xtest_disallowed_grouping__two_top_groups_on_right.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_disallowed_grouping__parameter_after_group_on_right.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_disallowed_grouping__group_after_parameter_on_left.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_disallowed_grouping__empty_group_on_left.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_disallowed_grouping__empty_group_on_right.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_no_parameters.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("bar($module, /)n--nnDocstring") (((xfunction).xdocstring)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((xfunction).xparameters)))))
                xtest_init_with_no_parameters.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write (((unsupported)) (((xself).xparse_function)) ((((unsupported)) 0)) (3) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)) ("Bar()n--nnDocstring") (((xfunction).xdocstring)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (1) ((((xlen)) (((xfunction).xparameters)))))
                xtest_illegal_module_line.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_illegal_c_basename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_single_star.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_parameters_required_after_star_without_initial_parameters_or_docstring.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_parameters_required_after_star_without_initial_parameters_with_docstring.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_parameters_required_after_star_with_initial_parameters_without_docstring.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_parameters_required_after_star_with_initial_parameters_and_docstring.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_single_slash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_mix_star_and_slash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_parameters_not_permitted_after_slash_for_now.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xparse_function_should_fail)) ((((unsupported)) 0)))
                xtest_function_not_at_column_0.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        xfunction.write ((((xself).xparse_function)) ((((unsupported)) 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((((unsupported)) 0).xstrip)) 0)) (((xfunction).xdocstring)))
                xtest_directive.write
                  [xself]
                    memory > xblock
                    memory > xc
                    memory > xparser
                    seq > @
                      seq
                        xc.write (((xFakeClinic)) 0)
                        xparser.write (((xDSLParser)) ((xc)))
                        (((unsupported)) (((xparser).xflag)) (FALSE))
                        (((unsupported)) ((((unsupported)) (((xparser).xdirectives)) ("setflag"))) ((((unsupported)) ((((xsetattr)) ((xparser)) ("flag") (TRUE))))))
                        xblock.write ((((xclinic).xBlock)) ("setflag"))
                        bogusForceDataize.write ((((xparser).xparse)) ((xblock)))
                        bogusForceDataize.write ((((xself).xassertTrue)) (((xparser).xflag)))
                xtest_legacy_converters.write
                  [xself]
                    memory > xblock
                    seq > @
                      seq
                        xblock.write ((((xself).xparse)) ("module osnos.accessn   path: \"s\""))
                        (((unsupported)) ((((unsupported)) ((xmodule)) ((xfunction)))) (((xblock).xsignatures)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)) (((((unsupported)) (((xfunction).xparameters)) ("path")).xconverter)) (((xclinic).xstr_converter)))
                xparse.write
                  [xself xtext]
                    memory > xblock
                    memory > xc
                    memory > xparser
                    seq > @
                      seq
                        xc.write (((xFakeClinic)) 0)
                        xparser.write (((xDSLParser)) ((xc)))
                        xblock.write ((((xclinic).xBlock)) ((xtext)))
                        bogusForceDataize.write ((((xparser).xparse)) ((xblock)))
                        (((unsupported)) ((xblock)))
                xparse_function.write
                  [xself xtext xsignatures_in_block xfunction_index]
                    memory > xs
                    memory > xblock
                    seq > @
                      (((unsupported)) 0)
                        xblock.write ((((xself).xparse)) ((xtext)))
                        xs.write ((xblock).xsignatures)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xs)))) ((xsignatures_in_block)))
                        (((unsupported)) ((((xisinstance)) ((((unsupported)) ((xs)) (0))) (((xclinic).xModule)))))
                        (((unsupported)) ((((xisinstance)) ((((unsupported)) ((xs)) ((xfunction_index)))) (((xclinic).xFunction)))))
                        (((unsupported)) ((((unsupported)) ((xs)) ((xfunction_index)))))
                xtest_scaffolding.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xclinic).xunspecified)))) ("<Unspecified>"))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xclinic).xNULL)))) ("<Null>"))
                        (((unsupported)) (((((xsupport).xcaptured_stdout)) 0)) ((xstdout)))
                          (((unsupported)) (((((xself).xassertRaises)) ((xSystemExit)))))
                            (((unsupported)) (((xclinic).xfail)) ("The igloos are melting!") ("clown.txt") (69))
                        bogusForceDataize.write ((((xself).xassertEqual)) (((((xstdout).xgetvalue)) 0)) ("Error in file \"clown.txt\" on line 69:nThe igloos are melting!n"))
            (((unsupported)) ((xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_external.write
                  [xself]
                    memory > xold_mtime_ns
                    memory > xnew_mtime_ns
                    memory > xsource
                    memory > xtestfile
                    memory > xorig_contents
                    memory > xnew_contents
                    seq > @
                      seq
                        xsource.write ((((xsupport).xfindfile)) ("clinic.test"))
                        (((unsupported)) ((((unsupported)) ((xopen)) ((xsource)) ("r") ("utf-8"))) ((xf)))
                          xorig_contents.write ((((xf).xread)) 0)
                        (((unsupported)) (((((xsupport).xtemp_dir)) 0)) ((xtmp_dir)))
                          seq
                            xtestfile.write (((((xos).xpath).xjoin)) ((xtmp_dir)) ("clinic.test.c"))
                            (((unsupported)) ((((unsupported)) ((xopen)) ((xtestfile)) ("w") ("utf-8"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)) ((xorig_contents)))
                            xold_mtime_ns.write (((((xos).xstat)) ((xtestfile))).xst_mtime_ns)
                            bogusForceDataize.write ((((xclinic).xparse_file)) ((xtestfile)))
                            (((unsupported)) ((((unsupported)) ((xopen)) ((xtestfile)) ("r") ("utf-8"))) ((xf)))
                              xnew_contents.write ((((xf).xread)) 0)
                            xnew_mtime_ns.write (((((xos).xstat)) ((xtestfile))).xst_mtime_ns)
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_contents)) ((xorig_contents)))
                        bogusForceDataize.write ((((xself).xassertEqual)) ((xnew_mtime_ns)) ((xold_mtime_ns)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)) 0)